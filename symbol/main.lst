# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; DEFINE EXCLUDE_SOUND_PLAYER
   4  4000              ; DEFINE EXCLUDE_RAM_CMDS
   5  4000              ; DEFINE EXCLUDE_VRAM_CMDS
   6  4000              ; DEFINE EXCLUDE_BLIT_CMDS
   7  4000              ; DEFINE EXCLUDE_SPRITE_CMDS
   8  4000              ; DEFINE EXCLUDE_GENCAL
   9  4000
  10  4000              CHPUT   EQU     #A2
  11  4000              CALBAS	EQU		#159
  12  4000              ERRHAND EQU     #406F
  13  4000              FRMEVL  EQU     #4C64
  14  4000              FRESTR	EQU		#67D0
  15  4000              ; FRMQNT = formula quantificator
  16  4000              ; input HL=pointer to current program expression
  17  4000              ; output HL=next address
  18  4000              ; output DE=integer datum
  19  4000              FRMQNT	EQU		#542F
  20  4000              ; GETBYT = get byte parameter
  21  4000              ; input HL=pointer to current program expression
  22  4000              ; output HL=next address
  23  4000              ; output A=E=byte read
  24  4000              GETBYT	EQU		#521C
  25  4000              CHRGTR  EQU     #4666
  26  4000              SYNCHR	EQU		#558C
  27  4000              VALTYP  EQU     #F663
  28  4000              USR     EQU     #F7F8
  29  4000              PROCNM	EQU		#FD89
  30  4000              BIOS_FILVRM  EQU     #56
  31  4000              CLIKSW	EQU		#F3DB
  32  4000              ATRBAS	EQU		#F928
  33  4000
  34  4000              RAMAD0	EQU	0F341h	; Main-RAM Slot (00000h~03FFFh)
  35  4000              RAMAD1	EQU	0F342h	; Main-RAM Slot (04000h~07FFFh)
  36  4000              RAMAD2	EQU	0F343h	; Main-RAM Slot (08000h~0BFFFh)
  37  4000              RAMAD3	EQU	0F344h	; Main-RAM Slot (0C000h~0FFFFh)
  38  4000              EXPTBL	EQU #FCC1
  39  4000              SCRMOD	EQU #FCAF ; current screen mode
  40  4000
  41  4000              ; BASIC error codes
  42  4000              ;01 NEXT without FOR
  43  4000              ;02 Syntax error
  44  4000              ;03 RETURN without GOSUB
  45  4000              ;04 Out of DATA
  46  4000              ;05 Illegal function call
  47  4000              ;06 Overflow
  48  4000              ;07 Out of memory
  49  4000              ;08 Undefined line number
  50  4000              ;09 Subscript out of range
  51  4000              ;10 Redimensioned array
  52  4000              ;11 Division by zero
  53  4000              ;12 Illegal direct
  54  4000              ;13 Type mismatch
  55  4000              ;14 Out of string space
  56  4000              ;15 String too long
  57  4000              ;16 String formula too complex
  58  4000              ;17 Can't CONTINUE
  59  4000              ;18 Undefined user function
  60  4000              ;19 Device I/O error
  61  4000              ;20 Verify error
  62  4000              ;21 No RESUME
  63  4000              ;22 RESUME without error
  64  4000              ;23 Unprintable error
  65  4000              ;24 Missing operand
  66  4000              ;25 Line buffer overflow
  67  4000              ;50 FIELD overflow
  68  4000              ;51 Internal error
  69  4000              ;52 Bad file number
  70  4000              ;53 File not found
  71  4000              ;54 File already open
  72  4000              ;55 Input past end
  73  4000              ;56 Bad file name
  74  4000              ;57 Direct statement in file
  75  4000              ;58 Sequential I/O only
  76  4000              ;59 File not OPEN
  77  4000
  78  4000
  79  4000               ; simulate cartridge with BASIC extension
  80  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  80  4004 80 4F 00 00
  80  4008 00 00 00 00
  80  400C 00 00 00 00
  81  4010
  82  4010              ; this location #400A stores last location used by basic extension
  83  4010              ; free memory after that point
  84  4010 D7 57         DW EXT_END
  85  4012
  86  4012              ; binary included AKG player compiled at #4012
  87  4012               IFNDEF EXCLUDE_SOUND_PLAYER
  88  4012              	INCBIN "bin/AKG.bin"
  89  4CEE              	INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CEE              MAIN_PLAYER_START EQU 04012H
   2+ 4CEE              PLY_AKG_START EQU 04012H
   3+ 4CEE              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401BH
   4+ 4CEE              PLY_AKG_INITSOUNDEFFECTS EQU 0401BH
   5+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 0401FH
   6+ 4CEE              PLY_AKG_PLAYSOUNDEFFECT EQU 0401FH
   7+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04020H
   8+ 4CEE              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04020H
   9+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04047H
  10+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04047H
  11+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04055H
  12+ 4CEE              PLY_AKG_PSES_PLAY EQU 0408EH
  13+ 4CEE              PLY_AKG_PSES_READFIRSTBYTE EQU 04097H
  14+ 4CEE              PLY_AKG_PSES_S_ENDORLOOP EQU 040AFH
  15+ 4CEE              PLY_AKG_PSES_S_LOOP EQU 040BAH
  16+ 4CEE              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C0H
  17+ 4CEE              PLY_AKG_PSES_NOTREACHED EQU 040D3H
  18+ 4CEE              PLY_AKG_PSES_HARDWAREONLY EQU 040D7H
  19+ 4CEE              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040DEH
  20+ 4CEE              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F0H
  21+ 4CEE              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FAH
  22+ 4CEE              PLY_AKG_PSES_H_AFTERRETRIG EQU 04104H
  23+ 4CEE              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 04118H
  24+ 4CEE              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411DH
  25+ 4CEE              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04125H
  26+ 4CEE              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04130H
  27+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413CH
  28+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 0413EH
  29+ 4CEE              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04144H
  30+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 04148H
  31+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 04148H
  32+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414AH
  33+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414AH
  34+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414AH
  35+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414BH
  36+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414CH
  37+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04150H
  38+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04150H
  39+ 4CEE              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04150H
  40+ 4CEE              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 04158H
  41+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04160H
  42+ 4CEE              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04160H
  43+ 4CEE              PLY_AKG_INIT EQU 04160H
  44+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04160H
  45+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 0418EH
  46+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A2H
  47+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B4H
  48+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D3H
  49+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E0H
  50+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL EQU 041E6H
  51+ 4CEE              PLY_AKG_INITTABLE0 EQU 041E9H
  52+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041E9H
  53+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04203H
  54+ 4CEE              PLY_AKG_INITTABLE0_END EQU 04203H
  55+ 4CEE              PLY_AKG_INITTABLE1 EQU 04203H
  56+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04203H
  57+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04207H
  58+ 4CEE              PLY_AKG_INITTABLE1_END EQU 04207H
  59+ 4CEE              PLY_AKG_INITTABLEORA EQU 04207H
  60+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04207H
  61+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 0421FH
  62+ 4CEE              PLY_AKG_INITTABLEORA_END EQU 0421FH
  63+ 4CEE              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 0421FH
  64+ 4CEE              PLY_AKG_STOP EQU 0421FH
  65+ 4CEE              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04231H
  66+ 4CEE              PLY_AKG_PLAY EQU 04231H
  67+ 4CEE              PLY_AKG_TICKDECREASINGCOUNTER EQU 04239H
  68+ 4CEE              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 0423FH
  69+ 4CEE              PLY_AKG_READLINKER EQU 04244H
  70+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04244H
  71+ 4CEE              PLY_AKG_READLINKER_PTLINKER EQU 04244H
  72+ 4CEE              PLY_AKG_READLINKER_NOLOOP EQU 0424FH
  73+ 4CEE              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 04288H
  74+ 4CEE              PLY_AKG_READLINE EQU 0428BH
  75+ 4CEE              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428BH
  76+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04291H
  77+ 4CEE              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04291H
  78+ 4CEE              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 0429EH
  79+ 4CEE              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A2H
  80+ 4CEE              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A5H
  81+ 4CEE              PLY_AKG_SPEEDTRACK_END EQU 042A8H
  82+ 4CEE              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042A8H
  83+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042AEH
  84+ 4CEE              PLY_AKG_EVENTTRACK_PTTRACK EQU 042AEH
  85+ 4CEE              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BBH
  86+ 4CEE              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042BFH
  87+ 4CEE              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C2H
  88+ 4CEE              PLY_AKG_EVENTTRACK_END EQU 042C5H
  89+ 4CEE              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C5H
  90+ 4CEE              PLY_AKG_CHANNEL1_READTRACK EQU 042D1H
  91+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D1H
  92+ 4CEE              PLY_AKG_CHANNEL1_PTTRACK EQU 042D1H
  93+ 4CEE              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042ECH
  94+ 4CEE              PLY_AKG_CHANNEL1_WAIT EQU 042F7H
  95+ 4CEE              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 042FEH
  96+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 042FEH
  97+ 4CEE              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 042FEH
  98+ 4CEE              PLY_AKG_CHANNEL1_NOTE EQU 04307H
  99+ 4CEE              PLY_AKG_BASENOTEINDEX EQU 04307H
 100+ 4CEE              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 04309H
 101+ 4CEE              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 04309H
 102+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 04319H
 103+ 4CEE              PLY_AKG_INSTRUMENTSTABLE EQU 04319H
 104+ 4CEE              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432BH
 105+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433BH
 106+ 4CEE              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04363H
 107+ 4CEE              PLY_AKG_CHANNEL1_READCELLEND EQU 04366H
 108+ 4CEE              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04366H
 109+ 4CEE              PLY_AKG_CHANNEL2_READTRACK EQU 04372H
 110+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04372H
 111+ 4CEE              PLY_AKG_CHANNEL2_PTTRACK EQU 04372H
 112+ 4CEE              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438DH
 113+ 4CEE              PLY_AKG_CHANNEL2_WAIT EQU 04398H
 114+ 4CEE              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 0439FH
 115+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 0439FH
 116+ 4CEE              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 0439FH
 117+ 4CEE              PLY_AKG_CHANNEL2_NOTE EQU 043A8H
 118+ 4CEE              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043ADH
 119+ 4CEE              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043ADH
 120+ 4CEE              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043CFH
 121+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043DFH
 122+ 4CEE              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04407H
 123+ 4CEE              PLY_AKG_CHANNEL2_READCELLEND EQU 0440AH
 124+ 4CEE              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440AH
 125+ 4CEE              PLY_AKG_CHANNEL3_READTRACK EQU 04416H
 126+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04416H
 127+ 4CEE              PLY_AKG_CHANNEL3_PTTRACK EQU 04416H
 128+ 4CEE              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04431H
 129+ 4CEE              PLY_AKG_CHANNEL3_WAIT EQU 0443CH
 130+ 4CEE              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04443H
 131+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04443H
 132+ 4CEE              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04443H
 133+ 4CEE              PLY_AKG_CHANNEL3_NOTE EQU 0444CH
 134+ 4CEE              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04451H
 135+ 4CEE              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04451H
 136+ 4CEE              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04473H
 137+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04483H
 138+ 4CEE              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ABH
 139+ 4CEE              PLY_AKG_CHANNEL3_READCELLEND EQU 044AEH
 140+ 4CEE              PLY_AKG_CURRENTSPEED EQU 044AEH
 141+ 4CEE              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B0H
 142+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B3H
 143+ 4CEE              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B3H
 144+ 4CEE              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B6H
 145+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044B9H
 146+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044B9H
 147+ 4CEE              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C5H
 148+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CCH
 149+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044CFH
 150+ 4CEE              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D5H
 151+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044D8H
 152+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044D8H
 153+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E6H
 154+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EBH
 155+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F6H
 156+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044F9H
 157+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044F9H
 158+ 4CEE              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FCH
 159+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 044FFH
 160+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE EQU 044FFH
 161+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 04508H
 162+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04512H
 163+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04515H
 164+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04515H
 165+ 4CEE              PLY_AKG_CHANNEL1_PITCH EQU 04515H
 166+ 4CEE              PLY_AKG_CHANNEL1_ISPITCH EQU 04518H
 167+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451DH
 168+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451DH
 169+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04521H
 170+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04523H
 171+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04525H
 172+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452CH
 173+ 4CEE              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452DH
 174+ 4CEE              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04530H
 175+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04530H
 176+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454CH
 177+ 4CEE              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454CH
 178+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 04559H
 179+ 4CEE              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455DH
 180+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456DH
 181+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456DH
 182+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 0456EH
 183+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 0456FH
 184+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04571H
 185+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04571H
 186+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04571H
 187+ 4CEE              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04572H
 188+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04573H
 189+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04575H
 190+ 4CEE              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04575H
 191+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04575H
 192+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04575H
 193+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04575H
 194+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_END EQU 04578H
 195+ 4CEE              PLY_AKG_CHANNEL1_PITCH_END EQU 0457AH
 196+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04582H
 197+ 4CEE              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04582H
 198+ 4CEE              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04585H
 199+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 04588H
 200+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 04588H
 201+ 4CEE              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04594H
 202+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459BH
 203+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 0459EH
 204+ 4CEE              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A4H
 205+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A7H
 206+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A7H
 207+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B5H
 208+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BAH
 209+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C5H
 210+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045C8H
 211+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045C8H
 212+ 4CEE              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CBH
 213+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045CEH
 214+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045CEH
 215+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D7H
 216+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E1H
 217+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E4H
 218+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E4H
 219+ 4CEE              PLY_AKG_CHANNEL2_PITCH EQU 045E4H
 220+ 4CEE              PLY_AKG_CHANNEL2_ISPITCH EQU 045E7H
 221+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045ECH
 222+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045ECH
 223+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F0H
 224+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F2H
 225+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F4H
 226+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FBH
 227+ 4CEE              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FCH
 228+ 4CEE              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 045FFH
 229+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 045FFH
 230+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461BH
 231+ 4CEE              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461BH
 232+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 04628H
 233+ 4CEE              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462CH
 234+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463CH
 235+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463CH
 236+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463DH
 237+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 0463EH
 238+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04640H
 239+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04640H
 240+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04640H
 241+ 4CEE              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04641H
 242+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04642H
 243+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04644H
 244+ 4CEE              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04644H
 245+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04644H
 246+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04644H
 247+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04644H
 248+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_END EQU 04647H
 249+ 4CEE              PLY_AKG_CHANNEL2_PITCH_END EQU 04649H
 250+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04651H
 251+ 4CEE              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04651H
 252+ 4CEE              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04654H
 253+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04657H
 254+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04657H
 255+ 4CEE              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04663H
 256+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466AH
 257+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466DH
 258+ 4CEE              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04673H
 259+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04676H
 260+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04676H
 261+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04684H
 262+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 04689H
 263+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04694H
 264+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04697H
 265+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04697H
 266+ 4CEE              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469AH
 267+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469DH
 268+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469DH
 269+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A6H
 270+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B0H
 271+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B3H
 272+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B3H
 273+ 4CEE              PLY_AKG_CHANNEL3_PITCH EQU 046B3H
 274+ 4CEE              PLY_AKG_CHANNEL3_ISPITCH EQU 046B6H
 275+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BBH
 276+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BBH
 277+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046BFH
 278+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C1H
 279+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C3H
 280+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CAH
 281+ 4CEE              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CBH
 282+ 4CEE              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046CEH
 283+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046CEH
 284+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046EAH
 285+ 4CEE              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046EAH
 286+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F7H
 287+ 4CEE              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FBH
 288+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470BH
 289+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470BH
 290+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470CH
 291+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470DH
 292+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 0470FH
 293+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 0470FH
 294+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 0470FH
 295+ 4CEE              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04710H
 296+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04711H
 297+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04713H
 298+ 4CEE              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04713H
 299+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04713H
 300+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04713H
 301+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04713H
 302+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_END EQU 04716H
 303+ 4CEE              PLY_AKG_CHANNEL3_PITCH_END EQU 04718H
 304+ 4CEE              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04724H
 305+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04724H
 306+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04724H
 307+ 4CEE              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04727H
 308+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 04729H
 309+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 0472FH
 310+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04732H
 311+ 4CEE              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04732H
 312+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04735H
 313+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 0473EH
 314+ 4CEE              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04746H
 315+ 4CEE              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04753H
 316+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04753H
 317+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04753H
 318+ 4CEE              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04756H
 319+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 04758H
 320+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 0475EH
 321+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04761H
 322+ 4CEE              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04761H
 323+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04764H
 324+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476DH
 325+ 4CEE              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04775H
 326+ 4CEE              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04783H
 327+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04783H
 328+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04783H
 329+ 4CEE              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04786H
 330+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 04788H
 331+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 0478EH
 332+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04791H
 333+ 4CEE              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04791H
 334+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04794H
 335+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479DH
 336+ 4CEE              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A5H
 337+ 4CEE              PLY_AKG_SENDPSGREGISTERS EQU 047B4H
 338+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BCH
 339+ 4CEE              PLY_AKG_PSGREG01_INSTR EQU 047BCH
 340+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CCH
 341+ 4CEE              PLY_AKG_PSGREG23_INSTR EQU 047CCH
 342+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DDH
 343+ 4CEE              PLY_AKG_PSGREG45_INSTR EQU 047DDH
 344+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047EEH
 345+ 4CEE              PLY_AKG_PSGREG6_8_INSTR EQU 047EEH
 346+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 047FFH
 347+ 4CEE              PLY_AKG_PSGREG9_10_INSTR EQU 047FFH
 348+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04810H
 349+ 4CEE              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04810H
 350+ 4CEE              PLY_AKG_PSGREG13_OLDVALUE EQU 04825H
 351+ 4CEE              PLY_AKG_RETRIG EQU 04827H
 352+ 4CEE              PLY_AKG_PSGREG13_INSTR EQU 04829H
 353+ 4CEE              PLY_AKG_PSGREG13_END EQU 04838H
 354+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 04838H
 355+ 4CEE              PLY_AKG_SAVESP EQU 04838H
 356+ 4CEE              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483CH
 357+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTS EQU 04844H
 358+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04851H
 359+ 4CEE              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04851H
 360+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTS EQU 04859H
 361+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04866H
 362+ 4CEE              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04866H
 363+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTS EQU 0486EH
 364+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 04879H
 365+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS EQU 04879H
 366+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 04888H
 367+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 04888H
 368+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 0488FH
 369+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 0489FH
 370+ 4CEE              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 0489FH
 371+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A6H
 372+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A6H
 373+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048A9H
 374+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B2H
 375+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B2H
 376+ 4CEE              PLY_AKG_READINSTRUMENTCELL EQU 048B8H
 377+ 4CEE              PLY_AKG_NOSOFTNOHARD EQU 048C5H
 378+ 4CEE              PLY_AKG_NSNH_NONOISE EQU 048DAH
 379+ 4CEE              PLY_AKG_SOFT EQU 048DDH
 380+ 4CEE              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E4H
 381+ 4CEE              PLY_AKG_S_NOTSIMPLE EQU 048ECH
 382+ 4CEE              PLY_AKG_S_AFTERSIMPLETEST EQU 048EFH
 383+ 4CEE              PLY_AKG_HARDTOSOFT EQU 048FCH
 384+ 4CEE              PLY_AKG_HS_JUMPRATIO EQU 04907H
 385+ 4CEE              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04934H
 386+ 4CEE              PLY_AKG_ENDWITHOUTLOOP EQU 04936H
 387+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04936H
 388+ 4CEE              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04936H
 389+ 4CEE              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 0493EH
 390+ 4CEE              PLY_AKG_SH_JUMPRATIO EQU 0494BH
 391+ 4CEE              PLY_AKG_SH_JUMPRATIOEND EQU 0496CH
 392+ 4CEE              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497BH
 393+ 4CEE              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04981H
 394+ 4CEE              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499BH
 395+ 4CEE              PLY_AKG_H_RETRIGEND EQU 049ADH
 396+ 4CEE              PLY_AKG_H_AFTERRETRIG EQU 049AEH
 397+ 4CEE              PLY_AKG_ENDWITHLOOP EQU 049C0H
 398+ 4CEE              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C7H
 399+ 4CEE              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DDH
 400+ 4CEE              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EBH
 401+ 4CEE              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FBH
 402+ 4CEE              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A09H
 403+ 4CEE              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A18H
 404+ 4CEE              PLY_AKG_SHOHS_RETRIGEND EQU 04A27H
 405+ 4CEE              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A28H
 406+ 4CEE              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3AH
 407+ 4CEE              PLY_AKG_EFFECTTABLE EQU 04A48H
 408+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A48H
 409+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6CH
 410+ 4CEE              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6CH
 411+ 4CEE              PLY_AKG_EFFECT_RESET EQU 04A6FH
 412+ 4CEE              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A71H
 413+ 4CEE              PLY_AKG_EFFECT_VOLUME EQU 04A8CH
 414+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A98H
 415+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04A9EH
 416+ 4CEE              PLY_AKG_ARPEGGIOSTABLE EQU 04A9EH
 417+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC5H
 418+ 4CEE              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACCH
 419+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD2H
 420+ 4CEE              PLY_AKG_PITCHESTABLE EQU 04AD2H
 421+ 4CEE              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AF9H
 422+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B00H
 423+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B11H
 424+ 4CEE              PLY_AKG_EFFECT_PITCHDOWN EQU 04B18H
 425+ 4CEE              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B28H
 426+ 4CEE              PLY_AKG_EFFECT_PITCHUP EQU 04B3DH
 427+ 4CEE              PLY_AKG_EFFECT_PITCHSTOP EQU 04B4FH
 428+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B56H
 429+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B80H
 430+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B80H
 431+ 4CEE              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B99H
 432+ 4CEE              PLY_AKG_EFFECT_GLIDESPEED EQU 04B99H
 433+ 4CEE              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BABH
 434+ 4CEE              PLY_AKG_EFFECT_LEGATO EQU 04BC1H
 435+ 4CEE              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD5H
 436+ 4CEE              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDDH
 437+ 4CEE              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE5H
 438+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEDH
 439+ 4CEE              PLY_AKG_EVENT EQU 04BEDH
 440+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BEEH
 441+ 4CEE              PLY_AKG_PERIODTABLE EQU 04BEEH
 442+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BEEH
 443+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CEEH
 444+ 4CEE              PLY_AKG_PERIODTABLE_END EQU 04CEEH
 445+ 4CEE              PLY_AKG_END EQU 04CEEH
 446+ 4CEE              MAIN_PLAYER_END EQU 04CEEH
 447+ 4CEE              TESTEREND EQU 04CEEH
 448+ 4CEE
# file closed: ./symbol/AKG.sym
  90  4CEE               ENDIF
  91  4CEE
  92  4CEE              ORIG.HTIMI:
  93  4CEE 00 00 00 00  	DB 0, 0, 0, 0, 0
  93  4CF2 00
  94  4CF3               EXPORT ORIG.HTIMI
  95  4CF3
  96  4CF3               IFNDEF EXCLUDE_SOUND_PLAYER
  97  4CF3              MUSIC_INIT_STATUS:
  98  4CF3 00            DB 0
  99  4CF4              SFX_INIT_STATUS:
 100  4CF4 00            DB 0
 101  4CF5              SOUND_ENABLED:
 102  4CF5 00            DB 0
 103  4CF6               ENDIF
 104  4CF6
 105  4CF6               IFNDEF EXCLUDE_SPRITE_CMDS
 106  4CF6              SPRATR_INIT_STATUS:
 107  4CF6 00            DB 0
 108  4CF7              SPRATR_UPDATE_FLAG:
 109  4CF7 00 00         DW 0
 110  4CF9              SPRATR_DATA:
 111  4CF9 00 00         DW 0
 112  4CFB              SPRFLICKER_ENABLED:
 113  4CFB 00            DB 0
 114  4CFC              ; to support sprite flicker
 115  4CFC              FLICKER:
 116  4CFC 00            DB 0
 117  4CFD               ENDIF
 118  4CFD
 119  4CFD              ; to temporarily store stack pointer
 120  4CFD              TMPSP:
 121  4CFD 00 00         DW 0
 122  4CFF
 123  4CFF              ; temp variables for BLIT, TILE functions
 124  4CFF               IFNDEF EXCLUDE_BLIT_CMDS
 125  4CFF              TILETMP1:
 126  4CFF              BLIT_TMP1:
 127  4CFF 00 00         DW 0
 128  4D01              TILETMP2:
 129  4D01              BLIT_TMP2:
 130  4D01 00 00         DW 0
 131  4D03               ENDIF
 132  4D03
 133  4D03              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 134  4D03              ; per starting letter, if no commands with this letter, NULL value
 135  4D03              CMDS:
 136  4D03 00 00            DW 0 ; A
 137  4D05 BF 4D            DW CMDS_B ; B
 138  4D07 00 00            DW 0 ; C
 139  4D09 00 00            DW 0 ; D
 140  4D0B 00 00            DW 0 ; E
 141  4D0D 4A 4D            DW CMDS_F; F
 142  4D0F 5D 4D            DW CMDS_G; G
 143  4D11 00 00            DW 0 ; H
 144  4D13 00 00            DW 0 ; I
 145  4D15 00 00            DW 0 ; J
 146  4D17 00 00            DW 0 ; K
 147  4D19 00 00            DW 0 ; L
 148  4D1B 37 4D            DW CMDS_M ; M
 149  4D1D 00 00            DW 0 ; N
 150  4D1F 00 00            DW 0 ; O
 151  4D21 00 00            DW 0 ; P
 152  4D23 00 00            DW 0 ; Q
 153  4D25 00 00            DW 0 ; R
 154  4D27 71 4D            DW CMDS_S ; S
 155  4D29 DF 4D            DW CMDS_T ; T
 156  4D2B 00 00            DW 0 ; U
 157  4D2D 67 4D            DW CMDS_V ; V
 158  4D2F 00 00            DW 0 ; W
 159  4D31 00 00            DW 0 ; X
 160  4D33 00 00            DW 0 ; Y
 161  4D35 00 00            DW 0 ; Z
 162  4D37
 163  4D37              CMDS_M:
 164  4D37               IFNDEF EXCLUDE_VRAM_CMDS
 165  4D37 4D 45 4D 56      DB "MEMVRM", 0
 165  4D3B 52 4D 00
 166  4D3E 1D 51            DW MEMVRM
 167  4D40               ENDIF
 168  4D40               IFNDEF EXCLUDE_RAM_CMDS
 169  4D40 4D 45 4D 43  	DB "MEMCPY", 0
 169  4D44 50 59 00
 170  4D47 DC 4F        	DW MEMCPY
 171  4D49               ENDIF
 172  4D49 00           	DB 0
 173  4D4A              CMDS_F:
 174  4D4A               IFNDEF EXCLUDE_VRAM_CMDS
 175  4D4A 46 49 4C 56      DB "FILVRM", 0
 175  4D4E 52 4D 00
 176  4D51 1F 50            DW FILVRM
 177  4D53               ENDIF
 178  4D53               IFNDEF EXCLUDE_RAM_CMDS
 179  4D53 46 49 4C 52      DB "FILRAM", 0
 179  4D57 41 4D 00
 180  4D5A 66 50            DW FILRAM
 181  4D5C               ENDIF
 182  4D5C 00               DB 0
 183  4D5D              CMDS_G:
 184  4D5D               IFNDEF EXCLUDE_GENCAL
 185  4D5D 47 45 4E 43      DB "GENCAL", 0
 185  4D61 41 4C 00
 186  4D64 C4 50            DW GENCAL
 187  4D66               ENDIF
 188  4D66 00           	DB	0
 189  4D67              CMDS_V:
 190  4D67               IFNDEF EXCLUDE_VRAM_CMDS
 191  4D67 56 52 4D 4D  	DB "VRMMEM", 0
 191  4D6B 45 4D 00
 192  4D6E 96 51        	DW VRMMEM
 193  4D70               ENDIF
 194  4D70 00           	DB 0
 195  4D71              CMDS_S:
 196  4D71               IFNDEF EXCLUDE_SPRITE_CMDS
 197  4D71 53 50 52 53  	DB "SPRSET", 0
 197  4D75 45 54 00
 198  4D78 7E 53        	DW SPRSET
 199  4D7A 53 50 52 47  	DB "SPRGRPMOV", 0
 199  4D7E 52 50 4D 4F
 199  4D82 56 00
 200  4D84 3C 54        	DW SPRGRPMOV
 201  4D86               ENDIF
 202  4D86               IFNDEF EXCLUDE_SOUND_PLAYER
 203  4D86 53 4E 44 53  	DB "SNDSFX", 0
 203  4D8A 46 58 00
 204  4D8D D4 52        	DW SNDSFX
 205  4D8F 53 4E 44 50  	DB "SNDPLYON", 0
 205  4D93 4C 59 4F 4E
 205  4D97 00
 206  4D98 9E 52        	DW SNDPLYON
 207  4D9A 53 4E 44 50  	DB "SNDPLYOFF", 0
 207  4D9E 4C 59 4F 46
 207  4DA2 46 00
 208  4DA4 B1 52        	DW SNDPLYOFF
 209  4DA6 53 4E 44 50  	DB "SNDPLYINI", 0
 209  4DAA 4C 59 49 4E
 209  4DAE 49 00
 210  4DB0 54 52        	DW SNDPLYINIT
 211  4DB2               ENDIF
 212  4DB2               IFNDEF EXCLUDE_SPRITE_CMDS
 213  4DB2 53 50 52 41  	DB "SPRATRINI", 0
 213  4DB6 54 52 49 4E
 213  4DBA 49 00
 214  4DBC 2E 53        	DW SPRATRINI
 215  4DBE               ENDIF
 216  4DBE 00           	DB 0
 217  4DBF              CMDS_B:
 218  4DBF               IFNDEF EXCLUDE_BLIT_CMDS
 219  4DBF 42 4C 49 54  	DB "BLIT", 0
 219  4DC3 00
 220  4DC4 3A 56        	DW BLIT
 221  4DC6 42 4F 58 4D  	DB "BOXMEMCPY", 0
 221  4DCA 45 4D 43 50
 221  4DCE 59 00
 222  4DD0 5E 57        	DW BOXMEMCPY
 223  4DD2 42 4F 58 4D  	DB "BOXMEMVRM", 0
 223  4DD6 45 4D 56 52
 223  4DDA 4D 00
 224  4DDC 92 57        	DW BOXMEMVRM
 225  4DDE               ENDIF
 226  4DDE 00           	DB 0
 227  4DDF              CMDS_T:
 228  4DDF               IFNDEF EXCLUDE_BLIT_CMDS
 229  4DDF 54 49 4C 45  	DB "TILERAM", 0
 229  4DE3 52 41 4D 00
 230  4DE7 A7 56        	DW TILERAM
 231  4DE9 54 49 4C 45  	DB "TILEVRM", 0
 231  4DED 56 52 4D 00
 232  4DF1 EE 56        	DW TILEVRM
 233  4DF3               ENDIF
 234  4DF3 00           	DB 0
 235  4DF4
 236  4DF4              ; ****************************************************************************************************
 237  4DF4              ; function sets VRAM address
 238  4DF4              ; input HL=address
 239  4DF4              ; modifies AF
 240  4DF4              SETWRT_LOCAL:
 241  4DF4 7D           	LD	A, L
 242  4DF5 D3 99        	OUT	(099H), A
 243  4DF7 7C           	LD	A, H
 244  4DF8 E6 3F        	AND	03FH
 245  4DFA F6 40        	OR	040H
 246  4DFC D3 99        	OUT	(099H), A
 247  4DFE C9           	RET
 248  4DFF              ; ****************************************************************************************************
 249  4DFF
 250  4DFF              ; ****************************************************************************************************
 251  4DFF              ; function gets slot and subslot data for specific page
 252  4DFF              ; input A=page (0, 1 or 2)
 253  4DFF              ; output B = 0A8H register value
 254  4DFF              ; output D = 0 is no subslots, 1 if yes
 255  4DFF              ; output C = 0A8H value when page 3 slot equals to requested page slot
 256  4DFF              ; output E = subslot value if present
 257  4DFF              ; modifies AF, BC, DE, HL
 258  4DFF              GET_PAGE_INFO:
 259  4DFF 6F               LD L, A
 260  4E00 C6 C1            ADD A, low (EXPTBL)
 261  4E02 32 0C 4E         LD (GET_PAGE_INFO_L1+1), A
 262  4E05 DB A8            IN A, (0A8H)
 263  4E07 47               LD B, A
 264  4E08 E6 3F            AND 03FH
 265  4E0A 4F               LD C, A
 266  4E0B              GET_PAGE_INFO_L1:
 267  4E0B 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 268  4E0E E6 80            AND 080H
 269  4E10 28 1B            JR Z, GET_PAGE_INFO_L2
 270  4E12                  ; expanded
 271  4E12 2D               DEC L
 272  4E13 FA 32 4E         JP M, GET_PAGE_INFO_L3
 273  4E16 2D               DEC L
 274  4E17 FA 30 4E         JP M, GET_PAGE_INFO_L4
 275  4E1A                  ; page 2
 276  4E1A 07               RLCA
 277  4E1B 07               RLCA
 278  4E1C              GET_PAGE_INFO_L5:
 279  4E1C E6 C0            AND 0C0H
 280  4E1E B1               OR C
 281  4E1F D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 282  4E21 4F               LD C, A
 283  4E22 3A FF FF         LD A, (0FFFFH)
 284  4E25 2F               CPL
 285  4E26 5F               LD E, A
 286  4E27 16 01            LD D, 1
 287  4E29 78               LD A, B ; return stack
 288  4E2A D3 A8            OUT (0A8H), A
 289  4E2C C9               RET
 290  4E2D              GET_PAGE_INFO_L2:
 291  4E2D                  ; not expanded
 292  4E2D 16 00            LD D, 0
 293  4E2F C9               RET
 294  4E30              GET_PAGE_INFO_L4:
 295  4E30                  ; page 1
 296  4E30 0F               RRCA
 297  4E31 0F               RRCA
 298  4E32              GET_PAGE_INFO_L3:
 299  4E32                  ; page 0
 300  4E32 0F               RRCA
 301  4E33 0F               RRCA
 302  4E34 18 E6            JR GET_PAGE_INFO_L5
 303  4E36              ; ****************************************************************************************************
 304  4E36
 305  4E36              ; ****************************************************************************************************
 306  4E36              ; function returns original slot and subslot info
 307  4E36              ; input B = 0A8H register value
 308  4E36              ; input D = 0 is no subslots, 1 if yes
 309  4E36              ; input C = 0A8H value when page 3 slot equals to requested page slot
 310  4E36              ; input E = subslot value if present
 311  4E36              ; modifies AF, disables interrupts
 312  4E36              RESTORE_PAGE_INFO:
 313  4E36 7A               LD A, D
 314  4E37 B7               OR A
 315  4E38 28 08            JR Z, RESTORE_PAGE_INFO_L1
 316  4E3A 79               LD A, C
 317  4E3B F3           	DI
 318  4E3C D3 A8            OUT (0A8H), A
 319  4E3E 7B               LD A, E
 320  4E3F 32 FF FF         LD (0FFFFH), A
 321  4E42              RESTORE_PAGE_INFO_L1:
 322  4E42 78               LD A, B
 323  4E43 D3 A8            OUT (0A8H), A
 324  4E45 C9               RET
 325  4E46              ; ****************************************************************************************************
 326  4E46
 327  4E46              ; *******************************************************************************************************
 328  4E46              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 329  4E46              ; INPUT:  A = SLOT ID: EXXXSSPP
 330  4E46              ; E = EXPANDED FLAG
 331  4E46              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 332  4E46              ; PP = PRIMARY SLOT NUMBER
 333  4E46              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 334  4E46              ; CHANGES: AF, BC, DE
 335  4E46
 336  4E46              LOCAL_ENASLT:
 337  4E46 CD 66 4E         CALL L0353
 338  4E49 FA 53 4E         JP M, L0340
 339  4E4C DB A8            IN A, (0A8H)
 340  4E4E A1               AND C
 341  4E4F B0               OR B
 342  4E50 D3 A8            OUT (0A8H), A
 343  4E52 C9               RET
 344  4E53              L0340:
 345  4E53 E5               PUSH HL
 346  4E54 CD 8B 4E         CALL L0378
 347  4E57 4F               LD C, A
 348  4E58 06 00            LD B, 0
 349  4E5A 7D               LD A, L
 350  4E5B A4               AND H
 351  4E5C B2               OR D
 352  4E5D 21 C5 FC         LD HL, 0FCC5H
 353  4E60 09               ADD HL, BC
 354  4E61 77               LD (HL), A
 355  4E62 E1               POP HL
 356  4E63 79               LD A, C
 357  4E64 18 E0            JR LOCAL_ENASLT
 358  4E66              L0353:
 359  4E66 F3               DI
 360  4E67 F5               PUSH AF
 361  4E68 7C               LD A, H
 362  4E69 07               RLCA
 363  4E6A 07               RLCA
 364  4E6B E6 03            AND 3
 365  4E6D 5F               LD E, A
 366  4E6E 3E C0            LD A, 0C0H
 367  4E70              L035D:
 368  4E70 07               RLCA
 369  4E71 07               RLCA
 370  4E72 1D               DEC E
 371  4E73 F2 70 4E         JP P, L035D
 372  4E76 5F               LD E, A
 373  4E77 2F               CPL
 374  4E78 4F               LD C, A
 375  4E79 F1               POP AF
 376  4E7A F5               PUSH AF
 377  4E7B E6 03            AND 3
 378  4E7D 3C               INC A
 379  4E7E 47               LD B, A
 380  4E7F 3E AB            LD A, 0ABH
 381  4E81              L036E:
 382  4E81 C6 55            ADD A, 055H
 383  4E83 10 FC            DJNZ L036E
 384  4E85 57               LD D, A
 385  4E86 A3               AND E
 386  4E87 47               LD B, A
 387  4E88 F1               POP AF
 388  4E89 A7               AND A
 389  4E8A C9               RET
 390  4E8B              L0378:
 391  4E8B F5               PUSH AF
 392  4E8C 7A               LD A, D
 393  4E8D E6 C0            AND 0C0H
 394  4E8F 4F               LD C, A
 395  4E90 F1               POP AF
 396  4E91 F5               PUSH AF
 397  4E92 57               LD D, A
 398  4E93 DB A8            IN A, (0A8H)
 399  4E95 47               LD B, A
 400  4E96 E6 3F            AND 03FH
 401  4E98 B1               OR C
 402  4E99 D3 A8            OUT (0A8H), A
 403  4E9B 7A               LD A, D
 404  4E9C 0F               RRCA
 405  4E9D 0F               RRCA
 406  4E9E E6 03            AND 3
 407  4EA0 57               LD D, A
 408  4EA1 3E AB            LD A, 0ABH
 409  4EA3              L0390:
 410  4EA3 C6 55            ADD A, 055H
 411  4EA5 15               DEC D
 412  4EA6 F2 A3 4E         JP P, L0390
 413  4EA9 A3               AND E
 414  4EAA 57               LD D, A
 415  4EAB 7B               LD A, E
 416  4EAC 2F               CPL
 417  4EAD 67               LD H, A
 418  4EAE 3A FF FF         LD A, (0FFFFH)
 419  4EB1 2F               CPL
 420  4EB2 6F               LD L, A
 421  4EB3 A4               AND H
 422  4EB4 B2               OR D
 423  4EB5 32 FF FF         LD (0FFFFH), A
 424  4EB8 78               LD A, B
 425  4EB9 D3 A8            OUT (0A8H), A
 426  4EBB F1               POP AF
 427  4EBC E6 03            AND 3
 428  4EBE C9               RET
 429  4EBF              ; *******************************************************************************************************
 430  4EBF
 431  4EBF              ; *******************************************************************************************************
 432  4EBF              ; some common code to activate page 0 and place values needed to restore original page on stack
 433  4EBF              ; input IY=return address
 434  4EBF              ENABLE_PAGE0:
 435  4EBF AF               XOR A
 436  4EC0 CD FF 4D         CALL GET_PAGE_INFO
 437  4EC3 C5               PUSH BC
 438  4EC4 D5               PUSH DE
 439  4EC5 3A 41 F3         LD A, (RAMAD0)
 440  4EC8 26 00            LD H, 0
 441  4ECA CD 46 4E         CALL LOCAL_ENASLT
 442  4ECD FD E9        	JP (IY)
 443  4ECF              ; *******************************************************************************************************
 444  4ECF
 445  4ECF               IFNDEF EXCLUDE_SPRITE_CMDS
 446  4ECF              ; *******************************************************************************************************
 447  4ECF              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
 448  4ECF              ; struct {
 449  4ECF              ; DW y
 450  4ECF              ; DW x
 451  4ECF              ; DW pattern (0-31)
 452  4ECF              ; DW color
 453  4ECF              ; } [32]
 454  4ECF              ; will hide sprites whose location is outside of visible area
 455  4ECF              ; works in screen 1 and 2
 456  4ECF              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
 457  4ECF              ; modifies AF, AF', BC, DE, HL
 458  4ECF              SPRATR_UPDATE:
 459  4ECF              	; check if initialized
 460  4ECF 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
 461  4ED2 B7           	OR A
 462  4ED3 C8           	RET Z
 463  4ED4              	; check if update requested
 464  4ED4 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 465  4ED7 7E           	LD A, (HL)
 466  4ED8 B7           	OR A
 467  4ED9 C8           	RET Z
 468  4EDA              	; check screen mode
 469  4EDA 3A AF FC     	LD A, (SCRMOD)
 470  4EDD 3D           	DEC A
 471  4EDE 28 02        	JR Z, .L0 ; screen 1
 472  4EE0 3D           	DEC A
 473  4EE1 C0           	RET NZ ; not screen 2
 474  4EE2              .L0:
 475  4EE2 06 20        	LD B, 32 ; sprite number
 476  4EE4 0E 98        	LD C, #98 ; register for vdp data output
 477  4EE6              	; set VDP address
 478  4EE6 2A 28 F9     	LD HL, (ATRBAS)
 479  4EE9 3A FB 4C     	LD A, (SPRFLICKER_ENABLED)
 480  4EEC B7           	OR A
 481  4EED 28 03        	JR Z, .L3
 482  4EEF 3A FC 4C     	LD A, (FLICKER)
 483  4EF2              .L3:
 484  4EF2 5F           	LD E, A
 485  4EF3 08           	EX AF, AF'
 486  4EF4 7B           	LD A, E
 487  4EF5 87           	ADD A, A
 488  4EF6 87           	ADD A, A
 489  4EF7 16 00        	LD D, 0
 490  4EF9 5F           	LD E, A
 491  4EFA 19           	ADD HL, DE
 492  4EFB CD F4 4D     	CALL SETWRT_LOCAL
 493  4EFE ED 73 FD 4C  	LD (TMPSP), SP
 494  4F02 ED 7B F9 4C  	LD SP, (SPRATR_DATA)
 495  4F06
 496  4F06              .LOOP:
 497  4F06 E1           	POP HL
 498  4F07 24           	INC H
 499  4F08 28 0D        	JR Z, .L1 ; negative number above -256
 500  4F0A 25           	DEC H
 501  4F0B 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
 502  4F0D 7D           	LD A, L
 503  4F0E FE C0        	CP 192
 504  4F10 30 10        	JR NC, .OUT3
 505  4F12 3D           	DEC A ; due to VDP rule that top of screen is -1
 506  4F13 57           	LD D, A
 507  4F14 C3 32 4F     	JP .X
 508  4F17              .L1:
 509  4F17 7D           	LD A, L
 510  4F18 C6 10        	ADD 16
 511  4F1A FA 22 4F     	JP M, .OUT3 ; below -16
 512  4F1D 2D           	DEC L ; due to VDP rule that top of screen is -1
 513  4F1E 55           	LD D, L
 514  4F1F C3 32 4F     	JP .X
 515  4F22              .OUT3:
 516  4F22 E1           	POP HL ; skip x value
 517  4F23              .OUT2:
 518  4F23 E1           	POP HL ; skip pattern
 519  4F24 E1           	POP HL ; skip color
 520  4F25 3E D1        	LD A, #D1
 521  4F27 D3 98        	OUT (#98), A ; sprite hidden
 522  4F29 D3 98        	OUT (#98), A ; value unimportant
 523  4F2B D3 98        	OUT (#98), A ; value unimportant
 524  4F2D D3 98        	OUT (#98), A ; value unimportant
 525  4F2F C3 56 4F     	JP .NEXT
 526  4F32              .X:
 527  4F32 E1           	POP HL
 528  4F33 24           	INC H
 529  4F34 28 08        	JR Z, .L2
 530  4F36 25           	DEC H
 531  4F37 20 EA        	JR NZ, .OUT2
 532  4F39 1E 00        	LD E, 0 ; EC bit
 533  4F3B C3 47 4F     	JP .XY
 534  4F3E              .L2:
 535  4F3E 7D           	LD A, L
 536  4F3F C6 20        	ADD 32
 537  4F41 FA 23 4F     	JP M, .OUT2
 538  4F44 6F           	LD L, A
 539  4F45 1E 80        	LD E, #80
 540  4F47              .XY:
 541  4F47 ED 51        	OUT (C), D
 542  4F49 ED 69        	OUT (C), L
 543  4F4B E1           	POP HL ; pattern
 544  4F4C 7D           	LD A, L
 545  4F4D 87           	ADD A, A
 546  4F4E 87           	ADD A, A ; needs to go at 4x
 547  4F4F D3 98        	OUT (#98), A
 548  4F51 E1           	POP HL ; color
 549  4F52 7D           	LD A, L
 550  4F53 B3           	OR E
 551  4F54 D3 98        	OUT (#98), A
 552  4F56              .NEXT:
 553  4F56 08           	EX AF, AF'
 554  4F57 3C           	INC A
 555  4F58 E6 1F        	AND 31
 556  4F5A C2 6E 4F     	JP NZ, .NEXT2
 557  4F5D 08           	EX AF, AF'
 558  4F5E 2A 28 F9     	LD HL, (ATRBAS)
 559  4F61              	; CALL SETWRT_LOCAL not allowed as SP modified
 560  4F61 7D           	LD	A, L
 561  4F62 D3 99        	OUT	(099H), A
 562  4F64 7C           	LD	A, H
 563  4F65 E6 3F        	AND	03FH
 564  4F67 F6 40        	OR	040H
 565  4F69 D3 99        	OUT	(099H), A
 566  4F6B C3 6F 4F     	JP .NEXT3
 567  4F6E              .NEXT2:
 568  4F6E 08           	EX AF, AF'
 569  4F6F              .NEXT3:
 570  4F6F 10 95        	DJNZ .LOOP
 571  4F71 08           	EX AF, AF'
 572  4F72 3C           	INC A
 573  4F73 32 FC 4C     	LD (FLICKER), A
 574  4F76
 575  4F76 ED 7B FD 4C  	LD SP, (TMPSP)
 576  4F7A 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 577  4F7D 36 00        	LD (HL), 0 ; zero out update flag
 578  4F7F C9           	RET
 579  4F80              ; *******************************************************************************************************
 580  4F80               ENDIF
 581  4F80
 582  4F80              ; General BASIC CALL-instruction handler
 583  4F80              CALLHAND:
 584  4F80 E5           	PUSH HL
 585  4F81 21 03 4D     	LD	HL, CMDS ; pointer table based on starting letter
 586  4F84 3A 89 FD         LD A, (PROCNM)
 587  4F87 D6 41            SUB 'A'
 588  4F89 87               ADD A, A
 589  4F8A 16 00            LD D, 0
 590  4F8C 5F               LD E, A
 591  4F8D 19               ADD HL, DE
 592  4F8E 5E               LD E, (HL)
 593  4F8F 23               INC HL
 594  4F90 56               LD D, (HL)
 595  4F91 7A               LD A, D
 596  4F92 B3               OR E
 597  4F93 28 24            JR Z, .CMDNOTRECOGNIZED
 598  4F95 EB               EX DE, HL
 599  4F96              .CHKCMD:
 600  4F96 11 89 FD     	LD	DE, PROCNM
 601  4F99 1A           .LOOP:	LD	A,(DE)
 602  4F9A BE           	CP	(HL)
 603  4F9B 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 604  4F9D 13           	INC	DE
 605  4F9E 23           	INC	HL
 606  4F9F A7           	AND	A
 607  4FA0 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 608  4FA2 5E           	LD	E,(HL)
 609  4FA3 23           	INC	HL
 610  4FA4 56           	LD	D,(HL)
 611  4FA5 E1           	POP	HL		; routine address
 612  4FA6 CD C7 4F     	CALL	GETPREVCHAR
 613  4FA9 CD BB 4F     	CALL	.CALLDE		; Call routine
 614  4FAC A7           	AND	A
 615  4FAD C9           	RET
 616  4FAE
 617  4FAE              .TONEXTCMD:
 618  4FAE 0E FF        	LD	C,0FFH
 619  4FB0 AF           	XOR	A
 620  4FB1 ED B1        	CPIR			; Skip to end of instruction name
 621  4FB3 23           	INC	HL
 622  4FB4 23           	INC	HL		; Skip address
 623  4FB5 BE           	CP	(HL)
 624  4FB6 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 625  4FB8 E1           	POP	HL
 626  4FB9              .CMDNOTRECOGNIZED:
 627  4FB9 37               SCF
 628  4FBA C9           	RET
 629  4FBB
 630  4FBB              .CALLDE:
 631  4FBB D5           	PUSH	DE
 632  4FBC C9           	RET
 633  4FBD
 634  4FBD              ;---------------------------
 635  4FBD
 636  4FBD              ;GETSTRPNT:
 637  4FBD              ; OUT:
 638  4FBD              ; HL = String Address
 639  4FBD              ; B  = Lenght
 640  4FBD              ;        LD      HL,(USR)
 641  4FBD              ;        LD      B,(HL)
 642  4FBD              ;        INC     HL
 643  4FBD              ;        LD      E,(HL)
 644  4FBD              ;        INC     HL
 645  4FBD              ;        LD      D,(HL)
 646  4FBD              ;        EX      DE,HL
 647  4FBD              ;        RET
 648  4FBD
 649  4FBD              ;EVALTXTPARAM:
 650  4FBD              ;	CALL	CHKCHAR
 651  4FBD              ;	DEFB	"("             ; Check for (
 652  4FBD              ;	LD	IX,FRMEVL
 653  4FBD              ;	CALL	CALBAS		; Evaluate expression
 654  4FBD              ;       LD      A,(VALTYP)
 655  4FBD              ;        CP      3               ; Text type?
 656  4FBD              ;        JP      NZ,TYPE_MISMATCH
 657  4FBD              ;        PUSH	HL
 658  4FBD              ;        LD	IX,FRESTR         ; Free the temporary string
 659  4FBD              ;        CALL	CALBAS
 660  4FBD              ;        POP	HL
 661  4FBD              ;	CALL	CHKCHAR
 662  4FBD              ;	DEFB	")"             ; Check for )
 663  4FBD              ;        RET
 664  4FBD
 665  4FBD
 666  4FBD              CHKCHAR:
 667  4FBD CD C7 4F     	CALL	GETPREVCHAR	; Get previous basic char
 668  4FC0 E3           	EX	(SP),HL
 669  4FC1 BE           	CP	(HL) 	        ; Check if good char
 670  4FC2 20 0F        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 671  4FC4 23           	INC	HL
 672  4FC5 E3           	EX	(SP),HL
 673  4FC6 23           	INC	HL		; Get next basic char
 674  4FC7
 675  4FC7              GETPREVCHAR:
 676  4FC7 2B           	DEC	HL
 677  4FC8 DD 21 66 46  	LD	IX,CHRGTR
 678  4FCC C3 59 01     	JP      CALBAS
 679  4FCF
 680  4FCF
 681  4FCF              TYPE_MISMATCH:
 682  4FCF 1E 0D            LD E, 13 ; Type mismatch
 683  4FD1 18 02            JR THROW_ERROR
 684  4FD3
 685  4FD3              SYNTAX_ERROR:
 686  4FD3 1E 02            LD E, 2 ; Syntax error
 687  4FD5              THROW_ERROR:
 688  4FD5 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 689  4FD9 C3 59 01     	JP	CALBAS
 690  4FDC
 691  4FDC              ;---------------------------
 692  4FDC
 693  4FDC               IFNDEF EXCLUDE_RAM_CMDS
 694  4FDC              ; *******************************************************************************************************
 695  4FDC              ; function to handle CALL MEMCPY basic extension
 696  4FDC              ; _MEMCPY ( INT source,
 697  4FDC              ;			INT destination,
 698  4FDC              ;			INT count,
 699  4FDC              ; will put ram in page 0 also, page 1 is already there
 700  4FDC              MEMCPY:
 701  4FDC              	; opening (
 702  4FDC CD BD 4F     	CALL CHKCHAR
 703  4FDF 28           	DB '('
 704  4FE0              	; get source address
 705  4FE0 DD 21 2F 54  	LD IX, FRMQNT
 706  4FE4 CD 59 01     	CALL CALBAS
 707  4FE7 D5           	PUSH DE
 708  4FE8              	; comma
 709  4FE8 CD BD 4F     	CALL CHKCHAR
 710  4FEB 2C           	DB ','
 711  4FEC              	; get destination address
 712  4FEC DD 21 2F 54  	LD IX, FRMQNT
 713  4FF0 CD 59 01     	CALL CALBAS
 714  4FF3 D5           	PUSH DE
 715  4FF4              	; comma
 716  4FF4 CD BD 4F     	CALL CHKCHAR
 717  4FF7 2C           	DB ','
 718  4FF8              	; get length
 719  4FF8 DD 21 2F 54  	LD IX, FRMQNT
 720  4FFC CD 59 01     	CALL CALBAS
 721  4FFF D5           	PUSH DE
 722  5000              	; ending )
 723  5000 CD BD 4F     	CALL CHKCHAR
 724  5003 29           	DB ')'
 725  5004
 726  5004              	; save position
 727  5004 E5           	PUSH HL
 728  5005 DD E1        	POP IX
 729  5007
 730  5007 C1           	POP BC ; count
 731  5008 D1           	POP DE ; destination
 732  5009 E1           	POP HL ; source
 733  500A D9           	EXX
 734  500B              	; enable page 0
 735  500B FD 21 12 50  	LD IY, .RET
 736  500F C3 BF 4E     	JP ENABLE_PAGE0
 737  5012              .RET:
 738  5012 FB           	EI
 739  5013 D9           	EXX
 740  5014 ED B0        	LDIR
 741  5016 D1               POP DE
 742  5017 C1               POP BC
 743  5018 CD 36 4E         CALL RESTORE_PAGE_INFO
 744  501B DD E5        	PUSH IX
 745  501D E1           	POP HL
 746  501E C9           	RET
 747  501F              ; *******************************************************************************************************
 748  501F               ENDIF
 749  501F               IFNDEF EXCLUDE_VRAM_CMDS
 750  501F              ; *******************************************************************************************************
 751  501F              ; function to handle CALL FILVRM basic extension
 752  501F              ; FILVRM ( INT offset,
 753  501F              ;		   INT count,
 754  501F              ;		   BYTE value,
 755  501F              ;		   BYTE wait_vsync) >0 = true
 756  501F              ; wait_vsync will issue HALT before copying
 757  501F              FILVRM:
 758  501F              	; opening (
 759  501F CD BD 4F     	CALL CHKCHAR
 760  5022 28           	DB '('
 761  5023              	; get offset address
 762  5023 DD 21 2F 54  	LD IX, FRMQNT
 763  5027 CD 59 01     	CALL CALBAS
 764  502A D5           	PUSH DE
 765  502B              	; comma
 766  502B CD BD 4F     	CALL CHKCHAR
 767  502E 2C           	DB ','
 768  502F              	; get count
 769  502F DD 21 2F 54  	LD IX, FRMQNT
 770  5033 CD 59 01     	CALL CALBAS
 771  5036 D5           	PUSH DE
 772  5037              	; comma
 773  5037 CD BD 4F     	CALL CHKCHAR
 774  503A 2C           	DB ','
 775  503B              	; get value
 776  503B DD 21 1C 52  	LD IX, GETBYT
 777  503F CD 59 01     	CALL CALBAS
 778  5042 F5           	PUSH AF
 779  5043              	; comma
 780  5043 CD BD 4F     	CALL CHKCHAR
 781  5046 2C           	DB ','
 782  5047              	; get vsync wait
 783  5047 DD 21 1C 52  	LD IX, GETBYT
 784  504B CD 59 01     	CALL CALBAS
 785  504E F5           	PUSH AF
 786  504F              	; ending )
 787  504F CD BD 4F     	CALL CHKCHAR
 788  5052 29           	DB ')'
 789  5053
 790  5053 FB               EI
 791  5054              	; save position
 792  5054 E5           	PUSH HL
 793  5055 DD E1        	POP IX
 794  5057
 795  5057              	; syntax ok
 796  5057              	; wait for vsync if needed
 797  5057 F1           	POP AF
 798  5058 B7           	OR A
 799  5059 28 01        	JR Z, .L1
 800  505B 76           	HALT
 801  505C
 802  505C              .L1:
 803  505C F1               POP AF ; value
 804  505D C1               POP BC ; count
 805  505E E1               POP HL ; offset
 806  505F CD 56 00         CALL BIOS_FILVRM
 807  5062
 808  5062              .L3:
 809  5062 DD E5        	PUSH IX
 810  5064 E1           	POP HL
 811  5065 C9           	RET
 812  5066              ; *******************************************************************************************************
 813  5066               ENDIF
 814  5066
 815  5066               IFNDEF EXCLUDE_RAM_CMDS
 816  5066              ; *******************************************************************************************************
 817  5066              ; function to handle CALL FILRAM basic extension
 818  5066              ; FILRAM ( INT start address,
 819  5066              ;		   INT count,
 820  5066              ;		   BYTE value,
 821  5066              ; will put ram in page 0 also, page 1 is already there
 822  5066              FILRAM:
 823  5066              	; opening (
 824  5066 CD BD 4F     	CALL CHKCHAR
 825  5069 28           	DB '('
 826  506A              	; get start address
 827  506A DD 21 2F 54  	LD IX, FRMQNT
 828  506E CD 59 01     	CALL CALBAS
 829  5071 D5           	PUSH DE
 830  5072              	; comma
 831  5072 CD BD 4F     	CALL CHKCHAR
 832  5075 2C           	DB ','
 833  5076              	; get count
 834  5076 DD 21 2F 54  	LD IX, FRMQNT
 835  507A CD 59 01     	CALL CALBAS
 836  507D D5           	PUSH DE
 837  507E              	; comma
 838  507E CD BD 4F     	CALL CHKCHAR
 839  5081 2C           	DB ','
 840  5082              	; get value
 841  5082 DD 21 1C 52  	LD IX, GETBYT
 842  5086 CD 59 01     	CALL CALBAS
 843  5089 F5           	PUSH AF
 844  508A              	; ending )
 845  508A CD BD 4F     	CALL CHKCHAR
 846  508D 29           	DB ')'
 847  508E
 848  508E              	; save position
 849  508E E5           	PUSH HL
 850  508F DD E1        	POP IX
 851  5091
 852  5091 D1           	POP DE ; actually AF
 853  5092 C1           	POP BC ; count
 854  5093 E1           	POP HL ; start address
 855  5094 78           	LD A, B
 856  5095 B7           	OR A
 857  5096 20 0A        	JR NZ, .L1 ; >=256 bytes to fill
 858  5098 B1           	OR C
 859  5099 28 19        	JR Z, .EXIT ; 0 bytes to fill, skip
 860  509B 79           	LD A, C
 861  509C 3D           	DEC A
 862  509D 20 03        	JR NZ, .L1 ; ; >1 byte to fill
 863  509F              	; one byte to fill
 864  509F 72           	LD (HL), D
 865  50A0 18 12        	JR .EXIT
 866  50A2              .L1:
 867  50A2 D9           	EXX
 868  50A3              	; enable page 0
 869  50A3 FD 21 AA 50  	LD IY, .RET
 870  50A7 C3 BF 4E     	JP ENABLE_PAGE0
 871  50AA              .RET:
 872  50AA FB           	EI
 873  50AB D9           	EXX
 874  50AC CD B8 50     	CALL .FILLVALUE
 875  50AF D1               POP DE
 876  50B0 C1               POP BC
 877  50B1 CD 36 4E         CALL RESTORE_PAGE_INFO
 878  50B4              .EXIT:
 879  50B4 DD E5        	PUSH IX
 880  50B6 E1           	POP HL
 881  50B7 C9           	RET
 882  50B8
 883  50B8              .FILLVALUE:
 884  50B8 72               LD (HL), D
 885  50B9 54               LD D, H
 886  50BA 5D               LD E, L
 887  50BB 13               INC DE
 888  50BC 0B               DEC BC
 889  50BD ED B0            LDIR
 890  50BF C9               RET
 891  50C0              ; *******************************************************************************************************
 892  50C0               ENDIF
 893  50C0
 894  50C0               IFNDEF EXCLUDE_GENCAL
 895  50C0              ; *******************************************************************************************************
 896  50C0              ; function to handle CALL GENCAL basic extension
 897  50C0              ; GENCAL ( INT fn_addr, = address of the function to call
 898  50C0              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 899  50C0              ; output values of reristers will also be stored at reg_list_ptr
 900  50C0              GENCAL_VAR_SP:
 901  50C0 00 00            DW 0
 902  50C2              GENCAL_VAR_SP2:
 903  50C2 00 00            DW 0
 904  50C4              GENCAL:
 905  50C4              	; opening (
 906  50C4 CD BD 4F     	CALL CHKCHAR
 907  50C7 28           	DB '('
 908  50C8              	; get function address
 909  50C8 DD 21 2F 54  	LD IX, FRMQNT
 910  50CC CD 59 01     	CALL CALBAS
 911  50CF D5           	PUSH DE
 912  50D0              	; comma
 913  50D0 CD BD 4F     	CALL CHKCHAR
 914  50D3 2C           	DB ','
 915  50D4              	; get pointer to register list
 916  50D4 DD 21 2F 54  	LD IX, FRMQNT
 917  50D8 CD 59 01     	CALL CALBAS
 918  50DB D5           	PUSH DE
 919  50DC              	; ending )
 920  50DC CD BD 4F     	CALL CHKCHAR
 921  50DF 29           	DB ')'
 922  50E0
 923  50E0              	; save BASIC token position
 924  50E0 E5           	PUSH HL
 925  50E1 D9               EXX
 926  50E2 E1           	POP HL ; HL'=next basic token
 927  50E3 D9               EXX
 928  50E4
 929  50E4 E1               POP HL ; get pointer to register values
 930  50E5 ED 73 C0 50      LD (GENCAL_VAR_SP), SP
 931  50E9 F3               DI
 932  50EA F9               LD SP, HL
 933  50EB F1               POP AF
 934  50EC C1               POP BC
 935  50ED D1               POP DE
 936  50EE E1               POP HL
 937  50EF DD E1            POP IX
 938  50F1 FD E1            POP IY
 939  50F3 D9               EXX
 940  50F4 ED 73 C2 50      LD (GENCAL_VAR_SP2), SP
 941  50F8 ED 7B C0 50      LD SP, (GENCAL_VAR_SP)
 942  50FC FB               EI
 943  50FD D1               POP DE ; get function to call
 944  50FE E5               PUSH HL
 945  50FF CD 1A 51         CALL .EXXDECALL
 946  5102 F3               DI
 947  5103 ED 73 C0 50      LD (GENCAL_VAR_SP), SP
 948  5107 ED 7B C2 50      LD SP, (GENCAL_VAR_SP2)
 949  510B FD E5            PUSH IY
 950  510D DD E5            PUSH IX
 951  510F E5               PUSH HL
 952  5110 D5               PUSH DE
 953  5111 C5               PUSH BC
 954  5112 F5               PUSH AF
 955  5113 ED 7B C0 50      LD SP, (GENCAL_VAR_SP)
 956  5117 FB               EI
 957  5118 E1               POP HL
 958  5119 C9           	RET
 959  511A
 960  511A              .EXXDECALL:
 961  511A D5               PUSH DE
 962  511B D9               EXX
 963  511C C9               RET
 964  511D              ; *******************************************************************************************************
 965  511D               ENDIF
 966  511D
 967  511D               IFNDEF EXCLUDE_VRAM_CMDS
 968  511D              ; *******************************************************************************************************
 969  511D              ; function to handle CALL MEMVRM basic extension
 970  511D              ; copies from RAM to VRAM
 971  511D              ; _MEMVRM ( INT source,
 972  511D              ;			INT destination,
 973  511D              ;			INT count,
 974  511D              ;			BYTE wait_vsync) >0 = true
 975  511D              ; will put ram in page 0 also, page 1 is already there
 976  511D              ; wait_vsync will issue HALT before copying
 977  511D              MEMVRM:
 978  511D              	; opening (
 979  511D CD BD 4F     	CALL CHKCHAR
 980  5120 28           	DB '('
 981  5121              	; get source address
 982  5121 DD 21 2F 54  	LD IX, FRMQNT
 983  5125 CD 59 01     	CALL CALBAS
 984  5128 D5           	PUSH DE
 985  5129              	; comma
 986  5129 CD BD 4F     	CALL CHKCHAR
 987  512C 2C           	DB ','
 988  512D              	; get destination address
 989  512D DD 21 2F 54  	LD IX, FRMQNT
 990  5131 CD 59 01     	CALL CALBAS
 991  5134 D5           	PUSH DE
 992  5135              	; comma
 993  5135 CD BD 4F     	CALL CHKCHAR
 994  5138 2C           	DB ','
 995  5139              	; get length
 996  5139 DD 21 2F 54  	LD IX, FRMQNT
 997  513D CD 59 01     	CALL CALBAS
 998  5140 D5           	PUSH DE
 999  5141              	; comma
1000  5141 CD BD 4F     	CALL CHKCHAR
1001  5144 2C           	DB ','
1002  5145              	; get vsync wait
1003  5145 DD 21 1C 52  	LD IX, GETBYT
1004  5149 CD 59 01     	CALL CALBAS
1005  514C F5           	PUSH AF
1006  514D              	; ending )
1007  514D CD BD 4F     	CALL CHKCHAR
1008  5150 29           	DB ')'
1009  5151
1010  5151                  ; save position in BASIC text
1011  5151 E5           	PUSH HL
1012  5152 DD E1        	POP IX
1013  5154
1014  5154 F1           	POP AF ; wait vsync
1015  5155 B7           	OR A
1016  5156 28 03        	JR Z, .L1
1017  5158 FB               EI
1018  5159 76           	HALT
1019  515A F3           	DI
1020  515B              .L1:
1021  515B              	; pop LDIR parameters and store away for later
1022  515B C1           	POP BC ; count
1023  515C D1           	POP DE ; vram destination
1024  515D E1           	POP HL ; ram source
1025  515E D9           	EXX
1026  515F FD 21 66 51   	LD IY, .RET
1027  5163 C3 BF 4E     	JP ENABLE_PAGE0
1028  5166              .RET:
1029  5166 FB           	EI
1030  5167 D9           	EXX
1031  5168 CD 74 51     	CALL .LDIRVM
1032  516B D1               POP DE
1033  516C C1               POP BC
1034  516D CD 36 4E         CALL RESTORE_PAGE_INFO
1035  5170 DD E5        	PUSH IX
1036  5172 E1           	POP HL
1037  5173 C9           	RET
1038  5174
1039  5174              .LDIRVM:
1040  5174 EB           	EX DE, HL
1041  5175 CD F4 4D     	CALL SETWRT_LOCAL
1042  5178 EB           	EX DE, HL
1043  5179 78           	LD A, B
1044  517A B7           	OR A
1045  517B 28 0D        	JR Z, .L3
1046  517D C5           	PUSH BC
1047  517E 0E 98        	LD C, #98
1048  5180              .L2:
1049  5180 50           	LD D, B
1050  5181 06 00        	LD B, 0
1051  5183 CD 90 51     	CALL .BBYTECOPY
1052  5186 42           	LD B, D
1053  5187 10 F7        	DJNZ .L2
1054  5189 C1           	POP BC
1055  518A              .L3:
1056  518A 79           	LD A, C
1057  518B B7           	OR A
1058  518C C8           	RET Z
1059  518D 41           	LD B, C
1060  518E 0E 98        	LD C, #98
1061  5190              .BBYTECOPY:
1062  5190 ED A3        	OUTI
1063  5192 C2 90 51     	JP	NZ, .BBYTECOPY
1064  5195 C9           	RET
1065  5196              ; *******************************************************************************************************
1066  5196               ENDIF
1067  5196
1068  5196               IFNDEF EXCLUDE_VRAM_CMDS
1069  5196              ; *******************************************************************************************************
1070  5196              ; function to handle CALL VRMMEM basic extension
1071  5196              ; copies from RAM to VRAM
1072  5196              ; _VRMMEM ( INT source,
1073  5196              ;			INT destination,
1074  5196              ;			INT count
1075  5196              ; will put ram in page 0 also, page 1 is already there
1076  5196              VRMMEM:
1077  5196              	; opening (
1078  5196 CD BD 4F     	CALL CHKCHAR
1079  5199 28           	DB '('
1080  519A              	; get source address
1081  519A DD 21 2F 54  	LD IX, FRMQNT
1082  519E CD 59 01     	CALL CALBAS
1083  51A1 D5           	PUSH DE
1084  51A2              	; comma
1085  51A2 CD BD 4F     	CALL CHKCHAR
1086  51A5 2C           	DB ','
1087  51A6              	; get destination address
1088  51A6 DD 21 2F 54  	LD IX, FRMQNT
1089  51AA CD 59 01     	CALL CALBAS
1090  51AD D5           	PUSH DE
1091  51AE              	; comma
1092  51AE CD BD 4F     	CALL CHKCHAR
1093  51B1 2C           	DB ','
1094  51B2              	; get length
1095  51B2 DD 21 2F 54  	LD IX, FRMQNT
1096  51B6 CD 59 01     	CALL CALBAS
1097  51B9 D5           	PUSH DE
1098  51BA              	; ending )
1099  51BA CD BD 4F     	CALL CHKCHAR
1100  51BD 29           	DB ')'
1101  51BE
1102  51BE                  ; save position in BASIC text
1103  51BE E5           	PUSH HL
1104  51BF DD E1        	POP IX
1105  51C1
1106  51C1 C1           	POP BC ; count
1107  51C2 D1           	POP DE ; destination
1108  51C3 E1           	POP HL ; source
1109  51C4 D9           	EXX
1110  51C5 FD 21 CC 51  	LD IY, .RET
1111  51C9 C3 BF 4E     	JP ENABLE_PAGE0
1112  51CC              .RET:
1113  51CC FB           	EI
1114  51CD D9           	EXX
1115  51CE CD DA 51     	CALL .LDIRMV
1116  51D1 D1               POP DE
1117  51D2 C1               POP BC
1118  51D3 CD 36 4E         CALL RESTORE_PAGE_INFO
1119  51D6 DD E5        	PUSH IX
1120  51D8 E1           	POP HL
1121  51D9 C9           	RET
1122  51DA
1123  51DA              .LDIRMV:
1124  51DA              	; set VRAM address *exactly* as in ROM, otherwise corruption
1125  51DA 7D           	LD	A, L
1126  51DB F3           	DI
1127  51DC D3 99        	OUT	(099H), A
1128  51DE 7C           	LD	A, H
1129  51DF E6 3F        	AND	03FH
1130  51E1 D3 99        	OUT	(099H), A
1131  51E3 FB           	EI
1132  51E4              	;EX (SP), HL
1133  51E4              	;EX (SP), HL
1134  51E4              	;NOP
1135  51E4              	;NOP
1136  51E4              .L4:
1137  51E4 DB 98            IN A, (#98)
1138  51E6 12           	LD (DE), A
1139  51E7 13               INC DE
1140  51E8 0B               DEC BC
1141  51E9 79               LD A, C
1142  51EA B0               OR B
1143  51EB 20 F7            JR NZ, .L4
1144  51ED C9               RET
1145  51EE              ; *******************************************************************************************************
1146  51EE               ENDIF
1147  51EE
1148  51EE              ; *******************************************************************************************************
1149  51EE              ; H.TIMI function
1150  51EE              MBGE_HTIMI:
1151  51EE               EXPORT MBGE_HTIMI
1152  51EE F5           	PUSH AF
1153  51EF
1154  51EF               IFNDEF EXCLUDE_SPRITE_CMDS
1155  51EF CD CF 4E     	CALL SPRATR_UPDATE
1156  51F2               ENDIF
1157  51F2
1158  51F2               IFNDEF EXCLUDE_SOUND_PLAYER
1159  51F2 3A F5 4C     	LD A, (SOUND_ENABLED)
1160  51F5 B7           	OR A
1161  51F6 28 2A        	JR Z, .EXIT
1162  51F8
1163  51F8              	; enable page 2
1164  51F8 3E 02            LD A, 2
1165  51FA CD FF 4D         CALL GET_PAGE_INFO
1166  51FD C5               PUSH BC
1167  51FE D5               PUSH DE
1168  51FF 3A 43 F3         LD A, (RAMAD2)
1169  5202 26 80            LD H, 080H
1170  5204 CD 46 4E         CALL LOCAL_ENASLT
1171  5207              	; enable page 0
1172  5207 AF               XOR A
1173  5208 CD FF 4D         CALL GET_PAGE_INFO
1174  520B C5               PUSH BC
1175  520C D5               PUSH DE
1176  520D 3A 41 F3         LD A, (RAMAD0)
1177  5210 26 00            LD H, 0
1178  5212 CD 46 4E         CALL LOCAL_ENASLT
1179  5215
1180  5215 CD 31 42     	CALL PLY_AKG_PLAY
1181  5218
1182  5218              	; restore page 0
1183  5218 D1               POP DE
1184  5219 C1               POP BC
1185  521A CD 36 4E         CALL RESTORE_PAGE_INFO
1186  521D              	; restore page 2
1187  521D D1               POP DE
1188  521E C1               POP BC
1189  521F CD 36 4E         CALL RESTORE_PAGE_INFO
1190  5222               ENDIF
1191  5222
1192  5222              .EXIT:
1193  5222 F1           	POP AF
1194  5223 C3 EE 4C     	JP ORIG.HTIMI
1195  5226              ; *******************************************************************************************************
1196  5226
1197  5226              ; *******************************************************************************************************
1198  5226              ; interrupt handler when page 0 enabled
1199  5226              VBLANK:
1200  5226              	EXPORT VBLANK
1201  5226
1202  5226 F5               PUSH AF
1203  5227              	; is VDP originator ?
1204  5227 DB 99        	IN	A, (099H)
1205  5229 A7           	AND	A
1206  522A F2 50 52     	JP P, .EXIT
1207  522D
1208  522D               IFNDEF EXCLUDE_SOUND_PLAYER
1209  522D 3A F5 4C     	LD A, (SOUND_ENABLED)
1210  5230 B7           	OR A
1211  5231 28 1D        	JR Z, .EXIT
1212  5233
1213  5233 C5               PUSH BC
1214  5234 D5               PUSH DE
1215  5235 E5               PUSH HL
1216  5236 08               EX AF, AF'
1217  5237 D9               EXX
1218  5238 F5               PUSH AF
1219  5239 C5               PUSH BC
1220  523A D5               PUSH DE
1221  523B E5               PUSH HL
1222  523C DD E5            PUSH IX
1223  523E FD E5            PUSH IY
1224  5240
1225  5240 CD 31 42     	CALL PLY_AKG_PLAY
1226  5243
1227  5243 FD E1            POP IY
1228  5245 DD E1            POP IX
1229  5247 E1               POP HL
1230  5248 D1               POP DE
1231  5249 C1               POP BC
1232  524A F1               POP AF
1233  524B 08               EX AF, AF'
1234  524C D9               EXX
1235  524D E1               POP HL
1236  524E D1               POP DE
1237  524F C1               POP BC
1238  5250               ENDIF
1239  5250
1240  5250              .EXIT:
1241  5250 F1           	POP AF
1242  5251 FB           	EI
1243  5252 ED 4D        	RETI
1244  5254              ; *******************************************************************************************************
1245  5254
1246  5254               IFNDEF EXCLUDE_SOUND_PLAYER
1247  5254              ; *******************************************************************************************************
1248  5254              ; function to handle CALL SNDPLYINIT basic extension
1249  5254              ; initializes sound player
1250  5254              ; _SNDPLYINIT ( INT music_offset,
1251  5254              ;				INT sfx_offset, can be -1 if no SFX
1252  5254              ; will put ram in page 0 also, page 1 is already there
1253  5254              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1254  5254              SNDPLYINIT:
1255  5254              	; opening (
1256  5254 CD BD 4F     	CALL CHKCHAR
1257  5257 28           	DB '('
1258  5258              	; get music address
1259  5258 DD 21 2F 54  	LD IX, FRMQNT
1260  525C CD 59 01     	CALL CALBAS
1261  525F D5           	PUSH DE
1262  5260              	; comma
1263  5260 CD BD 4F     	CALL CHKCHAR
1264  5263 2C           	DB ','
1265  5264              	; get sfx address
1266  5264 DD 21 2F 54  	LD IX, FRMQNT
1267  5268 CD 59 01     	CALL CALBAS
1268  526B D5           	PUSH DE
1269  526C              	; ending )
1270  526C CD BD 4F     	CALL CHKCHAR
1271  526F 29           	DB ')'
1272  5270
1273  5270                  ; save position in BASIC text
1274  5270 44           	LD B, H
1275  5271 4D           	LD C, L
1276  5272
1277  5272              	; pop LDIR parameters and store away for later
1278  5272 D1           	POP DE ; sfx address
1279  5273 E1           	POP HL ; music address
1280  5274 C5           	PUSH BC ; basic text location
1281  5275 D9           	EXX
1282  5276 FD 21 7D 52  	LD IY, .RET
1283  527A C3 BF 4E     	JP ENABLE_PAGE0
1284  527D              .RET:
1285  527D D9           	EXX
1286  527E
1287  527E D5           	PUSH DE
1288  527F AF           	XOR A
1289  5280              	; HL = music location
1290  5280 CD 60 41     	CALL PLY_AKG_INIT
1291  5283 3E 01        	LD A, 1
1292  5285 32 F3 4C     	LD (MUSIC_INIT_STATUS), A
1293  5288
1294  5288 E1           	POP HL ; SFX
1295  5289              	; check if SFX address -1
1296  5289 23           	INC HL
1297  528A 7D           	LD A, L
1298  528B B4           	OR H
1299  528C 28 09        	JR Z,.L1
1300  528E 2B           	DEC HL
1301  528F CD 1B 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1302  5292 3E 01        	LD A, 1
1303  5294 32 F4 4C     	LD (SFX_INIT_STATUS), A
1304  5297              .L1:
1305  5297 D1               POP DE
1306  5298 C1               POP BC
1307  5299 CD 36 4E         CALL RESTORE_PAGE_INFO
1308  529C
1309  529C E1           	POP HL
1310  529D C9           	RET
1311  529E              ; *******************************************************************************************************
1312  529E
1313  529E              ; *******************************************************************************************************
1314  529E              ; function to handle CALL SNDPLYON basic extension
1315  529E              ; enables sound player
1316  529E              ; _SNDPLYON
1317  529E              ; sets SOUND_ENABLED variable to 1 if init call was done
1318  529E              ; if not throws out of data error
1319  529E              SNDPLYON:
1320  529E 3A F3 4C     	LD A, (MUSIC_INIT_STATUS)
1321  52A1 B7           	OR A
1322  52A2 20 05        	JR NZ, .L1
1323  52A4              	; player not initialized, throw error
1324  52A4 1E 04        	LD E, 04 ; Out of DATA
1325  52A6 C3 D5 4F     	JP THROW_ERROR
1326  52A9              .L1:
1327  52A9 32 F5 4C     	LD (SOUND_ENABLED), A
1328  52AC              	; disable key click
1329  52AC AF           	XOR A
1330  52AD 32 DB F3     	LD (CLIKSW), A
1331  52B0 C9           	RET
1332  52B1              ; *******************************************************************************************************
1333  52B1
1334  52B1              ; *******************************************************************************************************
1335  52B1              ; function to handle CALL SNDPLYOFF basic extension
1336  52B1              ; disables sound player
1337  52B1              ; _SNDPLYOFF
1338  52B1              ; sets SOUND_ENABLED variable to 0
1339  52B1              ; calls AKG to stop music and SFX on all channels if initialized
1340  52B1              SNDPLYOFF:
1341  52B1 3A F5 4C     	LD A, (SOUND_ENABLED)
1342  52B4 B7           	OR A
1343  52B5 C8           	RET Z ; already stopped
1344  52B6 AF           	XOR A
1345  52B7 32 F5 4C     	LD (SOUND_ENABLED), A
1346  52BA E5           	PUSH HL
1347  52BB CD 1F 42     	CALL PLY_AKG_STOP
1348  52BE 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1349  52C1 B7           	OR A
1350  52C2 28 0E        	JR Z, .EXIT ; SFX not in use
1351  52C4 AF           	XOR A
1352  52C5 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1353  52C8 3E 01        	LD A, 1
1354  52CA CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1355  52CD 3E 02        	LD A, 2
1356  52CF CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1357  52D2              .EXIT:
1358  52D2 E1           	POP HL
1359  52D3 C9           	RET
1360  52D4              ; *******************************************************************************************************
1361  52D4
1362  52D4              ; *******************************************************************************************************
1363  52D4              ; function to handle CALL SNDSFX basic extension
1364  52D4              ; plays a sound effect
1365  52D4              ; _SNDSFX ( BYTE sfx_number, >0
1366  52D4              ;			BYTE channel, = 0,1 or 2
1367  52D4              ;			BYTE inverted_volume = 0-16, 0 being full volume
1368  52D4              ; will put ram in page 0 also, page 1 is already there
1369  52D4              ; if sound off throws illegal function call
1370  52D4              ; if sfx not initialized, throws out of data
1371  52D4              SNDSFX:
1372  52D4              	; opening (
1373  52D4 CD BD 4F     	CALL CHKCHAR
1374  52D7 28           	DB '('
1375  52D8              	; get sfx_number
1376  52D8 DD 21 1C 52  	LD IX, GETBYT
1377  52DC CD 59 01     	CALL CALBAS
1378  52DF D5           	PUSH DE
1379  52E0              	; comma
1380  52E0 CD BD 4F     	CALL CHKCHAR
1381  52E3 2C           	DB ','
1382  52E4              	; get sfx address
1383  52E4 DD 21 1C 52  	LD IX, GETBYT
1384  52E8 CD 59 01     	CALL CALBAS
1385  52EB D5           	PUSH DE
1386  52EC              	; comma
1387  52EC CD BD 4F     	CALL CHKCHAR
1388  52EF 2C           	DB ','
1389  52F0              	; get inverted volume
1390  52F0 DD 21 1C 52  	LD IX, GETBYT
1391  52F4 CD 59 01     	CALL CALBAS
1392  52F7 D5           	PUSH DE
1393  52F8              	; ending )
1394  52F8 CD BD 4F     	CALL CHKCHAR
1395  52FB 29           	DB ')'
1396  52FC
1397  52FC 3A F5 4C     	LD A, (SOUND_ENABLED)
1398  52FF B7           	OR A
1399  5300 20 05        	JR NZ, .L1
1400  5302              	; sound disabled, throw illegal function call
1401  5302 1E 05        	LD E, 5
1402  5304 C3 D5 4F     	JP THROW_ERROR
1403  5307              .L1:
1404  5307 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1405  530A B7           	OR A
1406  530B 20 05        	JR NZ, .L2
1407  530D              	; sfx data not initialized, throw out of data
1408  530D 1E 04        	LD E, 4
1409  530F C3 D5 4F     	JP THROW_ERROR
1410  5312              .L2:
1411  5312              	; pop  parameters and store away for later
1412  5312 D1           	POP DE ; inverted volume
1413  5313 43           	LD B, E
1414  5314 D1           	POP DE ; channel
1415  5315 4B           	LD C, E
1416  5316 D1           	POP DE
1417  5317 7B           	LD A, E
1418  5318 08           	EX AF, AF'
1419  5319 E5           	PUSH HL ; basic text location
1420  531A D9           	EXX
1421  531B FD 21 22 53  	LD IY, .RET
1422  531F C3 BF 4E     	JP ENABLE_PAGE0
1423  5322              .RET:
1424  5322 D9           	EXX
1425  5323 08           	EX AF, AF'
1426  5324 CD 1F 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1427  5327
1428  5327 D1               POP DE
1429  5328 C1               POP BC
1430  5329 CD 36 4E         CALL RESTORE_PAGE_INFO
1431  532C
1432  532C E1           	POP HL
1433  532D C9           	RET
1434  532E              ; *******************************************************************************************************
1435  532E               ENDIF
1436  532E
1437  532E               IFNDEF EXCLUDE_SPRITE_CMDS
1438  532E              ; *******************************************************************************************************
1439  532E              ; function to handle CALL SPRATRINI basic extension
1440  532E              ; initializes sprites handler
1441  532E              ; _SPRATRINI ( INT sprites_attributes_data,
1442  532E              ;			   INT update_variable_location,
1443  532E              ;			   INT sprite_flicker_enabled )
1444  532E              ; expects both locations to be in range #8000+ or throws an error
1445  532E              ; since these should be BASIC variables
1446  532E              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA and SPRFLICKER_ENABLED
1447  532E              SPRATRINI:
1448  532E              	; opening (
1449  532E CD BD 4F     	CALL CHKCHAR
1450  5331 28           	DB '('
1451  5332              	; get address of sprite attribute table DIM SA%(3,31)
1452  5332 DD 21 2F 54  	LD IX, FRMQNT
1453  5336 CD 59 01     	CALL CALBAS
1454  5339 D5           	PUSH DE
1455  533A              	; comma
1456  533A CD BD 4F     	CALL CHKCHAR
1457  533D 2C           	DB ','
1458  533E              	; get address of sprite attribute table DIM SA%(3,31)
1459  533E DD 21 2F 54  	LD IX, FRMQNT
1460  5342 CD 59 01     	CALL CALBAS
1461  5345 D5           	PUSH DE
1462  5346              	; comma
1463  5346 CD BD 4F     	CALL CHKCHAR
1464  5349 2C           	DB ','
1465  534A              	; get flicker enabled flag
1466  534A DD 21 2F 54  	LD IX, FRMQNT
1467  534E CD 59 01     	CALL CALBAS
1468  5351 D5           	PUSH DE
1469  5352              	; ending )
1470  5352 CD BD 4F     	CALL CHKCHAR
1471  5355 29           	DB ')'
1472  5356
1473  5356 D1           	POP DE ; get flicker flag
1474  5357 7A           	LD A, D
1475  5358 B3           	OR E
1476  5359 32 FB 4C     	LD (SPRFLICKER_ENABLED), A
1477  535C
1478  535C D1           	POP DE ; update variable location
1479  535D CB 7A        	BIT 7, D ; is address >= &h8000
1480  535F 20 05        	JR NZ, .L1
1481  5361 1E 05        	LD E, 5 ; illegal function call
1482  5363 C3 D5 4F     	JP THROW_ERROR
1483  5366              .L1:
1484  5366 ED 53 F7 4C  	LD (SPRATR_UPDATE_FLAG), DE
1485  536A D1           	POP DE ; address of sprite attribute table
1486  536B CB 7A        	BIT 7, D ; is address >= &h8000
1487  536D 20 05        	JR NZ, .L2
1488  536F 1E 05        	LD E, 5 ; illegal function call
1489  5371 C3 D5 4F     	JP THROW_ERROR
1490  5374              .L2:
1491  5374 ED 53 F9 4C  	LD (SPRATR_DATA), DE
1492  5378 3E 01        	LD A, 1
1493  537A 32 F6 4C     	LD (SPRATR_INIT_STATUS), A
1494  537D C9           	RET
1495  537E              ; *******************************************************************************************************
1496  537E
1497  537E              ; *******************************************************************************************************
1498  537E              ; function to handle CALL SPRSET basic extension
1499  537E              ; sets position, and optionally pattern and color of sprite
1500  537E              ; _SPRSET ( BYTE sprite_num , valid 0-31
1501  537E              ;			INT x,
1502  537E              ;			INT y,
1503  537E              ;			INT pattern, valid 0-31, otherwise ignored
1504  537E              ;			INT color, valid 0-15, otherwise ignored
1505  537E              SPRSET:
1506  537E 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1507  5381 B7           	OR A
1508  5382 20 05        	JR NZ, .L1
1509  5384 1E 05        	LD E, 5 ; illegal function call
1510  5386 C3 D5 4F     	JP THROW_ERROR
1511  5389              .L1:
1512  5389              	; opening (
1513  5389 CD BD 4F     	CALL CHKCHAR
1514  538C 28           	DB '('
1515  538D              	; get sprite number
1516  538D DD 21 1C 52  	LD IX, GETBYT
1517  5391 CD 59 01     	CALL CALBAS
1518  5394 F5           	PUSH AF
1519  5395              	; comma
1520  5395 CD BD 4F     	CALL CHKCHAR
1521  5398 2C           	DB ','
1522  5399              	; get x
1523  5399 DD 21 2F 54  	LD IX, FRMQNT
1524  539D CD 59 01     	CALL CALBAS
1525  53A0 D5           	PUSH DE
1526  53A1              	; comma
1527  53A1 CD BD 4F     	CALL CHKCHAR
1528  53A4 2C           	DB ','
1529  53A5              	; get y
1530  53A5 DD 21 2F 54  	LD IX, FRMQNT
1531  53A9 CD 59 01     	CALL CALBAS
1532  53AC D5           	PUSH DE
1533  53AD              	; comma
1534  53AD CD BD 4F     	CALL CHKCHAR
1535  53B0 2C           	DB ','
1536  53B1              	; get pattern
1537  53B1 DD 21 2F 54  	LD IX, FRMQNT
1538  53B5 CD 59 01     	CALL CALBAS
1539  53B8 D5           	PUSH DE
1540  53B9              	; comma
1541  53B9 CD BD 4F     	CALL CHKCHAR
1542  53BC 2C           	DB ','
1543  53BD              	; get color
1544  53BD DD 21 2F 54  	LD IX, FRMQNT
1545  53C1 CD 59 01     	CALL CALBAS
1546  53C4 D5           	PUSH DE
1547  53C5              	; ending )
1548  53C5 CD BD 4F     	CALL CHKCHAR
1549  53C8 29           	DB ')'
1550  53C9
1551  53C9                  ; save position in BASIC text
1552  53C9 E5           	PUSH HL
1553  53CA DD E1        	POP IX
1554  53CC
1555  53CC C1           	POP BC ; color
1556  53CD D1           	POP DE ; pattern
1557  53CE D9           	EXX
1558  53CF C1           	POP BC ; y
1559  53D0 D1           	POP DE ; x
1560  53D1 F1           	POP AF ; sprite number
1561  53D2 FE 20        	CP 32
1562  53D4 38 05        	JR C, .L2
1563  53D6 1E 05        	LD E, 5 ; illegal function call
1564  53D8 C3 D5 4F     	JP THROW_ERROR
1565  53DB              .L2:
1566  53DB              	; find location in sprite attributes table
1567  53DB 87          > ADD A, A
1567  53DC 87          > ADD A, A
1567  53DD 87          > ADD A, A
1568  53DE D5           	PUSH DE
1569  53DF 16 00        	LD D, 0
1570  53E1 5F           	LD E, A
1571  53E2 2A F9 4C     	LD HL, (SPRATR_DATA)
1572  53E5 19           	ADD HL, DE
1573  53E6 D1           	POP DE
1574  53E7              	; set y
1575  53E7 71           	LD (HL), C
1576  53E8 23           	INC HL
1577  53E9 70           	LD (HL), B
1578  53EA 23           	INC HL
1579  53EB              	; set x
1580  53EB 73           	LD (HL), E
1581  53EC 23           	INC HL
1582  53ED 72           	LD (HL), D
1583  53EE 23           	INC HL
1584  53EF E5           	PUSH HL
1585  53F0 D9           	EXX
1586  53F1 E1           	POP HL
1587  53F2              	; check if 0<=pattern<32
1588  53F2 7A           	LD A, D
1589  53F3 B7           	OR A
1590  53F4 20 0B        	JR NZ, .L3
1591  53F6 7D           	LD A, L
1592  53F7 FE 20        	CP 32
1593  53F9 30 06        	JR NC, .L3
1594  53FB              	; set pattern
1595  53FB 73           	LD (HL), E
1596  53FC 23           	INC HL
1597  53FD 72           	LD (HL), D
1598  53FE 23           	INC HL
1599  53FF 18 02        	JR .L4
1600  5401              .L3:
1601  5401              	; skip pattern
1602  5401 23          > INC HL
1602  5402 23          > INC HL
1603  5403              .L4:
1604  5403              	; check if 0<=color<16
1605  5403 78           	LD A, B
1606  5404 B7           	OR A
1607  5405 20 08        	JR NZ, .L5
1608  5407 79           	LD A, C
1609  5408 FE 10        	CP 16
1610  540A 30 03        	JR NC, .L5
1611  540C              	; set color
1612  540C 71           	LD (HL), C
1613  540D 23           	INC HL
1614  540E 70           	LD (HL), B
1615  540F
1616  540F              .L5:
1617  540F DD E5        	PUSH IX
1618  5411 E1           	POP HL
1619  5412 C9           	RET
1620  5413              ; *******************************************************************************************************
1621  5413
1622  5413              ; *******************************************************************************************************
1623  5413              ; function sets sprite location based on initial coordinates and offset provided
1624  5413              ; input A=sprite number in SPRATR_DATA , 0-31
1625  5413              ; input DE=initial x
1626  5413              ; input BC=initial y
1627  5413              ; input IY=location where delta y,x are located
1628  5413              ; modifies AF, HL, IX
1629  5413              SPRSET_DELTA_POS:
1630  5413 87          > ADD A, A
1630  5414 87          > ADD A, A
1630  5415 87          > ADD A, A
1631  5416 D5           	PUSH DE
1632  5417 16 00        	LD D, 0
1633  5419 5F           	LD E, A
1634  541A DD 2A F9 4C  	LD IX, (SPRATR_DATA)
1635  541E DD 19        	ADD IX, DE
1636  5420 D1           	POP DE
1637  5421              	; IX=sprite's y location
1638  5421 FD 6E 00     	LD L, (IY)
1639  5424 FD 66 01     	LD H, (IY+1)
1640  5427 09           	ADD HL, BC
1641  5428 DD 75 00     	LD (IX), L
1642  542B DD 74 01     	LD (IX+1), H
1643  542E FD 6E 02     	LD L, (IY+2)
1644  5431 FD 66 03     	LD H, (IY+3)
1645  5434 19           	ADD HL, DE
1646  5435 DD 75 02     	LD (IX+2), L
1647  5438 DD 74 03     	LD (IX+3), H
1648  543B C9           	RET
1649  543C              ; *******************************************************************************************************
1650  543C
1651  543C              ; *******************************************************************************************************
1652  543C              ; function to handle CALL SPRGRPMOV basic extension
1653  543C              ; sets position of a group of sprites described with
1654  543C              ; { int sprite_num, int delta_y, int delta_x } [count]
1655  543C              ; _SPRGRPMOV ( INT x,
1656  543C              ;			   INT y,
1657  543C              ;			   INT data_ptr,
1658  543C              ;			   BYTE count,
1659  543C              ; will put ram in page 0 also, page 1 is already there
1660  543C              SPRGRPMOV:
1661  543C 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1662  543F B7           	OR A
1663  5440 20 05        	JR NZ, .L1
1664  5442 1E 05        	LD E, 5 ; illegal function call
1665  5444 C3 D5 4F     	JP THROW_ERROR
1666  5447              .L1:
1667  5447              	; opening (
1668  5447 CD BD 4F     	CALL CHKCHAR
1669  544A 28           	DB '('
1670  544B              	; get x
1671  544B DD 21 2F 54  	LD IX, FRMQNT
1672  544F CD 59 01     	CALL CALBAS
1673  5452 D5           	PUSH DE
1674  5453              	; comma
1675  5453 CD BD 4F     	CALL CHKCHAR
1676  5456 2C           	DB ','
1677  5457              	; get y
1678  5457 DD 21 2F 54  	LD IX, FRMQNT
1679  545B CD 59 01     	CALL CALBAS
1680  545E D5           	PUSH DE
1681  545F              	; comma
1682  545F CD BD 4F     	CALL CHKCHAR
1683  5462 2C           	DB ','
1684  5463              	; get data pointer
1685  5463 DD 21 2F 54  	LD IX, FRMQNT
1686  5467 CD 59 01     	CALL CALBAS
1687  546A D5           	PUSH DE
1688  546B              	; comma
1689  546B CD BD 4F     	CALL CHKCHAR
1690  546E 2C           	DB ','
1691  546F              	; get count
1692  546F DD 21 1C 52  	LD IX, GETBYT
1693  5473 CD 59 01     	CALL CALBAS
1694  5476 F5           	PUSH AF
1695  5477              	; ending )
1696  5477 CD BD 4F     	CALL CHKCHAR
1697  547A 29           	DB ')'
1698  547B
1699  547B E5           	PUSH HL
1700  547C DD E1        	POP IX
1701  547E
1702  547E C1           	POP BC ; count
1703  547F E1           	POP HL ; data pointer
1704  5480 D9           	EXX
1705  5481 C1           	POP BC ; y
1706  5482 D1           	POP DE ; x
1707  5483 D9           	EXX
1708  5484
1709  5484 DD E5        	PUSH IX ; save position in BASIC buffer
1710  5486
1711  5486 C5           	PUSH BC
1712  5487 E5           	PUSH HL
1713  5488 AF               XOR A
1714  5489 CD FF 4D         CALL GET_PAGE_INFO
1715  548C D9           	EXX
1716  548D E1           	POP HL
1717  548E F1           	POP AF
1718  548F D9           	EXX
1719  5490 C5               PUSH BC
1720  5491 D5               PUSH DE
1721  5492 D9           	EXX
1722  5493 F5           	PUSH AF
1723  5494 E5           	PUSH HL
1724  5495 D9           	EXX
1725  5496 3A 41 F3         LD A, (RAMAD0)
1726  5499 26 00            LD H, 0
1727  549B CD 46 4E         CALL LOCAL_ENASLT
1728  549E FB           	EI
1729  549F E1           	POP HL
1730  54A0 C1           	POP BC
1731  54A1 CD AB 54     	CALL .UPDATE_LOC
1732  54A4 D1               POP DE
1733  54A5 C1               POP BC
1734  54A6 CD 36 4E         CALL RESTORE_PAGE_INFO
1735  54A9 E1           	POP HL
1736  54AA C9           	RET
1737  54AB
1738  54AB              .UPDATE_LOC:
1739  54AB              .L4:
1740  54AB 7E           	LD A, (HL)
1741  54AC 23           	INC HL
1742  54AD 23           	INC HL
1743  54AE E5           	PUSH HL
1744  54AF FD E1        	POP IY
1745  54B1 D9           	EXX
1746  54B2 CD 13 54     	CALL SPRSET_DELTA_POS
1747  54B5 D9           	EXX
1748  54B6 23          > INC HL
1748  54B7 23          > INC HL
1748  54B8 23          > INC HL
1748  54B9 23          > INC HL
1749  54BA 10 EF        	DJNZ .L4
1750  54BC C9           	RET
1751  54BD              ; *******************************************************************************************************
1752  54BD               ENDIF
1753  54BD
1754  54BD               IFNDEF EXCLUDE_BLIT_CMDS
1755  54BD              ; *******************************************************************************************************
1756  54BD              ; function rotates mask and data of several characters and applies to background data
1757  54BD              ; this handles x-shift from 0 to 4
1758  54BD              ; contains self-modifying code that is set-up from external function
1759  54BD              ; input HL=pointer to mask data
1760  54BD              ; input HL'=pointer to character data
1761  54BD              ; input DE=output buffer containing background data
1762  54BD              ; input BC=DE+8
1763  54BD              ; input A=number of characters to process
1764  54BD              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1765  54BD              SHIFT04:
1766  54BD 08           	EX AF, AF'
1767  54BE 7E           	LD A, (HL) ; get mask
1768  54BF D9           	EXX
1769  54C0 57           	LD D, A
1770  54C1 1E FF        	LD E, #FF
1771  54C3 37           	SCF
1772  54C4              .M1:
1773  54C4 18 FE        	JR .M1 ; this is self-modifying part
1774  54C6 CB 1A        	RR D
1775  54C8 CB 1B        	RR E
1776  54CA CB 1A        	RR D
1777  54CC CB 1B        	RR E
1778  54CE CB 1A        	RR D
1779  54D0 CB 1B        	RR E
1780  54D2 CB 1A        	RR D
1781  54D4 CB 1B        	RR E
1782  54D6
1783  54D6 46           	LD B, (HL) ; get data
1784  54D7 0E 00        	LD C, 0
1785  54D9              .M2:
1786  54D9 18 FE        	JR .M2 ; also self-modifying part
1787  54DB CB 38        	SRL B
1788  54DD CB 19        	RR C
1789  54DF CB 38        	SRL B
1790  54E1 CB 19        	RR C
1791  54E3 CB 38        	SRL B
1792  54E5 CB 19        	RR C
1793  54E7 CB 38        	SRL B
1794  54E9 CB 19        	RR C
1795  54EB
1796  54EB D9           	EXX
1797  54EC 1A           	LD A, (DE) ; background
1798  54ED D9           	EXX
1799  54EE A2           	AND D
1800  54EF B0           	OR B
1801  54F0 D9           	EXX
1802  54F1 12           	LD (DE), A
1803  54F2
1804  54F2 0A           	LD A, (BC)
1805  54F3 D9           	EXX
1806  54F4 A3           	AND E
1807  54F5 B1           	OR C
1808  54F6 23           	INC HL
1809  54F7 D9           	EXX
1810  54F8 02           	LD (BC), A
1811  54F9
1812  54F9 23           	INC HL
1813  54FA 13           	INC DE
1814  54FB 03           	INC BC
1815  54FC
1816  54FC 08           	EX AF, AF'
1817  54FD 3D           	DEC A
1818  54FE C2 BD 54     	JP NZ, SHIFT04
1819  5501 C9           	RET
1820  5502              ; *******************************************************************************************************
1821  5502
1822  5502              ; *******************************************************************************************************
1823  5502              ; function rotates mask and data of several characters and applies to background data
1824  5502              ; this handles x-shift from 5 to 8
1825  5502              ; contains self-modifying code that is set-up from external function
1826  5502              ; input HL=pointer to mask data
1827  5502              ; input HL'=pointer to character data
1828  5502              ; input DE=output buffer containing background data
1829  5502              ; input BC=DE+8
1830  5502              ; input A=number of characters to process
1831  5502              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1832  5502              SHIFT58:
1833  5502 08           	EX AF, AF'
1834  5503 7E           	LD A, (HL) ; get mask
1835  5504 D9           	EXX
1836  5505 57           	LD D, A
1837  5506 1E FF        	LD E, #FF
1838  5508 37           	SCF
1839  5509              .M1:
1840  5509 18 FE        	JR .M1 ; this is self-modifying part
1841  550B CB 12        	RL D
1842  550D CB 13        	RL E
1843  550F CB 12        	RL D
1844  5511 CB 13        	RL E
1845  5513 CB 12        	RL D
1846  5515 CB 13        	RL E
1847  5517
1848  5517 46           	LD B, (HL)
1849  5518 0E 00        	LD C, 0
1850  551A              .M2:
1851  551A 18 FE        	JR .M2 ; also self-modifying part
1852  551C CB 20        	SLA B
1853  551E CB 11        	RL C
1854  5520 CB 20        	SLA B
1855  5522 CB 11        	RL C
1856  5524 CB 20        	SLA B
1857  5526 CB 11        	RL C
1858  5528
1859  5528 D9           	EXX
1860  5529 1A           	LD A, (DE) ; background
1861  552A D9           	EXX
1862  552B A3           	AND E
1863  552C B1           	OR C
1864  552D D9           	EXX
1865  552E 12           	LD (DE), A
1866  552F
1867  552F 0A           	LD A, (BC)
1868  5530 D9           	EXX
1869  5531 A2           	AND D
1870  5532 B0           	OR B
1871  5533 23           	INC HL
1872  5534 D9           	EXX
1873  5535 02           	LD (BC), A
1874  5536
1875  5536 23           	INC HL
1876  5537 13           	INC DE
1877  5538 03           	INC BC
1878  5539
1879  5539 08           	EX AF, AF'
1880  553A 3D           	DEC A
1881  553B C2 02 55     	JP NZ, SHIFT58
1882  553E C9           	RET
1883  553F              ; *******************************************************************************************************
1884  553F
1885  553F              ; *******************************************************************************************************
1886  553F              ; routine that shifts one row of characters
1887  553F              ; contains self-modifying code that is set-up from external function
1888  553F              ; input HL=pointer to mask data
1889  553F              ; input HL'=pointer to character data
1890  553F              ; input DE=output buffer containing background data
1891  553F              ; input A=number of characters to process
1892  553F              ; input IX=pointer to structure describing input data
1893  553F              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1894  553F              SHIFT_ROW:
1895  553F F5           	PUSH AF
1896  5540 ED 53 FF 4C  		LD (BLIT_TMP1), DE
1897  5544 E5           		PUSH HL
1898  5545 CD 88 55     			CALL .ADDYSHIFT
1899  5548 E1           		POP HL
1900  5549 ED 53 01 4D  		LD (BLIT_TMP2), DE ; DE+vertical shift
1901  554D              .L1:
1902  554D 3E 08        		LD A, 8
1903  554F DD 96 02     		SUB (IX+2) ; y shift
1904  5552              .CALL1:
1905  5552 CD 00 00     		CALL 0
1906  5555 DD 7E 02     		LD A, (IX+2); y shift
1907  5558 B7           		OR A
1908  5559 28 26        		JR Z, .DONE
1909  555B ED 5B FF 4C  		LD DE, (BLIT_TMP1)
1910  555F E5           		PUSH HL
1911  5560 CD 96 55     			CALL .DETONEXTROW
1912  5563 E1           		POP HL
1913  5564              .CALL2:
1914  5564 CD 00 00     		CALL 0
1915  5567 ED 5B FF 4C  		LD DE, (BLIT_TMP1)
1916  556B E5           		PUSH HL
1917  556C CD 90 55     			CALL .ADD8
1918  556F E1           		POP HL
1919  5570 ED 53 FF 4C  		LD (BLIT_TMP1), DE
1920  5574 ED 5B 01 4D  		LD DE, (BLIT_TMP2)
1921  5578 E5           		PUSH HL
1922  5579 CD 90 55     			CALL .ADD8
1923  557C E1           		POP HL
1924  557D ED 53 01 4D  		LD (BLIT_TMP2), DE ; DE+vertical shift
1925  5581              .DONE:
1926  5581 F1           	POP AF
1927  5582 3D           	DEC A
1928  5583 C8           	RET Z
1929  5584 F5           	PUSH AF
1930  5585 C3 4D 55     	JP .L1
1931  5588              .ADDYSHIFT:
1932  5588 EB           	EX DE, HL
1933  5589 16 00        	LD D, 0
1934  558B DD 5E 02     	LD E, (IX+2); y shift
1935  558E 18 0C        	JR .MOVDEBC
1936  5590              .ADD8:
1937  5590 21 08 00     	LD HL, 8
1938  5593 C3 9C 55     	JP .MOVDEBC
1939  5596              .DETONEXTROW:
1940  5596 DD 6E 06     	LD L, (IX+6)
1941  5599 DD 66 07     	LD H, (IX+7) ; bkg add to value
1942  559C              .MOVDEBC:
1943  559C 19           	ADD HL, DE
1944  559D 54           	LD D, H
1945  559E 5D           	LD E, L
1946  559F 01 08 00     	LD BC, 8
1947  55A2 09           	ADD HL, BC
1948  55A3 44           	LD B, H
1949  55A4 4D           	LD C, L
1950  55A5 C9           	RET
1951  55A6              ; *******************************************************************************************************
1952  55A6
1953  55A6              ; *******************************************************************************************************
1954  55A6              ; function rotates mask and character data and applies it to background
1955  55A6              ; input IX=pointer to structure describing input data
1956  55A6              ; +0  DW horizontal shift count 0-7
1957  55A6              ; +2  DW vertical shift count 0-7
1958  55A6              ; +4  DW background data start;
1959  55A6              ; +6  DW background add to value to next row of background data
1960  55A6              ; +8  DW mask data start;
1961  55A6              ; +10  DW character data start;
1962  55A6              ; +12 DW character&mask add to value to next row of data
1963  55A6              ; +14 DW columns (low byte used)
1964  55A6              ; +16 DW rows (low byte used)
1965  55A6              SHIFT_MERGE_CHARACTER:
1966  55A6 DD 7E 00     	LD A, (IX) ; shift
1967  55A9 FE 05        	CP 5
1968  55AB 38 25        	JR C, .RIGHT
1969  55AD              	; shifts 5-7, use rotate towards left 1-3
1970  55AD 21 02 55     	LD HL, SHIFT58
1971  55B0 22 53 55     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1972  55B3 22 65 55     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1973  55B6 D6 05        	SUB 5
1974  55B8 28 0D        	JR Z, .L1
1975  55BA 87           	ADD A, A
1976  55BB 87           	ADD A, A
1977  55BC 67           	LD H, A
1978  55BD 2E 18        	LD L, #18 ; JR opcode
1979  55BF 22 09 55     	LD (SHIFT58.M1), HL
1980  55C2 22 1A 55     	LD (SHIFT58.M2), HL
1981  55C5 18 32        	JR .DO
1982  55C7              .L1:
1983  55C7 21 00 00     	LD HL, 0 ; 2xNOP opcode
1984  55CA 22 09 55     	LD (SHIFT58.M1), HL
1985  55CD 22 1A 55     	LD (SHIFT58.M2), HL
1986  55D0 18 27        	JR .DO
1987  55D2              .RIGHT:
1988  55D2              	; shifts 0-4, rotate towards right
1989  55D2 21 BD 54     	LD HL, SHIFT04
1990  55D5 22 53 55     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1991  55D8 22 65 55     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1992  55DB FE 04        	CP 4
1993  55DD 28 11        	JR Z, .R1
1994  55DF D6 04        	SUB 4
1995  55E1 ED 44        	NEG
1996  55E3 87           	ADD A, A
1997  55E4 87           	ADD A, A
1998  55E5 67           	LD H, A
1999  55E6 2E 18        	LD L, #18 ; JR opcode
2000  55E8 22 C4 54     	LD (SHIFT04.M1), HL
2001  55EB 22 D9 54     	LD (SHIFT04.M2), HL
2002  55EE 18 09        	JR .DO
2003  55F0              .R1:
2004  55F0 21 00 00     	LD HL, 0 ; 2xNOP opcode
2005  55F3 22 C4 54     	LD (SHIFT04.M1), HL
2006  55F6 22 D9 54     	LD (SHIFT04.M2), HL
2007  55F9              .DO:
2008  55F9 DD 46 10     	LD B, (IX+16) ; rows
2009  55FC DD 6E 08     	LD L, (IX+8)
2010  55FF DD 66 09     	LD H, (IX+9) ; mask data
2011  5602 DD 5E 04     	LD E, (IX+4)
2012  5605 DD 56 05     	LD D, (IX+5) ; background data
2013  5608 D9           	EXX
2014  5609 DD 6E 0A     	LD L, (IX+10)
2015  560C DD 66 0B     	LD H, (IX+11) ; character data
2016  560F D9           	EXX
2017  5610              .LOOP:
2018  5610 C5           	PUSH BC
2019  5611 E5           		PUSH HL
2020  5612 D5           			PUSH DE
2021  5613 D9           				EXX
2022  5614 E5           				PUSH HL
2023  5615 D9           					EXX
2024  5616 DD 7E 0E     					LD A, (IX+14) ; columns
2025  5619              .CALL:
2026  5619 CD 3F 55     					CALL SHIFT_ROW
2027  561C E1           				POP HL
2028  561D DD 5E 0C     				LD E, (IX+12)
2029  5620 DD 56 0D     				LD D, (IX+13) ; char data to next row
2030  5623 19           				ADD HL, DE
2031  5624 D9           				EXX
2032  5625 E1           			POP HL
2033  5626 DD 5E 06     			LD E, (IX+6)
2034  5629 DD 56 07     			LD D, (IX+7) ; background to next row
2035  562C 19           			ADD HL, DE
2036  562D EB           			EX DE, HL
2037  562E E1           		POP HL
2038  562F DD 4E 0C     		LD C, (IX+12)
2039  5632 DD 46 0D     		LD B, (IX+13) ; char data to next row
2040  5635 09           		ADD HL, BC
2041  5636 C1           	POP BC
2042  5637 10 D7        	DJNZ .LOOP
2043  5639 C9           	RET
2044  563A              ; *******************************************************************************************************
2045  563A
2046  563A              ; *******************************************************************************************************
2047  563A              ; function to handle CALL BLIT basic extension
2048  563A              ; rotates 1-bit character drawing horizontally with mask and character data and
2049  563A              ; fuses with background data and applies vertical shift too
2050  563A              ; BLIT ( INT request_data_ptr )
2051  563A              ; request_data_ptr described in SHIFT_MERGE_CHARACTER
2052  563A              ; will put ram in page 0 also, page 1 is already there
2053  563A              BLIT:
2054  563A              	; opening (
2055  563A CD BD 4F     	CALL CHKCHAR
2056  563D 28           	DB '('
2057  563E              	; get pointer to request struct
2058  563E DD 21 2F 54  	LD IX, FRMQNT
2059  5642 CD 59 01     	CALL CALBAS
2060  5645 D5           	PUSH DE
2061  5646              	; ending )
2062  5646 CD BD 4F     	CALL CHKCHAR
2063  5649 29           	DB ')'
2064  564A
2065  564A DD E1        	POP IX ; pointer to request struct
2066  564C
2067  564C E5           	PUSH HL ; save position in BASIC buffer
2068  564D
2069  564D FD 21 54 56  	LD IY, .RET
2070  5651 C3 BF 4E     	JP ENABLE_PAGE0
2071  5654              .RET:
2072  5654 FB           	EI
2073  5655 CD A6 55     	CALL SHIFT_MERGE_CHARACTER
2074  5658
2075  5658 D1               POP DE
2076  5659 C1               POP BC
2077  565A CD 36 4E         CALL RESTORE_PAGE_INFO
2078  565D
2079  565D E1           	POP HL
2080  565E C9           	RET
2081  565F              ; *******************************************************************************************************
2082  565F
2083  565F              ; *******************************************************************************************************
2084  565F              ; generic function to implement tiling
2085  565F              ; should be modified to call appropriate function for memory or vram
2086  565F              ; input IX=pointer to following structure
2087  565F              ; +00 tile_data_ptr
2088  565F              ; +02 tile_rows
2089  565F              ; +04 tile_columns
2090  565F              ; +06 destination_address
2091  565F              ; +08 dest_to_next_row_add_to_value
2092  565F              ; +10 num_horizontal_tiles
2093  565F              ; +12 num_vertical_tiles
2094  565F              ; modifies AF, BC, DE, HL
2095  565F              TILE:
2096  565F DD 6E 06     	LD L, (IX+6)
2097  5662 DD 66 07     	LD H, (IX+7) ; destination address
2098  5665 22 FF 4C     	LD (TILETMP1), HL
2099  5668 DD 46 0C     	LD B, (IX+12) ; vertical tile number
2100  566B              .L1:
2101  566B C5           	PUSH BC
2102  566C DD 6E 00     		LD L, (IX+0)
2103  566F DD 66 01     		LD H, (IX+1) ; tile address
2104  5672 22 01 4D     		LD (TILETMP2), HL
2105  5675 DD 46 02     		LD B, (IX+2) ; tile rows
2106  5678              .L2:
2107  5678 C5           		PUSH BC
2108  5679              .CALL1:
2109  5679 CD 00 00     			CALL 0
2110  567C DD 46 0A     			LD B, (IX+10) ; horizontal tile num
2111  567F              .L3:
2112  567F C5           			PUSH BC
2113  5680 2A 01 4D     				LD HL, (TILETMP2)
2114  5683 DD 46 04     				LD B, (IX+4) ; tile columns
2115  5686              .L4:
2116  5686 C5           				PUSH BC
2117  5687              .CALL2:
2118  5687 CD 00 00     					CALL 0
2119  568A C1           				POP BC
2120  568B 10 F9        				DJNZ .L4
2121  568D C1           			POP BC
2122  568E 10 EF        			DJNZ .L3
2123  5690 22 01 4D     			LD (TILETMP2), HL
2124  5693 2A FF 4C     			LD HL, (TILETMP1)
2125  5696 DD 5E 08     			LD E, (IX+8)
2126  5699 DD 56 09     			LD D, (IX+9) ; add to value for dest next row
2127  569C 19           			ADD HL, DE
2128  569D 22 FF 4C     			LD (TILETMP1), HL
2129  56A0 C1           		POP BC
2130  56A1 10 D5        		DJNZ .L2
2131  56A3 C1           	POP BC
2132  56A4 10 C5        	DJNZ .L1
2133  56A6 C9           	RET
2134  56A7              ; *******************************************************************************************************
2135  56A7
2136  56A7              ; *******************************************************************************************************
2137  56A7              ; function to handle CALL TILERAM basic extension
2138  56A7              ; fills memory with tiles
2139  56A7              ; fuses with background data and applies vertical shift too
2140  56A7              ; TILERAM ( INT request_data_ptr )
2141  56A7              ; request_data_ptr described in TILE
2142  56A7              ; will put ram in page 0 also, page 1 is already there
2143  56A7              TILERAM:
2144  56A7              	; opening (
2145  56A7 CD BD 4F     	CALL CHKCHAR
2146  56AA 28           	DB '('
2147  56AB              	; get pointer to request struct
2148  56AB DD 21 2F 54  	LD IX, FRMQNT
2149  56AF CD 59 01     	CALL CALBAS
2150  56B2 D5           	PUSH DE
2151  56B3              	; ending )
2152  56B3 CD BD 4F     	CALL CHKCHAR
2153  56B6 29           	DB ')'
2154  56B7
2155  56B7 DD E1        	POP IX ; pointer to request struct
2156  56B9
2157  56B9 E5           	PUSH HL ; save position in BASIC buffer
2158  56BA
2159  56BA FD 21 C1 56  	LD IY, .RET
2160  56BE C3 BF 4E     	JP ENABLE_PAGE0
2161  56C1              .RET:
2162  56C1 FB           	EI
2163  56C2              	; set RAM functions to call
2164  56C2 21 D8 56     	LD HL, .TILECOPY
2165  56C5 22 88 56     	LD (TILE.CALL2+1), HL
2166  56C8 21 E9 56     	LD HL, .SETDESTROW
2167  56CB 22 7A 56     	LD (TILE.CALL1+1), HL
2168  56CE CD 5F 56     	CALL TILE
2169  56D1
2170  56D1 D1               POP DE
2171  56D2 C1               POP BC
2172  56D3 CD 36 4E         CALL RESTORE_PAGE_INFO
2173  56D6
2174  56D6 E1           	POP HL
2175  56D7 C9           	RET
2176  56D8              .TILECOPY:
2177  56D8 ED A0       > LDI
2177  56DA ED A0       > LDI
2177  56DC ED A0       > LDI
2177  56DE ED A0       > LDI
2177  56E0 ED A0       > LDI
2177  56E2 ED A0       > LDI
2177  56E4 ED A0       > LDI
2177  56E6 ED A0       > LDI
2178  56E8 C9           	RET
2179  56E9              .SETDESTROW:
2180  56E9 ED 5B FF 4C  	LD DE, (TILETMP1)
2181  56ED C9           	RET
2182  56EE              ; *******************************************************************************************************
2183  56EE
2184  56EE              ; *******************************************************************************************************
2185  56EE              ; function to handle CALL TILEVRM basic extension
2186  56EE              ; fills vram with tiles
2187  56EE              ; fuses with background data and applies vertical shift too
2188  56EE              ; TILEVRM ( INT request_data_ptr )
2189  56EE              ; request_data_ptr described in TILE
2190  56EE              ; will put ram in page 0 also, page 1 is already there
2191  56EE              TILEVRM:
2192  56EE              	; opening (
2193  56EE CD BD 4F     	CALL CHKCHAR
2194  56F1 28           	DB '('
2195  56F2              	; get pointer to request struct
2196  56F2 DD 21 2F 54  	LD IX, FRMQNT
2197  56F6 CD 59 01     	CALL CALBAS
2198  56F9 D5           	PUSH DE
2199  56FA              	; ending )
2200  56FA CD BD 4F     	CALL CHKCHAR
2201  56FD 29           	DB ')'
2202  56FE
2203  56FE DD E1        	POP IX ; pointer to request struct
2204  5700
2205  5700 E5           	PUSH HL ; save position in BASIC buffer
2206  5701
2207  5701 FD 21 08 57  	LD IY, .RET
2208  5705 C3 BF 4E     	JP ENABLE_PAGE0
2209  5708              .RET:
2210  5708 FB           	EI
2211  5709              	; set RAM functions to call
2212  5709 21 1F 57     	LD HL, .TILECOPY
2213  570C 22 88 56     	LD (TILE.CALL2+1), HL
2214  570F 21 25 57     	LD HL, .SETDESTROW
2215  5712 22 7A 56     	LD (TILE.CALL1+1), HL
2216  5715 CD 5F 56     	CALL TILE
2217  5718
2218  5718 D1               POP DE
2219  5719 C1               POP BC
2220  571A CD 36 4E         CALL RESTORE_PAGE_INFO
2221  571D
2222  571D E1           	POP HL
2223  571E C9           	RET
2224  571F              .TILECOPY:
2225  571F 01 98 08     	LD BC, #0898
2226  5722               IFNDEF EXCLUDE_VRAM_CMDS
2227  5722 C3 90 51     	JP MEMVRM.BBYTECOPY
2228  5725               ELSE
2229  5725 ~            .BBYTECOPY:
2230  5725 ~            	OUTI
2231  5725 ~            	JP	NZ, .BBYTECOPY
2232  5725 ~            	RET
2233  5725               ENDIF
2234  5725              .SETDESTROW:
2235  5725 2A FF 4C     	LD HL, (TILETMP1)
2236  5728 C3 F4 4D     	JP SETWRT_LOCAL
2237  572B              ; *******************************************************************************************************
2238  572B
2239  572B              ; *******************************************************************************************************
2240  572B              ; generic function to implement rectangle data copy
2241  572B              ; should be modified to call appropriate function for memory or vram
2242  572B              ; input IX=pointer to following structure
2243  572B              ; +00 source data pointer
2244  572B              ; +02 num bytes in a row
2245  572B              ; +04 number of rows
2246  572B              ; +06 source add-to value till next row
2247  572B              ; +08 destination address
2248  572B              ; +10 destination add-to value till next row
2249  572B              ; modifies AF, BC, DE, HL
2250  572B              RECTANGLE_COPY:
2251  572B DD 6E 00     	LD L, (IX+0)
2252  572E DD 66 01     	LD H, (IX+1) ; source address
2253  5731 DD 5E 08     	LD E, (IX+8)
2254  5734 DD 56 09     	LD D, (IX+9) ; destination
2255  5737 DD 46 04     	LD B, (IX+4) ; row number
2256  573A              .L1:
2257  573A C5           	PUSH BC
2258  573B E5           		PUSH HL
2259  573C D5           			PUSH DE
2260  573D DD 4E 02     				LD C, (IX+2)
2261  5740 DD 46 03     				LD B, (IX+3) ; num bytes in a row
2262  5743              .CALL1:
2263  5743 CD 00 00     				CALL 0 ; set destination address from DE
2264  5746              .CALL2:
2265  5746 CD 00 00     				CALL 0 ; copy data fn
2266  5749 E1           			POP HL
2267  574A DD 4E 0A     			LD C, (IX+10)
2268  574D DD 46 0B     			LD B, (IX+11) ; destination add-to
2269  5750 09           			ADD HL, BC
2270  5751 EB           			EX DE, HL
2271  5752 E1           		POP HL
2272  5753 DD 4E 06     		LD C, (IX+6)
2273  5756 DD 46 07     		LD B, (IX+7) ; src add-to
2274  5759 09           		ADD HL, BC
2275  575A C1           	POP BC
2276  575B 10 DD        	DJNZ .L1
2277  575D C9           	RET
2278  575E              ; *******************************************************************************************************
2279  575E
2280  575E              ; *******************************************************************************************************
2281  575E              ; function to handle CALL BOXMEMCPY basic extension
2282  575E              ; copies data with window like boundaries to ram
2283  575E              ; BOXMEMCPY ( INT request_data_ptr )
2284  575E              ; request_data_ptr described in RECTANGLE_COPY
2285  575E              ; will put ram in page 0 also, page 1 is already there
2286  575E              BOXMEMCPY:
2287  575E              	; opening (
2288  575E CD BD 4F     	CALL CHKCHAR
2289  5761 28           	DB '('
2290  5762              	; get pointer to request struct
2291  5762 DD 21 2F 54  	LD IX, FRMQNT
2292  5766 CD 59 01     	CALL CALBAS
2293  5769 D5           	PUSH DE
2294  576A              	; ending )
2295  576A CD BD 4F     	CALL CHKCHAR
2296  576D 29           	DB ')'
2297  576E
2298  576E DD E1        	POP IX ; pointer to request struct
2299  5770
2300  5770 E5           	PUSH HL ; save position in BASIC buffer
2301  5771
2302  5771 FD 21 78 57  	LD IY, .RET
2303  5775 C3 BF 4E     	JP ENABLE_PAGE0
2304  5778              .RET:
2305  5778 FB           	EI
2306  5779              	; set RAM functions to call
2307  5779 21 00 00     	LD HL, 0
2308  577C 22 43 57     	LD (RECTANGLE_COPY.CALL1), HL ; NOP NOP
2309  577F 22 45 57     	LD (RECTANGLE_COPY.CALL1+2), HL ; NOP NOP
2310  5782 21 ED B0     	LD HL, #B0ED ; LDIR
2311  5785 22 47 57     	LD (RECTANGLE_COPY.CALL1+4), HL
2312  5788 CD 2B 57     	CALL RECTANGLE_COPY
2313  578B
2314  578B D1               POP DE
2315  578C C1               POP BC
2316  578D CD 36 4E         CALL RESTORE_PAGE_INFO
2317  5790
2318  5790 E1           	POP HL
2319  5791 C9           	RET
2320  5792              ; *******************************************************************************************************
2321  5792
2322  5792              ; *******************************************************************************************************
2323  5792              ; function to handle CALL BOXMEMVRM basic extension
2324  5792              ; copies data with window like boundaries to ram
2325  5792              ; BOXMEMVRM ( INT request_data_ptr )
2326  5792              ; request_data_ptr described in RECTANGLE_COPY
2327  5792              ; will put ram in page 0 also, page 1 is already there
2328  5792              BOXMEMVRM:
2329  5792              	; opening (
2330  5792 CD BD 4F     	CALL CHKCHAR
2331  5795 28           	DB '('
2332  5796              	; get pointer to request struct
2333  5796 DD 21 2F 54  	LD IX, FRMQNT
2334  579A CD 59 01     	CALL CALBAS
2335  579D D5           	PUSH DE
2336  579E              	; ending )
2337  579E CD BD 4F     	CALL CHKCHAR
2338  57A1 29           	DB ')'
2339  57A2
2340  57A2 DD E1        	POP IX ; pointer to request struct
2341  57A4
2342  57A4 E5           	PUSH HL ; save position in BASIC buffer
2343  57A5
2344  57A5 FD 21 AC 57  	LD IY, .RET
2345  57A9 C3 BF 4E     	JP ENABLE_PAGE0
2346  57AC              .RET:
2347  57AC FB           	EI
2348  57AD              	; set RAM functions to call
2349  57AD 21 CB 57     	LD HL, .SETDEST
2350  57B0 22 44 57     	LD (RECTANGLE_COPY.CALL1+1), HL
2351  57B3 21 D1 57     	LD HL, .COPYDATA
2352  57B6 22 47 57     	LD (RECTANGLE_COPY.CALL2+1), HL
2353  57B9 3E CD        	LD A, #CD ; CALL
2354  57BB 32 43 57     	LD (RECTANGLE_COPY.CALL1), A
2355  57BE 32 46 57     	LD (RECTANGLE_COPY.CALL2), A
2356  57C1 CD 2B 57     	CALL RECTANGLE_COPY
2357  57C4
2358  57C4 D1               POP DE
2359  57C5 C1               POP BC
2360  57C6 CD 36 4E         CALL RESTORE_PAGE_INFO
2361  57C9
2362  57C9 E1           	POP HL
2363  57CA C9           	RET
2364  57CB              .SETDEST:
2365  57CB EB           	EX DE, HL
2366  57CC CD F4 4D     	CALL SETWRT_LOCAL
2367  57CF EB           	EX DE, HL
2368  57D0 C9           	RET
2369  57D1              .COPYDATA:
2370  57D1 41           	LD B, C
2371  57D2 0E 98        	LD C, #98
2372  57D4               IFNDEF EXCLUDE_VRAM_CMDS
2373  57D4 C3 90 51     	JP MEMVRM.BBYTECOPY
2374  57D7               ELSE
2375  57D7 ~            	JP TILEVRM.BBYTECOPY
2376  57D7               ENDIF
2377  57D7              ; *******************************************************************************************************
2378  57D7               ENDIF
2379  57D7
2380  57D7              EXT_END:
2381  57D7
# file closed: asm\main.asm
