# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; INCLUDE "system_variables.inc"
   4  4000              ; INCLUDE "system_hooks.inc"
   5  4000              ; INCLUDE "bios_calls.inc"
   6  4000
   7  4000              CHPUT   EQU     #A2
   8  4000              CALBAS	EQU		#159
   9  4000              ERRHAND EQU     #406F
  10  4000              FRMEVL  EQU     #4C64
  11  4000              FRESTR	EQU		#67D0
  12  4000              ; FRMQNT = formula quantificator
  13  4000              ; input HL=pointer to current program expression
  14  4000              ; output HL=next address
  15  4000              ; output DE=integer datum
  16  4000              FRMQNT	EQU		#542F
  17  4000              ; GETBYT = get byte parameter
  18  4000              ; input HL=pointer to current program expression
  19  4000              ; output HL=next address
  20  4000              ; output A=E=byte read
  21  4000              GETBYT	EQU		#521C
  22  4000              CHRGTR  EQU     #4666
  23  4000              SYNCHR	EQU		#558C
  24  4000              VALTYP  EQU     #F663
  25  4000              USR     EQU     #F7F8
  26  4000              PROCNM	EQU		#FD89
  27  4000              BIOS_FILVRM  EQU     #56
  28  4000              CLIKSW	EQU		#F3DB
  29  4000              ATRBAS	EQU		#F928
  30  4000
  31  4000              RAMAD0	EQU	0F341h	; Main-RAM Slot (00000h~03FFFh)
  32  4000              RAMAD1	EQU	0F342h	; Main-RAM Slot (04000h~07FFFh)
  33  4000              RAMAD2	EQU	0F343h	; Main-RAM Slot (08000h~0BFFFh)
  34  4000              RAMAD3	EQU	0F344h	; Main-RAM Slot (0C000h~0FFFFh)
  35  4000              EXPTBL	EQU #FCC1
  36  4000              SCRMOD	EQU #FCAF ; current screen mode
  37  4000
  38  4000              ; BASIC error codes
  39  4000              ;01 NEXT without FOR
  40  4000              ;02 Syntax error
  41  4000              ;03 RETURN without GOSUB
  42  4000              ;04 Out of DATA
  43  4000              ;05 Illegal function call
  44  4000              ;06 Overflow
  45  4000              ;07 Out of memory
  46  4000              ;08 Undefined line number
  47  4000              ;09 Subscript out of range
  48  4000              ;10 Redimensioned array
  49  4000              ;11 Division by zero
  50  4000              ;12 Illegal direct
  51  4000              ;13 Type mismatch
  52  4000              ;14 Out of string space
  53  4000              ;15 String too long
  54  4000              ;16 String formula too complex
  55  4000              ;17 Can't CONTINUE
  56  4000              ;18 Undefined user function
  57  4000              ;19 Device I/O error
  58  4000              ;20 Verify error
  59  4000              ;21 No RESUME
  60  4000              ;22 RESUME without error
  61  4000              ;23 Unprintable error
  62  4000              ;24 Missing operand
  63  4000              ;25 Line buffer overflow
  64  4000              ;50 FIELD overflow
  65  4000              ;51 Internal error
  66  4000              ;52 Bad file number
  67  4000              ;53 File not found
  68  4000              ;54 File already open
  69  4000              ;55 Input past end
  70  4000              ;56 Bad file name
  71  4000              ;57 Direct statement in file
  72  4000              ;58 Sequential I/O only
  73  4000              ;59 File not OPEN
  74  4000
  75  4000
  76  4000               ; simulate cartridge with BASIC extension
  77  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  77  4004 43 4F 00 00
  77  4008 00 00 00 00
  77  400C 00 00 00 00
  78  4010
  79  4010              ; this location #400A stores last location used by basic extension
  80  4010              ; free memory after that point
  81  4010 9D 55         DW EXT_END
  82  4012
  83  4012              ; binary included AKG player compiled at #4012
  84  4012               INCBIN "bin/AKG.bin"
  85  4CEE               INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CEE              MAIN_PLAYER_START EQU 04012H
   2+ 4CEE              PLY_AKG_START EQU 04012H
   3+ 4CEE              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401BH
   4+ 4CEE              PLY_AKG_INITSOUNDEFFECTS EQU 0401BH
   5+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 0401FH
   6+ 4CEE              PLY_AKG_PLAYSOUNDEFFECT EQU 0401FH
   7+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04020H
   8+ 4CEE              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04020H
   9+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04047H
  10+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04047H
  11+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04055H
  12+ 4CEE              PLY_AKG_PSES_PLAY EQU 0408EH
  13+ 4CEE              PLY_AKG_PSES_READFIRSTBYTE EQU 04097H
  14+ 4CEE              PLY_AKG_PSES_S_ENDORLOOP EQU 040AFH
  15+ 4CEE              PLY_AKG_PSES_S_LOOP EQU 040BAH
  16+ 4CEE              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C0H
  17+ 4CEE              PLY_AKG_PSES_NOTREACHED EQU 040D3H
  18+ 4CEE              PLY_AKG_PSES_HARDWAREONLY EQU 040D7H
  19+ 4CEE              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040DEH
  20+ 4CEE              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F0H
  21+ 4CEE              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FAH
  22+ 4CEE              PLY_AKG_PSES_H_AFTERRETRIG EQU 04104H
  23+ 4CEE              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 04118H
  24+ 4CEE              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411DH
  25+ 4CEE              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04125H
  26+ 4CEE              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04130H
  27+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413CH
  28+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 0413EH
  29+ 4CEE              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04144H
  30+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 04148H
  31+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 04148H
  32+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414AH
  33+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414AH
  34+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414AH
  35+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414BH
  36+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414CH
  37+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04150H
  38+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04150H
  39+ 4CEE              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04150H
  40+ 4CEE              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 04158H
  41+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04160H
  42+ 4CEE              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04160H
  43+ 4CEE              PLY_AKG_INIT EQU 04160H
  44+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04160H
  45+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 0418EH
  46+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A2H
  47+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B4H
  48+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D3H
  49+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E0H
  50+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL EQU 041E6H
  51+ 4CEE              PLY_AKG_INITTABLE0 EQU 041E9H
  52+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041E9H
  53+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04203H
  54+ 4CEE              PLY_AKG_INITTABLE0_END EQU 04203H
  55+ 4CEE              PLY_AKG_INITTABLE1 EQU 04203H
  56+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04203H
  57+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04207H
  58+ 4CEE              PLY_AKG_INITTABLE1_END EQU 04207H
  59+ 4CEE              PLY_AKG_INITTABLEORA EQU 04207H
  60+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04207H
  61+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 0421FH
  62+ 4CEE              PLY_AKG_INITTABLEORA_END EQU 0421FH
  63+ 4CEE              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 0421FH
  64+ 4CEE              PLY_AKG_STOP EQU 0421FH
  65+ 4CEE              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04231H
  66+ 4CEE              PLY_AKG_PLAY EQU 04231H
  67+ 4CEE              PLY_AKG_TICKDECREASINGCOUNTER EQU 04239H
  68+ 4CEE              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 0423FH
  69+ 4CEE              PLY_AKG_READLINKER EQU 04244H
  70+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04244H
  71+ 4CEE              PLY_AKG_READLINKER_PTLINKER EQU 04244H
  72+ 4CEE              PLY_AKG_READLINKER_NOLOOP EQU 0424FH
  73+ 4CEE              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 04288H
  74+ 4CEE              PLY_AKG_READLINE EQU 0428BH
  75+ 4CEE              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428BH
  76+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04291H
  77+ 4CEE              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04291H
  78+ 4CEE              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 0429EH
  79+ 4CEE              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A2H
  80+ 4CEE              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A5H
  81+ 4CEE              PLY_AKG_SPEEDTRACK_END EQU 042A8H
  82+ 4CEE              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042A8H
  83+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042AEH
  84+ 4CEE              PLY_AKG_EVENTTRACK_PTTRACK EQU 042AEH
  85+ 4CEE              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BBH
  86+ 4CEE              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042BFH
  87+ 4CEE              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C2H
  88+ 4CEE              PLY_AKG_EVENTTRACK_END EQU 042C5H
  89+ 4CEE              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C5H
  90+ 4CEE              PLY_AKG_CHANNEL1_READTRACK EQU 042D1H
  91+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D1H
  92+ 4CEE              PLY_AKG_CHANNEL1_PTTRACK EQU 042D1H
  93+ 4CEE              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042ECH
  94+ 4CEE              PLY_AKG_CHANNEL1_WAIT EQU 042F7H
  95+ 4CEE              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 042FEH
  96+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 042FEH
  97+ 4CEE              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 042FEH
  98+ 4CEE              PLY_AKG_CHANNEL1_NOTE EQU 04307H
  99+ 4CEE              PLY_AKG_BASENOTEINDEX EQU 04307H
 100+ 4CEE              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 04309H
 101+ 4CEE              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 04309H
 102+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 04319H
 103+ 4CEE              PLY_AKG_INSTRUMENTSTABLE EQU 04319H
 104+ 4CEE              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432BH
 105+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433BH
 106+ 4CEE              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04363H
 107+ 4CEE              PLY_AKG_CHANNEL1_READCELLEND EQU 04366H
 108+ 4CEE              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04366H
 109+ 4CEE              PLY_AKG_CHANNEL2_READTRACK EQU 04372H
 110+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04372H
 111+ 4CEE              PLY_AKG_CHANNEL2_PTTRACK EQU 04372H
 112+ 4CEE              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438DH
 113+ 4CEE              PLY_AKG_CHANNEL2_WAIT EQU 04398H
 114+ 4CEE              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 0439FH
 115+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 0439FH
 116+ 4CEE              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 0439FH
 117+ 4CEE              PLY_AKG_CHANNEL2_NOTE EQU 043A8H
 118+ 4CEE              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043ADH
 119+ 4CEE              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043ADH
 120+ 4CEE              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043CFH
 121+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043DFH
 122+ 4CEE              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04407H
 123+ 4CEE              PLY_AKG_CHANNEL2_READCELLEND EQU 0440AH
 124+ 4CEE              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440AH
 125+ 4CEE              PLY_AKG_CHANNEL3_READTRACK EQU 04416H
 126+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04416H
 127+ 4CEE              PLY_AKG_CHANNEL3_PTTRACK EQU 04416H
 128+ 4CEE              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04431H
 129+ 4CEE              PLY_AKG_CHANNEL3_WAIT EQU 0443CH
 130+ 4CEE              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04443H
 131+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04443H
 132+ 4CEE              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04443H
 133+ 4CEE              PLY_AKG_CHANNEL3_NOTE EQU 0444CH
 134+ 4CEE              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04451H
 135+ 4CEE              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04451H
 136+ 4CEE              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04473H
 137+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04483H
 138+ 4CEE              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ABH
 139+ 4CEE              PLY_AKG_CHANNEL3_READCELLEND EQU 044AEH
 140+ 4CEE              PLY_AKG_CURRENTSPEED EQU 044AEH
 141+ 4CEE              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B0H
 142+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B3H
 143+ 4CEE              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B3H
 144+ 4CEE              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B6H
 145+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044B9H
 146+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044B9H
 147+ 4CEE              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C5H
 148+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CCH
 149+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044CFH
 150+ 4CEE              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D5H
 151+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044D8H
 152+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044D8H
 153+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E6H
 154+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EBH
 155+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F6H
 156+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044F9H
 157+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044F9H
 158+ 4CEE              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FCH
 159+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 044FFH
 160+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE EQU 044FFH
 161+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 04508H
 162+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04512H
 163+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04515H
 164+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04515H
 165+ 4CEE              PLY_AKG_CHANNEL1_PITCH EQU 04515H
 166+ 4CEE              PLY_AKG_CHANNEL1_ISPITCH EQU 04518H
 167+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451DH
 168+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451DH
 169+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04521H
 170+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04523H
 171+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04525H
 172+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452CH
 173+ 4CEE              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452DH
 174+ 4CEE              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04530H
 175+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04530H
 176+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454CH
 177+ 4CEE              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454CH
 178+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 04559H
 179+ 4CEE              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455DH
 180+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456DH
 181+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456DH
 182+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 0456EH
 183+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 0456FH
 184+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04571H
 185+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04571H
 186+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04571H
 187+ 4CEE              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04572H
 188+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04573H
 189+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04575H
 190+ 4CEE              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04575H
 191+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04575H
 192+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04575H
 193+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04575H
 194+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_END EQU 04578H
 195+ 4CEE              PLY_AKG_CHANNEL1_PITCH_END EQU 0457AH
 196+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04582H
 197+ 4CEE              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04582H
 198+ 4CEE              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04585H
 199+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 04588H
 200+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 04588H
 201+ 4CEE              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04594H
 202+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459BH
 203+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 0459EH
 204+ 4CEE              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A4H
 205+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A7H
 206+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A7H
 207+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B5H
 208+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BAH
 209+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C5H
 210+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045C8H
 211+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045C8H
 212+ 4CEE              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CBH
 213+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045CEH
 214+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045CEH
 215+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D7H
 216+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E1H
 217+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E4H
 218+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E4H
 219+ 4CEE              PLY_AKG_CHANNEL2_PITCH EQU 045E4H
 220+ 4CEE              PLY_AKG_CHANNEL2_ISPITCH EQU 045E7H
 221+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045ECH
 222+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045ECH
 223+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F0H
 224+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F2H
 225+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F4H
 226+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FBH
 227+ 4CEE              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FCH
 228+ 4CEE              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 045FFH
 229+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 045FFH
 230+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461BH
 231+ 4CEE              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461BH
 232+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 04628H
 233+ 4CEE              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462CH
 234+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463CH
 235+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463CH
 236+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463DH
 237+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 0463EH
 238+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04640H
 239+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04640H
 240+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04640H
 241+ 4CEE              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04641H
 242+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04642H
 243+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04644H
 244+ 4CEE              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04644H
 245+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04644H
 246+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04644H
 247+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04644H
 248+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_END EQU 04647H
 249+ 4CEE              PLY_AKG_CHANNEL2_PITCH_END EQU 04649H
 250+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04651H
 251+ 4CEE              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04651H
 252+ 4CEE              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04654H
 253+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04657H
 254+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04657H
 255+ 4CEE              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04663H
 256+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466AH
 257+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466DH
 258+ 4CEE              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04673H
 259+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04676H
 260+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04676H
 261+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04684H
 262+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 04689H
 263+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04694H
 264+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04697H
 265+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04697H
 266+ 4CEE              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469AH
 267+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469DH
 268+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469DH
 269+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A6H
 270+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B0H
 271+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B3H
 272+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B3H
 273+ 4CEE              PLY_AKG_CHANNEL3_PITCH EQU 046B3H
 274+ 4CEE              PLY_AKG_CHANNEL3_ISPITCH EQU 046B6H
 275+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BBH
 276+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BBH
 277+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046BFH
 278+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C1H
 279+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C3H
 280+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CAH
 281+ 4CEE              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CBH
 282+ 4CEE              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046CEH
 283+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046CEH
 284+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046EAH
 285+ 4CEE              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046EAH
 286+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F7H
 287+ 4CEE              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FBH
 288+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470BH
 289+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470BH
 290+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470CH
 291+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470DH
 292+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 0470FH
 293+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 0470FH
 294+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 0470FH
 295+ 4CEE              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04710H
 296+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04711H
 297+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04713H
 298+ 4CEE              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04713H
 299+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04713H
 300+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04713H
 301+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04713H
 302+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_END EQU 04716H
 303+ 4CEE              PLY_AKG_CHANNEL3_PITCH_END EQU 04718H
 304+ 4CEE              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04724H
 305+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04724H
 306+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04724H
 307+ 4CEE              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04727H
 308+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 04729H
 309+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 0472FH
 310+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04732H
 311+ 4CEE              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04732H
 312+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04735H
 313+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 0473EH
 314+ 4CEE              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04746H
 315+ 4CEE              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04753H
 316+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04753H
 317+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04753H
 318+ 4CEE              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04756H
 319+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 04758H
 320+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 0475EH
 321+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04761H
 322+ 4CEE              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04761H
 323+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04764H
 324+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476DH
 325+ 4CEE              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04775H
 326+ 4CEE              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04783H
 327+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04783H
 328+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04783H
 329+ 4CEE              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04786H
 330+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 04788H
 331+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 0478EH
 332+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04791H
 333+ 4CEE              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04791H
 334+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04794H
 335+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479DH
 336+ 4CEE              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A5H
 337+ 4CEE              PLY_AKG_SENDPSGREGISTERS EQU 047B4H
 338+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BCH
 339+ 4CEE              PLY_AKG_PSGREG01_INSTR EQU 047BCH
 340+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CCH
 341+ 4CEE              PLY_AKG_PSGREG23_INSTR EQU 047CCH
 342+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DDH
 343+ 4CEE              PLY_AKG_PSGREG45_INSTR EQU 047DDH
 344+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047EEH
 345+ 4CEE              PLY_AKG_PSGREG6_8_INSTR EQU 047EEH
 346+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 047FFH
 347+ 4CEE              PLY_AKG_PSGREG9_10_INSTR EQU 047FFH
 348+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04810H
 349+ 4CEE              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04810H
 350+ 4CEE              PLY_AKG_PSGREG13_OLDVALUE EQU 04825H
 351+ 4CEE              PLY_AKG_RETRIG EQU 04827H
 352+ 4CEE              PLY_AKG_PSGREG13_INSTR EQU 04829H
 353+ 4CEE              PLY_AKG_PSGREG13_END EQU 04838H
 354+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 04838H
 355+ 4CEE              PLY_AKG_SAVESP EQU 04838H
 356+ 4CEE              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483CH
 357+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTS EQU 04844H
 358+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04851H
 359+ 4CEE              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04851H
 360+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTS EQU 04859H
 361+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04866H
 362+ 4CEE              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04866H
 363+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTS EQU 0486EH
 364+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 04879H
 365+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS EQU 04879H
 366+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 04888H
 367+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 04888H
 368+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 0488FH
 369+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 0489FH
 370+ 4CEE              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 0489FH
 371+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A6H
 372+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A6H
 373+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048A9H
 374+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B2H
 375+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B2H
 376+ 4CEE              PLY_AKG_READINSTRUMENTCELL EQU 048B8H
 377+ 4CEE              PLY_AKG_NOSOFTNOHARD EQU 048C5H
 378+ 4CEE              PLY_AKG_NSNH_NONOISE EQU 048DAH
 379+ 4CEE              PLY_AKG_SOFT EQU 048DDH
 380+ 4CEE              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E4H
 381+ 4CEE              PLY_AKG_S_NOTSIMPLE EQU 048ECH
 382+ 4CEE              PLY_AKG_S_AFTERSIMPLETEST EQU 048EFH
 383+ 4CEE              PLY_AKG_HARDTOSOFT EQU 048FCH
 384+ 4CEE              PLY_AKG_HS_JUMPRATIO EQU 04907H
 385+ 4CEE              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04934H
 386+ 4CEE              PLY_AKG_ENDWITHOUTLOOP EQU 04936H
 387+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04936H
 388+ 4CEE              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04936H
 389+ 4CEE              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 0493EH
 390+ 4CEE              PLY_AKG_SH_JUMPRATIO EQU 0494BH
 391+ 4CEE              PLY_AKG_SH_JUMPRATIOEND EQU 0496CH
 392+ 4CEE              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497BH
 393+ 4CEE              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04981H
 394+ 4CEE              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499BH
 395+ 4CEE              PLY_AKG_H_RETRIGEND EQU 049ADH
 396+ 4CEE              PLY_AKG_H_AFTERRETRIG EQU 049AEH
 397+ 4CEE              PLY_AKG_ENDWITHLOOP EQU 049C0H
 398+ 4CEE              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C7H
 399+ 4CEE              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DDH
 400+ 4CEE              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EBH
 401+ 4CEE              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FBH
 402+ 4CEE              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A09H
 403+ 4CEE              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A18H
 404+ 4CEE              PLY_AKG_SHOHS_RETRIGEND EQU 04A27H
 405+ 4CEE              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A28H
 406+ 4CEE              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3AH
 407+ 4CEE              PLY_AKG_EFFECTTABLE EQU 04A48H
 408+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A48H
 409+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6CH
 410+ 4CEE              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6CH
 411+ 4CEE              PLY_AKG_EFFECT_RESET EQU 04A6FH
 412+ 4CEE              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A71H
 413+ 4CEE              PLY_AKG_EFFECT_VOLUME EQU 04A8CH
 414+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A98H
 415+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04A9EH
 416+ 4CEE              PLY_AKG_ARPEGGIOSTABLE EQU 04A9EH
 417+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC5H
 418+ 4CEE              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACCH
 419+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD2H
 420+ 4CEE              PLY_AKG_PITCHESTABLE EQU 04AD2H
 421+ 4CEE              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AF9H
 422+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B00H
 423+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B11H
 424+ 4CEE              PLY_AKG_EFFECT_PITCHDOWN EQU 04B18H
 425+ 4CEE              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B28H
 426+ 4CEE              PLY_AKG_EFFECT_PITCHUP EQU 04B3DH
 427+ 4CEE              PLY_AKG_EFFECT_PITCHSTOP EQU 04B4FH
 428+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B56H
 429+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B80H
 430+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B80H
 431+ 4CEE              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B99H
 432+ 4CEE              PLY_AKG_EFFECT_GLIDESPEED EQU 04B99H
 433+ 4CEE              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BABH
 434+ 4CEE              PLY_AKG_EFFECT_LEGATO EQU 04BC1H
 435+ 4CEE              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD5H
 436+ 4CEE              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDDH
 437+ 4CEE              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE5H
 438+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEDH
 439+ 4CEE              PLY_AKG_EVENT EQU 04BEDH
 440+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BEEH
 441+ 4CEE              PLY_AKG_PERIODTABLE EQU 04BEEH
 442+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BEEH
 443+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CEEH
 444+ 4CEE              PLY_AKG_PERIODTABLE_END EQU 04CEEH
 445+ 4CEE              PLY_AKG_END EQU 04CEEH
 446+ 4CEE              MAIN_PLAYER_END EQU 04CEEH
 447+ 4CEE              TESTEREND EQU 04CEEH
 448+ 4CEE
# file closed: ./symbol/AKG.sym
  86  4CEE
  87  4CEE              ORIG.HTIMI:
  88  4CEE 00 00 00 00  	DB 0, 0, 0, 0, 0
  88  4CF2 00
  89  4CF3               EXPORT ORIG.HTIMI
  90  4CF3
  91  4CF3              MUSIC_INIT_STATUS:
  92  4CF3 00            DB 0
  93  4CF4              SFX_INIT_STATUS:
  94  4CF4 00            DB 0
  95  4CF5              SOUND_ENABLED:
  96  4CF5 00            DB 0
  97  4CF6
  98  4CF6              SPRATR_INIT_STATUS:
  99  4CF6 00            DB 0
 100  4CF7              SPRATR_UPDATE_FLAG:
 101  4CF7 00 00         DW 0
 102  4CF9              SPRATR_DATA:
 103  4CF9 00 00         DW 0
 104  4CFB
 105  4CFB              ; to temporarily store stack pointer
 106  4CFB              TMPSP:
 107  4CFB 00 00         DW 0
 108  4CFD              ; to support sprite flicker
 109  4CFD              FLICKER:
 110  4CFD 00            DB 0
 111  4CFE
 112  4CFE              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 113  4CFE              ; per starting letter, if no commands with this letter, NULL value
 114  4CFE              CMDS:
 115  4CFE 00 00            DW 0 ; A
 116  4D00 00 00            DW 0 ; B
 117  4D02 00 00            DW 0 ; C
 118  4D04 00 00            DW 0 ; D
 119  4D06 00 00            DW 0 ; E
 120  4D08 59 4D            DW CMDS_F; F
 121  4D0A 6C 4D            DW CMDS_G; G
 122  4D0C 00 00            DW 0 ; H
 123  4D0E 00 00            DW 0 ; I
 124  4D10 00 00            DW 0 ; J
 125  4D12 00 00            DW 0 ; K
 126  4D14 3C 4D            DW CMDS_L ; L
 127  4D16 46 4D            DW CMDS_M ; M
 128  4D18 00 00            DW 0 ; N
 129  4D1A 00 00            DW 0 ; O
 130  4D1C 00 00            DW 0 ; P
 131  4D1E 00 00            DW 0 ; Q
 132  4D20 00 00            DW 0 ; R
 133  4D22 80 4D            DW CMDS_S ; S
 134  4D24 00 00            DW 0 ; T
 135  4D26 32 4D            DW CMDS_U ; U
 136  4D28 76 4D            DW CMDS_V ; V
 137  4D2A 00 00            DW 0 ; W
 138  4D2C 00 00            DW 0 ; X
 139  4D2E 00 00            DW 0 ; Y
 140  4D30 00 00            DW 0 ; Z
 141  4D32
 142  4D32              CMDS_U:
 143  4D32 55 50 52 49  	DEFB	"UPRINT",0      ; Print upper case string
 143  4D36 4E 54 00
 144  4D39 80 4F        	DEFW	UPRINT
 145  4D3B 00               DB 0
 146  4D3C              CMDS_L:
 147  4D3C 4C 50 52 49  	DEFB	"LPRINT",0      ; Print lower case string
 147  4D40 4E 54 00
 148  4D43 9D 4F        	DEFW	LPRINT
 149  4D45 00               DB 0
 150  4D46              CMDS_M:
 151  4D46 4D 45 4D 56      DB "MEMVRM", 0
 151  4D4A 52 4D 00
 152  4D4D 92 51            DW MEMVRM
 153  4D4F 4D 45 4D 43  	DB "MEMCPY", 0
 153  4D53 50 59 00
 154  4D56 04 50        	DW MEMCPY
 155  4D58 00               DB 0
 156  4D59              CMDS_F:
 157  4D59 46 49 4C 56      DB "FILVRM", 0
 157  4D5D 52 4D 00
 158  4D60 74 50            DW FILVRM
 159  4D62 46 49 4C 52      DB "FILRAM", 0
 159  4D66 41 4D 00
 160  4D69 BB 50            DW FILRAM
 161  4D6B 00               DB 0
 162  4D6C              CMDS_G:
 163  4D6C 47 45 4E 43      DB "GENCAL", 0
 163  4D70 41 4C 00
 164  4D73 39 51            DW GENCAL
 165  4D75 00           	DB	0
 166  4D76              CMDS_V:
 167  4D76 56 52 4D 4D  	DB "VRMMEM", 0
 167  4D7A 45 4D 00
 168  4D7D 14 52        	DW VRMMEM
 169  4D7F 00           	DB 0
 170  4D80              CMDS_S:
 171  4D80 53 50 52 53  	DB "SPRSET", 0
 171  4D84 45 54 00
 172  4D87 F2 53        	DW SPRSET
 173  4D89 53 50 52 47  	DB "SPRGRPMOV", 0
 173  4D8D 52 50 4D 4F
 173  4D91 56 00
 174  4D93 B0 54        	DW SPRGRPMOV
 175  4D95 53 4E 44 53  	DB "SNDSFX", 0
 175  4D99 46 58 00
 176  4D9C 53 53        	DW SNDSFX
 177  4D9E 53 4E 44 50  	DB "SNDPLYON", 0
 177  4DA2 4C 59 4F 4E
 177  4DA6 00
 178  4DA7 1D 53        	DW SNDPLYON
 179  4DA9 53 4E 44 50  	DB "SNDPLYOFF", 0
 179  4DAD 4C 59 4F 46
 179  4DB1 46 00
 180  4DB3 30 53        	DW SNDPLYOFF
 181  4DB5 53 4E 44 50  	DB "SNDPLYINI", 0
 181  4DB9 4C 59 49 4E
 181  4DBD 49 00
 182  4DBF CC 52        	DW SNDPLYINIT
 183  4DC1 53 50 52 41  	DB "SPRATRINI", 0
 183  4DC5 54 52 49 4E
 183  4DC9 49 00
 184  4DCB B4 53        	DW SPRATRINI
 185  4DCD 00           	DB 0
 186  4DCE
 187  4DCE              ; ****************************************************************************************************
 188  4DCE              ; function sets VRAM address
 189  4DCE              ; input HL=address
 190  4DCE              ; modifies AF
 191  4DCE              SETWRT_LOCAL:
 192  4DCE 7D           	LD	A, L
 193  4DCF D3 99        	OUT	(099H), A
 194  4DD1 7C           	LD	A, H
 195  4DD2 E6 3F        	AND	03FH
 196  4DD4 F6 40        	OR	040H
 197  4DD6 D3 99        	OUT	(099H), A
 198  4DD8 C9           	RET
 199  4DD9              ; ****************************************************************************************************
 200  4DD9
 201  4DD9              ; ****************************************************************************************************
 202  4DD9              ; function gets slot and subslot data for specific page
 203  4DD9              ; input A=page (0, 1 or 2)
 204  4DD9              ; output B = 0A8H register value
 205  4DD9              ; output D = 0 is no subslots, 1 if yes
 206  4DD9              ; output C = 0A8H value when page 3 slot equals to requested page slot
 207  4DD9              ; output E = subslot value if present
 208  4DD9              ; modifies AF, BC, DE, HL
 209  4DD9              GET_PAGE_INFO:
 210  4DD9 6F               LD L, A
 211  4DDA C6 C1            ADD A, low (EXPTBL)
 212  4DDC 32 E6 4D         LD (GET_PAGE_INFO_L1+1), A
 213  4DDF DB A8            IN A, (0A8H)
 214  4DE1 47               LD B, A
 215  4DE2 E6 3F            AND 03FH
 216  4DE4 4F               LD C, A
 217  4DE5              GET_PAGE_INFO_L1:
 218  4DE5 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 219  4DE8 E6 80            AND 080H
 220  4DEA 28 1B            JR Z, GET_PAGE_INFO_L2
 221  4DEC                  ; expanded
 222  4DEC 2D               DEC L
 223  4DED FA 0C 4E         JP M, GET_PAGE_INFO_L3
 224  4DF0 2D               DEC L
 225  4DF1 FA 0A 4E         JP M, GET_PAGE_INFO_L4
 226  4DF4                  ; page 2
 227  4DF4 07               RLCA
 228  4DF5 07               RLCA
 229  4DF6              GET_PAGE_INFO_L5:
 230  4DF6 E6 C0            AND 0C0H
 231  4DF8 B1               OR C
 232  4DF9 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 233  4DFB 4F               LD C, A
 234  4DFC 3A FF FF         LD A, (0FFFFH)
 235  4DFF 2F               CPL
 236  4E00 5F               LD E, A
 237  4E01 16 01            LD D, 1
 238  4E03 78               LD A, B ; return stack
 239  4E04 D3 A8            OUT (0A8H), A
 240  4E06 C9               RET
 241  4E07              GET_PAGE_INFO_L2:
 242  4E07                  ; not expanded
 243  4E07 16 00            LD D, 0
 244  4E09 C9               RET
 245  4E0A              GET_PAGE_INFO_L4:
 246  4E0A                  ; page 1
 247  4E0A 0F               RRCA
 248  4E0B 0F               RRCA
 249  4E0C              GET_PAGE_INFO_L3:
 250  4E0C                  ; page 0
 251  4E0C 0F               RRCA
 252  4E0D 0F               RRCA
 253  4E0E 18 E6            JR GET_PAGE_INFO_L5
 254  4E10              ; ****************************************************************************************************
 255  4E10
 256  4E10              ; ****************************************************************************************************
 257  4E10              ; function returns original slot and subslot info
 258  4E10              ; input B = 0A8H register value
 259  4E10              ; input D = 0 is no subslots, 1 if yes
 260  4E10              ; input C = 0A8H value when page 3 slot equals to requested page slot
 261  4E10              ; input E = subslot value if present
 262  4E10              ; modifies AF
 263  4E10              RESTORE_PAGE_INFO:
 264  4E10 7A               LD A, D
 265  4E11 B7               OR A
 266  4E12 28 07            JR Z, RESTORE_PAGE_INFO_L1
 267  4E14 79               LD A, C
 268  4E15 D3 A8            OUT (0A8H), A
 269  4E17 7B               LD A, E
 270  4E18 32 FF FF         LD (0FFFFH), A
 271  4E1B              RESTORE_PAGE_INFO_L1:
 272  4E1B 78               LD A, B
 273  4E1C D3 A8            OUT (0A8H), A
 274  4E1E C9               RET
 275  4E1F              ; ****************************************************************************************************
 276  4E1F
 277  4E1F              ; *******************************************************************************************************
 278  4E1F              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 279  4E1F              ; INPUT:  A = SLOT ID: EXXXSSPP
 280  4E1F              ; E = EXPANDED FLAG
 281  4E1F              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 282  4E1F              ; PP = PRIMARY SLOT NUMBER
 283  4E1F              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 284  4E1F              ; CHANGES: AF, BC, DE
 285  4E1F
 286  4E1F              LOCAL_ENASLT:
 287  4E1F CD 3F 4E         CALL L0353
 288  4E22 FA 2C 4E         JP M, L0340
 289  4E25 DB A8            IN A, (0A8H)
 290  4E27 A1               AND C
 291  4E28 B0               OR B
 292  4E29 D3 A8            OUT (0A8H), A
 293  4E2B C9               RET
 294  4E2C              L0340:
 295  4E2C E5               PUSH HL
 296  4E2D CD 64 4E         CALL L0378
 297  4E30 4F               LD C, A
 298  4E31 06 00            LD B, 0
 299  4E33 7D               LD A, L
 300  4E34 A4               AND H
 301  4E35 B2               OR D
 302  4E36 21 C5 FC         LD HL, 0FCC5H
 303  4E39 09               ADD HL, BC
 304  4E3A 77               LD (HL), A
 305  4E3B E1               POP HL
 306  4E3C 79               LD A, C
 307  4E3D 18 E0            JR LOCAL_ENASLT
 308  4E3F              L0353:
 309  4E3F F3               DI
 310  4E40 F5               PUSH AF
 311  4E41 7C               LD A, H
 312  4E42 07               RLCA
 313  4E43 07               RLCA
 314  4E44 E6 03            AND 3
 315  4E46 5F               LD E, A
 316  4E47 3E C0            LD A, 0C0H
 317  4E49              L035D:
 318  4E49 07               RLCA
 319  4E4A 07               RLCA
 320  4E4B 1D               DEC E
 321  4E4C F2 49 4E         JP P, L035D
 322  4E4F 5F               LD E, A
 323  4E50 2F               CPL
 324  4E51 4F               LD C, A
 325  4E52 F1               POP AF
 326  4E53 F5               PUSH AF
 327  4E54 E6 03            AND 3
 328  4E56 3C               INC A
 329  4E57 47               LD B, A
 330  4E58 3E AB            LD A, 0ABH
 331  4E5A              L036E:
 332  4E5A C6 55            ADD A, 055H
 333  4E5C 10 FC            DJNZ L036E
 334  4E5E 57               LD D, A
 335  4E5F A3               AND E
 336  4E60 47               LD B, A
 337  4E61 F1               POP AF
 338  4E62 A7               AND A
 339  4E63 C9               RET
 340  4E64              L0378:
 341  4E64 F5               PUSH AF
 342  4E65 7A               LD A, D
 343  4E66 E6 C0            AND 0C0H
 344  4E68 4F               LD C, A
 345  4E69 F1               POP AF
 346  4E6A F5               PUSH AF
 347  4E6B 57               LD D, A
 348  4E6C DB A8            IN A, (0A8H)
 349  4E6E 47               LD B, A
 350  4E6F E6 3F            AND 03FH
 351  4E71 B1               OR C
 352  4E72 D3 A8            OUT (0A8H), A
 353  4E74 7A               LD A, D
 354  4E75 0F               RRCA
 355  4E76 0F               RRCA
 356  4E77 E6 03            AND 3
 357  4E79 57               LD D, A
 358  4E7A 3E AB            LD A, 0ABH
 359  4E7C              L0390:
 360  4E7C C6 55            ADD A, 055H
 361  4E7E 15               DEC D
 362  4E7F F2 7C 4E         JP P, L0390
 363  4E82 A3               AND E
 364  4E83 57               LD D, A
 365  4E84 7B               LD A, E
 366  4E85 2F               CPL
 367  4E86 67               LD H, A
 368  4E87 3A FF FF         LD A, (0FFFFH)
 369  4E8A 2F               CPL
 370  4E8B 6F               LD L, A
 371  4E8C A4               AND H
 372  4E8D B2               OR D
 373  4E8E 32 FF FF         LD (0FFFFH), A
 374  4E91 78               LD A, B
 375  4E92 D3 A8            OUT (0A8H), A
 376  4E94 F1               POP AF
 377  4E95 E6 03            AND 3
 378  4E97 C9               RET
 379  4E98              ; *******************************************************************************************************
 380  4E98
 381  4E98              ; *******************************************************************************************************
 382  4E98              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
 383  4E98              ; struct {
 384  4E98              ; DW y
 385  4E98              ; DW x
 386  4E98              ; DW pattern (0-31)
 387  4E98              ; DW color
 388  4E98              ; } [32]
 389  4E98              ; will hide sprites whose location is outside of visible area
 390  4E98              ; works in screen 1 and 2
 391  4E98              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
 392  4E98              ; modifies AF, AF', BC, DE, HL
 393  4E98              SPRATR_UPDATE:
 394  4E98              	; check if initialized
 395  4E98 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
 396  4E9B B7           	OR A
 397  4E9C C8           	RET Z
 398  4E9D              	; check if update requested
 399  4E9D 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 400  4EA0 7E           	LD A, (HL)
 401  4EA1 B7           	OR A
 402  4EA2 C8           	RET Z
 403  4EA3              	; check screen mode
 404  4EA3 3A AF FC     	LD A, (SCRMOD)
 405  4EA6 3D           	DEC A
 406  4EA7 28 02        	JR Z, .L0 ; screen 1
 407  4EA9 3D           	DEC A
 408  4EAA C0           	RET NZ ; not screen 2
 409  4EAB              .L0:
 410  4EAB 06 20        	LD B, 32 ; sprite number
 411  4EAD 0E 98        	LD C, #98 ; register for vpd data output
 412  4EAF              	; set VDP address
 413  4EAF 2A 28 F9     	LD HL, (ATRBAS)
 414  4EB2 3A FD 4C     	LD A, (FLICKER)
 415  4EB5 5F           	LD E, A
 416  4EB6 08           	EX AF, AF'
 417  4EB7 7B           	LD A, E
 418  4EB8 87           	ADD A, A
 419  4EB9 87           	ADD A, A
 420  4EBA 16 00        	LD D, 0
 421  4EBC 5F           	LD E, A
 422  4EBD 19           	ADD HL, DE
 423  4EBE CD CE 4D     	CALL SETWRT_LOCAL
 424  4EC1 ED 73 FB 4C  	LD (TMPSP), SP
 425  4EC5 ED 7B F9 4C  	LD SP, (SPRATR_DATA)
 426  4EC9
 427  4EC9              .LOOP:
 428  4EC9 E1           	POP HL
 429  4ECA 24           	INC H
 430  4ECB 28 0D        	JR Z, .L1 ; negative number above -256
 431  4ECD 25           	DEC H
 432  4ECE 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
 433  4ED0 7D           	LD A, L
 434  4ED1 FE C0        	CP 192
 435  4ED3 30 10        	JR NC, .OUT3
 436  4ED5 3D           	DEC A ; due to VDP rule that top of screen is -1
 437  4ED6 57           	LD D, A
 438  4ED7 C3 F5 4E     	JP .X
 439  4EDA              .L1:
 440  4EDA 7D           	LD A, L
 441  4EDB C6 10        	ADD 16
 442  4EDD FA E5 4E     	JP M, .OUT3 ; below -16
 443  4EE0 2D           	DEC L ; due to VDP rule that top of screen is -1
 444  4EE1 55           	LD D, L
 445  4EE2 C3 F5 4E     	JP .X
 446  4EE5              .OUT3:
 447  4EE5 E1           	POP HL ; skip x value
 448  4EE6              .OUT2:
 449  4EE6 E1           	POP HL ; skip pattern
 450  4EE7 E1           	POP HL ; skip color
 451  4EE8 3E D1        	LD A, #D1
 452  4EEA D3 98        	OUT (#98), A ; sprite hidden
 453  4EEC D3 98        	OUT (#98), A ; value unimportant
 454  4EEE D3 98        	OUT (#98), A ; value unimportant
 455  4EF0 D3 98        	OUT (#98), A ; value unimportant
 456  4EF2 C3 19 4F     	JP .NEXT
 457  4EF5              .X:
 458  4EF5 E1           	POP HL
 459  4EF6 24           	INC H
 460  4EF7 28 08        	JR Z, .L2
 461  4EF9 25           	DEC H
 462  4EFA 20 EA        	JR NZ, .OUT2
 463  4EFC 1E 00        	LD E, 0 ; EC bit
 464  4EFE C3 0A 4F     	JP .XY
 465  4F01              .L2:
 466  4F01 7D           	LD A, L
 467  4F02 C6 20        	ADD 32
 468  4F04 FA E6 4E     	JP M, .OUT2
 469  4F07 6F           	LD L, A
 470  4F08 1E 80        	LD E, #80
 471  4F0A              .XY:
 472  4F0A ED 51        	OUT (C), D
 473  4F0C ED 69        	OUT (C), L
 474  4F0E E1           	POP HL ; pattern
 475  4F0F 7D           	LD A, L
 476  4F10 87           	ADD A, A
 477  4F11 87           	ADD A, A ; needs to go at 4x
 478  4F12 D3 98        	OUT (#98), A
 479  4F14 E1           	POP HL ; color
 480  4F15 7D           	LD A, L
 481  4F16 B3           	OR E
 482  4F17 D3 98        	OUT (#98), A
 483  4F19              .NEXT:
 484  4F19 08           	EX AF, AF'
 485  4F1A 3C           	INC A
 486  4F1B E6 1F        	AND 31
 487  4F1D C2 31 4F     	JP NZ, .NEXT2
 488  4F20 08           	EX AF, AF'
 489  4F21 2A 28 F9     	LD HL, (ATRBAS)
 490  4F24              	; CALL SETWRT_LOCAL not allowed as SP modified
 491  4F24 7D           	LD	A, L
 492  4F25 D3 99        	OUT	(099H), A
 493  4F27 7C           	LD	A, H
 494  4F28 E6 3F        	AND	03FH
 495  4F2A F6 40        	OR	040H
 496  4F2C D3 99        	OUT	(099H), A
 497  4F2E C3 32 4F     	JP .NEXT3
 498  4F31              .NEXT2:
 499  4F31 08           	EX AF, AF'
 500  4F32              .NEXT3:
 501  4F32 10 95        	DJNZ .LOOP
 502  4F34 08           	EX AF, AF'
 503  4F35 3C           	INC A
 504  4F36 32 FD 4C     	LD (FLICKER), A
 505  4F39
 506  4F39 ED 7B FB 4C  	LD SP, (TMPSP)
 507  4F3D 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 508  4F40 36 00        	LD (HL), 0 ; zero out update flag
 509  4F42 C9           	RET
 510  4F43              ; *******************************************************************************************************
 511  4F43
 512  4F43              ; General BASIC CALL-instruction handler
 513  4F43              CALLHAND:
 514  4F43 E5           	PUSH HL
 515  4F44 21 FE 4C     	LD	HL, CMDS ; pointer table based on starting letter
 516  4F47 3A 89 FD         LD A, (PROCNM)
 517  4F4A D6 41            SUB 'A'
 518  4F4C 87               ADD A, A
 519  4F4D 16 00            LD D, 0
 520  4F4F 5F               LD E, A
 521  4F50 19               ADD HL, DE
 522  4F51 5E               LD E, (HL)
 523  4F52 23               INC HL
 524  4F53 56               LD D, (HL)
 525  4F54 7A               LD A, D
 526  4F55 B3               OR E
 527  4F56 28 24            JR Z, .CMDNOTRECOGNIZED
 528  4F58 EB               EX DE, HL
 529  4F59              .CHKCMD:
 530  4F59 11 89 FD     	LD	DE, PROCNM
 531  4F5C 1A           .LOOP:	LD	A,(DE)
 532  4F5D BE           	CP	(HL)
 533  4F5E 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 534  4F60 13           	INC	DE
 535  4F61 23           	INC	HL
 536  4F62 A7           	AND	A
 537  4F63 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 538  4F65 5E           	LD	E,(HL)
 539  4F66 23           	INC	HL
 540  4F67 56           	LD	D,(HL)
 541  4F68 E1           	POP	HL		; routine address
 542  4F69 CD EF 4F     	CALL	GETPREVCHAR
 543  4F6C CD 7E 4F     	CALL	.CALLDE		; Call routine
 544  4F6F A7           	AND	A
 545  4F70 C9           	RET
 546  4F71
 547  4F71              .TONEXTCMD:
 548  4F71 0E FF        	LD	C,0FFH
 549  4F73 AF           	XOR	A
 550  4F74 ED B1        	CPIR			; Skip to end of instruction name
 551  4F76 23           	INC	HL
 552  4F77 23           	INC	HL		; Skip address
 553  4F78 BE           	CP	(HL)
 554  4F79 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 555  4F7B E1           	POP	HL
 556  4F7C              .CMDNOTRECOGNIZED:
 557  4F7C 37               SCF
 558  4F7D C9           	RET
 559  4F7E
 560  4F7E              .CALLDE:
 561  4F7E D5           	PUSH	DE
 562  4F7F C9           	RET
 563  4F80
 564  4F80              ;---------------------------
 565  4F80
 566  4F80              ;---------------------------
 567  4F80              UPRINT:
 568  4F80 CD C4 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 569  4F83 E5           	PUSH	HL
 570  4F84 CD BA 4F             CALL    GETSTRPNT
 571  4F87              .LOOP
 572  4F87 7E                   LD      A,(HL)
 573  4F88 CD 94 4F             CALL    .UCASE
 574  4F8B CD A2 00             CALL    CHPUT  ;Print
 575  4F8E 23                   INC     HL
 576  4F8F 10 F6                DJNZ    .LOOP
 577  4F91
 578  4F91 E1           	POP	HL
 579  4F92 B7           	OR      A
 580  4F93 C9           	RET
 581  4F94
 582  4F94              .UCASE:
 583  4F94 FE 61                CP      "a"
 584  4F96 D8                   RET     C
 585  4F97 FE 7B                CP      "z"+1
 586  4F99 D0                   RET     NC
 587  4F9A E6 DF                AND     %11011111
 588  4F9C C9                   RET
 589  4F9D              ;---------------------------
 590  4F9D              LPRINT:
 591  4F9D CD C4 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 592  4FA0 E5           	PUSH	HL
 593  4FA1 CD BA 4F             CALL    GETSTRPNT
 594  4FA4              .LOOP
 595  4FA4 7E                   LD      A,(HL)
 596  4FA5 CD B1 4F             CALL    .LCASE
 597  4FA8 CD A2 00             CALL    CHPUT  ;Print
 598  4FAB 23                   INC     HL
 599  4FAC 10 F6                DJNZ    .LOOP
 600  4FAE
 601  4FAE E1           	POP	HL
 602  4FAF B7           	OR      A
 603  4FB0 C9           	RET
 604  4FB1
 605  4FB1              .LCASE:
 606  4FB1 FE 41                CP      "A"
 607  4FB3 D8                   RET     C
 608  4FB4 FE 5B                CP      "Z"+1
 609  4FB6 D0                   RET     NC
 610  4FB7 F6 20                OR      %00100000
 611  4FB9 C9                   RET
 612  4FBA              ;---------------------------
 613  4FBA
 614  4FBA              GETSTRPNT:
 615  4FBA              ; OUT:
 616  4FBA              ; HL = String Address
 617  4FBA              ; B  = Lenght
 618  4FBA
 619  4FBA 2A F8 F7             LD      HL,(USR)
 620  4FBD 46                   LD      B,(HL)
 621  4FBE 23                   INC     HL
 622  4FBF 5E                   LD      E,(HL)
 623  4FC0 23                   INC     HL
 624  4FC1 56                   LD      D,(HL)
 625  4FC2 EB                   EX      DE,HL
 626  4FC3 C9                   RET
 627  4FC4
 628  4FC4              EVALTXTPARAM:
 629  4FC4 CD E5 4F     	CALL	CHKCHAR
 630  4FC7 28           	DEFB	"("             ; Check for (
 631  4FC8 DD 21 64 4C  	LD	IX,FRMEVL
 632  4FCC CD 59 01     	CALL	CALBAS		; Evaluate expression
 633  4FCF 3A 63 F6             LD      A,(VALTYP)
 634  4FD2 FE 03                CP      3               ; Text type?
 635  4FD4 C2 F7 4F             JP      NZ,TYPE_MISMATCH
 636  4FD7 E5                   PUSH	HL
 637  4FD8 DD 21 D0 67          LD	IX,FRESTR         ; Free the temporary string
 638  4FDC CD 59 01             CALL	CALBAS
 639  4FDF E1                   POP	HL
 640  4FE0 CD E5 4F     	CALL	CHKCHAR
 641  4FE3 29           	DEFB	")"             ; Check for )
 642  4FE4 C9                   RET
 643  4FE5
 644  4FE5
 645  4FE5              CHKCHAR:
 646  4FE5 CD EF 4F     	CALL	GETPREVCHAR	; Get previous basic char
 647  4FE8 E3           	EX	(SP),HL
 648  4FE9 BE           	CP	(HL) 	        ; Check if good char
 649  4FEA 20 0F        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 650  4FEC 23           	INC	HL
 651  4FED E3           	EX	(SP),HL
 652  4FEE 23           	INC	HL		; Get next basic char
 653  4FEF
 654  4FEF              GETPREVCHAR:
 655  4FEF 2B           	DEC	HL
 656  4FF0 DD 21 66 46  	LD	IX,CHRGTR
 657  4FF4 C3 59 01     	JP      CALBAS
 658  4FF7
 659  4FF7
 660  4FF7              TYPE_MISMATCH:
 661  4FF7 1E 0D            LD E, 13 ; Type mismatch
 662  4FF9 18 02            JR THROW_ERROR
 663  4FFB
 664  4FFB              SYNTAX_ERROR:
 665  4FFB 1E 02            LD E, 2 ; Syntax error
 666  4FFD              THROW_ERROR:
 667  4FFD DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 668  5001 C3 59 01     	JP	CALBAS
 669  5004
 670  5004              ;---------------------------
 671  5004
 672  5004              ; *******************************************************************************************************
 673  5004              ; function to handle CALL MEMCPY basic extension
 674  5004              ; _MEMCPY ( INT source,
 675  5004              ;			INT destination,
 676  5004              ;			INT count,
 677  5004              ;			BYTE enable_ram, >0 = true
 678  5004              ;			BYTE wait_vsync) >0 = treu
 679  5004              ; enable_ram will put ram in page 0 also, page 1 is already there
 680  5004              ; wait_vsync will issue HALT before copying
 681  5004              MEMCPY:
 682  5004              	; opening (
 683  5004 CD E5 4F     	CALL CHKCHAR
 684  5007 28           	DB '('
 685  5008              	; get source address
 686  5008 DD 21 2F 54  	LD IX, FRMQNT
 687  500C CD 59 01     	CALL CALBAS
 688  500F D5           	PUSH DE
 689  5010              	; comma
 690  5010 CD E5 4F     	CALL CHKCHAR
 691  5013 2C           	DB ','
 692  5014              	; get destination address
 693  5014 DD 21 2F 54  	LD IX, FRMQNT
 694  5018 CD 59 01     	CALL CALBAS
 695  501B D5           	PUSH DE
 696  501C              	; comma
 697  501C CD E5 4F     	CALL CHKCHAR
 698  501F 2C           	DB ','
 699  5020              	; get length
 700  5020 DD 21 2F 54  	LD IX, FRMQNT
 701  5024 CD 59 01     	CALL CALBAS
 702  5027 D5           	PUSH DE
 703  5028              	; comma
 704  5028 CD E5 4F     	CALL CHKCHAR
 705  502B 2C           	DB ','
 706  502C              	; get ROM/RAM
 707  502C DD 21 1C 52  	LD IX, GETBYT
 708  5030 CD 59 01     	CALL CALBAS
 709  5033 F5           	PUSH AF
 710  5034              	; comma
 711  5034 CD E5 4F     	CALL CHKCHAR
 712  5037 2C           	DB ','
 713  5038              	; get vsync wait
 714  5038 DD 21 1C 52  	LD IX, GETBYT
 715  503C CD 59 01     	CALL CALBAS
 716  503F F5           	PUSH AF
 717  5040              	; ending )
 718  5040 CD E5 4F     	CALL CHKCHAR
 719  5043 29           	DB ')'
 720  5044
 721  5044 FB               EI
 722  5045              	; save position
 723  5045 E5           	PUSH HL
 724  5046 DD E1        	POP IX
 725  5048
 726  5048              	; syntax ok
 727  5048              	; wait for vsync if needed
 728  5048 F1           	POP AF
 729  5049 B7           	OR A
 730  504A 28 01        	JR Z, .L1
 731  504C 76           	HALT
 732  504D
 733  504D              .L1:
 734  504D              	; enable RAM in page 0 if needed
 735  504D F1           	POP AF
 736  504E B7           	OR A
 737  504F              	; pop LDIR parameters and store away for later
 738  504F C1           	POP BC
 739  5050 D1           	POP DE
 740  5051 E1           	POP HL
 741  5052 28 1A        	JR Z, .L2
 742  5054 D9           	EXX
 743  5055 AF               XOR A
 744  5056 CD D9 4D         CALL GET_PAGE_INFO
 745  5059 C5               PUSH BC
 746  505A D5               PUSH DE
 747  505B 3A 41 F3         LD A, (RAMAD0)
 748  505E 26 00            LD H, 0
 749  5060 F3           	DI
 750  5061 CD 1F 4E         CALL LOCAL_ENASLT
 751  5064 D9           	EXX
 752  5065 ED B0        	LDIR
 753  5067 D1               POP DE
 754  5068 C1               POP BC
 755  5069 CD 10 4E         CALL RESTORE_PAGE_INFO
 756  506C 18 02        	JR .L3
 757  506E
 758  506E              .L2:
 759  506E ED B0        	LDIR
 760  5070
 761  5070              .L3:
 762  5070 DD E5        	PUSH IX
 763  5072 E1           	POP HL
 764  5073 C9           	RET
 765  5074              ; *******************************************************************************************************
 766  5074
 767  5074              ; *******************************************************************************************************
 768  5074              ; function to handle CALL FILVRM basic extension
 769  5074              ; FILVRM ( INT offset,
 770  5074              ;		   INT count,
 771  5074              ;		   BYTE value,
 772  5074              ;		   BYTE wait_vsync) >0 = true
 773  5074              ; wait_vsync will issue HALT before copying
 774  5074              FILVRM:
 775  5074              	; opening (
 776  5074 CD E5 4F     	CALL CHKCHAR
 777  5077 28           	DB '('
 778  5078              	; get offset address
 779  5078 DD 21 2F 54  	LD IX, FRMQNT
 780  507C CD 59 01     	CALL CALBAS
 781  507F D5           	PUSH DE
 782  5080              	; comma
 783  5080 CD E5 4F     	CALL CHKCHAR
 784  5083 2C           	DB ','
 785  5084              	; get count
 786  5084 DD 21 2F 54  	LD IX, FRMQNT
 787  5088 CD 59 01     	CALL CALBAS
 788  508B D5           	PUSH DE
 789  508C              	; comma
 790  508C CD E5 4F     	CALL CHKCHAR
 791  508F 2C           	DB ','
 792  5090              	; get value
 793  5090 DD 21 1C 52  	LD IX, GETBYT
 794  5094 CD 59 01     	CALL CALBAS
 795  5097 F5           	PUSH AF
 796  5098              	; comma
 797  5098 CD E5 4F     	CALL CHKCHAR
 798  509B 2C           	DB ','
 799  509C              	; get vsync wait
 800  509C DD 21 1C 52  	LD IX, GETBYT
 801  50A0 CD 59 01     	CALL CALBAS
 802  50A3 F5           	PUSH AF
 803  50A4              	; ending )
 804  50A4 CD E5 4F     	CALL CHKCHAR
 805  50A7 29           	DB ')'
 806  50A8
 807  50A8 FB               EI
 808  50A9              	; save position
 809  50A9 E5           	PUSH HL
 810  50AA DD E1        	POP IX
 811  50AC
 812  50AC              	; syntax ok
 813  50AC              	; wait for vsync if needed
 814  50AC F1           	POP AF
 815  50AD B7           	OR A
 816  50AE 28 01        	JR Z, .L1
 817  50B0 76           	HALT
 818  50B1
 819  50B1              .L1:
 820  50B1 F1               POP AF ; value
 821  50B2 C1               POP BC ; count
 822  50B3 E1               POP HL ; offset
 823  50B4 CD 56 00         CALL BIOS_FILVRM
 824  50B7
 825  50B7              .L3:
 826  50B7 DD E5        	PUSH IX
 827  50B9 E1           	POP HL
 828  50BA C9           	RET
 829  50BB              ; *******************************************************************************************************
 830  50BB
 831  50BB              ; *******************************************************************************************************
 832  50BB              ; function to handle CALL FILRAM basic extension
 833  50BB              ; FILRAM ( INT start address,
 834  50BB              ;		   INT count,
 835  50BB              ;		   BYTE value,
 836  50BB              ;	   	   BYTE enable_ram, >0 = true
 837  50BB              ;		   BYTE wait_vsync) >0 = true
 838  50BB              ; enable_ram will put ram in page 0 also, page 1 is already there
 839  50BB              ; wait_vsync will issue HALT before copying
 840  50BB              FILRAM:
 841  50BB              	; opening (
 842  50BB CD E5 4F     	CALL CHKCHAR
 843  50BE 28           	DB '('
 844  50BF              	; get start address
 845  50BF DD 21 2F 54  	LD IX, FRMQNT
 846  50C3 CD 59 01     	CALL CALBAS
 847  50C6 D5           	PUSH DE
 848  50C7              	; comma
 849  50C7 CD E5 4F     	CALL CHKCHAR
 850  50CA 2C           	DB ','
 851  50CB              	; get count
 852  50CB DD 21 2F 54  	LD IX, FRMQNT
 853  50CF CD 59 01     	CALL CALBAS
 854  50D2 D5           	PUSH DE
 855  50D3              	; comma
 856  50D3 CD E5 4F     	CALL CHKCHAR
 857  50D6 2C           	DB ','
 858  50D7              	; get value
 859  50D7 DD 21 1C 52  	LD IX, GETBYT
 860  50DB CD 59 01     	CALL CALBAS
 861  50DE F5           	PUSH AF
 862  50DF              	; comma
 863  50DF CD E5 4F     	CALL CHKCHAR
 864  50E2 2C           	DB ','
 865  50E3              	; get ROM/RAM
 866  50E3 DD 21 1C 52  	LD IX, GETBYT
 867  50E7 CD 59 01     	CALL CALBAS
 868  50EA F5           	PUSH AF
 869  50EB              	; comma
 870  50EB CD E5 4F     	CALL CHKCHAR
 871  50EE 2C           	DB ','
 872  50EF              	; get vsync wait
 873  50EF DD 21 1C 52  	LD IX, GETBYT
 874  50F3 CD 59 01     	CALL CALBAS
 875  50F6 F5           	PUSH AF
 876  50F7              	; ending )
 877  50F7 CD E5 4F     	CALL CHKCHAR
 878  50FA 29           	DB ')'
 879  50FB
 880  50FB FB               EI
 881  50FC              	; save position
 882  50FC E5           	PUSH HL
 883  50FD DD E1        	POP IX
 884  50FF
 885  50FF              	; syntax ok
 886  50FF              	; wait for vsync if needed
 887  50FF F1           	POP AF
 888  5100 B7           	OR A
 889  5101 28 01        	JR Z, .L1
 890  5103 76           	HALT
 891  5104
 892  5104              .L1:
 893  5104              	; enable RAM in page 0 if needed
 894  5104 F1           	POP AF
 895  5105 B7           	OR A
 896  5106              	; pop LDIR parameters and store away for later
 897  5106 D1           	POP DE ; actually AF
 898  5107 C1           	POP BC ; count
 899  5108 E1           	POP HL ; start address
 900  5109 28 1B        	JR Z, .L2
 901  510B D9           	EXX
 902  510C AF               XOR A
 903  510D CD D9 4D         CALL GET_PAGE_INFO
 904  5110 C5               PUSH BC
 905  5111 D5               PUSH DE
 906  5112 3A 41 F3         LD A, (RAMAD0)
 907  5115 26 00            LD H, 0
 908  5117 F3           	DI
 909  5118 CD 1F 4E         CALL LOCAL_ENASLT
 910  511B D9           	EXX
 911  511C CD 2D 51     	CALL .FILLVALUE
 912  511F D1               POP DE
 913  5120 C1               POP BC
 914  5121 CD 10 4E         CALL RESTORE_PAGE_INFO
 915  5124 18 03        	JR .L3
 916  5126
 917  5126              .L2:
 918  5126 CD 2D 51     	CALL .FILLVALUE
 919  5129
 920  5129              .L3:
 921  5129 DD E5        	PUSH IX
 922  512B E1           	POP HL
 923  512C C9           	RET
 924  512D
 925  512D              .FILLVALUE:
 926  512D 72               LD (HL), D
 927  512E 54               LD D, H
 928  512F 5D               LD E, L
 929  5130 13               INC DE
 930  5131 0B               DEC BC
 931  5132 ED B0            LDIR
 932  5134 C9               RET
 933  5135              ; *******************************************************************************************************
 934  5135
 935  5135              ; *******************************************************************************************************
 936  5135              ; function to handle CALL GENCAL basic extension
 937  5135              ; GENCAL ( INT fn_addr, = address of the function to call
 938  5135              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 939  5135              ; output values of reristers will also be stored at reg_list_ptr
 940  5135              GENCAL_VAR_SP:
 941  5135 00 00            DW 0
 942  5137              GENCAL_VAR_SP2:
 943  5137 00 00            DW 0
 944  5139              GENCAL:
 945  5139              	; opening (
 946  5139 CD E5 4F     	CALL CHKCHAR
 947  513C 28           	DB '('
 948  513D              	; get function address
 949  513D DD 21 2F 54  	LD IX, FRMQNT
 950  5141 CD 59 01     	CALL CALBAS
 951  5144 D5           	PUSH DE
 952  5145              	; comma
 953  5145 CD E5 4F     	CALL CHKCHAR
 954  5148 2C           	DB ','
 955  5149              	; get pointer to register list
 956  5149 DD 21 2F 54  	LD IX, FRMQNT
 957  514D CD 59 01     	CALL CALBAS
 958  5150 D5           	PUSH DE
 959  5151              	; ending )
 960  5151 CD E5 4F     	CALL CHKCHAR
 961  5154 29           	DB ')'
 962  5155
 963  5155              	; save BASIC token position
 964  5155 E5           	PUSH HL
 965  5156 D9               EXX
 966  5157 E1           	POP HL ; HL'=next basic token
 967  5158 D9               EXX
 968  5159
 969  5159 E1               POP HL ; get pointer to register values
 970  515A ED 73 35 51      LD (GENCAL_VAR_SP), SP
 971  515E F3               DI
 972  515F F9               LD SP, HL
 973  5160 F1               POP AF
 974  5161 C1               POP BC
 975  5162 D1               POP DE
 976  5163 E1               POP HL
 977  5164 DD E1            POP IX
 978  5166 FD E1            POP IY
 979  5168 D9               EXX
 980  5169 ED 73 37 51      LD (GENCAL_VAR_SP2), SP
 981  516D ED 7B 35 51      LD SP, (GENCAL_VAR_SP)
 982  5171 FB               EI
 983  5172 D1               POP DE ; get function to call
 984  5173 E5               PUSH HL
 985  5174 CD 8F 51         CALL .EXXDECALL
 986  5177 F3               DI
 987  5178 ED 73 35 51      LD (GENCAL_VAR_SP), SP
 988  517C ED 7B 37 51      LD SP, (GENCAL_VAR_SP2)
 989  5180 FD E5            PUSH IY
 990  5182 DD E5            PUSH IX
 991  5184 E5               PUSH HL
 992  5185 D5               PUSH DE
 993  5186 C5               PUSH BC
 994  5187 F5               PUSH AF
 995  5188 ED 7B 35 51      LD SP, (GENCAL_VAR_SP)
 996  518C FB               EI
 997  518D E1               POP HL
 998  518E C9           	RET
 999  518F
1000  518F              .EXXDECALL:
1001  518F D5               PUSH DE
1002  5190 D9               EXX
1003  5191 C9               RET
1004  5192              ; *******************************************************************************************************
1005  5192
1006  5192              ; *******************************************************************************************************
1007  5192              ; function to handle CALL MEMVRM basic extension
1008  5192              ; copies from RAM to VRAM
1009  5192              ; _MEMVRM ( INT source,
1010  5192              ;			INT destination,
1011  5192              ;			INT count,
1012  5192              ;			BYTE enable_ram, >0 = true
1013  5192              ;			BYTE wait_vsync) >0 = treu
1014  5192              ; enable_ram will put ram in page 0 also, page 1 is already there
1015  5192              ; wait_vsync will issue HALT before copying
1016  5192              MEMVRM:
1017  5192              	; opening (
1018  5192 CD E5 4F     	CALL CHKCHAR
1019  5195 28           	DB '('
1020  5196              	; get source address
1021  5196 DD 21 2F 54  	LD IX, FRMQNT
1022  519A CD 59 01     	CALL CALBAS
1023  519D D5           	PUSH DE
1024  519E              	; comma
1025  519E CD E5 4F     	CALL CHKCHAR
1026  51A1 2C           	DB ','
1027  51A2              	; get destination address
1028  51A2 DD 21 2F 54  	LD IX, FRMQNT
1029  51A6 CD 59 01     	CALL CALBAS
1030  51A9 D5           	PUSH DE
1031  51AA              	; comma
1032  51AA CD E5 4F     	CALL CHKCHAR
1033  51AD 2C           	DB ','
1034  51AE              	; get length
1035  51AE DD 21 2F 54  	LD IX, FRMQNT
1036  51B2 CD 59 01     	CALL CALBAS
1037  51B5 D5           	PUSH DE
1038  51B6              	; comma
1039  51B6 CD E5 4F     	CALL CHKCHAR
1040  51B9 2C           	DB ','
1041  51BA              	; get ROM/RAM
1042  51BA DD 21 1C 52  	LD IX, GETBYT
1043  51BE CD 59 01     	CALL CALBAS
1044  51C1 F5           	PUSH AF
1045  51C2              	; comma
1046  51C2 CD E5 4F     	CALL CHKCHAR
1047  51C5 2C           	DB ','
1048  51C6              	; get vsync wait
1049  51C6 DD 21 1C 52  	LD IX, GETBYT
1050  51CA CD 59 01     	CALL CALBAS
1051  51CD F5           	PUSH AF
1052  51CE              	; ending )
1053  51CE CD E5 4F     	CALL CHKCHAR
1054  51D1 29           	DB ')'
1055  51D2
1056  51D2                  ; save position in BASIC text
1057  51D2 E5           	PUSH HL
1058  51D3 DD E1        	POP IX
1059  51D5
1060  51D5              	; syntax ok
1061  51D5              	; wait for vsync if needed
1062  51D5 F1           	POP AF
1063  51D6 B7           	OR A
1064  51D7 28 03        	JR Z, .L1
1065  51D9 FB               EI
1066  51DA 76           	HALT
1067  51DB F3               DI ; since interrupt can modify vram address
1068  51DC
1069  51DC              .L1:
1070  51DC              	; enable RAM in page 0 if needed
1071  51DC F1           	POP AF
1072  51DD B7           	OR A
1073  51DE              	; pop LDIR parameters and store away for later
1074  51DE C1           	POP BC
1075  51DF D1           	POP DE
1076  51E0 E1           	POP HL
1077  51E1 28 1A        	JR Z, .L2
1078  51E3 D9           	EXX
1079  51E4 AF               XOR A
1080  51E5 CD D9 4D         CALL GET_PAGE_INFO
1081  51E8 C5               PUSH BC
1082  51E9 D5               PUSH DE
1083  51EA 3A 41 F3         LD A, (RAMAD0)
1084  51ED 26 00            LD H, 0
1085  51EF CD 1F 4E         CALL LOCAL_ENASLT
1086  51F2 D9           	EXX
1087  51F3 CD 04 52     	CALL .LDIRVM
1088  51F6 D1               POP DE
1089  51F7 C1               POP BC
1090  51F8 CD 10 4E         CALL RESTORE_PAGE_INFO
1091  51FB 18 03        	JR .L3
1092  51FD
1093  51FD              .L2:
1094  51FD CD 04 52     	CALL .LDIRVM
1095  5200
1096  5200              .L3:
1097  5200 DD E5        	PUSH IX
1098  5202 E1           	POP HL
1099  5203 C9           	RET
1100  5204
1101  5204              .LDIRVM:
1102  5204 EB           	EX DE, HL
1103  5205 CD CE 4D     	CALL SETWRT_LOCAL
1104  5208 EB           	EX DE, HL
1105  5209
1106  5209              .L4:
1107  5209 7E               LD A, (HL)
1108  520A D3 98            OUT (#98), A
1109  520C 23               INC HL
1110  520D 0B               DEC BC
1111  520E 79               LD A, C
1112  520F B0               OR B
1113  5210 C2 09 52         JP NZ, .L4
1114  5213 C9               RET
1115  5214              ; *******************************************************************************************************
1116  5214
1117  5214              ; *******************************************************************************************************
1118  5214              ; function to handle CALL VRMMEM basic extension
1119  5214              ; copies from RAM to VRAM
1120  5214              ; _VRMMEM ( INT source,
1121  5214              ;			INT destination,
1122  5214              ;			INT count,
1123  5214              ;			BYTE enable_ram, >0 = true
1124  5214              ;			BYTE wait_vsync) >0 = true
1125  5214              ; enable_ram will put ram in page 0 also, page 1 is already there
1126  5214              ; wait_vsync will issue HALT before copying
1127  5214              VRMMEM:
1128  5214              	; opening (
1129  5214 CD E5 4F     	CALL CHKCHAR
1130  5217 28           	DB '('
1131  5218              	; get source address
1132  5218 DD 21 2F 54  	LD IX, FRMQNT
1133  521C CD 59 01     	CALL CALBAS
1134  521F D5           	PUSH DE
1135  5220              	; comma
1136  5220 CD E5 4F     	CALL CHKCHAR
1137  5223 2C           	DB ','
1138  5224              	; get destination address
1139  5224 DD 21 2F 54  	LD IX, FRMQNT
1140  5228 CD 59 01     	CALL CALBAS
1141  522B D5           	PUSH DE
1142  522C              	; comma
1143  522C CD E5 4F     	CALL CHKCHAR
1144  522F 2C           	DB ','
1145  5230              	; get length
1146  5230 DD 21 2F 54  	LD IX, FRMQNT
1147  5234 CD 59 01     	CALL CALBAS
1148  5237 D5           	PUSH DE
1149  5238              	; comma
1150  5238 CD E5 4F     	CALL CHKCHAR
1151  523B 2C           	DB ','
1152  523C              	; get ROM/RAM
1153  523C DD 21 1C 52  	LD IX, GETBYT
1154  5240 CD 59 01     	CALL CALBAS
1155  5243 F5           	PUSH AF
1156  5244              	; comma
1157  5244 CD E5 4F     	CALL CHKCHAR
1158  5247 2C           	DB ','
1159  5248              	; get vsync wait
1160  5248 DD 21 1C 52  	LD IX, GETBYT
1161  524C CD 59 01     	CALL CALBAS
1162  524F F5           	PUSH AF
1163  5250              	; ending )
1164  5250 CD E5 4F     	CALL CHKCHAR
1165  5253 29           	DB ')'
1166  5254
1167  5254                  ; save position in BASIC text
1168  5254 E5           	PUSH HL
1169  5255 DD E1        	POP IX
1170  5257
1171  5257              	; syntax ok
1172  5257              	; wait for vsync if needed
1173  5257 F1           	POP AF
1174  5258 B7           	OR A
1175  5259 28 03        	JR Z, .L1
1176  525B FB               EI
1177  525C 76           	HALT
1178  525D F3               DI ; since interrupt can modify vram address
1179  525E
1180  525E              .L1:
1181  525E              	; enable RAM in page 0 if needed
1182  525E F1           	POP AF
1183  525F B7           	OR A
1184  5260              	; pop LDIR parameters and store away for later
1185  5260 C1           	POP BC
1186  5261 D1           	POP DE
1187  5262 E1           	POP HL
1188  5263 28 1A        	JR Z, .L2
1189  5265 D9           	EXX
1190  5266 AF               XOR A
1191  5267 CD D9 4D         CALL GET_PAGE_INFO
1192  526A C5               PUSH BC
1193  526B D5               PUSH DE
1194  526C 3A 41 F3         LD A, (RAMAD0)
1195  526F 26 00            LD H, 0
1196  5271 CD 1F 4E         CALL LOCAL_ENASLT
1197  5274 D9           	EXX
1198  5275 CD 86 52     	CALL .LDIRMV
1199  5278 D1               POP DE
1200  5279 C1               POP BC
1201  527A CD 10 4E         CALL RESTORE_PAGE_INFO
1202  527D 18 03        	JR .L3
1203  527F
1204  527F              .L2:
1205  527F CD 86 52     	CALL .LDIRMV
1206  5282
1207  5282              .L3:
1208  5282 DD E5        	PUSH IX
1209  5284 E1           	POP HL
1210  5285 C9           	RET
1211  5286
1212  5286              .LDIRMV:
1213  5286 CD CE 4D     	CALL SETWRT_LOCAL
1214  5289              .L4:
1215  5289 DB 98            IN A, (#98)
1216  528B 12           	LD (DE), A
1217  528C 13               INC DE
1218  528D 0B               DEC BC
1219  528E 79               LD A, C
1220  528F B0               OR B
1221  5290 C2 89 52         JP NZ, .L4
1222  5293 C9               RET
1223  5294              ; *******************************************************************************************************
1224  5294
1225  5294              ; *******************************************************************************************************
1226  5294              ; H.TIMI function
1227  5294              MBGE_HTIMI:
1228  5294               EXPORT MBGE_HTIMI
1229  5294 F5           	PUSH AF
1230  5295
1231  5295 CD 98 4E     	CALL SPRATR_UPDATE
1232  5298
1233  5298 3A F5 4C     	LD A, (SOUND_ENABLED)
1234  529B B7           	OR A
1235  529C 28 2A        	JR Z, .EXIT
1236  529E
1237  529E              	; enable page 2
1238  529E 3E 02            LD A, 2
1239  52A0 CD D9 4D         CALL GET_PAGE_INFO
1240  52A3 C5               PUSH BC
1241  52A4 D5               PUSH DE
1242  52A5 3A 43 F3         LD A, (RAMAD2)
1243  52A8 26 80            LD H, 080H
1244  52AA CD 1F 4E         CALL LOCAL_ENASLT
1245  52AD              	; enable page 0
1246  52AD AF               XOR A
1247  52AE CD D9 4D         CALL GET_PAGE_INFO
1248  52B1 C5               PUSH BC
1249  52B2 D5               PUSH DE
1250  52B3 3A 41 F3         LD A, (RAMAD0)
1251  52B6 26 00            LD H, 0
1252  52B8 CD 1F 4E         CALL LOCAL_ENASLT
1253  52BB
1254  52BB CD 31 42     	CALL PLY_AKG_PLAY
1255  52BE
1256  52BE              	; restore page 0
1257  52BE D1               POP DE
1258  52BF C1               POP BC
1259  52C0 CD 10 4E         CALL RESTORE_PAGE_INFO
1260  52C3              	; restore page 2
1261  52C3 D1               POP DE
1262  52C4 C1               POP BC
1263  52C5 CD 10 4E         CALL RESTORE_PAGE_INFO
1264  52C8
1265  52C8              .EXIT:
1266  52C8 F1           	POP AF
1267  52C9 C3 EE 4C     	JP ORIG.HTIMI
1268  52CC              ; *******************************************************************************************************
1269  52CC
1270  52CC              ; *******************************************************************************************************
1271  52CC              ; function to handle CALL SNDPLYINIT basic extension
1272  52CC              ; initializes sound player
1273  52CC              ; _SNDPLYINIT ( INT music_offset,
1274  52CC              ;				INT sfx_offset, can be -1 if no SFX
1275  52CC              ; will put ram in page 0 also, page 1 is already there
1276  52CC              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1277  52CC              SNDPLYINIT:
1278  52CC              	; opening (
1279  52CC CD E5 4F     	CALL CHKCHAR
1280  52CF 28           	DB '('
1281  52D0              	; get music address
1282  52D0 DD 21 2F 54  	LD IX, FRMQNT
1283  52D4 CD 59 01     	CALL CALBAS
1284  52D7 D5           	PUSH DE
1285  52D8              	; comma
1286  52D8 CD E5 4F     	CALL CHKCHAR
1287  52DB 2C           	DB ','
1288  52DC              	; get sfx address
1289  52DC DD 21 2F 54  	LD IX, FRMQNT
1290  52E0 CD 59 01     	CALL CALBAS
1291  52E3 D5           	PUSH DE
1292  52E4              	; ending )
1293  52E4 CD E5 4F     	CALL CHKCHAR
1294  52E7 29           	DB ')'
1295  52E8
1296  52E8                  ; save position in BASIC text
1297  52E8 44           	LD B, H
1298  52E9 4D           	LD C, L
1299  52EA
1300  52EA              	; pop LDIR parameters and store away for later
1301  52EA D1           	POP DE ; sfx address
1302  52EB E1           	POP HL ; music address
1303  52EC C5           	PUSH BC ; basic text location
1304  52ED D9           	EXX
1305  52EE AF               XOR A
1306  52EF CD D9 4D         CALL GET_PAGE_INFO
1307  52F2 C5               PUSH BC
1308  52F3 D5               PUSH DE
1309  52F4 3A 41 F3         LD A, (RAMAD0)
1310  52F7 26 00            LD H, 0
1311  52F9 CD 1F 4E         CALL LOCAL_ENASLT
1312  52FC D9           	EXX
1313  52FD
1314  52FD D5           	PUSH DE
1315  52FE AF           	XOR A
1316  52FF              	; HL = music location
1317  52FF CD 60 41     	CALL PLY_AKG_INIT
1318  5302 3E 01        	LD A, 1
1319  5304 32 F3 4C     	LD (MUSIC_INIT_STATUS), A
1320  5307
1321  5307 E1           	POP HL
1322  5308 23           	INC HL
1323  5309 7D           	LD A, L
1324  530A B4           	OR H
1325  530B 28 09        	JR Z,.L1
1326  530D 2B           	DEC HL
1327  530E CD 1B 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1328  5311 3E 01        	LD A, 1
1329  5313 32 F4 4C     	LD (SFX_INIT_STATUS), A
1330  5316              .L1:
1331  5316 D1               POP DE
1332  5317 C1               POP BC
1333  5318 CD 10 4E         CALL RESTORE_PAGE_INFO
1334  531B
1335  531B E1           	POP HL
1336  531C C9           	RET
1337  531D              ; *******************************************************************************************************
1338  531D
1339  531D              ; *******************************************************************************************************
1340  531D              ; function to handle CALL SNDPLYON basic extension
1341  531D              ; enables sound player
1342  531D              ; _SNDPLYON
1343  531D              ; sets SOUND_ENABLED variable to 1 if init call was done
1344  531D              ; if not throws out of data error
1345  531D              SNDPLYON:
1346  531D 3A F3 4C     	LD A, (MUSIC_INIT_STATUS)
1347  5320 B7           	OR A
1348  5321 20 05        	JR NZ, .L1
1349  5323              	; player not initialized, throw error
1350  5323 1E 04        	LD E, 04 ; Out of DATA
1351  5325 C3 FD 4F     	JP THROW_ERROR
1352  5328              .L1:
1353  5328 32 F5 4C     	LD (SOUND_ENABLED), A
1354  532B              	; disable key click
1355  532B AF           	XOR A
1356  532C 32 DB F3     	LD (CLIKSW), A
1357  532F C9           	RET
1358  5330              ; *******************************************************************************************************
1359  5330
1360  5330              ; *******************************************************************************************************
1361  5330              ; function to handle CALL SNDPLYOFF basic extension
1362  5330              ; disables sound player
1363  5330              ; _SNDPLYOFF
1364  5330              ; sets SOUND_ENABLED variable to 0
1365  5330              ; calls AKG to stop music and SFX on all channels if initialized
1366  5330              SNDPLYOFF:
1367  5330 3A F5 4C     	LD A, (SOUND_ENABLED)
1368  5333 B7           	OR A
1369  5334 C8           	RET Z ; already stopped
1370  5335 AF           	XOR A
1371  5336 32 F5 4C     	LD (SOUND_ENABLED), A
1372  5339 E5           	PUSH HL
1373  533A CD 1F 42     	CALL PLY_AKG_STOP
1374  533D 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1375  5340 B7           	OR A
1376  5341 28 0E        	JR Z, .EXIT ; SFX not in use
1377  5343 AF           	XOR A
1378  5344 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1379  5347 3E 01        	LD A, 1
1380  5349 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1381  534C 3E 02        	LD A, 2
1382  534E CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1383  5351              .EXIT:
1384  5351 E1           	POP HL
1385  5352 C9           	RET
1386  5353              ; *******************************************************************************************************
1387  5353
1388  5353              ; *******************************************************************************************************
1389  5353              ; function to handle CALL SNDSFX basic extension
1390  5353              ; plays a sound effect
1391  5353              ; _SNDSFX ( BYTE sfx_number, >0
1392  5353              ;			BYTE channel, = 0,1 or 2
1393  5353              ;			BYTE inverted_volume = 0-16, 0 being full volume
1394  5353              ; will put ram in page 0 also, page 1 is already there
1395  5353              ; if sound off throws illegal function call
1396  5353              ; if sfx not initialized, throws out of data
1397  5353              SNDSFX:
1398  5353              	; opening (
1399  5353 CD E5 4F     	CALL CHKCHAR
1400  5356 28           	DB '('
1401  5357              	; get sfx_number
1402  5357 DD 21 1C 52  	LD IX, GETBYT
1403  535B CD 59 01     	CALL CALBAS
1404  535E D5           	PUSH DE
1405  535F              	; comma
1406  535F CD E5 4F     	CALL CHKCHAR
1407  5362 2C           	DB ','
1408  5363              	; get sfx address
1409  5363 DD 21 1C 52  	LD IX, GETBYT
1410  5367 CD 59 01     	CALL CALBAS
1411  536A D5           	PUSH DE
1412  536B              	; comma
1413  536B CD E5 4F     	CALL CHKCHAR
1414  536E 2C           	DB ','
1415  536F              	; get inverted volume
1416  536F DD 21 1C 52  	LD IX, GETBYT
1417  5373 CD 59 01     	CALL CALBAS
1418  5376 D5           	PUSH DE
1419  5377              	; ending )
1420  5377 CD E5 4F     	CALL CHKCHAR
1421  537A 29           	DB ')'
1422  537B
1423  537B 3A F5 4C     	LD A, (SOUND_ENABLED)
1424  537E B7           	OR A
1425  537F 20 05        	JR NZ, .L1
1426  5381              	; sound disabled, throw illegal function call
1427  5381 1E 05        	LD E, 5
1428  5383 C3 FD 4F     	JP THROW_ERROR
1429  5386              .L1:
1430  5386 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1431  5389 B7           	OR A
1432  538A 20 05        	JR NZ, .L2
1433  538C              	; sfx data not initialized, throw out of data
1434  538C 1E 04        	LD E, 4
1435  538E C3 FD 4F     	JP THROW_ERROR
1436  5391              .L2:
1437  5391              	; pop  parameters and store away for later
1438  5391 D1           	POP DE ; inverted volume
1439  5392 43           	LD B, E
1440  5393 D1           	POP DE ; channel
1441  5394 4B           	LD C, E
1442  5395 D1           	POP DE
1443  5396 7B           	LD A, E
1444  5397 08           	EX AF, AF'
1445  5398 E5           	PUSH HL ; basic text location
1446  5399 D9           	EXX
1447  539A AF               XOR A
1448  539B CD D9 4D         CALL GET_PAGE_INFO
1449  539E C5               PUSH BC
1450  539F D5               PUSH DE
1451  53A0 3A 41 F3         LD A, (RAMAD0)
1452  53A3 26 00            LD H, 0
1453  53A5 CD 1F 4E         CALL LOCAL_ENASLT
1454  53A8 D9           	EXX
1455  53A9 08           	EX AF, AF'
1456  53AA CD 1F 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1457  53AD
1458  53AD D1               POP DE
1459  53AE C1               POP BC
1460  53AF CD 10 4E         CALL RESTORE_PAGE_INFO
1461  53B2
1462  53B2 E1           	POP HL
1463  53B3 C9           	RET
1464  53B4              ; *******************************************************************************************************
1465  53B4
1466  53B4              ; *******************************************************************************************************
1467  53B4              ; function to handle CALL SPRATRINI basic extension
1468  53B4              ; initializes sprites handler
1469  53B4              ; _SPRATRINI ( INT sprites_attributes_data,
1470  53B4              ;			   INT update_variable_location )
1471  53B4              ; expects both locations to be in range #8000+ or throws an error
1472  53B4              ; since these should be BASIC variables
1473  53B4              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA
1474  53B4              SPRATRINI:
1475  53B4              	; opening (
1476  53B4 CD E5 4F     	CALL CHKCHAR
1477  53B7 28           	DB '('
1478  53B8              	; get address of sprite attribute table DIM SA%(3,31)
1479  53B8 DD 21 2F 54  	LD IX, FRMQNT
1480  53BC CD 59 01     	CALL CALBAS
1481  53BF D5           	PUSH DE
1482  53C0              	; comma
1483  53C0 CD E5 4F     	CALL CHKCHAR
1484  53C3 2C           	DB ','
1485  53C4              	; get update variable location SU%
1486  53C4 DD 21 2F 54  	LD IX, FRMQNT
1487  53C8 CD 59 01     	CALL CALBAS
1488  53CB D5           	PUSH DE
1489  53CC              	; ending )
1490  53CC CD E5 4F     	CALL CHKCHAR
1491  53CF 29           	DB ')'
1492  53D0
1493  53D0 D1           	POP DE ; update variable location
1494  53D1 CB 7A        	BIT 7, D ; is address >= &h8000
1495  53D3 20 05        	JR NZ, .L1
1496  53D5 1E 05        	LD E, 5 ; illegal function call
1497  53D7 C3 FD 4F     	JP THROW_ERROR
1498  53DA              .L1:
1499  53DA ED 53 F7 4C  	LD (SPRATR_UPDATE_FLAG), DE
1500  53DE D1           	POP DE ; address of sprite attribute table
1501  53DF CB 7A        	BIT 7, D ; is address >= &h8000
1502  53E1 20 05        	JR NZ, .L2
1503  53E3 1E 05        	LD E, 5 ; illegal function call
1504  53E5 C3 FD 4F     	JP THROW_ERROR
1505  53E8              .L2:
1506  53E8 ED 53 F9 4C  	LD (SPRATR_DATA), DE
1507  53EC 3E 01        	LD A, 1
1508  53EE 32 F6 4C     	LD (SPRATR_INIT_STATUS), A
1509  53F1 C9           	RET
1510  53F2              ; *******************************************************************************************************
1511  53F2
1512  53F2              ; *******************************************************************************************************
1513  53F2              ; function to handle CALL SPRSET basic extension
1514  53F2              ; sets position, and optionally pattern and color of sprite
1515  53F2              ; _SPRSET ( BYTE sprite_num , valid 0-31
1516  53F2              ;			INT x,
1517  53F2              ;			INT y,
1518  53F2              ;			INT pattern, valid 0-31, otherwise ignored
1519  53F2              ;			INT color, valid 0-15, otherwise ignored
1520  53F2              SPRSET:
1521  53F2 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1522  53F5 B7           	OR A
1523  53F6 20 05        	JR NZ, .L1
1524  53F8 1E 05        	LD E, 5 ; illegal function call
1525  53FA C3 FD 4F     	JP THROW_ERROR
1526  53FD              .L1:
1527  53FD              	; opening (
1528  53FD CD E5 4F     	CALL CHKCHAR
1529  5400 28           	DB '('
1530  5401              	; get sprite number
1531  5401 DD 21 1C 52  	LD IX, GETBYT
1532  5405 CD 59 01     	CALL CALBAS
1533  5408 F5           	PUSH AF
1534  5409              	; comma
1535  5409 CD E5 4F     	CALL CHKCHAR
1536  540C 2C           	DB ','
1537  540D              	; get x
1538  540D DD 21 2F 54  	LD IX, FRMQNT
1539  5411 CD 59 01     	CALL CALBAS
1540  5414 D5           	PUSH DE
1541  5415              	; comma
1542  5415 CD E5 4F     	CALL CHKCHAR
1543  5418 2C           	DB ','
1544  5419              	; get y
1545  5419 DD 21 2F 54  	LD IX, FRMQNT
1546  541D CD 59 01     	CALL CALBAS
1547  5420 D5           	PUSH DE
1548  5421              	; comma
1549  5421 CD E5 4F     	CALL CHKCHAR
1550  5424 2C           	DB ','
1551  5425              	; get pattern
1552  5425 DD 21 2F 54  	LD IX, FRMQNT
1553  5429 CD 59 01     	CALL CALBAS
1554  542C D5           	PUSH DE
1555  542D              	; comma
1556  542D CD E5 4F     	CALL CHKCHAR
1557  5430 2C           	DB ','
1558  5431              	; get color
1559  5431 DD 21 2F 54  	LD IX, FRMQNT
1560  5435 CD 59 01     	CALL CALBAS
1561  5438 D5           	PUSH DE
1562  5439              	; ending )
1563  5439 CD E5 4F     	CALL CHKCHAR
1564  543C 29           	DB ')'
1565  543D
1566  543D                  ; save position in BASIC text
1567  543D E5           	PUSH HL
1568  543E DD E1        	POP IX
1569  5440
1570  5440 C1           	POP BC ; color
1571  5441 D1           	POP DE ; pattern
1572  5442 D9           	EXX
1573  5443 C1           	POP BC ; y
1574  5444 D1           	POP DE ; x
1575  5445 F1           	POP AF ; sprite number
1576  5446 FE 20        	CP 32
1577  5448 38 05        	JR C, .L2
1578  544A 1E 05        	LD E, 5 ; illegal function call
1579  544C C3 FD 4F     	JP THROW_ERROR
1580  544F              .L2:
1581  544F              	; find location in sprite attributes table
1582  544F 87          > ADD A, A
1582  5450 87          > ADD A, A
1582  5451 87          > ADD A, A
1583  5452 D5           	PUSH DE
1584  5453 16 00        	LD D, 0
1585  5455 5F           	LD E, A
1586  5456 2A F9 4C     	LD HL, (SPRATR_DATA)
1587  5459 19           	ADD HL, DE
1588  545A D1           	POP DE
1589  545B              	; set y
1590  545B 71           	LD (HL), C
1591  545C 23           	INC HL
1592  545D 70           	LD (HL), B
1593  545E 23           	INC HL
1594  545F              	; set x
1595  545F 73           	LD (HL), E
1596  5460 23           	INC HL
1597  5461 72           	LD (HL), D
1598  5462 23           	INC HL
1599  5463 E5           	PUSH HL
1600  5464 D9           	EXX
1601  5465 E1           	POP HL
1602  5466              	; check if 0<=pattern<32
1603  5466 7A           	LD A, D
1604  5467 B7           	OR A
1605  5468 20 0B        	JR NZ, .L3
1606  546A 7D           	LD A, L
1607  546B FE 20        	CP 32
1608  546D 30 06        	JR NC, .L3
1609  546F              	; set pattern
1610  546F 73           	LD (HL), E
1611  5470 23           	INC HL
1612  5471 72           	LD (HL), D
1613  5472 23           	INC HL
1614  5473 18 02        	JR .L4
1615  5475              .L3:
1616  5475              	; skip pattern
1617  5475 23          > INC HL
1617  5476 23          > INC HL
1618  5477              .L4:
1619  5477              	; check if 0<=color<16
1620  5477 78           	LD A, B
1621  5478 B7           	OR A
1622  5479 20 08        	JR NZ, .L5
1623  547B 79           	LD A, C
1624  547C FE 10        	CP 16
1625  547E 30 03        	JR NC, .L5
1626  5480              	; set color
1627  5480 71           	LD (HL), C
1628  5481 23           	INC HL
1629  5482 70           	LD (HL), B
1630  5483
1631  5483              .L5:
1632  5483 DD E5        	PUSH IX
1633  5485 E1           	POP HL
1634  5486 C9           	RET
1635  5487              ; *******************************************************************************************************
1636  5487
1637  5487              ; *******************************************************************************************************
1638  5487              ; function sets sprite location based on initial coordinates and offset provided
1639  5487              ; input A=sprite number in SPRATR_DATA , 0-31
1640  5487              ; input DE=initial x
1641  5487              ; input BC=initial y
1642  5487              ; input IY=location where delta y,x are located
1643  5487              ; modifies AF, HL, IX
1644  5487              SPRSET_DELTA_POS:
1645  5487 87          > ADD A, A
1645  5488 87          > ADD A, A
1645  5489 87          > ADD A, A
1646  548A D5           	PUSH DE
1647  548B 16 00        	LD D, 0
1648  548D 5F           	LD E, A
1649  548E DD 2A F9 4C  	LD IX, (SPRATR_DATA)
1650  5492 DD 19        	ADD IX, DE
1651  5494 D1           	POP DE
1652  5495              	; IX=sprite's y location
1653  5495 FD 6E 00     	LD L, (IY)
1654  5498 FD 66 01     	LD H, (IY+1)
1655  549B 09           	ADD HL, BC
1656  549C DD 75 00     	LD (IX), L
1657  549F DD 74 01     	LD (IX+1), H
1658  54A2 FD 6E 02     	LD L, (IY+2)
1659  54A5 FD 66 03     	LD H, (IY+3)
1660  54A8 19           	ADD HL, DE
1661  54A9 DD 75 02     	LD (IX+2), L
1662  54AC DD 74 03     	LD (IX+3), H
1663  54AF C9           	RET
1664  54B0              ; *******************************************************************************************************
1665  54B0
1666  54B0              ; *******************************************************************************************************
1667  54B0              ; function to handle CALL SPRGRPMOV basic extension
1668  54B0              ; sets position of a group of sprites described with
1669  54B0              ; { int sprite_num, int delta_y, int delta_x } [count]
1670  54B0              ; _SPRGRPMOV ( INT x,
1671  54B0              ;			   INT y,
1672  54B0              ;			   INT data_ptr,
1673  54B0              ;			   BYTE count,
1674  54B0              ;			   BYTE enable_ram) >0 = true
1675  54B0              ; enable_ram will put ram in page 0 also, page 1 is already there
1676  54B0              SPRGRPMOV:
1677  54B0 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1678  54B3 B7           	OR A
1679  54B4 20 05        	JR NZ, .L1
1680  54B6 1E 05        	LD E, 5 ; illegal function call
1681  54B8 C3 FD 4F     	JP THROW_ERROR
1682  54BB              .L1:
1683  54BB              	; opening (
1684  54BB CD E5 4F     	CALL CHKCHAR
1685  54BE 28           	DB '('
1686  54BF              	; get x
1687  54BF DD 21 2F 54  	LD IX, FRMQNT
1688  54C3 CD 59 01     	CALL CALBAS
1689  54C6 D5           	PUSH DE
1690  54C7              	; comma
1691  54C7 CD E5 4F     	CALL CHKCHAR
1692  54CA 2C           	DB ','
1693  54CB              	; get y
1694  54CB DD 21 2F 54  	LD IX, FRMQNT
1695  54CF CD 59 01     	CALL CALBAS
1696  54D2 D5           	PUSH DE
1697  54D3              	; comma
1698  54D3 CD E5 4F     	CALL CHKCHAR
1699  54D6 2C           	DB ','
1700  54D7              	; get data pointer
1701  54D7 DD 21 2F 54  	LD IX, FRMQNT
1702  54DB CD 59 01     	CALL CALBAS
1703  54DE D5           	PUSH DE
1704  54DF              	; comma
1705  54DF CD E5 4F     	CALL CHKCHAR
1706  54E2 2C           	DB ','
1707  54E3              	; get count
1708  54E3 DD 21 1C 52  	LD IX, GETBYT
1709  54E7 CD 59 01     	CALL CALBAS
1710  54EA F5           	PUSH AF
1711  54EB              	; comma
1712  54EB CD E5 4F     	CALL CHKCHAR
1713  54EE 2C           	DB ','
1714  54EF              	; get enable RAM
1715  54EF DD 21 1C 52  	LD IX, GETBYT
1716  54F3 CD 59 01     	CALL CALBAS
1717  54F6 F5           	PUSH AF
1718  54F7              	; ending )
1719  54F7 CD E5 4F     	CALL CHKCHAR
1720  54FA 29           	DB ')'
1721  54FB
1722  54FB E5           	PUSH HL
1723  54FC DD E1        	POP IX
1724  54FE
1725  54FE F1           	POP AF ; enable RAM
1726  54FF B7           	OR A
1727  5500 C1           	POP BC ; count
1728  5501 E1           	POP HL ; data pointer
1729  5502 D9           	EXX
1730  5503 C1           	POP BC ; y
1731  5504 D1           	POP DE ; x
1732  5505 D9           	EXX
1733  5506
1734  5506 DD E5        	PUSH IX ; save position in BASIC buffer
1735  5508
1736  5508 28 24        	JR Z, .L2
1737  550A C5           	PUSH BC
1738  550B E5           	PUSH HL
1739  550C AF               XOR A
1740  550D CD D9 4D         CALL GET_PAGE_INFO
1741  5510 D9           	EXX
1742  5511 E1           	POP HL
1743  5512 F1           	POP AF
1744  5513 D9           	EXX
1745  5514 C5               PUSH BC
1746  5515 D5               PUSH DE
1747  5516 D9           	EXX
1748  5517 F5           	PUSH AF
1749  5518 E5           	PUSH HL
1750  5519 D9           	EXX
1751  551A 3A 41 F3         LD A, (RAMAD0)
1752  551D 26 00            LD H, 0
1753  551F CD 1F 4E         CALL LOCAL_ENASLT
1754  5522 E1           	POP HL
1755  5523 C1           	POP BC
1756  5524 CD 34 55     	CALL .UPDATE_LOC
1757  5527 D1               POP DE
1758  5528 C1               POP BC
1759  5529 CD 10 4E         CALL RESTORE_PAGE_INFO
1760  552C 18 04        	JR .L3
1761  552E
1762  552E              .L2:
1763  552E FB           	EI
1764  552F CD 34 55     	CALL .UPDATE_LOC
1765  5532
1766  5532              .L3:
1767  5532 E1           	POP HL
1768  5533 C9           	RET
1769  5534
1770  5534              .UPDATE_LOC:
1771  5534              .L4:
1772  5534 7E           	LD A, (HL)
1773  5535 23           	INC HL
1774  5536 23           	INC HL
1775  5537 E5           	PUSH HL
1776  5538 FD E1        	POP IY
1777  553A D9           	EXX
1778  553B CD 87 54     	CALL SPRSET_DELTA_POS
1779  553E D9           	EXX
1780  553F 23          > INC HL
1780  5540 23          > INC HL
1780  5541 23          > INC HL
1780  5542 23          > INC HL
1781  5543 10 EF        	DJNZ .L4
1782  5545 C9           	RET
1783  5546              ; *******************************************************************************************************
1784  5546
1785  5546              ; *******************************************************************************************************
1786  5546              ; function rotates mask and data of several characters and applies to background data
1787  5546              ; this handles x-shift from 0 to 4
1788  5546              ; contains self-modifying code that is set-up from external function
1789  5546              ; input HL=pointer to mask data
1790  5546              ; input HL'=pointer to character data
1791  5546              ; input DE=output buffer containing background data
1792  5546              ; input A=number of characters to process
1793  5546              SHIFT04:
1794  5546 E5           	PUSH HL
1795  5547 62           	LD H, D
1796  5548 6B           	LD L, E
1797  5549 01 08 00     	LD BC, 8
1798  554C 09           	ADD HL, BC
1799  554D 44           	LD B, H
1800  554E 4D           	LD C, L
1801  554F E1           	POP HL
1802  5550              .L0:
1803  5550 F5           	PUSH AF
1804  5551 3E 08        	LD A, 8
1805  5553 08           	EX AF, AF'
1806  5554              .L1:
1807  5554 7E           	LD A, (HL) ; get mask
1808  5555 D9           	EXX
1809  5556 57           	LD D, A
1810  5557 1E FF        	LD E, #FF
1811  5559 37           	SCF
1812  555A              .M1:
1813  555A 18 FE        	JR .M1 ; this is self-modifying part
1814  555C CB 1A        	RR D
1815  555E CB 1B        	RR E
1816  5560 CB 1A        	RR D
1817  5562 CB 1B        	RR E
1818  5564 CB 1A        	RR D
1819  5566 CB 1B        	RR E
1820  5568 CB 1A        	RR D
1821  556A CB 1B        	RR E
1822  556C
1823  556C 46           	LD B, (HL)
1824  556D 0E 00        	LD C, 0
1825  556F              .M2:
1826  556F 18 FE        	JR .M2 ; also self-modifying part
1827  5571 CB 38        	SRL B
1828  5573 CB 19        	RR C
1829  5575 CB 38        	SRL B
1830  5577 CB 19        	RR C
1831  5579 CB 38        	SRL B
1832  557B CB 19        	RR C
1833  557D CB 38        	SRL B
1834  557F CB 19        	RR C
1835  5581
1836  5581 D9           	EXX
1837  5582 1A           	LD A, (DE) ; background
1838  5583 D9           	EXX
1839  5584 A2           	AND D
1840  5585 B0           	OR B
1841  5586 D9           	EXX
1842  5587 12           	LD (DE), A
1843  5588
1844  5588 0A           	LD A, (BC)
1845  5589 D9           	EXX
1846  558A A3           	AND E
1847  558B B1           	OR C
1848  558C 23           	INC HL
1849  558D D9           	EXX
1850  558E 02           	LD (BC), A
1851  558F
1852  558F 23           	INC HL
1853  5590 13           	INC DE
1854  5591 03           	INC BC
1855  5592
1856  5592 08           	EX AF, AF'
1857  5593 3D           	DEC A
1858  5594 C2 54 55     	JP NZ, .L1
1859  5597 F1           	POP AF
1860  5598 3D           	DEC A
1861  5599 C2 50 55     	JP NZ, .L0
1862  559C C9           	RET
1863  559D              ; *******************************************************************************************************
1864  559D
1865  559D
1866  559D              EXT_END:
1867  559D
# file closed: asm\main.asm
