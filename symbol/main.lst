# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; INCLUDE "system_variables.inc"
   4  4000              ; INCLUDE "system_hooks.inc"
   5  4000              ; INCLUDE "bios_calls.inc"
   6  4000
   7  4000              CHPUT   EQU     #A2
   8  4000              CALBAS	EQU		#159
   9  4000              ERRHAND EQU     #406F
  10  4000              FRMEVL  EQU     #4C64
  11  4000              FRESTR	EQU		#67D0
  12  4000              ; FRMQNT = formula quantificator
  13  4000              ; input HL=pointer to current program expression
  14  4000              ; output HL=next address
  15  4000              ; output DE=integer datum
  16  4000              FRMQNT	EQU		#542F
  17  4000              ; GETBYT = get byte parameter
  18  4000              ; input HL=pointer to current program expression
  19  4000              ; output HL=next address
  20  4000              ; output A=E=byte read
  21  4000              GETBYT	EQU		#521C
  22  4000              CHRGTR  EQU     #4666
  23  4000              SYNCHR	EQU		#558C
  24  4000              VALTYP  EQU     #F663
  25  4000              USR     EQU     #F7F8
  26  4000              PROCNM	EQU		#FD89
  27  4000              BIOS_FILVRM  EQU     #56
  28  4000              CLIKSW	EQU		#F3DB
  29  4000              ATRBAS	EQU		#F928
  30  4000
  31  4000              RAMAD0	EQU	0F341h	; Main-RAM Slot (00000h~03FFFh)
  32  4000              RAMAD1	EQU	0F342h	; Main-RAM Slot (04000h~07FFFh)
  33  4000              RAMAD2	EQU	0F343h	; Main-RAM Slot (08000h~0BFFFh)
  34  4000              RAMAD3	EQU	0F344h	; Main-RAM Slot (0C000h~0FFFFh)
  35  4000              EXPTBL	EQU #FCC1
  36  4000              SCRMOD	EQU #FCAF ; current screen mode
  37  4000
  38  4000              ; BASIC error codes
  39  4000              ;01 NEXT without FOR
  40  4000              ;02 Syntax error
  41  4000              ;03 RETURN without GOSUB
  42  4000              ;04 Out of DATA
  43  4000              ;05 Illegal function call
  44  4000              ;06 Overflow
  45  4000              ;07 Out of memory
  46  4000              ;08 Undefined line number
  47  4000              ;09 Subscript out of range
  48  4000              ;10 Redimensioned array
  49  4000              ;11 Division by zero
  50  4000              ;12 Illegal direct
  51  4000              ;13 Type mismatch
  52  4000              ;14 Out of string space
  53  4000              ;15 String too long
  54  4000              ;16 String formula too complex
  55  4000              ;17 Can't CONTINUE
  56  4000              ;18 Undefined user function
  57  4000              ;19 Device I/O error
  58  4000              ;20 Verify error
  59  4000              ;21 No RESUME
  60  4000              ;22 RESUME without error
  61  4000              ;23 Unprintable error
  62  4000              ;24 Missing operand
  63  4000              ;25 Line buffer overflow
  64  4000              ;50 FIELD overflow
  65  4000              ;51 Internal error
  66  4000              ;52 Bad file number
  67  4000              ;53 File not found
  68  4000              ;54 File already open
  69  4000              ;55 Input past end
  70  4000              ;56 Bad file name
  71  4000              ;57 Direct statement in file
  72  4000              ;58 Sequential I/O only
  73  4000              ;59 File not OPEN
  74  4000
  75  4000
  76  4000               ; simulate cartridge with BASIC extension
  77  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  77  4004 37 4F 00 00
  77  4008 00 00 00 00
  77  400C 00 00 00 00
  78  4010
  79  4010              ; this location #400A stores last location used by basic extension
  80  4010              ; free memory after that point
  81  4010 7B 54         DW EXT_END
  82  4012
  83  4012              ; binary included AKG player compiled at #4012
  84  4012               INCBIN "bin/AKG.bin"
  85  4CEE               INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CEE              MAIN_PLAYER_START EQU 04012H
   2+ 4CEE              PLY_AKG_START EQU 04012H
   3+ 4CEE              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401BH
   4+ 4CEE              PLY_AKG_INITSOUNDEFFECTS EQU 0401BH
   5+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 0401FH
   6+ 4CEE              PLY_AKG_PLAYSOUNDEFFECT EQU 0401FH
   7+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04020H
   8+ 4CEE              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04020H
   9+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04047H
  10+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04047H
  11+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04055H
  12+ 4CEE              PLY_AKG_PSES_PLAY EQU 0408EH
  13+ 4CEE              PLY_AKG_PSES_READFIRSTBYTE EQU 04097H
  14+ 4CEE              PLY_AKG_PSES_S_ENDORLOOP EQU 040AFH
  15+ 4CEE              PLY_AKG_PSES_S_LOOP EQU 040BAH
  16+ 4CEE              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C0H
  17+ 4CEE              PLY_AKG_PSES_NOTREACHED EQU 040D3H
  18+ 4CEE              PLY_AKG_PSES_HARDWAREONLY EQU 040D7H
  19+ 4CEE              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040DEH
  20+ 4CEE              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F0H
  21+ 4CEE              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FAH
  22+ 4CEE              PLY_AKG_PSES_H_AFTERRETRIG EQU 04104H
  23+ 4CEE              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 04118H
  24+ 4CEE              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411DH
  25+ 4CEE              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04125H
  26+ 4CEE              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04130H
  27+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413CH
  28+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 0413EH
  29+ 4CEE              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04144H
  30+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 04148H
  31+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 04148H
  32+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414AH
  33+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414AH
  34+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414AH
  35+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414BH
  36+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414CH
  37+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04150H
  38+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04150H
  39+ 4CEE              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04150H
  40+ 4CEE              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 04158H
  41+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04160H
  42+ 4CEE              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04160H
  43+ 4CEE              PLY_AKG_INIT EQU 04160H
  44+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04160H
  45+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 0418EH
  46+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A2H
  47+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B4H
  48+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D3H
  49+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E0H
  50+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL EQU 041E6H
  51+ 4CEE              PLY_AKG_INITTABLE0 EQU 041E9H
  52+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041E9H
  53+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04203H
  54+ 4CEE              PLY_AKG_INITTABLE0_END EQU 04203H
  55+ 4CEE              PLY_AKG_INITTABLE1 EQU 04203H
  56+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04203H
  57+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04207H
  58+ 4CEE              PLY_AKG_INITTABLE1_END EQU 04207H
  59+ 4CEE              PLY_AKG_INITTABLEORA EQU 04207H
  60+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04207H
  61+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 0421FH
  62+ 4CEE              PLY_AKG_INITTABLEORA_END EQU 0421FH
  63+ 4CEE              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 0421FH
  64+ 4CEE              PLY_AKG_STOP EQU 0421FH
  65+ 4CEE              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04231H
  66+ 4CEE              PLY_AKG_PLAY EQU 04231H
  67+ 4CEE              PLY_AKG_TICKDECREASINGCOUNTER EQU 04239H
  68+ 4CEE              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 0423FH
  69+ 4CEE              PLY_AKG_READLINKER EQU 04244H
  70+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04244H
  71+ 4CEE              PLY_AKG_READLINKER_PTLINKER EQU 04244H
  72+ 4CEE              PLY_AKG_READLINKER_NOLOOP EQU 0424FH
  73+ 4CEE              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 04288H
  74+ 4CEE              PLY_AKG_READLINE EQU 0428BH
  75+ 4CEE              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428BH
  76+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04291H
  77+ 4CEE              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04291H
  78+ 4CEE              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 0429EH
  79+ 4CEE              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A2H
  80+ 4CEE              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A5H
  81+ 4CEE              PLY_AKG_SPEEDTRACK_END EQU 042A8H
  82+ 4CEE              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042A8H
  83+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042AEH
  84+ 4CEE              PLY_AKG_EVENTTRACK_PTTRACK EQU 042AEH
  85+ 4CEE              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BBH
  86+ 4CEE              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042BFH
  87+ 4CEE              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C2H
  88+ 4CEE              PLY_AKG_EVENTTRACK_END EQU 042C5H
  89+ 4CEE              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C5H
  90+ 4CEE              PLY_AKG_CHANNEL1_READTRACK EQU 042D1H
  91+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D1H
  92+ 4CEE              PLY_AKG_CHANNEL1_PTTRACK EQU 042D1H
  93+ 4CEE              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042ECH
  94+ 4CEE              PLY_AKG_CHANNEL1_WAIT EQU 042F7H
  95+ 4CEE              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 042FEH
  96+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 042FEH
  97+ 4CEE              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 042FEH
  98+ 4CEE              PLY_AKG_CHANNEL1_NOTE EQU 04307H
  99+ 4CEE              PLY_AKG_BASENOTEINDEX EQU 04307H
 100+ 4CEE              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 04309H
 101+ 4CEE              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 04309H
 102+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 04319H
 103+ 4CEE              PLY_AKG_INSTRUMENTSTABLE EQU 04319H
 104+ 4CEE              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432BH
 105+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433BH
 106+ 4CEE              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04363H
 107+ 4CEE              PLY_AKG_CHANNEL1_READCELLEND EQU 04366H
 108+ 4CEE              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04366H
 109+ 4CEE              PLY_AKG_CHANNEL2_READTRACK EQU 04372H
 110+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04372H
 111+ 4CEE              PLY_AKG_CHANNEL2_PTTRACK EQU 04372H
 112+ 4CEE              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438DH
 113+ 4CEE              PLY_AKG_CHANNEL2_WAIT EQU 04398H
 114+ 4CEE              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 0439FH
 115+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 0439FH
 116+ 4CEE              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 0439FH
 117+ 4CEE              PLY_AKG_CHANNEL2_NOTE EQU 043A8H
 118+ 4CEE              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043ADH
 119+ 4CEE              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043ADH
 120+ 4CEE              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043CFH
 121+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043DFH
 122+ 4CEE              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04407H
 123+ 4CEE              PLY_AKG_CHANNEL2_READCELLEND EQU 0440AH
 124+ 4CEE              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440AH
 125+ 4CEE              PLY_AKG_CHANNEL3_READTRACK EQU 04416H
 126+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04416H
 127+ 4CEE              PLY_AKG_CHANNEL3_PTTRACK EQU 04416H
 128+ 4CEE              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04431H
 129+ 4CEE              PLY_AKG_CHANNEL3_WAIT EQU 0443CH
 130+ 4CEE              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04443H
 131+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04443H
 132+ 4CEE              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04443H
 133+ 4CEE              PLY_AKG_CHANNEL3_NOTE EQU 0444CH
 134+ 4CEE              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04451H
 135+ 4CEE              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04451H
 136+ 4CEE              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04473H
 137+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04483H
 138+ 4CEE              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ABH
 139+ 4CEE              PLY_AKG_CHANNEL3_READCELLEND EQU 044AEH
 140+ 4CEE              PLY_AKG_CURRENTSPEED EQU 044AEH
 141+ 4CEE              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B0H
 142+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B3H
 143+ 4CEE              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B3H
 144+ 4CEE              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B6H
 145+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044B9H
 146+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044B9H
 147+ 4CEE              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C5H
 148+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CCH
 149+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044CFH
 150+ 4CEE              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D5H
 151+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044D8H
 152+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044D8H
 153+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E6H
 154+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EBH
 155+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F6H
 156+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044F9H
 157+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044F9H
 158+ 4CEE              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FCH
 159+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 044FFH
 160+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE EQU 044FFH
 161+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 04508H
 162+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04512H
 163+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04515H
 164+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04515H
 165+ 4CEE              PLY_AKG_CHANNEL1_PITCH EQU 04515H
 166+ 4CEE              PLY_AKG_CHANNEL1_ISPITCH EQU 04518H
 167+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451DH
 168+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451DH
 169+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04521H
 170+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04523H
 171+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04525H
 172+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452CH
 173+ 4CEE              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452DH
 174+ 4CEE              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04530H
 175+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04530H
 176+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454CH
 177+ 4CEE              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454CH
 178+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 04559H
 179+ 4CEE              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455DH
 180+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456DH
 181+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456DH
 182+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 0456EH
 183+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 0456FH
 184+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04571H
 185+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04571H
 186+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04571H
 187+ 4CEE              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04572H
 188+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04573H
 189+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04575H
 190+ 4CEE              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04575H
 191+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04575H
 192+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04575H
 193+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04575H
 194+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_END EQU 04578H
 195+ 4CEE              PLY_AKG_CHANNEL1_PITCH_END EQU 0457AH
 196+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04582H
 197+ 4CEE              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04582H
 198+ 4CEE              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04585H
 199+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 04588H
 200+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 04588H
 201+ 4CEE              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04594H
 202+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459BH
 203+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 0459EH
 204+ 4CEE              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A4H
 205+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A7H
 206+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A7H
 207+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B5H
 208+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BAH
 209+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C5H
 210+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045C8H
 211+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045C8H
 212+ 4CEE              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CBH
 213+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045CEH
 214+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045CEH
 215+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D7H
 216+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E1H
 217+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E4H
 218+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E4H
 219+ 4CEE              PLY_AKG_CHANNEL2_PITCH EQU 045E4H
 220+ 4CEE              PLY_AKG_CHANNEL2_ISPITCH EQU 045E7H
 221+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045ECH
 222+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045ECH
 223+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F0H
 224+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F2H
 225+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F4H
 226+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FBH
 227+ 4CEE              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FCH
 228+ 4CEE              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 045FFH
 229+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 045FFH
 230+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461BH
 231+ 4CEE              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461BH
 232+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 04628H
 233+ 4CEE              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462CH
 234+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463CH
 235+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463CH
 236+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463DH
 237+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 0463EH
 238+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04640H
 239+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04640H
 240+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04640H
 241+ 4CEE              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04641H
 242+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04642H
 243+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04644H
 244+ 4CEE              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04644H
 245+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04644H
 246+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04644H
 247+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04644H
 248+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_END EQU 04647H
 249+ 4CEE              PLY_AKG_CHANNEL2_PITCH_END EQU 04649H
 250+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04651H
 251+ 4CEE              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04651H
 252+ 4CEE              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04654H
 253+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04657H
 254+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04657H
 255+ 4CEE              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04663H
 256+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466AH
 257+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466DH
 258+ 4CEE              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04673H
 259+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04676H
 260+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04676H
 261+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04684H
 262+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 04689H
 263+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04694H
 264+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04697H
 265+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04697H
 266+ 4CEE              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469AH
 267+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469DH
 268+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469DH
 269+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A6H
 270+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B0H
 271+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B3H
 272+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B3H
 273+ 4CEE              PLY_AKG_CHANNEL3_PITCH EQU 046B3H
 274+ 4CEE              PLY_AKG_CHANNEL3_ISPITCH EQU 046B6H
 275+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BBH
 276+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BBH
 277+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046BFH
 278+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C1H
 279+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C3H
 280+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CAH
 281+ 4CEE              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CBH
 282+ 4CEE              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046CEH
 283+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046CEH
 284+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046EAH
 285+ 4CEE              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046EAH
 286+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F7H
 287+ 4CEE              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FBH
 288+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470BH
 289+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470BH
 290+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470CH
 291+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470DH
 292+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 0470FH
 293+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 0470FH
 294+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 0470FH
 295+ 4CEE              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04710H
 296+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04711H
 297+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04713H
 298+ 4CEE              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04713H
 299+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04713H
 300+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04713H
 301+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04713H
 302+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_END EQU 04716H
 303+ 4CEE              PLY_AKG_CHANNEL3_PITCH_END EQU 04718H
 304+ 4CEE              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04724H
 305+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04724H
 306+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04724H
 307+ 4CEE              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04727H
 308+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 04729H
 309+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 0472FH
 310+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04732H
 311+ 4CEE              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04732H
 312+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04735H
 313+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 0473EH
 314+ 4CEE              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04746H
 315+ 4CEE              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04753H
 316+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04753H
 317+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04753H
 318+ 4CEE              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04756H
 319+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 04758H
 320+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 0475EH
 321+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04761H
 322+ 4CEE              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04761H
 323+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04764H
 324+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476DH
 325+ 4CEE              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04775H
 326+ 4CEE              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04783H
 327+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04783H
 328+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04783H
 329+ 4CEE              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04786H
 330+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 04788H
 331+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 0478EH
 332+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04791H
 333+ 4CEE              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04791H
 334+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04794H
 335+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479DH
 336+ 4CEE              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A5H
 337+ 4CEE              PLY_AKG_SENDPSGREGISTERS EQU 047B4H
 338+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BCH
 339+ 4CEE              PLY_AKG_PSGREG01_INSTR EQU 047BCH
 340+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CCH
 341+ 4CEE              PLY_AKG_PSGREG23_INSTR EQU 047CCH
 342+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DDH
 343+ 4CEE              PLY_AKG_PSGREG45_INSTR EQU 047DDH
 344+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047EEH
 345+ 4CEE              PLY_AKG_PSGREG6_8_INSTR EQU 047EEH
 346+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 047FFH
 347+ 4CEE              PLY_AKG_PSGREG9_10_INSTR EQU 047FFH
 348+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04810H
 349+ 4CEE              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04810H
 350+ 4CEE              PLY_AKG_PSGREG13_OLDVALUE EQU 04825H
 351+ 4CEE              PLY_AKG_RETRIG EQU 04827H
 352+ 4CEE              PLY_AKG_PSGREG13_INSTR EQU 04829H
 353+ 4CEE              PLY_AKG_PSGREG13_END EQU 04838H
 354+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 04838H
 355+ 4CEE              PLY_AKG_SAVESP EQU 04838H
 356+ 4CEE              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483CH
 357+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTS EQU 04844H
 358+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04851H
 359+ 4CEE              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04851H
 360+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTS EQU 04859H
 361+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04866H
 362+ 4CEE              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04866H
 363+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTS EQU 0486EH
 364+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 04879H
 365+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS EQU 04879H
 366+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 04888H
 367+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 04888H
 368+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 0488FH
 369+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 0489FH
 370+ 4CEE              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 0489FH
 371+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A6H
 372+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A6H
 373+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048A9H
 374+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B2H
 375+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B2H
 376+ 4CEE              PLY_AKG_READINSTRUMENTCELL EQU 048B8H
 377+ 4CEE              PLY_AKG_NOSOFTNOHARD EQU 048C5H
 378+ 4CEE              PLY_AKG_NSNH_NONOISE EQU 048DAH
 379+ 4CEE              PLY_AKG_SOFT EQU 048DDH
 380+ 4CEE              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E4H
 381+ 4CEE              PLY_AKG_S_NOTSIMPLE EQU 048ECH
 382+ 4CEE              PLY_AKG_S_AFTERSIMPLETEST EQU 048EFH
 383+ 4CEE              PLY_AKG_HARDTOSOFT EQU 048FCH
 384+ 4CEE              PLY_AKG_HS_JUMPRATIO EQU 04907H
 385+ 4CEE              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04934H
 386+ 4CEE              PLY_AKG_ENDWITHOUTLOOP EQU 04936H
 387+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04936H
 388+ 4CEE              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04936H
 389+ 4CEE              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 0493EH
 390+ 4CEE              PLY_AKG_SH_JUMPRATIO EQU 0494BH
 391+ 4CEE              PLY_AKG_SH_JUMPRATIOEND EQU 0496CH
 392+ 4CEE              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497BH
 393+ 4CEE              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04981H
 394+ 4CEE              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499BH
 395+ 4CEE              PLY_AKG_H_RETRIGEND EQU 049ADH
 396+ 4CEE              PLY_AKG_H_AFTERRETRIG EQU 049AEH
 397+ 4CEE              PLY_AKG_ENDWITHLOOP EQU 049C0H
 398+ 4CEE              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C7H
 399+ 4CEE              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DDH
 400+ 4CEE              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EBH
 401+ 4CEE              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FBH
 402+ 4CEE              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A09H
 403+ 4CEE              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A18H
 404+ 4CEE              PLY_AKG_SHOHS_RETRIGEND EQU 04A27H
 405+ 4CEE              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A28H
 406+ 4CEE              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3AH
 407+ 4CEE              PLY_AKG_EFFECTTABLE EQU 04A48H
 408+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A48H
 409+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6CH
 410+ 4CEE              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6CH
 411+ 4CEE              PLY_AKG_EFFECT_RESET EQU 04A6FH
 412+ 4CEE              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A71H
 413+ 4CEE              PLY_AKG_EFFECT_VOLUME EQU 04A8CH
 414+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A98H
 415+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04A9EH
 416+ 4CEE              PLY_AKG_ARPEGGIOSTABLE EQU 04A9EH
 417+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC5H
 418+ 4CEE              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACCH
 419+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD2H
 420+ 4CEE              PLY_AKG_PITCHESTABLE EQU 04AD2H
 421+ 4CEE              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AF9H
 422+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B00H
 423+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B11H
 424+ 4CEE              PLY_AKG_EFFECT_PITCHDOWN EQU 04B18H
 425+ 4CEE              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B28H
 426+ 4CEE              PLY_AKG_EFFECT_PITCHUP EQU 04B3DH
 427+ 4CEE              PLY_AKG_EFFECT_PITCHSTOP EQU 04B4FH
 428+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B56H
 429+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B80H
 430+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B80H
 431+ 4CEE              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B99H
 432+ 4CEE              PLY_AKG_EFFECT_GLIDESPEED EQU 04B99H
 433+ 4CEE              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BABH
 434+ 4CEE              PLY_AKG_EFFECT_LEGATO EQU 04BC1H
 435+ 4CEE              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD5H
 436+ 4CEE              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDDH
 437+ 4CEE              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE5H
 438+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEDH
 439+ 4CEE              PLY_AKG_EVENT EQU 04BEDH
 440+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BEEH
 441+ 4CEE              PLY_AKG_PERIODTABLE EQU 04BEEH
 442+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BEEH
 443+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CEEH
 444+ 4CEE              PLY_AKG_PERIODTABLE_END EQU 04CEEH
 445+ 4CEE              PLY_AKG_END EQU 04CEEH
 446+ 4CEE              MAIN_PLAYER_END EQU 04CEEH
 447+ 4CEE              TESTEREND EQU 04CEEH
 448+ 4CEE
# file closed: ./symbol/AKG.sym
  86  4CEE
  87  4CEE              ORIG.HTIMI:
  88  4CEE 00 00 00 00  	DB 0, 0, 0, 0, 0
  88  4CF2 00
  89  4CF3               EXPORT ORIG.HTIMI
  90  4CF3
  91  4CF3              MUSIC_INIT_STATUS:
  92  4CF3 00            DB 0
  93  4CF4              SFX_INIT_STATUS:
  94  4CF4 00            DB 0
  95  4CF5              SOUND_ENABLED:
  96  4CF5 00            DB 0
  97  4CF6
  98  4CF6              SPRATR_INIT_STATUS:
  99  4CF6 00            DB 0
 100  4CF7              SPRATR_UPDATE_FLAG:
 101  4CF7 00 00         DW 0
 102  4CF9              SPRATR_DATA:
 103  4CF9 00 00         DW 0
 104  4CFB
 105  4CFB              ; to temporarily store stack pointer
 106  4CFB              TMPSP:
 107  4CFB 00 00         DW 0
 108  4CFD              ; to support sprite flicker
 109  4CFD              FLICKER:
 110  4CFD 00            DB 0
 111  4CFE
 112  4CFE              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 113  4CFE              ; per starting letter, if no commands with this letter, NULL value
 114  4CFE              CMDS:
 115  4CFE 00 00            DW 0 ; A
 116  4D00 00 00            DW 0 ; B
 117  4D02 00 00            DW 0 ; C
 118  4D04 00 00            DW 0 ; D
 119  4D06 00 00            DW 0 ; E
 120  4D08 59 4D            DW CMDS_F; F
 121  4D0A 6C 4D            DW CMDS_G; G
 122  4D0C 00 00            DW 0 ; H
 123  4D0E 00 00            DW 0 ; I
 124  4D10 00 00            DW 0 ; J
 125  4D12 00 00            DW 0 ; K
 126  4D14 3C 4D            DW CMDS_L ; L
 127  4D16 46 4D            DW CMDS_M ; M
 128  4D18 00 00            DW 0 ; N
 129  4D1A 00 00            DW 0 ; O
 130  4D1C 00 00            DW 0 ; P
 131  4D1E 00 00            DW 0 ; Q
 132  4D20 00 00            DW 0 ; R
 133  4D22 80 4D            DW CMDS_S ; S
 134  4D24 00 00            DW 0 ; T
 135  4D26 32 4D            DW CMDS_U ; U
 136  4D28 76 4D            DW CMDS_V ; V
 137  4D2A 00 00            DW 0 ; W
 138  4D2C 00 00            DW 0 ; X
 139  4D2E 00 00            DW 0 ; Y
 140  4D30 00 00            DW 0 ; Z
 141  4D32
 142  4D32              CMDS_U:
 143  4D32 55 50 52 49  	DEFB	"UPRINT",0      ; Print upper case string
 143  4D36 4E 54 00
 144  4D39 74 4F        	DEFW	UPRINT
 145  4D3B 00               DB 0
 146  4D3C              CMDS_L:
 147  4D3C 4C 50 52 49  	DEFB	"LPRINT",0      ; Print lower case string
 147  4D40 4E 54 00
 148  4D43 91 4F        	DEFW	LPRINT
 149  4D45 00               DB 0
 150  4D46              CMDS_M:
 151  4D46 4D 45 4D 56      DB "MEMVRM", 0
 151  4D4A 52 4D 00
 152  4D4D 86 51            DW MEMVRM
 153  4D4F 4D 45 4D 43  	DB "MEMCPY", 0
 153  4D53 50 59 00
 154  4D56 F8 4F        	DW MEMCPY
 155  4D58 00               DB 0
 156  4D59              CMDS_F:
 157  4D59 46 49 4C 56      DB "FILVRM", 0
 157  4D5D 52 4D 00
 158  4D60 68 50            DW FILVRM
 159  4D62 46 49 4C 52      DB "FILRAM", 0
 159  4D66 41 4D 00
 160  4D69 AF 50            DW FILRAM
 161  4D6B 00               DB 0
 162  4D6C              CMDS_G:
 163  4D6C 47 45 4E 43      DB "GENCAL", 0
 163  4D70 41 4C 00
 164  4D73 2D 51            DW GENCAL
 165  4D75 00           	DB	0
 166  4D76              CMDS_V:
 167  4D76 56 52 4D 4D  	DB "VRMMEM", 0
 167  4D7A 45 4D 00
 168  4D7D 08 52        	DW VRMMEM
 169  4D7F 00           	DB 0
 170  4D80              CMDS_S:
 171  4D80 53 50 52 53  	DB "SPRSET", 0
 171  4D84 45 54 00
 172  4D87 E6 53        	DW SPRSET
 173  4D89 53 4E 44 53  	DB "SNDSFX", 0
 173  4D8D 46 58 00
 174  4D90 47 53        	DW SNDSFX
 175  4D92 53 4E 44 50  	DB "SNDPLYON", 0
 175  4D96 4C 59 4F 4E
 175  4D9A 00
 176  4D9B 11 53        	DW SNDPLYON
 177  4D9D 53 4E 44 50  	DB "SNDPLYOFF", 0
 177  4DA1 4C 59 4F 46
 177  4DA5 46 00
 178  4DA7 24 53        	DW SNDPLYOFF
 179  4DA9 53 4E 44 50  	DB "SNDPLYINI", 0
 179  4DAD 4C 59 49 4E
 179  4DB1 49 00
 180  4DB3 C0 52        	DW SNDPLYINIT
 181  4DB5 53 50 52 41  	DB "SPRATRINI", 0
 181  4DB9 54 52 49 4E
 181  4DBD 49 00
 182  4DBF A8 53        	DW SPRATRINI
 183  4DC1 00           	DB 0
 184  4DC2
 185  4DC2              ; ****************************************************************************************************
 186  4DC2              ; function sets VRAM address
 187  4DC2              ; input HL=address
 188  4DC2              ; modifies AF
 189  4DC2              SETWRT_LOCAL:
 190  4DC2 7D           	LD	A, L
 191  4DC3 D3 99        	OUT	(099H), A
 192  4DC5 7C           	LD	A, H
 193  4DC6 E6 3F        	AND	03FH
 194  4DC8 F6 40        	OR	040H
 195  4DCA D3 99        	OUT	(099H), A
 196  4DCC C9           	RET
 197  4DCD              ; ****************************************************************************************************
 198  4DCD
 199  4DCD              ; ****************************************************************************************************
 200  4DCD              ; function gets slot and subslot data for specific page
 201  4DCD              ; input A=page (0, 1 or 2)
 202  4DCD              ; output B = 0A8H register value
 203  4DCD              ; output D = 0 is no subslots, 1 if yes
 204  4DCD              ; output C = 0A8H value when page 3 slot equals to requested page slot
 205  4DCD              ; output E = subslot value if present
 206  4DCD              ; modifies AF, BC, DE, HL
 207  4DCD              GET_PAGE_INFO:
 208  4DCD 6F               LD L, A
 209  4DCE C6 C1            ADD A, low (EXPTBL)
 210  4DD0 32 DA 4D         LD (GET_PAGE_INFO_L1+1), A
 211  4DD3 DB A8            IN A, (0A8H)
 212  4DD5 47               LD B, A
 213  4DD6 E6 3F            AND 03FH
 214  4DD8 4F               LD C, A
 215  4DD9              GET_PAGE_INFO_L1:
 216  4DD9 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 217  4DDC E6 80            AND 080H
 218  4DDE 28 1B            JR Z, GET_PAGE_INFO_L2
 219  4DE0                  ; expanded
 220  4DE0 2D               DEC L
 221  4DE1 FA 00 4E         JP M, GET_PAGE_INFO_L3
 222  4DE4 2D               DEC L
 223  4DE5 FA FE 4D         JP M, GET_PAGE_INFO_L4
 224  4DE8                  ; page 2
 225  4DE8 07               RLCA
 226  4DE9 07               RLCA
 227  4DEA              GET_PAGE_INFO_L5:
 228  4DEA E6 C0            AND 0C0H
 229  4DEC B1               OR C
 230  4DED D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 231  4DEF 4F               LD C, A
 232  4DF0 3A FF FF         LD A, (0FFFFH)
 233  4DF3 2F               CPL
 234  4DF4 5F               LD E, A
 235  4DF5 16 01            LD D, 1
 236  4DF7 78               LD A, B ; return stack
 237  4DF8 D3 A8            OUT (0A8H), A
 238  4DFA C9               RET
 239  4DFB              GET_PAGE_INFO_L2:
 240  4DFB                  ; not expanded
 241  4DFB 16 00            LD D, 0
 242  4DFD C9               RET
 243  4DFE              GET_PAGE_INFO_L4:
 244  4DFE                  ; page 1
 245  4DFE 0F               RRCA
 246  4DFF 0F               RRCA
 247  4E00              GET_PAGE_INFO_L3:
 248  4E00                  ; page 0
 249  4E00 0F               RRCA
 250  4E01 0F               RRCA
 251  4E02 18 E6            JR GET_PAGE_INFO_L5
 252  4E04              ; ****************************************************************************************************
 253  4E04
 254  4E04              ; ****************************************************************************************************
 255  4E04              ; function returns original slot and subslot info
 256  4E04              ; input B = 0A8H register value
 257  4E04              ; input D = 0 is no subslots, 1 if yes
 258  4E04              ; input C = 0A8H value when page 3 slot equals to requested page slot
 259  4E04              ; input E = subslot value if present
 260  4E04              ; modifies AF
 261  4E04              RESTORE_PAGE_INFO:
 262  4E04 7A               LD A, D
 263  4E05 B7               OR A
 264  4E06 28 07            JR Z, RESTORE_PAGE_INFO_L1
 265  4E08 79               LD A, C
 266  4E09 D3 A8            OUT (0A8H), A
 267  4E0B 7B               LD A, E
 268  4E0C 32 FF FF         LD (0FFFFH), A
 269  4E0F              RESTORE_PAGE_INFO_L1:
 270  4E0F 78               LD A, B
 271  4E10 D3 A8            OUT (0A8H), A
 272  4E12 C9               RET
 273  4E13              ; ****************************************************************************************************
 274  4E13
 275  4E13              ; *******************************************************************************************************
 276  4E13              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 277  4E13              ; INPUT:  A = SLOT ID: EXXXSSPP
 278  4E13              ; E = EXPANDED FLAG
 279  4E13              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 280  4E13              ; PP = PRIMARY SLOT NUMBER
 281  4E13              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 282  4E13              ; CHANGES: AF, BC, DE
 283  4E13
 284  4E13              LOCAL_ENASLT:
 285  4E13 CD 33 4E         CALL L0353
 286  4E16 FA 20 4E         JP M, L0340
 287  4E19 DB A8            IN A, (0A8H)
 288  4E1B A1               AND C
 289  4E1C B0               OR B
 290  4E1D D3 A8            OUT (0A8H), A
 291  4E1F C9               RET
 292  4E20              L0340:
 293  4E20 E5               PUSH HL
 294  4E21 CD 58 4E         CALL L0378
 295  4E24 4F               LD C, A
 296  4E25 06 00            LD B, 0
 297  4E27 7D               LD A, L
 298  4E28 A4               AND H
 299  4E29 B2               OR D
 300  4E2A 21 C5 FC         LD HL, 0FCC5H
 301  4E2D 09               ADD HL, BC
 302  4E2E 77               LD (HL), A
 303  4E2F E1               POP HL
 304  4E30 79               LD A, C
 305  4E31 18 E0            JR LOCAL_ENASLT
 306  4E33              L0353:
 307  4E33 F3               DI
 308  4E34 F5               PUSH AF
 309  4E35 7C               LD A, H
 310  4E36 07               RLCA
 311  4E37 07               RLCA
 312  4E38 E6 03            AND 3
 313  4E3A 5F               LD E, A
 314  4E3B 3E C0            LD A, 0C0H
 315  4E3D              L035D:
 316  4E3D 07               RLCA
 317  4E3E 07               RLCA
 318  4E3F 1D               DEC E
 319  4E40 F2 3D 4E         JP P, L035D
 320  4E43 5F               LD E, A
 321  4E44 2F               CPL
 322  4E45 4F               LD C, A
 323  4E46 F1               POP AF
 324  4E47 F5               PUSH AF
 325  4E48 E6 03            AND 3
 326  4E4A 3C               INC A
 327  4E4B 47               LD B, A
 328  4E4C 3E AB            LD A, 0ABH
 329  4E4E              L036E:
 330  4E4E C6 55            ADD A, 055H
 331  4E50 10 FC            DJNZ L036E
 332  4E52 57               LD D, A
 333  4E53 A3               AND E
 334  4E54 47               LD B, A
 335  4E55 F1               POP AF
 336  4E56 A7               AND A
 337  4E57 C9               RET
 338  4E58              L0378:
 339  4E58 F5               PUSH AF
 340  4E59 7A               LD A, D
 341  4E5A E6 C0            AND 0C0H
 342  4E5C 4F               LD C, A
 343  4E5D F1               POP AF
 344  4E5E F5               PUSH AF
 345  4E5F 57               LD D, A
 346  4E60 DB A8            IN A, (0A8H)
 347  4E62 47               LD B, A
 348  4E63 E6 3F            AND 03FH
 349  4E65 B1               OR C
 350  4E66 D3 A8            OUT (0A8H), A
 351  4E68 7A               LD A, D
 352  4E69 0F               RRCA
 353  4E6A 0F               RRCA
 354  4E6B E6 03            AND 3
 355  4E6D 57               LD D, A
 356  4E6E 3E AB            LD A, 0ABH
 357  4E70              L0390:
 358  4E70 C6 55            ADD A, 055H
 359  4E72 15               DEC D
 360  4E73 F2 70 4E         JP P, L0390
 361  4E76 A3               AND E
 362  4E77 57               LD D, A
 363  4E78 7B               LD A, E
 364  4E79 2F               CPL
 365  4E7A 67               LD H, A
 366  4E7B 3A FF FF         LD A, (0FFFFH)
 367  4E7E 2F               CPL
 368  4E7F 6F               LD L, A
 369  4E80 A4               AND H
 370  4E81 B2               OR D
 371  4E82 32 FF FF         LD (0FFFFH), A
 372  4E85 78               LD A, B
 373  4E86 D3 A8            OUT (0A8H), A
 374  4E88 F1               POP AF
 375  4E89 E6 03            AND 3
 376  4E8B C9               RET
 377  4E8C              ; *******************************************************************************************************
 378  4E8C
 379  4E8C              ; *******************************************************************************************************
 380  4E8C              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
 381  4E8C              ; struct {
 382  4E8C              ; DW y
 383  4E8C              ; DW x
 384  4E8C              ; DW pattern (0-31)
 385  4E8C              ; DW color
 386  4E8C              ; } [32]
 387  4E8C              ; will hide sprites whose location is outside of visible area
 388  4E8C              ; works in screen 1 and 2
 389  4E8C              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
 390  4E8C              ; modifies AF, AF', BC, DE, HL
 391  4E8C              SPRATR_UPDATE:
 392  4E8C              	; check if initialized
 393  4E8C 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
 394  4E8F B7           	OR A
 395  4E90 C8           	RET Z
 396  4E91              	; check if update requested
 397  4E91 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 398  4E94 7E           	LD A, (HL)
 399  4E95 B7           	OR A
 400  4E96 C8           	RET Z
 401  4E97              	; check screen mode
 402  4E97 3A AF FC     	LD A, (SCRMOD)
 403  4E9A 3D           	DEC A
 404  4E9B 28 02        	JR Z, .L0 ; screen 1
 405  4E9D 3D           	DEC A
 406  4E9E C0           	RET NZ ; not screen 2
 407  4E9F              .L0:
 408  4E9F 06 20        	LD B, 32 ; sprite number
 409  4EA1 0E 98        	LD C, #98 ; register for vpd data output
 410  4EA3              	; set VDP address
 411  4EA3 2A 28 F9     	LD HL, (ATRBAS)
 412  4EA6 3A FD 4C     	LD A, (FLICKER)
 413  4EA9 5F           	LD E, A
 414  4EAA 08           	EX AF, AF'
 415  4EAB 7B           	LD A, E
 416  4EAC 87           	ADD A, A
 417  4EAD 87           	ADD A, A
 418  4EAE 16 00        	LD D, 0
 419  4EB0 5F           	LD E, A
 420  4EB1 19           	ADD HL, DE
 421  4EB2 CD C2 4D     	CALL SETWRT_LOCAL
 422  4EB5 ED 73 FB 4C  	LD (TMPSP), SP
 423  4EB9 ED 7B F9 4C  	LD SP, (SPRATR_DATA)
 424  4EBD
 425  4EBD              .LOOP:
 426  4EBD E1           	POP HL
 427  4EBE 24           	INC H
 428  4EBF 28 0D        	JR Z, .L1 ; negative number above -256
 429  4EC1 25           	DEC H
 430  4EC2 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
 431  4EC4 7D           	LD A, L
 432  4EC5 FE C0        	CP 192
 433  4EC7 30 10        	JR NC, .OUT3
 434  4EC9 3D           	DEC A ; due to VDP rule that top of screen is -1
 435  4ECA 57           	LD D, A
 436  4ECB C3 E9 4E     	JP .X
 437  4ECE              .L1:
 438  4ECE 7D           	LD A, L
 439  4ECF C6 10        	ADD 16
 440  4ED1 FA D9 4E     	JP M, .OUT3 ; below -16
 441  4ED4 2D           	DEC L ; due to VDP rule that top of screen is -1
 442  4ED5 55           	LD D, L
 443  4ED6 C3 E9 4E     	JP .X
 444  4ED9              .OUT3:
 445  4ED9 E1           	POP HL ; skip x value
 446  4EDA              .OUT2:
 447  4EDA E1           	POP HL ; skip pattern
 448  4EDB E1           	POP HL ; skip color
 449  4EDC 3E D1        	LD A, #D1
 450  4EDE D3 98        	OUT (#98), A ; sprite hidden
 451  4EE0 D3 98        	OUT (#98), A ; value unimportant
 452  4EE2 D3 98        	OUT (#98), A ; value unimportant
 453  4EE4 D3 98        	OUT (#98), A ; value unimportant
 454  4EE6 C3 0D 4F     	JP .NEXT
 455  4EE9              .X:
 456  4EE9 E1           	POP HL
 457  4EEA 24           	INC H
 458  4EEB 28 08        	JR Z, .L2
 459  4EED 25           	DEC H
 460  4EEE 20 EA        	JR NZ, .OUT2
 461  4EF0 1E 00        	LD E, 0 ; EC bit
 462  4EF2 C3 FE 4E     	JP .XY
 463  4EF5              .L2:
 464  4EF5 7D           	LD A, L
 465  4EF6 C6 20        	ADD 32
 466  4EF8 FA DA 4E     	JP M, .OUT2
 467  4EFB 6F           	LD L, A
 468  4EFC 1E 80        	LD E, #80
 469  4EFE              .XY:
 470  4EFE ED 51        	OUT (C), D
 471  4F00 ED 69        	OUT (C), L
 472  4F02 E1           	POP HL ; pattern
 473  4F03 7D           	LD A, L
 474  4F04 87           	ADD A, A
 475  4F05 87           	ADD A, A ; needs to go at 4x
 476  4F06 D3 98        	OUT (#98), A
 477  4F08 E1           	POP HL ; color
 478  4F09 7D           	LD A, L
 479  4F0A B3           	OR E
 480  4F0B D3 98        	OUT (#98), A
 481  4F0D              .NEXT:
 482  4F0D 08           	EX AF, AF'
 483  4F0E 3C           	INC A
 484  4F0F E6 1F        	AND 31
 485  4F11 C2 25 4F     	JP NZ, .NEXT2
 486  4F14 08           	EX AF, AF'
 487  4F15 2A 28 F9     	LD HL, (ATRBAS)
 488  4F18              	; CALL SETWRT_LOCAL not allowed as SP modified
 489  4F18 7D           	LD	A, L
 490  4F19 D3 99        	OUT	(099H), A
 491  4F1B 7C           	LD	A, H
 492  4F1C E6 3F        	AND	03FH
 493  4F1E F6 40        	OR	040H
 494  4F20 D3 99        	OUT	(099H), A
 495  4F22 C3 26 4F     	JP .NEXT3
 496  4F25              .NEXT2:
 497  4F25 08           	EX AF, AF'
 498  4F26              .NEXT3:
 499  4F26 10 95        	DJNZ .LOOP
 500  4F28 08           	EX AF, AF'
 501  4F29 3C           	INC A
 502  4F2A 32 FD 4C     	LD (FLICKER), A
 503  4F2D
 504  4F2D ED 7B FB 4C  	LD SP, (TMPSP)
 505  4F31 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 506  4F34 36 00        	LD (HL), 0 ; zero out update flag
 507  4F36 C9           	RET
 508  4F37              ; *******************************************************************************************************
 509  4F37
 510  4F37              ; General BASIC CALL-instruction handler
 511  4F37              CALLHAND:
 512  4F37 E5           	PUSH HL
 513  4F38 21 FE 4C     	LD	HL, CMDS ; pointer table based on starting letter
 514  4F3B 3A 89 FD         LD A, (PROCNM)
 515  4F3E D6 41            SUB 'A'
 516  4F40 87               ADD A, A
 517  4F41 16 00            LD D, 0
 518  4F43 5F               LD E, A
 519  4F44 19               ADD HL, DE
 520  4F45 5E               LD E, (HL)
 521  4F46 23               INC HL
 522  4F47 56               LD D, (HL)
 523  4F48 7A               LD A, D
 524  4F49 B3               OR E
 525  4F4A 28 24            JR Z, .CMDNOTRECOGNIZED
 526  4F4C EB               EX DE, HL
 527  4F4D              .CHKCMD:
 528  4F4D 11 89 FD     	LD	DE, PROCNM
 529  4F50 1A           .LOOP:	LD	A,(DE)
 530  4F51 BE           	CP	(HL)
 531  4F52 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 532  4F54 13           	INC	DE
 533  4F55 23           	INC	HL
 534  4F56 A7           	AND	A
 535  4F57 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 536  4F59 5E           	LD	E,(HL)
 537  4F5A 23           	INC	HL
 538  4F5B 56           	LD	D,(HL)
 539  4F5C E1           	POP	HL		; routine address
 540  4F5D CD E3 4F     	CALL	GETPREVCHAR
 541  4F60 CD 72 4F     	CALL	.CALLDE		; Call routine
 542  4F63 A7           	AND	A
 543  4F64 C9           	RET
 544  4F65
 545  4F65              .TONEXTCMD:
 546  4F65 0E FF        	LD	C,0FFH
 547  4F67 AF           	XOR	A
 548  4F68 ED B1        	CPIR			; Skip to end of instruction name
 549  4F6A 23           	INC	HL
 550  4F6B 23           	INC	HL		; Skip address
 551  4F6C BE           	CP	(HL)
 552  4F6D 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 553  4F6F E1           	POP	HL
 554  4F70              .CMDNOTRECOGNIZED:
 555  4F70 37               SCF
 556  4F71 C9           	RET
 557  4F72
 558  4F72              .CALLDE:
 559  4F72 D5           	PUSH	DE
 560  4F73 C9           	RET
 561  4F74
 562  4F74              ;---------------------------
 563  4F74
 564  4F74              ;---------------------------
 565  4F74              UPRINT:
 566  4F74 CD B8 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 567  4F77 E5           	PUSH	HL
 568  4F78 CD AE 4F             CALL    GETSTRPNT
 569  4F7B              .LOOP
 570  4F7B 7E                   LD      A,(HL)
 571  4F7C CD 88 4F             CALL    .UCASE
 572  4F7F CD A2 00             CALL    CHPUT  ;Print
 573  4F82 23                   INC     HL
 574  4F83 10 F6                DJNZ    .LOOP
 575  4F85
 576  4F85 E1           	POP	HL
 577  4F86 B7           	OR      A
 578  4F87 C9           	RET
 579  4F88
 580  4F88              .UCASE:
 581  4F88 FE 61                CP      "a"
 582  4F8A D8                   RET     C
 583  4F8B FE 7B                CP      "z"+1
 584  4F8D D0                   RET     NC
 585  4F8E E6 DF                AND     %11011111
 586  4F90 C9                   RET
 587  4F91              ;---------------------------
 588  4F91              LPRINT:
 589  4F91 CD B8 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 590  4F94 E5           	PUSH	HL
 591  4F95 CD AE 4F             CALL    GETSTRPNT
 592  4F98              .LOOP
 593  4F98 7E                   LD      A,(HL)
 594  4F99 CD A5 4F             CALL    .LCASE
 595  4F9C CD A2 00             CALL    CHPUT  ;Print
 596  4F9F 23                   INC     HL
 597  4FA0 10 F6                DJNZ    .LOOP
 598  4FA2
 599  4FA2 E1           	POP	HL
 600  4FA3 B7           	OR      A
 601  4FA4 C9           	RET
 602  4FA5
 603  4FA5              .LCASE:
 604  4FA5 FE 41                CP      "A"
 605  4FA7 D8                   RET     C
 606  4FA8 FE 5B                CP      "Z"+1
 607  4FAA D0                   RET     NC
 608  4FAB F6 20                OR      %00100000
 609  4FAD C9                   RET
 610  4FAE              ;---------------------------
 611  4FAE
 612  4FAE              GETSTRPNT:
 613  4FAE              ; OUT:
 614  4FAE              ; HL = String Address
 615  4FAE              ; B  = Lenght
 616  4FAE
 617  4FAE 2A F8 F7             LD      HL,(USR)
 618  4FB1 46                   LD      B,(HL)
 619  4FB2 23                   INC     HL
 620  4FB3 5E                   LD      E,(HL)
 621  4FB4 23                   INC     HL
 622  4FB5 56                   LD      D,(HL)
 623  4FB6 EB                   EX      DE,HL
 624  4FB7 C9                   RET
 625  4FB8
 626  4FB8              EVALTXTPARAM:
 627  4FB8 CD D9 4F     	CALL	CHKCHAR
 628  4FBB 28           	DEFB	"("             ; Check for (
 629  4FBC DD 21 64 4C  	LD	IX,FRMEVL
 630  4FC0 CD 59 01     	CALL	CALBAS		; Evaluate expression
 631  4FC3 3A 63 F6             LD      A,(VALTYP)
 632  4FC6 FE 03                CP      3               ; Text type?
 633  4FC8 C2 EB 4F             JP      NZ,TYPE_MISMATCH
 634  4FCB E5                   PUSH	HL
 635  4FCC DD 21 D0 67          LD	IX,FRESTR         ; Free the temporary string
 636  4FD0 CD 59 01             CALL	CALBAS
 637  4FD3 E1                   POP	HL
 638  4FD4 CD D9 4F     	CALL	CHKCHAR
 639  4FD7 29           	DEFB	")"             ; Check for )
 640  4FD8 C9                   RET
 641  4FD9
 642  4FD9
 643  4FD9              CHKCHAR:
 644  4FD9 CD E3 4F     	CALL	GETPREVCHAR	; Get previous basic char
 645  4FDC E3           	EX	(SP),HL
 646  4FDD BE           	CP	(HL) 	        ; Check if good char
 647  4FDE 20 0F        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 648  4FE0 23           	INC	HL
 649  4FE1 E3           	EX	(SP),HL
 650  4FE2 23           	INC	HL		; Get next basic char
 651  4FE3
 652  4FE3              GETPREVCHAR:
 653  4FE3 2B           	DEC	HL
 654  4FE4 DD 21 66 46  	LD	IX,CHRGTR
 655  4FE8 C3 59 01     	JP      CALBAS
 656  4FEB
 657  4FEB
 658  4FEB              TYPE_MISMATCH:
 659  4FEB 1E 0D            LD E, 13 ; Type mismatch
 660  4FED 18 02            JR THROW_ERROR
 661  4FEF
 662  4FEF              SYNTAX_ERROR:
 663  4FEF 1E 02            LD E, 2 ; Syntax error
 664  4FF1              THROW_ERROR:
 665  4FF1 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 666  4FF5 C3 59 01     	JP	CALBAS
 667  4FF8
 668  4FF8              ;---------------------------
 669  4FF8
 670  4FF8              ; *******************************************************************************************************
 671  4FF8              ; function to handle CALL MEMCPY basic extension
 672  4FF8              ; _MEMCPY ( INT source,
 673  4FF8              ;			INT destination,
 674  4FF8              ;			INT count,
 675  4FF8              ;			BYTE enable_ram, >0 = true
 676  4FF8              ;			BYTE wait_vsync) >0 = treu
 677  4FF8              ; enable_ram will put ram in page 0 also, page 1 is already there
 678  4FF8              ; wait_vsync will issue HALT before copying
 679  4FF8              MEMCPY:
 680  4FF8              	; opening (
 681  4FF8 CD D9 4F     	CALL CHKCHAR
 682  4FFB 28           	DB '('
 683  4FFC              	; get source address
 684  4FFC DD 21 2F 54  	LD IX, FRMQNT
 685  5000 CD 59 01     	CALL CALBAS
 686  5003 D5           	PUSH DE
 687  5004              	; comma
 688  5004 CD D9 4F     	CALL CHKCHAR
 689  5007 2C           	DB ','
 690  5008              	; get destination address
 691  5008 DD 21 2F 54  	LD IX, FRMQNT
 692  500C CD 59 01     	CALL CALBAS
 693  500F D5           	PUSH DE
 694  5010              	; comma
 695  5010 CD D9 4F     	CALL CHKCHAR
 696  5013 2C           	DB ','
 697  5014              	; get length
 698  5014 DD 21 2F 54  	LD IX, FRMQNT
 699  5018 CD 59 01     	CALL CALBAS
 700  501B D5           	PUSH DE
 701  501C              	; comma
 702  501C CD D9 4F     	CALL CHKCHAR
 703  501F 2C           	DB ','
 704  5020              	; get ROM/RAM
 705  5020 DD 21 1C 52  	LD IX, GETBYT
 706  5024 CD 59 01     	CALL CALBAS
 707  5027 F5           	PUSH AF
 708  5028              	; comma
 709  5028 CD D9 4F     	CALL CHKCHAR
 710  502B 2C           	DB ','
 711  502C              	; get vsync wait
 712  502C DD 21 1C 52  	LD IX, GETBYT
 713  5030 CD 59 01     	CALL CALBAS
 714  5033 F5           	PUSH AF
 715  5034              	; ending )
 716  5034 CD D9 4F     	CALL CHKCHAR
 717  5037 29           	DB ')'
 718  5038
 719  5038 FB               EI
 720  5039              	; save position
 721  5039 E5           	PUSH HL
 722  503A DD E1        	POP IX
 723  503C
 724  503C              	; syntax ok
 725  503C              	; wait for vsync if needed
 726  503C F1           	POP AF
 727  503D B7           	OR A
 728  503E 28 01        	JR Z, .L1
 729  5040 76           	HALT
 730  5041
 731  5041              .L1:
 732  5041              	; enable RAM in page 0 if needed
 733  5041 F1           	POP AF
 734  5042 B7           	OR A
 735  5043              	; pop LDIR parameters and store away for later
 736  5043 C1           	POP BC
 737  5044 D1           	POP DE
 738  5045 E1           	POP HL
 739  5046 28 1A        	JR Z, .L2
 740  5048 D9           	EXX
 741  5049 AF               XOR A
 742  504A CD CD 4D         CALL GET_PAGE_INFO
 743  504D C5               PUSH BC
 744  504E D5               PUSH DE
 745  504F 3A 41 F3         LD A, (RAMAD0)
 746  5052 26 00            LD H, 0
 747  5054 F3           	DI
 748  5055 CD 13 4E         CALL LOCAL_ENASLT
 749  5058 D9           	EXX
 750  5059 ED B0        	LDIR
 751  505B D1               POP DE
 752  505C C1               POP BC
 753  505D CD 04 4E         CALL RESTORE_PAGE_INFO
 754  5060 18 02        	JR .L3
 755  5062
 756  5062              .L2:
 757  5062 ED B0        	LDIR
 758  5064
 759  5064              .L3:
 760  5064 DD E5        	PUSH IX
 761  5066 E1           	POP HL
 762  5067 C9           	RET
 763  5068              ; *******************************************************************************************************
 764  5068
 765  5068              ; *******************************************************************************************************
 766  5068              ; function to handle CALL FILVRM basic extension
 767  5068              ; FILVRM ( INT offset,
 768  5068              ;		   INT count,
 769  5068              ;		   BYTE value,
 770  5068              ;		   BYTE wait_vsync) >0 = true
 771  5068              ; wait_vsync will issue HALT before copying
 772  5068              FILVRM:
 773  5068              	; opening (
 774  5068 CD D9 4F     	CALL CHKCHAR
 775  506B 28           	DB '('
 776  506C              	; get offset address
 777  506C DD 21 2F 54  	LD IX, FRMQNT
 778  5070 CD 59 01     	CALL CALBAS
 779  5073 D5           	PUSH DE
 780  5074              	; comma
 781  5074 CD D9 4F     	CALL CHKCHAR
 782  5077 2C           	DB ','
 783  5078              	; get count
 784  5078 DD 21 2F 54  	LD IX, FRMQNT
 785  507C CD 59 01     	CALL CALBAS
 786  507F D5           	PUSH DE
 787  5080              	; comma
 788  5080 CD D9 4F     	CALL CHKCHAR
 789  5083 2C           	DB ','
 790  5084              	; get value
 791  5084 DD 21 1C 52  	LD IX, GETBYT
 792  5088 CD 59 01     	CALL CALBAS
 793  508B F5           	PUSH AF
 794  508C              	; comma
 795  508C CD D9 4F     	CALL CHKCHAR
 796  508F 2C           	DB ','
 797  5090              	; get vsync wait
 798  5090 DD 21 1C 52  	LD IX, GETBYT
 799  5094 CD 59 01     	CALL CALBAS
 800  5097 F5           	PUSH AF
 801  5098              	; ending )
 802  5098 CD D9 4F     	CALL CHKCHAR
 803  509B 29           	DB ')'
 804  509C
 805  509C FB               EI
 806  509D              	; save position
 807  509D E5           	PUSH HL
 808  509E DD E1        	POP IX
 809  50A0
 810  50A0              	; syntax ok
 811  50A0              	; wait for vsync if needed
 812  50A0 F1           	POP AF
 813  50A1 B7           	OR A
 814  50A2 28 01        	JR Z, .L1
 815  50A4 76           	HALT
 816  50A5
 817  50A5              .L1:
 818  50A5 F1               POP AF ; value
 819  50A6 C1               POP BC ; count
 820  50A7 E1               POP HL ; offset
 821  50A8 CD 56 00         CALL BIOS_FILVRM
 822  50AB
 823  50AB              .L3:
 824  50AB DD E5        	PUSH IX
 825  50AD E1           	POP HL
 826  50AE C9           	RET
 827  50AF              ; *******************************************************************************************************
 828  50AF
 829  50AF              ; *******************************************************************************************************
 830  50AF              ; function to handle CALL FILRAM basic extension
 831  50AF              ; FILRAM ( INT start address,
 832  50AF              ;		   INT count,
 833  50AF              ;		   BYTE value,
 834  50AF              ;	   	   BYTE enable_ram, >0 = true
 835  50AF              ;		   BYTE wait_vsync) >0 = true
 836  50AF              ; enable_ram will put ram in page 0 also, page 1 is already there
 837  50AF              ; wait_vsync will issue HALT before copying
 838  50AF              FILRAM:
 839  50AF              	; opening (
 840  50AF CD D9 4F     	CALL CHKCHAR
 841  50B2 28           	DB '('
 842  50B3              	; get start address
 843  50B3 DD 21 2F 54  	LD IX, FRMQNT
 844  50B7 CD 59 01     	CALL CALBAS
 845  50BA D5           	PUSH DE
 846  50BB              	; comma
 847  50BB CD D9 4F     	CALL CHKCHAR
 848  50BE 2C           	DB ','
 849  50BF              	; get count
 850  50BF DD 21 2F 54  	LD IX, FRMQNT
 851  50C3 CD 59 01     	CALL CALBAS
 852  50C6 D5           	PUSH DE
 853  50C7              	; comma
 854  50C7 CD D9 4F     	CALL CHKCHAR
 855  50CA 2C           	DB ','
 856  50CB              	; get value
 857  50CB DD 21 1C 52  	LD IX, GETBYT
 858  50CF CD 59 01     	CALL CALBAS
 859  50D2 F5           	PUSH AF
 860  50D3              	; comma
 861  50D3 CD D9 4F     	CALL CHKCHAR
 862  50D6 2C           	DB ','
 863  50D7              	; get ROM/RAM
 864  50D7 DD 21 1C 52  	LD IX, GETBYT
 865  50DB CD 59 01     	CALL CALBAS
 866  50DE F5           	PUSH AF
 867  50DF              	; comma
 868  50DF CD D9 4F     	CALL CHKCHAR
 869  50E2 2C           	DB ','
 870  50E3              	; get vsync wait
 871  50E3 DD 21 1C 52  	LD IX, GETBYT
 872  50E7 CD 59 01     	CALL CALBAS
 873  50EA F5           	PUSH AF
 874  50EB              	; ending )
 875  50EB CD D9 4F     	CALL CHKCHAR
 876  50EE 29           	DB ')'
 877  50EF
 878  50EF FB               EI
 879  50F0              	; save position
 880  50F0 E5           	PUSH HL
 881  50F1 DD E1        	POP IX
 882  50F3
 883  50F3              	; syntax ok
 884  50F3              	; wait for vsync if needed
 885  50F3 F1           	POP AF
 886  50F4 B7           	OR A
 887  50F5 28 01        	JR Z, .L1
 888  50F7 76           	HALT
 889  50F8
 890  50F8              .L1:
 891  50F8              	; enable RAM in page 0 if needed
 892  50F8 F1           	POP AF
 893  50F9 B7           	OR A
 894  50FA              	; pop LDIR parameters and store away for later
 895  50FA D1           	POP DE ; actually AF
 896  50FB C1           	POP BC ; count
 897  50FC E1           	POP HL ; start address
 898  50FD 28 1B        	JR Z, .L2
 899  50FF D9           	EXX
 900  5100 AF               XOR A
 901  5101 CD CD 4D         CALL GET_PAGE_INFO
 902  5104 C5               PUSH BC
 903  5105 D5               PUSH DE
 904  5106 3A 41 F3         LD A, (RAMAD0)
 905  5109 26 00            LD H, 0
 906  510B F3           	DI
 907  510C CD 13 4E         CALL LOCAL_ENASLT
 908  510F D9           	EXX
 909  5110 CD 21 51     	CALL .FILLVALUE
 910  5113 D1               POP DE
 911  5114 C1               POP BC
 912  5115 CD 04 4E         CALL RESTORE_PAGE_INFO
 913  5118 18 03        	JR .L3
 914  511A
 915  511A              .L2:
 916  511A CD 21 51     	CALL .FILLVALUE
 917  511D
 918  511D              .L3:
 919  511D DD E5        	PUSH IX
 920  511F E1           	POP HL
 921  5120 C9           	RET
 922  5121
 923  5121              .FILLVALUE:
 924  5121 72               LD (HL), D
 925  5122 54               LD D, H
 926  5123 5D               LD E, L
 927  5124 13               INC DE
 928  5125 0B               DEC BC
 929  5126 ED B0            LDIR
 930  5128 C9               RET
 931  5129              ; *******************************************************************************************************
 932  5129
 933  5129              ; *******************************************************************************************************
 934  5129              ; function to handle CALL GENCAL basic extension
 935  5129              ; GENCAL ( INT fn_addr, = address of the function to call
 936  5129              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 937  5129              ; output values of reristers will also be stored at reg_list_ptr
 938  5129              GENCAL_VAR_SP:
 939  5129 00 00            DW 0
 940  512B              GENCAL_VAR_SP2:
 941  512B 00 00            DW 0
 942  512D              GENCAL:
 943  512D              	; opening (
 944  512D CD D9 4F     	CALL CHKCHAR
 945  5130 28           	DB '('
 946  5131              	; get function address
 947  5131 DD 21 2F 54  	LD IX, FRMQNT
 948  5135 CD 59 01     	CALL CALBAS
 949  5138 D5           	PUSH DE
 950  5139              	; comma
 951  5139 CD D9 4F     	CALL CHKCHAR
 952  513C 2C           	DB ','
 953  513D              	; get pointer to register list
 954  513D DD 21 2F 54  	LD IX, FRMQNT
 955  5141 CD 59 01     	CALL CALBAS
 956  5144 D5           	PUSH DE
 957  5145              	; ending )
 958  5145 CD D9 4F     	CALL CHKCHAR
 959  5148 29           	DB ')'
 960  5149
 961  5149              	; save BASIC token position
 962  5149 E5           	PUSH HL
 963  514A D9               EXX
 964  514B E1           	POP HL ; HL'=next basic token
 965  514C D9               EXX
 966  514D
 967  514D E1               POP HL ; get pointer to register values
 968  514E ED 73 29 51      LD (GENCAL_VAR_SP), SP
 969  5152 F3               DI
 970  5153 F9               LD SP, HL
 971  5154 F1               POP AF
 972  5155 C1               POP BC
 973  5156 D1               POP DE
 974  5157 E1               POP HL
 975  5158 DD E1            POP IX
 976  515A FD E1            POP IY
 977  515C D9               EXX
 978  515D ED 73 2B 51      LD (GENCAL_VAR_SP2), SP
 979  5161 ED 7B 29 51      LD SP, (GENCAL_VAR_SP)
 980  5165 FB               EI
 981  5166 D1               POP DE ; get function to call
 982  5167 E5               PUSH HL
 983  5168 CD 83 51         CALL .EXXDECALL
 984  516B F3               DI
 985  516C ED 73 29 51      LD (GENCAL_VAR_SP), SP
 986  5170 ED 7B 2B 51      LD SP, (GENCAL_VAR_SP2)
 987  5174 FD E5            PUSH IY
 988  5176 DD E5            PUSH IX
 989  5178 E5               PUSH HL
 990  5179 D5               PUSH DE
 991  517A C5               PUSH BC
 992  517B F5               PUSH AF
 993  517C ED 7B 29 51      LD SP, (GENCAL_VAR_SP)
 994  5180 FB               EI
 995  5181 E1               POP HL
 996  5182 C9           	RET
 997  5183
 998  5183              .EXXDECALL:
 999  5183 D5               PUSH DE
1000  5184 D9               EXX
1001  5185 C9               RET
1002  5186              ; *******************************************************************************************************
1003  5186
1004  5186              ; *******************************************************************************************************
1005  5186              ; function to handle CALL MEMVRM basic extension
1006  5186              ; copies from RAM to VRAM
1007  5186              ; _MEMVRM ( INT source,
1008  5186              ;			INT destination,
1009  5186              ;			INT count,
1010  5186              ;			BYTE enable_ram, >0 = true
1011  5186              ;			BYTE wait_vsync) >0 = treu
1012  5186              ; enable_ram will put ram in page 0 also, page 1 is already there
1013  5186              ; wait_vsync will issue HALT before copying
1014  5186              MEMVRM:
1015  5186              	; opening (
1016  5186 CD D9 4F     	CALL CHKCHAR
1017  5189 28           	DB '('
1018  518A              	; get source address
1019  518A DD 21 2F 54  	LD IX, FRMQNT
1020  518E CD 59 01     	CALL CALBAS
1021  5191 D5           	PUSH DE
1022  5192              	; comma
1023  5192 CD D9 4F     	CALL CHKCHAR
1024  5195 2C           	DB ','
1025  5196              	; get destination address
1026  5196 DD 21 2F 54  	LD IX, FRMQNT
1027  519A CD 59 01     	CALL CALBAS
1028  519D D5           	PUSH DE
1029  519E              	; comma
1030  519E CD D9 4F     	CALL CHKCHAR
1031  51A1 2C           	DB ','
1032  51A2              	; get length
1033  51A2 DD 21 2F 54  	LD IX, FRMQNT
1034  51A6 CD 59 01     	CALL CALBAS
1035  51A9 D5           	PUSH DE
1036  51AA              	; comma
1037  51AA CD D9 4F     	CALL CHKCHAR
1038  51AD 2C           	DB ','
1039  51AE              	; get ROM/RAM
1040  51AE DD 21 1C 52  	LD IX, GETBYT
1041  51B2 CD 59 01     	CALL CALBAS
1042  51B5 F5           	PUSH AF
1043  51B6              	; comma
1044  51B6 CD D9 4F     	CALL CHKCHAR
1045  51B9 2C           	DB ','
1046  51BA              	; get vsync wait
1047  51BA DD 21 1C 52  	LD IX, GETBYT
1048  51BE CD 59 01     	CALL CALBAS
1049  51C1 F5           	PUSH AF
1050  51C2              	; ending )
1051  51C2 CD D9 4F     	CALL CHKCHAR
1052  51C5 29           	DB ')'
1053  51C6
1054  51C6                  ; save position in BASIC text
1055  51C6 E5           	PUSH HL
1056  51C7 DD E1        	POP IX
1057  51C9
1058  51C9              	; syntax ok
1059  51C9              	; wait for vsync if needed
1060  51C9 F1           	POP AF
1061  51CA B7           	OR A
1062  51CB 28 03        	JR Z, .L1
1063  51CD FB               EI
1064  51CE 76           	HALT
1065  51CF F3               DI ; since interrupt can modify vram address
1066  51D0
1067  51D0              .L1:
1068  51D0              	; enable RAM in page 0 if needed
1069  51D0 F1           	POP AF
1070  51D1 B7           	OR A
1071  51D2              	; pop LDIR parameters and store away for later
1072  51D2 C1           	POP BC
1073  51D3 D1           	POP DE
1074  51D4 E1           	POP HL
1075  51D5 28 1A        	JR Z, .L2
1076  51D7 D9           	EXX
1077  51D8 AF               XOR A
1078  51D9 CD CD 4D         CALL GET_PAGE_INFO
1079  51DC C5               PUSH BC
1080  51DD D5               PUSH DE
1081  51DE 3A 41 F3         LD A, (RAMAD0)
1082  51E1 26 00            LD H, 0
1083  51E3 CD 13 4E         CALL LOCAL_ENASLT
1084  51E6 D9           	EXX
1085  51E7 CD F8 51     	CALL .LDIRVM
1086  51EA D1               POP DE
1087  51EB C1               POP BC
1088  51EC CD 04 4E         CALL RESTORE_PAGE_INFO
1089  51EF 18 03        	JR .L3
1090  51F1
1091  51F1              .L2:
1092  51F1 CD F8 51     	CALL .LDIRVM
1093  51F4
1094  51F4              .L3:
1095  51F4 DD E5        	PUSH IX
1096  51F6 E1           	POP HL
1097  51F7 C9           	RET
1098  51F8
1099  51F8              .LDIRVM:
1100  51F8 EB           	EX DE, HL
1101  51F9 CD C2 4D     	CALL SETWRT_LOCAL
1102  51FC EB           	EX DE, HL
1103  51FD
1104  51FD              .L4:
1105  51FD 7E               LD A, (HL)
1106  51FE D3 98            OUT (#98), A
1107  5200 23               INC HL
1108  5201 0B               DEC BC
1109  5202 79               LD A, C
1110  5203 B0               OR B
1111  5204 C2 FD 51         JP NZ, .L4
1112  5207 C9               RET
1113  5208              ; *******************************************************************************************************
1114  5208
1115  5208              ; *******************************************************************************************************
1116  5208              ; function to handle CALL VRMMEM basic extension
1117  5208              ; copies from RAM to VRAM
1118  5208              ; _VRMMEM ( INT source,
1119  5208              ;			INT destination,
1120  5208              ;			INT count,
1121  5208              ;			BYTE enable_ram, >0 = true
1122  5208              ;			BYTE wait_vsync) >0 = true
1123  5208              ; enable_ram will put ram in page 0 also, page 1 is already there
1124  5208              ; wait_vsync will issue HALT before copying
1125  5208              VRMMEM:
1126  5208              	; opening (
1127  5208 CD D9 4F     	CALL CHKCHAR
1128  520B 28           	DB '('
1129  520C              	; get source address
1130  520C DD 21 2F 54  	LD IX, FRMQNT
1131  5210 CD 59 01     	CALL CALBAS
1132  5213 D5           	PUSH DE
1133  5214              	; comma
1134  5214 CD D9 4F     	CALL CHKCHAR
1135  5217 2C           	DB ','
1136  5218              	; get destination address
1137  5218 DD 21 2F 54  	LD IX, FRMQNT
1138  521C CD 59 01     	CALL CALBAS
1139  521F D5           	PUSH DE
1140  5220              	; comma
1141  5220 CD D9 4F     	CALL CHKCHAR
1142  5223 2C           	DB ','
1143  5224              	; get length
1144  5224 DD 21 2F 54  	LD IX, FRMQNT
1145  5228 CD 59 01     	CALL CALBAS
1146  522B D5           	PUSH DE
1147  522C              	; comma
1148  522C CD D9 4F     	CALL CHKCHAR
1149  522F 2C           	DB ','
1150  5230              	; get ROM/RAM
1151  5230 DD 21 1C 52  	LD IX, GETBYT
1152  5234 CD 59 01     	CALL CALBAS
1153  5237 F5           	PUSH AF
1154  5238              	; comma
1155  5238 CD D9 4F     	CALL CHKCHAR
1156  523B 2C           	DB ','
1157  523C              	; get vsync wait
1158  523C DD 21 1C 52  	LD IX, GETBYT
1159  5240 CD 59 01     	CALL CALBAS
1160  5243 F5           	PUSH AF
1161  5244              	; ending )
1162  5244 CD D9 4F     	CALL CHKCHAR
1163  5247 29           	DB ')'
1164  5248
1165  5248                  ; save position in BASIC text
1166  5248 E5           	PUSH HL
1167  5249 DD E1        	POP IX
1168  524B
1169  524B              	; syntax ok
1170  524B              	; wait for vsync if needed
1171  524B F1           	POP AF
1172  524C B7           	OR A
1173  524D 28 03        	JR Z, .L1
1174  524F FB               EI
1175  5250 76           	HALT
1176  5251 F3               DI ; since interrupt can modify vram address
1177  5252
1178  5252              .L1:
1179  5252              	; enable RAM in page 0 if needed
1180  5252 F1           	POP AF
1181  5253 B7           	OR A
1182  5254              	; pop LDIR parameters and store away for later
1183  5254 C1           	POP BC
1184  5255 D1           	POP DE
1185  5256 E1           	POP HL
1186  5257 28 1A        	JR Z, .L2
1187  5259 D9           	EXX
1188  525A AF               XOR A
1189  525B CD CD 4D         CALL GET_PAGE_INFO
1190  525E C5               PUSH BC
1191  525F D5               PUSH DE
1192  5260 3A 41 F3         LD A, (RAMAD0)
1193  5263 26 00            LD H, 0
1194  5265 CD 13 4E         CALL LOCAL_ENASLT
1195  5268 D9           	EXX
1196  5269 CD 7A 52     	CALL .LDIRMV
1197  526C D1               POP DE
1198  526D C1               POP BC
1199  526E CD 04 4E         CALL RESTORE_PAGE_INFO
1200  5271 18 03        	JR .L3
1201  5273
1202  5273              .L2:
1203  5273 CD 7A 52     	CALL .LDIRMV
1204  5276
1205  5276              .L3:
1206  5276 DD E5        	PUSH IX
1207  5278 E1           	POP HL
1208  5279 C9           	RET
1209  527A
1210  527A              .LDIRMV:
1211  527A CD C2 4D     	CALL SETWRT_LOCAL
1212  527D              .L4:
1213  527D DB 98            IN A, (#98)
1214  527F 12           	LD (DE), A
1215  5280 13               INC DE
1216  5281 0B               DEC BC
1217  5282 79               LD A, C
1218  5283 B0               OR B
1219  5284 C2 7D 52         JP NZ, .L4
1220  5287 C9               RET
1221  5288              ; *******************************************************************************************************
1222  5288
1223  5288              ; *******************************************************************************************************
1224  5288              ; H.TIMI function
1225  5288              MBGE_HTIMI:
1226  5288               EXPORT MBGE_HTIMI
1227  5288 F5           	PUSH AF
1228  5289
1229  5289 CD 8C 4E     	CALL SPRATR_UPDATE
1230  528C
1231  528C 3A F5 4C     	LD A, (SOUND_ENABLED)
1232  528F B7           	OR A
1233  5290 28 2A        	JR Z, .EXIT
1234  5292
1235  5292              	; enable page 2
1236  5292 3E 02            LD A, 2
1237  5294 CD CD 4D         CALL GET_PAGE_INFO
1238  5297 C5               PUSH BC
1239  5298 D5               PUSH DE
1240  5299 3A 43 F3         LD A, (RAMAD2)
1241  529C 26 80            LD H, 080H
1242  529E CD 13 4E         CALL LOCAL_ENASLT
1243  52A1              	; enable page 0
1244  52A1 AF               XOR A
1245  52A2 CD CD 4D         CALL GET_PAGE_INFO
1246  52A5 C5               PUSH BC
1247  52A6 D5               PUSH DE
1248  52A7 3A 41 F3         LD A, (RAMAD0)
1249  52AA 26 00            LD H, 0
1250  52AC CD 13 4E         CALL LOCAL_ENASLT
1251  52AF
1252  52AF CD 31 42     	CALL PLY_AKG_PLAY
1253  52B2
1254  52B2              	; restore page 0
1255  52B2 D1               POP DE
1256  52B3 C1               POP BC
1257  52B4 CD 04 4E         CALL RESTORE_PAGE_INFO
1258  52B7              	; restore page 2
1259  52B7 D1               POP DE
1260  52B8 C1               POP BC
1261  52B9 CD 04 4E         CALL RESTORE_PAGE_INFO
1262  52BC
1263  52BC              .EXIT:
1264  52BC F1           	POP AF
1265  52BD C3 EE 4C     	JP ORIG.HTIMI
1266  52C0              ; *******************************************************************************************************
1267  52C0
1268  52C0              ; *******************************************************************************************************
1269  52C0              ; function to handle CALL SNDPLYINIT basic extension
1270  52C0              ; initializes sound player
1271  52C0              ; _SNDPLYINIT ( INT music_offset,
1272  52C0              ;				INT sfx_offset, can be -1 if no SFX
1273  52C0              ; will put ram in page 0 also, page 1 is already there
1274  52C0              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1275  52C0              SNDPLYINIT:
1276  52C0              	; opening (
1277  52C0 CD D9 4F     	CALL CHKCHAR
1278  52C3 28           	DB '('
1279  52C4              	; get music address
1280  52C4 DD 21 2F 54  	LD IX, FRMQNT
1281  52C8 CD 59 01     	CALL CALBAS
1282  52CB D5           	PUSH DE
1283  52CC              	; comma
1284  52CC CD D9 4F     	CALL CHKCHAR
1285  52CF 2C           	DB ','
1286  52D0              	; get sfx address
1287  52D0 DD 21 2F 54  	LD IX, FRMQNT
1288  52D4 CD 59 01     	CALL CALBAS
1289  52D7 D5           	PUSH DE
1290  52D8              	; ending )
1291  52D8 CD D9 4F     	CALL CHKCHAR
1292  52DB 29           	DB ')'
1293  52DC
1294  52DC                  ; save position in BASIC text
1295  52DC 44           	LD B, H
1296  52DD 4D           	LD C, L
1297  52DE
1298  52DE              	; pop LDIR parameters and store away for later
1299  52DE D1           	POP DE ; sfx address
1300  52DF E1           	POP HL ; music address
1301  52E0 C5           	PUSH BC ; basic text location
1302  52E1 D9           	EXX
1303  52E2 AF               XOR A
1304  52E3 CD CD 4D         CALL GET_PAGE_INFO
1305  52E6 C5               PUSH BC
1306  52E7 D5               PUSH DE
1307  52E8 3A 41 F3         LD A, (RAMAD0)
1308  52EB 26 00            LD H, 0
1309  52ED CD 13 4E         CALL LOCAL_ENASLT
1310  52F0 D9           	EXX
1311  52F1
1312  52F1 D5           	PUSH DE
1313  52F2 AF           	XOR A
1314  52F3              	; HL = music location
1315  52F3 CD 60 41     	CALL PLY_AKG_INIT
1316  52F6 3E 01        	LD A, 1
1317  52F8 32 F3 4C     	LD (MUSIC_INIT_STATUS), A
1318  52FB
1319  52FB E1           	POP HL
1320  52FC 23           	INC HL
1321  52FD 7D           	LD A, L
1322  52FE B4           	OR H
1323  52FF 28 09        	JR Z,.L1
1324  5301 2B           	DEC HL
1325  5302 CD 1B 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1326  5305 3E 01        	LD A, 1
1327  5307 32 F4 4C     	LD (SFX_INIT_STATUS), A
1328  530A              .L1:
1329  530A D1               POP DE
1330  530B C1               POP BC
1331  530C CD 04 4E         CALL RESTORE_PAGE_INFO
1332  530F
1333  530F E1           	POP HL
1334  5310 C9           	RET
1335  5311              ; *******************************************************************************************************
1336  5311
1337  5311              ; *******************************************************************************************************
1338  5311              ; function to handle CALL SNDPLYON basic extension
1339  5311              ; enables sound player
1340  5311              ; _SNDPLYON
1341  5311              ; sets SOUND_ENABLED variable to 1 if init call was done
1342  5311              ; if not throws out of data error
1343  5311              SNDPLYON:
1344  5311 3A F3 4C     	LD A, (MUSIC_INIT_STATUS)
1345  5314 B7           	OR A
1346  5315 20 05        	JR NZ, .L1
1347  5317              	; player not initialized, throw error
1348  5317 1E 04        	LD E, 04 ; Out of DATA
1349  5319 C3 F1 4F     	JP THROW_ERROR
1350  531C              .L1:
1351  531C 32 F5 4C     	LD (SOUND_ENABLED), A
1352  531F              	; disable key click
1353  531F AF           	XOR A
1354  5320 32 DB F3     	LD (CLIKSW), A
1355  5323 C9           	RET
1356  5324              ; *******************************************************************************************************
1357  5324
1358  5324              ; *******************************************************************************************************
1359  5324              ; function to handle CALL SNDPLYOFF basic extension
1360  5324              ; disables sound player
1361  5324              ; _SNDPLYOFF
1362  5324              ; sets SOUND_ENABLED variable to 0
1363  5324              ; calls AKG to stop music and SFX on all channels if initialized
1364  5324              SNDPLYOFF:
1365  5324 3A F5 4C     	LD A, (SOUND_ENABLED)
1366  5327 B7           	OR A
1367  5328 C8           	RET Z ; already stopped
1368  5329 AF           	XOR A
1369  532A 32 F5 4C     	LD (SOUND_ENABLED), A
1370  532D E5           	PUSH HL
1371  532E CD 1F 42     	CALL PLY_AKG_STOP
1372  5331 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1373  5334 B7           	OR A
1374  5335 28 0E        	JR Z, .EXIT ; SFX not in use
1375  5337 AF           	XOR A
1376  5338 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1377  533B 3E 01        	LD A, 1
1378  533D CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1379  5340 3E 02        	LD A, 2
1380  5342 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1381  5345              .EXIT:
1382  5345 E1           	POP HL
1383  5346 C9           	RET
1384  5347              ; *******************************************************************************************************
1385  5347
1386  5347              ; *******************************************************************************************************
1387  5347              ; function to handle CALL SNDSFX basic extension
1388  5347              ; plays a sound effect
1389  5347              ; _SNDSFX ( BYTE sfx_number, >0
1390  5347              ;			BYTE channel, = 0,1 or 2
1391  5347              ;			BYTE inverted_volume = 0-16, 0 being full volume
1392  5347              ; will put ram in page 0 also, page 1 is already there
1393  5347              ; if sound off throws illegal function call
1394  5347              ; if sfx not initialized, throws out of data
1395  5347              SNDSFX:
1396  5347              	; opening (
1397  5347 CD D9 4F     	CALL CHKCHAR
1398  534A 28           	DB '('
1399  534B              	; get sfx_number
1400  534B DD 21 1C 52  	LD IX, GETBYT
1401  534F CD 59 01     	CALL CALBAS
1402  5352 D5           	PUSH DE
1403  5353              	; comma
1404  5353 CD D9 4F     	CALL CHKCHAR
1405  5356 2C           	DB ','
1406  5357              	; get sfx address
1407  5357 DD 21 1C 52  	LD IX, GETBYT
1408  535B CD 59 01     	CALL CALBAS
1409  535E D5           	PUSH DE
1410  535F              	; comma
1411  535F CD D9 4F     	CALL CHKCHAR
1412  5362 2C           	DB ','
1413  5363              	; get inverted volume
1414  5363 DD 21 1C 52  	LD IX, GETBYT
1415  5367 CD 59 01     	CALL CALBAS
1416  536A D5           	PUSH DE
1417  536B              	; ending )
1418  536B CD D9 4F     	CALL CHKCHAR
1419  536E 29           	DB ')'
1420  536F
1421  536F 3A F5 4C     	LD A, (SOUND_ENABLED)
1422  5372 B7           	OR A
1423  5373 20 05        	JR NZ, .L1
1424  5375              	; sound disabled, throw illegal function call
1425  5375 1E 05        	LD E, 5
1426  5377 C3 F1 4F     	JP THROW_ERROR
1427  537A              .L1:
1428  537A 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1429  537D B7           	OR A
1430  537E 20 05        	JR NZ, .L2
1431  5380              	; sfx data not initialized, throw out of data
1432  5380 1E 04        	LD E, 4
1433  5382 C3 F1 4F     	JP THROW_ERROR
1434  5385              .L2:
1435  5385              	; pop  parameters and store away for later
1436  5385 D1           	POP DE ; inverted volume
1437  5386 43           	LD B, E
1438  5387 D1           	POP DE ; channel
1439  5388 4B           	LD C, E
1440  5389 D1           	POP DE
1441  538A 7B           	LD A, E
1442  538B 08           	EX AF, AF'
1443  538C E5           	PUSH HL ; basic text location
1444  538D D9           	EXX
1445  538E AF               XOR A
1446  538F CD CD 4D         CALL GET_PAGE_INFO
1447  5392 C5               PUSH BC
1448  5393 D5               PUSH DE
1449  5394 3A 41 F3         LD A, (RAMAD0)
1450  5397 26 00            LD H, 0
1451  5399 CD 13 4E         CALL LOCAL_ENASLT
1452  539C D9           	EXX
1453  539D 08           	EX AF, AF'
1454  539E CD 1F 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1455  53A1
1456  53A1 D1               POP DE
1457  53A2 C1               POP BC
1458  53A3 CD 04 4E         CALL RESTORE_PAGE_INFO
1459  53A6
1460  53A6 E1           	POP HL
1461  53A7 C9           	RET
1462  53A8              ; *******************************************************************************************************
1463  53A8
1464  53A8              ; *******************************************************************************************************
1465  53A8              ; function to handle CALL SPRATRINI basic extension
1466  53A8              ; initializes sprites handler
1467  53A8              ; _SPRATRINI ( INT sprites_attributes_data,
1468  53A8              ;			   INT update_variable_location )
1469  53A8              ; expects both locations to be in range #8000+ or throws an error
1470  53A8              ; since these should be BASIC variables
1471  53A8              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA
1472  53A8              SPRATRINI:
1473  53A8              	; opening (
1474  53A8 CD D9 4F     	CALL CHKCHAR
1475  53AB 28           	DB '('
1476  53AC              	; get address of sprite attribute table DIM SA%(3,31)
1477  53AC DD 21 2F 54  	LD IX, FRMQNT
1478  53B0 CD 59 01     	CALL CALBAS
1479  53B3 D5           	PUSH DE
1480  53B4              	; comma
1481  53B4 CD D9 4F     	CALL CHKCHAR
1482  53B7 2C           	DB ','
1483  53B8              	; get update variable location SU%
1484  53B8 DD 21 2F 54  	LD IX, FRMQNT
1485  53BC CD 59 01     	CALL CALBAS
1486  53BF D5           	PUSH DE
1487  53C0              	; ending )
1488  53C0 CD D9 4F     	CALL CHKCHAR
1489  53C3 29           	DB ')'
1490  53C4
1491  53C4 D1           	POP DE ; update variable location
1492  53C5 CB 7A        	BIT 7, D ; is address >= &h8000
1493  53C7 20 05        	JR NZ, .L1
1494  53C9 1E 05        	LD E, 5 ; illegal function call
1495  53CB C3 F1 4F     	JP THROW_ERROR
1496  53CE              .L1:
1497  53CE ED 53 F7 4C  	LD (SPRATR_UPDATE_FLAG), DE
1498  53D2 D1           	POP DE ; address of sprite attribute table
1499  53D3 CB 7A        	BIT 7, D ; is address >= &h8000
1500  53D5 20 05        	JR NZ, .L2
1501  53D7 1E 05        	LD E, 5 ; illegal function call
1502  53D9 C3 F1 4F     	JP THROW_ERROR
1503  53DC              .L2:
1504  53DC ED 53 F9 4C  	LD (SPRATR_DATA), DE
1505  53E0 3E 01        	LD A, 1
1506  53E2 32 F6 4C     	LD (SPRATR_INIT_STATUS), A
1507  53E5 C9           	RET
1508  53E6              ; *******************************************************************************************************
1509  53E6
1510  53E6              ; *******************************************************************************************************
1511  53E6              ; function to handle CALL SPRSET basic extension
1512  53E6              ; sets position, and optionally pattern and color of sprite
1513  53E6              ; _SPRSET ( BYTE sprite_num , valid 0-31
1514  53E6              ;			INT x,
1515  53E6              ;			INT y,
1516  53E6              ;			INT pattern, valid 0-31, otherwise ignored
1517  53E6              ;			INT color, valid 0-15, otherwise ignored
1518  53E6              SPRSET:
1519  53E6 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1520  53E9 B7           	OR A
1521  53EA 20 05        	JR NZ, .L1
1522  53EC 1E 05        	LD E, 5 ; illegal function call
1523  53EE C3 F1 4F     	JP THROW_ERROR
1524  53F1              .L1:
1525  53F1              	; opening (
1526  53F1 CD D9 4F     	CALL CHKCHAR
1527  53F4 28           	DB '('
1528  53F5              	; get sprite number
1529  53F5 DD 21 1C 52  	LD IX, GETBYT
1530  53F9 CD 59 01     	CALL CALBAS
1531  53FC F5           	PUSH AF
1532  53FD              	; comma
1533  53FD CD D9 4F     	CALL CHKCHAR
1534  5400 2C           	DB ','
1535  5401              	; get x
1536  5401 DD 21 2F 54  	LD IX, FRMQNT
1537  5405 CD 59 01     	CALL CALBAS
1538  5408 D5           	PUSH DE
1539  5409              	; comma
1540  5409 CD D9 4F     	CALL CHKCHAR
1541  540C 2C           	DB ','
1542  540D              	; get y
1543  540D DD 21 2F 54  	LD IX, FRMQNT
1544  5411 CD 59 01     	CALL CALBAS
1545  5414 D5           	PUSH DE
1546  5415              	; comma
1547  5415 CD D9 4F     	CALL CHKCHAR
1548  5418 2C           	DB ','
1549  5419              	; get pattern
1550  5419 DD 21 2F 54  	LD IX, FRMQNT
1551  541D CD 59 01     	CALL CALBAS
1552  5420 D5           	PUSH DE
1553  5421              	; comma
1554  5421 CD D9 4F     	CALL CHKCHAR
1555  5424 2C           	DB ','
1556  5425              	; get color
1557  5425 DD 21 2F 54  	LD IX, FRMQNT
1558  5429 CD 59 01     	CALL CALBAS
1559  542C D5           	PUSH DE
1560  542D              	; ending )
1561  542D CD D9 4F     	CALL CHKCHAR
1562  5430 29           	DB ')'
1563  5431
1564  5431                  ; save position in BASIC text
1565  5431 E5           	PUSH HL
1566  5432 DD E1        	POP IX
1567  5434
1568  5434 C1           	POP BC ; color
1569  5435 D1           	POP DE ; pattern
1570  5436 D9           	EXX
1571  5437 C1           	POP BC ; y
1572  5438 D1           	POP DE ; x
1573  5439 F1           	POP AF ; sprite number
1574  543A FE 20        	CP 32
1575  543C 38 05        	JR C, .L2
1576  543E 1E 05        	LD E, 5 ; illegal function call
1577  5440 C3 F1 4F     	JP THROW_ERROR
1578  5443              .L2:
1579  5443              	; find location in sprite attributes table
1580  5443 87          > ADD A, A
1580  5444 87          > ADD A, A
1580  5445 87          > ADD A, A
1581  5446 D5           	PUSH DE
1582  5447 16 00        	LD D, 0
1583  5449 5F           	LD E, A
1584  544A 2A F9 4C     	LD HL, (SPRATR_DATA)
1585  544D 19           	ADD HL, DE
1586  544E D1           	POP DE
1587  544F              	; set y
1588  544F 71           	LD (HL), C
1589  5450 23           	INC HL
1590  5451 70           	LD (HL), B
1591  5452 23           	INC HL
1592  5453              	; set x
1593  5453 73           	LD (HL), E
1594  5454 23           	INC HL
1595  5455 72           	LD (HL), D
1596  5456 23           	INC HL
1597  5457 E5           	PUSH HL
1598  5458 D9           	EXX
1599  5459 E1           	POP HL
1600  545A              	; check if 0<=pattern<32
1601  545A 7A           	LD A, D
1602  545B B7           	OR A
1603  545C 20 0B        	JR NZ, .L3
1604  545E 7D           	LD A, L
1605  545F FE 20        	CP 32
1606  5461 30 06        	JR NC, .L3
1607  5463              	; set pattern
1608  5463 73           	LD (HL), E
1609  5464 23           	INC HL
1610  5465 72           	LD (HL), D
1611  5466 23           	INC HL
1612  5467 18 02        	JR .L4
1613  5469              .L3:
1614  5469              	; skip pattern
1615  5469 23          > INC HL
1615  546A 23          > INC HL
1616  546B              .L4:
1617  546B              	; check if 0<=color<16
1618  546B 78           	LD A, B
1619  546C B7           	OR A
1620  546D 20 08        	JR NZ, .L5
1621  546F 79           	LD A, C
1622  5470 FE 10        	CP 16
1623  5472 30 03        	JR NC, .L5
1624  5474              	; set color
1625  5474 71           	LD (HL), C
1626  5475 23           	INC HL
1627  5476 70           	LD (HL), B
1628  5477
1629  5477              .L5:
1630  5477 DD E5        	PUSH IX
1631  5479 E1           	POP HL
1632  547A C9           	RET
1633  547B              ; *******************************************************************************************************
1634  547B
1635  547B              EXT_END:
1636  547B
# file closed: asm\main.asm
