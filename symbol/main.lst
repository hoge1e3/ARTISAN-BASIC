# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; INCLUDE "system_variables.inc"
   4  4000              ; INCLUDE "system_hooks.inc"
   5  4000              ; INCLUDE "bios_calls.inc"
   6  4000
   7  4000              CHPUT   EQU     #A2
   8  4000              CALBAS	EQU		#159
   9  4000              ERRHAND EQU     #406F
  10  4000              FRMEVL  EQU     #4C64
  11  4000              FRESTR	EQU		#67D0
  12  4000              ; FRMQNT = formula quantificator
  13  4000              ; input HL=pointer to current program expression
  14  4000              ; output HL=next address
  15  4000              ; output DE=integer datum
  16  4000              FRMQNT	EQU		#542F
  17  4000              ; GETBYT = get byte parameter
  18  4000              ; input HL=pointer to current program expression
  19  4000              ; output HL=next address
  20  4000              ; output A=E=byte read
  21  4000              GETBYT	EQU		#521C
  22  4000              CHRGTR  EQU     #4666
  23  4000              SYNCHR	EQU		#558C
  24  4000              VALTYP  EQU     #F663
  25  4000              USR     EQU     #F7F8
  26  4000              PROCNM	EQU		#FD89
  27  4000              BIOS_FILVRM  EQU     #56
  28  4000              CLIKSW	EQU		#F3DB
  29  4000
  30  4000              RAMAD0	EQU	0F341h	; Main-RAM Slot (00000h~03FFFh)
  31  4000              RAMAD1	EQU	0F342h	; Main-RAM Slot (04000h~07FFFh)
  32  4000              RAMAD2	EQU	0F343h	; Main-RAM Slot (08000h~0BFFFh)
  33  4000              RAMAD3	EQU	0F344h	; Main-RAM Slot (0C000h~0FFFFh)
  34  4000              EXPTBL	EQU #FCC1
  35  4000
  36  4000              ; BASIC error codes
  37  4000              ;01 NEXT without FOR
  38  4000              ;02 Syntax error
  39  4000              ;03 RETURN without GOSUB
  40  4000              ;04 Out of DATA
  41  4000              ;05 Illegal function call
  42  4000              ;06 Overflow
  43  4000              ;07 Out of memory
  44  4000              ;08 Undefined line number
  45  4000              ;09 Subscript out of range
  46  4000              ;10 Redimensioned array
  47  4000              ;11 Division by zero
  48  4000              ;12 Illegal direct
  49  4000              ;13 Type mismatch
  50  4000              ;14 Out of string space
  51  4000              ;15 String too long
  52  4000              ;16 String formula too complex
  53  4000              ;17 Can't CONTINUE
  54  4000              ;18 Undefined user function
  55  4000              ;19 Device I/O error
  56  4000              ;20 Verify error
  57  4000              ;21 No RESUME
  58  4000              ;22 RESUME without error
  59  4000              ;23 Unprintable error
  60  4000              ;24 Missing operand
  61  4000              ;25 Line buffer overflow
  62  4000              ;50 FIELD overflow
  63  4000              ;51 Internal error
  64  4000              ;52 Bad file number
  65  4000              ;53 File not found
  66  4000              ;54 File already open
  67  4000              ;55 Input past end
  68  4000              ;56 Bad file name
  69  4000              ;57 Direct statement in file
  70  4000              ;58 Sequential I/O only
  71  4000              ;59 File not OPEN
  72  4000
  73  4000
  74  4000               ; simulate cartridge with BASIC extension
  75  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  75  4004 64 4E 00 00
  75  4008 00 00 00 00
  75  400C 00 00 00 00
  76  4010
  77  4010              ; this location #400A stores last location used by basic extension
  78  4010              ; free memory after that point
  79  4010 DE 52         DW EXT_END
  80  4012
  81  4012              ; binary included AKG player compiled at #4012
  82  4012               INCBIN "bin/AKG.bin"
  83  4CEE               INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CEE              MAIN_PLAYER_START EQU 04012H
   2+ 4CEE              PLY_AKG_START EQU 04012H
   3+ 4CEE              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401BH
   4+ 4CEE              PLY_AKG_INITSOUNDEFFECTS EQU 0401BH
   5+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 0401FH
   6+ 4CEE              PLY_AKG_PLAYSOUNDEFFECT EQU 0401FH
   7+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04020H
   8+ 4CEE              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04020H
   9+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04047H
  10+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04047H
  11+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04055H
  12+ 4CEE              PLY_AKG_PSES_PLAY EQU 0408EH
  13+ 4CEE              PLY_AKG_PSES_READFIRSTBYTE EQU 04097H
  14+ 4CEE              PLY_AKG_PSES_S_ENDORLOOP EQU 040AFH
  15+ 4CEE              PLY_AKG_PSES_S_LOOP EQU 040BAH
  16+ 4CEE              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C0H
  17+ 4CEE              PLY_AKG_PSES_NOTREACHED EQU 040D3H
  18+ 4CEE              PLY_AKG_PSES_HARDWAREONLY EQU 040D7H
  19+ 4CEE              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040DEH
  20+ 4CEE              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F0H
  21+ 4CEE              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FAH
  22+ 4CEE              PLY_AKG_PSES_H_AFTERRETRIG EQU 04104H
  23+ 4CEE              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 04118H
  24+ 4CEE              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411DH
  25+ 4CEE              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04125H
  26+ 4CEE              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04130H
  27+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413CH
  28+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 0413EH
  29+ 4CEE              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04144H
  30+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 04148H
  31+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 04148H
  32+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414AH
  33+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414AH
  34+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414AH
  35+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414BH
  36+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414CH
  37+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04150H
  38+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04150H
  39+ 4CEE              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04150H
  40+ 4CEE              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 04158H
  41+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04160H
  42+ 4CEE              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04160H
  43+ 4CEE              PLY_AKG_INIT EQU 04160H
  44+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04160H
  45+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 0418EH
  46+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A2H
  47+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B4H
  48+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D3H
  49+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E0H
  50+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL EQU 041E6H
  51+ 4CEE              PLY_AKG_INITTABLE0 EQU 041E9H
  52+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041E9H
  53+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04203H
  54+ 4CEE              PLY_AKG_INITTABLE0_END EQU 04203H
  55+ 4CEE              PLY_AKG_INITTABLE1 EQU 04203H
  56+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04203H
  57+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04207H
  58+ 4CEE              PLY_AKG_INITTABLE1_END EQU 04207H
  59+ 4CEE              PLY_AKG_INITTABLEORA EQU 04207H
  60+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04207H
  61+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 0421FH
  62+ 4CEE              PLY_AKG_INITTABLEORA_END EQU 0421FH
  63+ 4CEE              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 0421FH
  64+ 4CEE              PLY_AKG_STOP EQU 0421FH
  65+ 4CEE              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04231H
  66+ 4CEE              PLY_AKG_PLAY EQU 04231H
  67+ 4CEE              PLY_AKG_TICKDECREASINGCOUNTER EQU 04239H
  68+ 4CEE              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 0423FH
  69+ 4CEE              PLY_AKG_READLINKER EQU 04244H
  70+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04244H
  71+ 4CEE              PLY_AKG_READLINKER_PTLINKER EQU 04244H
  72+ 4CEE              PLY_AKG_READLINKER_NOLOOP EQU 0424FH
  73+ 4CEE              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 04288H
  74+ 4CEE              PLY_AKG_READLINE EQU 0428BH
  75+ 4CEE              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428BH
  76+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04291H
  77+ 4CEE              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04291H
  78+ 4CEE              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 0429EH
  79+ 4CEE              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A2H
  80+ 4CEE              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A5H
  81+ 4CEE              PLY_AKG_SPEEDTRACK_END EQU 042A8H
  82+ 4CEE              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042A8H
  83+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042AEH
  84+ 4CEE              PLY_AKG_EVENTTRACK_PTTRACK EQU 042AEH
  85+ 4CEE              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BBH
  86+ 4CEE              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042BFH
  87+ 4CEE              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C2H
  88+ 4CEE              PLY_AKG_EVENTTRACK_END EQU 042C5H
  89+ 4CEE              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C5H
  90+ 4CEE              PLY_AKG_CHANNEL1_READTRACK EQU 042D1H
  91+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D1H
  92+ 4CEE              PLY_AKG_CHANNEL1_PTTRACK EQU 042D1H
  93+ 4CEE              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042ECH
  94+ 4CEE              PLY_AKG_CHANNEL1_WAIT EQU 042F7H
  95+ 4CEE              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 042FEH
  96+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 042FEH
  97+ 4CEE              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 042FEH
  98+ 4CEE              PLY_AKG_CHANNEL1_NOTE EQU 04307H
  99+ 4CEE              PLY_AKG_BASENOTEINDEX EQU 04307H
 100+ 4CEE              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 04309H
 101+ 4CEE              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 04309H
 102+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 04319H
 103+ 4CEE              PLY_AKG_INSTRUMENTSTABLE EQU 04319H
 104+ 4CEE              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432BH
 105+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433BH
 106+ 4CEE              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04363H
 107+ 4CEE              PLY_AKG_CHANNEL1_READCELLEND EQU 04366H
 108+ 4CEE              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04366H
 109+ 4CEE              PLY_AKG_CHANNEL2_READTRACK EQU 04372H
 110+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04372H
 111+ 4CEE              PLY_AKG_CHANNEL2_PTTRACK EQU 04372H
 112+ 4CEE              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438DH
 113+ 4CEE              PLY_AKG_CHANNEL2_WAIT EQU 04398H
 114+ 4CEE              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 0439FH
 115+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 0439FH
 116+ 4CEE              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 0439FH
 117+ 4CEE              PLY_AKG_CHANNEL2_NOTE EQU 043A8H
 118+ 4CEE              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043ADH
 119+ 4CEE              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043ADH
 120+ 4CEE              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043CFH
 121+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043DFH
 122+ 4CEE              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04407H
 123+ 4CEE              PLY_AKG_CHANNEL2_READCELLEND EQU 0440AH
 124+ 4CEE              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440AH
 125+ 4CEE              PLY_AKG_CHANNEL3_READTRACK EQU 04416H
 126+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04416H
 127+ 4CEE              PLY_AKG_CHANNEL3_PTTRACK EQU 04416H
 128+ 4CEE              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04431H
 129+ 4CEE              PLY_AKG_CHANNEL3_WAIT EQU 0443CH
 130+ 4CEE              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04443H
 131+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04443H
 132+ 4CEE              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04443H
 133+ 4CEE              PLY_AKG_CHANNEL3_NOTE EQU 0444CH
 134+ 4CEE              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04451H
 135+ 4CEE              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04451H
 136+ 4CEE              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04473H
 137+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04483H
 138+ 4CEE              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ABH
 139+ 4CEE              PLY_AKG_CHANNEL3_READCELLEND EQU 044AEH
 140+ 4CEE              PLY_AKG_CURRENTSPEED EQU 044AEH
 141+ 4CEE              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B0H
 142+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B3H
 143+ 4CEE              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B3H
 144+ 4CEE              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B6H
 145+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044B9H
 146+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044B9H
 147+ 4CEE              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C5H
 148+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CCH
 149+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044CFH
 150+ 4CEE              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D5H
 151+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044D8H
 152+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044D8H
 153+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E6H
 154+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EBH
 155+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F6H
 156+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044F9H
 157+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044F9H
 158+ 4CEE              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FCH
 159+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 044FFH
 160+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE EQU 044FFH
 161+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 04508H
 162+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04512H
 163+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04515H
 164+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04515H
 165+ 4CEE              PLY_AKG_CHANNEL1_PITCH EQU 04515H
 166+ 4CEE              PLY_AKG_CHANNEL1_ISPITCH EQU 04518H
 167+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451DH
 168+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451DH
 169+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04521H
 170+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04523H
 171+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04525H
 172+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452CH
 173+ 4CEE              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452DH
 174+ 4CEE              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04530H
 175+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04530H
 176+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454CH
 177+ 4CEE              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454CH
 178+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 04559H
 179+ 4CEE              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455DH
 180+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456DH
 181+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456DH
 182+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 0456EH
 183+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 0456FH
 184+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04571H
 185+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04571H
 186+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04571H
 187+ 4CEE              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04572H
 188+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04573H
 189+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04575H
 190+ 4CEE              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04575H
 191+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04575H
 192+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04575H
 193+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04575H
 194+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_END EQU 04578H
 195+ 4CEE              PLY_AKG_CHANNEL1_PITCH_END EQU 0457AH
 196+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04582H
 197+ 4CEE              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04582H
 198+ 4CEE              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04585H
 199+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 04588H
 200+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 04588H
 201+ 4CEE              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04594H
 202+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459BH
 203+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 0459EH
 204+ 4CEE              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A4H
 205+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A7H
 206+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A7H
 207+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B5H
 208+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BAH
 209+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C5H
 210+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045C8H
 211+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045C8H
 212+ 4CEE              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CBH
 213+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045CEH
 214+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045CEH
 215+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D7H
 216+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E1H
 217+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E4H
 218+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E4H
 219+ 4CEE              PLY_AKG_CHANNEL2_PITCH EQU 045E4H
 220+ 4CEE              PLY_AKG_CHANNEL2_ISPITCH EQU 045E7H
 221+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045ECH
 222+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045ECH
 223+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F0H
 224+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F2H
 225+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F4H
 226+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FBH
 227+ 4CEE              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FCH
 228+ 4CEE              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 045FFH
 229+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 045FFH
 230+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461BH
 231+ 4CEE              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461BH
 232+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 04628H
 233+ 4CEE              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462CH
 234+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463CH
 235+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463CH
 236+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463DH
 237+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 0463EH
 238+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04640H
 239+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04640H
 240+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04640H
 241+ 4CEE              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04641H
 242+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04642H
 243+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04644H
 244+ 4CEE              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04644H
 245+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04644H
 246+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04644H
 247+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04644H
 248+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_END EQU 04647H
 249+ 4CEE              PLY_AKG_CHANNEL2_PITCH_END EQU 04649H
 250+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04651H
 251+ 4CEE              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04651H
 252+ 4CEE              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04654H
 253+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04657H
 254+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04657H
 255+ 4CEE              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04663H
 256+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466AH
 257+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466DH
 258+ 4CEE              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04673H
 259+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04676H
 260+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04676H
 261+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04684H
 262+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 04689H
 263+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04694H
 264+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04697H
 265+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04697H
 266+ 4CEE              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469AH
 267+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469DH
 268+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469DH
 269+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A6H
 270+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B0H
 271+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B3H
 272+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B3H
 273+ 4CEE              PLY_AKG_CHANNEL3_PITCH EQU 046B3H
 274+ 4CEE              PLY_AKG_CHANNEL3_ISPITCH EQU 046B6H
 275+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BBH
 276+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BBH
 277+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046BFH
 278+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C1H
 279+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C3H
 280+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CAH
 281+ 4CEE              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CBH
 282+ 4CEE              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046CEH
 283+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046CEH
 284+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046EAH
 285+ 4CEE              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046EAH
 286+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F7H
 287+ 4CEE              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FBH
 288+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470BH
 289+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470BH
 290+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470CH
 291+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470DH
 292+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 0470FH
 293+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 0470FH
 294+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 0470FH
 295+ 4CEE              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04710H
 296+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04711H
 297+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04713H
 298+ 4CEE              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04713H
 299+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04713H
 300+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04713H
 301+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04713H
 302+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_END EQU 04716H
 303+ 4CEE              PLY_AKG_CHANNEL3_PITCH_END EQU 04718H
 304+ 4CEE              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04724H
 305+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04724H
 306+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04724H
 307+ 4CEE              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04727H
 308+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 04729H
 309+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 0472FH
 310+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04732H
 311+ 4CEE              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04732H
 312+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04735H
 313+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 0473EH
 314+ 4CEE              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04746H
 315+ 4CEE              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04753H
 316+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04753H
 317+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04753H
 318+ 4CEE              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04756H
 319+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 04758H
 320+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 0475EH
 321+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04761H
 322+ 4CEE              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04761H
 323+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04764H
 324+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476DH
 325+ 4CEE              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04775H
 326+ 4CEE              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04783H
 327+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04783H
 328+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04783H
 329+ 4CEE              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04786H
 330+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 04788H
 331+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 0478EH
 332+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04791H
 333+ 4CEE              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04791H
 334+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04794H
 335+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479DH
 336+ 4CEE              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A5H
 337+ 4CEE              PLY_AKG_SENDPSGREGISTERS EQU 047B4H
 338+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BCH
 339+ 4CEE              PLY_AKG_PSGREG01_INSTR EQU 047BCH
 340+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CCH
 341+ 4CEE              PLY_AKG_PSGREG23_INSTR EQU 047CCH
 342+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DDH
 343+ 4CEE              PLY_AKG_PSGREG45_INSTR EQU 047DDH
 344+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047EEH
 345+ 4CEE              PLY_AKG_PSGREG6_8_INSTR EQU 047EEH
 346+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 047FFH
 347+ 4CEE              PLY_AKG_PSGREG9_10_INSTR EQU 047FFH
 348+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04810H
 349+ 4CEE              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04810H
 350+ 4CEE              PLY_AKG_PSGREG13_OLDVALUE EQU 04825H
 351+ 4CEE              PLY_AKG_RETRIG EQU 04827H
 352+ 4CEE              PLY_AKG_PSGREG13_INSTR EQU 04829H
 353+ 4CEE              PLY_AKG_PSGREG13_END EQU 04838H
 354+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 04838H
 355+ 4CEE              PLY_AKG_SAVESP EQU 04838H
 356+ 4CEE              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483CH
 357+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTS EQU 04844H
 358+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04851H
 359+ 4CEE              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04851H
 360+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTS EQU 04859H
 361+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04866H
 362+ 4CEE              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04866H
 363+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTS EQU 0486EH
 364+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 04879H
 365+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS EQU 04879H
 366+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 04888H
 367+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 04888H
 368+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 0488FH
 369+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 0489FH
 370+ 4CEE              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 0489FH
 371+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A6H
 372+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A6H
 373+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048A9H
 374+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B2H
 375+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B2H
 376+ 4CEE              PLY_AKG_READINSTRUMENTCELL EQU 048B8H
 377+ 4CEE              PLY_AKG_NOSOFTNOHARD EQU 048C5H
 378+ 4CEE              PLY_AKG_NSNH_NONOISE EQU 048DAH
 379+ 4CEE              PLY_AKG_SOFT EQU 048DDH
 380+ 4CEE              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E4H
 381+ 4CEE              PLY_AKG_S_NOTSIMPLE EQU 048ECH
 382+ 4CEE              PLY_AKG_S_AFTERSIMPLETEST EQU 048EFH
 383+ 4CEE              PLY_AKG_HARDTOSOFT EQU 048FCH
 384+ 4CEE              PLY_AKG_HS_JUMPRATIO EQU 04907H
 385+ 4CEE              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04934H
 386+ 4CEE              PLY_AKG_ENDWITHOUTLOOP EQU 04936H
 387+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04936H
 388+ 4CEE              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04936H
 389+ 4CEE              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 0493EH
 390+ 4CEE              PLY_AKG_SH_JUMPRATIO EQU 0494BH
 391+ 4CEE              PLY_AKG_SH_JUMPRATIOEND EQU 0496CH
 392+ 4CEE              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497BH
 393+ 4CEE              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04981H
 394+ 4CEE              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499BH
 395+ 4CEE              PLY_AKG_H_RETRIGEND EQU 049ADH
 396+ 4CEE              PLY_AKG_H_AFTERRETRIG EQU 049AEH
 397+ 4CEE              PLY_AKG_ENDWITHLOOP EQU 049C0H
 398+ 4CEE              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C7H
 399+ 4CEE              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DDH
 400+ 4CEE              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EBH
 401+ 4CEE              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FBH
 402+ 4CEE              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A09H
 403+ 4CEE              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A18H
 404+ 4CEE              PLY_AKG_SHOHS_RETRIGEND EQU 04A27H
 405+ 4CEE              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A28H
 406+ 4CEE              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3AH
 407+ 4CEE              PLY_AKG_EFFECTTABLE EQU 04A48H
 408+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A48H
 409+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6CH
 410+ 4CEE              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6CH
 411+ 4CEE              PLY_AKG_EFFECT_RESET EQU 04A6FH
 412+ 4CEE              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A71H
 413+ 4CEE              PLY_AKG_EFFECT_VOLUME EQU 04A8CH
 414+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A98H
 415+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04A9EH
 416+ 4CEE              PLY_AKG_ARPEGGIOSTABLE EQU 04A9EH
 417+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC5H
 418+ 4CEE              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACCH
 419+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD2H
 420+ 4CEE              PLY_AKG_PITCHESTABLE EQU 04AD2H
 421+ 4CEE              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AF9H
 422+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B00H
 423+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B11H
 424+ 4CEE              PLY_AKG_EFFECT_PITCHDOWN EQU 04B18H
 425+ 4CEE              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B28H
 426+ 4CEE              PLY_AKG_EFFECT_PITCHUP EQU 04B3DH
 427+ 4CEE              PLY_AKG_EFFECT_PITCHSTOP EQU 04B4FH
 428+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B56H
 429+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B80H
 430+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B80H
 431+ 4CEE              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B99H
 432+ 4CEE              PLY_AKG_EFFECT_GLIDESPEED EQU 04B99H
 433+ 4CEE              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BABH
 434+ 4CEE              PLY_AKG_EFFECT_LEGATO EQU 04BC1H
 435+ 4CEE              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD5H
 436+ 4CEE              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDDH
 437+ 4CEE              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE5H
 438+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEDH
 439+ 4CEE              PLY_AKG_EVENT EQU 04BEDH
 440+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BEEH
 441+ 4CEE              PLY_AKG_PERIODTABLE EQU 04BEEH
 442+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BEEH
 443+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CEEH
 444+ 4CEE              PLY_AKG_PERIODTABLE_END EQU 04CEEH
 445+ 4CEE              PLY_AKG_END EQU 04CEEH
 446+ 4CEE              MAIN_PLAYER_END EQU 04CEEH
 447+ 4CEE              TESTEREND EQU 04CEEH
 448+ 4CEE
# file closed: ./symbol/AKG.sym
  84  4CEE
  85  4CEE              ORIG.HTIMI:
  86  4CEE 00 00 00 00  	DB 0, 0, 0, 0, 0
  86  4CF2 00
  87  4CF3               EXPORT ORIG.HTIMI
  88  4CF3
  89  4CF3              MUSIC_INIT_STATUS:
  90  4CF3 00            DB 0
  91  4CF4              SFX_INIT_STATUS:
  92  4CF4 00            DB 0
  93  4CF5              SOUND_ENABLED:
  94  4CF5 00            DB 0
  95  4CF6
  96  4CF6              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
  97  4CF6              ; per starting letter, if no commands with this letter, NULL value
  98  4CF6              CMDS:
  99  4CF6 00 00            DW 0 ; A
 100  4CF8 00 00            DW 0 ; B
 101  4CFA 00 00            DW 0 ; C
 102  4CFC 00 00            DW 0 ; D
 103  4CFE 00 00            DW 0 ; E
 104  4D00 51 4D            DW CMDS_F; F
 105  4D02 64 4D            DW CMDS_G; G
 106  4D04 00 00            DW 0 ; H
 107  4D06 00 00            DW 0 ; I
 108  4D08 00 00            DW 0 ; J
 109  4D0A 00 00            DW 0 ; K
 110  4D0C 34 4D            DW CMDS_L ; L
 111  4D0E 3E 4D            DW CMDS_M ; M
 112  4D10 00 00            DW 0 ; N
 113  4D12 00 00            DW 0 ; O
 114  4D14 00 00            DW 0 ; P
 115  4D16 00 00            DW 0 ; Q
 116  4D18 00 00            DW 0 ; R
 117  4D1A 78 4D            DW CMDS_S ; S
 118  4D1C 00 00            DW 0 ; T
 119  4D1E 2A 4D            DW CMDS_U ; U
 120  4D20 6E 4D            DW CMDS_V ; V
 121  4D22 00 00            DW 0 ; W
 122  4D24 00 00            DW 0 ; X
 123  4D26 00 00            DW 0 ; Y
 124  4D28 00 00            DW 0 ; Z
 125  4D2A
 126  4D2A              CMDS_U:
 127  4D2A 55 50 52 49  	DEFB	"UPRINT",0      ; Print upper case string
 127  4D2E 4E 54 00
 128  4D31 A1 4E        	DEFW	UPRINT
 129  4D33 00               DB 0
 130  4D34              CMDS_L:
 131  4D34 4C 50 52 49  	DEFB	"LPRINT",0      ; Print lower case string
 131  4D38 4E 54 00
 132  4D3B BE 4E        	DEFW	LPRINT
 133  4D3D 00               DB 0
 134  4D3E              CMDS_M:
 135  4D3E 4D 45 4D 56      DB "MEMVRM", 0
 135  4D42 52 4D 00
 136  4D45 B3 50            DW MEMVRM
 137  4D47 4D 45 4D 43  	DB "MEMCPY", 0
 137  4D4B 50 59 00
 138  4D4E 25 4F        	DW MEMCPY
 139  4D50 00               DB 0
 140  4D51              CMDS_F:
 141  4D51 46 49 4C 56      DB "FILVRM", 0
 141  4D55 52 4D 00
 142  4D58 95 4F            DW FILVRM
 143  4D5A 46 49 4C 52      DB "FILRAM", 0
 143  4D5E 41 4D 00
 144  4D61 DC 4F            DW FILRAM
 145  4D63 00               DB 0
 146  4D64              CMDS_G:
 147  4D64 47 45 4E 43      DB "GENCAL", 0
 147  4D68 41 4C 00
 148  4D6B 5A 50            DW GENCAL
 149  4D6D 00           	DB	0
 150  4D6E              CMDS_V:
 151  4D6E 56 52 4D 4D  	DB "VRMMEM", 0
 151  4D72 45 4D 00
 152  4D75 3A 51        	DW VRMMEM
 153  4D77 00           	DB 0
 154  4D78              CMDS_S:
 155  4D78 53 4E 44 53  	DB "SNDSFX", 0
 155  4D7C 46 58 00
 156  4D7F 7D 52        	DW SNDSFX
 157  4D81 53 4E 44 50  	DB "SNDPLYINI", 0
 157  4D85 4C 59 49 4E
 157  4D89 49 00
 158  4D8B F6 51        	DW SNDPLYINIT
 159  4D8D 53 4E 44 50  	DB "SNDPLYON", 0
 159  4D91 4C 59 4F 4E
 159  4D95 00
 160  4D96 47 52        	DW SNDPLYON
 161  4D98 53 4E 44 50  	DB "SNDPLYOFF", 0
 161  4D9C 4C 59 4F 46
 161  4DA0 46 00
 162  4DA2 5A 52        	DW SNDPLYOFF
 163  4DA4 00           	DB 0
 164  4DA5
 165  4DA5              ; ****************************************************************************************************
 166  4DA5              ; function gets slot and subslot data for specific page
 167  4DA5              ; input A=page (0, 1 or 2)
 168  4DA5              ; output B = 0A8H register value
 169  4DA5              ; output D = 0 is no subslots, 1 if yes
 170  4DA5              ; output C = 0A8H value when page 3 slot equals to requested page slot
 171  4DA5              ; output E = subslot value if present
 172  4DA5              ; modifies AF, BC, DE, HL
 173  4DA5              GET_PAGE_INFO:
 174  4DA5 6F               LD L, A
 175  4DA6 C6 C1            ADD A, low (EXPTBL)
 176  4DA8 32 B2 4D         LD (GET_PAGE_INFO_L1+1), A
 177  4DAB DB A8            IN A, (0A8H)
 178  4DAD 47               LD B, A
 179  4DAE E6 3F            AND 03FH
 180  4DB0 4F               LD C, A
 181  4DB1              GET_PAGE_INFO_L1:
 182  4DB1 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 183  4DB4 E6 80            AND 080H
 184  4DB6 28 1B            JR Z, GET_PAGE_INFO_L2
 185  4DB8                  ; expanded
 186  4DB8 2D               DEC L
 187  4DB9 FA D8 4D         JP M, GET_PAGE_INFO_L3
 188  4DBC 2D               DEC L
 189  4DBD FA D6 4D         JP M, GET_PAGE_INFO_L4
 190  4DC0                  ; page 2
 191  4DC0 07               RLCA
 192  4DC1 07               RLCA
 193  4DC2              GET_PAGE_INFO_L5:
 194  4DC2 E6 C0            AND 0C0H
 195  4DC4 B1               OR C
 196  4DC5 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 197  4DC7 4F               LD C, A
 198  4DC8 3A FF FF         LD A, (0FFFFH)
 199  4DCB 2F               CPL
 200  4DCC 5F               LD E, A
 201  4DCD 16 01            LD D, 1
 202  4DCF 78               LD A, B ; return stack
 203  4DD0 D3 A8            OUT (0A8H), A
 204  4DD2 C9               RET
 205  4DD3              GET_PAGE_INFO_L2:
 206  4DD3                  ; not expanded
 207  4DD3 16 00            LD D, 0
 208  4DD5 C9               RET
 209  4DD6              GET_PAGE_INFO_L4:
 210  4DD6                  ; page 1
 211  4DD6 0F               RRCA
 212  4DD7 0F               RRCA
 213  4DD8              GET_PAGE_INFO_L3:
 214  4DD8                  ; page 0
 215  4DD8 0F               RRCA
 216  4DD9 0F               RRCA
 217  4DDA 18 E6            JR GET_PAGE_INFO_L5
 218  4DDC              ; ****************************************************************************************************
 219  4DDC
 220  4DDC              ; ****************************************************************************************************
 221  4DDC              ; function returns original slot and subslot info
 222  4DDC              ; input B = 0A8H register value
 223  4DDC              ; input D = 0 is no subslots, 1 if yes
 224  4DDC              ; input C = 0A8H value when page 3 slot equals to requested page slot
 225  4DDC              ; input E = subslot value if present
 226  4DDC              ; modifies AF
 227  4DDC              RESTORE_PAGE_INFO:
 228  4DDC 7A               LD A, D
 229  4DDD B7               OR A
 230  4DDE 28 07            JR Z, RESTORE_PAGE_INFO_L1
 231  4DE0 79               LD A, C
 232  4DE1 D3 A8            OUT (0A8H), A
 233  4DE3 7B               LD A, E
 234  4DE4 32 FF FF         LD (0FFFFH), A
 235  4DE7              RESTORE_PAGE_INFO_L1:
 236  4DE7 78               LD A, B
 237  4DE8 D3 A8            OUT (0A8H), A
 238  4DEA C9               RET
 239  4DEB              ; ****************************************************************************************************
 240  4DEB
 241  4DEB              ; *******************************************************************************************************
 242  4DEB              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 243  4DEB              ; INPUT:  A = SLOT ID: EXXXSSPP
 244  4DEB              ; E = EXPANDED FLAG
 245  4DEB              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 246  4DEB              ; PP = PRIMARY SLOT NUMBER
 247  4DEB              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 248  4DEB              ; CHANGES: AF, BC, DE
 249  4DEB
 250  4DEB              LOCAL_ENASLT:
 251  4DEB CD 0B 4E         CALL L0353
 252  4DEE FA F8 4D         JP M, L0340
 253  4DF1 DB A8            IN A, (0A8H)
 254  4DF3 A1               AND C
 255  4DF4 B0               OR B
 256  4DF5 D3 A8            OUT (0A8H), A
 257  4DF7 C9               RET
 258  4DF8              L0340:
 259  4DF8 E5               PUSH HL
 260  4DF9 CD 30 4E         CALL L0378
 261  4DFC 4F               LD C, A
 262  4DFD 06 00            LD B, 0
 263  4DFF 7D               LD A, L
 264  4E00 A4               AND H
 265  4E01 B2               OR D
 266  4E02 21 C5 FC         LD HL, 0FCC5H
 267  4E05 09               ADD HL, BC
 268  4E06 77               LD (HL), A
 269  4E07 E1               POP HL
 270  4E08 79               LD A, C
 271  4E09 18 E0            JR LOCAL_ENASLT
 272  4E0B              L0353:
 273  4E0B F3               DI
 274  4E0C F5               PUSH AF
 275  4E0D 7C               LD A, H
 276  4E0E 07               RLCA
 277  4E0F 07               RLCA
 278  4E10 E6 03            AND 3
 279  4E12 5F               LD E, A
 280  4E13 3E C0            LD A, 0C0H
 281  4E15              L035D:
 282  4E15 07               RLCA
 283  4E16 07               RLCA
 284  4E17 1D               DEC E
 285  4E18 F2 15 4E         JP P, L035D
 286  4E1B 5F               LD E, A
 287  4E1C 2F               CPL
 288  4E1D 4F               LD C, A
 289  4E1E F1               POP AF
 290  4E1F F5               PUSH AF
 291  4E20 E6 03            AND 3
 292  4E22 3C               INC A
 293  4E23 47               LD B, A
 294  4E24 3E AB            LD A, 0ABH
 295  4E26              L036E:
 296  4E26 C6 55            ADD A, 055H
 297  4E28 10 FC            DJNZ L036E
 298  4E2A 57               LD D, A
 299  4E2B A3               AND E
 300  4E2C 47               LD B, A
 301  4E2D F1               POP AF
 302  4E2E A7               AND A
 303  4E2F C9               RET
 304  4E30              L0378:
 305  4E30 F5               PUSH AF
 306  4E31 7A               LD A, D
 307  4E32 E6 C0            AND 0C0H
 308  4E34 4F               LD C, A
 309  4E35 F1               POP AF
 310  4E36 F5               PUSH AF
 311  4E37 57               LD D, A
 312  4E38 DB A8            IN A, (0A8H)
 313  4E3A 47               LD B, A
 314  4E3B E6 3F            AND 03FH
 315  4E3D B1               OR C
 316  4E3E D3 A8            OUT (0A8H), A
 317  4E40 7A               LD A, D
 318  4E41 0F               RRCA
 319  4E42 0F               RRCA
 320  4E43 E6 03            AND 3
 321  4E45 57               LD D, A
 322  4E46 3E AB            LD A, 0ABH
 323  4E48              L0390:
 324  4E48 C6 55            ADD A, 055H
 325  4E4A 15               DEC D
 326  4E4B F2 48 4E         JP P, L0390
 327  4E4E A3               AND E
 328  4E4F 57               LD D, A
 329  4E50 7B               LD A, E
 330  4E51 2F               CPL
 331  4E52 67               LD H, A
 332  4E53 3A FF FF         LD A, (0FFFFH)
 333  4E56 2F               CPL
 334  4E57 6F               LD L, A
 335  4E58 A4               AND H
 336  4E59 B2               OR D
 337  4E5A 32 FF FF         LD (0FFFFH), A
 338  4E5D 78               LD A, B
 339  4E5E D3 A8            OUT (0A8H), A
 340  4E60 F1               POP AF
 341  4E61 E6 03            AND 3
 342  4E63 C9               RET
 343  4E64              ; *******************************************************************************************************
 344  4E64
 345  4E64
 346  4E64              ; General BASIC CALL-instruction handler
 347  4E64
 348  4E64              CALLHAND:
 349  4E64 E5           	PUSH HL
 350  4E65 21 F6 4C     	LD	HL, CMDS ; pointer table based on starting letter
 351  4E68 3A 89 FD         LD A, (PROCNM)
 352  4E6B D6 41            SUB 'A'
 353  4E6D 87               ADD A, A
 354  4E6E 16 00            LD D, 0
 355  4E70 5F               LD E, A
 356  4E71 19               ADD HL, DE
 357  4E72 5E               LD E, (HL)
 358  4E73 23               INC HL
 359  4E74 56               LD D, (HL)
 360  4E75 7A               LD A, D
 361  4E76 B3               OR E
 362  4E77 28 24            JR Z, .CMDNOTRECOGNIZED
 363  4E79 EB               EX DE, HL
 364  4E7A              .CHKCMD:
 365  4E7A 11 89 FD     	LD	DE, PROCNM
 366  4E7D 1A           .LOOP:	LD	A,(DE)
 367  4E7E BE           	CP	(HL)
 368  4E7F 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 369  4E81 13           	INC	DE
 370  4E82 23           	INC	HL
 371  4E83 A7           	AND	A
 372  4E84 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 373  4E86 5E           	LD	E,(HL)
 374  4E87 23           	INC	HL
 375  4E88 56           	LD	D,(HL)
 376  4E89 E1           	POP	HL		; routine address
 377  4E8A CD 10 4F     	CALL	GETPREVCHAR
 378  4E8D CD 9F 4E     	CALL	.CALLDE		; Call routine
 379  4E90 A7           	AND	A
 380  4E91 C9           	RET
 381  4E92
 382  4E92              .TONEXTCMD:
 383  4E92 0E FF        	LD	C,0FFH
 384  4E94 AF           	XOR	A
 385  4E95 ED B1        	CPIR			; Skip to end of instruction name
 386  4E97 23           	INC	HL
 387  4E98 23           	INC	HL		; Skip address
 388  4E99 BE           	CP	(HL)
 389  4E9A 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 390  4E9C E1           	POP	HL
 391  4E9D              .CMDNOTRECOGNIZED:
 392  4E9D 37               SCF
 393  4E9E C9           	RET
 394  4E9F
 395  4E9F              .CALLDE:
 396  4E9F D5           	PUSH	DE
 397  4EA0 C9           	RET
 398  4EA1
 399  4EA1              ;---------------------------
 400  4EA1
 401  4EA1              ;---------------------------
 402  4EA1              UPRINT:
 403  4EA1 CD E5 4E     	CALL	EVALTXTPARAM	; Evaluate text parameter
 404  4EA4 E5           	PUSH	HL
 405  4EA5 CD DB 4E             CALL    GETSTRPNT
 406  4EA8              .LOOP
 407  4EA8 7E                   LD      A,(HL)
 408  4EA9 CD B5 4E             CALL    .UCASE
 409  4EAC CD A2 00             CALL    CHPUT  ;Print
 410  4EAF 23                   INC     HL
 411  4EB0 10 F6                DJNZ    .LOOP
 412  4EB2
 413  4EB2 E1           	POP	HL
 414  4EB3 B7           	OR      A
 415  4EB4 C9           	RET
 416  4EB5
 417  4EB5              .UCASE:
 418  4EB5 FE 61                CP      "a"
 419  4EB7 D8                   RET     C
 420  4EB8 FE 7B                CP      "z"+1
 421  4EBA D0                   RET     NC
 422  4EBB E6 DF                AND     %11011111
 423  4EBD C9                   RET
 424  4EBE              ;---------------------------
 425  4EBE              LPRINT:
 426  4EBE CD E5 4E     	CALL	EVALTXTPARAM	; Evaluate text parameter
 427  4EC1 E5           	PUSH	HL
 428  4EC2 CD DB 4E             CALL    GETSTRPNT
 429  4EC5              .LOOP
 430  4EC5 7E                   LD      A,(HL)
 431  4EC6 CD D2 4E             CALL    .LCASE
 432  4EC9 CD A2 00             CALL    CHPUT  ;Print
 433  4ECC 23                   INC     HL
 434  4ECD 10 F6                DJNZ    .LOOP
 435  4ECF
 436  4ECF E1           	POP	HL
 437  4ED0 B7           	OR      A
 438  4ED1 C9           	RET
 439  4ED2
 440  4ED2              .LCASE:
 441  4ED2 FE 41                CP      "A"
 442  4ED4 D8                   RET     C
 443  4ED5 FE 5B                CP      "Z"+1
 444  4ED7 D0                   RET     NC
 445  4ED8 F6 20                OR      %00100000
 446  4EDA C9                   RET
 447  4EDB              ;---------------------------
 448  4EDB
 449  4EDB              GETSTRPNT:
 450  4EDB              ; OUT:
 451  4EDB              ; HL = String Address
 452  4EDB              ; B  = Lenght
 453  4EDB
 454  4EDB 2A F8 F7             LD      HL,(USR)
 455  4EDE 46                   LD      B,(HL)
 456  4EDF 23                   INC     HL
 457  4EE0 5E                   LD      E,(HL)
 458  4EE1 23                   INC     HL
 459  4EE2 56                   LD      D,(HL)
 460  4EE3 EB                   EX      DE,HL
 461  4EE4 C9                   RET
 462  4EE5
 463  4EE5              EVALTXTPARAM:
 464  4EE5 CD 06 4F     	CALL	CHKCHAR
 465  4EE8 28           	DEFB	"("             ; Check for (
 466  4EE9 DD 21 64 4C  	LD	IX,FRMEVL
 467  4EED CD 59 01     	CALL	CALBAS		; Evaluate expression
 468  4EF0 3A 63 F6             LD      A,(VALTYP)
 469  4EF3 FE 03                CP      3               ; Text type?
 470  4EF5 C2 18 4F             JP      NZ,TYPE_MISMATCH
 471  4EF8 E5                   PUSH	HL
 472  4EF9 DD 21 D0 67          LD	IX,FRESTR         ; Free the temporary string
 473  4EFD CD 59 01             CALL	CALBAS
 474  4F00 E1                   POP	HL
 475  4F01 CD 06 4F     	CALL	CHKCHAR
 476  4F04 29           	DEFB	")"             ; Check for )
 477  4F05 C9                   RET
 478  4F06
 479  4F06
 480  4F06              CHKCHAR:
 481  4F06 CD 10 4F     	CALL	GETPREVCHAR	; Get previous basic char
 482  4F09 E3           	EX	(SP),HL
 483  4F0A BE           	CP	(HL) 	        ; Check if good char
 484  4F0B 20 0F        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 485  4F0D 23           	INC	HL
 486  4F0E E3           	EX	(SP),HL
 487  4F0F 23           	INC	HL		; Get next basic char
 488  4F10
 489  4F10              GETPREVCHAR:
 490  4F10 2B           	DEC	HL
 491  4F11 DD 21 66 46  	LD	IX,CHRGTR
 492  4F15 C3 59 01     	JP      CALBAS
 493  4F18
 494  4F18
 495  4F18              TYPE_MISMATCH:
 496  4F18 1E 0D            LD E, 13 ; Type mismatch
 497  4F1A 18 02            JR THROW_ERROR
 498  4F1C
 499  4F1C              SYNTAX_ERROR:
 500  4F1C 1E 02            LD E, 2 ; Syntax error
 501  4F1E              THROW_ERROR:
 502  4F1E DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 503  4F22 C3 59 01     	JP	CALBAS
 504  4F25
 505  4F25              ;---------------------------
 506  4F25
 507  4F25              ; *******************************************************************************************************
 508  4F25              ; function to handle CALL MEMCPY basic extension
 509  4F25              ; _MEMCPY ( INT source,
 510  4F25              ;			INT destination,
 511  4F25              ;			INT count,
 512  4F25              ;			BYTE enable_ram, >0 = true
 513  4F25              ;			BYTE wait_vsync) >0 = treu
 514  4F25              ; enable_ram will put ram in page 0 also, page 1 is already there
 515  4F25              ; wait_vsync will issue HALT before copying
 516  4F25              MEMCPY:
 517  4F25              	; opening (
 518  4F25 CD 06 4F     	CALL CHKCHAR
 519  4F28 28           	DB '('
 520  4F29              	; get source address
 521  4F29 DD 21 2F 54  	LD IX, FRMQNT
 522  4F2D CD 59 01     	CALL CALBAS
 523  4F30 D5           	PUSH DE
 524  4F31              	; comma
 525  4F31 CD 06 4F     	CALL CHKCHAR
 526  4F34 2C           	DB ','
 527  4F35              	; get destination address
 528  4F35 DD 21 2F 54  	LD IX, FRMQNT
 529  4F39 CD 59 01     	CALL CALBAS
 530  4F3C D5           	PUSH DE
 531  4F3D              	; comma
 532  4F3D CD 06 4F     	CALL CHKCHAR
 533  4F40 2C           	DB ','
 534  4F41              	; get length
 535  4F41 DD 21 2F 54  	LD IX, FRMQNT
 536  4F45 CD 59 01     	CALL CALBAS
 537  4F48 D5           	PUSH DE
 538  4F49              	; comma
 539  4F49 CD 06 4F     	CALL CHKCHAR
 540  4F4C 2C           	DB ','
 541  4F4D              	; get ROM/RAM
 542  4F4D DD 21 1C 52  	LD IX, GETBYT
 543  4F51 CD 59 01     	CALL CALBAS
 544  4F54 F5           	PUSH AF
 545  4F55              	; comma
 546  4F55 CD 06 4F     	CALL CHKCHAR
 547  4F58 2C           	DB ','
 548  4F59              	; get vsync wait
 549  4F59 DD 21 1C 52  	LD IX, GETBYT
 550  4F5D CD 59 01     	CALL CALBAS
 551  4F60 F5           	PUSH AF
 552  4F61              	; ending )
 553  4F61 CD 06 4F     	CALL CHKCHAR
 554  4F64 29           	DB ')'
 555  4F65
 556  4F65 FB               EI
 557  4F66              	; save position
 558  4F66 E5           	PUSH HL
 559  4F67 DD E1        	POP IX
 560  4F69
 561  4F69              	; syntax ok
 562  4F69              	; wait for vsync if needed
 563  4F69 F1           	POP AF
 564  4F6A B7           	OR A
 565  4F6B 28 01        	JR Z, .L1
 566  4F6D 76           	HALT
 567  4F6E
 568  4F6E              .L1:
 569  4F6E              	; enable RAM in page 0 if needed
 570  4F6E F1           	POP AF
 571  4F6F B7           	OR A
 572  4F70              	; pop LDIR parameters and store away for later
 573  4F70 C1           	POP BC
 574  4F71 D1           	POP DE
 575  4F72 E1           	POP HL
 576  4F73 28 1A        	JR Z, .L2
 577  4F75 D9           	EXX
 578  4F76 AF               XOR A
 579  4F77 CD A5 4D         CALL GET_PAGE_INFO
 580  4F7A C5               PUSH BC
 581  4F7B D5               PUSH DE
 582  4F7C 3A 41 F3         LD A, (RAMAD0)
 583  4F7F 26 00            LD H, 0
 584  4F81 F3           	DI
 585  4F82 CD EB 4D         CALL LOCAL_ENASLT
 586  4F85 D9           	EXX
 587  4F86 ED B0        	LDIR
 588  4F88 D1               POP DE
 589  4F89 C1               POP BC
 590  4F8A CD DC 4D         CALL RESTORE_PAGE_INFO
 591  4F8D 18 02        	JR .L3
 592  4F8F
 593  4F8F              .L2:
 594  4F8F ED B0        	LDIR
 595  4F91
 596  4F91              .L3:
 597  4F91 DD E5        	PUSH IX
 598  4F93 E1           	POP HL
 599  4F94 C9           	RET
 600  4F95              ; *******************************************************************************************************
 601  4F95
 602  4F95              ; *******************************************************************************************************
 603  4F95              ; function to handle CALL FILVRM basic extension
 604  4F95              ; FILVRM ( INT offset,
 605  4F95              ;		   INT count,
 606  4F95              ;		   BYTE value,
 607  4F95              ;		   BYTE wait_vsync) >0 = true
 608  4F95              ; wait_vsync will issue HALT before copying
 609  4F95              FILVRM:
 610  4F95              	; opening (
 611  4F95 CD 06 4F     	CALL CHKCHAR
 612  4F98 28           	DB '('
 613  4F99              	; get offset address
 614  4F99 DD 21 2F 54  	LD IX, FRMQNT
 615  4F9D CD 59 01     	CALL CALBAS
 616  4FA0 D5           	PUSH DE
 617  4FA1              	; comma
 618  4FA1 CD 06 4F     	CALL CHKCHAR
 619  4FA4 2C           	DB ','
 620  4FA5              	; get count
 621  4FA5 DD 21 2F 54  	LD IX, FRMQNT
 622  4FA9 CD 59 01     	CALL CALBAS
 623  4FAC D5           	PUSH DE
 624  4FAD              	; comma
 625  4FAD CD 06 4F     	CALL CHKCHAR
 626  4FB0 2C           	DB ','
 627  4FB1              	; get value
 628  4FB1 DD 21 1C 52  	LD IX, GETBYT
 629  4FB5 CD 59 01     	CALL CALBAS
 630  4FB8 F5           	PUSH AF
 631  4FB9              	; comma
 632  4FB9 CD 06 4F     	CALL CHKCHAR
 633  4FBC 2C           	DB ','
 634  4FBD              	; get vsync wait
 635  4FBD DD 21 1C 52  	LD IX, GETBYT
 636  4FC1 CD 59 01     	CALL CALBAS
 637  4FC4 F5           	PUSH AF
 638  4FC5              	; ending )
 639  4FC5 CD 06 4F     	CALL CHKCHAR
 640  4FC8 29           	DB ')'
 641  4FC9
 642  4FC9 FB               EI
 643  4FCA              	; save position
 644  4FCA E5           	PUSH HL
 645  4FCB DD E1        	POP IX
 646  4FCD
 647  4FCD              	; syntax ok
 648  4FCD              	; wait for vsync if needed
 649  4FCD F1           	POP AF
 650  4FCE B7           	OR A
 651  4FCF 28 01        	JR Z, .L1
 652  4FD1 76           	HALT
 653  4FD2
 654  4FD2              .L1:
 655  4FD2 F1               POP AF ; value
 656  4FD3 C1               POP BC ; count
 657  4FD4 E1               POP HL ; offset
 658  4FD5 CD 56 00         CALL BIOS_FILVRM
 659  4FD8
 660  4FD8              .L3:
 661  4FD8 DD E5        	PUSH IX
 662  4FDA E1           	POP HL
 663  4FDB C9           	RET
 664  4FDC              ; *******************************************************************************************************
 665  4FDC
 666  4FDC              ; *******************************************************************************************************
 667  4FDC              ; function to handle CALL FILRAM basic extension
 668  4FDC              ; FILRAM ( INT start address,
 669  4FDC              ;		   INT count,
 670  4FDC              ;		   BYTE value,
 671  4FDC              ;	   	   BYTE enable_ram, >0 = true
 672  4FDC              ;		   BYTE wait_vsync) >0 = true
 673  4FDC              ; enable_ram will put ram in page 0 also, page 1 is already there
 674  4FDC              ; wait_vsync will issue HALT before copying
 675  4FDC              FILRAM:
 676  4FDC              	; opening (
 677  4FDC CD 06 4F     	CALL CHKCHAR
 678  4FDF 28           	DB '('
 679  4FE0              	; get start address
 680  4FE0 DD 21 2F 54  	LD IX, FRMQNT
 681  4FE4 CD 59 01     	CALL CALBAS
 682  4FE7 D5           	PUSH DE
 683  4FE8              	; comma
 684  4FE8 CD 06 4F     	CALL CHKCHAR
 685  4FEB 2C           	DB ','
 686  4FEC              	; get count
 687  4FEC DD 21 2F 54  	LD IX, FRMQNT
 688  4FF0 CD 59 01     	CALL CALBAS
 689  4FF3 D5           	PUSH DE
 690  4FF4              	; comma
 691  4FF4 CD 06 4F     	CALL CHKCHAR
 692  4FF7 2C           	DB ','
 693  4FF8              	; get value
 694  4FF8 DD 21 1C 52  	LD IX, GETBYT
 695  4FFC CD 59 01     	CALL CALBAS
 696  4FFF F5           	PUSH AF
 697  5000              	; comma
 698  5000 CD 06 4F     	CALL CHKCHAR
 699  5003 2C           	DB ','
 700  5004              	; get ROM/RAM
 701  5004 DD 21 1C 52  	LD IX, GETBYT
 702  5008 CD 59 01     	CALL CALBAS
 703  500B F5           	PUSH AF
 704  500C              	; comma
 705  500C CD 06 4F     	CALL CHKCHAR
 706  500F 2C           	DB ','
 707  5010              	; get vsync wait
 708  5010 DD 21 1C 52  	LD IX, GETBYT
 709  5014 CD 59 01     	CALL CALBAS
 710  5017 F5           	PUSH AF
 711  5018              	; ending )
 712  5018 CD 06 4F     	CALL CHKCHAR
 713  501B 29           	DB ')'
 714  501C
 715  501C FB               EI
 716  501D              	; save position
 717  501D E5           	PUSH HL
 718  501E DD E1        	POP IX
 719  5020
 720  5020              	; syntax ok
 721  5020              	; wait for vsync if needed
 722  5020 F1           	POP AF
 723  5021 B7           	OR A
 724  5022 28 01        	JR Z, .L1
 725  5024 76           	HALT
 726  5025
 727  5025              .L1:
 728  5025              	; enable RAM in page 0 if needed
 729  5025 F1           	POP AF
 730  5026 B7           	OR A
 731  5027              	; pop LDIR parameters and store away for later
 732  5027 D1           	POP DE ; actually AF
 733  5028 C1           	POP BC ; count
 734  5029 E1           	POP HL ; start address
 735  502A 28 1B        	JR Z, .L2
 736  502C D9           	EXX
 737  502D AF               XOR A
 738  502E CD A5 4D         CALL GET_PAGE_INFO
 739  5031 C5               PUSH BC
 740  5032 D5               PUSH DE
 741  5033 3A 41 F3         LD A, (RAMAD0)
 742  5036 26 00            LD H, 0
 743  5038 F3           	DI
 744  5039 CD EB 4D         CALL LOCAL_ENASLT
 745  503C D9           	EXX
 746  503D CD 4E 50     	CALL .FILLVALUE
 747  5040 D1               POP DE
 748  5041 C1               POP BC
 749  5042 CD DC 4D         CALL RESTORE_PAGE_INFO
 750  5045 18 03        	JR .L3
 751  5047
 752  5047              .L2:
 753  5047 CD 4E 50     	CALL .FILLVALUE
 754  504A
 755  504A              .L3:
 756  504A DD E5        	PUSH IX
 757  504C E1           	POP HL
 758  504D C9           	RET
 759  504E
 760  504E              .FILLVALUE:
 761  504E 72               LD (HL), D
 762  504F 54               LD D, H
 763  5050 5D               LD E, L
 764  5051 13               INC DE
 765  5052 0B               DEC BC
 766  5053 ED B0            LDIR
 767  5055 C9               RET
 768  5056              ; *******************************************************************************************************
 769  5056
 770  5056              ; *******************************************************************************************************
 771  5056              ; function to handle CALL GENCAL basic extension
 772  5056              ; GENCAL ( INT fn_addr, = address of the function to call
 773  5056              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 774  5056              ; output values of reristers will also be stored at reg_list_ptr
 775  5056              GENCAL_VAR_SP:
 776  5056 00 00            DW 0
 777  5058              GENCAL_VAR_SP2:
 778  5058 00 00            DW 0
 779  505A              GENCAL:
 780  505A              	; opening (
 781  505A CD 06 4F     	CALL CHKCHAR
 782  505D 28           	DB '('
 783  505E              	; get function address
 784  505E DD 21 2F 54  	LD IX, FRMQNT
 785  5062 CD 59 01     	CALL CALBAS
 786  5065 D5           	PUSH DE
 787  5066              	; comma
 788  5066 CD 06 4F     	CALL CHKCHAR
 789  5069 2C           	DB ','
 790  506A              	; get pointer to register list
 791  506A DD 21 2F 54  	LD IX, FRMQNT
 792  506E CD 59 01     	CALL CALBAS
 793  5071 D5           	PUSH DE
 794  5072              	; ending )
 795  5072 CD 06 4F     	CALL CHKCHAR
 796  5075 29           	DB ')'
 797  5076
 798  5076              	; save BASIC token position
 799  5076 E5           	PUSH HL
 800  5077 D9               EXX
 801  5078 E1           	POP HL ; HL'=next basic token
 802  5079 D9               EXX
 803  507A
 804  507A E1               POP HL ; get pointer to register values
 805  507B ED 73 56 50      LD (GENCAL_VAR_SP), SP
 806  507F F3               DI
 807  5080 F9               LD SP, HL
 808  5081 F1               POP AF
 809  5082 C1               POP BC
 810  5083 D1               POP DE
 811  5084 E1               POP HL
 812  5085 DD E1            POP IX
 813  5087 FD E1            POP IY
 814  5089 D9               EXX
 815  508A ED 73 58 50      LD (GENCAL_VAR_SP2), SP
 816  508E ED 7B 56 50      LD SP, (GENCAL_VAR_SP)
 817  5092 FB               EI
 818  5093 D1               POP DE ; get function to call
 819  5094 E5               PUSH HL
 820  5095 CD B0 50         CALL .EXXDECALL
 821  5098 F3               DI
 822  5099 ED 73 56 50      LD (GENCAL_VAR_SP), SP
 823  509D ED 7B 58 50      LD SP, (GENCAL_VAR_SP2)
 824  50A1 FD E5            PUSH IY
 825  50A3 DD E5            PUSH IX
 826  50A5 E5               PUSH HL
 827  50A6 D5               PUSH DE
 828  50A7 C5               PUSH BC
 829  50A8 F5               PUSH AF
 830  50A9 ED 7B 56 50      LD SP, (GENCAL_VAR_SP)
 831  50AD FB               EI
 832  50AE E1               POP HL
 833  50AF C9           	RET
 834  50B0
 835  50B0              .EXXDECALL:
 836  50B0 D5               PUSH DE
 837  50B1 D9               EXX
 838  50B2 C9               RET
 839  50B3              ; *******************************************************************************************************
 840  50B3
 841  50B3              ; *******************************************************************************************************
 842  50B3              ; function to handle CALL MEMVRM basic extension
 843  50B3              ; copies from RAM to VRAM
 844  50B3              ; _MEMVRM ( INT source,
 845  50B3              ;			INT destination,
 846  50B3              ;			INT count,
 847  50B3              ;			BYTE enable_ram, >0 = true
 848  50B3              ;			BYTE wait_vsync) >0 = treu
 849  50B3              ; enable_ram will put ram in page 0 also, page 1 is already there
 850  50B3              ; wait_vsync will issue HALT before copying
 851  50B3              MEMVRM:
 852  50B3              	; opening (
 853  50B3 CD 06 4F     	CALL CHKCHAR
 854  50B6 28           	DB '('
 855  50B7              	; get source address
 856  50B7 DD 21 2F 54  	LD IX, FRMQNT
 857  50BB CD 59 01     	CALL CALBAS
 858  50BE D5           	PUSH DE
 859  50BF              	; comma
 860  50BF CD 06 4F     	CALL CHKCHAR
 861  50C2 2C           	DB ','
 862  50C3              	; get destination address
 863  50C3 DD 21 2F 54  	LD IX, FRMQNT
 864  50C7 CD 59 01     	CALL CALBAS
 865  50CA D5           	PUSH DE
 866  50CB              	; comma
 867  50CB CD 06 4F     	CALL CHKCHAR
 868  50CE 2C           	DB ','
 869  50CF              	; get length
 870  50CF DD 21 2F 54  	LD IX, FRMQNT
 871  50D3 CD 59 01     	CALL CALBAS
 872  50D6 D5           	PUSH DE
 873  50D7              	; comma
 874  50D7 CD 06 4F     	CALL CHKCHAR
 875  50DA 2C           	DB ','
 876  50DB              	; get ROM/RAM
 877  50DB DD 21 1C 52  	LD IX, GETBYT
 878  50DF CD 59 01     	CALL CALBAS
 879  50E2 F5           	PUSH AF
 880  50E3              	; comma
 881  50E3 CD 06 4F     	CALL CHKCHAR
 882  50E6 2C           	DB ','
 883  50E7              	; get vsync wait
 884  50E7 DD 21 1C 52  	LD IX, GETBYT
 885  50EB CD 59 01     	CALL CALBAS
 886  50EE F5           	PUSH AF
 887  50EF              	; ending )
 888  50EF CD 06 4F     	CALL CHKCHAR
 889  50F2 29           	DB ')'
 890  50F3
 891  50F3                  ; save position in BASIC text
 892  50F3 E5           	PUSH HL
 893  50F4 DD E1        	POP IX
 894  50F6
 895  50F6              	; syntax ok
 896  50F6              	; wait for vsync if needed
 897  50F6 F1           	POP AF
 898  50F7 B7           	OR A
 899  50F8 28 03        	JR Z, .L1
 900  50FA FB               EI
 901  50FB 76           	HALT
 902  50FC F3               DI ; since interrupt can modify vram address
 903  50FD
 904  50FD              .L1:
 905  50FD              	; enable RAM in page 0 if needed
 906  50FD F1           	POP AF
 907  50FE B7           	OR A
 908  50FF              	; pop LDIR parameters and store away for later
 909  50FF C1           	POP BC
 910  5100 D1           	POP DE
 911  5101 E1           	POP HL
 912  5102 28 1A        	JR Z, .L2
 913  5104 D9           	EXX
 914  5105 AF               XOR A
 915  5106 CD A5 4D         CALL GET_PAGE_INFO
 916  5109 C5               PUSH BC
 917  510A D5               PUSH DE
 918  510B 3A 41 F3         LD A, (RAMAD0)
 919  510E 26 00            LD H, 0
 920  5110 CD EB 4D         CALL LOCAL_ENASLT
 921  5113 D9           	EXX
 922  5114 CD 25 51     	CALL .LDIRVM
 923  5117 D1               POP DE
 924  5118 C1               POP BC
 925  5119 CD DC 4D         CALL RESTORE_PAGE_INFO
 926  511C 18 03        	JR .L3
 927  511E
 928  511E              .L2:
 929  511E CD 25 51     	CALL .LDIRVM
 930  5121
 931  5121              .L3:
 932  5121 DD E5        	PUSH IX
 933  5123 E1           	POP HL
 934  5124 C9           	RET
 935  5125
 936  5125              .LDIRVM:
 937  5125 7B           	LD	A, E
 938  5126 D3 99        	OUT	(099H), A
 939  5128 7A           	LD	A, D
 940  5129 E6 3F        	AND	03FH
 941  512B F6 40        	OR	040H
 942  512D D3 99        	OUT	(099H), A
 943  512F
 944  512F              .L4:
 945  512F 7E               LD A, (HL)
 946  5130 D3 98            OUT (#98), A
 947  5132 23               INC HL
 948  5133 0B               DEC BC
 949  5134 79               LD A, C
 950  5135 B0               OR B
 951  5136 C2 2F 51         JP NZ, .L4
 952  5139 C9               RET
 953  513A              ; *******************************************************************************************************
 954  513A
 955  513A              ; *******************************************************************************************************
 956  513A              ; function to handle CALL VRMMEM basic extension
 957  513A              ; copies from RAM to VRAM
 958  513A              ; _VRMMEM ( INT source,
 959  513A              ;			INT destination,
 960  513A              ;			INT count,
 961  513A              ;			BYTE enable_ram, >0 = true
 962  513A              ;			BYTE wait_vsync) >0 = true
 963  513A              ; enable_ram will put ram in page 0 also, page 1 is already there
 964  513A              ; wait_vsync will issue HALT before copying
 965  513A              VRMMEM:
 966  513A              	; opening (
 967  513A CD 06 4F     	CALL CHKCHAR
 968  513D 28           	DB '('
 969  513E              	; get source address
 970  513E DD 21 2F 54  	LD IX, FRMQNT
 971  5142 CD 59 01     	CALL CALBAS
 972  5145 D5           	PUSH DE
 973  5146              	; comma
 974  5146 CD 06 4F     	CALL CHKCHAR
 975  5149 2C           	DB ','
 976  514A              	; get destination address
 977  514A DD 21 2F 54  	LD IX, FRMQNT
 978  514E CD 59 01     	CALL CALBAS
 979  5151 D5           	PUSH DE
 980  5152              	; comma
 981  5152 CD 06 4F     	CALL CHKCHAR
 982  5155 2C           	DB ','
 983  5156              	; get length
 984  5156 DD 21 2F 54  	LD IX, FRMQNT
 985  515A CD 59 01     	CALL CALBAS
 986  515D D5           	PUSH DE
 987  515E              	; comma
 988  515E CD 06 4F     	CALL CHKCHAR
 989  5161 2C           	DB ','
 990  5162              	; get ROM/RAM
 991  5162 DD 21 1C 52  	LD IX, GETBYT
 992  5166 CD 59 01     	CALL CALBAS
 993  5169 F5           	PUSH AF
 994  516A              	; comma
 995  516A CD 06 4F     	CALL CHKCHAR
 996  516D 2C           	DB ','
 997  516E              	; get vsync wait
 998  516E DD 21 1C 52  	LD IX, GETBYT
 999  5172 CD 59 01     	CALL CALBAS
1000  5175 F5           	PUSH AF
1001  5176              	; ending )
1002  5176 CD 06 4F     	CALL CHKCHAR
1003  5179 29           	DB ')'
1004  517A
1005  517A                  ; save position in BASIC text
1006  517A E5           	PUSH HL
1007  517B DD E1        	POP IX
1008  517D
1009  517D              	; syntax ok
1010  517D              	; wait for vsync if needed
1011  517D F1           	POP AF
1012  517E B7           	OR A
1013  517F 28 03        	JR Z, .L1
1014  5181 FB               EI
1015  5182 76           	HALT
1016  5183 F3               DI ; since interrupt can modify vram address
1017  5184
1018  5184              .L1:
1019  5184              	; enable RAM in page 0 if needed
1020  5184 F1           	POP AF
1021  5185 B7           	OR A
1022  5186              	; pop LDIR parameters and store away for later
1023  5186 C1           	POP BC
1024  5187 D1           	POP DE
1025  5188 E1           	POP HL
1026  5189 28 1A        	JR Z, .L2
1027  518B D9           	EXX
1028  518C AF               XOR A
1029  518D CD A5 4D         CALL GET_PAGE_INFO
1030  5190 C5               PUSH BC
1031  5191 D5               PUSH DE
1032  5192 3A 41 F3         LD A, (RAMAD0)
1033  5195 26 00            LD H, 0
1034  5197 CD EB 4D         CALL LOCAL_ENASLT
1035  519A D9           	EXX
1036  519B CD AC 51     	CALL .LDIRMV
1037  519E D1               POP DE
1038  519F C1               POP BC
1039  51A0 CD DC 4D         CALL RESTORE_PAGE_INFO
1040  51A3 18 03        	JR .L3
1041  51A5
1042  51A5              .L2:
1043  51A5 CD AC 51     	CALL .LDIRMV
1044  51A8
1045  51A8              .L3:
1046  51A8 DD E5        	PUSH IX
1047  51AA E1           	POP HL
1048  51AB C9           	RET
1049  51AC
1050  51AC              .LDIRMV:
1051  51AC 7D           	LD	A, L
1052  51AD D3 99        	OUT	(099H), A
1053  51AF 7C           	LD	A, H
1054  51B0 E6 3F        	AND	03FH
1055  51B2 F6 40        	OR	040H
1056  51B4 D3 99        	OUT	(099H), A
1057  51B6
1058  51B6              .L4:
1059  51B6 DB 98            IN A, (#98)
1060  51B8 12           	LD (DE), A
1061  51B9 13               INC DE
1062  51BA 0B               DEC BC
1063  51BB 79               LD A, C
1064  51BC B0               OR B
1065  51BD C2 B6 51         JP NZ, .L4
1066  51C0 C9               RET
1067  51C1              ; *******************************************************************************************************
1068  51C1
1069  51C1              ; *******************************************************************************************************
1070  51C1              ; H.TIMI function
1071  51C1              MBGE_HTIMI:
1072  51C1               EXPORT MBGE_HTIMI
1073  51C1 F5           	PUSH AF
1074  51C2 3A F5 4C     	LD A, (SOUND_ENABLED)
1075  51C5 B7           	OR A
1076  51C6 28 2A        	JR Z, .EXIT
1077  51C8
1078  51C8              	; enable page 2
1079  51C8 3E 02            LD A, 2
1080  51CA CD A5 4D         CALL GET_PAGE_INFO
1081  51CD C5               PUSH BC
1082  51CE D5               PUSH DE
1083  51CF 3A 43 F3         LD A, (RAMAD2)
1084  51D2 26 80            LD H, 080H
1085  51D4 CD EB 4D         CALL LOCAL_ENASLT
1086  51D7              	; enable page 0
1087  51D7 AF               XOR A
1088  51D8 CD A5 4D         CALL GET_PAGE_INFO
1089  51DB C5               PUSH BC
1090  51DC D5               PUSH DE
1091  51DD 3A 41 F3         LD A, (RAMAD0)
1092  51E0 26 00            LD H, 0
1093  51E2 CD EB 4D         CALL LOCAL_ENASLT
1094  51E5
1095  51E5 CD 31 42     	CALL PLY_AKG_PLAY
1096  51E8
1097  51E8              	; restore page 0
1098  51E8 D1               POP DE
1099  51E9 C1               POP BC
1100  51EA CD DC 4D         CALL RESTORE_PAGE_INFO
1101  51ED              	; restore page 2
1102  51ED D1               POP DE
1103  51EE C1               POP BC
1104  51EF CD DC 4D         CALL RESTORE_PAGE_INFO
1105  51F2
1106  51F2              .EXIT:
1107  51F2 F1           	POP AF
1108  51F3 C3 EE 4C     	JP ORIG.HTIMI
1109  51F6              ; *******************************************************************************************************
1110  51F6
1111  51F6              ; *******************************************************************************************************
1112  51F6              ; function to handle CALL SNDPLYINIT basic extension
1113  51F6              ; initializes sound player
1114  51F6              ; _SNDPLYINIT ( INT music_offset,
1115  51F6              ;				INT sfx_offset, can be -1 if no SFX
1116  51F6              ; will put ram in page 0 also, page 1 is already there
1117  51F6              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1118  51F6              SNDPLYINIT:
1119  51F6              	; opening (
1120  51F6 CD 06 4F     	CALL CHKCHAR
1121  51F9 28           	DB '('
1122  51FA              	; get music address
1123  51FA DD 21 2F 54  	LD IX, FRMQNT
1124  51FE CD 59 01     	CALL CALBAS
1125  5201 D5           	PUSH DE
1126  5202              	; comma
1127  5202 CD 06 4F     	CALL CHKCHAR
1128  5205 2C           	DB ','
1129  5206              	; get sfx address
1130  5206 DD 21 2F 54  	LD IX, FRMQNT
1131  520A CD 59 01     	CALL CALBAS
1132  520D D5           	PUSH DE
1133  520E              	; ending )
1134  520E CD 06 4F     	CALL CHKCHAR
1135  5211 29           	DB ')'
1136  5212
1137  5212                  ; save position in BASIC text
1138  5212 44           	LD B, H
1139  5213 4D           	LD C, L
1140  5214
1141  5214              	; pop LDIR parameters and store away for later
1142  5214 D1           	POP DE ; sfx address
1143  5215 E1           	POP HL ; music address
1144  5216 C5           	PUSH BC ; basic text location
1145  5217 D9           	EXX
1146  5218 AF               XOR A
1147  5219 CD A5 4D         CALL GET_PAGE_INFO
1148  521C C5               PUSH BC
1149  521D D5               PUSH DE
1150  521E 3A 41 F3         LD A, (RAMAD0)
1151  5221 26 00            LD H, 0
1152  5223 CD EB 4D         CALL LOCAL_ENASLT
1153  5226 D9           	EXX
1154  5227
1155  5227 D5           	PUSH DE
1156  5228 AF           	XOR A
1157  5229              	; HL = music location
1158  5229 CD 60 41     	CALL PLY_AKG_INIT
1159  522C 3E 01        	LD A, 1
1160  522E 32 F3 4C     	LD (MUSIC_INIT_STATUS), A
1161  5231
1162  5231 E1           	POP HL
1163  5232 23           	INC HL
1164  5233 7D           	LD A, L
1165  5234 B4           	OR H
1166  5235 28 09        	JR Z,.L1
1167  5237 2B           	DEC HL
1168  5238 CD 1B 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1169  523B 3E 01        	LD A, 1
1170  523D 32 F4 4C     	LD (SFX_INIT_STATUS), A
1171  5240              .L1:
1172  5240 D1               POP DE
1173  5241 C1               POP BC
1174  5242 CD DC 4D         CALL RESTORE_PAGE_INFO
1175  5245
1176  5245 E1           	POP HL
1177  5246 C9           	RET
1178  5247              ; *******************************************************************************************************
1179  5247
1180  5247              ; *******************************************************************************************************
1181  5247              ; function to handle CALL SNDPLYON basic extension
1182  5247              ; enables sound player
1183  5247              ; _SNDPLYON
1184  5247              ; sets SOUND_ENABLED variable to 1 if init call was done
1185  5247              ; if not throws out of data error
1186  5247              SNDPLYON:
1187  5247 3A F3 4C     	LD A, (MUSIC_INIT_STATUS)
1188  524A B7           	OR A
1189  524B 20 05        	JR NZ, .L1
1190  524D              	; player not initialized, throw error
1191  524D 1E 04        	LD E, 04 ; Out of DATA
1192  524F C3 1E 4F     	JP THROW_ERROR
1193  5252              .L1:
1194  5252 32 F5 4C     	LD (SOUND_ENABLED), A
1195  5255              	; disable key click
1196  5255 AF           	XOR A
1197  5256 32 DB F3     	LD (CLIKSW), A
1198  5259 C9           	RET
1199  525A              ; *******************************************************************************************************
1200  525A
1201  525A              ; *******************************************************************************************************
1202  525A              ; function to handle CALL SNDPLYOFF basic extension
1203  525A              ; disables sound player
1204  525A              ; _SNDPLYOFF
1205  525A              ; sets SOUND_ENABLED variable to 0
1206  525A              ; calls AKG to stop music and SFX on all channels if initialized
1207  525A              SNDPLYOFF:
1208  525A 3A F5 4C     	LD A, (SOUND_ENABLED)
1209  525D B7           	OR A
1210  525E C8           	RET Z ; already stopped
1211  525F AF           	XOR A
1212  5260 32 F5 4C     	LD (SOUND_ENABLED), A
1213  5263 E5           	PUSH HL
1214  5264 CD 1F 42     	CALL PLY_AKG_STOP
1215  5267 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1216  526A B7           	OR A
1217  526B 28 0E        	JR Z, .EXIT ; SFX not in use
1218  526D AF           	XOR A
1219  526E CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1220  5271 3E 01        	LD A, 1
1221  5273 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1222  5276 3E 02        	LD A, 2
1223  5278 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1224  527B              .EXIT:
1225  527B E1           	POP HL
1226  527C C9           	RET
1227  527D              ; *******************************************************************************************************
1228  527D
1229  527D              ; *******************************************************************************************************
1230  527D              ; function to handle CALL SNDSFX basic extension
1231  527D              ; plays a sound effect
1232  527D              ; _SNDSFX ( BYTE sfx_number, >0
1233  527D              ;			BYTE channel, = 0,1 or 2
1234  527D              ;			BYTE inverted_volume = 0-16, 0 being full volume
1235  527D              ; will put ram in page 0 also, page 1 is already there
1236  527D              ; if sound off throws illegal function call
1237  527D              ; if sfx not initialized, throws out of data
1238  527D              SNDSFX:
1239  527D              	; opening (
1240  527D CD 06 4F     	CALL CHKCHAR
1241  5280 28           	DB '('
1242  5281              	; get sfx_number
1243  5281 DD 21 1C 52  	LD IX, GETBYT
1244  5285 CD 59 01     	CALL CALBAS
1245  5288 D5           	PUSH DE
1246  5289              	; comma
1247  5289 CD 06 4F     	CALL CHKCHAR
1248  528C 2C           	DB ','
1249  528D              	; get sfx address
1250  528D DD 21 1C 52  	LD IX, GETBYT
1251  5291 CD 59 01     	CALL CALBAS
1252  5294 D5           	PUSH DE
1253  5295              	; comma
1254  5295 CD 06 4F     	CALL CHKCHAR
1255  5298 2C           	DB ','
1256  5299              	; get inverted volume
1257  5299 DD 21 1C 52  	LD IX, GETBYT
1258  529D CD 59 01     	CALL CALBAS
1259  52A0 D5           	PUSH DE
1260  52A1              	; ending )
1261  52A1 CD 06 4F     	CALL CHKCHAR
1262  52A4 29           	DB ')'
1263  52A5
1264  52A5 3A F5 4C     	LD A, (SOUND_ENABLED)
1265  52A8 B7           	OR A
1266  52A9 20 05        	JR NZ, .L1
1267  52AB              	; sound disabled, throw illegal function call
1268  52AB 1E 05        	LD E, 5
1269  52AD C3 1E 4F     	JP THROW_ERROR
1270  52B0              .L1:
1271  52B0 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1272  52B3 B7           	OR A
1273  52B4 20 05        	JR NZ, .L2
1274  52B6              	; sfx data not initialized, throw out of data
1275  52B6 1E 04        	LD E, 4
1276  52B8 C3 1E 4F     	JP THROW_ERROR
1277  52BB              .L2:
1278  52BB              	; pop  parameters and store away for later
1279  52BB D1           	POP DE ; inverted volume
1280  52BC 43           	LD B, E
1281  52BD D1           	POP DE ; channel
1282  52BE 4B           	LD C, E
1283  52BF D1           	POP DE
1284  52C0 7B           	LD A, E
1285  52C1 08           	EX AF, AF'
1286  52C2 E5           	PUSH HL ; basic text location
1287  52C3 D9           	EXX
1288  52C4 AF               XOR A
1289  52C5 CD A5 4D         CALL GET_PAGE_INFO
1290  52C8 C5               PUSH BC
1291  52C9 D5               PUSH DE
1292  52CA 3A 41 F3         LD A, (RAMAD0)
1293  52CD 26 00            LD H, 0
1294  52CF CD EB 4D         CALL LOCAL_ENASLT
1295  52D2 D9           	EXX
1296  52D3 08           	EX AF, AF'
1297  52D4 CD 1F 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1298  52D7
1299  52D7 D1               POP DE
1300  52D8 C1               POP BC
1301  52D9 CD DC 4D         CALL RESTORE_PAGE_INFO
1302  52DC
1303  52DC E1           	POP HL
1304  52DD C9           	RET
1305  52DE              ; *******************************************************************************************************
1306  52DE
1307  52DE              EXT_END:
1308  52DE
# file closed: asm\main.asm
