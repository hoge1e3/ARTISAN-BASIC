# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; control variables to include/exclude parts of code
   4  4000              SOUND_CMDS	 	EQU 1
   5  4000              RAM_CMDS 		EQU 1
   6  4000              VRAM_CMDS 		EQU 1
   7  4000              BLIT_CMDS		EQU 1
   8  4000              SPRITE_CMDS 	EQU 1
   9  4000              GENCAL_CMD		EQU 1
  10  4000              TILE_CMDS		EQU 1
  11  4000              BOX_CMDS		EQU 1
  12  4000              ANIM_CMDS		EQU 1
  13  4000
  14  4000               DEFINE CMDS_WITH_PARAMETERS
  15  4000
  16  4000              CHPUT   EQU     #A2
  17  4000              CALBAS	EQU		#159
  18  4000              ERRHAND EQU     #406F
  19  4000              FRMEVL  EQU     #4C64
  20  4000              FRESTR	EQU		#67D0
  21  4000              ; FRMQNT = formula quantificator
  22  4000              ; input HL=pointer to current program expression
  23  4000              ; output HL=next address
  24  4000              ; output DE=integer datum
  25  4000              FRMQNT	EQU		#542F
  26  4000              ; GETBYT = get byte parameter
  27  4000              ; input HL=pointer to current program expression
  28  4000              ; output HL=next address
  29  4000              ; output A=E=byte read
  30  4000              GETBYT		EQU		#521C
  31  4000              CHRGTR  	EQU     #4666
  32  4000              PTRGET		EQU 	#5EA4
  33  4000              SUBFLG		EQU		#F6A5
  34  4000              SYNCHR		EQU		#558C
  35  4000              VALTYP  	EQU     #F663
  36  4000              USR     	EQU     #F7F8
  37  4000              PROCNM		EQU		#FD89
  38  4000              BIOS_FILVRM EQU     #0056
  39  4000              CLIKSW		EQU		#F3DB
  40  4000              ATRBAS		EQU		#F928
  41  4000              GRPCGP		EQU		#F3CB
  42  4000
  43  4000              RAMAD0	EQU	#F341	; Main-RAM Slot (00000h~03FFFh)
  44  4000              RAMAD1	EQU	#F342	; Main-RAM Slot (04000h~07FFFh)
  45  4000              RAMAD2	EQU	#F343	; Main-RAM Slot (08000h~0BFFFh)
  46  4000              RAMAD3	EQU	#F344	; Main-RAM Slot (0C000h~0FFFFh)
  47  4000              EXPTBL	EQU #FCC1
  48  4000              SCRMOD	EQU #FCAF ; current screen mode
  49  4000              REG1SAV EQU #F3E0 ; VDP(1)
  50  4000              JIFFY	EQU #FC9E
  51  4000              GRPPAT	EQU #F3CF ; SCREEN 2 sprite generator table address
  52  4000              T32PAT	EQU #F3C5 ; SCREEN 1 sprite generator table address
  53  4000
  54  4000              ; BASIC error codes
  55  4000              ;01 NEXT without FOR
  56  4000              ;02 Syntax error
  57  4000              ;03 RETURN without GOSUB
  58  4000              ;04 Out of DATA
  59  4000              ;05 Illegal function call
  60  4000              ;06 Overflow
  61  4000              ;07 Out of memory
  62  4000              ;08 Undefined line number
  63  4000              ;09 Subscript out of range
  64  4000              ;10 Redimensioned array
  65  4000              ;11 Division by zero
  66  4000              ;12 Illegal direct
  67  4000              ;13 Type mismatch
  68  4000              ;14 Out of string space
  69  4000              ;15 String too long
  70  4000              ;16 String formula too complex
  71  4000              ;17 Can't CONTINUE
  72  4000              ;18 Undefined user function
  73  4000              ;19 Device I/O error
  74  4000              ;20 Verify error
  75  4000              ;21 No RESUME
  76  4000              ;22 RESUME without error
  77  4000              ;23 Unprintable error
  78  4000              ;24 Missing operand
  79  4000              ;25 Line buffer overflow
  80  4000              ;50 FIELD overflow
  81  4000              ;51 Internal error
  82  4000              ;52 Bad file number
  83  4000              ;53 File not found
  84  4000              ;54 File already open
  85  4000              ;55 Input past end
  86  4000              ;56 Bad file name
  87  4000              ;57 Direct statement in file
  88  4000              ;58 Sequential I/O only
  89  4000              ;59 File not OPEN
  90  4000
  91  4000
  92  4000               ; simulate cartridge with BASIC extension
  93  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  93  4004 C7 56 00 00
  93  4008 00 00 00 00
  93  400C 00 00 00 00
  94  4010
  95  4010              ; this location #4010 stores last location used by basic extension
  96  4010              ; free memory after that point
  97  4010              FREEMEMPTR:
  98  4010 6A 5F         DW EXT_END
  99  4012
 100  4012              ; this location #4012 stores extension version in DAA format
 101  4012              ; first byte is major version and second minor
 102  4012              VERSION:
 103  4012 00 70         DB #00, #70
 104  4014
 105  4014              ; binary included AKG player compiled at #4014
 106  4014               IF (SOUND_CMDS == 1)
 107  4014              	INCBIN "bin/AKG.bin"
 108  4CF0              	INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CF0              MAIN_PLAYER_START EQU 04014H
   2+ 4CF0              PLY_AKG_START EQU 04014H
   3+ 4CF0              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401DH
   4+ 4CF0              PLY_AKG_INITSOUNDEFFECTS EQU 0401DH
   5+ 4CF0              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 04021H
   6+ 4CF0              PLY_AKG_PLAYSOUNDEFFECT EQU 04021H
   7+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04022H
   8+ 4CF0              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04022H
   9+ 4CF0              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04049H
  10+ 4CF0              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04049H
  11+ 4CF0              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04057H
  12+ 4CF0              PLY_AKG_PSES_PLAY EQU 04090H
  13+ 4CF0              PLY_AKG_PSES_READFIRSTBYTE EQU 04099H
  14+ 4CF0              PLY_AKG_PSES_S_ENDORLOOP EQU 040B1H
  15+ 4CF0              PLY_AKG_PSES_S_LOOP EQU 040BCH
  16+ 4CF0              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C2H
  17+ 4CF0              PLY_AKG_PSES_NOTREACHED EQU 040D5H
  18+ 4CF0              PLY_AKG_PSES_HARDWAREONLY EQU 040D9H
  19+ 4CF0              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040E0H
  20+ 4CF0              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F2H
  21+ 4CF0              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FCH
  22+ 4CF0              PLY_AKG_PSES_H_AFTERRETRIG EQU 04106H
  23+ 4CF0              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 0411AH
  24+ 4CF0              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411FH
  25+ 4CF0              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04127H
  26+ 4CF0              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04132H
  27+ 4CF0              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413EH
  28+ 4CF0              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 04140H
  29+ 4CF0              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04146H
  30+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 0414AH
  31+ 4CF0              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 0414AH
  32+ 4CF0              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414CH
  33+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414CH
  34+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414CH
  35+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414DH
  36+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414EH
  37+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04152H
  38+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04152H
  39+ 4CF0              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04152H
  40+ 4CF0              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 0415AH
  41+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04162H
  42+ 4CF0              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04162H
  43+ 4CF0              PLY_AKG_INIT EQU 04162H
  44+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04162H
  45+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 04190H
  46+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A4H
  47+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B6H
  48+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D5H
  49+ 4CF0              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E2H
  50+ 4CF0              PLY_AKG_INIT_READWORDSANDFILL EQU 041E8H
  51+ 4CF0              PLY_AKG_INITTABLE0 EQU 041EBH
  52+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041EBH
  53+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04205H
  54+ 4CF0              PLY_AKG_INITTABLE0_END EQU 04205H
  55+ 4CF0              PLY_AKG_INITTABLE1 EQU 04205H
  56+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04205H
  57+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04209H
  58+ 4CF0              PLY_AKG_INITTABLE1_END EQU 04209H
  59+ 4CF0              PLY_AKG_INITTABLEORA EQU 04209H
  60+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04209H
  61+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 04221H
  62+ 4CF0              PLY_AKG_INITTABLEORA_END EQU 04221H
  63+ 4CF0              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 04221H
  64+ 4CF0              PLY_AKG_STOP EQU 04221H
  65+ 4CF0              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04233H
  66+ 4CF0              PLY_AKG_PLAY EQU 04233H
  67+ 4CF0              PLY_AKG_TICKDECREASINGCOUNTER EQU 0423BH
  68+ 4CF0              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 04241H
  69+ 4CF0              PLY_AKG_READLINKER EQU 04246H
  70+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04246H
  71+ 4CF0              PLY_AKG_READLINKER_PTLINKER EQU 04246H
  72+ 4CF0              PLY_AKG_READLINKER_NOLOOP EQU 04251H
  73+ 4CF0              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 0428AH
  74+ 4CF0              PLY_AKG_READLINE EQU 0428DH
  75+ 4CF0              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428DH
  76+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04293H
  77+ 4CF0              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04293H
  78+ 4CF0              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 042A0H
  79+ 4CF0              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A4H
  80+ 4CF0              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A7H
  81+ 4CF0              PLY_AKG_SPEEDTRACK_END EQU 042AAH
  82+ 4CF0              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042AAH
  83+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042B0H
  84+ 4CF0              PLY_AKG_EVENTTRACK_PTTRACK EQU 042B0H
  85+ 4CF0              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BDH
  86+ 4CF0              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042C1H
  87+ 4CF0              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C4H
  88+ 4CF0              PLY_AKG_EVENTTRACK_END EQU 042C7H
  89+ 4CF0              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C7H
  90+ 4CF0              PLY_AKG_CHANNEL1_READTRACK EQU 042D3H
  91+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D3H
  92+ 4CF0              PLY_AKG_CHANNEL1_PTTRACK EQU 042D3H
  93+ 4CF0              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042EEH
  94+ 4CF0              PLY_AKG_CHANNEL1_WAIT EQU 042F9H
  95+ 4CF0              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 04300H
  96+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 04300H
  97+ 4CF0              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 04300H
  98+ 4CF0              PLY_AKG_CHANNEL1_NOTE EQU 04309H
  99+ 4CF0              PLY_AKG_BASENOTEINDEX EQU 04309H
 100+ 4CF0              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 0430BH
 101+ 4CF0              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 0430BH
 102+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 0431BH
 103+ 4CF0              PLY_AKG_INSTRUMENTSTABLE EQU 0431BH
 104+ 4CF0              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432DH
 105+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433DH
 106+ 4CF0              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04365H
 107+ 4CF0              PLY_AKG_CHANNEL1_READCELLEND EQU 04368H
 108+ 4CF0              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04368H
 109+ 4CF0              PLY_AKG_CHANNEL2_READTRACK EQU 04374H
 110+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04374H
 111+ 4CF0              PLY_AKG_CHANNEL2_PTTRACK EQU 04374H
 112+ 4CF0              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438FH
 113+ 4CF0              PLY_AKG_CHANNEL2_WAIT EQU 0439AH
 114+ 4CF0              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 043A1H
 115+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 043A1H
 116+ 4CF0              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 043A1H
 117+ 4CF0              PLY_AKG_CHANNEL2_NOTE EQU 043AAH
 118+ 4CF0              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043AFH
 119+ 4CF0              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043AFH
 120+ 4CF0              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043D1H
 121+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043E1H
 122+ 4CF0              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04409H
 123+ 4CF0              PLY_AKG_CHANNEL2_READCELLEND EQU 0440CH
 124+ 4CF0              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440CH
 125+ 4CF0              PLY_AKG_CHANNEL3_READTRACK EQU 04418H
 126+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04418H
 127+ 4CF0              PLY_AKG_CHANNEL3_PTTRACK EQU 04418H
 128+ 4CF0              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04433H
 129+ 4CF0              PLY_AKG_CHANNEL3_WAIT EQU 0443EH
 130+ 4CF0              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04445H
 131+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04445H
 132+ 4CF0              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04445H
 133+ 4CF0              PLY_AKG_CHANNEL3_NOTE EQU 0444EH
 134+ 4CF0              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04453H
 135+ 4CF0              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04453H
 136+ 4CF0              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04475H
 137+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04485H
 138+ 4CF0              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ADH
 139+ 4CF0              PLY_AKG_CHANNEL3_READCELLEND EQU 044B0H
 140+ 4CF0              PLY_AKG_CURRENTSPEED EQU 044B0H
 141+ 4CF0              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B2H
 142+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B5H
 143+ 4CF0              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B5H
 144+ 4CF0              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B8H
 145+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044BBH
 146+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044BBH
 147+ 4CF0              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C7H
 148+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CEH
 149+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044D1H
 150+ 4CF0              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D7H
 151+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044DAH
 152+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044DAH
 153+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E8H
 154+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EDH
 155+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F8H
 156+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044FBH
 157+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044FBH
 158+ 4CF0              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FEH
 159+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 04501H
 160+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE EQU 04501H
 161+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 0450AH
 162+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04514H
 163+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04517H
 164+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04517H
 165+ 4CF0              PLY_AKG_CHANNEL1_PITCH EQU 04517H
 166+ 4CF0              PLY_AKG_CHANNEL1_ISPITCH EQU 0451AH
 167+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451FH
 168+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451FH
 169+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04523H
 170+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04525H
 171+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04527H
 172+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452EH
 173+ 4CF0              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452FH
 174+ 4CF0              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04532H
 175+ 4CF0              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04532H
 176+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454EH
 177+ 4CF0              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454EH
 178+ 4CF0              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 0455BH
 179+ 4CF0              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455FH
 180+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456FH
 181+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456FH
 182+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 04570H
 183+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 04571H
 184+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04573H
 185+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04573H
 186+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04573H
 187+ 4CF0              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04574H
 188+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04575H
 189+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04577H
 190+ 4CF0              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04577H
 191+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04577H
 192+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04577H
 193+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04577H
 194+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_END EQU 0457AH
 195+ 4CF0              PLY_AKG_CHANNEL1_PITCH_END EQU 0457CH
 196+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04584H
 197+ 4CF0              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04584H
 198+ 4CF0              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04587H
 199+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 0458AH
 200+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 0458AH
 201+ 4CF0              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04596H
 202+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459DH
 203+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 045A0H
 204+ 4CF0              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A6H
 205+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A9H
 206+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A9H
 207+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B7H
 208+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BCH
 209+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C7H
 210+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045CAH
 211+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045CAH
 212+ 4CF0              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CDH
 213+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045D0H
 214+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045D0H
 215+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D9H
 216+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E3H
 217+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E6H
 218+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E6H
 219+ 4CF0              PLY_AKG_CHANNEL2_PITCH EQU 045E6H
 220+ 4CF0              PLY_AKG_CHANNEL2_ISPITCH EQU 045E9H
 221+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045EEH
 222+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045EEH
 223+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F2H
 224+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F4H
 225+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F6H
 226+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FDH
 227+ 4CF0              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FEH
 228+ 4CF0              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04601H
 229+ 4CF0              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 04601H
 230+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461DH
 231+ 4CF0              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461DH
 232+ 4CF0              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 0462AH
 233+ 4CF0              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462EH
 234+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463EH
 235+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463EH
 236+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463FH
 237+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 04640H
 238+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04642H
 239+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04642H
 240+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04642H
 241+ 4CF0              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04643H
 242+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04644H
 243+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04646H
 244+ 4CF0              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04646H
 245+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04646H
 246+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04646H
 247+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04646H
 248+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_END EQU 04649H
 249+ 4CF0              PLY_AKG_CHANNEL2_PITCH_END EQU 0464BH
 250+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04653H
 251+ 4CF0              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04653H
 252+ 4CF0              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04656H
 253+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04659H
 254+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04659H
 255+ 4CF0              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04665H
 256+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466CH
 257+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466FH
 258+ 4CF0              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04675H
 259+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04678H
 260+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04678H
 261+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04686H
 262+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 0468BH
 263+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04696H
 264+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04699H
 265+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04699H
 266+ 4CF0              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469CH
 267+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469FH
 268+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469FH
 269+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A8H
 270+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B2H
 271+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B5H
 272+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B5H
 273+ 4CF0              PLY_AKG_CHANNEL3_PITCH EQU 046B5H
 274+ 4CF0              PLY_AKG_CHANNEL3_ISPITCH EQU 046B8H
 275+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BDH
 276+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BDH
 277+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046C1H
 278+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C3H
 279+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C5H
 280+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CCH
 281+ 4CF0              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CDH
 282+ 4CF0              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046D0H
 283+ 4CF0              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046D0H
 284+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046ECH
 285+ 4CF0              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046ECH
 286+ 4CF0              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F9H
 287+ 4CF0              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FDH
 288+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470DH
 289+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470DH
 290+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470EH
 291+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470FH
 292+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 04711H
 293+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 04711H
 294+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 04711H
 295+ 4CF0              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04712H
 296+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04713H
 297+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04715H
 298+ 4CF0              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04715H
 299+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04715H
 300+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04715H
 301+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04715H
 302+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_END EQU 04718H
 303+ 4CF0              PLY_AKG_CHANNEL3_PITCH_END EQU 0471AH
 304+ 4CF0              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04726H
 305+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04726H
 306+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04726H
 307+ 4CF0              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04729H
 308+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 0472BH
 309+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 04731H
 310+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04734H
 311+ 4CF0              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04734H
 312+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04737H
 313+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 04740H
 314+ 4CF0              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04748H
 315+ 4CF0              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04755H
 316+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04755H
 317+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04755H
 318+ 4CF0              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04758H
 319+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 0475AH
 320+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 04760H
 321+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04763H
 322+ 4CF0              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04763H
 323+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04766H
 324+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476FH
 325+ 4CF0              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04777H
 326+ 4CF0              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04785H
 327+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04785H
 328+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04785H
 329+ 4CF0              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04788H
 330+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 0478AH
 331+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 04790H
 332+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04793H
 333+ 4CF0              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04793H
 334+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04796H
 335+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479FH
 336+ 4CF0              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A7H
 337+ 4CF0              PLY_AKG_SENDPSGREGISTERS EQU 047B6H
 338+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BEH
 339+ 4CF0              PLY_AKG_PSGREG01_INSTR EQU 047BEH
 340+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CEH
 341+ 4CF0              PLY_AKG_PSGREG23_INSTR EQU 047CEH
 342+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DFH
 343+ 4CF0              PLY_AKG_PSGREG45_INSTR EQU 047DFH
 344+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047F0H
 345+ 4CF0              PLY_AKG_PSGREG6_8_INSTR EQU 047F0H
 346+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 04801H
 347+ 4CF0              PLY_AKG_PSGREG9_10_INSTR EQU 04801H
 348+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04812H
 349+ 4CF0              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04812H
 350+ 4CF0              PLY_AKG_PSGREG13_OLDVALUE EQU 04827H
 351+ 4CF0              PLY_AKG_RETRIG EQU 04829H
 352+ 4CF0              PLY_AKG_PSGREG13_INSTR EQU 0482BH
 353+ 4CF0              PLY_AKG_PSGREG13_END EQU 0483AH
 354+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 0483AH
 355+ 4CF0              PLY_AKG_SAVESP EQU 0483AH
 356+ 4CF0              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483EH
 357+ 4CF0              PLY_AKG_CHANNEL1_READEFFECTS EQU 04846H
 358+ 4CF0              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04853H
 359+ 4CF0              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04853H
 360+ 4CF0              PLY_AKG_CHANNEL2_READEFFECTS EQU 0485BH
 361+ 4CF0              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04868H
 362+ 4CF0              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04868H
 363+ 4CF0              PLY_AKG_CHANNEL3_READEFFECTS EQU 04870H
 364+ 4CF0              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 0487BH
 365+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS EQU 0487BH
 366+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 0488AH
 367+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 0488AH
 368+ 4CF0              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 04891H
 369+ 4CF0              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 048A1H
 370+ 4CF0              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 048A1H
 371+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A8H
 372+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A8H
 373+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048ABH
 374+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B4H
 375+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B4H
 376+ 4CF0              PLY_AKG_READINSTRUMENTCELL EQU 048BAH
 377+ 4CF0              PLY_AKG_NOSOFTNOHARD EQU 048C7H
 378+ 4CF0              PLY_AKG_NSNH_NONOISE EQU 048DCH
 379+ 4CF0              PLY_AKG_SOFT EQU 048DFH
 380+ 4CF0              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E6H
 381+ 4CF0              PLY_AKG_S_NOTSIMPLE EQU 048EEH
 382+ 4CF0              PLY_AKG_S_AFTERSIMPLETEST EQU 048F1H
 383+ 4CF0              PLY_AKG_HARDTOSOFT EQU 048FEH
 384+ 4CF0              PLY_AKG_HS_JUMPRATIO EQU 04909H
 385+ 4CF0              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04936H
 386+ 4CF0              PLY_AKG_ENDWITHOUTLOOP EQU 04938H
 387+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04938H
 388+ 4CF0              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04938H
 389+ 4CF0              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 04940H
 390+ 4CF0              PLY_AKG_SH_JUMPRATIO EQU 0494DH
 391+ 4CF0              PLY_AKG_SH_JUMPRATIOEND EQU 0496EH
 392+ 4CF0              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497DH
 393+ 4CF0              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04983H
 394+ 4CF0              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499DH
 395+ 4CF0              PLY_AKG_H_RETRIGEND EQU 049AFH
 396+ 4CF0              PLY_AKG_H_AFTERRETRIG EQU 049B0H
 397+ 4CF0              PLY_AKG_ENDWITHLOOP EQU 049C2H
 398+ 4CF0              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C9H
 399+ 4CF0              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DFH
 400+ 4CF0              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EDH
 401+ 4CF0              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FDH
 402+ 4CF0              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A0BH
 403+ 4CF0              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A1AH
 404+ 4CF0              PLY_AKG_SHOHS_RETRIGEND EQU 04A29H
 405+ 4CF0              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A2AH
 406+ 4CF0              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3CH
 407+ 4CF0              PLY_AKG_EFFECTTABLE EQU 04A4AH
 408+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A4AH
 409+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6EH
 410+ 4CF0              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6EH
 411+ 4CF0              PLY_AKG_EFFECT_RESET EQU 04A71H
 412+ 4CF0              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A73H
 413+ 4CF0              PLY_AKG_EFFECT_VOLUME EQU 04A8EH
 414+ 4CF0              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A9AH
 415+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04AA0H
 416+ 4CF0              PLY_AKG_ARPEGGIOSTABLE EQU 04AA0H
 417+ 4CF0              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC7H
 418+ 4CF0              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACEH
 419+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD4H
 420+ 4CF0              PLY_AKG_PITCHESTABLE EQU 04AD4H
 421+ 4CF0              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AFBH
 422+ 4CF0              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B02H
 423+ 4CF0              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B13H
 424+ 4CF0              PLY_AKG_EFFECT_PITCHDOWN EQU 04B1AH
 425+ 4CF0              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B2AH
 426+ 4CF0              PLY_AKG_EFFECT_PITCHUP EQU 04B3FH
 427+ 4CF0              PLY_AKG_EFFECT_PITCHSTOP EQU 04B51H
 428+ 4CF0              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B58H
 429+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B82H
 430+ 4CF0              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B82H
 431+ 4CF0              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B9BH
 432+ 4CF0              PLY_AKG_EFFECT_GLIDESPEED EQU 04B9BH
 433+ 4CF0              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BADH
 434+ 4CF0              PLY_AKG_EFFECT_LEGATO EQU 04BC3H
 435+ 4CF0              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD7H
 436+ 4CF0              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDFH
 437+ 4CF0              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE7H
 438+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEFH
 439+ 4CF0              PLY_AKG_EVENT EQU 04BEFH
 440+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BF0H
 441+ 4CF0              PLY_AKG_PERIODTABLE EQU 04BF0H
 442+ 4CF0              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BF0H
 443+ 4CF0              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CF0H
 444+ 4CF0              PLY_AKG_PERIODTABLE_END EQU 04CF0H
 445+ 4CF0              PLY_AKG_END EQU 04CF0H
 446+ 4CF0              MAIN_PLAYER_END EQU 04CF0H
 447+ 4CF0              TESTEREND EQU 04CF0H
 448+ 4CF0
# file closed: ./symbol/AKG.sym
 109  4CF0               ENDIF
 110  4CF0
 111  4CF0               INCLUDE "VBLANK.asm"
# file opened: asm\VBLANK.asm
   1+ 4CF0              ORIG.HTIMI:
   2+ 4CF0 00 00 00 00  	DB 0, 0, 0, 0, 0
   2+ 4CF4 00
   3+ 4CF5               EXPORT ORIG.HTIMI
   4+ 4CF5
   5+ 4CF5              ; *******************************************************************************************************
   6+ 4CF5              ; interrupt handler when page 0 enabled
   7+ 4CF5              ; we are here only if one of the extended basic commands have paged in page 0
   8+ 4CF5              ; which means we arrived from BASIC so page 2 is already good
   9+ 4CF5              VBLANK:
  10+ 4CF5              	EXPORT VBLANK
  11+ 4CF5
  12+ 4CF5 F5               PUSH AF
  13+ 4CF6              	; is VDP originator ?
  14+ 4CF6 DB 99        	IN	A, (099H)
  15+ 4CF8 A7           	AND	A
  16+ 4CF9 F2 27 4D     	JP P, .EXIT
  17+ 4CFC
  18+ 4CFC               IF (SOUND_CMDS + SPRITE_CMDS > 0)
  19+ 4CFC C5               PUSH BC
  20+ 4CFD D5               PUSH DE
  21+ 4CFE E5               PUSH HL
  22+ 4CFF 08               EX AF, AF'
  23+ 4D00 D9               EXX
  24+ 4D01 F5               PUSH AF
  25+ 4D02 C5               PUSH BC
  26+ 4D03 D5               PUSH DE
  27+ 4D04 E5               PUSH HL
  28+ 4D05 DD E5            PUSH IX
  29+ 4D07 FD E5            PUSH IY
  30+ 4D09
  31+ 4D09               IF (SPRITE_CMDS == 1)
  32+ 4D09 CD 61 4D     	CALL PROCESS_SPRITES_AND_ANIMATIONS
  33+ 4D0C               ENDIF
  34+ 4D0C
  35+ 4D0C               IF (SOUND_CMDS == 1)
  36+ 4D0C 3A 7C 4D     	LD A, (SOUND_ENABLED)
  37+ 4D0F B7           	OR A
  38+ 4D10 C4 33 42     	CALL NZ,PLY_AKG_PLAY
  39+ 4D13               ENDIF
  40+ 4D13
  41+ 4D13                  ; increase JIFFY
  42+ 4D13 2A 9E FC         LD HL,(JIFFY)
  43+ 4D16 23               INC HL
  44+ 4D17 22 9E FC         LD (JIFFY),HL
  45+ 4D1A
  46+ 4D1A FD E1            POP IY
  47+ 4D1C DD E1            POP IX
  48+ 4D1E E1               POP HL
  49+ 4D1F D1               POP DE
  50+ 4D20 C1               POP BC
  51+ 4D21 F1               POP AF
  52+ 4D22 08               EX AF, AF'
  53+ 4D23 D9               EXX
  54+ 4D24 E1               POP HL
  55+ 4D25 D1               POP DE
  56+ 4D26 C1               POP BC
  57+ 4D27               ENDIF
  58+ 4D27
  59+ 4D27              .EXIT:
  60+ 4D27 F1           	POP AF
  61+ 4D28 FB           	EI
  62+ 4D29 ED 4D        	RETI
  63+ 4D2B              ; *******************************************************************************************************
  64+ 4D2B
  65+ 4D2B              ; *******************************************************************************************************
  66+ 4D2B              ; H.TIMI function
  67+ 4D2B              ; we can end up here from anywhere so page in both page 0 and 2
  68+ 4D2B              MBGE_HTIMI:
  69+ 4D2B               EXPORT MBGE_HTIMI
  70+ 4D2B
  71+ 4D2B               IF (SOUND_CMDS + SPRITE_CMDS > 0)
  72+ 4D2B
  73+ 4D2B F5           	PUSH AF
  74+ 4D2C
  75+ 4D2C              	; enable page 2
  76+ 4D2C 3E 02            LD A, 2
  77+ 4D2E CD F7 55         CALL GET_PAGE_INFO
  78+ 4D31 C5               PUSH BC
  79+ 4D32 D5               PUSH DE
  80+ 4D33 3A 43 F3         LD A, (RAMAD2)
  81+ 4D36 26 80            LD H, 080H
  82+ 4D38 CD 3E 56         CALL LOCAL_ENASLT
  83+ 4D3B              	; enable page 0
  84+ 4D3B AF               XOR A
  85+ 4D3C CD F7 55         CALL GET_PAGE_INFO
  86+ 4D3F C5               PUSH BC
  87+ 4D40 D5               PUSH DE
  88+ 4D41 3A 41 F3         LD A, (RAMAD0)
  89+ 4D44 26 00            LD H, 0
  90+ 4D46 CD 3E 56         CALL LOCAL_ENASLT
  91+ 4D49
  92+ 4D49               IF (SPRITE_CMDS == 1)
  93+ 4D49 CD 61 4D     	CALL PROCESS_SPRITES_AND_ANIMATIONS
  94+ 4D4C               ENDIF
  95+ 4D4C
  96+ 4D4C               IF (SOUND_CMDS == 1)
  97+ 4D4C 3A 7C 4D     	LD A, (SOUND_ENABLED)
  98+ 4D4F B7           	OR A
  99+ 4D50 C4 33 42     	CALL NZ,PLY_AKG_PLAY
 100+ 4D53               ENDIF
 101+ 4D53
 102+ 4D53              	; restore page 0
 103+ 4D53 D1               POP DE
 104+ 4D54 C1               POP BC
 105+ 4D55 CD 2E 56         CALL RESTORE_PAGE_INFO
 106+ 4D58              	; restore page 2
 107+ 4D58 D1               POP DE
 108+ 4D59 C1               POP BC
 109+ 4D5A CD 2E 56         CALL RESTORE_PAGE_INFO
 110+ 4D5D
 111+ 4D5D F1           	POP AF
 112+ 4D5E               ENDIF
 113+ 4D5E C3 F0 4C     	JP ORIG.HTIMI
 114+ 4D61              ; *******************************************************************************************************
 115+ 4D61
 116+ 4D61              ; *******************************************************************************************************
 117+ 4D61              ; function checks if the sprite system is initialized and what screen mode we are running
 118+ 4D61              ; also checks if some VRAM modifying command is running
 119+ 4D61              ; when that checks out calls sprite updates and animation processing
 120+ 4D61              PROCESS_SPRITES_AND_ANIMATIONS:
 121+ 4D61              	; check if initialized
 122+ 4D61 3A 7D 4D     	LD A, (SPRATR_INIT_STATUS)
 123+ 4D64 B7           	OR A
 124+ 4D65 C8           	RET Z
 125+ 4D66              	; check screen mode
 126+ 4D66 3A AF FC     	LD A, (SCRMOD)
 127+ 4D69 3D           	DEC A
 128+ 4D6A 28 02        	JR Z, .L0 ; screen 1
 129+ 4D6C 3D           	DEC A
 130+ 4D6D C0           	RET NZ ; not screen 2
 131+ 4D6E              .L0:
 132+ 4D6E                  ; check if anyone else is working with VRAM
 133+ 4D6E 3A 6B 54         LD A,(VRAM_UPDATE_IN_PROGRESS)
 134+ 4D71 B7               OR A
 135+ 4D72 C0               RET NZ
 136+ 4D73
 137+ 4D73 CD 92 4D         CALL SPRATR_UPDATE
 138+ 4D76
 139+ 4D76               IF (ANIM_CMDS == 1)
 140+ 4D76 CD 72 53         CALL PROCESS_ANIMATIONS
 141+ 4D79               ENDIF
 142+ 4D79 C9               RET
 143+ 4D7A              ; *******************************************************************************************************
# file closed: asm\VBLANK.asm
 112  4D7A
 113  4D7A               IF (SOUND_CMDS == 1)
 114  4D7A              MUSIC_INIT_STATUS:
 115  4D7A 00            DB 0
 116  4D7B              SFX_INIT_STATUS:
 117  4D7B 00            DB 0
 118  4D7C              SOUND_ENABLED:
 119  4D7C 00            DB 0
 120  4D7D               ENDIF
 121  4D7D
 122  4D7D               IF (SPRITE_CMDS == 1)
 123  4D7D               INCLUDE "SPRITES.asm"
# file opened: asm\SPRITES.asm
   1+ 4D7D              ; commands and variables related to sprites
   2+ 4D7D
   3+ 4D7D              SPRATR_INIT_STATUS:
   4+ 4D7D 00            DB 0
   5+ 4D7E              SPRATR_UPDATE_FLAG:
   6+ 4D7E 00 00         DW 0
   7+ 4D80              SPRATR_DATA:
   8+ 4D80 00 00         DW 0
   9+ 4D82              SPRFLICKER_ENABLED:
  10+ 4D82 00            DB 0
  11+ 4D83              ; to support sprite flicker
  12+ 4D83              FLICKER:
  13+ 4D83 00            DB 0
  14+ 4D84
  15+ 4D84              ; to temporarily store stack pointer
  16+ 4D84              TMPSP:
  17+ 4D84 00 00         DW 0
  18+ 4D86
  19+ 4D86              ; *******************************************************************************************************
  20+ 4D86              ; helper function gets pointer to n-th entry in sprite attributes
  21+ 4D86              ; changes HL,DE;
  22+ 4D86              GETnthSPRATTR:
  23+ 4D86 26 00            LD H,0
  24+ 4D88 6F               LD L,A
  25+ 4D89 CD F3 55         CALL HLx8
  26+ 4D8C ED 5B 80 4D      LD DE,(SPRATR_DATA)
  27+ 4D90 19               ADD HL,DE
  28+ 4D91 C9               RET
  29+ 4D92              ; *******************************************************************************************************
  30+ 4D92
  31+ 4D92              ; *******************************************************************************************************
  32+ 4D92              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
  33+ 4D92              ; struct {
  34+ 4D92              ; DW y
  35+ 4D92              ; DW x
  36+ 4D92              ; DW pattern (0-63)
  37+ 4D92              ; DW color
  38+ 4D92              ; } [32]
  39+ 4D92              ; will hide sprites whose location is outside of visible area
  40+ 4D92              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
  41+ 4D92              ; modifies AF, AF', BC, DE, HL
  42+ 4D92              SPRATR_UPDATE:
  43+ 4D92              	; check if update requested
  44+ 4D92 2A 7E 4D     	LD HL, (SPRATR_UPDATE_FLAG)
  45+ 4D95 7E           	LD A, (HL)
  46+ 4D96 B7           	OR A
  47+ 4D97 C8           	RET Z
  48+ 4D98              .L0:
  49+ 4D98 06 20        	LD B, 32 ; sprite number
  50+ 4D9A 0E 98        	LD C, #98 ; register for vdp data output
  51+ 4D9C              	; set VDP address
  52+ 4D9C 2A 28 F9     	LD HL, (ATRBAS)
  53+ 4D9F 3A 82 4D     	LD A, (SPRFLICKER_ENABLED)
  54+ 4DA2 B7           	OR A
  55+ 4DA3 28 03        	JR Z, .L3
  56+ 4DA5 3A 83 4D     	LD A, (FLICKER)
  57+ 4DA8              .L3:
  58+ 4DA8 5F           	LD E, A
  59+ 4DA9 08           	EX AF, AF'
  60+ 4DAA 7B           	LD A, E
  61+ 4DAB 87           	ADD A, A
  62+ 4DAC 87           	ADD A, A
  63+ 4DAD 16 00        	LD D, 0
  64+ 4DAF 5F           	LD E, A
  65+ 4DB0 19           	ADD HL, DE
  66+ 4DB1 CD E0 55     	CALL SETWRT_LOCAL
  67+ 4DB4 ED 73 84 4D  	LD (TMPSP), SP
  68+ 4DB8 ED 7B 80 4D  	LD SP, (SPRATR_DATA)
  69+ 4DBC
  70+ 4DBC              .LOOP:
  71+ 4DBC E1           	POP HL
  72+ 4DBD 24           	INC H
  73+ 4DBE 28 0D        	JR Z, .L1 ; negative number above -256
  74+ 4DC0 25           	DEC H
  75+ 4DC1 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
  76+ 4DC3 7D           	LD A, L
  77+ 4DC4 FE C0        	CP 192
  78+ 4DC6 30 10        	JR NC, .OUT3
  79+ 4DC8 3D           	DEC A ; due to VDP rule that top of screen is -1
  80+ 4DC9 57           	LD D, A
  81+ 4DCA C3 F1 4D     	JP .X
  82+ 4DCD              .L1:
  83+ 4DCD 7D           	LD A, L
  84+ 4DCE C6 10        	ADD 16
  85+ 4DD0 FA D8 4D     	JP M, .OUT3 ; below -16
  86+ 4DD3 2D           	DEC L ; due to VDP rule that top of screen is -1
  87+ 4DD4 55           	LD D, L
  88+ 4DD5 C3 F1 4D     	JP .X
  89+ 4DD8              .OUT3:
  90+ 4DD8 E1           	POP HL ; skip x value
  91+ 4DD9              .OUT2:
  92+ 4DD9 E1           	POP HL ; skip pattern
  93+ 4DDA E1           	POP HL ; skip color
  94+ 4DDB 3E D1        	LD A, #D1
  95+ 4DDD ED 79        	OUT (C), A ; sprite hidden
  96+ 4DDF 00          > NOP
  96+ 4DE0 00          > NOP
  96+ 4DE1 00          > NOP
  97+ 4DE2 ED 79        	OUT (C), A ; value unimportant
  98+ 4DE4 00          > NOP
  98+ 4DE5 00          > NOP
  98+ 4DE6 00          > NOP
  99+ 4DE7 ED 79        	OUT (C), A ; value unimportant
 100+ 4DE9 00          > NOP
 100+ 4DEA 00          > NOP
 100+ 4DEB 00          > NOP
 101+ 4DEC ED 79        	OUT (C), A ; value unimportant
 102+ 4DEE C3 1C 4E     	JP .NEXT
 103+ 4DF1              .X:
 104+ 4DF1 E1           	POP HL
 105+ 4DF2 24           	INC H
 106+ 4DF3 28 08        	JR Z, .L2
 107+ 4DF5 25           	DEC H
 108+ 4DF6 20 E1        	JR NZ, .OUT2
 109+ 4DF8 1E 00        	LD E, 0 ; EC bit
 110+ 4DFA C3 06 4E     	JP .XY
 111+ 4DFD              .L2:
 112+ 4DFD 7D           	LD A, L
 113+ 4DFE C6 20        	ADD 32
 114+ 4E00 FA D9 4D     	JP M, .OUT2
 115+ 4E03 6F           	LD L, A
 116+ 4E04 1E 80        	LD E, #80
 117+ 4E06              .XY:
 118+ 4E06 ED 51        	OUT (C), D
 119+ 4E08 3A E0 F3     	LD A, (REG1SAV)
 120+ 4E0B E6 02        	AND 2
 121+ 4E0D ED 69        	OUT (C), L
 122+ 4E0F E1           	POP HL ; pattern
 123+ 4E10 7D           	LD A, L
 124+ 4E11 28 02        	JR Z, .SMALLSPRITES
 125+ 4E13 87           	ADD A, A
 126+ 4E14 87           	ADD A, A ; needs to go at 4x
 127+ 4E15              .SMALLSPRITES:
 128+ 4E15 D3 98        	OUT (#98), A
 129+ 4E17 E1           	POP HL ; color
 130+ 4E18 7D           	LD A, L
 131+ 4E19 B3           	OR E
 132+ 4E1A D3 98        	OUT (#98), A
 133+ 4E1C              .NEXT:
 134+ 4E1C 08           	EX AF, AF'
 135+ 4E1D 3C           	INC A
 136+ 4E1E E6 1F        	AND 31
 137+ 4E20 C2 34 4E     	JP NZ, .NEXT2
 138+ 4E23 08           	EX AF, AF'
 139+ 4E24 2A 28 F9     	LD HL, (ATRBAS)
 140+ 4E27              	; CALL SETWRT_LOCAL not allowed as SP modified
 141+ 4E27 7D           	LD	A, L
 142+ 4E28 D3 99        	OUT	(099H), A
 143+ 4E2A 7C           	LD	A, H
 144+ 4E2B E6 3F        	AND	03FH
 145+ 4E2D F6 40        	OR	040H
 146+ 4E2F D3 99        	OUT	(099H), A
 147+ 4E31 C3 35 4E     	JP .NEXT3
 148+ 4E34              .NEXT2:
 149+ 4E34 08           	EX AF, AF'
 150+ 4E35              .NEXT3:
 151+ 4E35 10 85        	DJNZ .LOOP
 152+ 4E37 08           	EX AF, AF'
 153+ 4E38 3C           	INC A
 154+ 4E39 32 83 4D     	LD (FLICKER), A
 155+ 4E3C
 156+ 4E3C ED 7B 84 4D  	LD SP, (TMPSP)
 157+ 4E40 2A 7E 4D     	LD HL, (SPRATR_UPDATE_FLAG)
 158+ 4E43 36 00        	LD (HL), 0 ; zero out update flag
 159+ 4E45 C9           	RET
 160+ 4E46              ; *******************************************************************************************************
 161+ 4E46
 162+ 4E46              ; *******************************************************************************************************
 163+ 4E46              ; function to handle CALL SPRENABLE basic extension
 164+ 4E46              ; initializes sprites handler
 165+ 4E46              ; _SPRENABLE ( INT sprites_attributes_data,
 166+ 4E46              ;			   INT update_variable_location,
 167+ 4E46              ;			   INT sprite_flicker_enabled )
 168+ 4E46              ; expects both locations to be in range #8000+ or throws an error
 169+ 4E46              ; since these should be BASIC variables
 170+ 4E46              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA and SPRFLICKER_ENABLED
 171+ 4E46              SPRENABLE:
 172+ 4E46              	; opening (
 173+ 4E46 CD 04 57     	CALL CHKCHAR
 174+ 4E49 28           	DB '('
 175+ 4E4A              	; get address of sprite attribute table DIM SA%(3,31)
 176+ 4E4A DD 21 2F 54  	LD IX, FRMQNT
 177+ 4E4E CD 59 01     	CALL CALBAS
 178+ 4E51 D5           	PUSH DE
 179+ 4E52              	; comma
 180+ 4E52 CD 04 57     	CALL CHKCHAR
 181+ 4E55 2C           	DB ','
 182+ 4E56              	; get address of sprite update flag location
 183+ 4E56 DD 21 2F 54  	LD IX, FRMQNT
 184+ 4E5A CD 59 01     	CALL CALBAS
 185+ 4E5D D5           	PUSH DE
 186+ 4E5E              	; comma
 187+ 4E5E CD 04 57     	CALL CHKCHAR
 188+ 4E61 2C           	DB ','
 189+ 4E62              	; get flicker enabled flag
 190+ 4E62 DD 21 2F 54  	LD IX, FRMQNT
 191+ 4E66 CD 59 01     	CALL CALBAS
 192+ 4E69 D5           	PUSH DE
 193+ 4E6A              	; ending )
 194+ 4E6A CD 04 57     	CALL CHKCHAR
 195+ 4E6D 29           	DB ')'
 196+ 4E6E
 197+ 4E6E D1           	POP DE ; get flicker flag
 198+ 4E6F 7A           	LD A, D
 199+ 4E70 B3           	OR E
 200+ 4E71 32 82 4D     	LD (SPRFLICKER_ENABLED), A
 201+ 4E74
 202+ 4E74 D1           	POP DE ; update variable location
 203+ 4E75 CB 7A        	BIT 7, D ; is address >= &h8000
 204+ 4E77 20 05        	JR NZ, .L1
 205+ 4E79 1E 05        	LD E, 5 ; illegal function call
 206+ 4E7B C3 24 57     	JP THROW_ERROR
 207+ 4E7E              .L1:
 208+ 4E7E ED 53 7E 4D  	LD (SPRATR_UPDATE_FLAG), DE
 209+ 4E82 D1           	POP DE ; address of sprite attribute table
 210+ 4E83 CB 7A        	BIT 7, D ; is address >= &h8000
 211+ 4E85 20 05        	JR NZ, .L2
 212+ 4E87 1E 05        	LD E, 5 ; illegal function call
 213+ 4E89 C3 24 57     	JP THROW_ERROR
 214+ 4E8C              .L2:
 215+ 4E8C ED 53 80 4D  	LD (SPRATR_DATA), DE
 216+ 4E90 3E 01        	LD A, 1
 217+ 4E92 32 7D 4D     	LD (SPRATR_INIT_STATUS), A
 218+ 4E95 C9           	RET
 219+ 4E96              ; *******************************************************************************************************
 220+ 4E96
 221+ 4E96              ; *******************************************************************************************************
 222+ 4E96              ; function to handle CALL SPRDISABLE basic extension
 223+ 4E96              ; disables sprites handling
 224+ 4E96              ; _SPRDISABLE
 225+ 4E96              ; resets variable SPRATR_INIT_STATUS
 226+ 4E96              SPRDISABLE:
 227+ 4E96 AF           	XOR A
 228+ 4E97 32 7D 4D     	LD (SPRATR_INIT_STATUS), A
 229+ 4E9A C9           	RET
 230+ 4E9B              ; *******************************************************************************************************
 231+ 4E9B
 232+ 4E9B              ; *******************************************************************************************************
 233+ 4E9B              ; function to handle CALL SPRSET basic extension
 234+ 4E9B              ; sets position, and optionally pattern and color of sprite
 235+ 4E9B              ; _SPRSET ( BYTE sprite_num , valid 0-31
 236+ 4E9B              ;			INT x,
 237+ 4E9B              ;			INT y,
 238+ 4E9B              ;			INT pattern, valid 0-63, otherwise ignored
 239+ 4E9B              ;			INT color, valid 0-15, otherwise ignored
 240+ 4E9B              SPRSET:
 241+ 4E9B 3A 7D 4D     	LD A, (SPRATR_INIT_STATUS)
 242+ 4E9E B7           	OR A
 243+ 4E9F 20 05        	JR NZ, .L1
 244+ 4EA1 1E 05        	LD E, 5 ; illegal function call
 245+ 4EA3 C3 24 57     	JP THROW_ERROR
 246+ 4EA6              .L1:
 247+ 4EA6              	; opening (
 248+ 4EA6 CD 04 57     	CALL CHKCHAR
 249+ 4EA9 28           	DB '('
 250+ 4EAA              	; get sprite number
 251+ 4EAA DD 21 1C 52  	LD IX, GETBYT
 252+ 4EAE CD 59 01     	CALL CALBAS
 253+ 4EB1 F5           	PUSH AF
 254+ 4EB2              	; comma
 255+ 4EB2 CD 04 57     	CALL CHKCHAR
 256+ 4EB5 2C           	DB ','
 257+ 4EB6              	; get x
 258+ 4EB6 DD 21 2F 54  	LD IX, FRMQNT
 259+ 4EBA CD 59 01     	CALL CALBAS
 260+ 4EBD D5           	PUSH DE
 261+ 4EBE              	; comma
 262+ 4EBE CD 04 57     	CALL CHKCHAR
 263+ 4EC1 2C           	DB ','
 264+ 4EC2              	; get y
 265+ 4EC2 DD 21 2F 54  	LD IX, FRMQNT
 266+ 4EC6 CD 59 01     	CALL CALBAS
 267+ 4EC9 D5           	PUSH DE
 268+ 4ECA              	; comma
 269+ 4ECA CD 04 57     	CALL CHKCHAR
 270+ 4ECD 2C           	DB ','
 271+ 4ECE              	; get pattern
 272+ 4ECE DD 21 2F 54  	LD IX, FRMQNT
 273+ 4ED2 CD 59 01     	CALL CALBAS
 274+ 4ED5 D5           	PUSH DE
 275+ 4ED6              	; comma
 276+ 4ED6 CD 04 57     	CALL CHKCHAR
 277+ 4ED9 2C           	DB ','
 278+ 4EDA              	; get color
 279+ 4EDA DD 21 2F 54  	LD IX, FRMQNT
 280+ 4EDE CD 59 01     	CALL CALBAS
 281+ 4EE1 D5           	PUSH DE
 282+ 4EE2              	; ending )
 283+ 4EE2 CD 04 57     	CALL CHKCHAR
 284+ 4EE5 29           	DB ')'
 285+ 4EE6
 286+ 4EE6                  ; save position in BASIC text
 287+ 4EE6 E5           	PUSH HL
 288+ 4EE7 DD E1        	POP IX
 289+ 4EE9
 290+ 4EE9 C1           	POP BC ; color
 291+ 4EEA D1           	POP DE ; pattern
 292+ 4EEB D9           	EXX
 293+ 4EEC C1           	POP BC ; y
 294+ 4EED D1           	POP DE ; x
 295+ 4EEE F1           	POP AF ; sprite number
 296+ 4EEF FE 20        	CP 32
 297+ 4EF1 38 05        	JR C, .L2
 298+ 4EF3 1E 05        	LD E, 5 ; illegal function call
 299+ 4EF5 C3 24 57     	JP THROW_ERROR
 300+ 4EF8              .L2:
 301+ 4EF8              	; find location in sprite attributes table
 302+ 4EF8 D5           	PUSH DE
 303+ 4EF9 CD 86 4D     	CALL GETnthSPRATTR
 304+ 4EFC D1           	POP DE
 305+ 4EFD              	; set y
 306+ 4EFD 71           	LD (HL), C
 307+ 4EFE 23           	INC HL
 308+ 4EFF 70           	LD (HL), B
 309+ 4F00 23           	INC HL
 310+ 4F01              	; set x
 311+ 4F01 73           	LD (HL), E
 312+ 4F02 23           	INC HL
 313+ 4F03 72           	LD (HL), D
 314+ 4F04 23           	INC HL
 315+ 4F05 E5           	PUSH HL
 316+ 4F06 D9           	EXX
 317+ 4F07 E1           	POP HL
 318+ 4F08              	; check if 0<=pattern<64
 319+ 4F08 7A           	LD A, D
 320+ 4F09 B7           	OR A
 321+ 4F0A 20 0B        	JR NZ, .L3
 322+ 4F0C 7B           	LD A, E
 323+ 4F0D FE 40        	CP 64
 324+ 4F0F 30 06        	JR NC, .L3
 325+ 4F11              	; set pattern
 326+ 4F11              	;ADD A, A
 327+ 4F11              	;ADD A, A
 328+ 4F11              	;ADD A, A
 329+ 4F11 77           	LD (HL), A
 330+ 4F12 23           	INC HL
 331+ 4F13 72           	LD (HL), D
 332+ 4F14 23           	INC HL
 333+ 4F15 18 02        	JR .L4
 334+ 4F17              .L3:
 335+ 4F17              	; skip pattern
 336+ 4F17 23          > INC HL
 336+ 4F18 23          > INC HL
 337+ 4F19              .L4:
 338+ 4F19              	; check if 0<=color<16
 339+ 4F19 78           	LD A, B
 340+ 4F1A B7           	OR A
 341+ 4F1B 20 08        	JR NZ, .L5
 342+ 4F1D 79           	LD A, C
 343+ 4F1E FE 10        	CP 16
 344+ 4F20 30 03        	JR NC, .L5
 345+ 4F22              	; set color
 346+ 4F22 71           	LD (HL), C
 347+ 4F23 23           	INC HL
 348+ 4F24 70           	LD (HL), B
 349+ 4F25
 350+ 4F25              .L5:
 351+ 4F25 DD E5        	PUSH IX
 352+ 4F27 E1           	POP HL
 353+ 4F28 C9           	RET
 354+ 4F29              ; *******************************************************************************************************
 355+ 4F29
 356+ 4F29              ; *******************************************************************************************************
 357+ 4F29              ; function sets sprite location based on initial coordinates and offset provided
 358+ 4F29              ; input A=sprite number in SPRATR_DATA , 0-31
 359+ 4F29              ; input DE=initial x
 360+ 4F29              ; input BC=initial y
 361+ 4F29              ; input IY=location where delta y,x are located
 362+ 4F29              ; modifies AF, HL, IX
 363+ 4F29              SPRSET_DELTA_POS:
 364+ 4F29 D5           	PUSH DE
 365+ 4F2A CD 86 4D     	CALL GETnthSPRATTR
 366+ 4F2D E5           	PUSH HL
 367+ 4F2E DD E1        	POP IX
 368+ 4F30 D1           	POP DE
 369+ 4F31              	; IX=sprite's y location
 370+ 4F31 FD 6E 00     	LD L, (IY)
 371+ 4F34 FD 66 01     	LD H, (IY+1)
 372+ 4F37 09           	ADD HL, BC
 373+ 4F38 DD 75 00     	LD (IX), L
 374+ 4F3B DD 74 01     	LD (IX+1), H
 375+ 4F3E FD 6E 02     	LD L, (IY+2)
 376+ 4F41 FD 66 03     	LD H, (IY+3)
 377+ 4F44 19           	ADD HL, DE
 378+ 4F45 DD 75 02     	LD (IX+2), L
 379+ 4F48 DD 74 03     	LD (IX+3), H
 380+ 4F4B C9           	RET
 381+ 4F4C              ; *******************************************************************************************************
 382+ 4F4C
 383+ 4F4C              ; *******************************************************************************************************
 384+ 4F4C              ; function to handle CALL SPRGRPMOV basic extension
 385+ 4F4C              ; sets position of a group of sprites described with
 386+ 4F4C              ; { int sprite_num, int delta_y, int delta_x } [count]
 387+ 4F4C              ; _SPRGRPMOV ( INT x,
 388+ 4F4C              ;			   INT y,
 389+ 4F4C              ;			   INT data_ptr,
 390+ 4F4C              ;			   BYTE count,
 391+ 4F4C              ; will put ram in page 0 also, page 1 is already there
 392+ 4F4C              SPRGRPMOV:
 393+ 4F4C 3A 7D 4D     	LD A, (SPRATR_INIT_STATUS)
 394+ 4F4F B7           	OR A
 395+ 4F50 20 05        	JR NZ, .L1
 396+ 4F52 1E 05        	LD E, 5 ; illegal function call
 397+ 4F54 C3 24 57     	JP THROW_ERROR
 398+ 4F57              .L1:
 399+ 4F57              	; opening (
 400+ 4F57 CD 04 57     	CALL CHKCHAR
 401+ 4F5A 28           	DB '('
 402+ 4F5B              	; get x
 403+ 4F5B DD 21 2F 54  	LD IX, FRMQNT
 404+ 4F5F CD 59 01     	CALL CALBAS
 405+ 4F62 D5           	PUSH DE
 406+ 4F63              	; comma
 407+ 4F63 CD 04 57     	CALL CHKCHAR
 408+ 4F66 2C           	DB ','
 409+ 4F67              	; get y
 410+ 4F67 DD 21 2F 54  	LD IX, FRMQNT
 411+ 4F6B CD 59 01     	CALL CALBAS
 412+ 4F6E D5           	PUSH DE
 413+ 4F6F              	; comma
 414+ 4F6F CD 04 57     	CALL CHKCHAR
 415+ 4F72 2C           	DB ','
 416+ 4F73              	; get data pointer
 417+ 4F73 DD 21 2F 54  	LD IX, FRMQNT
 418+ 4F77 CD 59 01     	CALL CALBAS
 419+ 4F7A D5           	PUSH DE
 420+ 4F7B              	; comma
 421+ 4F7B CD 04 57     	CALL CHKCHAR
 422+ 4F7E 2C           	DB ','
 423+ 4F7F              	; get count
 424+ 4F7F DD 21 1C 52  	LD IX, GETBYT
 425+ 4F83 CD 59 01     	CALL CALBAS
 426+ 4F86 F5           	PUSH AF
 427+ 4F87              	; ending )
 428+ 4F87 CD 04 57     	CALL CHKCHAR
 429+ 4F8A 29           	DB ')'
 430+ 4F8B
 431+ 4F8B E5           	PUSH HL
 432+ 4F8C DD E1        	POP IX
 433+ 4F8E
 434+ 4F8E C1           	POP BC ; count
 435+ 4F8F E1           	POP HL ; data pointer
 436+ 4F90 D9           	EXX
 437+ 4F91 C1           	POP BC ; y
 438+ 4F92 D1           	POP DE ; x
 439+ 4F93 D9           	EXX
 440+ 4F94
 441+ 4F94 DD E5        	PUSH IX ; save position in BASIC buffer
 442+ 4F96
 443+ 4F96 C5           	PUSH BC
 444+ 4F97 E5           	PUSH HL
 445+ 4F98 AF               XOR A
 446+ 4F99 CD F7 55         CALL GET_PAGE_INFO
 447+ 4F9C D9           	EXX
 448+ 4F9D E1           	POP HL
 449+ 4F9E F1           	POP AF
 450+ 4F9F D9           	EXX
 451+ 4FA0 C5               PUSH BC
 452+ 4FA1 D5               PUSH DE
 453+ 4FA2 D9           	EXX
 454+ 4FA3 F5           	PUSH AF
 455+ 4FA4 E5           	PUSH HL
 456+ 4FA5 D9           	EXX
 457+ 4FA6 3A 41 F3         LD A, (RAMAD0)
 458+ 4FA9 26 00            LD H, 0
 459+ 4FAB CD 3E 56         CALL LOCAL_ENASLT
 460+ 4FAE FB           	EI
 461+ 4FAF E1           	POP HL
 462+ 4FB0 C1           	POP BC
 463+ 4FB1 CD BB 4F     	CALL .UPDATE_LOC
 464+ 4FB4 D1               POP DE
 465+ 4FB5 C1               POP BC
 466+ 4FB6 CD 2E 56         CALL RESTORE_PAGE_INFO
 467+ 4FB9 E1           	POP HL
 468+ 4FBA C9           	RET
 469+ 4FBB
 470+ 4FBB              .UPDATE_LOC:
 471+ 4FBB              .L4:
 472+ 4FBB 7E           	LD A, (HL)
 473+ 4FBC 23           	INC HL
 474+ 4FBD 23           	INC HL
 475+ 4FBE E5           	PUSH HL
 476+ 4FBF FD E1        	POP IY
 477+ 4FC1 D9           	EXX
 478+ 4FC2 CD 29 4F     	CALL SPRSET_DELTA_POS
 479+ 4FC5 D9           	EXX
 480+ 4FC6 23          > INC HL
 480+ 4FC7 23          > INC HL
 480+ 4FC8 23          > INC HL
 480+ 4FC9 23          > INC HL
 481+ 4FCA 10 EF        	DJNZ .L4
 482+ 4FCC C9           	RET
 483+ 4FCD              ; *******************************************************************************************************
 484+ 4FCD
# file closed: asm\SPRITES.asm
 124  4FCD               ENDIF
 125  4FCD
 126  4FCD               IF (ANIM_CMDS == 1)
 127  4FCD               INCLUDE "ANIMATION.asm"
# file opened: asm\ANIMATION.asm
   1+ 4FCD              ; sprite animation routines
   2+ 4FCD
   3+ 4FCD              ; number of animation items and pointer
   4+ 4FCD              ANIMITEMNUM:
   5+ 4FCD 00            DB 0
   6+ 4FCE              ANIMITEMPTR:
   7+ 4FCE 6A 5F         DW EXT_END
   8+ 4FD0              ; number of animation definitions and pointer
   9+ 4FD0              ANIMDEFNUM:
  10+ 4FD0 00            DB 0
  11+ 4FD1              ANIMDEFPTR:
  12+ 4FD1 6A 5F         DW EXT_END
  13+ 4FD3              ; number of links between sprite and animation definitions
  14+ 4FD3              ANIMSPRNUM:
  15+ 4FD3 00            DB 0
  16+ 4FD4              ANIMSPRPTR:
  17+ 4FD4 6A 5F         DW EXT_END
  18+ 4FD6
  19+ 4FD6              ; ANIMATION ITEM
  20+ 4FD6              ; byte type = [0 - pattern and color change
  21+ 4FD6              ;              1 - pattern definition change ]
  22+ 4FD6              ; word ticks - number of ticks to hold this state
  23+ 4FD6              ; for type = 0
  24+ 4FD6              ;   byte pattern;
  25+ 4FD6              ;   byte color;
  26+ 4FD6              ; for type = 1
  27+ 4FD6              ;   work data_pointer;
  28+ 4FD6              ; total size = 5b
  29+ 4FD6
  30+ 4FD6              ; ANIMATION DEFINITION
  31+ 4FD6              ; byte number of items 1-15
  32+ 4FD6              ; byte[15] anim_item;
  33+ 4FD6              ; total size = 16b
  34+ 4FD6
  35+ 4FD6              ; SPRITE ANIMATION
  36+ 4FD6              ; +00 byte sprite number;
  37+ 4FD6              ; +01 word time;
  38+ 4FD6              ; +03 byte current item;
  39+ 4FD6              ; +04 byte animation definition;
  40+ 4FD6              ; +05 byte cyclic;
  41+ 4FD6              ; +06 byte active;
  42+ 4FD6              ; +07 byte reserved
  43+ 4FD6              ; total size = 8b
  44+ 4FD6
  45+ 4FD6              ; *******************************************************************************************************
  46+ 4FD6              ; helper function HL=A*5
  47+ 4FD6              ; changes HL,DE;
  48+ 4FD6              Ax5:
  49+ 4FD6 26 00            LD H,0
  50+ 4FD8 6F               LD L,A
  51+ 4FD9 54               LD D,H
  52+ 4FDA 5D               LD E,L
  53+ 4FDB 29               ADD HL,HL
  54+ 4FDC 29               ADD HL,HL
  55+ 4FDD 19               ADD HL,DE
  56+ 4FDE C9               RET
  57+ 4FDF              ; *******************************************************************************************************
  58+ 4FDF
  59+ 4FDF              ; *******************************************************************************************************
  60+ 4FDF              ; helper function gets pointer to n-th animation item
  61+ 4FDF              ; changes HL,DE;
  62+ 4FDF              GETnthANIMITEM:
  63+ 4FDF CD D6 4F         CALL Ax5
  64+ 4FE2 ED 5B CE 4F      LD DE,(ANIMITEMPTR)
  65+ 4FE6 19               ADD HL,DE
  66+ 4FE7 C9               RET
  67+ 4FE8              ; *******************************************************************************************************
  68+ 4FE8
  69+ 4FE8              ; *******************************************************************************************************
  70+ 4FE8              ; helper function gets pointer to n-th entry in animation definition
  71+ 4FE8              ; changes HL,DE;
  72+ 4FE8              GETnthANIMDEF:
  73+ 4FE8 26 00            LD H,0
  74+ 4FEA 6F               LD L,A
  75+ 4FEB CD F3 55         CALL HLx8
  76+ 4FEE ED 5B D1 4F      LD DE,(ANIMDEFPTR)
  77+ 4FF2 19               ADD HL,DE
  78+ 4FF3 C9               RET
  79+ 4FF4              ; *******************************************************************************************************
  80+ 4FF4
  81+ 4FF4              ; *******************************************************************************************************
  82+ 4FF4              ; helper function gets pointer to n-th entry in sprite animation
  83+ 4FF4              ; changes HL,DE;
  84+ 4FF4              GETnthSPRANIM:
  85+ 4FF4 26 00            LD H,0
  86+ 4FF6 6F               LD L,A
  87+ 4FF7 CD F2 55         CALL HLx16
  88+ 4FFA ED 5B D4 4F      LD DE,(ANIMSPRPTR)
  89+ 4FFE 19               ADD HL,DE
  90+ 4FFF C9               RET
  91+ 5000              ; *******************************************************************************************************
  92+ 5000
  93+ 5000              ; *******************************************************************************************************
  94+ 5000              ; function to handle CALL MAXANIMITEMS basic extension
  95+ 5000              ; MAXANIMITEMS (BYTE number)
  96+ 5000              ; sets new number and moves memory buffers as needed
  97+ 5000              MAXANIMITEMS:
  98+ 5000              	; opening (
  99+ 5000 CD 04 57     	CALL CHKCHAR
 100+ 5003 28           	DB '('
 101+ 5004              	; get value
 102+ 5004 DD 21 1C 52  	LD IX, GETBYT
 103+ 5008 CD 59 01     	CALL CALBAS
 104+ 500B F5               PUSH AF
 105+ 500C              	; ending )
 106+ 500C CD 04 57     	CALL CHKCHAR
 107+ 500F 29           	DB ')'
 108+ 5010 F1               POP AF
 109+ 5011
 110+ 5011              	; save position
 111+ 5011 E5           	PUSH HL
 112+ 5012              .ENTRY:
 113+ 5012 47               LD B,A
 114+ 5013 3A CD 4F         LD A,(ANIMITEMNUM)
 115+ 5016 90               SUB B
 116+ 5017 28 1F            JR Z, .EXIT; same value as before
 117+ 5019 FD 21 D1 4F      LD IY,ANIMDEFPTR
 118+ 501D FA 3B 50         JP M, .INCREASE
 119+ 5020                  ; new value is lower than previous one
 120+ 5020 CD 53 50         CALL .SIZEDIFF
 121+ 5023 CD 6E 50         CALL .DECREASE_COMMON
 122+ 5026 2A D4 4F         LD HL,(ANIMSPRPTR)
 123+ 5029 AF               XOR A
 124+ 502A ED 42            SBC HL,BC
 125+ 502C 22 D4 4F         LD (ANIMSPRPTR),HL
 126+ 502F              .E1:
 127+ 502F 2A 10 40         LD HL,(FREEMEMPTR)
 128+ 5032 AF               XOR A
 129+ 5033 ED 42            SBC HL,BC
 130+ 5035 22 10 40         LD (FREEMEMPTR),HL
 131+ 5038              .EXIT:
 132+ 5038 FB               EI
 133+ 5039 E1           	POP HL
 134+ 503A C9           	RET
 135+ 503B              .INCREASE:
 136+ 503B ED 44            NEG
 137+ 503D CD 53 50         CALL .SIZEDIFF
 138+ 5040 CD 9A 50         CALL .INCREASE_COMMON
 139+ 5043 2A D4 4F         LD HL,(ANIMSPRPTR)
 140+ 5046 09               ADD HL,BC
 141+ 5047 22 D4 4F         LD (ANIMSPRPTR),HL
 142+ 504A              .E2:
 143+ 504A 2A 10 40         LD HL,(FREEMEMPTR)
 144+ 504D 09               ADD HL,BC
 145+ 504E 22 10 40         LD (FREEMEMPTR),HL
 146+ 5051 18 E5            JR .EXIT
 147+ 5053              .SIZEDIFF:
 148+ 5053 CD D6 4F         CALL Ax5
 149+ 5056 78               LD A,B
 150+ 5057 32 CD 4F         LD (ANIMITEMNUM),A
 151+ 505A 44               LD B,H
 152+ 505B 4D               LD C,L
 153+ 505C C9               RET ; BC=size difference in bytes
 154+ 505D              .SIZETOMOVE:
 155+ 505D D5               PUSH DE
 156+ 505E 2A 10 40         LD HL,(FREEMEMPTR)
 157+ 5061 FD 5E 00         LD E,(IY)
 158+ 5064 FD 56 01         LD D,(IY+1)
 159+ 5067 AF               XOR A
 160+ 5068 ED 52            SBC HL,DE
 161+ 506A 44               LD B,H
 162+ 506B 4D               LD C,L
 163+ 506C D1               POP DE
 164+ 506D C9               RET
 165+ 506E              .DECREASE_COMMON:
 166+ 506E FD 6E 00         LD L,(IY)
 167+ 5071 FD 66 01         LD H,(IY+1)
 168+ 5074 AF               XOR A
 169+ 5075 ED 42            SBC HL,BC
 170+ 5077 EB               EX DE,HL
 171+ 5078 C5               PUSH BC
 172+ 5079 CD 5D 50         CALL .SIZETOMOVE
 173+ 507C F3               DI
 174+ 507D 78               LD A,B
 175+ 507E B1               OR C
 176+ 507F 28 08            JR Z,.L1
 177+ 5081 FD 6E 00         LD L,(IY)
 178+ 5084 FD 66 01         LD H,(IY+1)
 179+ 5087 ED B0            LDIR
 180+ 5089              .L1:
 181+ 5089 C1               POP BC
 182+ 508A FD 6E 00         LD L,(IY)
 183+ 508D FD 66 01         LD H,(IY+1)
 184+ 5090 AF               XOR A
 185+ 5091 ED 42            SBC HL,BC
 186+ 5093 FD 75 00         LD (IY),L
 187+ 5096 FD 74 01         LD (IY+1),H
 188+ 5099 C9               RET
 189+ 509A              .INCREASE_COMMON:
 190+ 509A 2A 10 40         LD HL,(FREEMEMPTR)
 191+ 509D 2B               DEC HL
 192+ 509E AF               XOR A
 193+ 509F ED 42            SBC HL,BC
 194+ 50A1 EB               EX DE,HL
 195+ 50A2 C5               PUSH BC
 196+ 50A3 CD 5D 50         CALL .SIZETOMOVE
 197+ 50A6 F3               DI
 198+ 50A7 78               LD A,B
 199+ 50A8 B1               OR C
 200+ 50A9 28 06            JR Z,.L2
 201+ 50AB 2A 10 40         LD HL,(FREEMEMPTR)
 202+ 50AE 2B               DEC HL
 203+ 50AF ED B8            LDDR
 204+ 50B1              .L2:
 205+ 50B1 C1               POP BC
 206+ 50B2 FD 6E 00         LD L,(IY)
 207+ 50B5 FD 66 01         LD H,(IY+1)
 208+ 50B8 09               ADD HL,BC
 209+ 50B9 FD 75 00         LD (IY),L
 210+ 50BC FD 74 01         LD (IY+1),H
 211+ 50BF C9               RET
 212+ 50C0              ; *******************************************************************************************************
 213+ 50C0
 214+ 50C0              ; *******************************************************************************************************
 215+ 50C0              ; function to handle CALL ANIMITEMPAT basic extension
 216+ 50C0              ; ANIMITEMPAT ( BYTE id,
 217+ 50C0              ;               INT ticks,
 218+ 50C0              ;               BYTE pattern,
 219+ 50C0              ;               BYTE color )
 220+ 50C0              ; fills animation item data, returns an error if out of bounds
 221+ 50C0              ANIMITEMPAT:
 222+ 50C0                  ; opening (
 223+ 50C0 CD 04 57     	CALL CHKCHAR
 224+ 50C3 28           	DB '('
 225+ 50C4              	; get id
 226+ 50C4 DD 21 1C 52  	LD IX, GETBYT
 227+ 50C8 CD 59 01     	CALL CALBAS
 228+ 50CB F5               PUSH AF
 229+ 50CC                  ; check if out of bounds
 230+ 50CC 3C               INC A
 231+ 50CD 4F               LD C,A
 232+ 50CE 3A CD 4F         LD A,(ANIMITEMNUM)
 233+ 50D1 B9               CP C
 234+ 50D2 DA 1A 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 235+ 50D5              	; comma
 236+ 50D5 CD 04 57     	CALL CHKCHAR
 237+ 50D8 2C           	DB ','
 238+ 50D9              	; get ticks
 239+ 50D9 DD 21 2F 54  	LD IX, FRMQNT
 240+ 50DD CD 59 01     	CALL CALBAS
 241+ 50E0 D5           	PUSH DE
 242+ 50E1              	; comma
 243+ 50E1 CD 04 57     	CALL CHKCHAR
 244+ 50E4 2C           	DB ','
 245+ 50E5              	; get pattern
 246+ 50E5 DD 21 1C 52  	LD IX, GETBYT
 247+ 50E9 CD 59 01     	CALL CALBAS
 248+ 50EC F5               PUSH AF
 249+ 50ED              	; comma
 250+ 50ED CD 04 57     	CALL CHKCHAR
 251+ 50F0 2C           	DB ','
 252+ 50F1              	; get color
 253+ 50F1 DD 21 1C 52  	LD IX, GETBYT
 254+ 50F5 CD 59 01     	CALL CALBAS
 255+ 50F8 F5               PUSH AF
 256+ 50F9              	; ending )
 257+ 50F9 CD 04 57     	CALL CHKCHAR
 258+ 50FC 29           	DB ')'
 259+ 50FD              .ENTRY:
 260+ 50FD E5               PUSH HL
 261+ 50FE DD E1            POP IX
 262+ 5100 D9               EXX
 263+ 5101 C1               POP BC ; color
 264+ 5102 D1               POP DE ; pattern
 265+ 5103 E1               POP HL ; ticks
 266+ 5104 D9               EXX
 267+ 5105 F1               POP AF
 268+ 5106 CD DF 4F         CALL GETnthANIMITEM
 269+ 5109 E5               PUSH HL
 270+ 510A FD E1            POP IY
 271+ 510C D9               EXX
 272+ 510D FD 36 00 00      LD (IY),0 ; type=0
 273+ 5111 FD 75 01         LD (IY+1),L
 274+ 5114 FD 74 02         LD (IY+2),H
 275+ 5117 FD 72 03         LD (IY+3),D
 276+ 511A FD 70 04         LD (IY+4),B
 277+ 511D
 278+ 511D DD E5            PUSH IX
 279+ 511F E1               POP HL
 280+ 5120 C9               RET
 281+ 5121              ; *******************************************************************************************************
 282+ 5121
 283+ 5121              ; *******************************************************************************************************
 284+ 5121              ; function to handle CALL ANIMITEMPTR basic extension
 285+ 5121              ; ANIMITEMPTR ( BYTE id,
 286+ 5121              ;               INT ticks,
 287+ 5121              ;               INT pointer,
 288+ 5121              ; fills animation item data, returns an error if out of bounds
 289+ 5121              ANIMITEMPTR_CMD:
 290+ 5121                  ; opening (
 291+ 5121 CD 04 57     	CALL CHKCHAR
 292+ 5124 28           	DB '('
 293+ 5125              	; get id
 294+ 5125 DD 21 1C 52  	LD IX, GETBYT
 295+ 5129 CD 59 01     	CALL CALBAS
 296+ 512C F5               PUSH AF
 297+ 512D                  ; check if out of bounds
 298+ 512D 3C               INC A
 299+ 512E 4F               LD C,A
 300+ 512F 3A CD 4F         LD A,(ANIMITEMNUM)
 301+ 5132 B9               CP C
 302+ 5133 DA 1A 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 303+ 5136              	; comma
 304+ 5136 CD 04 57     	CALL CHKCHAR
 305+ 5139 2C           	DB ','
 306+ 513A              	; get ticks
 307+ 513A DD 21 2F 54  	LD IX, FRMQNT
 308+ 513E CD 59 01     	CALL CALBAS
 309+ 5141 D5           	PUSH DE
 310+ 5142              	; comma
 311+ 5142 CD 04 57     	CALL CHKCHAR
 312+ 5145 2C           	DB ','
 313+ 5146              	; get pointer
 314+ 5146 DD 21 2F 54  	LD IX, FRMQNT
 315+ 514A CD 59 01     	CALL CALBAS
 316+ 514D D5           	PUSH DE
 317+ 514E              	; ending )
 318+ 514E CD 04 57     	CALL CHKCHAR
 319+ 5151 29           	DB ')'
 320+ 5152              .ENTRY:
 321+ 5152 E5               PUSH HL
 322+ 5153 DD E1            POP IX
 323+ 5155 D9               EXX
 324+ 5156 D1               POP DE ; pointer
 325+ 5157 E1               POP HL ; ticks
 326+ 5158 D9               EXX
 327+ 5159 F1               POP AF
 328+ 515A CD DF 4F         CALL GETnthANIMITEM
 329+ 515D E5               PUSH HL
 330+ 515E FD E1            POP IY
 331+ 5160 D9               EXX
 332+ 5161 FD 36 00 01      LD (IY),1 ; type=1
 333+ 5165 FD 75 01         LD (IY+1),L
 334+ 5168 FD 74 02         LD (IY+2),H
 335+ 516B FD 73 03         LD (IY+3),E
 336+ 516E FD 72 04         LD (IY+4),D
 337+ 5171
 338+ 5171 DD E5            PUSH IX
 339+ 5173 E1               POP HL
 340+ 5174 C9               RET
 341+ 5175              ; *******************************************************************************************************
 342+ 5175
 343+ 5175              ; *******************************************************************************************************
 344+ 5175              ; function to handle CALL MAXANIMDEFS basic extension
 345+ 5175              ; MAXANIMDEFS (BYTE number)
 346+ 5175              ; sets new number and moves memory buffers as needed
 347+ 5175              MAXANIMDEFS:
 348+ 5175              	; opening (
 349+ 5175 CD 04 57     	CALL CHKCHAR
 350+ 5178 28           	DB '('
 351+ 5179              	; get value
 352+ 5179 DD 21 1C 52  	LD IX, GETBYT
 353+ 517D CD 59 01     	CALL CALBAS
 354+ 5180 F5               PUSH AF
 355+ 5181              	; ending )
 356+ 5181 CD 04 57     	CALL CHKCHAR
 357+ 5184 29           	DB ')'
 358+ 5185 F1               POP AF
 359+ 5186
 360+ 5186              	; save position
 361+ 5186 E5           	PUSH HL
 362+ 5187              .ENTRY:
 363+ 5187 47               LD B,A
 364+ 5188 3A D0 4F         LD A,(ANIMDEFNUM)
 365+ 518B 90               SUB B
 366+ 518C CA 38 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 367+ 518F FD 21 D4 4F      LD IY,ANIMSPRPTR
 368+ 5193 FA 9F 51         JP M, .INCREASE
 369+ 5196                  ; new value is lower than previous one
 370+ 5196 CD AA 51         CALL .SIZEDIFF
 371+ 5199 CD 6E 50         CALL MAXANIMITEMS.DECREASE_COMMON
 372+ 519C C3 2F 50         JP MAXANIMITEMS.E1
 373+ 519F              .INCREASE:
 374+ 519F ED 44            NEG
 375+ 51A1 CD AA 51         CALL .SIZEDIFF
 376+ 51A4 CD 9A 50         CALL MAXANIMITEMS.INCREASE_COMMON
 377+ 51A7 C3 4A 50         JP MAXANIMITEMS.E2
 378+ 51AA              .SIZEDIFF:
 379+ 51AA 26 00            LD H,0
 380+ 51AC 6F               LD L,A
 381+ 51AD CD F2 55         CALL HLx16
 382+ 51B0 78               LD A,B
 383+ 51B1 32 D0 4F         LD (ANIMDEFNUM),A
 384+ 51B4 44               LD B,H
 385+ 51B5 4D               LD C,L
 386+ 51B6 C9               RET ; BC=size difference in bytes
 387+ 51B7              ; *******************************************************************************************************
 388+ 51B7
 389+ 51B7              ; *******************************************************************************************************
 390+ 51B7              ; function to handle CALL ANIMDEF basic extension
 391+ 51B7              ; ANIMITEMPAT ( BYTE id,
 392+ 51B7              ;               BYTE size,
 393+ 51B7              ;               INT[] list )
 394+ 51B7              ; fills animation definition data, returns an error if out of bounds, or invalid type
 395+ 51B7              ANIMDEF:
 396+ 51B7                  ; opening (
 397+ 51B7 CD 04 57     	CALL CHKCHAR
 398+ 51BA 28           	DB '('
 399+ 51BB              	; get id
 400+ 51BB DD 21 1C 52  	LD IX, GETBYT
 401+ 51BF CD 59 01     	CALL CALBAS
 402+ 51C2 F5               PUSH AF
 403+ 51C3                  ; check if out of bounds
 404+ 51C3 3C               INC A
 405+ 51C4 4F               LD C,A
 406+ 51C5 3A D0 4F         LD A,(ANIMDEFNUM)
 407+ 51C8 B9               CP C
 408+ 51C9 DA 1A 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 409+ 51CC              	; comma
 410+ 51CC CD 04 57     	CALL CHKCHAR
 411+ 51CF 2C           	DB ','
 412+ 51D0              	; get size
 413+ 51D0 DD 21 1C 52  	LD IX, GETBYT
 414+ 51D4 CD 59 01     	CALL CALBAS
 415+ 51D7 FE 10            CP 16
 416+ 51D9 D2 1E 57         JP NC, OVERFLOW
 417+ 51DC B7               OR A
 418+ 51DD CA 1E 57         JP Z, OVERFLOW
 419+ 51E0 F5           	PUSH AF
 420+ 51E1              	; comma
 421+ 51E1 CD 04 57     	CALL CHKCHAR
 422+ 51E4 2C           	DB ','
 423+ 51E5              	; get pointer to a list of animation items in integer array format
 424+ 51E5 3E 01            LD A,1
 425+ 51E7 32 A5 F6         LD (SUBFLG),A ; search for arrays only
 426+ 51EA DD 21 A4 5E  	LD IX, PTRGET
 427+ 51EE CD 59 01     	CALL CALBAS
 428+ 51F1                  ; contrary to documentation we get a pointer to array dimension in BC
 429+ 51F1                  ; and type in VALTYP
 430+ 51F1 3A 63 F6         LD A,(VALTYP)
 431+ 51F4 FE 02            CP 2
 432+ 51F6 C2 16 57         JP NZ,TYPE_MISMATCH
 433+ 51F9 0A               LD A,(BC)
 434+ 51FA FE 01            CP 1
 435+ 51FC C2 16 57         JP NZ,TYPE_MISMATCH
 436+ 51FF 03               INC BC
 437+ 5200 0A               LD A,(BC)
 438+ 5201 D1               POP DE
 439+ 5202 D5               PUSH DE
 440+ 5203 3C               INC A
 441+ 5204 BA               CP D
 442+ 5205 DA 1A 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 443+ 5208 03          > INC BC
 443+ 5209 03          > INC BC
 444+ 520A C5               PUSH BC
 445+ 520B              	; ending )
 446+ 520B CD 04 57     	CALL CHKCHAR
 447+ 520E 29           	DB ')'
 448+ 520F              .ENTRY:
 449+ 520F E5               PUSH HL
 450+ 5210 DD E1            POP IX
 451+ 5212 D1               POP DE ; pointer to INT array
 452+ 5213 C1               POP BC ; B=item number
 453+ 5214 F1               POP AF ; id
 454+ 5215 D5               PUSH DE
 455+ 5216 CD E8 4F         CALL GETnthANIMDEF
 456+ 5219 D1               POP DE
 457+ 521A 70               LD (HL),B
 458+ 521B              .L1:
 459+ 521B 23               INC HL
 460+ 521C 1A               LD A,(DE)
 461+ 521D 13          > INC DE
 461+ 521E 13          > INC DE
 462+ 521F 77               LD (HL),A
 463+ 5220 10 F9            DJNZ .L1
 464+ 5222 DD E5            PUSH IX
 465+ 5224 E1               POP HL
 466+ 5225 C9               RET
 467+ 5226              ; *******************************************************************************************************
 468+ 5226
 469+ 5226              ; *******************************************************************************************************
 470+ 5226              ; function to handle CALL MAXANIMSPRS basic extension
 471+ 5226              ; MAXANIMSPRS (BYTE number)
 472+ 5226              ; sets new number and moves memory buffers as needed
 473+ 5226              MAXANIMSPRS:
 474+ 5226              	; opening (
 475+ 5226 CD 04 57     	CALL CHKCHAR
 476+ 5229 28           	DB '('
 477+ 522A              	; get value
 478+ 522A DD 21 1C 52  	LD IX, GETBYT
 479+ 522E CD 59 01     	CALL CALBAS
 480+ 5231 F5               PUSH AF
 481+ 5232              	; ending )
 482+ 5232 CD 04 57     	CALL CHKCHAR
 483+ 5235 29           	DB ')'
 484+ 5236 F1               POP AF
 485+ 5237
 486+ 5237              	; save position
 487+ 5237 E5           	PUSH HL
 488+ 5238              .ENTRY:
 489+ 5238 47               LD B,A
 490+ 5239 3A D3 4F         LD A,(ANIMSPRNUM)
 491+ 523C 90               SUB B
 492+ 523D CA 38 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 493+ 5240 FD 21 10 40      LD IY,FREEMEMPTR
 494+ 5244 FA 50 52         JP M, .INCREASE
 495+ 5247                  ; new value is lower than previous one
 496+ 5247 CD 6F 52         CALL .SIZEDIFF
 497+ 524A CD 6E 50         CALL MAXANIMITEMS.DECREASE_COMMON
 498+ 524D C3 38 50         JP MAXANIMITEMS.EXIT
 499+ 5250              .INCREASE:
 500+ 5250 ED 44            NEG
 501+ 5252 F5               PUSH AF; save difference for later to set active flag to 0 of new entires
 502+ 5253 CD 6F 52         CALL .SIZEDIFF
 503+ 5256 CD 9A 50         CALL MAXANIMITEMS.INCREASE_COMMON
 504+ 5259 AF               XOR A
 505+ 525A ED 42            SBC HL,BC ; location of new stuff
 506+ 525C F1               POP AF
 507+ 525D 47               LD B,A
 508+ 525E 11 08 00         LD DE,8
 509+ 5261 E5               PUSH HL
 510+ 5262 DD E1            POP IX
 511+ 5264              .L1:
 512+ 5264 DD 36 06 00      LD (IX+6),0
 513+ 5268 DD 19            ADD IX,DE
 514+ 526A 10 F8            DJNZ .L1
 515+ 526C C3 38 50         JP MAXANIMITEMS.EXIT
 516+ 526F              .SIZEDIFF:
 517+ 526F 26 00            LD H,0
 518+ 5271 6F               LD L,A
 519+ 5272 CD F3 55         CALL HLx8
 520+ 5275 78               LD A,B
 521+ 5276 32 D3 4F         LD (ANIMSPRNUM),A
 522+ 5279 44               LD B,H
 523+ 527A 4D               LD C,L
 524+ 527B C9               RET ; BC=size difference in bytes
 525+ 527C              ; *******************************************************************************************************
 526+ 527C
 527+ 527C              ; *******************************************************************************************************
 528+ 527C              ; function to handle CALL ANIMSPRITE basic extension
 529+ 527C              ; ANIMSPRITE ( BYTE id,
 530+ 527C              ;              BYTE sprite_number,
 531+ 527C              ;              BYTE animation_definition_id,
 532+ 527C              ;              BYTE cyclic_flag )
 533+ 527C              ; fills sprite animation data, returns an error if out of bounds, or invalid type
 534+ 527C              ANIMSPRITE:
 535+ 527C                  ; opening (
 536+ 527C CD 04 57     	CALL CHKCHAR
 537+ 527F 28           	DB '('
 538+ 5280              	; get sprite animation id
 539+ 5280 DD 21 1C 52  	LD IX, GETBYT
 540+ 5284 CD 59 01     	CALL CALBAS
 541+ 5287 F5               PUSH AF
 542+ 5288 3C               INC A
 543+ 5289 4F               LD C,A
 544+ 528A 3A D3 4F         LD A,(ANIMSPRNUM)
 545+ 528D B9               CP C
 546+ 528E DA 1A 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 547+ 5291              	; comma
 548+ 5291 CD 04 57     	CALL CHKCHAR
 549+ 5294 2C           	DB ','
 550+ 5295              	; get sprite number
 551+ 5295 DD 21 1C 52  	LD IX, GETBYT
 552+ 5299 CD 59 01     	CALL CALBAS
 553+ 529C F5               PUSH AF
 554+ 529D                  ; check if out of bounds
 555+ 529D FE 20            CP 32
 556+ 529F D2 1A 57         JP NC, SUBSCRIPT_OUT_OF_RANGE
 557+ 52A2              	; comma
 558+ 52A2 CD 04 57     	CALL CHKCHAR
 559+ 52A5 2C           	DB ','
 560+ 52A6              	; get animation definition id
 561+ 52A6 DD 21 1C 52  	LD IX, GETBYT
 562+ 52AA CD 59 01     	CALL CALBAS
 563+ 52AD F5               PUSH AF
 564+ 52AE 3C               INC A
 565+ 52AF 4F               LD C,A
 566+ 52B0 3A D0 4F         LD A,(ANIMDEFNUM)
 567+ 52B3 B9               CP C
 568+ 52B4 DA 1A 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 569+ 52B7              	; comma
 570+ 52B7 CD 04 57     	CALL CHKCHAR
 571+ 52BA 2C           	DB ','
 572+ 52BB              	; get cyclic flag
 573+ 52BB DD 21 1C 52  	LD IX, GETBYT
 574+ 52BF CD 59 01         CALL CALBAS
 575+ 52C2 F5           	PUSH AF
 576+ 52C3              	; ending )
 577+ 52C3 CD 04 57     	CALL CHKCHAR
 578+ 52C6 29           	DB ')'
 579+ 52C7              .ENTRY:
 580+ 52C7 E5               PUSH HL
 581+ 52C8 DD E1            POP IX
 582+ 52CA D9               EXX
 583+ 52CB D1               POP DE ; cyclic
 584+ 52CC C1               POP BC ; animation definition id
 585+ 52CD E1               POP HL ; sprite number
 586+ 52CE D9               EXX
 587+ 52CF F1               POP AF ; sprite animation id
 588+ 52D0 26 00            LD H,0
 589+ 52D2 6F               LD L,A
 590+ 52D3 CD F3 55         CALL HLx8
 591+ 52D6 ED 5B D4 4F      LD DE,(ANIMSPRPTR)
 592+ 52DA 19               ADD HL,DE
 593+ 52DB E5               PUSH HL
 594+ 52DC FD E1            POP IY
 595+ 52DE D9               EXX
 596+ 52DF FD 74 00         LD (IY),H
 597+ 52E2 FD 70 04         LD (IY+4),B
 598+ 52E5 FD 72 05         LD (IY+5),D
 599+ 52E8                  ;LD (IY+6),0
 600+ 52E8 DD E5            PUSH IX
 601+ 52EA E1               POP HL
 602+ 52EB C9               RET
 603+ 52EC              ; *******************************************************************************************************
 604+ 52EC
 605+ 52EC              ; *******************************************************************************************************
 606+ 52EC              ; function to handle CALL ANIMSTART basic extension
 607+ 52EC              ; two forms
 608+ 52EC              ; ANIMSTART ( BYTE id )
 609+ 52EC              ; or
 610+ 52EC              ; ANIMSTART ( BYTE item_number,
 611+ 52EC              ;             INT[] sprite_animations )
 612+ 52EC              ; sets active flag to 1
 613+ 52EC              ANIMSTART:
 614+ 52EC 3E 01            LD A,1
 615+ 52EE 18 01            JR ANIMSTARTSTOP_COMMON
 616+ 52F0              ; *******************************************************************************************************
 617+ 52F0              ; *******************************************************************************************************
 618+ 52F0              ; function to handle CALL ANIMSTOP basic extension
 619+ 52F0              ; two forms
 620+ 52F0              ; ANIMSTOP ( BYTE id )
 621+ 52F0              ; or
 622+ 52F0              ; ANIMSTOP ( BYTE item_number,
 623+ 52F0              ;            INT[] sprite_animations )
 624+ 52F0              ; sets active flag to 1
 625+ 52F0              ANIMSTOP:
 626+ 52F0 AF               XOR A
 627+ 52F1              ANIMSTARTSTOP_COMMON:
 628+ 52F1 32 69 53         LD (ANIMSTARTSTOP_COMMON.VALUE+3),A
 629+ 52F4              ; *******************************************************************************************************
 630+ 52F4                  ; opening (
 631+ 52F4 CD 04 57     	CALL CHKCHAR
 632+ 52F7 28           	DB '('
 633+ 52F8              	; get sprite animation id or array size
 634+ 52F8 DD 21 1C 52  	LD IX,GETBYT
 635+ 52FC CD 59 01     	CALL CALBAS
 636+ 52FF F5               PUSH AF
 637+ 5300                  ; check if comma present
 638+ 5300 CD 0E 57         CALL GETPREVCHAR
 639+ 5303 23               INC HL
 640+ 5304 FE 2C            CP ','
 641+ 5306 28 0C            JR Z,.L1
 642+ 5308 FE 29            CP ')'
 643+ 530A C2 22 57         JP NZ,SYNTAX_ERROR
 644+ 530D                  ; ok so single argument variant
 645+ 530D F1               POP AF
 646+ 530E E5               PUSH HL
 647+ 530F CD 56 53         CALL .SETVALUE
 648+ 5312 E1               POP HL
 649+ 5313 C9               RET
 650+ 5314              .L1:
 651+ 5314                  ; array of items
 652+ 5314              	; get pointer to a list of animation items in integer array format
 653+ 5314 3E 01            LD A,1
 654+ 5316 32 A5 F6         LD (SUBFLG),A ; search for arrays only
 655+ 5319 DD 21 A4 5E  	LD IX, PTRGET
 656+ 531D CD 59 01     	CALL CALBAS
 657+ 5320                  ; contrary to documentation we get a pointer to array dimension in BC
 658+ 5320                  ; and type in VALTYP
 659+ 5320 3A 63 F6         LD A,(VALTYP)
 660+ 5323 FE 02            CP 2
 661+ 5325 C2 16 57         JP NZ,TYPE_MISMATCH
 662+ 5328 0A               LD A,(BC)
 663+ 5329 FE 01            CP 1
 664+ 532B C2 16 57         JP NZ,TYPE_MISMATCH
 665+ 532E 03               INC BC
 666+ 532F 0A               LD A,(BC)
 667+ 5330 D1               POP DE
 668+ 5331 D5               PUSH DE
 669+ 5332 3C               INC A
 670+ 5333 BA               CP D
 671+ 5334 DA 1A 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 672+ 5337 03          > INC BC
 672+ 5338 03          > INC BC
 673+ 5339 C5               PUSH BC
 674+ 533A              	; ending )
 675+ 533A CD 04 57     	CALL CHKCHAR
 676+ 533D 29           	DB ')'
 677+ 533E D1               POP DE ; array pointer
 678+ 533F C1               POP BC ; number of items
 679+ 5340 78               LD A,B
 680+ 5341 B7               OR A
 681+ 5342 CA 1A 57         JP Z,SUBSCRIPT_OUT_OF_RANGE
 682+ 5345 E5               PUSH HL
 683+ 5346 F3               DI
 684+ 5347              .L2:
 685+ 5347 C5               PUSH BC
 686+ 5348 1A               LD A,(DE)
 687+ 5349 13          > INC DE
 687+ 534A 13          > INC DE
 688+ 534B D5               PUSH DE
 689+ 534C CD 56 53         CALL .SETVALUE
 690+ 534F D1               POP DE
 691+ 5350 C1               POP BC
 692+ 5351 10 F4            DJNZ .L2
 693+ 5353 FB               EI
 694+ 5354 E1               POP HL
 695+ 5355 C9               RET
 696+ 5356
 697+ 5356              .SETVALUE:
 698+ 5356 47               LD B,A
 699+ 5357 3C               INC A
 700+ 5358 4F               LD C,A
 701+ 5359 3A D3 4F         LD A,(ANIMSPRNUM)
 702+ 535C B9               CP C
 703+ 535D DA 1A 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 704+ 5360 CD F4 4F         CALL GETnthSPRANIM
 705+ 5363 E5               PUSH HL
 706+ 5364 DD E1            POP IX
 707+ 5366              .VALUE:
 708+ 5366 DD 36 06 01      LD (IX+6),1 ; active flag
 709+ 536A                  ; following stuff is needed to start only, but code sharing
 710+ 536A AF               XOR A
 711+ 536B DD 77 03         LD (IX+3),A ; current item
 712+ 536E CD 18 54         CALL INIT_CURRENT_ANIMATION
 713+ 5371 C9               RET
 714+ 5372              ; *******************************************************************************************************
 715+ 5372
 716+ 5372              ; *******************************************************************************************************
 717+ 5372              ; function processes animations during vblank period
 718+ 5372              PROCESS_ANIMATIONS:
 719+ 5372 3A D3 4F         LD A,(ANIMSPRNUM)
 720+ 5375 B7               OR A
 721+ 5376 C8               RET Z; no animations defined
 722+ 5377 47               LD B,A
 723+ 5378 DD 2A D4 4F      LD IX,(ANIMSPRPTR)
 724+ 537C              .L1:
 725+ 537C C5               PUSH BC
 726+ 537D DD 7E 06         LD A,(IX+6); active
 727+ 5380 B7               OR A
 728+ 5381 CA F4 53         JP Z,.SKIP ; inactive animation
 729+ 5384 DD 6E 01         LD L,(IX+1)
 730+ 5387 DD 66 02         LD H,(IX+2) ; HL=end time
 731+ 538A ED 5B 9E FC      LD DE,(JIFFY)
 732+ 538E AF               XOR A
 733+ 538F ED 52            SBC HL,DE
 734+ 5391 F2 F4 53         JP P,.SKIP ; time until next animation item not yet reached
 735+ 5394 DD 34 03         INC (IX+3) ; current animation item
 736+ 5397 DD 4E 04         LD C,(IX+4) ; animation definition ID
 737+ 539A 0C               INC C
 738+ 539B 3A D0 4F         LD A,(ANIMDEFNUM)
 739+ 539E B9               CP C
 740+ 539F 30 07            JR NC,.L2
 741+ 53A1                  ; given animation item is outside of bounds, deactivate animation
 742+ 53A1              .STOPANIM:
 743+ 53A1 DD 36 06 00      LD (IX+6),0
 744+ 53A5 C3 F4 53         JP .SKIP
 745+ 53A8              .L2:
 746+ 53A8 0D               DEC C
 747+ 53A9 79               LD A,C
 748+ 53AA CD 18 54         CALL INIT_CURRENT_ANIMATION
 749+ 53AD 38 F2            JR C, .STOPANIM
 750+ 53AF FD 7E 00         LD A,(IY) ; type of animation item
 751+ 53B2 B7               OR A
 752+ 53B3 CA FD 53         JP Z,.L4 ; change pattern and/or color
 753+ 53B6                  ; change sprite pattern definition
 754+ 53B6 DD 7E 00         LD A,(IX) ; sprite number
 755+ 53B9 CD 86 4D         CALL GETnthSPRATTR
 756+ 53BC 23          > INC HL ; skip y and x
 756+ 53BD 23          > INC HL
 756+ 53BE 23          > INC HL
 756+ 53BF 23          > INC HL
 757+ 53C0 7E               LD A,(HL); current pattern
 758+ 53C1 26 00            LD H,0
 759+ 53C3 6F               LD L,A
 760+ 53C4 3A E0 F3         LD A,(REG1SAV)
 761+ 53C7 E6 02            AND 2
 762+ 53C9 20 07            JR NZ,.L6
 763+ 53CB                  ; 8x8 sprite
 764+ 53CB CD F3 55         CALL HLx8
 765+ 53CE 06 08            LD B,8
 766+ 53D0 18 05            JR .L5
 767+ 53D2              .L6:
 768+ 53D2 CD F1 55         CALL HLx32
 769+ 53D5 06 20            LD B,32
 770+ 53D7              .L5:
 771+ 53D7 3A AF FC     	LD A, (SCRMOD)
 772+ 53DA 3D           	DEC A
 773+ 53DB 28 06        	JR Z, .L7 ; screen 1
 774+ 53DD                  ; screen 2
 775+ 53DD ED 5B CF F3      LD DE,(GRPPAT)
 776+ 53E1 18 04            JR .L8
 777+ 53E3              .L7:
 778+ 53E3 ED 5B C5 F3      LD DE,(T32PAT)
 779+ 53E7              .L8:
 780+ 53E7 19               ADD HL,DE
 781+ 53E8 CD E0 55         CALL SETWRT_LOCAL
 782+ 53EB FD 6E 03         LD L,(IY+3)
 783+ 53EE FD 66 04         LD H,(IY+4) ; pointer to sprite patter data
 784+ 53F1 CD EB 55         CALL BBYTECOPY
 785+ 53F4              .SKIP:
 786+ 53F4 11 08 00         LD DE,8
 787+ 53F7 DD 19            ADD IX,DE
 788+ 53F9 C1               POP BC
 789+ 53FA 10 80            DJNZ .L1
 790+ 53FC C9               RET
 791+ 53FD              .L4:
 792+ 53FD                  ; change pattern and color in sprite attributes table
 793+ 53FD DD 7E 00         LD A,(IX) ; sprite number
 794+ 5400 CD 86 4D         CALL GETnthSPRATTR
 795+ 5403 23          > INC HL ; skip y and x
 795+ 5404 23          > INC HL
 795+ 5405 23          > INC HL
 795+ 5406 23          > INC HL
 796+ 5407 FD 7E 03         LD A,(IY+3) ; new pattern
 797+ 540A 77               LD (HL),A
 798+ 540B 23          > INC HL
 798+ 540C 23          > INC HL
 799+ 540D FD 7E 04         LD A,(IY+4) ; new color
 800+ 5410 77               LD (HL),A
 801+ 5411 3E 01            LD A,1
 802+ 5413 32 7E 4D         LD (SPRATR_UPDATE_FLAG),A
 803+ 5416 18 DC            JR .SKIP
 804+ 5418              ; *******************************************************************************************************
 805+ 5418
 806+ 5418              ; *******************************************************************************************************
 807+ 5418              ; function will setup sprite animation after current item change
 808+ 5418              ; input A=current animation
 809+ 5418              ; input IX=pointer to sprite animation
 810+ 5418              ; output IY=pointer to animation item
 811+ 5418              ; CF=1 error or non-cyclic animation ended, in both cases set active flag to 0
 812+ 5418              ; basically sets new end time for current animation
 813+ 5418              INIT_CURRENT_ANIMATION:
 814+ 5418 CD E8 4F         CALL GETnthANIMDEF
 815+ 541B 7E               LD A,(HL); number of animation items in the animation definition
 816+ 541C DD BE 03         CP (IX+3) ; current animation item
 817+ 541F 38 0A            JR C,.L3 ; last item not reached
 818+ 5421                  ; last item reached
 819+ 5421 DD 7E 05         LD A,(IX+5) ; cyclic flag
 820+ 5424 B7               OR A
 821+ 5425 28 2D            JR Z,.ERROR ; non-cyclic animation
 822+ 5427                  ; cyclic animation, restart
 823+ 5427 DD 36 03 00      LD (IX+3),0; current item
 824+ 542B              .L3:
 825+ 542B                  ; HL = animation definition
 826+ 542B 23               INC HL ; skip animation definition size field
 827+ 542C 16 00            LD D,0
 828+ 542E DD 5E 03         LD E,(IX+3); current item
 829+ 5431 19               ADD HL,DE
 830+ 5432 4E               LD C,(HL) ; current animation item
 831+ 5433 0C               INC C
 832+ 5434 3A CD 4F         LD A,(ANIMITEMNUM)
 833+ 5437 B9               CP C
 834+ 5438 38 1A            JR C,.ERROR ; invalid animation item, stop animation
 835+ 543A 0D               DEC C
 836+ 543B 79               LD A,C
 837+ 543C CD DF 4F         CALL GETnthANIMITEM
 838+ 543F E5               PUSH HL
 839+ 5440 FD E1            POP IY ; IY=animation item
 840+ 5442 2A 9E FC         LD HL,(JIFFY)
 841+ 5445 FD 5E 01         LD E,(IY+1)
 842+ 5448 FD 56 02         LD D,(IY+2) ; duration
 843+ 544B 19               ADD HL,DE
 844+ 544C DD 75 01         LD (IX+1),L
 845+ 544F DD 74 02         LD (IX+2),H ; end time for current item
 846+ 5452              .EXIT:
 847+ 5452 AF               XOR A
 848+ 5453 C9               RET
 849+ 5454              .ERROR:
 850+ 5454 37               SCF
 851+ 5455 C9               RET
 852+ 5456              ; *******************************************************************************************************
# file closed: asm\ANIMATION.asm
 128  5456               ENDIF
 129  5456
 130  5456              ; temp variables for BLIT, TILE functions
 131  5456               IF (BLIT_CMDS + TILE_CMDS > 0)
 132  5456              BLIT_TMP:
 133  5456              TILETMP1:
 134  5456              BLIT_TMP1:
 135  5456 00 00         DW 0
 136  5458              TILETMP2:
 137  5458              BLIT_TMP2:
 138  5458 00 00         DW 0
 139  545A                IFDEF CMDS_WITH_PARAMETERS
 140  545A              BLIT_STRUCT:
 141  545A 00 00 00...   DS 17
 142  545E                ENDIF
 143  545E               ENDIF
 144  546B
 145  546B               IF (VRAM_CMDS + TILE_CMDS + BOX_CMDS > 0)
 146  546B              VRAM_UPDATE_IN_PROGRESS:
 147  546B 00            DB 0
 148  546C               ENDIF
 149  546C
 150  546C              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 151  546C              ; per starting letter, if no commands with this letter, NULL value
 152  546C              CMDS:
 153  546C               IF (ANIM_CMDS == 1)
 154  546C 95 55        	DW CMDS_A ;
 155  546E               ELSE
 156  546E ~                DW 0 ; A
 157  546E               ENDIF
 158  546E               IF (BLIT_CMDS + BOX_CMDS > 0)
 159  546E 60 55            DW CMDS_B ; B
 160  5470               ELSE
 161  5470 ~            	DW 0
 162  5470               ENDIF
 163  5470 00 00            DW 0 ; C
 164  5472 00 00            DW 0 ; D
 165  5474 00 00            DW 0 ; E
 166  5476               IF (VRAM_CMDS + RAM_CMDS > 0)
 167  5476 DE 54            DW CMDS_F; F
 168  5478               ELSE
 169  5478 ~            	DW 0
 170  5478               ENDIF
 171  5478               IF (GENCAL_CMD > 0)
 172  5478 F1 54            DW CMDS_G; G
 173  547A               ELSE
 174  547A ~            	DW 0
 175  547A               ENDIF
 176  547A 00 00            DW 0 ; H
 177  547C 00 00            DW 0 ; I
 178  547E 00 00            DW 0 ; J
 179  5480 00 00            DW 0 ; K
 180  5482 00 00            DW 0 ; L
 181  5484               IF (VRAM_CMDS + RAM_CMDS + ANIM_CMDS > 0)
 182  5484 A0 54            DW CMDS_M ; M
 183  5486               ELSE
 184  5486 ~            	DW 0
 185  5486               ENDIF
 186  5486 00 00            DW 0 ; N
 187  5488 00 00            DW 0 ; O
 188  548A 00 00            DW 0 ; P
 189  548C 00 00            DW 0 ; Q
 190  548E 00 00            DW 0 ; R
 191  5490               IF (SOUND_CMDS + SPRITE_CMDS > 0)
 192  5490 05 55            DW CMDS_S ; S
 193  5492               ELSE
 194  5492 ~            	DW 0
 195  5492               ENDIF
 196  5492               IF (TILE_CMDS > 0)
 197  5492 80 55            DW CMDS_T ; T
 198  5494               ELSE
 199  5494 ~            	DW 0
 200  5494               ENDIF
 201  5494 00 00            DW 0 ; U
 202  5496               IF (VRAM_CMDS > 0)
 203  5496 FB 54            DW CMDS_V ; V
 204  5498               ELSE
 205  5498 ~            	DW 0
 206  5498               ENDIF
 207  5498 00 00            DW 0 ; W
 208  549A 00 00            DW 0 ; X
 209  549C 00 00            DW 0 ; Y
 210  549E 00 00            DW 0 ; Z
 211  54A0
 212  54A0              CMDS_M:
 213  54A0               IF (VRAM_CMDS == 1)
 214  54A0 4D 45 4D 56      DB "MEMVRM", 0
 214  54A4 52 4D 00
 215  54A7 75 58            DW MEMVRM
 216  54A9               ENDIF
 217  54A9               IF (RAM_CMDS == 1)
 218  54A9 4D 45 4D 43  	DB "MEMCPY", 0
 218  54AD 50 59 00
 219  54B0 2B 57        	DW MEMCPY
 220  54B2               ENDIF
 221  54B2               IF (ANIM_CMDS == 1)
 222  54B2 4D 41 58 41  	DB "MAXANIMITEMS",0
 222  54B6 4E 49 4D 49
 222  54BA 54 45 4D 53
 222  54BE 00
 223  54BF 00 50        	DW MAXANIMITEMS
 224  54C1 4D 41 58 41  	DB "MAXANIMDEFS",0
 224  54C5 4E 49 4D 44
 224  54C9 45 46 53 00
 225  54CD 75 51        	DW MAXANIMDEFS
 226  54CF 4D 41 58 41  	DB "MAXANIMSPRS",0
 226  54D3 4E 49 4D 53
 226  54D7 50 52 53 00
 227  54DB 26 52        	DW MAXANIMSPRS
 228  54DD               ENDIF
 229  54DD               IF (VRAM_CMDS + RAM_CMDS + ANIM_CMDS > 0)
 230  54DD 00           	DB 0
 231  54DE               ENDIF
 232  54DE              CMDS_F:
 233  54DE               IF (VRAM_CMDS == 1)
 234  54DE 46 49 4C 56      DB "FILVRM", 0
 234  54E2 52 4D 00
 235  54E5 6E 57            DW FILVRM
 236  54E7               ENDIF
 237  54E7               IF (RAM_CMDS == 1)
 238  54E7 46 49 4C 52      DB "FILRAM", 0
 238  54EB 41 4D 00
 239  54EE BE 57            DW FILRAM
 240  54F0               ENDIF
 241  54F0               IF (VRAM_CMDS + RAM_CMDS > 0)
 242  54F0 00               DB 0
 243  54F1               ENDIF
 244  54F1              CMDS_G:
 245  54F1               IF (GENCAL_CMD == 1)
 246  54F1 47 45 4E 43      DB "GENCAL", 0
 246  54F5 41 4C 00
 247  54F8 1C 58            DW GENCAL
 248  54FA               ENDIF
 249  54FA               IF (GENCAL_CMD > 0)
 250  54FA 00           	DB	0
 251  54FB               ENDIF
 252  54FB              CMDS_V:
 253  54FB               IF (VRAM_CMDS == 1)
 254  54FB 56 52 4D 4D  	DB "VRMMEM", 0
 254  54FF 45 4D 00
 255  5502 F6 58        	DW VRMMEM
 256  5504               ENDIF
 257  5504               IF (VRAM_CMDS > 0)
 258  5504 00           	DB 0
 259  5505               ENDIF
 260  5505              CMDS_S:
 261  5505               IF (SPRITE_CMDS == 1)
 262  5505 53 50 52 53  	DB "SPRSET", 0
 262  5509 45 54 00
 263  550C 9B 4E        	DW SPRSET
 264  550E 53 50 52 47  	DB "SPRGRPMOV", 0
 264  5512 52 50 4D 4F
 264  5516 56 00
 265  5518 4C 4F        	DW SPRGRPMOV
 266  551A               ENDIF
 267  551A               IF (SOUND_CMDS == 1)
 268  551A 53 4E 44 53  	DB "SNDSFX", 0
 268  551E 46 58 00
 269  5521 D7 59        	DW SNDSFX
 270  5523 53 4E 44 50  	DB "SNDPLYON", 0
 270  5527 4C 59 4F 4E
 270  552B 00
 271  552C A1 59        	DW SNDPLYON
 272  552E 53 4E 44 50  	DB "SNDPLYOFF", 0
 272  5532 4C 59 4F 46
 272  5536 46 00
 273  5538 B4 59        	DW SNDPLYOFF
 274  553A 53 4E 44 50  	DB "SNDPLYINI", 0
 274  553E 4C 59 49 4E
 274  5542 49 00
 275  5544 57 59        	DW SNDPLYINIT
 276  5546               ENDIF
 277  5546               IF (SPRITE_CMDS == 1)
 278  5546 53 50 52 45  	DB "SPRENABLE", 0
 278  554A 4E 41 42 4C
 278  554E 45 00
 279  5550 46 4E        	DW SPRENABLE
 280  5552 53 50 52 44  	DB "SPRDISABLE", 0
 280  5556 49 53 41 42
 280  555A 4C 45 00
 281  555D 96 4E        	DW SPRDISABLE
 282  555F               ENDIF
 283  555F               IF (SOUND_CMDS + SPRITE_CMDS > 0)
 284  555F 00           	DB 0
 285  5560               ENDIF
 286  5560              CMDS_B:
 287  5560               IF (BLIT_CMDS == 1)
 288  5560 42 4C 49 54  	DB "BLIT", 0
 288  5564 00
 289  5565 AE 5B        	DW BLIT
 290  5567               ENDIF
 291  5567               IF (BOX_CMDS == 1)
 292  5567 42 4F 58 4D  	DB "BOXMEMCPY", 0
 292  556B 45 4D 43 50
 292  556F 59 00
 293  5571 E6 5E        	DW BOXMEMCPY
 294  5573 42 4F 58 4D  	DB "BOXMEMVRM", 0
 294  5577 45 4D 56 52
 294  557B 4D 00
 295  557D 1A 5F        	DW BOXMEMVRM
 296  557F               ENDIF
 297  557F               IF (BLIT_CMDS + BOX_CMDS > 0)
 298  557F 00           	DB 0
 299  5580               ENDIF
 300  5580              CMDS_T:
 301  5580               IF (TILE_CMDS == 1)
 302  5580 54 49 4C 45  	DB "TILERAM", 0
 302  5584 52 41 4D 00
 303  5588 F2 5C        	DW TILERAM
 304  558A 54 49 4C 45  	DB "TILEVRM", 0
 304  558E 56 52 4D 00
 305  5592 F5 5D        	DW TILEVRM
 306  5594               ENDIF
 307  5594               IF (TILE_CMDS > 0)
 308  5594 00           	DB 0
 309  5595               ENDIF
 310  5595              CMDS_A:
 311  5595               IF (ANIM_CMDS == 1)
 312  5595 41 4E 49 4D  	DB "ANIMSTART",0
 312  5599 53 54 41 52
 312  559D 54 00
 313  559F EC 52        	DW ANIMSTART
 314  55A1 41 4E 49 4D  	DB "ANIMSTOP",0
 314  55A5 53 54 4F 50
 314  55A9 00
 315  55AA F0 52        	DW ANIMSTOP
 316  55AC 41 4E 49 4D  	DB "ANIMITEMPAT",0
 316  55B0 49 54 45 4D
 316  55B4 50 41 54 00
 317  55B8 C0 50        	DW ANIMITEMPAT
 318  55BA 41 4E 49 4D  	DB "ANIMITEMPTR",0
 318  55BE 49 54 45 4D
 318  55C2 50 54 52 00
 319  55C6 21 51        	DW ANIMITEMPTR_CMD
 320  55C8 41 4E 49 4D  	DB "ANIMDEF",0
 320  55CC 44 45 46 00
 321  55D0 B7 51        	DW ANIMDEF
 322  55D2 41 4E 49 4D  	DB "ANIMSPRITE",0
 322  55D6 53 50 52 49
 322  55DA 54 45 00
 323  55DD 7C 52        	DW ANIMSPRITE
 324  55DF 00           	DB 0
 325  55E0               ENDIF
 326  55E0
 327  55E0               IF (VRAM_CMDS + TILE_CMDS + SPRITE_CMDS > 0)
 328  55E0              ; ****************************************************************************************************
 329  55E0              ; function sets VRAM address
 330  55E0              ; input HL=address
 331  55E0              ; modifies AF
 332  55E0              SETWRT_LOCAL:
 333  55E0 7D           	LD	A, L
 334  55E1 D3 99        	OUT	(099H), A
 335  55E3 7C           	LD	A, H
 336  55E4 E6 3F        	AND	03FH
 337  55E6 F6 40        	OR	040H
 338  55E8 D3 99        	OUT	(099H), A
 339  55EA C9           	RET
 340  55EB              ; ****************************************************************************************************
 341  55EB               ENDIF
 342  55EB
 343  55EB               IF (VRAM_CMDS + TILE_CMDS > 0)
 344  55EB              ; ****************************************************************************************************
 345  55EB              ; function copies data from RAM to VRAM
 346  55EB              ; input HL=address in RAM
 347  55EB              ; input B=count
 348  55EB              ; modifies AF
 349  55EB              BBYTECOPY:
 350  55EB ED A3        	OUTI
 351  55ED C2 EB 55     	JP	NZ, BBYTECOPY
 352  55F0 C9           	RET
 353  55F1              ; ****************************************************************************************************
 354  55F1               ENDIF
 355  55F1
 356  55F1              ; ****************************************************************************************************
 357  55F1              ; function multiplies HL by 32
 358  55F1              HLx32:
 359  55F1 29           	ADD HL,HL
 360  55F2              ; ****************************************************************************************************
 361  55F2              ; function multiplies HL by 16
 362  55F2              HLx16:
 363  55F2 29           	ADD HL,HL
 364  55F3              ; ****************************************************************************************************
 365  55F3              ; function multiplies HL by 8
 366  55F3              HLx8:
 367  55F3 29          > ADD HL, HL
 367  55F4 29          > ADD HL, HL
 367  55F5 29          > ADD HL, HL
 368  55F6 C9           	RET
 369  55F7              ; ****************************************************************************************************
 370  55F7
 371  55F7              ; ****************************************************************************************************
 372  55F7              ; function gets slot and subslot data for specific page
 373  55F7              ; input A=page (0, 1 or 2)
 374  55F7              ; output B = 0A8H register value
 375  55F7              ; output D = 0 is no subslots, 1 if yes
 376  55F7              ; output C = 0A8H value when page 3 slot equals to requested page slot
 377  55F7              ; output E = subslot value if present
 378  55F7              ; modifies AF, BC, DE, HL
 379  55F7              GET_PAGE_INFO:
 380  55F7 6F               LD L, A
 381  55F8 C6 C1            ADD A, low (EXPTBL)
 382  55FA 32 04 56         LD (GET_PAGE_INFO_L1+1), A
 383  55FD DB A8            IN A, (0A8H)
 384  55FF 47               LD B, A
 385  5600 E6 3F            AND 03FH
 386  5602 4F               LD C, A
 387  5603              GET_PAGE_INFO_L1:
 388  5603 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 389  5606 E6 80            AND 080H
 390  5608 28 1B            JR Z, GET_PAGE_INFO_L2
 391  560A                  ; expanded
 392  560A 2D               DEC L
 393  560B FA 2A 56         JP M, GET_PAGE_INFO_L3
 394  560E 2D               DEC L
 395  560F FA 28 56         JP M, GET_PAGE_INFO_L4
 396  5612                  ; page 2
 397  5612 07               RLCA
 398  5613 07               RLCA
 399  5614              GET_PAGE_INFO_L5:
 400  5614 E6 C0            AND 0C0H
 401  5616 B1               OR C
 402  5617 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 403  5619 4F               LD C, A
 404  561A 3A FF FF         LD A, (0FFFFH)
 405  561D 2F               CPL
 406  561E 5F               LD E, A
 407  561F 16 01            LD D, 1
 408  5621 78               LD A, B ; return stack
 409  5622 D3 A8            OUT (0A8H), A
 410  5624 C9               RET
 411  5625              GET_PAGE_INFO_L2:
 412  5625                  ; not expanded
 413  5625 16 00            LD D, 0
 414  5627 C9               RET
 415  5628              GET_PAGE_INFO_L4:
 416  5628                  ; page 1
 417  5628 0F               RRCA
 418  5629 0F               RRCA
 419  562A              GET_PAGE_INFO_L3:
 420  562A                  ; page 0
 421  562A 0F               RRCA
 422  562B 0F               RRCA
 423  562C 18 E6            JR GET_PAGE_INFO_L5
 424  562E              ; ****************************************************************************************************
 425  562E
 426  562E              ; ****************************************************************************************************
 427  562E              ; function returns original slot and subslot info
 428  562E              ; input B = 0A8H register value
 429  562E              ; input D = 0 is no subslots, 1 if yes
 430  562E              ; input C = 0A8H value when page 3 slot equals to requested page slot
 431  562E              ; input E = subslot value if present
 432  562E              ; modifies AF, disables interrupts
 433  562E              RESTORE_PAGE_INFO:
 434  562E 7A               LD A, D
 435  562F B7               OR A
 436  5630 28 08            JR Z, RESTORE_PAGE_INFO_L1
 437  5632 79               LD A, C
 438  5633 F3           	DI
 439  5634 D3 A8            OUT (0A8H), A
 440  5636 7B               LD A, E
 441  5637 32 FF FF         LD (0FFFFH), A
 442  563A              RESTORE_PAGE_INFO_L1:
 443  563A 78               LD A, B
 444  563B D3 A8            OUT (0A8H), A
 445  563D C9               RET
 446  563E              ; ****************************************************************************************************
 447  563E
 448  563E              ; *******************************************************************************************************
 449  563E              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 450  563E              ; INPUT:  A = SLOT ID: EXXXSSPP
 451  563E              ; E = EXPANDED FLAG
 452  563E              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 453  563E              ; PP = PRIMARY SLOT NUMBER
 454  563E              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 455  563E              ; CHANGES: AF, BC, DE
 456  563E
 457  563E              LOCAL_ENASLT:
 458  563E CD 5E 56         CALL L0353
 459  5641 FA 4B 56         JP M, L0340
 460  5644 DB A8            IN A, (0A8H)
 461  5646 A1               AND C
 462  5647 B0               OR B
 463  5648 D3 A8            OUT (0A8H), A
 464  564A C9               RET
 465  564B              L0340:
 466  564B E5               PUSH HL
 467  564C CD 83 56         CALL L0378
 468  564F 4F               LD C, A
 469  5650 06 00            LD B, 0
 470  5652 7D               LD A, L
 471  5653 A4               AND H
 472  5654 B2               OR D
 473  5655 21 C5 FC         LD HL, 0FCC5H
 474  5658 09               ADD HL, BC
 475  5659 77               LD (HL), A
 476  565A E1               POP HL
 477  565B 79               LD A, C
 478  565C 18 E0            JR LOCAL_ENASLT
 479  565E              L0353:
 480  565E F3               DI
 481  565F F5               PUSH AF
 482  5660 7C               LD A, H
 483  5661 07               RLCA
 484  5662 07               RLCA
 485  5663 E6 03            AND 3
 486  5665 5F               LD E, A
 487  5666 3E C0            LD A, 0C0H
 488  5668              L035D:
 489  5668 07               RLCA
 490  5669 07               RLCA
 491  566A 1D               DEC E
 492  566B F2 68 56         JP P, L035D
 493  566E 5F               LD E, A
 494  566F 2F               CPL
 495  5670 4F               LD C, A
 496  5671 F1               POP AF
 497  5672 F5               PUSH AF
 498  5673 E6 03            AND 3
 499  5675 3C               INC A
 500  5676 47               LD B, A
 501  5677 3E AB            LD A, 0ABH
 502  5679              L036E:
 503  5679 C6 55            ADD A, 055H
 504  567B 10 FC            DJNZ L036E
 505  567D 57               LD D, A
 506  567E A3               AND E
 507  567F 47               LD B, A
 508  5680 F1               POP AF
 509  5681 A7               AND A
 510  5682 C9               RET
 511  5683              L0378:
 512  5683 F5               PUSH AF
 513  5684 7A               LD A, D
 514  5685 E6 C0            AND 0C0H
 515  5687 4F               LD C, A
 516  5688 F1               POP AF
 517  5689 F5               PUSH AF
 518  568A 57               LD D, A
 519  568B DB A8            IN A, (0A8H)
 520  568D 47               LD B, A
 521  568E E6 3F            AND 03FH
 522  5690 B1               OR C
 523  5691 D3 A8            OUT (0A8H), A
 524  5693 7A               LD A, D
 525  5694 0F               RRCA
 526  5695 0F               RRCA
 527  5696 E6 03            AND 3
 528  5698 57               LD D, A
 529  5699 3E AB            LD A, 0ABH
 530  569B              L0390:
 531  569B C6 55            ADD A, 055H
 532  569D 15               DEC D
 533  569E F2 9B 56         JP P, L0390
 534  56A1 A3               AND E
 535  56A2 57               LD D, A
 536  56A3 7B               LD A, E
 537  56A4 2F               CPL
 538  56A5 67               LD H, A
 539  56A6 3A FF FF         LD A, (0FFFFH)
 540  56A9 2F               CPL
 541  56AA 6F               LD L, A
 542  56AB A4               AND H
 543  56AC B2               OR D
 544  56AD 32 FF FF         LD (0FFFFH), A
 545  56B0 78               LD A, B
 546  56B1 D3 A8            OUT (0A8H), A
 547  56B3 F1               POP AF
 548  56B4 E6 03            AND 3
 549  56B6 C9               RET
 550  56B7              ; *******************************************************************************************************
 551  56B7
 552  56B7              ; *******************************************************************************************************
 553  56B7              ; some common code to activate page 0 and place values needed to restore original page on stack
 554  56B7              ; input IY=return address
 555  56B7              ENABLE_PAGE0:
 556  56B7 AF               XOR A
 557  56B8 CD F7 55         CALL GET_PAGE_INFO
 558  56BB C5               PUSH BC
 559  56BC D5               PUSH DE
 560  56BD 3A 41 F3         LD A, (RAMAD0)
 561  56C0 26 00            LD H, 0
 562  56C2 CD 3E 56         CALL LOCAL_ENASLT
 563  56C5 FD E9        	JP (IY)
 564  56C7              ; *******************************************************************************************************
 565  56C7
 566  56C7              ; General BASIC CALL-instruction handler
 567  56C7              CALLHAND:
 568  56C7 E5           	PUSH HL
 569  56C8 21 6C 54     	LD	HL, CMDS ; pointer table based on starting letter
 570  56CB 3A 89 FD         LD A, (PROCNM)
 571  56CE D6 41            SUB 'A'
 572  56D0 87               ADD A, A
 573  56D1 16 00            LD D, 0
 574  56D3 5F               LD E, A
 575  56D4 19               ADD HL, DE
 576  56D5 5E               LD E, (HL)
 577  56D6 23               INC HL
 578  56D7 56               LD D, (HL)
 579  56D8 7A               LD A, D
 580  56D9 B3               OR E
 581  56DA 28 23            JR Z, .CMDNOTRECOGNIZED
 582  56DC EB               EX DE, HL
 583  56DD              .CHKCMD:
 584  56DD 11 89 FD     	LD	DE, PROCNM
 585  56E0 1A           .LOOP:	LD	A,(DE)
 586  56E1 BE           	CP	(HL)
 587  56E2 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 588  56E4 13           	INC	DE
 589  56E5 23           	INC	HL
 590  56E6 A7           	AND	A
 591  56E7 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 592  56E9 5E           	LD	E,(HL)
 593  56EA 23           	INC	HL
 594  56EB 56           	LD	D,(HL)
 595  56EC E1           	POP	HL		; routine address
 596  56ED CD 0E 57     	CALL	GETPREVCHAR
 597  56F0 CD 02 57     	CALL	.CALLDE		; Call routine
 598  56F3 A7           	AND	A
 599  56F4 C9           	RET
 600  56F5
 601  56F5              .TONEXTCMD:
 602  56F5 0E FF        	LD	C,0FFH
 603  56F7 AF           	XOR	A
 604  56F8 ED B1        	CPIR			; Skip to end of instruction name
 605  56FA 23           	INC	HL
 606  56FB 23           	INC	HL		; Skip address
 607  56FC BE           	CP	(HL)
 608  56FD 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 609  56FF              .CMDNOTRECOGNIZED:
 610  56FF E1           	POP	HL
 611  5700 37               SCF
 612  5701 C9           	RET
 613  5702
 614  5702              .CALLDE:
 615  5702 D5           	PUSH	DE
 616  5703 C9           	RET
 617  5704
 618  5704              ;---------------------------
 619  5704
 620  5704              ;GETSTRPNT:
 621  5704              ; OUT:
 622  5704              ; HL = String Address
 623  5704              ; B  = Lenght
 624  5704              ;        LD      HL,(USR)
 625  5704              ;        LD      B,(HL)
 626  5704              ;        INC     HL
 627  5704              ;        LD      E,(HL)
 628  5704              ;        INC     HL
 629  5704              ;        LD      D,(HL)
 630  5704              ;        EX      DE,HL
 631  5704              ;        RET
 632  5704
 633  5704              ;EVALTXTPARAM:
 634  5704              ;	CALL	CHKCHAR
 635  5704              ;	DEFB	"("             ; Check for (
 636  5704              ;	LD	IX,FRMEVL
 637  5704              ;	CALL	CALBAS		; Evaluate expression
 638  5704              ;       LD      A,(VALTYP)
 639  5704              ;        CP      3               ; Text type?
 640  5704              ;        JP      NZ,TYPE_MISMATCH
 641  5704              ;        PUSH	HL
 642  5704              ;        LD	IX,FRESTR         ; Free the temporary string
 643  5704              ;        CALL	CALBAS
 644  5704              ;        POP	HL
 645  5704              ;	CALL	CHKCHAR
 646  5704              ;	DEFB	")"             ; Check for )
 647  5704              ;        RET
 648  5704
 649  5704
 650  5704              CHKCHAR:
 651  5704 CD 0E 57     	CALL	GETPREVCHAR	; Get previous basic char
 652  5707 E3           	EX	(SP),HL
 653  5708 BE           	CP	(HL) 	        ; Check if good char
 654  5709 20 17        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 655  570B 23           	INC	HL
 656  570C E3           	EX	(SP),HL
 657  570D 23           	INC	HL		; Get next basic char
 658  570E
 659  570E              GETPREVCHAR:
 660  570E 2B           	DEC	HL
 661  570F DD 21 66 46  	LD	IX,CHRGTR
 662  5713 C3 59 01     	JP      CALBAS
 663  5716
 664  5716
 665  5716              TYPE_MISMATCH:
 666  5716 1E 0D            LD E, 13 ; Type mismatch
 667  5718 18 0A            JR THROW_ERROR
 668  571A              SUBSCRIPT_OUT_OF_RANGE:
 669  571A 1E 09            LD E,9 ; subscript out of range
 670  571C 18 06        	JR THROW_ERROR
 671  571E              OVERFLOW:
 672  571E 1E 06        	LD E,6
 673  5720 18 02        	JR THROW_ERROR
 674  5722              SYNTAX_ERROR:
 675  5722 1E 02            LD E, 2 ; Syntax error
 676  5724              THROW_ERROR:
 677  5724 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 678  5728 C3 59 01     	JP	CALBAS
 679  572B
 680  572B              ;---------------------------
 681  572B
 682  572B               IF (RAM_CMDS == 1)
 683  572B              ; *******************************************************************************************************
 684  572B              ; function to handle CALL MEMCPY basic extension
 685  572B              ; _MEMCPY ( INT source,
 686  572B              ;			INT destination,
 687  572B              ;			INT count,
 688  572B              ; will put ram in page 0 also, page 1 is already there
 689  572B              MEMCPY:
 690  572B              	; opening (
 691  572B CD 04 57     	CALL CHKCHAR
 692  572E 28           	DB '('
 693  572F              	; get source address
 694  572F DD 21 2F 54  	LD IX, FRMQNT
 695  5733 CD 59 01     	CALL CALBAS
 696  5736 D5           	PUSH DE
 697  5737              	; comma
 698  5737 CD 04 57     	CALL CHKCHAR
 699  573A 2C           	DB ','
 700  573B              	; get destination address
 701  573B DD 21 2F 54  	LD IX, FRMQNT
 702  573F CD 59 01     	CALL CALBAS
 703  5742 D5           	PUSH DE
 704  5743              	; comma
 705  5743 CD 04 57     	CALL CHKCHAR
 706  5746 2C           	DB ','
 707  5747              	; get length
 708  5747 DD 21 2F 54  	LD IX, FRMQNT
 709  574B CD 59 01     	CALL CALBAS
 710  574E D5           	PUSH DE
 711  574F              	; ending )
 712  574F CD 04 57     	CALL CHKCHAR
 713  5752 29           	DB ')'
 714  5753
 715  5753              	; save position
 716  5753 E5           	PUSH HL
 717  5754 DD E1        	POP IX
 718  5756
 719  5756 C1           	POP BC ; count
 720  5757 D1           	POP DE ; destination
 721  5758 E1           	POP HL ; source
 722  5759 D9           	EXX
 723  575A              	; enable page 0
 724  575A FD 21 61 57  	LD IY, .RET
 725  575E C3 B7 56     	JP ENABLE_PAGE0
 726  5761              .RET:
 727  5761 FB           	EI
 728  5762 D9           	EXX
 729  5763 ED B0        	LDIR
 730  5765 D1               POP DE
 731  5766 C1               POP BC
 732  5767 CD 2E 56         CALL RESTORE_PAGE_INFO
 733  576A DD E5        	PUSH IX
 734  576C E1           	POP HL
 735  576D C9           	RET
 736  576E              ; *******************************************************************************************************
 737  576E               ENDIF
 738  576E
 739  576E               IF (VRAM_CMDS == 1)
 740  576E              ; *******************************************************************************************************
 741  576E              ; function to handle CALL FILVRM basic extension
 742  576E              ; FILVRM ( INT offset,
 743  576E              ;		   INT count,
 744  576E              ;		   BYTE value,
 745  576E              ;		   BYTE wait_vsync) >0 = true
 746  576E              ; wait_vsync will issue HALT before copying
 747  576E              FILVRM:
 748  576E              	; opening (
 749  576E CD 04 57     	CALL CHKCHAR
 750  5771 28           	DB '('
 751  5772              	; get offset address
 752  5772 DD 21 2F 54  	LD IX, FRMQNT
 753  5776 CD 59 01     	CALL CALBAS
 754  5779 D5           	PUSH DE
 755  577A              	; comma
 756  577A CD 04 57     	CALL CHKCHAR
 757  577D 2C           	DB ','
 758  577E              	; get count
 759  577E DD 21 2F 54  	LD IX, FRMQNT
 760  5782 CD 59 01     	CALL CALBAS
 761  5785 D5           	PUSH DE
 762  5786              	; comma
 763  5786 CD 04 57     	CALL CHKCHAR
 764  5789 2C           	DB ','
 765  578A              	; get value
 766  578A DD 21 1C 52  	LD IX, GETBYT
 767  578E CD 59 01     	CALL CALBAS
 768  5791 F5           	PUSH AF
 769  5792              	; comma
 770  5792 CD 04 57     	CALL CHKCHAR
 771  5795 2C           	DB ','
 772  5796              	; get vsync wait
 773  5796 DD 21 1C 52  	LD IX, GETBYT
 774  579A CD 59 01     	CALL CALBAS
 775  579D F5           	PUSH AF
 776  579E              	; ending )
 777  579E CD 04 57     	CALL CHKCHAR
 778  57A1 29           	DB ')'
 779  57A2
 780  57A2 FB               EI
 781  57A3              	; save position
 782  57A3 E5           	PUSH HL
 783  57A4 DD E1        	POP IX
 784  57A6
 785  57A6              	; syntax ok
 786  57A6              	; wait for vsync if needed
 787  57A6 F1           	POP AF
 788  57A7 B7           	OR A
 789  57A8 28 01        	JR Z, .L1
 790  57AA 76           	HALT
 791  57AB
 792  57AB              .L1:
 793  57AB F1               POP AF ; value
 794  57AC C1               POP BC ; count
 795  57AD E1               POP HL ; offset
 796  57AE 3E 01        	LD A,1
 797  57B0 32 6B 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
 798  57B3 CD 56 00         CALL BIOS_FILVRM
 799  57B6 AF           	XOR A
 800  57B7 32 6B 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
 801  57BA
 802  57BA              .L3:
 803  57BA DD E5        	PUSH IX
 804  57BC E1           	POP HL
 805  57BD C9           	RET
 806  57BE              ; *******************************************************************************************************
 807  57BE               ENDIF
 808  57BE
 809  57BE               IF (RAM_CMDS == 1)
 810  57BE              ; *******************************************************************************************************
 811  57BE              ; function to handle CALL FILRAM basic extension
 812  57BE              ; FILRAM ( INT start address,
 813  57BE              ;		   INT count,
 814  57BE              ;		   BYTE value,
 815  57BE              ; will put ram in page 0 also, page 1 is already there
 816  57BE              FILRAM:
 817  57BE              	; opening (
 818  57BE CD 04 57     	CALL CHKCHAR
 819  57C1 28           	DB '('
 820  57C2              	; get start address
 821  57C2 DD 21 2F 54  	LD IX, FRMQNT
 822  57C6 CD 59 01     	CALL CALBAS
 823  57C9 D5           	PUSH DE
 824  57CA              	; comma
 825  57CA CD 04 57     	CALL CHKCHAR
 826  57CD 2C           	DB ','
 827  57CE              	; get count
 828  57CE DD 21 2F 54  	LD IX, FRMQNT
 829  57D2 CD 59 01     	CALL CALBAS
 830  57D5 D5           	PUSH DE
 831  57D6              	; comma
 832  57D6 CD 04 57     	CALL CHKCHAR
 833  57D9 2C           	DB ','
 834  57DA              	; get value
 835  57DA DD 21 1C 52  	LD IX, GETBYT
 836  57DE CD 59 01     	CALL CALBAS
 837  57E1 F5           	PUSH AF
 838  57E2              	; ending )
 839  57E2 CD 04 57     	CALL CHKCHAR
 840  57E5 29           	DB ')'
 841  57E6
 842  57E6              	; save position
 843  57E6 E5           	PUSH HL
 844  57E7 DD E1        	POP IX
 845  57E9
 846  57E9 D1           	POP DE ; actually AF
 847  57EA C1           	POP BC ; count
 848  57EB E1           	POP HL ; start address
 849  57EC 78           	LD A, B
 850  57ED B7           	OR A
 851  57EE 20 0A        	JR NZ, .L1 ; >=256 bytes to fill
 852  57F0 B1           	OR C
 853  57F1 28 19        	JR Z, .EXIT ; 0 bytes to fill, skip
 854  57F3 79           	LD A, C
 855  57F4 3D           	DEC A
 856  57F5 20 03        	JR NZ, .L1 ; ; >1 byte to fill
 857  57F7              	; one byte to fill
 858  57F7 72           	LD (HL), D
 859  57F8 18 12        	JR .EXIT
 860  57FA              .L1:
 861  57FA D9           	EXX
 862  57FB              	; enable page 0
 863  57FB FD 21 02 58  	LD IY, .RET
 864  57FF C3 B7 56     	JP ENABLE_PAGE0
 865  5802              .RET:
 866  5802 FB           	EI
 867  5803 D9           	EXX
 868  5804 CD 10 58     	CALL .FILLVALUE
 869  5807 D1               POP DE
 870  5808 C1               POP BC
 871  5809 CD 2E 56         CALL RESTORE_PAGE_INFO
 872  580C              .EXIT:
 873  580C DD E5        	PUSH IX
 874  580E E1           	POP HL
 875  580F C9           	RET
 876  5810
 877  5810              .FILLVALUE:
 878  5810 72               LD (HL), D
 879  5811 54               LD D, H
 880  5812 5D               LD E, L
 881  5813 13               INC DE
 882  5814 0B               DEC BC
 883  5815 ED B0            LDIR
 884  5817 C9               RET
 885  5818              ; *******************************************************************************************************
 886  5818               ENDIF
 887  5818
 888  5818               IF (GENCAL_CMD == 1)
 889  5818              ; *******************************************************************************************************
 890  5818              ; function to handle CALL GENCAL basic extension
 891  5818              ; GENCAL ( INT fn_addr, = address of the function to call
 892  5818              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 893  5818              ; output values of reristers will also be stored at reg_list_ptr
 894  5818              GENCAL_VAR_SP:
 895  5818 00 00            DW 0
 896  581A              GENCAL_VAR_SP2:
 897  581A 00 00            DW 0
 898  581C              GENCAL:
 899  581C              	; opening (
 900  581C CD 04 57     	CALL CHKCHAR
 901  581F 28           	DB '('
 902  5820              	; get function address
 903  5820 DD 21 2F 54  	LD IX, FRMQNT
 904  5824 CD 59 01     	CALL CALBAS
 905  5827 D5           	PUSH DE
 906  5828              	; comma
 907  5828 CD 04 57     	CALL CHKCHAR
 908  582B 2C           	DB ','
 909  582C              	; get pointer to register list
 910  582C DD 21 2F 54  	LD IX, FRMQNT
 911  5830 CD 59 01     	CALL CALBAS
 912  5833 D5           	PUSH DE
 913  5834              	; ending )
 914  5834 CD 04 57     	CALL CHKCHAR
 915  5837 29           	DB ')'
 916  5838
 917  5838              	; save BASIC token position
 918  5838 E5           	PUSH HL
 919  5839 D9               EXX
 920  583A E1           	POP HL ; HL'=next basic token
 921  583B D9               EXX
 922  583C
 923  583C E1               POP HL ; get pointer to register values
 924  583D F3           	DI
 925  583E ED 73 18 58      LD (GENCAL_VAR_SP), SP
 926  5842 F9               LD SP, HL
 927  5843 F1               POP AF
 928  5844 C1               POP BC
 929  5845 D1               POP DE
 930  5846 E1               POP HL
 931  5847 DD E1            POP IX
 932  5849 FD E1            POP IY
 933  584B D9               EXX
 934  584C ED 73 1A 58      LD (GENCAL_VAR_SP2), SP
 935  5850 ED 7B 18 58      LD SP, (GENCAL_VAR_SP)
 936  5854 FB               EI
 937  5855 D1               POP DE ; get function to call
 938  5856 E5               PUSH HL
 939  5857 CD 72 58         CALL .EXXDECALL
 940  585A F3               DI
 941  585B ED 73 18 58      LD (GENCAL_VAR_SP), SP
 942  585F ED 7B 1A 58      LD SP, (GENCAL_VAR_SP2)
 943  5863 FD E5            PUSH IY
 944  5865 DD E5            PUSH IX
 945  5867 E5               PUSH HL
 946  5868 D5               PUSH DE
 947  5869 C5               PUSH BC
 948  586A F5               PUSH AF
 949  586B ED 7B 18 58      LD SP, (GENCAL_VAR_SP)
 950  586F FB               EI
 951  5870 E1               POP HL
 952  5871 C9           	RET
 953  5872
 954  5872              .EXXDECALL:
 955  5872 D5               PUSH DE
 956  5873 D9               EXX
 957  5874 C9               RET
 958  5875              ; *******************************************************************************************************
 959  5875               ENDIF
 960  5875
 961  5875               IF (VRAM_CMDS == 1)
 962  5875              ; *******************************************************************************************************
 963  5875              ; function to handle CALL MEMVRM basic extension
 964  5875              ; copies from RAM to VRAM
 965  5875              ; _MEMVRM ( INT source,
 966  5875              ;			INT destination,
 967  5875              ;			INT count,
 968  5875              ;			BYTE wait_vsync) >0 = true
 969  5875              ; will put ram in page 0 also, page 1 is already there
 970  5875              ; wait_vsync will issue HALT before copying
 971  5875              MEMVRM:
 972  5875              	; opening (
 973  5875 CD 04 57     	CALL CHKCHAR
 974  5878 28           	DB '('
 975  5879              	; get source address
 976  5879 DD 21 2F 54  	LD IX, FRMQNT
 977  587D CD 59 01     	CALL CALBAS
 978  5880 D5           	PUSH DE
 979  5881              	; comma
 980  5881 CD 04 57     	CALL CHKCHAR
 981  5884 2C           	DB ','
 982  5885              	; get destination address
 983  5885 DD 21 2F 54  	LD IX, FRMQNT
 984  5889 CD 59 01     	CALL CALBAS
 985  588C D5           	PUSH DE
 986  588D              	; comma
 987  588D CD 04 57     	CALL CHKCHAR
 988  5890 2C           	DB ','
 989  5891              	; get length
 990  5891 DD 21 2F 54  	LD IX, FRMQNT
 991  5895 CD 59 01     	CALL CALBAS
 992  5898 D5           	PUSH DE
 993  5899              	; comma
 994  5899 CD 04 57     	CALL CHKCHAR
 995  589C 2C           	DB ','
 996  589D              	; get vsync wait
 997  589D DD 21 1C 52  	LD IX, GETBYT
 998  58A1 CD 59 01     	CALL CALBAS
 999  58A4 F5           	PUSH AF
1000  58A5              	; ending )
1001  58A5 CD 04 57     	CALL CHKCHAR
1002  58A8 29           	DB ')'
1003  58A9
1004  58A9                  ; save position in BASIC text
1005  58A9 E5           	PUSH HL
1006  58AA DD E1        	POP IX
1007  58AC
1008  58AC F1           	POP AF ; wait vsync
1009  58AD B7           	OR A
1010  58AE 28 03        	JR Z, .L1
1011  58B0 FB               EI
1012  58B1 76           	HALT
1013  58B2 F3           	DI
1014  58B3              .L1:
1015  58B3              	; pop LDIR parameters and store away for later
1016  58B3 C1           	POP BC ; count
1017  58B4 D1           	POP DE ; vram destination
1018  58B5 E1           	POP HL ; ram source
1019  58B6 D9           	EXX
1020  58B7 FD 21 BE 58   	LD IY, .RET
1021  58BB C3 B7 56     	JP ENABLE_PAGE0
1022  58BE              .RET:
1023  58BE FB           	EI
1024  58BF D9           	EXX
1025  58C0 3E 01        	LD A,1
1026  58C2 32 6B 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
1027  58C5 CD D5 58     	CALL .LDIRVM
1028  58C8 AF           	XOR A
1029  58C9 32 6B 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
1030  58CC D1               POP DE
1031  58CD C1               POP BC
1032  58CE CD 2E 56         CALL RESTORE_PAGE_INFO
1033  58D1 DD E5        	PUSH IX
1034  58D3 E1           	POP HL
1035  58D4 C9           	RET
1036  58D5
1037  58D5              .LDIRVM:
1038  58D5 EB           	EX DE, HL
1039  58D6 F3           	DI
1040  58D7 CD E0 55     	CALL SETWRT_LOCAL
1041  58DA FB           	EI
1042  58DB EB           	EX DE, HL
1043  58DC 78           	LD A, B
1044  58DD B7           	OR A
1045  58DE 28 0D        	JR Z, .L3
1046  58E0 C5           	PUSH BC
1047  58E1 0E 98        	LD C, #98
1048  58E3              .L2:
1049  58E3 50           	LD D, B
1050  58E4 06 00        	LD B, 0
1051  58E6 CD EB 55     	CALL BBYTECOPY
1052  58E9 42           	LD B, D
1053  58EA 10 F7        	DJNZ .L2
1054  58EC C1           	POP BC
1055  58ED              .L3:
1056  58ED 79           	LD A, C
1057  58EE B7           	OR A
1058  58EF C8           	RET Z
1059  58F0 41           	LD B, C
1060  58F1 0E 98        	LD C, #98
1061  58F3 C3 EB 55     	JP BBYTECOPY
1062  58F6              ; *******************************************************************************************************
1063  58F6               ENDIF
1064  58F6
1065  58F6               IF (VRAM_CMDS == 1)
1066  58F6              ; *******************************************************************************************************
1067  58F6              ; function to handle CALL VRMMEM basic extension
1068  58F6              ; copies from RAM to VRAM
1069  58F6              ; _VRMMEM ( INT source,
1070  58F6              ;			INT destination,
1071  58F6              ;			INT count
1072  58F6              ; will put ram in page 0 also, page 1 is already there
1073  58F6              VRMMEM:
1074  58F6              	; opening (
1075  58F6 CD 04 57     	CALL CHKCHAR
1076  58F9 28           	DB '('
1077  58FA              	; get source address
1078  58FA DD 21 2F 54  	LD IX, FRMQNT
1079  58FE CD 59 01     	CALL CALBAS
1080  5901 D5           	PUSH DE
1081  5902              	; comma
1082  5902 CD 04 57     	CALL CHKCHAR
1083  5905 2C           	DB ','
1084  5906              	; get destination address
1085  5906 DD 21 2F 54  	LD IX, FRMQNT
1086  590A CD 59 01     	CALL CALBAS
1087  590D D5           	PUSH DE
1088  590E              	; comma
1089  590E CD 04 57     	CALL CHKCHAR
1090  5911 2C           	DB ','
1091  5912              	; get length
1092  5912 DD 21 2F 54  	LD IX, FRMQNT
1093  5916 CD 59 01     	CALL CALBAS
1094  5919 D5           	PUSH DE
1095  591A              	; ending )
1096  591A CD 04 57     	CALL CHKCHAR
1097  591D 29           	DB ')'
1098  591E
1099  591E                  ; save position in BASIC text
1100  591E E5           	PUSH HL
1101  591F DD E1        	POP IX
1102  5921
1103  5921 C1           	POP BC ; count
1104  5922 D1           	POP DE ; destination
1105  5923 E1           	POP HL ; source
1106  5924 D9           	EXX
1107  5925 FD 21 2C 59  	LD IY, .RET
1108  5929 C3 B7 56     	JP ENABLE_PAGE0
1109  592C              .RET:
1110  592C FB           	EI
1111  592D D9           	EXX
1112  592E 3E 01        	LD A,1
1113  5930 32 6B 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
1114  5933 CD 43 59     	CALL .LDIRMV
1115  5936 AF           	XOR A
1116  5937 32 6B 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
1117  593A D1               POP DE
1118  593B C1               POP BC
1119  593C CD 2E 56         CALL RESTORE_PAGE_INFO
1120  593F DD E5        	PUSH IX
1121  5941 E1           	POP HL
1122  5942 C9           	RET
1123  5943
1124  5943              .LDIRMV:
1125  5943              	; set VRAM address *exactly* as in ROM, otherwise corruption
1126  5943 7D           	LD	A, L
1127  5944 F3           	DI
1128  5945 D3 99        	OUT	(099H), A
1129  5947 7C           	LD	A, H
1130  5948 E6 3F        	AND	03FH
1131  594A D3 99        	OUT	(099H), A
1132  594C FB           	EI
1133  594D              	;EX (SP), HL
1134  594D              	;EX (SP), HL
1135  594D              	;NOP
1136  594D              	;NOP
1137  594D              .L4:
1138  594D DB 98            IN A, (#98)
1139  594F 12           	LD (DE), A
1140  5950 13               INC DE
1141  5951 0B               DEC BC
1142  5952 79               LD A, C
1143  5953 B0               OR B
1144  5954 20 F7            JR NZ, .L4
1145  5956 C9               RET
1146  5957              ; *******************************************************************************************************
1147  5957               ENDIF
1148  5957
1149  5957               IF (SOUND_CMDS == 1)
1150  5957              ; *******************************************************************************************************
1151  5957              ; function to handle CALL SNDPLYINIT basic extension
1152  5957              ; initializes sound player
1153  5957              ; _SNDPLYINIT ( INT music_offset,
1154  5957              ;				INT sfx_offset, can be -1 if no SFX
1155  5957              ; will put ram in page 0 also, page 1 is already there
1156  5957              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1157  5957              SNDPLYINIT:
1158  5957              	; opening (
1159  5957 CD 04 57     	CALL CHKCHAR
1160  595A 28           	DB '('
1161  595B              	; get music address
1162  595B DD 21 2F 54  	LD IX, FRMQNT
1163  595F CD 59 01     	CALL CALBAS
1164  5962 D5           	PUSH DE
1165  5963              	; comma
1166  5963 CD 04 57     	CALL CHKCHAR
1167  5966 2C           	DB ','
1168  5967              	; get sfx address
1169  5967 DD 21 2F 54  	LD IX, FRMQNT
1170  596B CD 59 01     	CALL CALBAS
1171  596E D5           	PUSH DE
1172  596F              	; ending )
1173  596F CD 04 57     	CALL CHKCHAR
1174  5972 29           	DB ')'
1175  5973
1176  5973                  ; save position in BASIC text
1177  5973 44           	LD B, H
1178  5974 4D           	LD C, L
1179  5975
1180  5975              	; pop LDIR parameters and store away for later
1181  5975 D1           	POP DE ; sfx address
1182  5976 E1           	POP HL ; music address
1183  5977 C5           	PUSH BC ; basic text location
1184  5978 D9           	EXX
1185  5979 FD 21 80 59  	LD IY, .RET
1186  597D C3 B7 56     	JP ENABLE_PAGE0
1187  5980              .RET:
1188  5980 D9           	EXX
1189  5981
1190  5981 D5           	PUSH DE
1191  5982 AF           	XOR A
1192  5983              	; HL = music location
1193  5983 CD 62 41     	CALL PLY_AKG_INIT
1194  5986 3E 01        	LD A, 1
1195  5988 32 7A 4D     	LD (MUSIC_INIT_STATUS), A
1196  598B
1197  598B E1           	POP HL ; SFX
1198  598C              	; check if SFX address -1
1199  598C 23           	INC HL
1200  598D 7D           	LD A, L
1201  598E B4           	OR H
1202  598F 28 09        	JR Z,.L1
1203  5991 2B           	DEC HL
1204  5992 CD 1D 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1205  5995 3E 01        	LD A, 1
1206  5997 32 7B 4D     	LD (SFX_INIT_STATUS), A
1207  599A              .L1:
1208  599A D1               POP DE
1209  599B C1               POP BC
1210  599C CD 2E 56         CALL RESTORE_PAGE_INFO
1211  599F
1212  599F E1           	POP HL
1213  59A0 C9           	RET
1214  59A1              ; *******************************************************************************************************
1215  59A1
1216  59A1              ; *******************************************************************************************************
1217  59A1              ; function to handle CALL SNDPLYON basic extension
1218  59A1              ; enables sound player
1219  59A1              ; _SNDPLYON
1220  59A1              ; sets SOUND_ENABLED variable to 1 if init call was done
1221  59A1              ; if not throws out of data error
1222  59A1              SNDPLYON:
1223  59A1 3A 7A 4D     	LD A, (MUSIC_INIT_STATUS)
1224  59A4 B7           	OR A
1225  59A5 20 05        	JR NZ, .L1
1226  59A7              	; player not initialized, throw error
1227  59A7 1E 04        	LD E, 04 ; Out of DATA
1228  59A9 C3 24 57     	JP THROW_ERROR
1229  59AC              .L1:
1230  59AC 32 7C 4D     	LD (SOUND_ENABLED), A
1231  59AF              	; disable key click
1232  59AF AF           	XOR A
1233  59B0 32 DB F3     	LD (CLIKSW), A
1234  59B3 C9           	RET
1235  59B4              ; *******************************************************************************************************
1236  59B4
1237  59B4              ; *******************************************************************************************************
1238  59B4              ; function to handle CALL SNDPLYOFF basic extension
1239  59B4              ; disables sound player
1240  59B4              ; _SNDPLYOFF
1241  59B4              ; sets SOUND_ENABLED variable to 0
1242  59B4              ; calls AKG to stop music and SFX on all channels if initialized
1243  59B4              SNDPLYOFF:
1244  59B4 3A 7C 4D     	LD A, (SOUND_ENABLED)
1245  59B7 B7           	OR A
1246  59B8 C8           	RET Z ; already stopped
1247  59B9 AF           	XOR A
1248  59BA 32 7C 4D     	LD (SOUND_ENABLED), A
1249  59BD E5           	PUSH HL
1250  59BE CD 21 42     	CALL PLY_AKG_STOP
1251  59C1 3A 7B 4D     	LD A, (SFX_INIT_STATUS)
1252  59C4 B7           	OR A
1253  59C5 28 0E        	JR Z, .EXIT ; SFX not in use
1254  59C7 AF           	XOR A
1255  59C8 CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1256  59CB 3E 01        	LD A, 1
1257  59CD CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1258  59D0 3E 02        	LD A, 2
1259  59D2 CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1260  59D5              .EXIT:
1261  59D5 E1           	POP HL
1262  59D6 C9           	RET
1263  59D7              ; *******************************************************************************************************
1264  59D7
1265  59D7              ; *******************************************************************************************************
1266  59D7              ; function to handle CALL SNDSFX basic extension
1267  59D7              ; plays a sound effect
1268  59D7              ; _SNDSFX ( BYTE sfx_number, >0
1269  59D7              ;			BYTE channel, = 0,1 or 2
1270  59D7              ;			BYTE inverted_volume = 0-16, 0 being full volume
1271  59D7              ; will put ram in page 0 also, page 1 is already there
1272  59D7              ; if sound off throws illegal function call
1273  59D7              ; if sfx not initialized, throws out of data
1274  59D7              SNDSFX:
1275  59D7              	; opening (
1276  59D7 CD 04 57     	CALL CHKCHAR
1277  59DA 28           	DB '('
1278  59DB              	; get sfx_number
1279  59DB DD 21 1C 52  	LD IX, GETBYT
1280  59DF CD 59 01     	CALL CALBAS
1281  59E2 D5           	PUSH DE
1282  59E3              	; comma
1283  59E3 CD 04 57     	CALL CHKCHAR
1284  59E6 2C           	DB ','
1285  59E7              	; get sfx address
1286  59E7 DD 21 1C 52  	LD IX, GETBYT
1287  59EB CD 59 01     	CALL CALBAS
1288  59EE D5           	PUSH DE
1289  59EF              	; comma
1290  59EF CD 04 57     	CALL CHKCHAR
1291  59F2 2C           	DB ','
1292  59F3              	; get inverted volume
1293  59F3 DD 21 1C 52  	LD IX, GETBYT
1294  59F7 CD 59 01     	CALL CALBAS
1295  59FA D5           	PUSH DE
1296  59FB              	; ending )
1297  59FB CD 04 57     	CALL CHKCHAR
1298  59FE 29           	DB ')'
1299  59FF
1300  59FF 3A 7C 4D     	LD A, (SOUND_ENABLED)
1301  5A02 B7           	OR A
1302  5A03 20 05        	JR NZ, .L1
1303  5A05              	; sound disabled, throw illegal function call
1304  5A05 1E 05        	LD E, 5
1305  5A07 C3 24 57     	JP THROW_ERROR
1306  5A0A              .L1:
1307  5A0A 3A 7B 4D     	LD A, (SFX_INIT_STATUS)
1308  5A0D B7           	OR A
1309  5A0E 20 05        	JR NZ, .L2
1310  5A10              	; sfx data not initialized, throw out of data
1311  5A10 1E 04        	LD E, 4
1312  5A12 C3 24 57     	JP THROW_ERROR
1313  5A15              .L2:
1314  5A15              	; pop  parameters and store away for later
1315  5A15 D1           	POP DE ; inverted volume
1316  5A16 43           	LD B, E
1317  5A17 D1           	POP DE ; channel
1318  5A18 4B           	LD C, E
1319  5A19 D1           	POP DE
1320  5A1A 7B           	LD A, E
1321  5A1B 08           	EX AF, AF'
1322  5A1C E5           	PUSH HL ; basic text location
1323  5A1D D9           	EXX
1324  5A1E FD 21 25 5A  	LD IY, .RET
1325  5A22 C3 B7 56     	JP ENABLE_PAGE0
1326  5A25              .RET:
1327  5A25 D9           	EXX
1328  5A26 08           	EX AF, AF'
1329  5A27 CD 21 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1330  5A2A
1331  5A2A D1               POP DE
1332  5A2B C1               POP BC
1333  5A2C CD 2E 56         CALL RESTORE_PAGE_INFO
1334  5A2F
1335  5A2F E1           	POP HL
1336  5A30 C9           	RET
1337  5A31              ; *******************************************************************************************************
1338  5A31               ENDIF
1339  5A31
1340  5A31               IF (BLIT_CMDS == 1)
1341  5A31              ; *******************************************************************************************************
1342  5A31              ; function rotates mask and data of several characters and applies to background data
1343  5A31              ; this handles x-shift from 0 to 4
1344  5A31              ; contains self-modifying code that is set-up from external function
1345  5A31              ; input HL=pointer to mask data
1346  5A31              ; input HL'=pointer to character data
1347  5A31              ; input DE=output buffer containing background data
1348  5A31              ; input BC=DE+8
1349  5A31              ; input A=number of characters to process
1350  5A31              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1351  5A31              SHIFT04:
1352  5A31 08           	EX AF, AF'
1353  5A32 7E           	LD A, (HL) ; get mask
1354  5A33 D9           	EXX
1355  5A34 57           	LD D, A
1356  5A35 1E FF        	LD E, #FF
1357  5A37 37           	SCF
1358  5A38              .M1:
1359  5A38 18 FE        	JR .M1 ; this is self-modifying part
1360  5A3A CB 1A        	RR D
1361  5A3C CB 1B        	RR E
1362  5A3E CB 1A        	RR D
1363  5A40 CB 1B        	RR E
1364  5A42 CB 1A        	RR D
1365  5A44 CB 1B        	RR E
1366  5A46 CB 1A        	RR D
1367  5A48 CB 1B        	RR E
1368  5A4A
1369  5A4A 46           	LD B, (HL) ; get data
1370  5A4B 0E 00        	LD C, 0
1371  5A4D              .M2:
1372  5A4D 18 FE        	JR .M2 ; also self-modifying part
1373  5A4F CB 38        	SRL B
1374  5A51 CB 19        	RR C
1375  5A53 CB 38        	SRL B
1376  5A55 CB 19        	RR C
1377  5A57 CB 38        	SRL B
1378  5A59 CB 19        	RR C
1379  5A5B CB 38        	SRL B
1380  5A5D CB 19        	RR C
1381  5A5F
1382  5A5F D9           	EXX
1383  5A60 1A           	LD A, (DE) ; background
1384  5A61 D9           	EXX
1385  5A62 A2           	AND D
1386  5A63 B0           	OR B
1387  5A64 D9           	EXX
1388  5A65 12           	LD (DE), A
1389  5A66
1390  5A66 0A           	LD A, (BC)
1391  5A67 D9           	EXX
1392  5A68 A3           	AND E
1393  5A69 B1           	OR C
1394  5A6A 23           	INC HL
1395  5A6B D9           	EXX
1396  5A6C 02           	LD (BC), A
1397  5A6D
1398  5A6D 23           	INC HL
1399  5A6E 13           	INC DE
1400  5A6F 03           	INC BC
1401  5A70
1402  5A70 08           	EX AF, AF'
1403  5A71 3D           	DEC A
1404  5A72 C2 31 5A     	JP NZ, SHIFT04
1405  5A75 C9           	RET
1406  5A76              ; *******************************************************************************************************
1407  5A76
1408  5A76              ; *******************************************************************************************************
1409  5A76              ; function rotates mask and data of several characters and applies to background data
1410  5A76              ; this handles x-shift from 5 to 8
1411  5A76              ; contains self-modifying code that is set-up from external function
1412  5A76              ; input HL=pointer to mask data
1413  5A76              ; input HL'=pointer to character data
1414  5A76              ; input DE=output buffer containing background data
1415  5A76              ; input BC=DE+8
1416  5A76              ; input A=number of characters to process
1417  5A76              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1418  5A76              SHIFT58:
1419  5A76 08           	EX AF, AF'
1420  5A77 7E           	LD A, (HL) ; get mask
1421  5A78 D9           	EXX
1422  5A79 57           	LD D, A
1423  5A7A 1E FF        	LD E, #FF
1424  5A7C 37           	SCF
1425  5A7D              .M1:
1426  5A7D 18 FE        	JR .M1 ; this is self-modifying part
1427  5A7F CB 12        	RL D
1428  5A81 CB 13        	RL E
1429  5A83 CB 12        	RL D
1430  5A85 CB 13        	RL E
1431  5A87 CB 12        	RL D
1432  5A89 CB 13        	RL E
1433  5A8B
1434  5A8B 46           	LD B, (HL)
1435  5A8C 0E 00        	LD C, 0
1436  5A8E              .M2:
1437  5A8E 18 FE        	JR .M2 ; also self-modifying part
1438  5A90 CB 20        	SLA B
1439  5A92 CB 11        	RL C
1440  5A94 CB 20        	SLA B
1441  5A96 CB 11        	RL C
1442  5A98 CB 20        	SLA B
1443  5A9A CB 11        	RL C
1444  5A9C
1445  5A9C D9           	EXX
1446  5A9D 1A           	LD A, (DE) ; background
1447  5A9E D9           	EXX
1448  5A9F A3           	AND E
1449  5AA0 B1           	OR C
1450  5AA1 D9           	EXX
1451  5AA2 12           	LD (DE), A
1452  5AA3
1453  5AA3 0A           	LD A, (BC)
1454  5AA4 D9           	EXX
1455  5AA5 A2           	AND D
1456  5AA6 B0           	OR B
1457  5AA7 23           	INC HL
1458  5AA8 D9           	EXX
1459  5AA9 02           	LD (BC), A
1460  5AAA
1461  5AAA 23           	INC HL
1462  5AAB 13           	INC DE
1463  5AAC 03           	INC BC
1464  5AAD
1465  5AAD 08           	EX AF, AF'
1466  5AAE 3D           	DEC A
1467  5AAF C2 76 5A     	JP NZ, SHIFT58
1468  5AB2 C9           	RET
1469  5AB3              ; *******************************************************************************************************
1470  5AB3
1471  5AB3              ; *******************************************************************************************************
1472  5AB3              ; routine that shifts one row of characters
1473  5AB3              ; contains self-modifying code that is set-up from external function
1474  5AB3              ; input HL=pointer to mask data
1475  5AB3              ; input HL'=pointer to character data
1476  5AB3              ; input DE=output buffer containing background data
1477  5AB3              ; input A=number of characters to process
1478  5AB3              ; input IX=pointer to structure describing input data
1479  5AB3              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1480  5AB3              SHIFT_ROW:
1481  5AB3 F5           	PUSH AF
1482  5AB4 ED 53 56 54  		LD (BLIT_TMP1), DE
1483  5AB8 E5           		PUSH HL
1484  5AB9 CD FC 5A     			CALL .ADDYSHIFT
1485  5ABC E1           		POP HL
1486  5ABD ED 53 58 54  		LD (BLIT_TMP2), DE ; DE+vertical shift
1487  5AC1              .L1:
1488  5AC1 3E 08        		LD A, 8
1489  5AC3 DD 96 02     		SUB (IX+2) ; y shift
1490  5AC6              .CALL1:
1491  5AC6 CD 00 00     		CALL 0
1492  5AC9 DD 7E 02     		LD A, (IX+2); y shift
1493  5ACC B7           		OR A
1494  5ACD 28 26        		JR Z, .DONE
1495  5ACF ED 5B 56 54  		LD DE, (BLIT_TMP1)
1496  5AD3 E5           		PUSH HL
1497  5AD4 CD 0A 5B     			CALL .DETONEXTROW
1498  5AD7 E1           		POP HL
1499  5AD8              .CALL2:
1500  5AD8 CD 00 00     		CALL 0
1501  5ADB ED 5B 56 54  		LD DE, (BLIT_TMP1)
1502  5ADF E5           		PUSH HL
1503  5AE0 CD 04 5B     			CALL .ADD8
1504  5AE3 E1           		POP HL
1505  5AE4 ED 53 56 54  		LD (BLIT_TMP1), DE
1506  5AE8 ED 5B 58 54  		LD DE, (BLIT_TMP2)
1507  5AEC E5           		PUSH HL
1508  5AED CD 04 5B     			CALL .ADD8
1509  5AF0 E1           		POP HL
1510  5AF1 ED 53 58 54  		LD (BLIT_TMP2), DE ; DE+vertical shift
1511  5AF5              .DONE:
1512  5AF5 F1           	POP AF
1513  5AF6 3D           	DEC A
1514  5AF7 C8           	RET Z
1515  5AF8 F5           	PUSH AF
1516  5AF9 C3 C1 5A     	JP .L1
1517  5AFC              .ADDYSHIFT:
1518  5AFC EB           	EX DE, HL
1519  5AFD 16 00        	LD D, 0
1520  5AFF DD 5E 02     	LD E, (IX+2); y shift
1521  5B02 18 0C        	JR .MOVDEBC
1522  5B04              .ADD8:
1523  5B04 21 08 00     	LD HL, 8
1524  5B07 C3 10 5B     	JP .MOVDEBC
1525  5B0A              .DETONEXTROW:
1526  5B0A DD 6E 06     	LD L, (IX+6)
1527  5B0D DD 66 07     	LD H, (IX+7) ; bkg add to value
1528  5B10              .MOVDEBC:
1529  5B10 19           	ADD HL, DE
1530  5B11 54           	LD D, H
1531  5B12 5D           	LD E, L
1532  5B13 01 08 00     	LD BC, 8
1533  5B16 09           	ADD HL, BC
1534  5B17 44           	LD B, H
1535  5B18 4D           	LD C, L
1536  5B19 C9           	RET
1537  5B1A              ; *******************************************************************************************************
1538  5B1A
1539  5B1A              ; *******************************************************************************************************
1540  5B1A              ; function rotates mask and character data and applies it to background
1541  5B1A              ; input IX=pointer to structure describing input data
1542  5B1A              ; +0  DW horizontal shift count 0-7 (low byte used)
1543  5B1A              ; +2  DW vertical shift count 0-7 (low byte used)
1544  5B1A              ; +4  DW background data start;
1545  5B1A              ; +6  DW background add to value to next row of background data
1546  5B1A              ; +8  DW mask data start;
1547  5B1A              ; +10  DW character data start;
1548  5B1A              ; +12 DW character&mask add to value to next row of data
1549  5B1A              ; +14 DW columns (low byte used)
1550  5B1A              ; +16 DW rows (low byte used)
1551  5B1A              SHIFT_MERGE_CHARACTER:
1552  5B1A DD 7E 00     	LD A, (IX) ; shift
1553  5B1D FE 05        	CP 5
1554  5B1F 38 25        	JR C, .RIGHT
1555  5B21              	; shifts 5-7, use rotate towards left 1-3
1556  5B21 21 76 5A     	LD HL, SHIFT58
1557  5B24 22 C7 5A     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1558  5B27 22 D9 5A     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1559  5B2A D6 05        	SUB 5
1560  5B2C 28 0D        	JR Z, .L1
1561  5B2E 87           	ADD A, A
1562  5B2F 87           	ADD A, A
1563  5B30 67           	LD H, A
1564  5B31 2E 18        	LD L, #18 ; JR opcode
1565  5B33 22 7D 5A     	LD (SHIFT58.M1), HL
1566  5B36 22 8E 5A     	LD (SHIFT58.M2), HL
1567  5B39 18 32        	JR .DO
1568  5B3B              .L1:
1569  5B3B 21 00 00     	LD HL, 0 ; 2xNOP opcode
1570  5B3E 22 7D 5A     	LD (SHIFT58.M1), HL
1571  5B41 22 8E 5A     	LD (SHIFT58.M2), HL
1572  5B44 18 27        	JR .DO
1573  5B46              .RIGHT:
1574  5B46              	; shifts 0-4, rotate towards right
1575  5B46 21 31 5A     	LD HL, SHIFT04
1576  5B49 22 C7 5A     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1577  5B4C 22 D9 5A     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1578  5B4F FE 04        	CP 4
1579  5B51 28 11        	JR Z, .R1
1580  5B53 D6 04        	SUB 4
1581  5B55 ED 44        	NEG
1582  5B57 87           	ADD A, A
1583  5B58 87           	ADD A, A
1584  5B59 67           	LD H, A
1585  5B5A 2E 18        	LD L, #18 ; JR opcode
1586  5B5C 22 38 5A     	LD (SHIFT04.M1), HL
1587  5B5F 22 4D 5A     	LD (SHIFT04.M2), HL
1588  5B62 18 09        	JR .DO
1589  5B64              .R1:
1590  5B64 21 00 00     	LD HL, 0 ; 2xNOP opcode
1591  5B67 22 38 5A     	LD (SHIFT04.M1), HL
1592  5B6A 22 4D 5A     	LD (SHIFT04.M2), HL
1593  5B6D              .DO:
1594  5B6D DD 46 10     	LD B, (IX+16) ; rows
1595  5B70 DD 6E 08     	LD L, (IX+8)
1596  5B73 DD 66 09     	LD H, (IX+9) ; mask data
1597  5B76 DD 5E 04     	LD E, (IX+4)
1598  5B79 DD 56 05     	LD D, (IX+5) ; background data
1599  5B7C D9           	EXX
1600  5B7D DD 6E 0A     	LD L, (IX+10)
1601  5B80 DD 66 0B     	LD H, (IX+11) ; character data
1602  5B83 D9           	EXX
1603  5B84              .LOOP:
1604  5B84 C5           	PUSH BC
1605  5B85 E5           		PUSH HL
1606  5B86 D5           			PUSH DE
1607  5B87 D9           				EXX
1608  5B88 E5           				PUSH HL
1609  5B89 D9           					EXX
1610  5B8A DD 7E 0E     					LD A, (IX+14) ; columns
1611  5B8D              .CALL:
1612  5B8D CD B3 5A     					CALL SHIFT_ROW
1613  5B90 E1           				POP HL
1614  5B91 DD 5E 0C     				LD E, (IX+12)
1615  5B94 DD 56 0D     				LD D, (IX+13) ; char data to next row
1616  5B97 19           				ADD HL, DE
1617  5B98 D9           				EXX
1618  5B99 E1           			POP HL
1619  5B9A DD 5E 06     			LD E, (IX+6)
1620  5B9D DD 56 07     			LD D, (IX+7) ; background to next row
1621  5BA0 19           			ADD HL, DE
1622  5BA1 EB           			EX DE, HL
1623  5BA2 E1           		POP HL
1624  5BA3 DD 4E 0C     		LD C, (IX+12)
1625  5BA6 DD 46 0D     		LD B, (IX+13) ; char data to next row
1626  5BA9 09           		ADD HL, BC
1627  5BAA C1           	POP BC
1628  5BAB 10 D7        	DJNZ .LOOP
1629  5BAD C9           	RET
1630  5BAE              ; *******************************************************************************************************
1631  5BAE
1632  5BAE               IFNDEF CMDS_WITH_PARAMETERS
1633  5BAE ~            ; *******************************************************************************************************
1634  5BAE ~            ; function to handle CALL BLIT basic extension
1635  5BAE ~            ; rotates 1-bit character drawing horizontally with mask and character data and
1636  5BAE ~            ; fuses with background data and applies vertical shift too
1637  5BAE ~            ; BLIT ( INT request_data_ptr )
1638  5BAE ~            ; request_data_ptr described in SHIFT_MERGE_CHARACTER
1639  5BAE ~            ; will put ram in page 0 also, page 1 is already there
1640  5BAE ~            BLIT:
1641  5BAE ~            	; opening (
1642  5BAE ~            	CALL CHKCHAR
1643  5BAE ~            	DB '('
1644  5BAE ~            	; get pointer to request struct
1645  5BAE ~            	LD IX, FRMQNT
1646  5BAE ~            	CALL CALBAS
1647  5BAE ~            	PUSH DE
1648  5BAE ~            	; ending )
1649  5BAE ~            	CALL CHKCHAR
1650  5BAE ~            	DB ')'
1651  5BAE ~
1652  5BAE ~            	POP IX ; pointer to request struct
1653  5BAE ~
1654  5BAE ~            	PUSH HL ; save position in BASIC buffer
1655  5BAE ~
1656  5BAE ~            	LD IY, .RET
1657  5BAE ~            	JP ENABLE_PAGE0
1658  5BAE ~            .RET:
1659  5BAE ~            	EI
1660  5BAE ~            	CALL SHIFT_MERGE_CHARACTER
1661  5BAE ~
1662  5BAE ~                POP DE
1663  5BAE ~                POP BC
1664  5BAE ~                CALL RESTORE_PAGE_INFO
1665  5BAE ~
1666  5BAE ~            	POP HL
1667  5BAE ~            	RET
1668  5BAE ~            ; *******************************************************************************************************
1669  5BAE               ENDIF
1670  5BAE
1671  5BAE               IFDEF CMDS_WITH_PARAMETERS
1672  5BAE              ; *******************************************************************************************************
1673  5BAE              ; function to handle CALL BLIT basic extension
1674  5BAE              ; rotates 1-bit character drawing horizontally with mask and character data and
1675  5BAE              ; fuses with background data and applies vertical shift too
1676  5BAE              ; in form without pointers
1677  5BAE              ; BLIT ( INT x,
1678  5BAE              ;		 INT y,
1679  5BAE              ;		 INT char_data_pointer,
1680  5BAE              ;		 INT mask_data_pointer,
1681  5BAE              ;		 INT width (in characters),
1682  5BAE              ;		 INT height (in characters),
1683  5BAE              ;		 INT background_pointer (top left),
1684  5BAE              ;		 INT background_width (in characters),
1685  5BAE              ;		 INT background_height (in characters))
1686  5BAE              ; will put ram in page 0 also, page 1 is already there
1687  5BAE              BLIT:
1688  5BAE              	; opening (
1689  5BAE CD 04 57     	CALL CHKCHAR
1690  5BB1 28           	DB '('
1691  5BB2              	; get x coordinate
1692  5BB2 DD 21 2F 54  	LD IX, FRMQNT
1693  5BB6 CD 59 01     	CALL CALBAS
1694  5BB9 7B           	LD A, E
1695  5BBA E6 07        	AND 7
1696  5BBC 32 5A 54     	LD (BLIT_STRUCT+0), A
1697  5BBF CD 9C 5C     	CALL .DAdiv8
1698  5BC2 32 56 54     	LD (BLIT_TMP+0),A
1699  5BC5              	; comma
1700  5BC5 CD 04 57     	CALL CHKCHAR
1701  5BC8 2C           	DB ','
1702  5BC9              	; get y coordinate
1703  5BC9 DD 21 2F 54  	LD IX, FRMQNT
1704  5BCD CD 59 01     	CALL CALBAS
1705  5BD0 7B           	LD A, E
1706  5BD1 E6 07        	AND 7
1707  5BD3 32 5C 54     	LD (BLIT_STRUCT+2), A
1708  5BD6 CD 9C 5C     	CALL .DAdiv8
1709  5BD9 32 57 54     	LD (BLIT_TMP+1),A
1710  5BDC              	; comma
1711  5BDC CD 04 57     	CALL CHKCHAR
1712  5BDF 2C           	DB ','
1713  5BE0              	; get char data pointer
1714  5BE0 DD 21 2F 54  	LD IX, FRMQNT
1715  5BE4 CD 59 01     	CALL CALBAS
1716  5BE7 ED 53 64 54  	LD (BLIT_STRUCT+10), DE
1717  5BEB              	; comma
1718  5BEB CD 04 57     	CALL CHKCHAR
1719  5BEE 2C           	DB ','
1720  5BEF              	; get mask data pointer
1721  5BEF DD 21 2F 54  	LD IX, FRMQNT
1722  5BF3 CD 59 01     	CALL CALBAS
1723  5BF6 ED 53 62 54  	LD (BLIT_STRUCT+8), DE
1724  5BFA              	; comma
1725  5BFA CD 04 57     	CALL CHKCHAR
1726  5BFD 2C           	DB ','
1727  5BFE              	; get width
1728  5BFE DD 21 2F 54  	LD IX, FRMQNT
1729  5C02 CD 59 01     	CALL CALBAS
1730  5C05 7B           	LD A, E
1731  5C06 32 68 54     	LD (BLIT_STRUCT+14), A
1732  5C09              	; comma
1733  5C09 CD 04 57     	CALL CHKCHAR
1734  5C0C 2C           	DB ','
1735  5C0D              	; get height
1736  5C0D DD 21 2F 54  	LD IX, FRMQNT
1737  5C11 CD 59 01     	CALL CALBAS
1738  5C14 7B           	LD A, E
1739  5C15 32 6A 54     	LD (BLIT_STRUCT+16), A
1740  5C18              	; comma
1741  5C18 CD 04 57     	CALL CHKCHAR
1742  5C1B 2C           	DB ','
1743  5C1C              	; get background pointer
1744  5C1C DD 21 2F 54  	LD IX, FRMQNT
1745  5C20 CD 59 01     	CALL CALBAS
1746  5C23 ED 53 5E 54  	LD (BLIT_STRUCT+4), DE
1747  5C27              	; comma
1748  5C27 CD 04 57     	CALL CHKCHAR
1749  5C2A 2C           	DB ','
1750  5C2B              	; get background width
1751  5C2B DD 21 2F 54  	LD IX, FRMQNT
1752  5C2F CD 59 01     	CALL CALBAS
1753  5C32 7B           	LD A, E
1754  5C33 32 58 54     	LD (BLIT_TMP+2), A
1755  5C36              	; comma
1756  5C36 CD 04 57     	CALL CHKCHAR
1757  5C39 2C           	DB ','
1758  5C3A              	; get background height
1759  5C3A DD 21 2F 54  	LD IX, FRMQNT
1760  5C3E CD 59 01     	CALL CALBAS
1761  5C41 7B           	LD A, E
1762  5C42 32 59 54     	LD (BLIT_TMP+3), A
1763  5C45              	; ending )
1764  5C45 CD 04 57     	CALL CHKCHAR
1765  5C48 29           	DB ')'
1766  5C49
1767  5C49 E5           	PUSH HL ; save position in BASIC buffer
1768  5C4A
1769  5C4A              	; calculate char&mask add to value
1770  5C4A 26 00        	LD H, 0
1771  5C4C 3A 68 54     	LD A, (BLIT_STRUCT+14)
1772  5C4F 6F           	LD L, A
1773  5C50 CD F3 55     	CALL HLx8
1774  5C53 22 66 54     	LD (BLIT_STRUCT+12), HL
1775  5C56              	; calculate background add to value
1776  5C56 26 00        	LD H, 0
1777  5C58 3A 58 54     	LD A, (BLIT_TMP+2)
1778  5C5B 6F           	LD L, A
1779  5C5C CD F3 55     	CALL HLx8
1780  5C5F 22 60 54     	LD (BLIT_STRUCT+6), HL
1781  5C62              	; calculate pointer to background location
1782  5C62 21 00 00     	LD HL, 0
1783  5C65 3A 57 54     	LD A,(BLIT_TMP+1)
1784  5C68 B7           	OR A
1785  5C69 28 08        	JR Z, .L1
1786  5C6B 47           	LD B,A
1787  5C6C ED 5B 60 54  	LD DE,(BLIT_STRUCT+6)
1788  5C70              .L0:
1789  5C70 19           	ADD HL, DE
1790  5C71 10 FD        	DJNZ .L0
1791  5C73              .L1:
1792  5C73 EB           	EX DE,HL
1793  5C74 26 00        	LD H,0
1794  5C76 3A 56 54     	LD A,(BLIT_TMP+0)
1795  5C79 6F           	LD L,A
1796  5C7A CD F3 55     	CALL HLx8
1797  5C7D 19           	ADD HL,DE
1798  5C7E ED 5B 5E 54  	LD DE,(BLIT_STRUCT+4)
1799  5C82 19           	ADD HL,DE
1800  5C83 22 5E 54     	LD (BLIT_STRUCT+4),HL
1801  5C86
1802  5C86 FD 21 8D 5C  	LD IY, .RET
1803  5C8A C3 B7 56     	JP ENABLE_PAGE0
1804  5C8D              .RET:
1805  5C8D FB           	EI
1806  5C8E DD 21 5A 54  	LD IX, BLIT_STRUCT
1807  5C92 CD 1A 5B     	CALL SHIFT_MERGE_CHARACTER
1808  5C95
1809  5C95 D1               POP DE
1810  5C96 C1               POP BC
1811  5C97 CD 2E 56         CALL RESTORE_PAGE_INFO
1812  5C9A
1813  5C9A E1           	POP HL
1814  5C9B C9           	RET
1815  5C9C              .DAdiv8:
1816  5C9C 7B           	LD A,E
1817  5C9D CB 2A        	SRA D
1818  5C9F CB 1F            RR  A
1819  5CA1 CB 2A            SRA D
1820  5CA3 CB 1F            RR  A
1821  5CA5 CB 2A            SRA D
1822  5CA7 CB 1F            RR  A
1823  5CA9 C9           	RET
1824  5CAA              ; *******************************************************************************************************
1825  5CAA               ENDIF
1826  5CAA               ENDIF
1827  5CAA
1828  5CAA               IF (TILE_CMDS == 1)
1829  5CAA              ; *******************************************************************************************************
1830  5CAA              ; generic function to implement tiling
1831  5CAA              ; should be modified to call appropriate function for memory or vram
1832  5CAA              ; input IX=pointer to following structure
1833  5CAA              ; +00 tile_data_ptr
1834  5CAA              ; +02 tile_rows
1835  5CAA              ; +04 tile_columns
1836  5CAA              ; +06 destination_address
1837  5CAA              ; +08 dest_to_next_row_add_to_value
1838  5CAA              ; +10 num_horizontal_tiles
1839  5CAA              ; +12 num_vertical_tiles
1840  5CAA              ; modifies AF, BC, DE, HL
1841  5CAA              TILE:
1842  5CAA DD 6E 06     	LD L, (IX+6)
1843  5CAD DD 66 07     	LD H, (IX+7) ; destination address
1844  5CB0 22 56 54     	LD (TILETMP1), HL
1845  5CB3 DD 46 0C     	LD B, (IX+12) ; vertical tile number
1846  5CB6              .L1:
1847  5CB6 C5           	PUSH BC
1848  5CB7 DD 6E 00     		LD L, (IX+0)
1849  5CBA DD 66 01     		LD H, (IX+1) ; tile address
1850  5CBD 22 58 54     		LD (TILETMP2), HL
1851  5CC0 DD 46 02     		LD B, (IX+2) ; tile rows
1852  5CC3              .L2:
1853  5CC3 C5           		PUSH BC
1854  5CC4              .CALL1:
1855  5CC4 CD 00 00     			CALL 0
1856  5CC7 DD 46 0A     			LD B, (IX+10) ; horizontal tile num
1857  5CCA              .L3:
1858  5CCA C5           			PUSH BC
1859  5CCB 2A 58 54     				LD HL, (TILETMP2)
1860  5CCE DD 46 04     				LD B, (IX+4) ; tile columns
1861  5CD1              .L4:
1862  5CD1 C5           				PUSH BC
1863  5CD2              .CALL2:
1864  5CD2 CD 00 00     					CALL 0
1865  5CD5 C1           				POP BC
1866  5CD6 10 F9        				DJNZ .L4
1867  5CD8 C1           			POP BC
1868  5CD9 10 EF        			DJNZ .L3
1869  5CDB 22 58 54     			LD (TILETMP2), HL
1870  5CDE 2A 56 54     			LD HL, (TILETMP1)
1871  5CE1 DD 5E 08     			LD E, (IX+8)
1872  5CE4 DD 56 09     			LD D, (IX+9) ; add to value for dest next row
1873  5CE7 19           			ADD HL, DE
1874  5CE8 22 56 54     			LD (TILETMP1), HL
1875  5CEB C1           		POP BC
1876  5CEC 10 D5        		DJNZ .L2
1877  5CEE C1           	POP BC
1878  5CEF 10 C5        	DJNZ .L1
1879  5CF1 C9           	RET
1880  5CF2              ; *******************************************************************************************************
1881  5CF2
1882  5CF2               IFNDEF CMDS_WITH_PARAMETERS
1883  5CF2 ~            ; *******************************************************************************************************
1884  5CF2 ~            ; function to handle CALL TILERAM basic extension
1885  5CF2 ~            ; fills memory with tiles
1886  5CF2 ~            ; TILERAM ( INT request_data_ptr )
1887  5CF2 ~            ; request_data_ptr described in TILE
1888  5CF2 ~            ; will put ram in page 0 also, page 1 is already there
1889  5CF2 ~            TILERAM:
1890  5CF2 ~            	; opening (
1891  5CF2 ~            	CALL CHKCHAR
1892  5CF2 ~            	DB '('
1893  5CF2 ~            	; get pointer to request struct
1894  5CF2 ~            	LD IX, FRMQNT
1895  5CF2 ~            	CALL CALBAS
1896  5CF2 ~            	PUSH DE
1897  5CF2 ~            	; ending )
1898  5CF2 ~            	CALL CHKCHAR
1899  5CF2 ~            	DB ')'
1900  5CF2 ~
1901  5CF2 ~            	POP IX ; pointer to request struct
1902  5CF2 ~
1903  5CF2 ~            	PUSH HL ; save position in BASIC buffer
1904  5CF2 ~
1905  5CF2 ~            	LD IY, .RET
1906  5CF2 ~            	JP ENABLE_PAGE0
1907  5CF2 ~            .RET:
1908  5CF2 ~            	EI
1909  5CF2 ~            	; set RAM functions to call
1910  5CF2 ~            	LD HL, .TILECOPY
1911  5CF2 ~            	LD (TILE.CALL2+1), HL
1912  5CF2 ~            	LD HL, .SETDESTROW
1913  5CF2 ~            	LD (TILE.CALL1+1), HL
1914  5CF2 ~            	LD A,1
1915  5CF2 ~            	LD (VRAM_UPDATE_IN_PROGRESS),A
1916  5CF2 ~            	CALL TILE
1917  5CF2 ~            	XOR A
1918  5CF2 ~            	LD (VRAM_UPDATE_IN_PROGRESS),A
1919  5CF2 ~
1920  5CF2 ~                POP DE
1921  5CF2 ~                POP BC
1922  5CF2 ~                CALL RESTORE_PAGE_INFO
1923  5CF2 ~
1924  5CF2 ~            	POP HL
1925  5CF2 ~            	RET
1926  5CF2 ~            .TILECOPY:
1927  5CF2 ~            	.8 LDI
1928  5CF2 ~            	RET
1929  5CF2 ~            .SETDESTROW:
1930  5CF2 ~            	LD DE, (TILETMP1)
1931  5CF2 ~            	RET
1932  5CF2 ~            ; *******************************************************************************************************
1933  5CF2               ENDIF
1934  5CF2
1935  5CF2               IFDEF CMDS_WITH_PARAMETERS
1936  5CF2              ; *******************************************************************************************************
1937  5CF2              ; function to handle CALL TILERAM basic extension
1938  5CF2              ; fills memory with tiles
1939  5CF2              ; TILERAM ( INT tile_data_pointer,
1940  5CF2              ;			INT tile_columns,
1941  5CF2              ;			INT tile_rows,
1942  5CF2              ;			INT destination_pointer,
1943  5CF2              ;			INT destination_columns,
1944  5CF2              ;			INT destination_rows,
1945  5CF2              ;			INT destination_begin_column,
1946  5CF2              ;			INT destination_begin_row,
1947  5CF2              ;			INT number_of_tiles_horizontally,
1948  5CF2              ;			INT	number_of_tiles_vertically )
1949  5CF2              ; will put ram in page 0 also, page 1 is already there
1950  5CF2              TILERAM:
1951  5CF2              	; opening (
1952  5CF2 CD 04 57     	CALL CHKCHAR
1953  5CF5 28           	DB '('
1954  5CF6              	; get tile data pointer coordinate
1955  5CF6 DD 21 2F 54  	LD IX, FRMQNT
1956  5CFA CD 59 01     	CALL CALBAS
1957  5CFD ED 53 5A 54  	LD (BLIT_STRUCT+0), DE
1958  5D01              	; comma
1959  5D01 CD 04 57     	CALL CHKCHAR
1960  5D04 2C           	DB ','
1961  5D05              	; get tile columns
1962  5D05 DD 21 2F 54  	LD IX, FRMQNT
1963  5D09 CD 59 01     	CALL CALBAS
1964  5D0C ED 53 5E 54  	LD (BLIT_STRUCT+4), DE
1965  5D10              	; comma
1966  5D10 CD 04 57     	CALL CHKCHAR
1967  5D13 2C           	DB ','
1968  5D14              	; get tile columns
1969  5D14 DD 21 2F 54  	LD IX, FRMQNT
1970  5D18 CD 59 01     	CALL CALBAS
1971  5D1B ED 53 5C 54  	LD (BLIT_STRUCT+2), DE
1972  5D1F              	; comma
1973  5D1F CD 04 57     	CALL CHKCHAR
1974  5D22 2C           	DB ','
1975  5D23              	; get destintion pointer
1976  5D23 DD 21 2F 54  	LD IX, FRMQNT
1977  5D27 CD 59 01     	CALL CALBAS
1978  5D2A ED 53 60 54  	LD (BLIT_STRUCT+6), DE
1979  5D2E              	; comma
1980  5D2E CD 04 57     	CALL CHKCHAR
1981  5D31 2C           	DB ','
1982  5D32              	; get destination columns
1983  5D32 DD 21 2F 54  	LD IX, FRMQNT
1984  5D36 CD 59 01     	CALL CALBAS
1985  5D39 7B           	LD A, E
1986  5D3A 32 56 54     	LD (BLIT_TMP+0), A
1987  5D3D              	; comma
1988  5D3D CD 04 57     	CALL CHKCHAR
1989  5D40 2C           	DB ','
1990  5D41              	; get destination rows
1991  5D41 DD 21 2F 54  	LD IX, FRMQNT
1992  5D45 CD 59 01     	CALL CALBAS
1993  5D48 7B           	LD A, E
1994  5D49 32 57 54     	LD (BLIT_TMP+1), A
1995  5D4C              	; comma
1996  5D4C CD 04 57     	CALL CHKCHAR
1997  5D4F 2C           	DB ','
1998  5D50              	; get destination begin column
1999  5D50 DD 21 2F 54  	LD IX, FRMQNT
2000  5D54 CD 59 01     	CALL CALBAS
2001  5D57 7B           	LD A, E
2002  5D58 32 58 54     	LD (BLIT_TMP+2), A
2003  5D5B              	; comma
2004  5D5B CD 04 57     	CALL CHKCHAR
2005  5D5E 2C           	DB ','
2006  5D5F              	; get destination begin row
2007  5D5F DD 21 2F 54  	LD IX, FRMQNT
2008  5D63 CD 59 01     	CALL CALBAS
2009  5D66 7B           	LD A, E
2010  5D67 32 59 54     	LD (BLIT_TMP+3), A
2011  5D6A              	; comma
2012  5D6A CD 04 57     	CALL CHKCHAR
2013  5D6D 2C           	DB ','
2014  5D6E              	; get number of tiles horizontally
2015  5D6E DD 21 2F 54  	LD IX, FRMQNT
2016  5D72 CD 59 01     	CALL CALBAS
2017  5D75 ED 53 64 54  	LD (BLIT_STRUCT+10), DE
2018  5D79              	; comma
2019  5D79 CD 04 57     	CALL CHKCHAR
2020  5D7C 2C           	DB ','
2021  5D7D              	; get number of tiles vertically
2022  5D7D DD 21 2F 54  	LD IX, FRMQNT
2023  5D81 CD 59 01     	CALL CALBAS
2024  5D84 ED 53 66 54  	LD (BLIT_STRUCT+12), DE
2025  5D88              	; ending )
2026  5D88 CD 04 57     	CALL CHKCHAR
2027  5D8B 29           	DB ')'
2028  5D8C
2029  5D8C E5           	PUSH HL ; save position in BASIC buffer
2030  5D8D
2031  5D8D              	; calculate destination add to value
2032  5D8D 26 00        	LD H, 0
2033  5D8F 3A 56 54     	LD A, (BLIT_TMP+0)
2034  5D92 6F           	LD L, A
2035  5D93 CD F3 55     	CALL HLx8
2036  5D96 22 62 54     	LD (BLIT_STRUCT+8), HL
2037  5D99              	; calculate pointer to background location
2038  5D99 21 00 00     	LD HL, 0
2039  5D9C 3A 59 54     	LD A,(BLIT_TMP+3)
2040  5D9F B7           	OR A
2041  5DA0 28 08        	JR Z, .L1
2042  5DA2 47           	LD B,A
2043  5DA3 ED 5B 62 54  	LD DE,(BLIT_STRUCT+8)
2044  5DA7              .L0:
2045  5DA7 19           	ADD HL, DE
2046  5DA8 10 FD        	DJNZ .L0
2047  5DAA              .L1:
2048  5DAA EB           	EX DE,HL
2049  5DAB 26 00        	LD H,0
2050  5DAD 3A 58 54     	LD A,(BLIT_TMP+2)
2051  5DB0 6F           	LD L,A
2052  5DB1 CD F3 55     	CALL HLx8
2053  5DB4 19           	ADD HL,DE
2054  5DB5 ED 5B 60 54  	LD DE,(BLIT_STRUCT+6)
2055  5DB9 19           	ADD HL,DE
2056  5DBA 22 60 54     	LD (BLIT_STRUCT+6),HL
2057  5DBD
2058  5DBD FD 21 C4 5D  	LD IY, .RET
2059  5DC1 C3 B7 56     	JP ENABLE_PAGE0
2060  5DC4              .RET:
2061  5DC4 FB           	EI
2062  5DC5              	; set RAM functions to call
2063  5DC5 21 DF 5D     	LD HL, .TILECOPY
2064  5DC8 22 D3 5C     	LD (TILE.CALL2+1), HL
2065  5DCB 21 F0 5D     	LD HL, .SETDESTROW
2066  5DCE 22 C5 5C     	LD (TILE.CALL1+1), HL
2067  5DD1 DD 21 5A 54  	LD IX,BLIT_STRUCT
2068  5DD5 CD AA 5C     	CALL TILE
2069  5DD8
2070  5DD8 D1               POP DE
2071  5DD9 C1               POP BC
2072  5DDA CD 2E 56         CALL RESTORE_PAGE_INFO
2073  5DDD
2074  5DDD E1           	POP HL
2075  5DDE C9           	RET
2076  5DDF              .TILECOPY:
2077  5DDF ED A0       > LDI
2077  5DE1 ED A0       > LDI
2077  5DE3 ED A0       > LDI
2077  5DE5 ED A0       > LDI
2077  5DE7 ED A0       > LDI
2077  5DE9 ED A0       > LDI
2077  5DEB ED A0       > LDI
2077  5DED ED A0       > LDI
2078  5DEF C9           	RET
2079  5DF0              .SETDESTROW:
2080  5DF0 ED 5B 56 54  	LD DE, (TILETMP1)
2081  5DF4 C9           	RET
2082  5DF5              ; *******************************************************************************************************
2083  5DF5               ENDIF
2084  5DF5
2085  5DF5               IFDEF CMDS_WITH_PARAMETERS
2086  5DF5              ; *******************************************************************************************************
2087  5DF5              ; function to handle CALL TILEVRM basic extension
2088  5DF5              ; fills vram with tiles
2089  5DF5              ; TILEVRM ( INT tile_data_pointer,
2090  5DF5              ;			INT tile_columns,
2091  5DF5              ;			INT tile_rows,
2092  5DF5              ;			INT destination_begin_column,
2093  5DF5              ;			INT destination_begin_row,
2094  5DF5              ;			INT number_of_tiles_horizontally,
2095  5DF5              ;			INT	number_of_tiles_vertically )
2096  5DF5              ; will put ram in page 0 also, page 1 is already there
2097  5DF5              ; for destination uses address of SCREEN 2 pattern buffer and 32x24 size
2098  5DF5              TILEVRM:
2099  5DF5              	; opening (
2100  5DF5 CD 04 57     	CALL CHKCHAR
2101  5DF8 28           	DB '('
2102  5DF9              	; get tile data pointer coordinate
2103  5DF9 DD 21 2F 54  	LD IX, FRMQNT
2104  5DFD CD 59 01     	CALL CALBAS
2105  5E00 ED 53 5A 54  	LD (BLIT_STRUCT+0), DE
2106  5E04              	; comma
2107  5E04 CD 04 57     	CALL CHKCHAR
2108  5E07 2C           	DB ','
2109  5E08              	; get tile columns
2110  5E08 DD 21 2F 54  	LD IX, FRMQNT
2111  5E0C CD 59 01     	CALL CALBAS
2112  5E0F ED 53 5E 54  	LD (BLIT_STRUCT+4), DE
2113  5E13              	; comma
2114  5E13 CD 04 57     	CALL CHKCHAR
2115  5E16 2C           	DB ','
2116  5E17              	; get tile columns
2117  5E17 DD 21 2F 54  	LD IX, FRMQNT
2118  5E1B CD 59 01     	CALL CALBAS
2119  5E1E ED 53 5C 54  	LD (BLIT_STRUCT+2), DE
2120  5E22              	; comma
2121  5E22 CD 04 57     	CALL CHKCHAR
2122  5E25 2C           	DB ','
2123  5E26              	; get destination begin column
2124  5E26 DD 21 2F 54  	LD IX, FRMQNT
2125  5E2A CD 59 01     	CALL CALBAS
2126  5E2D 7B           	LD A, E
2127  5E2E 32 58 54     	LD (BLIT_TMP+2), A
2128  5E31              	; comma
2129  5E31 CD 04 57     	CALL CHKCHAR
2130  5E34 2C           	DB ','
2131  5E35              	; get destination begin row
2132  5E35 DD 21 2F 54  	LD IX, FRMQNT
2133  5E39 CD 59 01     	CALL CALBAS
2134  5E3C 7B           	LD A, E
2135  5E3D 32 59 54     	LD (BLIT_TMP+3), A
2136  5E40              	; comma
2137  5E40 CD 04 57     	CALL CHKCHAR
2138  5E43 2C           	DB ','
2139  5E44              	; get number of tiles horizontally
2140  5E44 DD 21 2F 54  	LD IX, FRMQNT
2141  5E48 CD 59 01     	CALL CALBAS
2142  5E4B ED 53 64 54  	LD (BLIT_STRUCT+10), DE
2143  5E4F              	; comma
2144  5E4F CD 04 57     	CALL CHKCHAR
2145  5E52 2C           	DB ','
2146  5E53              	; get number of tiles vertically
2147  5E53 DD 21 2F 54  	LD IX, FRMQNT
2148  5E57 CD 59 01     	CALL CALBAS
2149  5E5A ED 53 66 54  	LD (BLIT_STRUCT+12), DE
2150  5E5E              	; ending )
2151  5E5E CD 04 57     	CALL CHKCHAR
2152  5E61 29           	DB ')'
2153  5E62
2154  5E62 E5           	PUSH HL ; save position in BASIC buffer
2155  5E63
2156  5E63              	; calculate destination add to value
2157  5E63 21 00 01     	LD HL, 256
2158  5E66 22 62 54     	LD (BLIT_STRUCT+8), HL
2159  5E69              	; calculate pointer to background location
2160  5E69 3A 59 54     	LD A,(BLIT_TMP+3)
2161  5E6C 67           	LD H,A
2162  5E6D 2E 00        	LD L,0
2163  5E6F EB           	EX DE,HL
2164  5E70 26 00        	LD H,0
2165  5E72 3A 58 54     	LD A,(BLIT_TMP+2)
2166  5E75 6F           	LD L,A
2167  5E76 CD F3 55     	CALL HLx8
2168  5E79 19           	ADD HL,DE
2169  5E7A ED 5B CB F3  	LD DE,(GRPCGP)
2170  5E7E 19           	ADD HL,DE
2171  5E7F 22 60 54     	LD (BLIT_STRUCT+6),HL
2172  5E82
2173  5E82 FD 21 89 5E  	LD IY, .RET
2174  5E86 C3 B7 56     	JP ENABLE_PAGE0
2175  5E89              .RET:
2176  5E89 FB           	EI
2177  5E8A              	; set RAM functions to call
2178  5E8A 21 A4 5E     	LD HL, .TILECOPY
2179  5E8D 22 D3 5C     	LD (TILE.CALL2+1), HL
2180  5E90 21 AA 5E     	LD HL, .SETDESTROW
2181  5E93 22 C5 5C     	LD (TILE.CALL1+1), HL
2182  5E96 DD 21 5A 54  	LD IX,BLIT_STRUCT
2183  5E9A CD AA 5C     	CALL TILE
2184  5E9D
2185  5E9D D1               POP DE
2186  5E9E C1               POP BC
2187  5E9F CD 2E 56         CALL RESTORE_PAGE_INFO
2188  5EA2
2189  5EA2 E1           	POP HL
2190  5EA3 C9           	RET
2191  5EA4              .TILECOPY:
2192  5EA4 01 98 08     	LD BC, #0898
2193  5EA7 C3 EB 55     	JP BBYTECOPY
2194  5EAA              .SETDESTROW:
2195  5EAA 2A 56 54     	LD HL, (TILETMP1)
2196  5EAD F3           	DI
2197  5EAE CD E0 55     	CALL SETWRT_LOCAL
2198  5EB1 FB           	EI
2199  5EB2 C9           	RET
2200  5EB3              ; *******************************************************************************************************
2201  5EB3               ENDIF
2202  5EB3
2203  5EB3               IFNDEF CMDS_WITH_PARAMETERS
2204  5EB3 ~            ; *******************************************************************************************************
2205  5EB3 ~            ; function to handle CALL TILEVRM basic extension
2206  5EB3 ~            ; fills vram with tiles
2207  5EB3 ~            ; TILEVRM ( INT request_data_ptr )
2208  5EB3 ~            ; request_data_ptr described in TILE
2209  5EB3 ~            ; will put ram in page 0 also, page 1 is already there
2210  5EB3 ~            TILEVRM:
2211  5EB3 ~            	; opening (
2212  5EB3 ~            	CALL CHKCHAR
2213  5EB3 ~            	DB '('
2214  5EB3 ~            	; get pointer to request struct
2215  5EB3 ~            	LD IX, FRMQNT
2216  5EB3 ~            	CALL CALBAS
2217  5EB3 ~            	PUSH DE
2218  5EB3 ~            	; ending )
2219  5EB3 ~            	CALL CHKCHAR
2220  5EB3 ~            	DB ')'
2221  5EB3 ~
2222  5EB3 ~            	POP IX ; pointer to request struct
2223  5EB3 ~
2224  5EB3 ~            	PUSH HL ; save position in BASIC buffer
2225  5EB3 ~
2226  5EB3 ~            	LD IY, .RET
2227  5EB3 ~            	JP ENABLE_PAGE0
2228  5EB3 ~            .RET:
2229  5EB3 ~            	EI
2230  5EB3 ~            	; set RAM functions to call
2231  5EB3 ~            	LD HL, .TILECOPY
2232  5EB3 ~            	LD (TILE.CALL2+1), HL
2233  5EB3 ~            	LD HL, .SETDESTROW
2234  5EB3 ~            	LD (TILE.CALL1+1), HL
2235  5EB3 ~            	CALL TILE
2236  5EB3 ~
2237  5EB3 ~                POP DE
2238  5EB3 ~                POP BC
2239  5EB3 ~                CALL RESTORE_PAGE_INFO
2240  5EB3 ~
2241  5EB3 ~            	POP HL
2242  5EB3 ~            	RET
2243  5EB3 ~            .TILECOPY:
2244  5EB3 ~            	LD BC, #0898
2245  5EB3 ~            	JP BBYTECOPY
2246  5EB3 ~            .SETDESTROW:
2247  5EB3 ~            	LD HL, (TILETMP1)
2248  5EB3 ~            	DI
2249  5EB3 ~            	CALL SETWRT_LOCAL
2250  5EB3 ~            	EI
2251  5EB3 ~            	RET
2252  5EB3 ~            ; *******************************************************************************************************
2253  5EB3               ENDIF
2254  5EB3               ENDIF
2255  5EB3
2256  5EB3               IF (BOX_CMDS == 1)
2257  5EB3              ; *******************************************************************************************************
2258  5EB3              ; generic function to implement rectangle data copy
2259  5EB3              ; should be modified to call appropriate function for memory or vram
2260  5EB3              ; input IX=pointer to following structure
2261  5EB3              ; +00 source data pointer
2262  5EB3              ; +02 num bytes in a row
2263  5EB3              ; +04 number of rows
2264  5EB3              ; +06 source add-to value till next row
2265  5EB3              ; +08 destination address
2266  5EB3              ; +10 destination add-to value till next row
2267  5EB3              ; modifies AF, BC, DE, HL
2268  5EB3              RECTANGLE_COPY:
2269  5EB3 DD 6E 00     	LD L, (IX+0)
2270  5EB6 DD 66 01     	LD H, (IX+1) ; source address
2271  5EB9 DD 5E 08     	LD E, (IX+8)
2272  5EBC DD 56 09     	LD D, (IX+9) ; destination
2273  5EBF DD 46 04     	LD B, (IX+4) ; row number
2274  5EC2              .L1:
2275  5EC2 C5           	PUSH BC
2276  5EC3 E5           		PUSH HL
2277  5EC4 D5           			PUSH DE
2278  5EC5 DD 4E 02     				LD C, (IX+2)
2279  5EC8 DD 46 03     				LD B, (IX+3) ; num bytes in a row
2280  5ECB              .CALL1:
2281  5ECB CD 00 00     				CALL 0 ; set destination address from DE
2282  5ECE              .CALL2:
2283  5ECE CD 00 00     				CALL 0 ; copy data fn
2284  5ED1 E1           			POP HL
2285  5ED2 DD 4E 0A     			LD C, (IX+10)
2286  5ED5 DD 46 0B     			LD B, (IX+11) ; destination add-to
2287  5ED8 09           			ADD HL, BC
2288  5ED9 EB           			EX DE, HL
2289  5EDA E1           		POP HL
2290  5EDB DD 4E 06     		LD C, (IX+6)
2291  5EDE DD 46 07     		LD B, (IX+7) ; src add-to
2292  5EE1 09           		ADD HL, BC
2293  5EE2 C1           	POP BC
2294  5EE3 10 DD        	DJNZ .L1
2295  5EE5 C9           	RET
2296  5EE6              ; *******************************************************************************************************
2297  5EE6
2298  5EE6              ; *******************************************************************************************************
2299  5EE6              ; function to handle CALL BOXMEMCPY basic extension
2300  5EE6              ; copies data with window like boundaries to ram
2301  5EE6              ; BOXMEMCPY ( INT request_data_ptr )
2302  5EE6              ; request_data_ptr described in RECTANGLE_COPY
2303  5EE6              ; will put ram in page 0 also, page 1 is already there
2304  5EE6              BOXMEMCPY:
2305  5EE6              	; opening (
2306  5EE6 CD 04 57     	CALL CHKCHAR
2307  5EE9 28           	DB '('
2308  5EEA              	; get pointer to request struct
2309  5EEA DD 21 2F 54  	LD IX, FRMQNT
2310  5EEE CD 59 01     	CALL CALBAS
2311  5EF1 D5           	PUSH DE
2312  5EF2              	; ending )
2313  5EF2 CD 04 57     	CALL CHKCHAR
2314  5EF5 29           	DB ')'
2315  5EF6
2316  5EF6 DD E1        	POP IX ; pointer to request struct
2317  5EF8
2318  5EF8 E5           	PUSH HL ; save position in BASIC buffer
2319  5EF9
2320  5EF9 FD 21 00 5F  	LD IY, .RET
2321  5EFD C3 B7 56     	JP ENABLE_PAGE0
2322  5F00              .RET:
2323  5F00 FB           	EI
2324  5F01              	; set RAM functions to call
2325  5F01 21 00 00     	LD HL, 0
2326  5F04 22 CB 5E     	LD (RECTANGLE_COPY.CALL1), HL ; NOP NOP
2327  5F07 22 CD 5E     	LD (RECTANGLE_COPY.CALL1+2), HL ; NOP NOP
2328  5F0A 21 ED B0     	LD HL, #B0ED ; LDIR
2329  5F0D 22 CF 5E     	LD (RECTANGLE_COPY.CALL1+4), HL
2330  5F10 CD B3 5E     	CALL RECTANGLE_COPY
2331  5F13
2332  5F13 D1               POP DE
2333  5F14 C1               POP BC
2334  5F15 CD 2E 56         CALL RESTORE_PAGE_INFO
2335  5F18
2336  5F18 E1           	POP HL
2337  5F19 C9           	RET
2338  5F1A              ; *******************************************************************************************************
2339  5F1A
2340  5F1A              ; *******************************************************************************************************
2341  5F1A              ; function to handle CALL BOXMEMVRM basic extension
2342  5F1A              ; copies data with window like boundaries to ram
2343  5F1A              ; BOXMEMVRM ( INT request_data_ptr )
2344  5F1A              ; request_data_ptr described in RECTANGLE_COPY
2345  5F1A              ; will put ram in page 0 also, page 1 is already there
2346  5F1A              BOXMEMVRM:
2347  5F1A              	; opening (
2348  5F1A CD 04 57     	CALL CHKCHAR
2349  5F1D 28           	DB '('
2350  5F1E              	; get pointer to request struct
2351  5F1E DD 21 2F 54  	LD IX, FRMQNT
2352  5F22 CD 59 01     	CALL CALBAS
2353  5F25 D5           	PUSH DE
2354  5F26              	; ending )
2355  5F26 CD 04 57     	CALL CHKCHAR
2356  5F29 29           	DB ')'
2357  5F2A
2358  5F2A DD E1        	POP IX ; pointer to request struct
2359  5F2C
2360  5F2C E5           	PUSH HL ; save position in BASIC buffer
2361  5F2D
2362  5F2D FD 21 34 5F  	LD IY, .RET
2363  5F31 C3 B7 56     	JP ENABLE_PAGE0
2364  5F34              .RET:
2365  5F34 FB           	EI
2366  5F35              	; set RAM functions to call
2367  5F35 21 5C 5F     	LD HL, .SETDEST
2368  5F38 22 CC 5E     	LD (RECTANGLE_COPY.CALL1+1), HL
2369  5F3B 21 64 5F     	LD HL, .COPYDATA
2370  5F3E 22 CF 5E     	LD (RECTANGLE_COPY.CALL2+1), HL
2371  5F41 3E CD        	LD A, #CD ; CALL
2372  5F43 32 CB 5E     	LD (RECTANGLE_COPY.CALL1), A
2373  5F46 32 CE 5E     	LD (RECTANGLE_COPY.CALL2), A
2374  5F49 3E 01        	LD A,1
2375  5F4B 32 6B 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
2376  5F4E CD B3 5E     	CALL RECTANGLE_COPY
2377  5F51 AF           	XOR A
2378  5F52 32 6B 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
2379  5F55
2380  5F55 D1               POP DE
2381  5F56 C1               POP BC
2382  5F57 CD 2E 56         CALL RESTORE_PAGE_INFO
2383  5F5A
2384  5F5A E1           	POP HL
2385  5F5B C9           	RET
2386  5F5C              .SETDEST:
2387  5F5C EB           	EX DE, HL
2388  5F5D F3           	DI
2389  5F5E CD E0 55     	CALL SETWRT_LOCAL
2390  5F61 FB           	EI
2391  5F62 EB           	EX DE, HL
2392  5F63 C9           	RET
2393  5F64              .COPYDATA:
2394  5F64 41           	LD B, C
2395  5F65 0E 98        	LD C, #98
2396  5F67 C3 EB 55     	JP BBYTECOPY
2397  5F6A              ; *******************************************************************************************************
2398  5F6A               ENDIF
2399  5F6A
2400  5F6A              EXT_END:
2401  5F6A
# file closed: asm\main.asm
