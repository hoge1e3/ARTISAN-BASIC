# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; DEFINE EXCLUDE_SOUND_PLAYER
   4  4000
   5  4000              CHPUT   EQU     #A2
   6  4000              CALBAS	EQU		#159
   7  4000              ERRHAND EQU     #406F
   8  4000              FRMEVL  EQU     #4C64
   9  4000              FRESTR	EQU		#67D0
  10  4000              ; FRMQNT = formula quantificator
  11  4000              ; input HL=pointer to current program expression
  12  4000              ; output HL=next address
  13  4000              ; output DE=integer datum
  14  4000              FRMQNT	EQU		#542F
  15  4000              ; GETBYT = get byte parameter
  16  4000              ; input HL=pointer to current program expression
  17  4000              ; output HL=next address
  18  4000              ; output A=E=byte read
  19  4000              GETBYT	EQU		#521C
  20  4000              CHRGTR  EQU     #4666
  21  4000              SYNCHR	EQU		#558C
  22  4000              VALTYP  EQU     #F663
  23  4000              USR     EQU     #F7F8
  24  4000              PROCNM	EQU		#FD89
  25  4000              BIOS_FILVRM  EQU     #56
  26  4000              CLIKSW	EQU		#F3DB
  27  4000              ATRBAS	EQU		#F928
  28  4000
  29  4000              RAMAD0	EQU	0F341h	; Main-RAM Slot (00000h~03FFFh)
  30  4000              RAMAD1	EQU	0F342h	; Main-RAM Slot (04000h~07FFFh)
  31  4000              RAMAD2	EQU	0F343h	; Main-RAM Slot (08000h~0BFFFh)
  32  4000              RAMAD3	EQU	0F344h	; Main-RAM Slot (0C000h~0FFFFh)
  33  4000              EXPTBL	EQU #FCC1
  34  4000              SCRMOD	EQU #FCAF ; current screen mode
  35  4000
  36  4000              ; BASIC error codes
  37  4000              ;01 NEXT without FOR
  38  4000              ;02 Syntax error
  39  4000              ;03 RETURN without GOSUB
  40  4000              ;04 Out of DATA
  41  4000              ;05 Illegal function call
  42  4000              ;06 Overflow
  43  4000              ;07 Out of memory
  44  4000              ;08 Undefined line number
  45  4000              ;09 Subscript out of range
  46  4000              ;10 Redimensioned array
  47  4000              ;11 Division by zero
  48  4000              ;12 Illegal direct
  49  4000              ;13 Type mismatch
  50  4000              ;14 Out of string space
  51  4000              ;15 String too long
  52  4000              ;16 String formula too complex
  53  4000              ;17 Can't CONTINUE
  54  4000              ;18 Undefined user function
  55  4000              ;19 Device I/O error
  56  4000              ;20 Verify error
  57  4000              ;21 No RESUME
  58  4000              ;22 RESUME without error
  59  4000              ;23 Unprintable error
  60  4000              ;24 Missing operand
  61  4000              ;25 Line buffer overflow
  62  4000              ;50 FIELD overflow
  63  4000              ;51 Internal error
  64  4000              ;52 Bad file number
  65  4000              ;53 File not found
  66  4000              ;54 File already open
  67  4000              ;55 Input past end
  68  4000              ;56 Bad file name
  69  4000              ;57 Direct statement in file
  70  4000              ;58 Sequential I/O only
  71  4000              ;59 File not OPEN
  72  4000
  73  4000
  74  4000               ; simulate cartridge with BASIC extension
  75  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  75  4004 80 4F 00 00
  75  4008 00 00 00 00
  75  400C 00 00 00 00
  76  4010
  77  4010              ; this location #400A stores last location used by basic extension
  78  4010              ; free memory after that point
  79  4010 02 58         DW EXT_END
  80  4012
  81  4012              ; binary included AKG player compiled at #4012
  82  4012               IFNDEF EXCLUDE_SOUND_PLAYER
  83  4012              	INCBIN "bin/AKG.bin"
  84  4CEE              	INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CEE              MAIN_PLAYER_START EQU 04012H
   2+ 4CEE              PLY_AKG_START EQU 04012H
   3+ 4CEE              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401BH
   4+ 4CEE              PLY_AKG_INITSOUNDEFFECTS EQU 0401BH
   5+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 0401FH
   6+ 4CEE              PLY_AKG_PLAYSOUNDEFFECT EQU 0401FH
   7+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04020H
   8+ 4CEE              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04020H
   9+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04047H
  10+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04047H
  11+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04055H
  12+ 4CEE              PLY_AKG_PSES_PLAY EQU 0408EH
  13+ 4CEE              PLY_AKG_PSES_READFIRSTBYTE EQU 04097H
  14+ 4CEE              PLY_AKG_PSES_S_ENDORLOOP EQU 040AFH
  15+ 4CEE              PLY_AKG_PSES_S_LOOP EQU 040BAH
  16+ 4CEE              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C0H
  17+ 4CEE              PLY_AKG_PSES_NOTREACHED EQU 040D3H
  18+ 4CEE              PLY_AKG_PSES_HARDWAREONLY EQU 040D7H
  19+ 4CEE              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040DEH
  20+ 4CEE              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F0H
  21+ 4CEE              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FAH
  22+ 4CEE              PLY_AKG_PSES_H_AFTERRETRIG EQU 04104H
  23+ 4CEE              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 04118H
  24+ 4CEE              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411DH
  25+ 4CEE              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04125H
  26+ 4CEE              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04130H
  27+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413CH
  28+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 0413EH
  29+ 4CEE              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04144H
  30+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 04148H
  31+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 04148H
  32+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414AH
  33+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414AH
  34+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414AH
  35+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414BH
  36+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414CH
  37+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04150H
  38+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04150H
  39+ 4CEE              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04150H
  40+ 4CEE              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 04158H
  41+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04160H
  42+ 4CEE              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04160H
  43+ 4CEE              PLY_AKG_INIT EQU 04160H
  44+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04160H
  45+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 0418EH
  46+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A2H
  47+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B4H
  48+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D3H
  49+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E0H
  50+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL EQU 041E6H
  51+ 4CEE              PLY_AKG_INITTABLE0 EQU 041E9H
  52+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041E9H
  53+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04203H
  54+ 4CEE              PLY_AKG_INITTABLE0_END EQU 04203H
  55+ 4CEE              PLY_AKG_INITTABLE1 EQU 04203H
  56+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04203H
  57+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04207H
  58+ 4CEE              PLY_AKG_INITTABLE1_END EQU 04207H
  59+ 4CEE              PLY_AKG_INITTABLEORA EQU 04207H
  60+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04207H
  61+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 0421FH
  62+ 4CEE              PLY_AKG_INITTABLEORA_END EQU 0421FH
  63+ 4CEE              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 0421FH
  64+ 4CEE              PLY_AKG_STOP EQU 0421FH
  65+ 4CEE              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04231H
  66+ 4CEE              PLY_AKG_PLAY EQU 04231H
  67+ 4CEE              PLY_AKG_TICKDECREASINGCOUNTER EQU 04239H
  68+ 4CEE              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 0423FH
  69+ 4CEE              PLY_AKG_READLINKER EQU 04244H
  70+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04244H
  71+ 4CEE              PLY_AKG_READLINKER_PTLINKER EQU 04244H
  72+ 4CEE              PLY_AKG_READLINKER_NOLOOP EQU 0424FH
  73+ 4CEE              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 04288H
  74+ 4CEE              PLY_AKG_READLINE EQU 0428BH
  75+ 4CEE              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428BH
  76+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04291H
  77+ 4CEE              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04291H
  78+ 4CEE              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 0429EH
  79+ 4CEE              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A2H
  80+ 4CEE              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A5H
  81+ 4CEE              PLY_AKG_SPEEDTRACK_END EQU 042A8H
  82+ 4CEE              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042A8H
  83+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042AEH
  84+ 4CEE              PLY_AKG_EVENTTRACK_PTTRACK EQU 042AEH
  85+ 4CEE              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BBH
  86+ 4CEE              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042BFH
  87+ 4CEE              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C2H
  88+ 4CEE              PLY_AKG_EVENTTRACK_END EQU 042C5H
  89+ 4CEE              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C5H
  90+ 4CEE              PLY_AKG_CHANNEL1_READTRACK EQU 042D1H
  91+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D1H
  92+ 4CEE              PLY_AKG_CHANNEL1_PTTRACK EQU 042D1H
  93+ 4CEE              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042ECH
  94+ 4CEE              PLY_AKG_CHANNEL1_WAIT EQU 042F7H
  95+ 4CEE              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 042FEH
  96+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 042FEH
  97+ 4CEE              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 042FEH
  98+ 4CEE              PLY_AKG_CHANNEL1_NOTE EQU 04307H
  99+ 4CEE              PLY_AKG_BASENOTEINDEX EQU 04307H
 100+ 4CEE              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 04309H
 101+ 4CEE              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 04309H
 102+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 04319H
 103+ 4CEE              PLY_AKG_INSTRUMENTSTABLE EQU 04319H
 104+ 4CEE              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432BH
 105+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433BH
 106+ 4CEE              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04363H
 107+ 4CEE              PLY_AKG_CHANNEL1_READCELLEND EQU 04366H
 108+ 4CEE              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04366H
 109+ 4CEE              PLY_AKG_CHANNEL2_READTRACK EQU 04372H
 110+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04372H
 111+ 4CEE              PLY_AKG_CHANNEL2_PTTRACK EQU 04372H
 112+ 4CEE              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438DH
 113+ 4CEE              PLY_AKG_CHANNEL2_WAIT EQU 04398H
 114+ 4CEE              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 0439FH
 115+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 0439FH
 116+ 4CEE              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 0439FH
 117+ 4CEE              PLY_AKG_CHANNEL2_NOTE EQU 043A8H
 118+ 4CEE              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043ADH
 119+ 4CEE              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043ADH
 120+ 4CEE              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043CFH
 121+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043DFH
 122+ 4CEE              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04407H
 123+ 4CEE              PLY_AKG_CHANNEL2_READCELLEND EQU 0440AH
 124+ 4CEE              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440AH
 125+ 4CEE              PLY_AKG_CHANNEL3_READTRACK EQU 04416H
 126+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04416H
 127+ 4CEE              PLY_AKG_CHANNEL3_PTTRACK EQU 04416H
 128+ 4CEE              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04431H
 129+ 4CEE              PLY_AKG_CHANNEL3_WAIT EQU 0443CH
 130+ 4CEE              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04443H
 131+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04443H
 132+ 4CEE              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04443H
 133+ 4CEE              PLY_AKG_CHANNEL3_NOTE EQU 0444CH
 134+ 4CEE              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04451H
 135+ 4CEE              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04451H
 136+ 4CEE              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04473H
 137+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04483H
 138+ 4CEE              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ABH
 139+ 4CEE              PLY_AKG_CHANNEL3_READCELLEND EQU 044AEH
 140+ 4CEE              PLY_AKG_CURRENTSPEED EQU 044AEH
 141+ 4CEE              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B0H
 142+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B3H
 143+ 4CEE              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B3H
 144+ 4CEE              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B6H
 145+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044B9H
 146+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044B9H
 147+ 4CEE              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C5H
 148+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CCH
 149+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044CFH
 150+ 4CEE              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D5H
 151+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044D8H
 152+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044D8H
 153+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E6H
 154+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EBH
 155+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F6H
 156+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044F9H
 157+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044F9H
 158+ 4CEE              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FCH
 159+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 044FFH
 160+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE EQU 044FFH
 161+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 04508H
 162+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04512H
 163+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04515H
 164+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04515H
 165+ 4CEE              PLY_AKG_CHANNEL1_PITCH EQU 04515H
 166+ 4CEE              PLY_AKG_CHANNEL1_ISPITCH EQU 04518H
 167+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451DH
 168+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451DH
 169+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04521H
 170+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04523H
 171+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04525H
 172+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452CH
 173+ 4CEE              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452DH
 174+ 4CEE              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04530H
 175+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04530H
 176+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454CH
 177+ 4CEE              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454CH
 178+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 04559H
 179+ 4CEE              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455DH
 180+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456DH
 181+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456DH
 182+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 0456EH
 183+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 0456FH
 184+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04571H
 185+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04571H
 186+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04571H
 187+ 4CEE              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04572H
 188+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04573H
 189+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04575H
 190+ 4CEE              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04575H
 191+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04575H
 192+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04575H
 193+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04575H
 194+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_END EQU 04578H
 195+ 4CEE              PLY_AKG_CHANNEL1_PITCH_END EQU 0457AH
 196+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04582H
 197+ 4CEE              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04582H
 198+ 4CEE              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04585H
 199+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 04588H
 200+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 04588H
 201+ 4CEE              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04594H
 202+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459BH
 203+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 0459EH
 204+ 4CEE              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A4H
 205+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A7H
 206+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A7H
 207+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B5H
 208+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BAH
 209+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C5H
 210+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045C8H
 211+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045C8H
 212+ 4CEE              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CBH
 213+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045CEH
 214+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045CEH
 215+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D7H
 216+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E1H
 217+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E4H
 218+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E4H
 219+ 4CEE              PLY_AKG_CHANNEL2_PITCH EQU 045E4H
 220+ 4CEE              PLY_AKG_CHANNEL2_ISPITCH EQU 045E7H
 221+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045ECH
 222+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045ECH
 223+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F0H
 224+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F2H
 225+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F4H
 226+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FBH
 227+ 4CEE              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FCH
 228+ 4CEE              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 045FFH
 229+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 045FFH
 230+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461BH
 231+ 4CEE              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461BH
 232+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 04628H
 233+ 4CEE              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462CH
 234+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463CH
 235+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463CH
 236+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463DH
 237+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 0463EH
 238+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04640H
 239+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04640H
 240+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04640H
 241+ 4CEE              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04641H
 242+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04642H
 243+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04644H
 244+ 4CEE              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04644H
 245+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04644H
 246+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04644H
 247+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04644H
 248+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_END EQU 04647H
 249+ 4CEE              PLY_AKG_CHANNEL2_PITCH_END EQU 04649H
 250+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04651H
 251+ 4CEE              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04651H
 252+ 4CEE              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04654H
 253+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04657H
 254+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04657H
 255+ 4CEE              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04663H
 256+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466AH
 257+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466DH
 258+ 4CEE              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04673H
 259+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04676H
 260+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04676H
 261+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04684H
 262+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 04689H
 263+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04694H
 264+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04697H
 265+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04697H
 266+ 4CEE              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469AH
 267+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469DH
 268+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469DH
 269+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A6H
 270+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B0H
 271+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B3H
 272+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B3H
 273+ 4CEE              PLY_AKG_CHANNEL3_PITCH EQU 046B3H
 274+ 4CEE              PLY_AKG_CHANNEL3_ISPITCH EQU 046B6H
 275+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BBH
 276+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BBH
 277+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046BFH
 278+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C1H
 279+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C3H
 280+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CAH
 281+ 4CEE              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CBH
 282+ 4CEE              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046CEH
 283+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046CEH
 284+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046EAH
 285+ 4CEE              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046EAH
 286+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F7H
 287+ 4CEE              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FBH
 288+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470BH
 289+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470BH
 290+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470CH
 291+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470DH
 292+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 0470FH
 293+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 0470FH
 294+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 0470FH
 295+ 4CEE              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04710H
 296+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04711H
 297+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04713H
 298+ 4CEE              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04713H
 299+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04713H
 300+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04713H
 301+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04713H
 302+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_END EQU 04716H
 303+ 4CEE              PLY_AKG_CHANNEL3_PITCH_END EQU 04718H
 304+ 4CEE              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04724H
 305+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04724H
 306+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04724H
 307+ 4CEE              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04727H
 308+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 04729H
 309+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 0472FH
 310+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04732H
 311+ 4CEE              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04732H
 312+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04735H
 313+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 0473EH
 314+ 4CEE              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04746H
 315+ 4CEE              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04753H
 316+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04753H
 317+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04753H
 318+ 4CEE              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04756H
 319+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 04758H
 320+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 0475EH
 321+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04761H
 322+ 4CEE              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04761H
 323+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04764H
 324+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476DH
 325+ 4CEE              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04775H
 326+ 4CEE              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04783H
 327+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04783H
 328+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04783H
 329+ 4CEE              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04786H
 330+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 04788H
 331+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 0478EH
 332+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04791H
 333+ 4CEE              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04791H
 334+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04794H
 335+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479DH
 336+ 4CEE              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A5H
 337+ 4CEE              PLY_AKG_SENDPSGREGISTERS EQU 047B4H
 338+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BCH
 339+ 4CEE              PLY_AKG_PSGREG01_INSTR EQU 047BCH
 340+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CCH
 341+ 4CEE              PLY_AKG_PSGREG23_INSTR EQU 047CCH
 342+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DDH
 343+ 4CEE              PLY_AKG_PSGREG45_INSTR EQU 047DDH
 344+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047EEH
 345+ 4CEE              PLY_AKG_PSGREG6_8_INSTR EQU 047EEH
 346+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 047FFH
 347+ 4CEE              PLY_AKG_PSGREG9_10_INSTR EQU 047FFH
 348+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04810H
 349+ 4CEE              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04810H
 350+ 4CEE              PLY_AKG_PSGREG13_OLDVALUE EQU 04825H
 351+ 4CEE              PLY_AKG_RETRIG EQU 04827H
 352+ 4CEE              PLY_AKG_PSGREG13_INSTR EQU 04829H
 353+ 4CEE              PLY_AKG_PSGREG13_END EQU 04838H
 354+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 04838H
 355+ 4CEE              PLY_AKG_SAVESP EQU 04838H
 356+ 4CEE              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483CH
 357+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTS EQU 04844H
 358+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04851H
 359+ 4CEE              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04851H
 360+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTS EQU 04859H
 361+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04866H
 362+ 4CEE              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04866H
 363+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTS EQU 0486EH
 364+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 04879H
 365+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS EQU 04879H
 366+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 04888H
 367+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 04888H
 368+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 0488FH
 369+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 0489FH
 370+ 4CEE              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 0489FH
 371+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A6H
 372+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A6H
 373+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048A9H
 374+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B2H
 375+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B2H
 376+ 4CEE              PLY_AKG_READINSTRUMENTCELL EQU 048B8H
 377+ 4CEE              PLY_AKG_NOSOFTNOHARD EQU 048C5H
 378+ 4CEE              PLY_AKG_NSNH_NONOISE EQU 048DAH
 379+ 4CEE              PLY_AKG_SOFT EQU 048DDH
 380+ 4CEE              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E4H
 381+ 4CEE              PLY_AKG_S_NOTSIMPLE EQU 048ECH
 382+ 4CEE              PLY_AKG_S_AFTERSIMPLETEST EQU 048EFH
 383+ 4CEE              PLY_AKG_HARDTOSOFT EQU 048FCH
 384+ 4CEE              PLY_AKG_HS_JUMPRATIO EQU 04907H
 385+ 4CEE              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04934H
 386+ 4CEE              PLY_AKG_ENDWITHOUTLOOP EQU 04936H
 387+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04936H
 388+ 4CEE              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04936H
 389+ 4CEE              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 0493EH
 390+ 4CEE              PLY_AKG_SH_JUMPRATIO EQU 0494BH
 391+ 4CEE              PLY_AKG_SH_JUMPRATIOEND EQU 0496CH
 392+ 4CEE              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497BH
 393+ 4CEE              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04981H
 394+ 4CEE              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499BH
 395+ 4CEE              PLY_AKG_H_RETRIGEND EQU 049ADH
 396+ 4CEE              PLY_AKG_H_AFTERRETRIG EQU 049AEH
 397+ 4CEE              PLY_AKG_ENDWITHLOOP EQU 049C0H
 398+ 4CEE              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C7H
 399+ 4CEE              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DDH
 400+ 4CEE              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EBH
 401+ 4CEE              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FBH
 402+ 4CEE              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A09H
 403+ 4CEE              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A18H
 404+ 4CEE              PLY_AKG_SHOHS_RETRIGEND EQU 04A27H
 405+ 4CEE              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A28H
 406+ 4CEE              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3AH
 407+ 4CEE              PLY_AKG_EFFECTTABLE EQU 04A48H
 408+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A48H
 409+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6CH
 410+ 4CEE              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6CH
 411+ 4CEE              PLY_AKG_EFFECT_RESET EQU 04A6FH
 412+ 4CEE              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A71H
 413+ 4CEE              PLY_AKG_EFFECT_VOLUME EQU 04A8CH
 414+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A98H
 415+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04A9EH
 416+ 4CEE              PLY_AKG_ARPEGGIOSTABLE EQU 04A9EH
 417+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC5H
 418+ 4CEE              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACCH
 419+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD2H
 420+ 4CEE              PLY_AKG_PITCHESTABLE EQU 04AD2H
 421+ 4CEE              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AF9H
 422+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B00H
 423+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B11H
 424+ 4CEE              PLY_AKG_EFFECT_PITCHDOWN EQU 04B18H
 425+ 4CEE              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B28H
 426+ 4CEE              PLY_AKG_EFFECT_PITCHUP EQU 04B3DH
 427+ 4CEE              PLY_AKG_EFFECT_PITCHSTOP EQU 04B4FH
 428+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B56H
 429+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B80H
 430+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B80H
 431+ 4CEE              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B99H
 432+ 4CEE              PLY_AKG_EFFECT_GLIDESPEED EQU 04B99H
 433+ 4CEE              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BABH
 434+ 4CEE              PLY_AKG_EFFECT_LEGATO EQU 04BC1H
 435+ 4CEE              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD5H
 436+ 4CEE              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDDH
 437+ 4CEE              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE5H
 438+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEDH
 439+ 4CEE              PLY_AKG_EVENT EQU 04BEDH
 440+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BEEH
 441+ 4CEE              PLY_AKG_PERIODTABLE EQU 04BEEH
 442+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BEEH
 443+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CEEH
 444+ 4CEE              PLY_AKG_PERIODTABLE_END EQU 04CEEH
 445+ 4CEE              PLY_AKG_END EQU 04CEEH
 446+ 4CEE              MAIN_PLAYER_END EQU 04CEEH
 447+ 4CEE              TESTEREND EQU 04CEEH
 448+ 4CEE
# file closed: ./symbol/AKG.sym
  85  4CEE               ENDIF
  86  4CEE
  87  4CEE              ORIG.HTIMI:
  88  4CEE 00 00 00 00  	DB 0, 0, 0, 0, 0
  88  4CF2 00
  89  4CF3               EXPORT ORIG.HTIMI
  90  4CF3
  91  4CF3               IFNDEF EXCLUDE_SOUND_PLAYER
  92  4CF3              MUSIC_INIT_STATUS:
  93  4CF3 00            DB 0
  94  4CF4              SFX_INIT_STATUS:
  95  4CF4 00            DB 0
  96  4CF5              SOUND_ENABLED:
  97  4CF5 00            DB 0
  98  4CF6               ENDIF
  99  4CF6
 100  4CF6              SPRATR_INIT_STATUS:
 101  4CF6 00            DB 0
 102  4CF7              SPRATR_UPDATE_FLAG:
 103  4CF7 00 00         DW 0
 104  4CF9              SPRATR_DATA:
 105  4CF9 00 00         DW 0
 106  4CFB              SPRFLICKER_ENABLED:
 107  4CFB 00            DB 0
 108  4CFC
 109  4CFC              ; to temporarily store stack pointer
 110  4CFC              TMPSP:
 111  4CFC 00 00         DW 0
 112  4CFE              ; to support sprite flicker
 113  4CFE              FLICKER:
 114  4CFE 00            DB 0
 115  4CFF
 116  4CFF              ; temp variables for BLIT, TILE functions
 117  4CFF              TILETMP1:
 118  4CFF              BLIT_TMP1:
 119  4CFF 00 00         DW 0
 120  4D01              TILETMP2:
 121  4D01              BLIT_TMP2:
 122  4D01 00 00         DW 0
 123  4D03
 124  4D03              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 125  4D03              ; per starting letter, if no commands with this letter, NULL value
 126  4D03              CMDS:
 127  4D03 00 00            DW 0 ; A
 128  4D05 BF 4D            DW CMDS_B ; B
 129  4D07 00 00            DW 0 ; C
 130  4D09 00 00            DW 0 ; D
 131  4D0B 00 00            DW 0 ; E
 132  4D0D 4A 4D            DW CMDS_F; F
 133  4D0F 5D 4D            DW CMDS_G; G
 134  4D11 00 00            DW 0 ; H
 135  4D13 00 00            DW 0 ; I
 136  4D15 00 00            DW 0 ; J
 137  4D17 00 00            DW 0 ; K
 138  4D19 00 00            DW 0 ; L
 139  4D1B 37 4D            DW CMDS_M ; M
 140  4D1D 00 00            DW 0 ; N
 141  4D1F 00 00            DW 0 ; O
 142  4D21 00 00            DW 0 ; P
 143  4D23 00 00            DW 0 ; Q
 144  4D25 00 00            DW 0 ; R
 145  4D27 71 4D            DW CMDS_S ; S
 146  4D29 DF 4D            DW CMDS_T ; T
 147  4D2B 00 00            DW 0 ; U
 148  4D2D 67 4D            DW CMDS_V ; V
 149  4D2F 00 00            DW 0 ; W
 150  4D31 00 00            DW 0 ; X
 151  4D33 00 00            DW 0 ; Y
 152  4D35 00 00            DW 0 ; Z
 153  4D37
 154  4D37              CMDS_M:
 155  4D37 4D 45 4D 56      DB "MEMVRM", 0
 155  4D3B 52 4D 00
 156  4D3E 48 51            DW MEMVRM
 157  4D40 4D 45 4D 43  	DB "MEMCPY", 0
 157  4D44 50 59 00
 158  4D47 07 50        	DW MEMCPY
 159  4D49 00           	DB 0
 160  4D4A              CMDS_F:
 161  4D4A 46 49 4C 56      DB "FILVRM", 0
 161  4D4E 52 4D 00
 162  4D51 4A 50            DW FILVRM
 163  4D53 46 49 4C 52      DB "FILRAM", 0
 163  4D57 41 4D 00
 164  4D5A 91 50            DW FILRAM
 165  4D5C 00               DB 0
 166  4D5D              CMDS_G:
 167  4D5D 47 45 4E 43      DB "GENCAL", 0
 167  4D61 41 4C 00
 168  4D64 EF 50            DW GENCAL
 169  4D66 00           	DB	0
 170  4D67              CMDS_V:
 171  4D67 56 52 4D 4D  	DB "VRMMEM", 0
 171  4D6B 45 4D 00
 172  4D6E C1 51        	DW VRMMEM
 173  4D70 00           	DB 0
 174  4D71              CMDS_S:
 175  4D71 53 50 52 53  	DB "SPRSET", 0
 175  4D75 45 54 00
 176  4D78 A9 53        	DW SPRSET
 177  4D7A 53 50 52 47  	DB "SPRGRPMOV", 0
 177  4D7E 52 50 4D 4F
 177  4D82 56 00
 178  4D84 67 54        	DW SPRGRPMOV
 179  4D86               IFNDEF EXCLUDE_SOUND_PLAYER
 180  4D86 53 4E 44 53  	DB "SNDSFX", 0
 180  4D8A 46 58 00
 181  4D8D FF 52        	DW SNDSFX
 182  4D8F 53 4E 44 50  	DB "SNDPLYON", 0
 182  4D93 4C 59 4F 4E
 182  4D97 00
 183  4D98 C9 52        	DW SNDPLYON
 184  4D9A 53 4E 44 50  	DB "SNDPLYOFF", 0
 184  4D9E 4C 59 4F 46
 184  4DA2 46 00
 185  4DA4 DC 52        	DW SNDPLYOFF
 186  4DA6 53 4E 44 50  	DB "SNDPLYINI", 0
 186  4DAA 4C 59 49 4E
 186  4DAE 49 00
 187  4DB0 7F 52        	DW SNDPLYINIT
 188  4DB2               ENDIF
 189  4DB2 53 50 52 41  	DB "SPRATRINI", 0
 189  4DB6 54 52 49 4E
 189  4DBA 49 00
 190  4DBC 59 53        	DW SPRATRINI
 191  4DBE 00           	DB 0
 192  4DBF              CMDS_B:
 193  4DBF 42 4C 49 54  	DB "BLIT", 0
 193  4DC3 00
 194  4DC4 65 56        	DW BLIT
 195  4DC6 42 4F 58 4D  	DB "BOXMEMCPY", 0
 195  4DCA 45 4D 43 50
 195  4DCE 59 00
 196  4DD0 89 57        	DW BOXMEMCPY
 197  4DD2 42 4F 58 4D  	DB "BOXMEMVRM", 0
 197  4DD6 45 4D 56 52
 197  4DDA 4D 00
 198  4DDC BD 57        	DW BOXMEMVRM
 199  4DDE 00           	DB 0
 200  4DDF              CMDS_T:
 201  4DDF 54 49 4C 45  	DB "TILERAM", 0
 201  4DE3 52 41 4D 00
 202  4DE7 D2 56        	DW TILERAM
 203  4DE9 54 49 4C 45  	DB "TILEVRM", 0
 203  4DED 56 52 4D 00
 204  4DF1 19 57        	DW TILEVRM
 205  4DF3 00           	DB 0
 206  4DF4
 207  4DF4              ; ****************************************************************************************************
 208  4DF4              ; function sets VRAM address
 209  4DF4              ; input HL=address
 210  4DF4              ; modifies AF
 211  4DF4              SETWRT_LOCAL:
 212  4DF4 7D           	LD	A, L
 213  4DF5 D3 99        	OUT	(099H), A
 214  4DF7 7C           	LD	A, H
 215  4DF8 E6 3F        	AND	03FH
 216  4DFA F6 40        	OR	040H
 217  4DFC D3 99        	OUT	(099H), A
 218  4DFE C9           	RET
 219  4DFF              ; ****************************************************************************************************
 220  4DFF
 221  4DFF              ; ****************************************************************************************************
 222  4DFF              ; function gets slot and subslot data for specific page
 223  4DFF              ; input A=page (0, 1 or 2)
 224  4DFF              ; output B = 0A8H register value
 225  4DFF              ; output D = 0 is no subslots, 1 if yes
 226  4DFF              ; output C = 0A8H value when page 3 slot equals to requested page slot
 227  4DFF              ; output E = subslot value if present
 228  4DFF              ; modifies AF, BC, DE, HL
 229  4DFF              GET_PAGE_INFO:
 230  4DFF 6F               LD L, A
 231  4E00 C6 C1            ADD A, low (EXPTBL)
 232  4E02 32 0C 4E         LD (GET_PAGE_INFO_L1+1), A
 233  4E05 DB A8            IN A, (0A8H)
 234  4E07 47               LD B, A
 235  4E08 E6 3F            AND 03FH
 236  4E0A 4F               LD C, A
 237  4E0B              GET_PAGE_INFO_L1:
 238  4E0B 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 239  4E0E E6 80            AND 080H
 240  4E10 28 1B            JR Z, GET_PAGE_INFO_L2
 241  4E12                  ; expanded
 242  4E12 2D               DEC L
 243  4E13 FA 32 4E         JP M, GET_PAGE_INFO_L3
 244  4E16 2D               DEC L
 245  4E17 FA 30 4E         JP M, GET_PAGE_INFO_L4
 246  4E1A                  ; page 2
 247  4E1A 07               RLCA
 248  4E1B 07               RLCA
 249  4E1C              GET_PAGE_INFO_L5:
 250  4E1C E6 C0            AND 0C0H
 251  4E1E B1               OR C
 252  4E1F D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 253  4E21 4F               LD C, A
 254  4E22 3A FF FF         LD A, (0FFFFH)
 255  4E25 2F               CPL
 256  4E26 5F               LD E, A
 257  4E27 16 01            LD D, 1
 258  4E29 78               LD A, B ; return stack
 259  4E2A D3 A8            OUT (0A8H), A
 260  4E2C C9               RET
 261  4E2D              GET_PAGE_INFO_L2:
 262  4E2D                  ; not expanded
 263  4E2D 16 00            LD D, 0
 264  4E2F C9               RET
 265  4E30              GET_PAGE_INFO_L4:
 266  4E30                  ; page 1
 267  4E30 0F               RRCA
 268  4E31 0F               RRCA
 269  4E32              GET_PAGE_INFO_L3:
 270  4E32                  ; page 0
 271  4E32 0F               RRCA
 272  4E33 0F               RRCA
 273  4E34 18 E6            JR GET_PAGE_INFO_L5
 274  4E36              ; ****************************************************************************************************
 275  4E36
 276  4E36              ; ****************************************************************************************************
 277  4E36              ; function returns original slot and subslot info
 278  4E36              ; input B = 0A8H register value
 279  4E36              ; input D = 0 is no subslots, 1 if yes
 280  4E36              ; input C = 0A8H value when page 3 slot equals to requested page slot
 281  4E36              ; input E = subslot value if present
 282  4E36              ; modifies AF, disables interrupts
 283  4E36              RESTORE_PAGE_INFO:
 284  4E36 7A               LD A, D
 285  4E37 B7               OR A
 286  4E38 28 08            JR Z, RESTORE_PAGE_INFO_L1
 287  4E3A 79               LD A, C
 288  4E3B F3           	DI
 289  4E3C D3 A8            OUT (0A8H), A
 290  4E3E 7B               LD A, E
 291  4E3F 32 FF FF         LD (0FFFFH), A
 292  4E42              RESTORE_PAGE_INFO_L1:
 293  4E42 78               LD A, B
 294  4E43 D3 A8            OUT (0A8H), A
 295  4E45 C9               RET
 296  4E46              ; ****************************************************************************************************
 297  4E46
 298  4E46              ; *******************************************************************************************************
 299  4E46              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 300  4E46              ; INPUT:  A = SLOT ID: EXXXSSPP
 301  4E46              ; E = EXPANDED FLAG
 302  4E46              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 303  4E46              ; PP = PRIMARY SLOT NUMBER
 304  4E46              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 305  4E46              ; CHANGES: AF, BC, DE
 306  4E46
 307  4E46              LOCAL_ENASLT:
 308  4E46 CD 66 4E         CALL L0353
 309  4E49 FA 53 4E         JP M, L0340
 310  4E4C DB A8            IN A, (0A8H)
 311  4E4E A1               AND C
 312  4E4F B0               OR B
 313  4E50 D3 A8            OUT (0A8H), A
 314  4E52 C9               RET
 315  4E53              L0340:
 316  4E53 E5               PUSH HL
 317  4E54 CD 8B 4E         CALL L0378
 318  4E57 4F               LD C, A
 319  4E58 06 00            LD B, 0
 320  4E5A 7D               LD A, L
 321  4E5B A4               AND H
 322  4E5C B2               OR D
 323  4E5D 21 C5 FC         LD HL, 0FCC5H
 324  4E60 09               ADD HL, BC
 325  4E61 77               LD (HL), A
 326  4E62 E1               POP HL
 327  4E63 79               LD A, C
 328  4E64 18 E0            JR LOCAL_ENASLT
 329  4E66              L0353:
 330  4E66 F3               DI
 331  4E67 F5               PUSH AF
 332  4E68 7C               LD A, H
 333  4E69 07               RLCA
 334  4E6A 07               RLCA
 335  4E6B E6 03            AND 3
 336  4E6D 5F               LD E, A
 337  4E6E 3E C0            LD A, 0C0H
 338  4E70              L035D:
 339  4E70 07               RLCA
 340  4E71 07               RLCA
 341  4E72 1D               DEC E
 342  4E73 F2 70 4E         JP P, L035D
 343  4E76 5F               LD E, A
 344  4E77 2F               CPL
 345  4E78 4F               LD C, A
 346  4E79 F1               POP AF
 347  4E7A F5               PUSH AF
 348  4E7B E6 03            AND 3
 349  4E7D 3C               INC A
 350  4E7E 47               LD B, A
 351  4E7F 3E AB            LD A, 0ABH
 352  4E81              L036E:
 353  4E81 C6 55            ADD A, 055H
 354  4E83 10 FC            DJNZ L036E
 355  4E85 57               LD D, A
 356  4E86 A3               AND E
 357  4E87 47               LD B, A
 358  4E88 F1               POP AF
 359  4E89 A7               AND A
 360  4E8A C9               RET
 361  4E8B              L0378:
 362  4E8B F5               PUSH AF
 363  4E8C 7A               LD A, D
 364  4E8D E6 C0            AND 0C0H
 365  4E8F 4F               LD C, A
 366  4E90 F1               POP AF
 367  4E91 F5               PUSH AF
 368  4E92 57               LD D, A
 369  4E93 DB A8            IN A, (0A8H)
 370  4E95 47               LD B, A
 371  4E96 E6 3F            AND 03FH
 372  4E98 B1               OR C
 373  4E99 D3 A8            OUT (0A8H), A
 374  4E9B 7A               LD A, D
 375  4E9C 0F               RRCA
 376  4E9D 0F               RRCA
 377  4E9E E6 03            AND 3
 378  4EA0 57               LD D, A
 379  4EA1 3E AB            LD A, 0ABH
 380  4EA3              L0390:
 381  4EA3 C6 55            ADD A, 055H
 382  4EA5 15               DEC D
 383  4EA6 F2 A3 4E         JP P, L0390
 384  4EA9 A3               AND E
 385  4EAA 57               LD D, A
 386  4EAB 7B               LD A, E
 387  4EAC 2F               CPL
 388  4EAD 67               LD H, A
 389  4EAE 3A FF FF         LD A, (0FFFFH)
 390  4EB1 2F               CPL
 391  4EB2 6F               LD L, A
 392  4EB3 A4               AND H
 393  4EB4 B2               OR D
 394  4EB5 32 FF FF         LD (0FFFFH), A
 395  4EB8 78               LD A, B
 396  4EB9 D3 A8            OUT (0A8H), A
 397  4EBB F1               POP AF
 398  4EBC E6 03            AND 3
 399  4EBE C9               RET
 400  4EBF              ; *******************************************************************************************************
 401  4EBF
 402  4EBF              ; *******************************************************************************************************
 403  4EBF              ; some common code to activate page 0 and place values needed to restore original page on stack
 404  4EBF              ; input IY=return address
 405  4EBF              ENABLE_PAGE0:
 406  4EBF AF               XOR A
 407  4EC0 CD FF 4D         CALL GET_PAGE_INFO
 408  4EC3 C5               PUSH BC
 409  4EC4 D5               PUSH DE
 410  4EC5 3A 41 F3         LD A, (RAMAD0)
 411  4EC8 26 00            LD H, 0
 412  4ECA CD 46 4E         CALL LOCAL_ENASLT
 413  4ECD FD E9        	JP (IY)
 414  4ECF              ; *******************************************************************************************************
 415  4ECF
 416  4ECF              ; *******************************************************************************************************
 417  4ECF              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
 418  4ECF              ; struct {
 419  4ECF              ; DW y
 420  4ECF              ; DW x
 421  4ECF              ; DW pattern (0-31)
 422  4ECF              ; DW color
 423  4ECF              ; } [32]
 424  4ECF              ; will hide sprites whose location is outside of visible area
 425  4ECF              ; works in screen 1 and 2
 426  4ECF              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
 427  4ECF              ; modifies AF, AF', BC, DE, HL
 428  4ECF              SPRATR_UPDATE:
 429  4ECF              	; check if initialized
 430  4ECF 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
 431  4ED2 B7           	OR A
 432  4ED3 C8           	RET Z
 433  4ED4              	; check if update requested
 434  4ED4 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 435  4ED7 7E           	LD A, (HL)
 436  4ED8 B7           	OR A
 437  4ED9 C8           	RET Z
 438  4EDA              	; check screen mode
 439  4EDA 3A AF FC     	LD A, (SCRMOD)
 440  4EDD 3D           	DEC A
 441  4EDE 28 02        	JR Z, .L0 ; screen 1
 442  4EE0 3D           	DEC A
 443  4EE1 C0           	RET NZ ; not screen 2
 444  4EE2              .L0:
 445  4EE2 06 20        	LD B, 32 ; sprite number
 446  4EE4 0E 98        	LD C, #98 ; register for vdp data output
 447  4EE6              	; set VDP address
 448  4EE6 2A 28 F9     	LD HL, (ATRBAS)
 449  4EE9 3A FB 4C     	LD A, (SPRFLICKER_ENABLED)
 450  4EEC B7           	OR A
 451  4EED 28 03        	JR Z, .L3
 452  4EEF 3A FE 4C     	LD A, (FLICKER)
 453  4EF2              .L3:
 454  4EF2 5F           	LD E, A
 455  4EF3 08           	EX AF, AF'
 456  4EF4 7B           	LD A, E
 457  4EF5 87           	ADD A, A
 458  4EF6 87           	ADD A, A
 459  4EF7 16 00        	LD D, 0
 460  4EF9 5F           	LD E, A
 461  4EFA 19           	ADD HL, DE
 462  4EFB CD F4 4D     	CALL SETWRT_LOCAL
 463  4EFE ED 73 FC 4C  	LD (TMPSP), SP
 464  4F02 ED 7B F9 4C  	LD SP, (SPRATR_DATA)
 465  4F06
 466  4F06              .LOOP:
 467  4F06 E1           	POP HL
 468  4F07 24           	INC H
 469  4F08 28 0D        	JR Z, .L1 ; negative number above -256
 470  4F0A 25           	DEC H
 471  4F0B 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
 472  4F0D 7D           	LD A, L
 473  4F0E FE C0        	CP 192
 474  4F10 30 10        	JR NC, .OUT3
 475  4F12 3D           	DEC A ; due to VDP rule that top of screen is -1
 476  4F13 57           	LD D, A
 477  4F14 C3 32 4F     	JP .X
 478  4F17              .L1:
 479  4F17 7D           	LD A, L
 480  4F18 C6 10        	ADD 16
 481  4F1A FA 22 4F     	JP M, .OUT3 ; below -16
 482  4F1D 2D           	DEC L ; due to VDP rule that top of screen is -1
 483  4F1E 55           	LD D, L
 484  4F1F C3 32 4F     	JP .X
 485  4F22              .OUT3:
 486  4F22 E1           	POP HL ; skip x value
 487  4F23              .OUT2:
 488  4F23 E1           	POP HL ; skip pattern
 489  4F24 E1           	POP HL ; skip color
 490  4F25 3E D1        	LD A, #D1
 491  4F27 D3 98        	OUT (#98), A ; sprite hidden
 492  4F29 D3 98        	OUT (#98), A ; value unimportant
 493  4F2B D3 98        	OUT (#98), A ; value unimportant
 494  4F2D D3 98        	OUT (#98), A ; value unimportant
 495  4F2F C3 56 4F     	JP .NEXT
 496  4F32              .X:
 497  4F32 E1           	POP HL
 498  4F33 24           	INC H
 499  4F34 28 08        	JR Z, .L2
 500  4F36 25           	DEC H
 501  4F37 20 EA        	JR NZ, .OUT2
 502  4F39 1E 00        	LD E, 0 ; EC bit
 503  4F3B C3 47 4F     	JP .XY
 504  4F3E              .L2:
 505  4F3E 7D           	LD A, L
 506  4F3F C6 20        	ADD 32
 507  4F41 FA 23 4F     	JP M, .OUT2
 508  4F44 6F           	LD L, A
 509  4F45 1E 80        	LD E, #80
 510  4F47              .XY:
 511  4F47 ED 51        	OUT (C), D
 512  4F49 ED 69        	OUT (C), L
 513  4F4B E1           	POP HL ; pattern
 514  4F4C 7D           	LD A, L
 515  4F4D 87           	ADD A, A
 516  4F4E 87           	ADD A, A ; needs to go at 4x
 517  4F4F D3 98        	OUT (#98), A
 518  4F51 E1           	POP HL ; color
 519  4F52 7D           	LD A, L
 520  4F53 B3           	OR E
 521  4F54 D3 98        	OUT (#98), A
 522  4F56              .NEXT:
 523  4F56 08           	EX AF, AF'
 524  4F57 3C           	INC A
 525  4F58 E6 1F        	AND 31
 526  4F5A C2 6E 4F     	JP NZ, .NEXT2
 527  4F5D 08           	EX AF, AF'
 528  4F5E 2A 28 F9     	LD HL, (ATRBAS)
 529  4F61              	; CALL SETWRT_LOCAL not allowed as SP modified
 530  4F61 7D           	LD	A, L
 531  4F62 D3 99        	OUT	(099H), A
 532  4F64 7C           	LD	A, H
 533  4F65 E6 3F        	AND	03FH
 534  4F67 F6 40        	OR	040H
 535  4F69 D3 99        	OUT	(099H), A
 536  4F6B C3 6F 4F     	JP .NEXT3
 537  4F6E              .NEXT2:
 538  4F6E 08           	EX AF, AF'
 539  4F6F              .NEXT3:
 540  4F6F 10 95        	DJNZ .LOOP
 541  4F71 08           	EX AF, AF'
 542  4F72 3C           	INC A
 543  4F73 32 FE 4C     	LD (FLICKER), A
 544  4F76
 545  4F76 ED 7B FC 4C  	LD SP, (TMPSP)
 546  4F7A 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 547  4F7D 36 00        	LD (HL), 0 ; zero out update flag
 548  4F7F C9           	RET
 549  4F80              ; *******************************************************************************************************
 550  4F80
 551  4F80              ; General BASIC CALL-instruction handler
 552  4F80              CALLHAND:
 553  4F80 E5           	PUSH HL
 554  4F81 21 03 4D     	LD	HL, CMDS ; pointer table based on starting letter
 555  4F84 3A 89 FD         LD A, (PROCNM)
 556  4F87 D6 41            SUB 'A'
 557  4F89 87               ADD A, A
 558  4F8A 16 00            LD D, 0
 559  4F8C 5F               LD E, A
 560  4F8D 19               ADD HL, DE
 561  4F8E 5E               LD E, (HL)
 562  4F8F 23               INC HL
 563  4F90 56               LD D, (HL)
 564  4F91 7A               LD A, D
 565  4F92 B3               OR E
 566  4F93 28 24            JR Z, .CMDNOTRECOGNIZED
 567  4F95 EB               EX DE, HL
 568  4F96              .CHKCMD:
 569  4F96 11 89 FD     	LD	DE, PROCNM
 570  4F99 1A           .LOOP:	LD	A,(DE)
 571  4F9A BE           	CP	(HL)
 572  4F9B 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 573  4F9D 13           	INC	DE
 574  4F9E 23           	INC	HL
 575  4F9F A7           	AND	A
 576  4FA0 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 577  4FA2 5E           	LD	E,(HL)
 578  4FA3 23           	INC	HL
 579  4FA4 56           	LD	D,(HL)
 580  4FA5 E1           	POP	HL		; routine address
 581  4FA6 CD F2 4F     	CALL	GETPREVCHAR
 582  4FA9 CD BB 4F     	CALL	.CALLDE		; Call routine
 583  4FAC A7           	AND	A
 584  4FAD C9           	RET
 585  4FAE
 586  4FAE              .TONEXTCMD:
 587  4FAE 0E FF        	LD	C,0FFH
 588  4FB0 AF           	XOR	A
 589  4FB1 ED B1        	CPIR			; Skip to end of instruction name
 590  4FB3 23           	INC	HL
 591  4FB4 23           	INC	HL		; Skip address
 592  4FB5 BE           	CP	(HL)
 593  4FB6 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 594  4FB8 E1           	POP	HL
 595  4FB9              .CMDNOTRECOGNIZED:
 596  4FB9 37               SCF
 597  4FBA C9           	RET
 598  4FBB
 599  4FBB              .CALLDE:
 600  4FBB D5           	PUSH	DE
 601  4FBC C9           	RET
 602  4FBD
 603  4FBD              ;---------------------------
 604  4FBD
 605  4FBD              GETSTRPNT:
 606  4FBD              ; OUT:
 607  4FBD              ; HL = String Address
 608  4FBD              ; B  = Lenght
 609  4FBD
 610  4FBD 2A F8 F7             LD      HL,(USR)
 611  4FC0 46                   LD      B,(HL)
 612  4FC1 23                   INC     HL
 613  4FC2 5E                   LD      E,(HL)
 614  4FC3 23                   INC     HL
 615  4FC4 56                   LD      D,(HL)
 616  4FC5 EB                   EX      DE,HL
 617  4FC6 C9                   RET
 618  4FC7
 619  4FC7              EVALTXTPARAM:
 620  4FC7 CD E8 4F     	CALL	CHKCHAR
 621  4FCA 28           	DEFB	"("             ; Check for (
 622  4FCB DD 21 64 4C  	LD	IX,FRMEVL
 623  4FCF CD 59 01     	CALL	CALBAS		; Evaluate expression
 624  4FD2 3A 63 F6             LD      A,(VALTYP)
 625  4FD5 FE 03                CP      3               ; Text type?
 626  4FD7 C2 FA 4F             JP      NZ,TYPE_MISMATCH
 627  4FDA E5                   PUSH	HL
 628  4FDB DD 21 D0 67          LD	IX,FRESTR         ; Free the temporary string
 629  4FDF CD 59 01             CALL	CALBAS
 630  4FE2 E1                   POP	HL
 631  4FE3 CD E8 4F     	CALL	CHKCHAR
 632  4FE6 29           	DEFB	")"             ; Check for )
 633  4FE7 C9                   RET
 634  4FE8
 635  4FE8
 636  4FE8              CHKCHAR:
 637  4FE8 CD F2 4F     	CALL	GETPREVCHAR	; Get previous basic char
 638  4FEB E3           	EX	(SP),HL
 639  4FEC BE           	CP	(HL) 	        ; Check if good char
 640  4FED 20 0F        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 641  4FEF 23           	INC	HL
 642  4FF0 E3           	EX	(SP),HL
 643  4FF1 23           	INC	HL		; Get next basic char
 644  4FF2
 645  4FF2              GETPREVCHAR:
 646  4FF2 2B           	DEC	HL
 647  4FF3 DD 21 66 46  	LD	IX,CHRGTR
 648  4FF7 C3 59 01     	JP      CALBAS
 649  4FFA
 650  4FFA
 651  4FFA              TYPE_MISMATCH:
 652  4FFA 1E 0D            LD E, 13 ; Type mismatch
 653  4FFC 18 02            JR THROW_ERROR
 654  4FFE
 655  4FFE              SYNTAX_ERROR:
 656  4FFE 1E 02            LD E, 2 ; Syntax error
 657  5000              THROW_ERROR:
 658  5000 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 659  5004 C3 59 01     	JP	CALBAS
 660  5007
 661  5007              ;---------------------------
 662  5007
 663  5007              ; *******************************************************************************************************
 664  5007              ; function to handle CALL MEMCPY basic extension
 665  5007              ; _MEMCPY ( INT source,
 666  5007              ;			INT destination,
 667  5007              ;			INT count,
 668  5007              ; will put ram in page 0 also, page 1 is already there
 669  5007              MEMCPY:
 670  5007              	; opening (
 671  5007 CD E8 4F     	CALL CHKCHAR
 672  500A 28           	DB '('
 673  500B              	; get source address
 674  500B DD 21 2F 54  	LD IX, FRMQNT
 675  500F CD 59 01     	CALL CALBAS
 676  5012 D5           	PUSH DE
 677  5013              	; comma
 678  5013 CD E8 4F     	CALL CHKCHAR
 679  5016 2C           	DB ','
 680  5017              	; get destination address
 681  5017 DD 21 2F 54  	LD IX, FRMQNT
 682  501B CD 59 01     	CALL CALBAS
 683  501E D5           	PUSH DE
 684  501F              	; comma
 685  501F CD E8 4F     	CALL CHKCHAR
 686  5022 2C           	DB ','
 687  5023              	; get length
 688  5023 DD 21 2F 54  	LD IX, FRMQNT
 689  5027 CD 59 01     	CALL CALBAS
 690  502A D5           	PUSH DE
 691  502B              	; ending )
 692  502B CD E8 4F     	CALL CHKCHAR
 693  502E 29           	DB ')'
 694  502F
 695  502F              	; save position
 696  502F E5           	PUSH HL
 697  5030 DD E1        	POP IX
 698  5032
 699  5032 C1           	POP BC ; count
 700  5033 D1           	POP DE ; destination
 701  5034 E1           	POP HL ; source
 702  5035 D9           	EXX
 703  5036              	; enable page 0
 704  5036 FD 21 3D 50  	LD IY, .RET
 705  503A C3 BF 4E     	JP ENABLE_PAGE0
 706  503D              .RET:
 707  503D FB           	EI
 708  503E D9           	EXX
 709  503F ED B0        	LDIR
 710  5041 D1               POP DE
 711  5042 C1               POP BC
 712  5043 CD 36 4E         CALL RESTORE_PAGE_INFO
 713  5046 DD E5        	PUSH IX
 714  5048 E1           	POP HL
 715  5049 C9           	RET
 716  504A              ; *******************************************************************************************************
 717  504A
 718  504A              ; *******************************************************************************************************
 719  504A              ; function to handle CALL FILVRM basic extension
 720  504A              ; FILVRM ( INT offset,
 721  504A              ;		   INT count,
 722  504A              ;		   BYTE value,
 723  504A              ;		   BYTE wait_vsync) >0 = true
 724  504A              ; wait_vsync will issue HALT before copying
 725  504A              FILVRM:
 726  504A              	; opening (
 727  504A CD E8 4F     	CALL CHKCHAR
 728  504D 28           	DB '('
 729  504E              	; get offset address
 730  504E DD 21 2F 54  	LD IX, FRMQNT
 731  5052 CD 59 01     	CALL CALBAS
 732  5055 D5           	PUSH DE
 733  5056              	; comma
 734  5056 CD E8 4F     	CALL CHKCHAR
 735  5059 2C           	DB ','
 736  505A              	; get count
 737  505A DD 21 2F 54  	LD IX, FRMQNT
 738  505E CD 59 01     	CALL CALBAS
 739  5061 D5           	PUSH DE
 740  5062              	; comma
 741  5062 CD E8 4F     	CALL CHKCHAR
 742  5065 2C           	DB ','
 743  5066              	; get value
 744  5066 DD 21 1C 52  	LD IX, GETBYT
 745  506A CD 59 01     	CALL CALBAS
 746  506D F5           	PUSH AF
 747  506E              	; comma
 748  506E CD E8 4F     	CALL CHKCHAR
 749  5071 2C           	DB ','
 750  5072              	; get vsync wait
 751  5072 DD 21 1C 52  	LD IX, GETBYT
 752  5076 CD 59 01     	CALL CALBAS
 753  5079 F5           	PUSH AF
 754  507A              	; ending )
 755  507A CD E8 4F     	CALL CHKCHAR
 756  507D 29           	DB ')'
 757  507E
 758  507E FB               EI
 759  507F              	; save position
 760  507F E5           	PUSH HL
 761  5080 DD E1        	POP IX
 762  5082
 763  5082              	; syntax ok
 764  5082              	; wait for vsync if needed
 765  5082 F1           	POP AF
 766  5083 B7           	OR A
 767  5084 28 01        	JR Z, .L1
 768  5086 76           	HALT
 769  5087
 770  5087              .L1:
 771  5087 F1               POP AF ; value
 772  5088 C1               POP BC ; count
 773  5089 E1               POP HL ; offset
 774  508A CD 56 00         CALL BIOS_FILVRM
 775  508D
 776  508D              .L3:
 777  508D DD E5        	PUSH IX
 778  508F E1           	POP HL
 779  5090 C9           	RET
 780  5091              ; *******************************************************************************************************
 781  5091
 782  5091              ; *******************************************************************************************************
 783  5091              ; function to handle CALL FILRAM basic extension
 784  5091              ; FILRAM ( INT start address,
 785  5091              ;		   INT count,
 786  5091              ;		   BYTE value,
 787  5091              ; will put ram in page 0 also, page 1 is already there
 788  5091              FILRAM:
 789  5091              	; opening (
 790  5091 CD E8 4F     	CALL CHKCHAR
 791  5094 28           	DB '('
 792  5095              	; get start address
 793  5095 DD 21 2F 54  	LD IX, FRMQNT
 794  5099 CD 59 01     	CALL CALBAS
 795  509C D5           	PUSH DE
 796  509D              	; comma
 797  509D CD E8 4F     	CALL CHKCHAR
 798  50A0 2C           	DB ','
 799  50A1              	; get count
 800  50A1 DD 21 2F 54  	LD IX, FRMQNT
 801  50A5 CD 59 01     	CALL CALBAS
 802  50A8 D5           	PUSH DE
 803  50A9              	; comma
 804  50A9 CD E8 4F     	CALL CHKCHAR
 805  50AC 2C           	DB ','
 806  50AD              	; get value
 807  50AD DD 21 1C 52  	LD IX, GETBYT
 808  50B1 CD 59 01     	CALL CALBAS
 809  50B4 F5           	PUSH AF
 810  50B5              	; ending )
 811  50B5 CD E8 4F     	CALL CHKCHAR
 812  50B8 29           	DB ')'
 813  50B9
 814  50B9              	; save position
 815  50B9 E5           	PUSH HL
 816  50BA DD E1        	POP IX
 817  50BC
 818  50BC D1           	POP DE ; actually AF
 819  50BD C1           	POP BC ; count
 820  50BE E1           	POP HL ; start address
 821  50BF 78           	LD A, B
 822  50C0 B7           	OR A
 823  50C1 20 0A        	JR NZ, .L1 ; >=256 bytes to fill
 824  50C3 B1           	OR C
 825  50C4 28 19        	JR Z, .EXIT ; 0 bytes to fill, skip
 826  50C6 79           	LD A, C
 827  50C7 3D           	DEC A
 828  50C8 20 03        	JR NZ, .L1 ; ; >1 byte to fill
 829  50CA              	; one byte to fill
 830  50CA 72           	LD (HL), D
 831  50CB 18 12        	JR .EXIT
 832  50CD              .L1:
 833  50CD D9           	EXX
 834  50CE              	; enable page 0
 835  50CE FD 21 D5 50  	LD IY, .RET
 836  50D2 C3 BF 4E     	JP ENABLE_PAGE0
 837  50D5              .RET:
 838  50D5 FB           	EI
 839  50D6 D9           	EXX
 840  50D7 CD E3 50     	CALL .FILLVALUE
 841  50DA D1               POP DE
 842  50DB C1               POP BC
 843  50DC CD 36 4E         CALL RESTORE_PAGE_INFO
 844  50DF              .EXIT:
 845  50DF DD E5        	PUSH IX
 846  50E1 E1           	POP HL
 847  50E2 C9           	RET
 848  50E3
 849  50E3              .FILLVALUE:
 850  50E3 72               LD (HL), D
 851  50E4 54               LD D, H
 852  50E5 5D               LD E, L
 853  50E6 13               INC DE
 854  50E7 0B               DEC BC
 855  50E8 ED B0            LDIR
 856  50EA C9               RET
 857  50EB              ; *******************************************************************************************************
 858  50EB
 859  50EB              ; *******************************************************************************************************
 860  50EB              ; function to handle CALL GENCAL basic extension
 861  50EB              ; GENCAL ( INT fn_addr, = address of the function to call
 862  50EB              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 863  50EB              ; output values of reristers will also be stored at reg_list_ptr
 864  50EB              GENCAL_VAR_SP:
 865  50EB 00 00            DW 0
 866  50ED              GENCAL_VAR_SP2:
 867  50ED 00 00            DW 0
 868  50EF              GENCAL:
 869  50EF              	; opening (
 870  50EF CD E8 4F     	CALL CHKCHAR
 871  50F2 28           	DB '('
 872  50F3              	; get function address
 873  50F3 DD 21 2F 54  	LD IX, FRMQNT
 874  50F7 CD 59 01     	CALL CALBAS
 875  50FA D5           	PUSH DE
 876  50FB              	; comma
 877  50FB CD E8 4F     	CALL CHKCHAR
 878  50FE 2C           	DB ','
 879  50FF              	; get pointer to register list
 880  50FF DD 21 2F 54  	LD IX, FRMQNT
 881  5103 CD 59 01     	CALL CALBAS
 882  5106 D5           	PUSH DE
 883  5107              	; ending )
 884  5107 CD E8 4F     	CALL CHKCHAR
 885  510A 29           	DB ')'
 886  510B
 887  510B              	; save BASIC token position
 888  510B E5           	PUSH HL
 889  510C D9               EXX
 890  510D E1           	POP HL ; HL'=next basic token
 891  510E D9               EXX
 892  510F
 893  510F E1               POP HL ; get pointer to register values
 894  5110 ED 73 EB 50      LD (GENCAL_VAR_SP), SP
 895  5114 F3               DI
 896  5115 F9               LD SP, HL
 897  5116 F1               POP AF
 898  5117 C1               POP BC
 899  5118 D1               POP DE
 900  5119 E1               POP HL
 901  511A DD E1            POP IX
 902  511C FD E1            POP IY
 903  511E D9               EXX
 904  511F ED 73 ED 50      LD (GENCAL_VAR_SP2), SP
 905  5123 ED 7B EB 50      LD SP, (GENCAL_VAR_SP)
 906  5127 FB               EI
 907  5128 D1               POP DE ; get function to call
 908  5129 E5               PUSH HL
 909  512A CD 45 51         CALL .EXXDECALL
 910  512D F3               DI
 911  512E ED 73 EB 50      LD (GENCAL_VAR_SP), SP
 912  5132 ED 7B ED 50      LD SP, (GENCAL_VAR_SP2)
 913  5136 FD E5            PUSH IY
 914  5138 DD E5            PUSH IX
 915  513A E5               PUSH HL
 916  513B D5               PUSH DE
 917  513C C5               PUSH BC
 918  513D F5               PUSH AF
 919  513E ED 7B EB 50      LD SP, (GENCAL_VAR_SP)
 920  5142 FB               EI
 921  5143 E1               POP HL
 922  5144 C9           	RET
 923  5145
 924  5145              .EXXDECALL:
 925  5145 D5               PUSH DE
 926  5146 D9               EXX
 927  5147 C9               RET
 928  5148              ; *******************************************************************************************************
 929  5148
 930  5148              ; *******************************************************************************************************
 931  5148              ; function to handle CALL MEMVRM basic extension
 932  5148              ; copies from RAM to VRAM
 933  5148              ; _MEMVRM ( INT source,
 934  5148              ;			INT destination,
 935  5148              ;			INT count,
 936  5148              ;			BYTE wait_vsync) >0 = true
 937  5148              ; will put ram in page 0 also, page 1 is already there
 938  5148              ; wait_vsync will issue HALT before copying
 939  5148              MEMVRM:
 940  5148              	; opening (
 941  5148 CD E8 4F     	CALL CHKCHAR
 942  514B 28           	DB '('
 943  514C              	; get source address
 944  514C DD 21 2F 54  	LD IX, FRMQNT
 945  5150 CD 59 01     	CALL CALBAS
 946  5153 D5           	PUSH DE
 947  5154              	; comma
 948  5154 CD E8 4F     	CALL CHKCHAR
 949  5157 2C           	DB ','
 950  5158              	; get destination address
 951  5158 DD 21 2F 54  	LD IX, FRMQNT
 952  515C CD 59 01     	CALL CALBAS
 953  515F D5           	PUSH DE
 954  5160              	; comma
 955  5160 CD E8 4F     	CALL CHKCHAR
 956  5163 2C           	DB ','
 957  5164              	; get length
 958  5164 DD 21 2F 54  	LD IX, FRMQNT
 959  5168 CD 59 01     	CALL CALBAS
 960  516B D5           	PUSH DE
 961  516C              	; comma
 962  516C CD E8 4F     	CALL CHKCHAR
 963  516F 2C           	DB ','
 964  5170              	; get vsync wait
 965  5170 DD 21 1C 52  	LD IX, GETBYT
 966  5174 CD 59 01     	CALL CALBAS
 967  5177 F5           	PUSH AF
 968  5178              	; ending )
 969  5178 CD E8 4F     	CALL CHKCHAR
 970  517B 29           	DB ')'
 971  517C
 972  517C                  ; save position in BASIC text
 973  517C E5           	PUSH HL
 974  517D DD E1        	POP IX
 975  517F
 976  517F F1           	POP AF ; wait vsync
 977  5180 B7           	OR A
 978  5181 28 03        	JR Z, .L1
 979  5183 FB               EI
 980  5184 76           	HALT
 981  5185 F3           	DI
 982  5186              .L1:
 983  5186              	; pop LDIR parameters and store away for later
 984  5186 C1           	POP BC ; count
 985  5187 D1           	POP DE ; vram destination
 986  5188 E1           	POP HL ; ram source
 987  5189 D9           	EXX
 988  518A FD 21 91 51   	LD IY, .RET
 989  518E C3 BF 4E     	JP ENABLE_PAGE0
 990  5191              .RET:
 991  5191 FB           	EI
 992  5192 D9           	EXX
 993  5193 CD 9F 51     	CALL .LDIRVM
 994  5196 D1               POP DE
 995  5197 C1               POP BC
 996  5198 CD 36 4E         CALL RESTORE_PAGE_INFO
 997  519B DD E5        	PUSH IX
 998  519D E1           	POP HL
 999  519E C9           	RET
1000  519F
1001  519F              .LDIRVM:
1002  519F EB           	EX DE, HL
1003  51A0 CD F4 4D     	CALL SETWRT_LOCAL
1004  51A3 EB           	EX DE, HL
1005  51A4 78           	LD A, B
1006  51A5 B7           	OR A
1007  51A6 28 0D        	JR Z, .L3
1008  51A8 C5           	PUSH BC
1009  51A9 0E 98        	LD C, #98
1010  51AB              .L2:
1011  51AB 50           	LD D, B
1012  51AC 06 00        	LD B, 0
1013  51AE CD BB 51     	CALL .BBYTECOPY
1014  51B1 42           	LD B, D
1015  51B2 10 F7        	DJNZ .L2
1016  51B4 C1           	POP BC
1017  51B5              .L3:
1018  51B5 79           	LD A, C
1019  51B6 B7           	OR A
1020  51B7 C8           	RET Z
1021  51B8 41           	LD B, C
1022  51B9 0E 98        	LD C, #98
1023  51BB              .BBYTECOPY:
1024  51BB ED A3        	OUTI
1025  51BD C2 BB 51     	JP	NZ, .BBYTECOPY
1026  51C0 C9           	RET
1027  51C1              ; *******************************************************************************************************
1028  51C1
1029  51C1              ; *******************************************************************************************************
1030  51C1              ; function to handle CALL VRMMEM basic extension
1031  51C1              ; copies from RAM to VRAM
1032  51C1              ; _VRMMEM ( INT source,
1033  51C1              ;			INT destination,
1034  51C1              ;			INT count
1035  51C1              ; will put ram in page 0 also, page 1 is already there
1036  51C1              VRMMEM:
1037  51C1              	; opening (
1038  51C1 CD E8 4F     	CALL CHKCHAR
1039  51C4 28           	DB '('
1040  51C5              	; get source address
1041  51C5 DD 21 2F 54  	LD IX, FRMQNT
1042  51C9 CD 59 01     	CALL CALBAS
1043  51CC D5           	PUSH DE
1044  51CD              	; comma
1045  51CD CD E8 4F     	CALL CHKCHAR
1046  51D0 2C           	DB ','
1047  51D1              	; get destination address
1048  51D1 DD 21 2F 54  	LD IX, FRMQNT
1049  51D5 CD 59 01     	CALL CALBAS
1050  51D8 D5           	PUSH DE
1051  51D9              	; comma
1052  51D9 CD E8 4F     	CALL CHKCHAR
1053  51DC 2C           	DB ','
1054  51DD              	; get length
1055  51DD DD 21 2F 54  	LD IX, FRMQNT
1056  51E1 CD 59 01     	CALL CALBAS
1057  51E4 D5           	PUSH DE
1058  51E5              	; ending )
1059  51E5 CD E8 4F     	CALL CHKCHAR
1060  51E8 29           	DB ')'
1061  51E9
1062  51E9                  ; save position in BASIC text
1063  51E9 E5           	PUSH HL
1064  51EA DD E1        	POP IX
1065  51EC
1066  51EC C1           	POP BC ; count
1067  51ED D1           	POP DE ; destination
1068  51EE E1           	POP HL ; source
1069  51EF D9           	EXX
1070  51F0 FD 21 F7 51  	LD IY, .RET
1071  51F4 C3 BF 4E     	JP ENABLE_PAGE0
1072  51F7              .RET:
1073  51F7 FB           	EI
1074  51F8 D9           	EXX
1075  51F9 CD 05 52     	CALL .LDIRMV
1076  51FC D1               POP DE
1077  51FD C1               POP BC
1078  51FE CD 36 4E         CALL RESTORE_PAGE_INFO
1079  5201 DD E5        	PUSH IX
1080  5203 E1           	POP HL
1081  5204 C9           	RET
1082  5205
1083  5205              .LDIRMV:
1084  5205              	; set VRAM address *exactly* as in ROM, otherwise corruption
1085  5205 7D           	LD	A, L
1086  5206 F3           	DI
1087  5207 D3 99        	OUT	(099H), A
1088  5209 7C           	LD	A, H
1089  520A E6 3F        	AND	03FH
1090  520C D3 99        	OUT	(099H), A
1091  520E FB           	EI
1092  520F              	;EX (SP), HL
1093  520F              	;EX (SP), HL
1094  520F              	;NOP
1095  520F              	;NOP
1096  520F              .L4:
1097  520F DB 98            IN A, (#98)
1098  5211 12           	LD (DE), A
1099  5212 13               INC DE
1100  5213 0B               DEC BC
1101  5214 79               LD A, C
1102  5215 B0               OR B
1103  5216 20 F7            JR NZ, .L4
1104  5218 C9               RET
1105  5219              ; *******************************************************************************************************
1106  5219
1107  5219              ; *******************************************************************************************************
1108  5219              ; H.TIMI function
1109  5219              MBGE_HTIMI:
1110  5219               EXPORT MBGE_HTIMI
1111  5219 F5           	PUSH AF
1112  521A
1113  521A CD CF 4E     	CALL SPRATR_UPDATE
1114  521D
1115  521D               IFNDEF EXCLUDE_SOUND_PLAYER
1116  521D 3A F5 4C     	LD A, (SOUND_ENABLED)
1117  5220 B7           	OR A
1118  5221 28 2A        	JR Z, .EXIT
1119  5223
1120  5223              	; enable page 2
1121  5223 3E 02            LD A, 2
1122  5225 CD FF 4D         CALL GET_PAGE_INFO
1123  5228 C5               PUSH BC
1124  5229 D5               PUSH DE
1125  522A 3A 43 F3         LD A, (RAMAD2)
1126  522D 26 80            LD H, 080H
1127  522F CD 46 4E         CALL LOCAL_ENASLT
1128  5232              	; enable page 0
1129  5232 AF               XOR A
1130  5233 CD FF 4D         CALL GET_PAGE_INFO
1131  5236 C5               PUSH BC
1132  5237 D5               PUSH DE
1133  5238 3A 41 F3         LD A, (RAMAD0)
1134  523B 26 00            LD H, 0
1135  523D CD 46 4E         CALL LOCAL_ENASLT
1136  5240
1137  5240 CD 31 42     	CALL PLY_AKG_PLAY
1138  5243
1139  5243              	; restore page 0
1140  5243 D1               POP DE
1141  5244 C1               POP BC
1142  5245 CD 36 4E         CALL RESTORE_PAGE_INFO
1143  5248              	; restore page 2
1144  5248 D1               POP DE
1145  5249 C1               POP BC
1146  524A CD 36 4E         CALL RESTORE_PAGE_INFO
1147  524D               ENDIF
1148  524D
1149  524D              .EXIT:
1150  524D F1           	POP AF
1151  524E C3 EE 4C     	JP ORIG.HTIMI
1152  5251              ; *******************************************************************************************************
1153  5251
1154  5251              ; *******************************************************************************************************
1155  5251              ; interrupt handler when page 0 enabled
1156  5251              VBLANK:
1157  5251              	EXPORT VBLANK
1158  5251
1159  5251 F5               PUSH AF
1160  5252              	; is VDP originator ?
1161  5252 DB 99        	IN	A, (099H)
1162  5254 A7           	AND	A
1163  5255 F2 7B 52     	JP P, .EXIT
1164  5258
1165  5258               IFNDEF EXCLUDE_SOUND_PLAYER
1166  5258 3A F5 4C     	LD A, (SOUND_ENABLED)
1167  525B B7           	OR A
1168  525C 28 1D        	JR Z, .EXIT
1169  525E
1170  525E C5               PUSH BC
1171  525F D5               PUSH DE
1172  5260 E5               PUSH HL
1173  5261 08               EX AF, AF'
1174  5262 D9               EXX
1175  5263 F5               PUSH AF
1176  5264 C5               PUSH BC
1177  5265 D5               PUSH DE
1178  5266 E5               PUSH HL
1179  5267 DD E5            PUSH IX
1180  5269 FD E5            PUSH IY
1181  526B
1182  526B CD 31 42     	CALL PLY_AKG_PLAY
1183  526E
1184  526E FD E1            POP IY
1185  5270 DD E1            POP IX
1186  5272 E1               POP HL
1187  5273 D1               POP DE
1188  5274 C1               POP BC
1189  5275 F1               POP AF
1190  5276 08               EX AF, AF'
1191  5277 D9               EXX
1192  5278 E1               POP HL
1193  5279 D1               POP DE
1194  527A C1               POP BC
1195  527B               ENDIF
1196  527B
1197  527B              .EXIT:
1198  527B F1           	POP AF
1199  527C FB           	EI
1200  527D ED 4D        	RETI
1201  527F              ; *******************************************************************************************************
1202  527F
1203  527F               IFNDEF EXCLUDE_SOUND_PLAYER
1204  527F              ; *******************************************************************************************************
1205  527F              ; function to handle CALL SNDPLYINIT basic extension
1206  527F              ; initializes sound player
1207  527F              ; _SNDPLYINIT ( INT music_offset,
1208  527F              ;				INT sfx_offset, can be -1 if no SFX
1209  527F              ; will put ram in page 0 also, page 1 is already there
1210  527F              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1211  527F              SNDPLYINIT:
1212  527F              	; opening (
1213  527F CD E8 4F     	CALL CHKCHAR
1214  5282 28           	DB '('
1215  5283              	; get music address
1216  5283 DD 21 2F 54  	LD IX, FRMQNT
1217  5287 CD 59 01     	CALL CALBAS
1218  528A D5           	PUSH DE
1219  528B              	; comma
1220  528B CD E8 4F     	CALL CHKCHAR
1221  528E 2C           	DB ','
1222  528F              	; get sfx address
1223  528F DD 21 2F 54  	LD IX, FRMQNT
1224  5293 CD 59 01     	CALL CALBAS
1225  5296 D5           	PUSH DE
1226  5297              	; ending )
1227  5297 CD E8 4F     	CALL CHKCHAR
1228  529A 29           	DB ')'
1229  529B
1230  529B                  ; save position in BASIC text
1231  529B 44           	LD B, H
1232  529C 4D           	LD C, L
1233  529D
1234  529D              	; pop LDIR parameters and store away for later
1235  529D D1           	POP DE ; sfx address
1236  529E E1           	POP HL ; music address
1237  529F C5           	PUSH BC ; basic text location
1238  52A0 D9           	EXX
1239  52A1 FD 21 A8 52  	LD IY, .RET
1240  52A5 C3 BF 4E     	JP ENABLE_PAGE0
1241  52A8              .RET:
1242  52A8 D9           	EXX
1243  52A9
1244  52A9 D5           	PUSH DE
1245  52AA AF           	XOR A
1246  52AB              	; HL = music location
1247  52AB CD 60 41     	CALL PLY_AKG_INIT
1248  52AE 3E 01        	LD A, 1
1249  52B0 32 F3 4C     	LD (MUSIC_INIT_STATUS), A
1250  52B3
1251  52B3 E1           	POP HL ; SFX
1252  52B4              	; check if SFX address -1
1253  52B4 23           	INC HL
1254  52B5 7D           	LD A, L
1255  52B6 B4           	OR H
1256  52B7 28 09        	JR Z,.L1
1257  52B9 2B           	DEC HL
1258  52BA CD 1B 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1259  52BD 3E 01        	LD A, 1
1260  52BF 32 F4 4C     	LD (SFX_INIT_STATUS), A
1261  52C2              .L1:
1262  52C2 D1               POP DE
1263  52C3 C1               POP BC
1264  52C4 CD 36 4E         CALL RESTORE_PAGE_INFO
1265  52C7
1266  52C7 E1           	POP HL
1267  52C8 C9           	RET
1268  52C9              ; *******************************************************************************************************
1269  52C9
1270  52C9              ; *******************************************************************************************************
1271  52C9              ; function to handle CALL SNDPLYON basic extension
1272  52C9              ; enables sound player
1273  52C9              ; _SNDPLYON
1274  52C9              ; sets SOUND_ENABLED variable to 1 if init call was done
1275  52C9              ; if not throws out of data error
1276  52C9              SNDPLYON:
1277  52C9 3A F3 4C     	LD A, (MUSIC_INIT_STATUS)
1278  52CC B7           	OR A
1279  52CD 20 05        	JR NZ, .L1
1280  52CF              	; player not initialized, throw error
1281  52CF 1E 04        	LD E, 04 ; Out of DATA
1282  52D1 C3 00 50     	JP THROW_ERROR
1283  52D4              .L1:
1284  52D4 32 F5 4C     	LD (SOUND_ENABLED), A
1285  52D7              	; disable key click
1286  52D7 AF           	XOR A
1287  52D8 32 DB F3     	LD (CLIKSW), A
1288  52DB C9           	RET
1289  52DC              ; *******************************************************************************************************
1290  52DC
1291  52DC              ; *******************************************************************************************************
1292  52DC              ; function to handle CALL SNDPLYOFF basic extension
1293  52DC              ; disables sound player
1294  52DC              ; _SNDPLYOFF
1295  52DC              ; sets SOUND_ENABLED variable to 0
1296  52DC              ; calls AKG to stop music and SFX on all channels if initialized
1297  52DC              SNDPLYOFF:
1298  52DC 3A F5 4C     	LD A, (SOUND_ENABLED)
1299  52DF B7           	OR A
1300  52E0 C8           	RET Z ; already stopped
1301  52E1 AF           	XOR A
1302  52E2 32 F5 4C     	LD (SOUND_ENABLED), A
1303  52E5 E5           	PUSH HL
1304  52E6 CD 1F 42     	CALL PLY_AKG_STOP
1305  52E9 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1306  52EC B7           	OR A
1307  52ED 28 0E        	JR Z, .EXIT ; SFX not in use
1308  52EF AF           	XOR A
1309  52F0 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1310  52F3 3E 01        	LD A, 1
1311  52F5 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1312  52F8 3E 02        	LD A, 2
1313  52FA CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1314  52FD              .EXIT:
1315  52FD E1           	POP HL
1316  52FE C9           	RET
1317  52FF              ; *******************************************************************************************************
1318  52FF
1319  52FF              ; *******************************************************************************************************
1320  52FF              ; function to handle CALL SNDSFX basic extension
1321  52FF              ; plays a sound effect
1322  52FF              ; _SNDSFX ( BYTE sfx_number, >0
1323  52FF              ;			BYTE channel, = 0,1 or 2
1324  52FF              ;			BYTE inverted_volume = 0-16, 0 being full volume
1325  52FF              ; will put ram in page 0 also, page 1 is already there
1326  52FF              ; if sound off throws illegal function call
1327  52FF              ; if sfx not initialized, throws out of data
1328  52FF              SNDSFX:
1329  52FF              	; opening (
1330  52FF CD E8 4F     	CALL CHKCHAR
1331  5302 28           	DB '('
1332  5303              	; get sfx_number
1333  5303 DD 21 1C 52  	LD IX, GETBYT
1334  5307 CD 59 01     	CALL CALBAS
1335  530A D5           	PUSH DE
1336  530B              	; comma
1337  530B CD E8 4F     	CALL CHKCHAR
1338  530E 2C           	DB ','
1339  530F              	; get sfx address
1340  530F DD 21 1C 52  	LD IX, GETBYT
1341  5313 CD 59 01     	CALL CALBAS
1342  5316 D5           	PUSH DE
1343  5317              	; comma
1344  5317 CD E8 4F     	CALL CHKCHAR
1345  531A 2C           	DB ','
1346  531B              	; get inverted volume
1347  531B DD 21 1C 52  	LD IX, GETBYT
1348  531F CD 59 01     	CALL CALBAS
1349  5322 D5           	PUSH DE
1350  5323              	; ending )
1351  5323 CD E8 4F     	CALL CHKCHAR
1352  5326 29           	DB ')'
1353  5327
1354  5327 3A F5 4C     	LD A, (SOUND_ENABLED)
1355  532A B7           	OR A
1356  532B 20 05        	JR NZ, .L1
1357  532D              	; sound disabled, throw illegal function call
1358  532D 1E 05        	LD E, 5
1359  532F C3 00 50     	JP THROW_ERROR
1360  5332              .L1:
1361  5332 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1362  5335 B7           	OR A
1363  5336 20 05        	JR NZ, .L2
1364  5338              	; sfx data not initialized, throw out of data
1365  5338 1E 04        	LD E, 4
1366  533A C3 00 50     	JP THROW_ERROR
1367  533D              .L2:
1368  533D              	; pop  parameters and store away for later
1369  533D D1           	POP DE ; inverted volume
1370  533E 43           	LD B, E
1371  533F D1           	POP DE ; channel
1372  5340 4B           	LD C, E
1373  5341 D1           	POP DE
1374  5342 7B           	LD A, E
1375  5343 08           	EX AF, AF'
1376  5344 E5           	PUSH HL ; basic text location
1377  5345 D9           	EXX
1378  5346 FD 21 4D 53  	LD IY, .RET
1379  534A C3 BF 4E     	JP ENABLE_PAGE0
1380  534D              .RET:
1381  534D D9           	EXX
1382  534E 08           	EX AF, AF'
1383  534F CD 1F 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1384  5352
1385  5352 D1               POP DE
1386  5353 C1               POP BC
1387  5354 CD 36 4E         CALL RESTORE_PAGE_INFO
1388  5357
1389  5357 E1           	POP HL
1390  5358 C9           	RET
1391  5359              ; *******************************************************************************************************
1392  5359               ENDIF
1393  5359
1394  5359              ; *******************************************************************************************************
1395  5359              ; function to handle CALL SPRATRINI basic extension
1396  5359              ; initializes sprites handler
1397  5359              ; _SPRATRINI ( INT sprites_attributes_data,
1398  5359              ;			   INT update_variable_location,
1399  5359              ;			   INT sprite_flicker_enabled )
1400  5359              ; expects both locations to be in range #8000+ or throws an error
1401  5359              ; since these should be BASIC variables
1402  5359              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA and SPRFLICKER_ENABLED
1403  5359              SPRATRINI:
1404  5359              	; opening (
1405  5359 CD E8 4F     	CALL CHKCHAR
1406  535C 28           	DB '('
1407  535D              	; get address of sprite attribute table DIM SA%(3,31)
1408  535D DD 21 2F 54  	LD IX, FRMQNT
1409  5361 CD 59 01     	CALL CALBAS
1410  5364 D5           	PUSH DE
1411  5365              	; comma
1412  5365 CD E8 4F     	CALL CHKCHAR
1413  5368 2C           	DB ','
1414  5369              	; get address of sprite attribute table DIM SA%(3,31)
1415  5369 DD 21 2F 54  	LD IX, FRMQNT
1416  536D CD 59 01     	CALL CALBAS
1417  5370 D5           	PUSH DE
1418  5371              	; comma
1419  5371 CD E8 4F     	CALL CHKCHAR
1420  5374 2C           	DB ','
1421  5375              	; get flicker enabled flag
1422  5375 DD 21 2F 54  	LD IX, FRMQNT
1423  5379 CD 59 01     	CALL CALBAS
1424  537C D5           	PUSH DE
1425  537D              	; ending )
1426  537D CD E8 4F     	CALL CHKCHAR
1427  5380 29           	DB ')'
1428  5381
1429  5381 D1           	POP DE ; get flicker flag
1430  5382 7A           	LD A, D
1431  5383 B3           	OR E
1432  5384 32 FB 4C     	LD (SPRFLICKER_ENABLED), A
1433  5387
1434  5387 D1           	POP DE ; update variable location
1435  5388 CB 7A        	BIT 7, D ; is address >= &h8000
1436  538A 20 05        	JR NZ, .L1
1437  538C 1E 05        	LD E, 5 ; illegal function call
1438  538E C3 00 50     	JP THROW_ERROR
1439  5391              .L1:
1440  5391 ED 53 F7 4C  	LD (SPRATR_UPDATE_FLAG), DE
1441  5395 D1           	POP DE ; address of sprite attribute table
1442  5396 CB 7A        	BIT 7, D ; is address >= &h8000
1443  5398 20 05        	JR NZ, .L2
1444  539A 1E 05        	LD E, 5 ; illegal function call
1445  539C C3 00 50     	JP THROW_ERROR
1446  539F              .L2:
1447  539F ED 53 F9 4C  	LD (SPRATR_DATA), DE
1448  53A3 3E 01        	LD A, 1
1449  53A5 32 F6 4C     	LD (SPRATR_INIT_STATUS), A
1450  53A8 C9           	RET
1451  53A9              ; *******************************************************************************************************
1452  53A9
1453  53A9              ; *******************************************************************************************************
1454  53A9              ; function to handle CALL SPRSET basic extension
1455  53A9              ; sets position, and optionally pattern and color of sprite
1456  53A9              ; _SPRSET ( BYTE sprite_num , valid 0-31
1457  53A9              ;			INT x,
1458  53A9              ;			INT y,
1459  53A9              ;			INT pattern, valid 0-31, otherwise ignored
1460  53A9              ;			INT color, valid 0-15, otherwise ignored
1461  53A9              SPRSET:
1462  53A9 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1463  53AC B7           	OR A
1464  53AD 20 05        	JR NZ, .L1
1465  53AF 1E 05        	LD E, 5 ; illegal function call
1466  53B1 C3 00 50     	JP THROW_ERROR
1467  53B4              .L1:
1468  53B4              	; opening (
1469  53B4 CD E8 4F     	CALL CHKCHAR
1470  53B7 28           	DB '('
1471  53B8              	; get sprite number
1472  53B8 DD 21 1C 52  	LD IX, GETBYT
1473  53BC CD 59 01     	CALL CALBAS
1474  53BF F5           	PUSH AF
1475  53C0              	; comma
1476  53C0 CD E8 4F     	CALL CHKCHAR
1477  53C3 2C           	DB ','
1478  53C4              	; get x
1479  53C4 DD 21 2F 54  	LD IX, FRMQNT
1480  53C8 CD 59 01     	CALL CALBAS
1481  53CB D5           	PUSH DE
1482  53CC              	; comma
1483  53CC CD E8 4F     	CALL CHKCHAR
1484  53CF 2C           	DB ','
1485  53D0              	; get y
1486  53D0 DD 21 2F 54  	LD IX, FRMQNT
1487  53D4 CD 59 01     	CALL CALBAS
1488  53D7 D5           	PUSH DE
1489  53D8              	; comma
1490  53D8 CD E8 4F     	CALL CHKCHAR
1491  53DB 2C           	DB ','
1492  53DC              	; get pattern
1493  53DC DD 21 2F 54  	LD IX, FRMQNT
1494  53E0 CD 59 01     	CALL CALBAS
1495  53E3 D5           	PUSH DE
1496  53E4              	; comma
1497  53E4 CD E8 4F     	CALL CHKCHAR
1498  53E7 2C           	DB ','
1499  53E8              	; get color
1500  53E8 DD 21 2F 54  	LD IX, FRMQNT
1501  53EC CD 59 01     	CALL CALBAS
1502  53EF D5           	PUSH DE
1503  53F0              	; ending )
1504  53F0 CD E8 4F     	CALL CHKCHAR
1505  53F3 29           	DB ')'
1506  53F4
1507  53F4                  ; save position in BASIC text
1508  53F4 E5           	PUSH HL
1509  53F5 DD E1        	POP IX
1510  53F7
1511  53F7 C1           	POP BC ; color
1512  53F8 D1           	POP DE ; pattern
1513  53F9 D9           	EXX
1514  53FA C1           	POP BC ; y
1515  53FB D1           	POP DE ; x
1516  53FC F1           	POP AF ; sprite number
1517  53FD FE 20        	CP 32
1518  53FF 38 05        	JR C, .L2
1519  5401 1E 05        	LD E, 5 ; illegal function call
1520  5403 C3 00 50     	JP THROW_ERROR
1521  5406              .L2:
1522  5406              	; find location in sprite attributes table
1523  5406 87          > ADD A, A
1523  5407 87          > ADD A, A
1523  5408 87          > ADD A, A
1524  5409 D5           	PUSH DE
1525  540A 16 00        	LD D, 0
1526  540C 5F           	LD E, A
1527  540D 2A F9 4C     	LD HL, (SPRATR_DATA)
1528  5410 19           	ADD HL, DE
1529  5411 D1           	POP DE
1530  5412              	; set y
1531  5412 71           	LD (HL), C
1532  5413 23           	INC HL
1533  5414 70           	LD (HL), B
1534  5415 23           	INC HL
1535  5416              	; set x
1536  5416 73           	LD (HL), E
1537  5417 23           	INC HL
1538  5418 72           	LD (HL), D
1539  5419 23           	INC HL
1540  541A E5           	PUSH HL
1541  541B D9           	EXX
1542  541C E1           	POP HL
1543  541D              	; check if 0<=pattern<32
1544  541D 7A           	LD A, D
1545  541E B7           	OR A
1546  541F 20 0B        	JR NZ, .L3
1547  5421 7D           	LD A, L
1548  5422 FE 20        	CP 32
1549  5424 30 06        	JR NC, .L3
1550  5426              	; set pattern
1551  5426 73           	LD (HL), E
1552  5427 23           	INC HL
1553  5428 72           	LD (HL), D
1554  5429 23           	INC HL
1555  542A 18 02        	JR .L4
1556  542C              .L3:
1557  542C              	; skip pattern
1558  542C 23          > INC HL
1558  542D 23          > INC HL
1559  542E              .L4:
1560  542E              	; check if 0<=color<16
1561  542E 78           	LD A, B
1562  542F B7           	OR A
1563  5430 20 08        	JR NZ, .L5
1564  5432 79           	LD A, C
1565  5433 FE 10        	CP 16
1566  5435 30 03        	JR NC, .L5
1567  5437              	; set color
1568  5437 71           	LD (HL), C
1569  5438 23           	INC HL
1570  5439 70           	LD (HL), B
1571  543A
1572  543A              .L5:
1573  543A DD E5        	PUSH IX
1574  543C E1           	POP HL
1575  543D C9           	RET
1576  543E              ; *******************************************************************************************************
1577  543E
1578  543E              ; *******************************************************************************************************
1579  543E              ; function sets sprite location based on initial coordinates and offset provided
1580  543E              ; input A=sprite number in SPRATR_DATA , 0-31
1581  543E              ; input DE=initial x
1582  543E              ; input BC=initial y
1583  543E              ; input IY=location where delta y,x are located
1584  543E              ; modifies AF, HL, IX
1585  543E              SPRSET_DELTA_POS:
1586  543E 87          > ADD A, A
1586  543F 87          > ADD A, A
1586  5440 87          > ADD A, A
1587  5441 D5           	PUSH DE
1588  5442 16 00        	LD D, 0
1589  5444 5F           	LD E, A
1590  5445 DD 2A F9 4C  	LD IX, (SPRATR_DATA)
1591  5449 DD 19        	ADD IX, DE
1592  544B D1           	POP DE
1593  544C              	; IX=sprite's y location
1594  544C FD 6E 00     	LD L, (IY)
1595  544F FD 66 01     	LD H, (IY+1)
1596  5452 09           	ADD HL, BC
1597  5453 DD 75 00     	LD (IX), L
1598  5456 DD 74 01     	LD (IX+1), H
1599  5459 FD 6E 02     	LD L, (IY+2)
1600  545C FD 66 03     	LD H, (IY+3)
1601  545F 19           	ADD HL, DE
1602  5460 DD 75 02     	LD (IX+2), L
1603  5463 DD 74 03     	LD (IX+3), H
1604  5466 C9           	RET
1605  5467              ; *******************************************************************************************************
1606  5467
1607  5467              ; *******************************************************************************************************
1608  5467              ; function to handle CALL SPRGRPMOV basic extension
1609  5467              ; sets position of a group of sprites described with
1610  5467              ; { int sprite_num, int delta_y, int delta_x } [count]
1611  5467              ; _SPRGRPMOV ( INT x,
1612  5467              ;			   INT y,
1613  5467              ;			   INT data_ptr,
1614  5467              ;			   BYTE count,
1615  5467              ; will put ram in page 0 also, page 1 is already there
1616  5467              SPRGRPMOV:
1617  5467 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1618  546A B7           	OR A
1619  546B 20 05        	JR NZ, .L1
1620  546D 1E 05        	LD E, 5 ; illegal function call
1621  546F C3 00 50     	JP THROW_ERROR
1622  5472              .L1:
1623  5472              	; opening (
1624  5472 CD E8 4F     	CALL CHKCHAR
1625  5475 28           	DB '('
1626  5476              	; get x
1627  5476 DD 21 2F 54  	LD IX, FRMQNT
1628  547A CD 59 01     	CALL CALBAS
1629  547D D5           	PUSH DE
1630  547E              	; comma
1631  547E CD E8 4F     	CALL CHKCHAR
1632  5481 2C           	DB ','
1633  5482              	; get y
1634  5482 DD 21 2F 54  	LD IX, FRMQNT
1635  5486 CD 59 01     	CALL CALBAS
1636  5489 D5           	PUSH DE
1637  548A              	; comma
1638  548A CD E8 4F     	CALL CHKCHAR
1639  548D 2C           	DB ','
1640  548E              	; get data pointer
1641  548E DD 21 2F 54  	LD IX, FRMQNT
1642  5492 CD 59 01     	CALL CALBAS
1643  5495 D5           	PUSH DE
1644  5496              	; comma
1645  5496 CD E8 4F     	CALL CHKCHAR
1646  5499 2C           	DB ','
1647  549A              	; get count
1648  549A DD 21 1C 52  	LD IX, GETBYT
1649  549E CD 59 01     	CALL CALBAS
1650  54A1 F5           	PUSH AF
1651  54A2              	; ending )
1652  54A2 CD E8 4F     	CALL CHKCHAR
1653  54A5 29           	DB ')'
1654  54A6
1655  54A6 E5           	PUSH HL
1656  54A7 DD E1        	POP IX
1657  54A9
1658  54A9 C1           	POP BC ; count
1659  54AA E1           	POP HL ; data pointer
1660  54AB D9           	EXX
1661  54AC C1           	POP BC ; y
1662  54AD D1           	POP DE ; x
1663  54AE D9           	EXX
1664  54AF
1665  54AF DD E5        	PUSH IX ; save position in BASIC buffer
1666  54B1
1667  54B1 C5           	PUSH BC
1668  54B2 E5           	PUSH HL
1669  54B3 AF               XOR A
1670  54B4 CD FF 4D         CALL GET_PAGE_INFO
1671  54B7 D9           	EXX
1672  54B8 E1           	POP HL
1673  54B9 F1           	POP AF
1674  54BA D9           	EXX
1675  54BB C5               PUSH BC
1676  54BC D5               PUSH DE
1677  54BD D9           	EXX
1678  54BE F5           	PUSH AF
1679  54BF E5           	PUSH HL
1680  54C0 D9           	EXX
1681  54C1 3A 41 F3         LD A, (RAMAD0)
1682  54C4 26 00            LD H, 0
1683  54C6 CD 46 4E         CALL LOCAL_ENASLT
1684  54C9 FB           	EI
1685  54CA E1           	POP HL
1686  54CB C1           	POP BC
1687  54CC CD D6 54     	CALL .UPDATE_LOC
1688  54CF D1               POP DE
1689  54D0 C1               POP BC
1690  54D1 CD 36 4E         CALL RESTORE_PAGE_INFO
1691  54D4 E1           	POP HL
1692  54D5 C9           	RET
1693  54D6
1694  54D6              .UPDATE_LOC:
1695  54D6              .L4:
1696  54D6 7E           	LD A, (HL)
1697  54D7 23           	INC HL
1698  54D8 23           	INC HL
1699  54D9 E5           	PUSH HL
1700  54DA FD E1        	POP IY
1701  54DC D9           	EXX
1702  54DD CD 3E 54     	CALL SPRSET_DELTA_POS
1703  54E0 D9           	EXX
1704  54E1 23          > INC HL
1704  54E2 23          > INC HL
1704  54E3 23          > INC HL
1704  54E4 23          > INC HL
1705  54E5 10 EF        	DJNZ .L4
1706  54E7 C9           	RET
1707  54E8              ; *******************************************************************************************************
1708  54E8
1709  54E8              ; *******************************************************************************************************
1710  54E8              ; function rotates mask and data of several characters and applies to background data
1711  54E8              ; this handles x-shift from 0 to 4
1712  54E8              ; contains self-modifying code that is set-up from external function
1713  54E8              ; input HL=pointer to mask data
1714  54E8              ; input HL'=pointer to character data
1715  54E8              ; input DE=output buffer containing background data
1716  54E8              ; input BC=DE+8
1717  54E8              ; input A=number of characters to process
1718  54E8              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1719  54E8              SHIFT04:
1720  54E8 08           	EX AF, AF'
1721  54E9 7E           	LD A, (HL) ; get mask
1722  54EA D9           	EXX
1723  54EB 57           	LD D, A
1724  54EC 1E FF        	LD E, #FF
1725  54EE 37           	SCF
1726  54EF              .M1:
1727  54EF 18 FE        	JR .M1 ; this is self-modifying part
1728  54F1 CB 1A        	RR D
1729  54F3 CB 1B        	RR E
1730  54F5 CB 1A        	RR D
1731  54F7 CB 1B        	RR E
1732  54F9 CB 1A        	RR D
1733  54FB CB 1B        	RR E
1734  54FD CB 1A        	RR D
1735  54FF CB 1B        	RR E
1736  5501
1737  5501 46           	LD B, (HL) ; get data
1738  5502 0E 00        	LD C, 0
1739  5504              .M2:
1740  5504 18 FE        	JR .M2 ; also self-modifying part
1741  5506 CB 38        	SRL B
1742  5508 CB 19        	RR C
1743  550A CB 38        	SRL B
1744  550C CB 19        	RR C
1745  550E CB 38        	SRL B
1746  5510 CB 19        	RR C
1747  5512 CB 38        	SRL B
1748  5514 CB 19        	RR C
1749  5516
1750  5516 D9           	EXX
1751  5517 1A           	LD A, (DE) ; background
1752  5518 D9           	EXX
1753  5519 A2           	AND D
1754  551A B0           	OR B
1755  551B D9           	EXX
1756  551C 12           	LD (DE), A
1757  551D
1758  551D 0A           	LD A, (BC)
1759  551E D9           	EXX
1760  551F A3           	AND E
1761  5520 B1           	OR C
1762  5521 23           	INC HL
1763  5522 D9           	EXX
1764  5523 02           	LD (BC), A
1765  5524
1766  5524 23           	INC HL
1767  5525 13           	INC DE
1768  5526 03           	INC BC
1769  5527
1770  5527 08           	EX AF, AF'
1771  5528 3D           	DEC A
1772  5529 C2 E8 54     	JP NZ, SHIFT04
1773  552C C9           	RET
1774  552D              ; *******************************************************************************************************
1775  552D
1776  552D              ; *******************************************************************************************************
1777  552D              ; function rotates mask and data of several characters and applies to background data
1778  552D              ; this handles x-shift from 5 to 8
1779  552D              ; contains self-modifying code that is set-up from external function
1780  552D              ; input HL=pointer to mask data
1781  552D              ; input HL'=pointer to character data
1782  552D              ; input DE=output buffer containing background data
1783  552D              ; input BC=DE+8
1784  552D              ; input A=number of characters to process
1785  552D              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1786  552D              SHIFT58:
1787  552D 08           	EX AF, AF'
1788  552E 7E           	LD A, (HL) ; get mask
1789  552F D9           	EXX
1790  5530 57           	LD D, A
1791  5531 1E FF        	LD E, #FF
1792  5533 37           	SCF
1793  5534              .M1:
1794  5534 18 FE        	JR .M1 ; this is self-modifying part
1795  5536 CB 12        	RL D
1796  5538 CB 13        	RL E
1797  553A CB 12        	RL D
1798  553C CB 13        	RL E
1799  553E CB 12        	RL D
1800  5540 CB 13        	RL E
1801  5542
1802  5542 46           	LD B, (HL)
1803  5543 0E 00        	LD C, 0
1804  5545              .M2:
1805  5545 18 FE        	JR .M2 ; also self-modifying part
1806  5547 CB 20        	SLA B
1807  5549 CB 11        	RL C
1808  554B CB 20        	SLA B
1809  554D CB 11        	RL C
1810  554F CB 20        	SLA B
1811  5551 CB 11        	RL C
1812  5553
1813  5553 D9           	EXX
1814  5554 1A           	LD A, (DE) ; background
1815  5555 D9           	EXX
1816  5556 A3           	AND E
1817  5557 B1           	OR C
1818  5558 D9           	EXX
1819  5559 12           	LD (DE), A
1820  555A
1821  555A 0A           	LD A, (BC)
1822  555B D9           	EXX
1823  555C A2           	AND D
1824  555D B0           	OR B
1825  555E 23           	INC HL
1826  555F D9           	EXX
1827  5560 02           	LD (BC), A
1828  5561
1829  5561 23           	INC HL
1830  5562 13           	INC DE
1831  5563 03           	INC BC
1832  5564
1833  5564 08           	EX AF, AF'
1834  5565 3D           	DEC A
1835  5566 C2 2D 55     	JP NZ, SHIFT58
1836  5569 C9           	RET
1837  556A              ; *******************************************************************************************************
1838  556A
1839  556A              ; *******************************************************************************************************
1840  556A              ; routine that shifts one row of characters
1841  556A              ; contains self-modifying code that is set-up from external function
1842  556A              ; input HL=pointer to mask data
1843  556A              ; input HL'=pointer to character data
1844  556A              ; input DE=output buffer containing background data
1845  556A              ; input A=number of characters to process
1846  556A              ; input IX=pointer to structure describing input data
1847  556A              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1848  556A              SHIFT_ROW:
1849  556A F5           	PUSH AF
1850  556B ED 53 FF 4C  		LD (BLIT_TMP1), DE
1851  556F E5           		PUSH HL
1852  5570 CD B3 55     			CALL .ADDYSHIFT
1853  5573 E1           		POP HL
1854  5574 ED 53 01 4D  		LD (BLIT_TMP2), DE ; DE+vertical shift
1855  5578              .L1:
1856  5578 3E 08        		LD A, 8
1857  557A DD 96 02     		SUB (IX+2) ; y shift
1858  557D              .CALL1:
1859  557D CD 00 00     		CALL 0
1860  5580 DD 7E 02     		LD A, (IX+2); y shift
1861  5583 B7           		OR A
1862  5584 28 26        		JR Z, .DONE
1863  5586 ED 5B FF 4C  		LD DE, (BLIT_TMP1)
1864  558A E5           		PUSH HL
1865  558B CD C1 55     			CALL .DETONEXTROW
1866  558E E1           		POP HL
1867  558F              .CALL2:
1868  558F CD 00 00     		CALL 0
1869  5592 ED 5B FF 4C  		LD DE, (BLIT_TMP1)
1870  5596 E5           		PUSH HL
1871  5597 CD BB 55     			CALL .ADD8
1872  559A E1           		POP HL
1873  559B ED 53 FF 4C  		LD (BLIT_TMP1), DE
1874  559F ED 5B 01 4D  		LD DE, (BLIT_TMP2)
1875  55A3 E5           		PUSH HL
1876  55A4 CD BB 55     			CALL .ADD8
1877  55A7 E1           		POP HL
1878  55A8 ED 53 01 4D  		LD (BLIT_TMP2), DE ; DE+vertical shift
1879  55AC              .DONE:
1880  55AC F1           	POP AF
1881  55AD 3D           	DEC A
1882  55AE C8           	RET Z
1883  55AF F5           	PUSH AF
1884  55B0 C3 78 55     	JP .L1
1885  55B3              .ADDYSHIFT:
1886  55B3 EB           	EX DE, HL
1887  55B4 16 00        	LD D, 0
1888  55B6 DD 5E 02     	LD E, (IX+2); y shift
1889  55B9 18 0C        	JR .MOVDEBC
1890  55BB              .ADD8:
1891  55BB 21 08 00     	LD HL, 8
1892  55BE C3 C7 55     	JP .MOVDEBC
1893  55C1              .DETONEXTROW:
1894  55C1 DD 6E 06     	LD L, (IX+6)
1895  55C4 DD 66 07     	LD H, (IX+7) ; bkg add to value
1896  55C7              .MOVDEBC:
1897  55C7 19           	ADD HL, DE
1898  55C8 54           	LD D, H
1899  55C9 5D           	LD E, L
1900  55CA 01 08 00     	LD BC, 8
1901  55CD 09           	ADD HL, BC
1902  55CE 44           	LD B, H
1903  55CF 4D           	LD C, L
1904  55D0 C9           	RET
1905  55D1              ; *******************************************************************************************************
1906  55D1
1907  55D1              ; *******************************************************************************************************
1908  55D1              ; function rotates mask and character data and applies it to background
1909  55D1              ; input IX=pointer to structure describing input data
1910  55D1              ; +0  DW horizontal shift count 0-7
1911  55D1              ; +2  DW vertical shift count 0-7
1912  55D1              ; +4  DW background data start;
1913  55D1              ; +6  DW background add to value to next row of background data
1914  55D1              ; +8  DW mask data start;
1915  55D1              ; +10  DW character data start;
1916  55D1              ; +12 DW character&mask add to value to next row of data
1917  55D1              ; +14 DW columns (low byte used)
1918  55D1              ; +16 DW rows (low byte used)
1919  55D1              SHIFT_MERGE_CHARACTER:
1920  55D1 DD 7E 00     	LD A, (IX) ; shift
1921  55D4 FE 05        	CP 5
1922  55D6 38 25        	JR C, .RIGHT
1923  55D8              	; shifts 5-7, use rotate towards left 1-3
1924  55D8 21 2D 55     	LD HL, SHIFT58
1925  55DB 22 7E 55     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1926  55DE 22 90 55     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1927  55E1 D6 05        	SUB 5
1928  55E3 28 0D        	JR Z, .L1
1929  55E5 87           	ADD A, A
1930  55E6 87           	ADD A, A
1931  55E7 67           	LD H, A
1932  55E8 2E 18        	LD L, #18 ; JR opcode
1933  55EA 22 34 55     	LD (SHIFT58.M1), HL
1934  55ED 22 45 55     	LD (SHIFT58.M2), HL
1935  55F0 18 32        	JR .DO
1936  55F2              .L1:
1937  55F2 21 00 00     	LD HL, 0 ; 2xNOP opcode
1938  55F5 22 34 55     	LD (SHIFT58.M1), HL
1939  55F8 22 45 55     	LD (SHIFT58.M2), HL
1940  55FB 18 27        	JR .DO
1941  55FD              .RIGHT:
1942  55FD              	; shifts 0-4, rotate towards right
1943  55FD 21 E8 54     	LD HL, SHIFT04
1944  5600 22 7E 55     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1945  5603 22 90 55     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1946  5606 FE 04        	CP 4
1947  5608 28 11        	JR Z, .R1
1948  560A D6 04        	SUB 4
1949  560C ED 44        	NEG
1950  560E 87           	ADD A, A
1951  560F 87           	ADD A, A
1952  5610 67           	LD H, A
1953  5611 2E 18        	LD L, #18 ; JR opcode
1954  5613 22 EF 54     	LD (SHIFT04.M1), HL
1955  5616 22 04 55     	LD (SHIFT04.M2), HL
1956  5619 18 09        	JR .DO
1957  561B              .R1:
1958  561B 21 00 00     	LD HL, 0 ; 2xNOP opcode
1959  561E 22 EF 54     	LD (SHIFT04.M1), HL
1960  5621 22 04 55     	LD (SHIFT04.M2), HL
1961  5624              .DO:
1962  5624 DD 46 10     	LD B, (IX+16) ; rows
1963  5627 DD 6E 08     	LD L, (IX+8)
1964  562A DD 66 09     	LD H, (IX+9) ; mask data
1965  562D DD 5E 04     	LD E, (IX+4)
1966  5630 DD 56 05     	LD D, (IX+5) ; background data
1967  5633 D9           	EXX
1968  5634 DD 6E 0A     	LD L, (IX+10)
1969  5637 DD 66 0B     	LD H, (IX+11) ; character data
1970  563A D9           	EXX
1971  563B              .LOOP:
1972  563B C5           	PUSH BC
1973  563C E5           		PUSH HL
1974  563D D5           			PUSH DE
1975  563E D9           				EXX
1976  563F E5           				PUSH HL
1977  5640 D9           					EXX
1978  5641 DD 7E 0E     					LD A, (IX+14) ; columns
1979  5644              .CALL:
1980  5644 CD 6A 55     					CALL SHIFT_ROW
1981  5647 E1           				POP HL
1982  5648 DD 5E 0C     				LD E, (IX+12)
1983  564B DD 56 0D     				LD D, (IX+13) ; char data to next row
1984  564E 19           				ADD HL, DE
1985  564F D9           				EXX
1986  5650 E1           			POP HL
1987  5651 DD 5E 06     			LD E, (IX+6)
1988  5654 DD 56 07     			LD D, (IX+7) ; background to next row
1989  5657 19           			ADD HL, DE
1990  5658 EB           			EX DE, HL
1991  5659 E1           		POP HL
1992  565A DD 4E 0C     		LD C, (IX+12)
1993  565D DD 46 0D     		LD B, (IX+13) ; char data to next row
1994  5660 09           		ADD HL, BC
1995  5661 C1           	POP BC
1996  5662 10 D7        	DJNZ .LOOP
1997  5664 C9           	RET
1998  5665              ; *******************************************************************************************************
1999  5665
2000  5665              ; *******************************************************************************************************
2001  5665              ; function to handle CALL BLIT basic extension
2002  5665              ; rotates 1-bit character drawing horizontally with mask and character data and
2003  5665              ; fuses with background data and applies vertical shift too
2004  5665              ; BLIT ( INT request_data_ptr )
2005  5665              ; request_data_ptr described in SHIFT_MERGE_CHARACTER
2006  5665              ; will put ram in page 0 also, page 1 is already there
2007  5665              BLIT:
2008  5665              	; opening (
2009  5665 CD E8 4F     	CALL CHKCHAR
2010  5668 28           	DB '('
2011  5669              	; get pointer to request struct
2012  5669 DD 21 2F 54  	LD IX, FRMQNT
2013  566D CD 59 01     	CALL CALBAS
2014  5670 D5           	PUSH DE
2015  5671              	; ending )
2016  5671 CD E8 4F     	CALL CHKCHAR
2017  5674 29           	DB ')'
2018  5675
2019  5675 DD E1        	POP IX ; pointer to request struct
2020  5677
2021  5677 E5           	PUSH HL ; save position in BASIC buffer
2022  5678
2023  5678 FD 21 7F 56  	LD IY, .RET
2024  567C C3 BF 4E     	JP ENABLE_PAGE0
2025  567F              .RET:
2026  567F FB           	EI
2027  5680 CD D1 55     	CALL SHIFT_MERGE_CHARACTER
2028  5683
2029  5683 D1               POP DE
2030  5684 C1               POP BC
2031  5685 CD 36 4E         CALL RESTORE_PAGE_INFO
2032  5688
2033  5688 E1           	POP HL
2034  5689 C9           	RET
2035  568A              ; *******************************************************************************************************
2036  568A
2037  568A              ; *******************************************************************************************************
2038  568A              ; generic function to implement tiling
2039  568A              ; should be modified to call appropriate function for memory or vram
2040  568A              ; input IX=pointer to following structure
2041  568A              ; +00 tile_data_ptr
2042  568A              ; +02 tile_rows
2043  568A              ; +04 tile_columns
2044  568A              ; +06 destination_address
2045  568A              ; +08 dest_to_next_row_add_to_value
2046  568A              ; +10 num_horizontal_tiles
2047  568A              ; +12 num_vertical_tiles
2048  568A              ; modifies AF, BC, DE, HL
2049  568A              TILE:
2050  568A DD 6E 06     	LD L, (IX+6)
2051  568D DD 66 07     	LD H, (IX+7) ; destination address
2052  5690 22 FF 4C     	LD (TILETMP1), HL
2053  5693 DD 46 0C     	LD B, (IX+12) ; vertical tile number
2054  5696              .L1:
2055  5696 C5           	PUSH BC
2056  5697 DD 6E 00     		LD L, (IX+0)
2057  569A DD 66 01     		LD H, (IX+1) ; tile address
2058  569D 22 01 4D     		LD (TILETMP2), HL
2059  56A0 DD 46 02     		LD B, (IX+2) ; tile rows
2060  56A3              .L2:
2061  56A3 C5           		PUSH BC
2062  56A4              .CALL1:
2063  56A4 CD 00 00     			CALL 0
2064  56A7 DD 46 0A     			LD B, (IX+10) ; horizontal tile num
2065  56AA              .L3:
2066  56AA C5           			PUSH BC
2067  56AB 2A 01 4D     				LD HL, (TILETMP2)
2068  56AE DD 46 04     				LD B, (IX+4) ; tile columns
2069  56B1              .L4:
2070  56B1 C5           				PUSH BC
2071  56B2              .CALL2:
2072  56B2 CD 00 00     					CALL 0
2073  56B5 C1           				POP BC
2074  56B6 10 F9        				DJNZ .L4
2075  56B8 C1           			POP BC
2076  56B9 10 EF        			DJNZ .L3
2077  56BB 22 01 4D     			LD (TILETMP2), HL
2078  56BE 2A FF 4C     			LD HL, (TILETMP1)
2079  56C1 DD 5E 08     			LD E, (IX+8)
2080  56C4 DD 56 09     			LD D, (IX+9) ; add to value for dest next row
2081  56C7 19           			ADD HL, DE
2082  56C8 22 FF 4C     			LD (TILETMP1), HL
2083  56CB C1           		POP BC
2084  56CC 10 D5        		DJNZ .L2
2085  56CE C1           	POP BC
2086  56CF 10 C5        	DJNZ .L1
2087  56D1 C9           	RET
2088  56D2              ; *******************************************************************************************************
2089  56D2
2090  56D2              ; *******************************************************************************************************
2091  56D2              ; function to handle CALL TILERAM basic extension
2092  56D2              ; fills memory with tiles
2093  56D2              ; fuses with background data and applies vertical shift too
2094  56D2              ; TILERAM ( INT request_data_ptr )
2095  56D2              ; request_data_ptr described in TILE
2096  56D2              ; will put ram in page 0 also, page 1 is already there
2097  56D2              TILERAM:
2098  56D2              	; opening (
2099  56D2 CD E8 4F     	CALL CHKCHAR
2100  56D5 28           	DB '('
2101  56D6              	; get pointer to request struct
2102  56D6 DD 21 2F 54  	LD IX, FRMQNT
2103  56DA CD 59 01     	CALL CALBAS
2104  56DD D5           	PUSH DE
2105  56DE              	; ending )
2106  56DE CD E8 4F     	CALL CHKCHAR
2107  56E1 29           	DB ')'
2108  56E2
2109  56E2 DD E1        	POP IX ; pointer to request struct
2110  56E4
2111  56E4 E5           	PUSH HL ; save position in BASIC buffer
2112  56E5
2113  56E5 FD 21 EC 56  	LD IY, .RET
2114  56E9 C3 BF 4E     	JP ENABLE_PAGE0
2115  56EC              .RET:
2116  56EC FB           	EI
2117  56ED              	; set RAM functions to call
2118  56ED 21 03 57     	LD HL, .TILECOPY
2119  56F0 22 B3 56     	LD (TILE.CALL2+1), HL
2120  56F3 21 14 57     	LD HL, .SETDESTROW
2121  56F6 22 A5 56     	LD (TILE.CALL1+1), HL
2122  56F9 CD 8A 56     	CALL TILE
2123  56FC
2124  56FC D1               POP DE
2125  56FD C1               POP BC
2126  56FE CD 36 4E         CALL RESTORE_PAGE_INFO
2127  5701
2128  5701 E1           	POP HL
2129  5702 C9           	RET
2130  5703              .TILECOPY:
2131  5703 ED A0       > LDI
2131  5705 ED A0       > LDI
2131  5707 ED A0       > LDI
2131  5709 ED A0       > LDI
2131  570B ED A0       > LDI
2131  570D ED A0       > LDI
2131  570F ED A0       > LDI
2131  5711 ED A0       > LDI
2132  5713 C9           	RET
2133  5714              .SETDESTROW:
2134  5714 ED 5B FF 4C  	LD DE, (TILETMP1)
2135  5718 C9           	RET
2136  5719              ; *******************************************************************************************************
2137  5719
2138  5719              ; *******************************************************************************************************
2139  5719              ; function to handle CALL TILEVRM basic extension
2140  5719              ; fills vram with tiles
2141  5719              ; fuses with background data and applies vertical shift too
2142  5719              ; TILEVRM ( INT request_data_ptr )
2143  5719              ; request_data_ptr described in TILE
2144  5719              ; will put ram in page 0 also, page 1 is already there
2145  5719              TILEVRM:
2146  5719              	; opening (
2147  5719 CD E8 4F     	CALL CHKCHAR
2148  571C 28           	DB '('
2149  571D              	; get pointer to request struct
2150  571D DD 21 2F 54  	LD IX, FRMQNT
2151  5721 CD 59 01     	CALL CALBAS
2152  5724 D5           	PUSH DE
2153  5725              	; ending )
2154  5725 CD E8 4F     	CALL CHKCHAR
2155  5728 29           	DB ')'
2156  5729
2157  5729 DD E1        	POP IX ; pointer to request struct
2158  572B
2159  572B E5           	PUSH HL ; save position in BASIC buffer
2160  572C
2161  572C FD 21 33 57  	LD IY, .RET
2162  5730 C3 BF 4E     	JP ENABLE_PAGE0
2163  5733              .RET:
2164  5733 FB           	EI
2165  5734              	; set RAM functions to call
2166  5734 21 4A 57     	LD HL, .TILECOPY
2167  5737 22 B3 56     	LD (TILE.CALL2+1), HL
2168  573A 21 50 57     	LD HL, .SETDESTROW
2169  573D 22 A5 56     	LD (TILE.CALL1+1), HL
2170  5740 CD 8A 56     	CALL TILE
2171  5743
2172  5743 D1               POP DE
2173  5744 C1               POP BC
2174  5745 CD 36 4E         CALL RESTORE_PAGE_INFO
2175  5748
2176  5748 E1           	POP HL
2177  5749 C9           	RET
2178  574A              .TILECOPY:
2179  574A 01 98 08     	LD BC, #0898
2180  574D C3 BB 51     	JP MEMVRM.BBYTECOPY
2181  5750              .SETDESTROW:
2182  5750 2A FF 4C     	LD HL, (TILETMP1)
2183  5753 C3 F4 4D     	JP SETWRT_LOCAL
2184  5756              ; *******************************************************************************************************
2185  5756
2186  5756              ; *******************************************************************************************************
2187  5756              ; generic function to implement rectangle data copy
2188  5756              ; should be modified to call appropriate function for memory or vram
2189  5756              ; input IX=pointer to following structure
2190  5756              ; +00 source data pointer
2191  5756              ; +02 num bytes in a row
2192  5756              ; +04 number of rows
2193  5756              ; +06 source add-to value till next row
2194  5756              ; +08 destination address
2195  5756              ; +10 destination add-to value till next row
2196  5756              ; modifies AF, BC, DE, HL
2197  5756              RECTANGLE_COPY:
2198  5756 DD 6E 00     	LD L, (IX+0)
2199  5759 DD 66 01     	LD H, (IX+1) ; source address
2200  575C DD 5E 08     	LD E, (IX+8)
2201  575F DD 56 09     	LD D, (IX+9) ; destination
2202  5762 DD 46 04     	LD B, (IX+4) ; row number
2203  5765              .L1:
2204  5765 C5           	PUSH BC
2205  5766 E5           		PUSH HL
2206  5767 D5           			PUSH DE
2207  5768 DD 4E 02     				LD C, (IX+2)
2208  576B DD 46 03     				LD B, (IX+3) ; num bytes in a row
2209  576E              .CALL1:
2210  576E CD 00 00     				CALL 0 ; set destination address from DE
2211  5771              .CALL2:
2212  5771 CD 00 00     				CALL 0 ; copy data fn
2213  5774 E1           			POP HL
2214  5775 DD 4E 0A     			LD C, (IX+10)
2215  5778 DD 46 0B     			LD B, (IX+11) ; destination add-to
2216  577B 09           			ADD HL, BC
2217  577C EB           			EX DE, HL
2218  577D E1           		POP HL
2219  577E DD 4E 06     		LD C, (IX+6)
2220  5781 DD 46 07     		LD B, (IX+7) ; src add-to
2221  5784 09           		ADD HL, BC
2222  5785 C1           	POP BC
2223  5786 10 DD        	DJNZ .L1
2224  5788 C9           	RET
2225  5789              ; *******************************************************************************************************
2226  5789
2227  5789              ; *******************************************************************************************************
2228  5789              ; function to handle CALL BOXMEMCPY basic extension
2229  5789              ; copies data with window like boundaries to ram
2230  5789              ; BOXMEMCPY ( INT request_data_ptr )
2231  5789              ; request_data_ptr described in RECTANGLE_COPY
2232  5789              ; will put ram in page 0 also, page 1 is already there
2233  5789              BOXMEMCPY:
2234  5789              	; opening (
2235  5789 CD E8 4F     	CALL CHKCHAR
2236  578C 28           	DB '('
2237  578D              	; get pointer to request struct
2238  578D DD 21 2F 54  	LD IX, FRMQNT
2239  5791 CD 59 01     	CALL CALBAS
2240  5794 D5           	PUSH DE
2241  5795              	; ending )
2242  5795 CD E8 4F     	CALL CHKCHAR
2243  5798 29           	DB ')'
2244  5799
2245  5799 DD E1        	POP IX ; pointer to request struct
2246  579B
2247  579B E5           	PUSH HL ; save position in BASIC buffer
2248  579C
2249  579C FD 21 A3 57  	LD IY, .RET
2250  57A0 C3 BF 4E     	JP ENABLE_PAGE0
2251  57A3              .RET:
2252  57A3 FB           	EI
2253  57A4              	; set RAM functions to call
2254  57A4 21 00 00     	LD HL, 0
2255  57A7 22 6E 57     	LD (RECTANGLE_COPY.CALL1), HL ; NOP NOP
2256  57AA 22 70 57     	LD (RECTANGLE_COPY.CALL1+2), HL ; NOP NOP
2257  57AD 21 ED B0     	LD HL, #B0ED ; LDIR
2258  57B0 22 72 57     	LD (RECTANGLE_COPY.CALL1+4), HL
2259  57B3 CD 56 57     	CALL RECTANGLE_COPY
2260  57B6
2261  57B6 D1               POP DE
2262  57B7 C1               POP BC
2263  57B8 CD 36 4E         CALL RESTORE_PAGE_INFO
2264  57BB
2265  57BB E1           	POP HL
2266  57BC C9           	RET
2267  57BD              ; *******************************************************************************************************
2268  57BD
2269  57BD              ; *******************************************************************************************************
2270  57BD              ; function to handle CALL BOXMEMVRM basic extension
2271  57BD              ; copies data with window like boundaries to ram
2272  57BD              ; BOXMEMVRM ( INT request_data_ptr )
2273  57BD              ; request_data_ptr described in RECTANGLE_COPY
2274  57BD              ; will put ram in page 0 also, page 1 is already there
2275  57BD              BOXMEMVRM:
2276  57BD              	; opening (
2277  57BD CD E8 4F     	CALL CHKCHAR
2278  57C0 28           	DB '('
2279  57C1              	; get pointer to request struct
2280  57C1 DD 21 2F 54  	LD IX, FRMQNT
2281  57C5 CD 59 01     	CALL CALBAS
2282  57C8 D5           	PUSH DE
2283  57C9              	; ending )
2284  57C9 CD E8 4F     	CALL CHKCHAR
2285  57CC 29           	DB ')'
2286  57CD
2287  57CD DD E1        	POP IX ; pointer to request struct
2288  57CF
2289  57CF E5           	PUSH HL ; save position in BASIC buffer
2290  57D0
2291  57D0 FD 21 D7 57  	LD IY, .RET
2292  57D4 C3 BF 4E     	JP ENABLE_PAGE0
2293  57D7              .RET:
2294  57D7 FB           	EI
2295  57D8              	; set RAM functions to call
2296  57D8 21 F6 57     	LD HL, .SETDEST
2297  57DB 22 6F 57     	LD (RECTANGLE_COPY.CALL1+1), HL
2298  57DE 21 FC 57     	LD HL, .COPYDATA
2299  57E1 22 72 57     	LD (RECTANGLE_COPY.CALL2+1), HL
2300  57E4 3E CD        	LD A, #CD ; CALL
2301  57E6 32 6E 57     	LD (RECTANGLE_COPY.CALL1), A
2302  57E9 32 71 57     	LD (RECTANGLE_COPY.CALL2), A
2303  57EC CD 56 57     	CALL RECTANGLE_COPY
2304  57EF
2305  57EF D1               POP DE
2306  57F0 C1               POP BC
2307  57F1 CD 36 4E         CALL RESTORE_PAGE_INFO
2308  57F4
2309  57F4 E1           	POP HL
2310  57F5 C9           	RET
2311  57F6              .SETDEST:
2312  57F6 EB           	EX DE, HL
2313  57F7 CD F4 4D     	CALL SETWRT_LOCAL
2314  57FA EB           	EX DE, HL
2315  57FB C9           	RET
2316  57FC              .COPYDATA:
2317  57FC 41           	LD B, C
2318  57FD 0E 98        	LD C, #98
2319  57FF C3 BB 51     	JP MEMVRM.BBYTECOPY
2320  5802              ; *******************************************************************************************************
2321  5802
2322  5802              EXT_END:
2323  5802
# file closed: asm\main.asm
