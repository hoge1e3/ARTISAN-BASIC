# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; control variables to include/exclude parts of code
   4  4000              SOUND_CMDS	 	EQU 1
   5  4000              RAM_CMDS 		EQU 1
   6  4000              VRAM_CMDS 		EQU 1
   7  4000              BLIT_CMDS		EQU 1
   8  4000              SPRITE_CMDS 	EQU 1
   9  4000              GENCAL_CMD		EQU 1
  10  4000              TILE_CMDS		EQU 1
  11  4000              BOX_CMDS		   EQU 1
  12  4000              ANIM_CMDS		EQU 1
  13  4000              BYTEOPS_CMDS   EQU 0
  14  4000              COLL_CMD       EQU 1
  15  4000
  16  4000               DEFINE CMDS_WITH_PARAMETERS
  17  4000
  18  4000              CHPUT   EQU    #A2
  19  4000              CALBAS  EQU		#159
  20  4000              ERRHAND EQU    #406F
  21  4000              FRMEVL  EQU    #4C64
  22  4000              FRESTR  EQU		#67D0
  23  4000              ; FRMQNT = formula quantificator
  24  4000              ; input HL=pointer to current program expression
  25  4000              ; output HL=next address
  26  4000              ; output DE=integer datum
  27  4000              FRMQNT	EQU		#542F
  28  4000              ; GETBYT = get byte parameter
  29  4000              ; input HL=pointer to current program expression
  30  4000              ; output HL=next address
  31  4000              ; output A=E=byte read
  32  4000              GETBYT		EQU	#521C
  33  4000              CHRGTR  	   EQU   #4666
  34  4000              PTRGET		EQU 	#5EA4
  35  4000              SUBFLG		EQU	#F6A5
  36  4000              SYNCHR		EQU	#558C
  37  4000              VALTYP  	   EQU   #F663
  38  4000              DAC         EQU   #F7F6
  39  4000              USR     	   EQU   #F7F8
  40  4000              PROCNM		EQU	#FD89
  41  4000              BIOS_FILVRM EQU   #0056
  42  4000              CLIKSW		EQU	#F3DB
  43  4000
  44  4000              RAMAD0	   EQU	#F341	; Main-RAM Slot (00000h~03FFFh)
  45  4000              RAMAD1	   EQU	#F342	; Main-RAM Slot (04000h~07FFFh)
  46  4000              RAMAD2	   EQU	#F343	; Main-RAM Slot (08000h~0BFFFh)
  47  4000              RAMAD3	   EQU	#F344	; Main-RAM Slot (0C000h~0FFFFh)
  48  4000              EXPTBL	   EQU   #FCC1
  49  4000              SCRMOD	   EQU   #FCAF ; current screen mode
  50  4000              REG1SAV     EQU   #F3E0 ; VDP(1)
  51  4000              JIFFY	      EQU   #FC9E
  52  4000              GRPPAT	   EQU   #F3CF ; SCREEN 2 sprite generator table address
  53  4000              GRPCGP		EQU	#F3CB ; SCREEN 2 pattern generator table address
  54  4000              GRPATR      EQU   #F3CD ; SCREEN 2 sprite attribute table address
  55  4000              T32PAT	   EQU   #F3C5 ; SCREEN 1 sprite generator table address
  56  4000              T32CGP      EQU   #F3C1 ; SCREEN 1 pattern ganarator table address
  57  4000              T32ATR      EQU   #F3C3 ; SCREEN 1 sprite attribute table address
  58  4000
  59  4000              ; BASIC error codes
  60  4000              ;01 NEXT without FOR
  61  4000              ;02 Syntax error
  62  4000              ;03 RETURN without GOSUB
  63  4000              ;04 Out of DATA
  64  4000              ;05 Illegal function call
  65  4000              ;06 Overflow
  66  4000              ;07 Out of memory
  67  4000              ;08 Undefined line number
  68  4000              ;09 Subscript out of range
  69  4000              ;10 Redimensioned array
  70  4000              ;11 Division by zero
  71  4000              ;12 Illegal direct
  72  4000              ;13 Type mismatch
  73  4000              ;14 Out of string space
  74  4000              ;15 String too long
  75  4000              ;16 String formula too complex
  76  4000              ;17 Can't CONTINUE
  77  4000              ;18 Undefined user function
  78  4000              ;19 Device I/O error
  79  4000              ;20 Verify error
  80  4000              ;21 No RESUME
  81  4000              ;22 RESUME without error
  82  4000              ;23 Unprintable error
  83  4000              ;24 Missing operand
  84  4000              ;25 Line buffer overflow
  85  4000              ;50 FIELD overflow
  86  4000              ;51 Internal error
  87  4000              ;52 Bad file number
  88  4000              ;53 File not found
  89  4000              ;54 File already open
  90  4000              ;55 Input past end
  91  4000              ;56 Bad file name
  92  4000              ;57 Direct statement in file
  93  4000              ;58 Sequential I/O only
  94  4000              ;59 File not OPEN
  95  4000
  96  4000
  97  4000               ; simulate cartridge with BASIC extension
  98  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  98  4004 B5 62 00 00
  98  4008 00 00 00 00
  98  400C 00 00 00 00
  99  4010
 100  4010              ; this location #4010 stores last location used by basic extension
 101  4010              ; free memory after that point
 102  4010              FREEMEMPTR:
 103  4010 52 63         DW EXT_END
 104  4012
 105  4012              ; this location #4012 stores extension version in DAA format
 106  4012              ; first byte is major version and second minor
 107  4012              VERSION:
 108  4012 00 70         DB #00, #70
 109  4014
 110  4014              ; binary included AKG player compiled at #4014
 111  4014               IF (SOUND_CMDS == 1)
 112  4014              	INCBIN "bin/AKG.bin"
 113  4CF0              	INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CF0              MAIN_PLAYER_START EQU 04014H
   2+ 4CF0              PLY_AKG_START EQU 04014H
   3+ 4CF0              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401DH
   4+ 4CF0              PLY_AKG_INITSOUNDEFFECTS EQU 0401DH
   5+ 4CF0              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 04021H
   6+ 4CF0              PLY_AKG_PLAYSOUNDEFFECT EQU 04021H
   7+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04022H
   8+ 4CF0              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04022H
   9+ 4CF0              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04049H
  10+ 4CF0              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04049H
  11+ 4CF0              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04057H
  12+ 4CF0              PLY_AKG_PSES_PLAY EQU 04090H
  13+ 4CF0              PLY_AKG_PSES_READFIRSTBYTE EQU 04099H
  14+ 4CF0              PLY_AKG_PSES_S_ENDORLOOP EQU 040B1H
  15+ 4CF0              PLY_AKG_PSES_S_LOOP EQU 040BCH
  16+ 4CF0              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C2H
  17+ 4CF0              PLY_AKG_PSES_NOTREACHED EQU 040D5H
  18+ 4CF0              PLY_AKG_PSES_HARDWAREONLY EQU 040D9H
  19+ 4CF0              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040E0H
  20+ 4CF0              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F2H
  21+ 4CF0              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FCH
  22+ 4CF0              PLY_AKG_PSES_H_AFTERRETRIG EQU 04106H
  23+ 4CF0              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 0411AH
  24+ 4CF0              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411FH
  25+ 4CF0              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04127H
  26+ 4CF0              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04132H
  27+ 4CF0              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413EH
  28+ 4CF0              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 04140H
  29+ 4CF0              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04146H
  30+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 0414AH
  31+ 4CF0              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 0414AH
  32+ 4CF0              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414CH
  33+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414CH
  34+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414CH
  35+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414DH
  36+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414EH
  37+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04152H
  38+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04152H
  39+ 4CF0              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04152H
  40+ 4CF0              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 0415AH
  41+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04162H
  42+ 4CF0              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04162H
  43+ 4CF0              PLY_AKG_INIT EQU 04162H
  44+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04162H
  45+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 04190H
  46+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A4H
  47+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B6H
  48+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D5H
  49+ 4CF0              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E2H
  50+ 4CF0              PLY_AKG_INIT_READWORDSANDFILL EQU 041E8H
  51+ 4CF0              PLY_AKG_INITTABLE0 EQU 041EBH
  52+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041EBH
  53+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04205H
  54+ 4CF0              PLY_AKG_INITTABLE0_END EQU 04205H
  55+ 4CF0              PLY_AKG_INITTABLE1 EQU 04205H
  56+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04205H
  57+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04209H
  58+ 4CF0              PLY_AKG_INITTABLE1_END EQU 04209H
  59+ 4CF0              PLY_AKG_INITTABLEORA EQU 04209H
  60+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04209H
  61+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 04221H
  62+ 4CF0              PLY_AKG_INITTABLEORA_END EQU 04221H
  63+ 4CF0              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 04221H
  64+ 4CF0              PLY_AKG_STOP EQU 04221H
  65+ 4CF0              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04233H
  66+ 4CF0              PLY_AKG_PLAY EQU 04233H
  67+ 4CF0              PLY_AKG_TICKDECREASINGCOUNTER EQU 0423BH
  68+ 4CF0              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 04241H
  69+ 4CF0              PLY_AKG_READLINKER EQU 04246H
  70+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04246H
  71+ 4CF0              PLY_AKG_READLINKER_PTLINKER EQU 04246H
  72+ 4CF0              PLY_AKG_READLINKER_NOLOOP EQU 04251H
  73+ 4CF0              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 0428AH
  74+ 4CF0              PLY_AKG_READLINE EQU 0428DH
  75+ 4CF0              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428DH
  76+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04293H
  77+ 4CF0              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04293H
  78+ 4CF0              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 042A0H
  79+ 4CF0              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A4H
  80+ 4CF0              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A7H
  81+ 4CF0              PLY_AKG_SPEEDTRACK_END EQU 042AAH
  82+ 4CF0              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042AAH
  83+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042B0H
  84+ 4CF0              PLY_AKG_EVENTTRACK_PTTRACK EQU 042B0H
  85+ 4CF0              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BDH
  86+ 4CF0              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042C1H
  87+ 4CF0              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C4H
  88+ 4CF0              PLY_AKG_EVENTTRACK_END EQU 042C7H
  89+ 4CF0              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C7H
  90+ 4CF0              PLY_AKG_CHANNEL1_READTRACK EQU 042D3H
  91+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D3H
  92+ 4CF0              PLY_AKG_CHANNEL1_PTTRACK EQU 042D3H
  93+ 4CF0              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042EEH
  94+ 4CF0              PLY_AKG_CHANNEL1_WAIT EQU 042F9H
  95+ 4CF0              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 04300H
  96+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 04300H
  97+ 4CF0              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 04300H
  98+ 4CF0              PLY_AKG_CHANNEL1_NOTE EQU 04309H
  99+ 4CF0              PLY_AKG_BASENOTEINDEX EQU 04309H
 100+ 4CF0              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 0430BH
 101+ 4CF0              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 0430BH
 102+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 0431BH
 103+ 4CF0              PLY_AKG_INSTRUMENTSTABLE EQU 0431BH
 104+ 4CF0              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432DH
 105+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433DH
 106+ 4CF0              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04365H
 107+ 4CF0              PLY_AKG_CHANNEL1_READCELLEND EQU 04368H
 108+ 4CF0              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04368H
 109+ 4CF0              PLY_AKG_CHANNEL2_READTRACK EQU 04374H
 110+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04374H
 111+ 4CF0              PLY_AKG_CHANNEL2_PTTRACK EQU 04374H
 112+ 4CF0              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438FH
 113+ 4CF0              PLY_AKG_CHANNEL2_WAIT EQU 0439AH
 114+ 4CF0              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 043A1H
 115+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 043A1H
 116+ 4CF0              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 043A1H
 117+ 4CF0              PLY_AKG_CHANNEL2_NOTE EQU 043AAH
 118+ 4CF0              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043AFH
 119+ 4CF0              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043AFH
 120+ 4CF0              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043D1H
 121+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043E1H
 122+ 4CF0              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04409H
 123+ 4CF0              PLY_AKG_CHANNEL2_READCELLEND EQU 0440CH
 124+ 4CF0              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440CH
 125+ 4CF0              PLY_AKG_CHANNEL3_READTRACK EQU 04418H
 126+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04418H
 127+ 4CF0              PLY_AKG_CHANNEL3_PTTRACK EQU 04418H
 128+ 4CF0              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04433H
 129+ 4CF0              PLY_AKG_CHANNEL3_WAIT EQU 0443EH
 130+ 4CF0              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04445H
 131+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04445H
 132+ 4CF0              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04445H
 133+ 4CF0              PLY_AKG_CHANNEL3_NOTE EQU 0444EH
 134+ 4CF0              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04453H
 135+ 4CF0              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04453H
 136+ 4CF0              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04475H
 137+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04485H
 138+ 4CF0              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ADH
 139+ 4CF0              PLY_AKG_CHANNEL3_READCELLEND EQU 044B0H
 140+ 4CF0              PLY_AKG_CURRENTSPEED EQU 044B0H
 141+ 4CF0              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B2H
 142+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B5H
 143+ 4CF0              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B5H
 144+ 4CF0              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B8H
 145+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044BBH
 146+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044BBH
 147+ 4CF0              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C7H
 148+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CEH
 149+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044D1H
 150+ 4CF0              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D7H
 151+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044DAH
 152+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044DAH
 153+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E8H
 154+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EDH
 155+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F8H
 156+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044FBH
 157+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044FBH
 158+ 4CF0              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FEH
 159+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 04501H
 160+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE EQU 04501H
 161+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 0450AH
 162+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04514H
 163+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04517H
 164+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04517H
 165+ 4CF0              PLY_AKG_CHANNEL1_PITCH EQU 04517H
 166+ 4CF0              PLY_AKG_CHANNEL1_ISPITCH EQU 0451AH
 167+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451FH
 168+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451FH
 169+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04523H
 170+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04525H
 171+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04527H
 172+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452EH
 173+ 4CF0              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452FH
 174+ 4CF0              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04532H
 175+ 4CF0              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04532H
 176+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454EH
 177+ 4CF0              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454EH
 178+ 4CF0              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 0455BH
 179+ 4CF0              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455FH
 180+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456FH
 181+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456FH
 182+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 04570H
 183+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 04571H
 184+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04573H
 185+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04573H
 186+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04573H
 187+ 4CF0              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04574H
 188+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04575H
 189+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04577H
 190+ 4CF0              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04577H
 191+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04577H
 192+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04577H
 193+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04577H
 194+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_END EQU 0457AH
 195+ 4CF0              PLY_AKG_CHANNEL1_PITCH_END EQU 0457CH
 196+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04584H
 197+ 4CF0              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04584H
 198+ 4CF0              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04587H
 199+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 0458AH
 200+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 0458AH
 201+ 4CF0              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04596H
 202+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459DH
 203+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 045A0H
 204+ 4CF0              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A6H
 205+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A9H
 206+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A9H
 207+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B7H
 208+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BCH
 209+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C7H
 210+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045CAH
 211+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045CAH
 212+ 4CF0              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CDH
 213+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045D0H
 214+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045D0H
 215+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D9H
 216+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E3H
 217+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E6H
 218+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E6H
 219+ 4CF0              PLY_AKG_CHANNEL2_PITCH EQU 045E6H
 220+ 4CF0              PLY_AKG_CHANNEL2_ISPITCH EQU 045E9H
 221+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045EEH
 222+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045EEH
 223+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F2H
 224+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F4H
 225+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F6H
 226+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FDH
 227+ 4CF0              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FEH
 228+ 4CF0              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04601H
 229+ 4CF0              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 04601H
 230+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461DH
 231+ 4CF0              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461DH
 232+ 4CF0              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 0462AH
 233+ 4CF0              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462EH
 234+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463EH
 235+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463EH
 236+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463FH
 237+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 04640H
 238+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04642H
 239+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04642H
 240+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04642H
 241+ 4CF0              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04643H
 242+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04644H
 243+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04646H
 244+ 4CF0              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04646H
 245+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04646H
 246+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04646H
 247+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04646H
 248+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_END EQU 04649H
 249+ 4CF0              PLY_AKG_CHANNEL2_PITCH_END EQU 0464BH
 250+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04653H
 251+ 4CF0              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04653H
 252+ 4CF0              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04656H
 253+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04659H
 254+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04659H
 255+ 4CF0              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04665H
 256+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466CH
 257+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466FH
 258+ 4CF0              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04675H
 259+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04678H
 260+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04678H
 261+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04686H
 262+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 0468BH
 263+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04696H
 264+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04699H
 265+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04699H
 266+ 4CF0              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469CH
 267+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469FH
 268+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469FH
 269+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A8H
 270+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B2H
 271+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B5H
 272+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B5H
 273+ 4CF0              PLY_AKG_CHANNEL3_PITCH EQU 046B5H
 274+ 4CF0              PLY_AKG_CHANNEL3_ISPITCH EQU 046B8H
 275+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BDH
 276+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BDH
 277+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046C1H
 278+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C3H
 279+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C5H
 280+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CCH
 281+ 4CF0              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CDH
 282+ 4CF0              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046D0H
 283+ 4CF0              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046D0H
 284+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046ECH
 285+ 4CF0              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046ECH
 286+ 4CF0              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F9H
 287+ 4CF0              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FDH
 288+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470DH
 289+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470DH
 290+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470EH
 291+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470FH
 292+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 04711H
 293+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 04711H
 294+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 04711H
 295+ 4CF0              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04712H
 296+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04713H
 297+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04715H
 298+ 4CF0              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04715H
 299+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04715H
 300+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04715H
 301+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04715H
 302+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_END EQU 04718H
 303+ 4CF0              PLY_AKG_CHANNEL3_PITCH_END EQU 0471AH
 304+ 4CF0              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04726H
 305+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04726H
 306+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04726H
 307+ 4CF0              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04729H
 308+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 0472BH
 309+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 04731H
 310+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04734H
 311+ 4CF0              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04734H
 312+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04737H
 313+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 04740H
 314+ 4CF0              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04748H
 315+ 4CF0              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04755H
 316+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04755H
 317+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04755H
 318+ 4CF0              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04758H
 319+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 0475AH
 320+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 04760H
 321+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04763H
 322+ 4CF0              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04763H
 323+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04766H
 324+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476FH
 325+ 4CF0              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04777H
 326+ 4CF0              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04785H
 327+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04785H
 328+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04785H
 329+ 4CF0              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04788H
 330+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 0478AH
 331+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 04790H
 332+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04793H
 333+ 4CF0              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04793H
 334+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04796H
 335+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479FH
 336+ 4CF0              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A7H
 337+ 4CF0              PLY_AKG_SENDPSGREGISTERS EQU 047B6H
 338+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BEH
 339+ 4CF0              PLY_AKG_PSGREG01_INSTR EQU 047BEH
 340+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CEH
 341+ 4CF0              PLY_AKG_PSGREG23_INSTR EQU 047CEH
 342+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DFH
 343+ 4CF0              PLY_AKG_PSGREG45_INSTR EQU 047DFH
 344+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047F0H
 345+ 4CF0              PLY_AKG_PSGREG6_8_INSTR EQU 047F0H
 346+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 04801H
 347+ 4CF0              PLY_AKG_PSGREG9_10_INSTR EQU 04801H
 348+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04812H
 349+ 4CF0              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04812H
 350+ 4CF0              PLY_AKG_PSGREG13_OLDVALUE EQU 04827H
 351+ 4CF0              PLY_AKG_RETRIG EQU 04829H
 352+ 4CF0              PLY_AKG_PSGREG13_INSTR EQU 0482BH
 353+ 4CF0              PLY_AKG_PSGREG13_END EQU 0483AH
 354+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 0483AH
 355+ 4CF0              PLY_AKG_SAVESP EQU 0483AH
 356+ 4CF0              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483EH
 357+ 4CF0              PLY_AKG_CHANNEL1_READEFFECTS EQU 04846H
 358+ 4CF0              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04853H
 359+ 4CF0              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04853H
 360+ 4CF0              PLY_AKG_CHANNEL2_READEFFECTS EQU 0485BH
 361+ 4CF0              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04868H
 362+ 4CF0              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04868H
 363+ 4CF0              PLY_AKG_CHANNEL3_READEFFECTS EQU 04870H
 364+ 4CF0              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 0487BH
 365+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS EQU 0487BH
 366+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 0488AH
 367+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 0488AH
 368+ 4CF0              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 04891H
 369+ 4CF0              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 048A1H
 370+ 4CF0              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 048A1H
 371+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A8H
 372+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A8H
 373+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048ABH
 374+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B4H
 375+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B4H
 376+ 4CF0              PLY_AKG_READINSTRUMENTCELL EQU 048BAH
 377+ 4CF0              PLY_AKG_NOSOFTNOHARD EQU 048C7H
 378+ 4CF0              PLY_AKG_NSNH_NONOISE EQU 048DCH
 379+ 4CF0              PLY_AKG_SOFT EQU 048DFH
 380+ 4CF0              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E6H
 381+ 4CF0              PLY_AKG_S_NOTSIMPLE EQU 048EEH
 382+ 4CF0              PLY_AKG_S_AFTERSIMPLETEST EQU 048F1H
 383+ 4CF0              PLY_AKG_HARDTOSOFT EQU 048FEH
 384+ 4CF0              PLY_AKG_HS_JUMPRATIO EQU 04909H
 385+ 4CF0              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04936H
 386+ 4CF0              PLY_AKG_ENDWITHOUTLOOP EQU 04938H
 387+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04938H
 388+ 4CF0              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04938H
 389+ 4CF0              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 04940H
 390+ 4CF0              PLY_AKG_SH_JUMPRATIO EQU 0494DH
 391+ 4CF0              PLY_AKG_SH_JUMPRATIOEND EQU 0496EH
 392+ 4CF0              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497DH
 393+ 4CF0              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04983H
 394+ 4CF0              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499DH
 395+ 4CF0              PLY_AKG_H_RETRIGEND EQU 049AFH
 396+ 4CF0              PLY_AKG_H_AFTERRETRIG EQU 049B0H
 397+ 4CF0              PLY_AKG_ENDWITHLOOP EQU 049C2H
 398+ 4CF0              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C9H
 399+ 4CF0              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DFH
 400+ 4CF0              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EDH
 401+ 4CF0              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FDH
 402+ 4CF0              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A0BH
 403+ 4CF0              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A1AH
 404+ 4CF0              PLY_AKG_SHOHS_RETRIGEND EQU 04A29H
 405+ 4CF0              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A2AH
 406+ 4CF0              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3CH
 407+ 4CF0              PLY_AKG_EFFECTTABLE EQU 04A4AH
 408+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A4AH
 409+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6EH
 410+ 4CF0              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6EH
 411+ 4CF0              PLY_AKG_EFFECT_RESET EQU 04A71H
 412+ 4CF0              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A73H
 413+ 4CF0              PLY_AKG_EFFECT_VOLUME EQU 04A8EH
 414+ 4CF0              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A9AH
 415+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04AA0H
 416+ 4CF0              PLY_AKG_ARPEGGIOSTABLE EQU 04AA0H
 417+ 4CF0              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC7H
 418+ 4CF0              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACEH
 419+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD4H
 420+ 4CF0              PLY_AKG_PITCHESTABLE EQU 04AD4H
 421+ 4CF0              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AFBH
 422+ 4CF0              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B02H
 423+ 4CF0              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B13H
 424+ 4CF0              PLY_AKG_EFFECT_PITCHDOWN EQU 04B1AH
 425+ 4CF0              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B2AH
 426+ 4CF0              PLY_AKG_EFFECT_PITCHUP EQU 04B3FH
 427+ 4CF0              PLY_AKG_EFFECT_PITCHSTOP EQU 04B51H
 428+ 4CF0              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B58H
 429+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B82H
 430+ 4CF0              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B82H
 431+ 4CF0              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B9BH
 432+ 4CF0              PLY_AKG_EFFECT_GLIDESPEED EQU 04B9BH
 433+ 4CF0              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BADH
 434+ 4CF0              PLY_AKG_EFFECT_LEGATO EQU 04BC3H
 435+ 4CF0              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD7H
 436+ 4CF0              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDFH
 437+ 4CF0              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE7H
 438+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEFH
 439+ 4CF0              PLY_AKG_EVENT EQU 04BEFH
 440+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BF0H
 441+ 4CF0              PLY_AKG_PERIODTABLE EQU 04BF0H
 442+ 4CF0              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BF0H
 443+ 4CF0              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CF0H
 444+ 4CF0              PLY_AKG_PERIODTABLE_END EQU 04CF0H
 445+ 4CF0              PLY_AKG_END EQU 04CF0H
 446+ 4CF0              MAIN_PLAYER_END EQU 04CF0H
 447+ 4CF0              TESTEREND EQU 04CF0H
 448+ 4CF0
# file closed: ./symbol/AKG.sym
 114  4CF0               ENDIF
 115  4CF0
 116  4CF0               INCLUDE "VBLANK.asm"
# file opened: asm\VBLANK.asm
   1+ 4CF0              ORIG.HTIMI:
   2+ 4CF0 00 00 00 00  	DB 0, 0, 0, 0, 0
   2+ 4CF4 00
   3+ 4CF5               EXPORT ORIG.HTIMI
   4+ 4CF5
   5+ 4CF5              ; *******************************************************************************************************
   6+ 4CF5              ; interrupt handler when page 0 enabled
   7+ 4CF5              ; we are here only if one of the extended basic commands have paged in page 0
   8+ 4CF5              ; which means we arrived from BASIC so page 2 is already good
   9+ 4CF5              VBLANK:
  10+ 4CF5              	EXPORT VBLANK
  11+ 4CF5
  12+ 4CF5 F5               PUSH AF
  13+ 4CF6              	; is VDP originator ?
  14+ 4CF6 DB 99        	IN	A, (099H)
  15+ 4CF8 A7           	AND	A
  16+ 4CF9 F2 20 4D     	JP P, .EXIT
  17+ 4CFC
  18+ 4CFC               IF (SOUND_CMDS + SPRITE_CMDS > 0)
  19+ 4CFC C5               PUSH BC
  20+ 4CFD D5               PUSH DE
  21+ 4CFE E5               PUSH HL
  22+ 4CFF 08               EX AF, AF'
  23+ 4D00 D9               EXX
  24+ 4D01 F5               PUSH AF
  25+ 4D02 C5               PUSH BC
  26+ 4D03 D5               PUSH DE
  27+ 4D04 E5               PUSH HL
  28+ 4D05 DD E5            PUSH IX
  29+ 4D07 FD E5            PUSH IY
  30+ 4D09
  31+ 4D09               IF (SPRITE_CMDS == 1)
  32+ 4D09 CD 5A 4D     	CALL PROCESS_SPRITES_AND_ANIMATIONS
  33+ 4D0C               ENDIF
  34+ 4D0C
  35+ 4D0C               IF (SOUND_CMDS == 1)
  36+ 4D0C 3A BE 56     	LD A, (SOUND_ENABLED)
  37+ 4D0F B7           	OR A
  38+ 4D10 C4 33 42     	CALL NZ,PLY_AKG_PLAY
  39+ 4D13               ENDIF
  40+ 4D13
  41+ 4D13                  ; increase JIFFY
  42+ 4D13                  ;LD HL,(JIFFY)
  43+ 4D13                  ;INC HL
  44+ 4D13                  ;LD (JIFFY),HL
  45+ 4D13
  46+ 4D13 FD E1            POP IY
  47+ 4D15 DD E1            POP IX
  48+ 4D17 E1               POP HL
  49+ 4D18 D1               POP DE
  50+ 4D19 C1               POP BC
  51+ 4D1A F1               POP AF
  52+ 4D1B 08               EX AF, AF'
  53+ 4D1C D9               EXX
  54+ 4D1D E1               POP HL
  55+ 4D1E D1               POP DE
  56+ 4D1F C1               POP BC
  57+ 4D20               ENDIF
  58+ 4D20
  59+ 4D20              .EXIT:
  60+ 4D20 F1           	POP AF
  61+ 4D21 FB           	EI
  62+ 4D22 ED 4D        	RETI
  63+ 4D24              ; *******************************************************************************************************
  64+ 4D24
  65+ 4D24              ; *******************************************************************************************************
  66+ 4D24              ; H.TIMI function
  67+ 4D24              ; we can end up here from anywhere so page in both page 0 and 2
  68+ 4D24              MBGE_HTIMI:
  69+ 4D24               EXPORT MBGE_HTIMI
  70+ 4D24
  71+ 4D24               IF (SOUND_CMDS + SPRITE_CMDS > 0)
  72+ 4D24
  73+ 4D24 F5           	PUSH AF
  74+ 4D25
  75+ 4D25              	; enable page 2
  76+ 4D25 3E 02            LD A, 2
  77+ 4D27 CD E5 61         CALL GET_PAGE_INFO
  78+ 4D2A C5               PUSH BC
  79+ 4D2B D5               PUSH DE
  80+ 4D2C 3A 43 F3         LD A, (RAMAD2)
  81+ 4D2F 26 80            LD H, 080H
  82+ 4D31 CD 2C 62         CALL LOCAL_ENASLT
  83+ 4D34              	; enable page 0
  84+ 4D34 AF               XOR A
  85+ 4D35 CD E5 61         CALL GET_PAGE_INFO
  86+ 4D38 C5               PUSH BC
  87+ 4D39 D5               PUSH DE
  88+ 4D3A 3A 41 F3         LD A, (RAMAD0)
  89+ 4D3D 26 00            LD H, 0
  90+ 4D3F CD 2C 62         CALL LOCAL_ENASLT
  91+ 4D42
  92+ 4D42               IF (SPRITE_CMDS == 1)
  93+ 4D42 CD 5A 4D     	CALL PROCESS_SPRITES_AND_ANIMATIONS
  94+ 4D45               ENDIF
  95+ 4D45
  96+ 4D45               IF (SOUND_CMDS == 1)
  97+ 4D45 3A BE 56     	LD A, (SOUND_ENABLED)
  98+ 4D48 B7           	OR A
  99+ 4D49 C4 33 42     	CALL NZ,PLY_AKG_PLAY
 100+ 4D4C               ENDIF
 101+ 4D4C
 102+ 4D4C              	; restore page 0
 103+ 4D4C D1               POP DE
 104+ 4D4D C1               POP BC
 105+ 4D4E CD 1C 62         CALL RESTORE_PAGE_INFO
 106+ 4D51              	; restore page 2
 107+ 4D51 D1               POP DE
 108+ 4D52 C1               POP BC
 109+ 4D53 CD 1C 62         CALL RESTORE_PAGE_INFO
 110+ 4D56
 111+ 4D56 F1           	POP AF
 112+ 4D57               ENDIF
 113+ 4D57 C3 F0 4C     	JP ORIG.HTIMI
 114+ 4D5A              ; *******************************************************************************************************
 115+ 4D5A
 116+ 4D5A              ; *******************************************************************************************************
 117+ 4D5A              ; function checks if the sprite system is initialized and what screen mode we are running
 118+ 4D5A              ; also checks if some VRAM modifying command is running
 119+ 4D5A              ; when that checks out calls sprite updates and animation processing
 120+ 4D5A              PROCESS_SPRITES_AND_ANIMATIONS:
 121+ 4D5A              	; check if initialized
 122+ 4D5A 3A 73 4D     	LD A, (SPRATR_INIT_STATUS)
 123+ 4D5D B7           	OR A
 124+ 4D5E C8           	RET Z
 125+ 4D5F              	; check screen mode
 126+ 4D5F 3A AF FC     	LD A, (SCRMOD)
 127+ 4D62 3D           	DEC A
 128+ 4D63 28 02        	JR Z, .L0 ; screen 1
 129+ 4D65 3D           	DEC A
 130+ 4D66 C0           	RET NZ ; not screen 2
 131+ 4D67              .L0:
 132+ 4D67                  ; check if anyone else is working with VRAM
 133+ 4D67 3A 23 60         LD A,(VRAM_UPDATE_IN_PROGRESS)
 134+ 4D6A B7               OR A
 135+ 4D6B C0               RET NZ
 136+ 4D6C
 137+ 4D6C CD 88 4D         CALL SPRATR_UPDATE
 138+ 4D6F
 139+ 4D6F               IF (ANIM_CMDS == 1)
 140+ 4D6F CD 57 54         CALL PROCESS_ANIMATIONS
 141+ 4D72               ENDIF
 142+ 4D72 C9               RET
 143+ 4D73              ; *******************************************************************************************************
# file closed: asm\VBLANK.asm
 117  4D73
 118  4D73               IF (SPRITE_CMDS == 1)
 119  4D73               INCLUDE "SPRITES.asm"
# file opened: asm\SPRITES.asm
   1+ 4D73              ; commands and variables related to sprites
   2+ 4D73
   3+ 4D73              SPRATR_INIT_STATUS:
   4+ 4D73 00            DB 0
   5+ 4D74              SPRATR_UPDATE_FLAG:
   6+ 4D74 00 00         DW 0
   7+ 4D76              SPRATR_DATA:
   8+ 4D76 00 00         DW 0
   9+ 4D78              SPRFLICKER_ENABLED:
  10+ 4D78 00            DB 0
  11+ 4D79              ; to support sprite flicker
  12+ 4D79              FLICKER:
  13+ 4D79 00            DB 0
  14+ 4D7A
  15+ 4D7A              ; to temporarily store stack pointer
  16+ 4D7A              TMPSP:
  17+ 4D7A 00 00         DW 0
  18+ 4D7C
  19+ 4D7C              ; *******************************************************************************************************
  20+ 4D7C              ; helper function gets pointer to n-th entry in sprite attributes
  21+ 4D7C              ; changes HL,DE;
  22+ 4D7C              GETnthSPRATTR:
  23+ 4D7C 26 00            LD H,0
  24+ 4D7E 6F               LD L,A
  25+ 4D7F CD E1 61         CALL HLx8
  26+ 4D82 ED 5B 76 4D      LD DE,(SPRATR_DATA)
  27+ 4D86 19               ADD HL,DE
  28+ 4D87 C9               RET
  29+ 4D88              ; *******************************************************************************************************
  30+ 4D88
  31+ 4D88              ; *******************************************************************************************************
  32+ 4D88              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
  33+ 4D88              ; struct {
  34+ 4D88              ; DW y
  35+ 4D88              ; DW x
  36+ 4D88              ; DW pattern (0-63)
  37+ 4D88              ; DW color
  38+ 4D88              ; } [32]
  39+ 4D88              ; will hide sprites whose location is outside of visible area
  40+ 4D88              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
  41+ 4D88              ; modifies AF, AF', BC, DE, HL
  42+ 4D88              SPRATR_UPDATE:
  43+ 4D88              	; check if update requested
  44+ 4D88 2A 74 4D     	LD HL, (SPRATR_UPDATE_FLAG)
  45+ 4D8B 7E           	LD A, (HL)
  46+ 4D8C B7           	OR A
  47+ 4D8D C8           	RET Z
  48+ 4D8E              .L0:
  49+ 4D8E 06 20        	LD B, 32 ; sprite number
  50+ 4D90 0E 98        	LD C, #98 ; register for vdp data output
  51+ 4D92              	; set VDP address
  52+ 4D92 3A AF FC         LD A,(SCRMOD)
  53+ 4D95 3D               DEC A
  54+ 4D96 20 05            JR NZ,.L4
  55+ 4D98 2A C3 F3         LD HL, (T32ATR)
  56+ 4D9B 18 03            JR .L5
  57+ 4D9D              .L4:
  58+ 4D9D 2A CD F3         LD HL, (GRPATR)
  59+ 4DA0              .L5:
  60+ 4DA0 3A 78 4D     	LD A, (SPRFLICKER_ENABLED)
  61+ 4DA3 B7           	OR A
  62+ 4DA4 28 03        	JR Z, .L3
  63+ 4DA6 3A 79 4D     	LD A, (FLICKER)
  64+ 4DA9              .L3:
  65+ 4DA9 5F           	LD E, A
  66+ 4DAA 08           	EX AF, AF'
  67+ 4DAB 7B           	LD A, E
  68+ 4DAC 87           	ADD A, A
  69+ 4DAD 87           	ADD A, A
  70+ 4DAE 16 00        	LD D, 0
  71+ 4DB0 5F           	LD E, A
  72+ 4DB1 19           	ADD HL, DE
  73+ 4DB2 CD CC 61     	CALL SETWRT_LOCAL
  74+ 4DB5 ED 73 7A 4D  	LD (TMPSP), SP
  75+ 4DB9 ED 7B 76 4D  	LD SP, (SPRATR_DATA)
  76+ 4DBD
  77+ 4DBD              .LOOP:
  78+ 4DBD E1           	POP HL
  79+ 4DBE 24           	INC H
  80+ 4DBF 28 0D        	JR Z, .L1 ; negative number between -256 and -1
  81+ 4DC1 25           	DEC H
  82+ 4DC2 20 15        	JR NZ, .OUT3 ; sprite vertically can't be visible
  83+ 4DC4 7D           	LD A, L
  84+ 4DC5 FE C0        	CP 192
  85+ 4DC7 30 10        	JR NC, .OUT3
  86+ 4DC9 3D           	DEC A ; due to VDP rule that top of screen is -1
  87+ 4DCA 57           	LD D, A
  88+ 4DCB C3 F2 4D     	JP .X
  89+ 4DCE              .L1:
  90+ 4DCE 7D           	LD A, L
  91+ 4DCF C6 10        	ADD 16
  92+ 4DD1 FA D9 4D     	JP M, .OUT3 ; below -16
  93+ 4DD4 2D           	DEC L ; due to VDP rule that top of screen is -1
  94+ 4DD5 55           	LD D, L
  95+ 4DD6 C3 F2 4D     	JP .X
  96+ 4DD9              .OUT3:
  97+ 4DD9 E1           	POP HL ; skip x value
  98+ 4DDA              .OUT2:
  99+ 4DDA E1           	POP HL ; skip pattern
 100+ 4DDB E1           	POP HL ; skip color
 101+ 4DDC 3E D1        	LD A, #D1
 102+ 4DDE ED 79        	OUT (C), A ; sprite hidden
 103+ 4DE0 00          > NOP
 103+ 4DE1 00          > NOP
 103+ 4DE2 00          > NOP
 104+ 4DE3 ED 79        	OUT (C), A ; value unimportant
 105+ 4DE5 00          > NOP
 105+ 4DE6 00          > NOP
 105+ 4DE7 00          > NOP
 106+ 4DE8 ED 79        	OUT (C), A ; value unimportant
 107+ 4DEA 00          > NOP
 107+ 4DEB 00          > NOP
 107+ 4DEC 00          > NOP
 108+ 4DED ED 79        	OUT (C), A ; value unimportant
 109+ 4DEF C3 1D 4E     	JP .NEXT
 110+ 4DF2              .X:
 111+ 4DF2 E1           	POP HL
 112+ 4DF3 24           	INC H
 113+ 4DF4 28 08        	JR Z, .L2
 114+ 4DF6 25           	DEC H
 115+ 4DF7 20 E1        	JR NZ, .OUT2
 116+ 4DF9 1E 00        	LD E, 0 ; EC bit
 117+ 4DFB C3 07 4E     	JP .XY
 118+ 4DFE              .L2:
 119+ 4DFE 7D           	LD A, L
 120+ 4DFF C6 20        	ADD 32
 121+ 4E01 FA DA 4D     	JP M, .OUT2
 122+ 4E04 6F           	LD L, A
 123+ 4E05 1E 80        	LD E, #80
 124+ 4E07              .XY:
 125+ 4E07 ED 51        	OUT (C), D
 126+ 4E09 3A E0 F3     	LD A, (REG1SAV)
 127+ 4E0C E6 02        	AND 2
 128+ 4E0E ED 69        	OUT (C), L
 129+ 4E10 E1           	POP HL ; pattern
 130+ 4E11 7D           	LD A, L
 131+ 4E12 28 02        	JR Z, .SMALLSPRITES
 132+ 4E14 87           	ADD A, A
 133+ 4E15 87           	ADD A, A ; needs to go at 4x
 134+ 4E16              .SMALLSPRITES:
 135+ 4E16 D3 98        	OUT (#98), A
 136+ 4E18 E1           	POP HL ; color
 137+ 4E19 7D           	LD A, L
 138+ 4E1A B3           	OR E
 139+ 4E1B D3 98        	OUT (#98), A
 140+ 4E1D              .NEXT:
 141+ 4E1D 08           	EX AF, AF'
 142+ 4E1E 3C           	INC A
 143+ 4E1F E6 1F        	AND 31
 144+ 4E21 C2 40 4E     	JP NZ, .NEXT2
 145+ 4E24 08           	EX AF, AF'
 146+ 4E25 3A AF FC         LD A,(SCRMOD)
 147+ 4E28 3D               DEC A
 148+ 4E29 20 05            JR NZ,.L6
 149+ 4E2B 2A C3 F3         LD HL, (T32ATR)
 150+ 4E2E 18 03            JR .L7
 151+ 4E30              .L6:
 152+ 4E30 2A CD F3         LD HL, (GRPATR)
 153+ 4E33              .L7:
 154+ 4E33              	; CALL SETWRT_LOCAL not allowed as SP modified
 155+ 4E33 7D           	LD	A, L
 156+ 4E34 D3 99        	OUT	(099H), A
 157+ 4E36 7C           	LD	A, H
 158+ 4E37 E6 3F        	AND	03FH
 159+ 4E39 F6 40        	OR	040H
 160+ 4E3B D3 99        	OUT	(099H), A
 161+ 4E3D C3 41 4E     	JP .NEXT3
 162+ 4E40              .NEXT2:
 163+ 4E40 08           	EX AF, AF'
 164+ 4E41              .NEXT3:
 165+ 4E41 05           	DEC B
 166+ 4E42 C2 BD 4D     	JP NZ, .LOOP
 167+ 4E45 08           	EX AF, AF'
 168+ 4E46 3C           	INC A
 169+ 4E47 32 79 4D     	LD (FLICKER), A
 170+ 4E4A
 171+ 4E4A ED 7B 7A 4D  	LD SP, (TMPSP)
 172+ 4E4E 2A 74 4D     	LD HL, (SPRATR_UPDATE_FLAG)
 173+ 4E51 36 00        	LD (HL), 0 ; zero out update flag
 174+ 4E53 C9           	RET
 175+ 4E54              ; *******************************************************************************************************
 176+ 4E54
 177+ 4E54              ; *******************************************************************************************************
 178+ 4E54              ; function to handle CALL SPRENABLE basic extension
 179+ 4E54              ; initializes sprites handler
 180+ 4E54              ; _SPRENABLE ( INT[][] sprites_attributes,
 181+ 4E54              ;			   INT update_variable,
 182+ 4E54              ;			   BYTE sprite_flicker_enabled )
 183+ 4E54              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA and SPRFLICKER_ENABLED
 184+ 4E54              SPRENABLE:
 185+ 4E54              	; opening (
 186+ 4E54 CD F2 62     	CALL CHKCHAR
 187+ 4E57 28           	DB '('
 188+ 4E58              	; get address of sprite attribute table DIM SA%(3,31)
 189+ 4E58 3E 02        	LD A,2
 190+ 4E5A 06 02        	LD B,2
 191+ 4E5C 11 20 04     	LD DE,#0420
 192+ 4E5F CD 1D 63     	CALL GET_BASIC_ARRAY_DATA_POINTER
 193+ 4E62 C5           	PUSH BC
 194+ 4E63              	; comma
 195+ 4E63 CD F2 62     	CALL CHKCHAR
 196+ 4E66 2C           	DB ','
 197+ 4E67              	; get address of sprite update flag
 198+ 4E67 DD 21 A4 5E  	LD IX, PTRGET
 199+ 4E6B CD 59 01     	CALL CALBAS
 200+ 4E6E D5           	PUSH DE
 201+ 4E6F              	; comma
 202+ 4E6F CD F2 62     	CALL CHKCHAR
 203+ 4E72 2C           	DB ','
 204+ 4E73              	; get flicker enabled flag
 205+ 4E73 DD 21 1C 52  	LD IX, GETBYT
 206+ 4E77 CD 59 01     	CALL CALBAS
 207+ 4E7A F5           	PUSH AF
 208+ 4E7B              	; ending )
 209+ 4E7B CD F2 62     	CALL CHKCHAR
 210+ 4E7E 29           	DB ')'
 211+ 4E7F
 212+ 4E7F F1           	POP AF ; get flicker flag
 213+ 4E80 B7           	OR A
 214+ 4E81 32 78 4D     	LD (SPRFLICKER_ENABLED), A
 215+ 4E84
 216+ 4E84 D1           	POP DE ; update variable location
 217+ 4E85 ED 53 74 4D  	LD (SPRATR_UPDATE_FLAG), DE
 218+ 4E89 D1           	POP DE ; address of sprite attribute table
 219+ 4E8A ED 53 76 4D  	LD (SPRATR_DATA), DE
 220+ 4E8E 3E 01        	LD A, 1
 221+ 4E90 32 73 4D     	LD (SPRATR_INIT_STATUS), A
 222+ 4E93 C9           	RET
 223+ 4E94              ; *******************************************************************************************************
 224+ 4E94
 225+ 4E94              ; *******************************************************************************************************
 226+ 4E94              ; function to handle CALL SPRDISABLE basic extension
 227+ 4E94              ; disables sprites handling
 228+ 4E94              ; _SPRDISABLE
 229+ 4E94              ; resets variable SPRATR_INIT_STATUS
 230+ 4E94              SPRDISABLE:
 231+ 4E94 AF           	XOR A
 232+ 4E95 32 73 4D     	LD (SPRATR_INIT_STATUS), A
 233+ 4E98 C9           	RET
 234+ 4E99              ; *******************************************************************************************************
 235+ 4E99
 236+ 4E99              ; *******************************************************************************************************
 237+ 4E99              ; function to handle CALL SPRSET basic extension
 238+ 4E99              ; sets position, and optionally pattern and color of sprite
 239+ 4E99              ; _SPRSET ( BYTE sprite_num , valid 0-31
 240+ 4E99              ;			INT x,
 241+ 4E99              ;			INT y,
 242+ 4E99              ;			INT pattern, valid 0-63, otherwise ignored
 243+ 4E99              ;			INT color, valid 0-15, otherwise ignored
 244+ 4E99              SPRSET:
 245+ 4E99 3A 73 4D     	LD A, (SPRATR_INIT_STATUS)
 246+ 4E9C B7           	OR A
 247+ 4E9D 20 05        	JR NZ, .L1
 248+ 4E9F 1E 05        	LD E, 5 ; illegal function call
 249+ 4EA1 C3 16 63     	JP THROW_ERROR
 250+ 4EA4              .L1:
 251+ 4EA4              	; opening (
 252+ 4EA4 CD F2 62     	CALL CHKCHAR
 253+ 4EA7 28           	DB '('
 254+ 4EA8              	; get sprite number
 255+ 4EA8 DD 21 1C 52  	LD IX, GETBYT
 256+ 4EAC CD 59 01     	CALL CALBAS
 257+ 4EAF F5           	PUSH AF
 258+ 4EB0              	; comma
 259+ 4EB0 CD F2 62     	CALL CHKCHAR
 260+ 4EB3 2C           	DB ','
 261+ 4EB4              	; get x
 262+ 4EB4 DD 21 2F 54  	LD IX, FRMQNT
 263+ 4EB8 CD 59 01     	CALL CALBAS
 264+ 4EBB D5           	PUSH DE
 265+ 4EBC              	; comma
 266+ 4EBC CD F2 62     	CALL CHKCHAR
 267+ 4EBF 2C           	DB ','
 268+ 4EC0              	; get y
 269+ 4EC0 DD 21 2F 54  	LD IX, FRMQNT
 270+ 4EC4 CD 59 01     	CALL CALBAS
 271+ 4EC7 D5           	PUSH DE
 272+ 4EC8              	; comma
 273+ 4EC8 CD F2 62     	CALL CHKCHAR
 274+ 4ECB 2C           	DB ','
 275+ 4ECC              	; get pattern
 276+ 4ECC DD 21 2F 54  	LD IX, FRMQNT
 277+ 4ED0 CD 59 01     	CALL CALBAS
 278+ 4ED3 D5           	PUSH DE
 279+ 4ED4              	; comma
 280+ 4ED4 CD F2 62     	CALL CHKCHAR
 281+ 4ED7 2C           	DB ','
 282+ 4ED8              	; get color
 283+ 4ED8 DD 21 2F 54  	LD IX, FRMQNT
 284+ 4EDC CD 59 01     	CALL CALBAS
 285+ 4EDF D5           	PUSH DE
 286+ 4EE0              	; ending )
 287+ 4EE0 CD F2 62     	CALL CHKCHAR
 288+ 4EE3 29           	DB ')'
 289+ 4EE4
 290+ 4EE4                  ; save position in BASIC text
 291+ 4EE4 E5           	PUSH HL
 292+ 4EE5 DD E1        	POP IX
 293+ 4EE7
 294+ 4EE7 C1           	POP BC ; color
 295+ 4EE8 D1           	POP DE ; pattern
 296+ 4EE9 D9           	EXX
 297+ 4EEA C1           	POP BC ; y
 298+ 4EEB D1           	POP DE ; x
 299+ 4EEC F1           	POP AF ; sprite number
 300+ 4EED FE 20        	CP 32
 301+ 4EEF 38 05        	JR C, .L2
 302+ 4EF1 1E 05        	LD E, 5 ; illegal function call
 303+ 4EF3 C3 16 63     	JP THROW_ERROR
 304+ 4EF6              .L2:
 305+ 4EF6              	; find location in sprite attributes table
 306+ 4EF6 D5           	PUSH DE
 307+ 4EF7 CD 7C 4D     	CALL GETnthSPRATTR
 308+ 4EFA D1           	POP DE
 309+ 4EFB              	; set y
 310+ 4EFB 71           	LD (HL), C
 311+ 4EFC 23           	INC HL
 312+ 4EFD 70           	LD (HL), B
 313+ 4EFE 23           	INC HL
 314+ 4EFF              	; set x
 315+ 4EFF 73           	LD (HL), E
 316+ 4F00 23           	INC HL
 317+ 4F01 72           	LD (HL), D
 318+ 4F02 23           	INC HL
 319+ 4F03 E5           	PUSH HL
 320+ 4F04 D9           	EXX
 321+ 4F05 E1           	POP HL
 322+ 4F06              	; check if 0<=pattern<64
 323+ 4F06 7A           	LD A, D
 324+ 4F07 B7           	OR A
 325+ 4F08 20 0B        	JR NZ, .L3
 326+ 4F0A 7B           	LD A, E
 327+ 4F0B FE 40        	CP 64
 328+ 4F0D 30 06        	JR NC, .L3
 329+ 4F0F              	; set pattern
 330+ 4F0F              	;ADD A, A
 331+ 4F0F              	;ADD A, A
 332+ 4F0F              	;ADD A, A
 333+ 4F0F 77           	LD (HL), A
 334+ 4F10 23           	INC HL
 335+ 4F11 72           	LD (HL), D
 336+ 4F12 23           	INC HL
 337+ 4F13 18 02        	JR .L4
 338+ 4F15              .L3:
 339+ 4F15              	; skip pattern
 340+ 4F15 23          > INC HL
 340+ 4F16 23          > INC HL
 341+ 4F17              .L4:
 342+ 4F17              	; check if 0<=color<16
 343+ 4F17 78           	LD A, B
 344+ 4F18 B7           	OR A
 345+ 4F19 20 08        	JR NZ, .L5
 346+ 4F1B 79           	LD A, C
 347+ 4F1C FE 10        	CP 16
 348+ 4F1E 30 03        	JR NC, .L5
 349+ 4F20              	; set color
 350+ 4F20 71           	LD (HL), C
 351+ 4F21 23           	INC HL
 352+ 4F22 70           	LD (HL), B
 353+ 4F23
 354+ 4F23              .L5:
 355+ 4F23 DD E5        	PUSH IX
 356+ 4F25 E1           	POP HL
 357+ 4F26 C9           	RET
 358+ 4F27              ; *******************************************************************************************************
 359+ 4F27
 360+ 4F27              ; *******************************************************************************************************
 361+ 4F27              ; function sets sprite location based on initial coordinates and offset provided
 362+ 4F27              ; input A=sprite number in SPRATR_DATA , 0-31
 363+ 4F27              ; input DE=initial x
 364+ 4F27              ; input BC=initial y
 365+ 4F27              ; input IY=location where delta y,x are located
 366+ 4F27              ; modifies AF, HL, IX
 367+ 4F27              SPRSET_DELTA_POS:
 368+ 4F27 D5           	PUSH DE
 369+ 4F28 CD 7C 4D     	CALL GETnthSPRATTR
 370+ 4F2B E5           	PUSH HL
 371+ 4F2C DD E1        	POP IX
 372+ 4F2E D1           	POP DE
 373+ 4F2F              	; IX=sprite's y location
 374+ 4F2F FD 6E 00     	LD L, (IY)
 375+ 4F32 FD 66 01     	LD H, (IY+1)
 376+ 4F35 09           	ADD HL, BC
 377+ 4F36 DD 75 00     	LD (IX), L
 378+ 4F39 DD 74 01     	LD (IX+1), H
 379+ 4F3C FD 6E 02     	LD L, (IY+2)
 380+ 4F3F FD 66 03     	LD H, (IY+3)
 381+ 4F42 19           	ADD HL, DE
 382+ 4F43 DD 75 02     	LD (IX+2), L
 383+ 4F46 DD 74 03     	LD (IX+3), H
 384+ 4F49 C9           	RET
 385+ 4F4A              ; *******************************************************************************************************
 386+ 4F4A
 387+ 4F4A              ; *******************************************************************************************************
 388+ 4F4A              ; function to handle CALL SPRGRPMOV basic extension
 389+ 4F4A              ; sets position of a group of sprites described with
 390+ 4F4A              ; { int sprite_num, int delta_y, int delta_x } [count]
 391+ 4F4A              ; _SPRGRPMOV ( INT x,
 392+ 4F4A              ;			   INT y,
 393+ 4F4A              ;			   BYTE count,
 394+ 4F4A              ;			   INT[2][count] data_ptr
 395+ 4F4A              ; will put ram in page 0 also, page 1 is already there
 396+ 4F4A              SPRGRPMOV:
 397+ 4F4A 3A 73 4D     	LD A, (SPRATR_INIT_STATUS)
 398+ 4F4D B7           	OR A
 399+ 4F4E CA 10 63     	JP Z,ILLEGAL_FUNCTION
 400+ 4F51              	; opening (
 401+ 4F51 CD F2 62     	CALL CHKCHAR
 402+ 4F54 28           	DB '('
 403+ 4F55              	; get x
 404+ 4F55 DD 21 2F 54  	LD IX, FRMQNT
 405+ 4F59 CD 59 01     	CALL CALBAS
 406+ 4F5C D5           	PUSH DE
 407+ 4F5D              	; comma
 408+ 4F5D CD F2 62     	CALL CHKCHAR
 409+ 4F60 2C           	DB ','
 410+ 4F61              	; get y
 411+ 4F61 DD 21 2F 54  	LD IX, FRMQNT
 412+ 4F65 CD 59 01     	CALL CALBAS
 413+ 4F68 D5           	PUSH DE
 414+ 4F69              	; comma
 415+ 4F69 CD F2 62     	CALL CHKCHAR
 416+ 4F6C 2C           	DB ','
 417+ 4F6D              	; get count
 418+ 4F6D DD 21 1C 52  	LD IX, GETBYT
 419+ 4F71 CD 59 01     	CALL CALBAS
 420+ 4F74 F5           	PUSH AF
 421+ 4F75              	; comma
 422+ 4F75 CD F2 62     	CALL CHKCHAR
 423+ 4F78 2C           	DB ','
 424+ 4F79              	; get sprite group definition array data pointer
 425+ 4F79 D1           	POP DE
 426+ 4F7A D5           	PUSH DE
 427+ 4F7B 5A           	LD E,D
 428+ 4F7C 16 03        	LD D,3
 429+ 4F7E 3E 02        	LD A,2
 430+ 4F80 47           	LD B,A
 431+ 4F81 CD 1D 63     	CALL GET_BASIC_ARRAY_DATA_POINTER
 432+ 4F84 C5           	PUSH BC
 433+ 4F85              	; ending )
 434+ 4F85 CD F2 62     	CALL CHKCHAR
 435+ 4F88 29           	DB ')'
 436+ 4F89
 437+ 4F89 E5           	PUSH HL
 438+ 4F8A DD E1        	POP IX
 439+ 4F8C
 440+ 4F8C E1           	POP HL ; data pointer
 441+ 4F8D C1           	POP BC ; count
 442+ 4F8E D9           	EXX
 443+ 4F8F C1           	POP BC ; y
 444+ 4F90 D1           	POP DE ; x
 445+ 4F91 D9           	EXX
 446+ 4F92
 447+ 4F92 DD E5        	PUSH IX ; save position in BASIC buffer
 448+ 4F94
 449+ 4F94 C5           	PUSH BC
 450+ 4F95 E5           	PUSH HL
 451+ 4F96 AF               XOR A
 452+ 4F97 CD E5 61         CALL GET_PAGE_INFO
 453+ 4F9A D9           	EXX
 454+ 4F9B E1           	POP HL
 455+ 4F9C F1           	POP AF
 456+ 4F9D D9           	EXX
 457+ 4F9E C5               PUSH BC
 458+ 4F9F D5               PUSH DE
 459+ 4FA0 D9           	EXX
 460+ 4FA1 F5           	PUSH AF
 461+ 4FA2 E5           	PUSH HL
 462+ 4FA3 D9           	EXX
 463+ 4FA4 3A 41 F3         LD A, (RAMAD0)
 464+ 4FA7 26 00            LD H, 0
 465+ 4FA9 CD 2C 62         CALL LOCAL_ENASLT
 466+ 4FAC FB           	EI
 467+ 4FAD E1           	POP HL
 468+ 4FAE C1           	POP BC
 469+ 4FAF 3E 01        	LD A,1
 470+ 4FB1 32 23 60     	LD (VRAM_UPDATE_IN_PROGRESS),A
 471+ 4FB4 CD C2 4F     	CALL .UPDATE_LOC
 472+ 4FB7 AF           	XOR A
 473+ 4FB8 32 23 60     	LD (VRAM_UPDATE_IN_PROGRESS),A
 474+ 4FBB D1               POP DE
 475+ 4FBC C1               POP BC
 476+ 4FBD CD 1C 62         CALL RESTORE_PAGE_INFO
 477+ 4FC0 E1           	POP HL
 478+ 4FC1 C9           	RET
 479+ 4FC2
 480+ 4FC2              .UPDATE_LOC:
 481+ 4FC2 7E           	LD A, (HL)
 482+ 4FC3 23           	INC HL
 483+ 4FC4 23           	INC HL
 484+ 4FC5 E5           	PUSH HL
 485+ 4FC6 FD E1        	POP IY
 486+ 4FC8 D9           	EXX
 487+ 4FC9 CD 27 4F     	CALL SPRSET_DELTA_POS
 488+ 4FCC D9           	EXX
 489+ 4FCD 23          > INC HL
 489+ 4FCE 23          > INC HL
 489+ 4FCF 23          > INC HL
 489+ 4FD0 23          > INC HL
 490+ 4FD1 10 EF        	DJNZ .UPDATE_LOC
 491+ 4FD3 C9           	RET
 492+ 4FD4              ; *******************************************************************************************************
 493+ 4FD4
# file closed: asm\SPRITES.asm
 120  4FD4               ENDIF
 121  4FD4
 122  4FD4               IF (ANIM_CMDS == 1)
 123  4FD4               INCLUDE "ANIMATION.asm"
# file opened: asm\ANIMATION.asm
   1+ 4FD4              ; sprite animation routines
   2+ 4FD4
   3+ 4FD4              ; number of animation items and pointer
   4+ 4FD4              ANIMITEMNUM:
   5+ 4FD4 00            DB 0
   6+ 4FD5              ANIMITEMPTR:
   7+ 4FD5 52 63         DW EXT_END
   8+ 4FD7              ; number of animation definitions and pointer
   9+ 4FD7              ANIMDEFNUM:
  10+ 4FD7 00            DB 0
  11+ 4FD8              ANIMDEFPTR:
  12+ 4FD8 52 63         DW EXT_END
  13+ 4FDA              ; number of links between sprite and animation definitions
  14+ 4FDA              ANIMSPRNUM:
  15+ 4FDA 00            DB 0
  16+ 4FDB              ANIMSPRPTR:
  17+ 4FDB 52 63         DW EXT_END
  18+ 4FDD              ; number of automatic sprite group move and animate structures
  19+ 4FDD              AUTOSGAMNUM:
  20+ 4FDD 00            DB 0
  21+ 4FDE              AUTOSGAMPTR:
  22+ 4FDE 52 63         DW EXT_END
  23+ 4FE0
  24+ 4FE0              ; ANIMATION ITEM
  25+ 4FE0              ; byte type = [0 - pattern and color change
  26+ 4FE0              ;              1 - pattern definition change ]
  27+ 4FE0              ; word ticks - number of ticks to hold this state
  28+ 4FE0              ; for type = 0
  29+ 4FE0              ;   byte pattern;
  30+ 4FE0              ;   byte color;
  31+ 4FE0              ; for type = 1
  32+ 4FE0              ;   work data_pointer;
  33+ 4FE0              ; total size = 5b
  34+ 4FE0
  35+ 4FE0              ; ANIMATION DEFINITION
  36+ 4FE0              ; byte number of items 1-15
  37+ 4FE0              ; byte[15] anim_item;
  38+ 4FE0              ; total size = 16b
  39+ 4FE0
  40+ 4FE0              ; SPRITE/CHAR ANIMATION
  41+ 4FE0              ; +00 byte sprite/char number;
  42+ 4FE0              ; +01 word time;
  43+ 4FE0              ; +03 byte current item;
  44+ 4FE0              ; +04 byte animation definition;
  45+ 4FE0              ; +05 byte cyclic;
  46+ 4FE0              ; +06 byte active;
  47+ 4FE0              ; +07 byte 0=sprite, 1-3 character bank
  48+ 4FE0              ; total size = 8b
  49+ 4FE0
  50+ 4FE0              ; AUTOMATIC SPRITE GROUP MOVE AND ANIMATE structure
  51+ 4FE0              ; +00 pointer to X variable
  52+ 4FE0              ; +02 pointer to Y variable
  53+ 4FE0              ; +04 minimum value
  54+ 4FE0              ; +06 maximal value
  55+ 4FE0              ; +08 delta value
  56+ 4FE0              ; +10 direction 0=horizontal, <>0 = vertical
  57+ 4FE0              ; +11 sprite group size
  58+ 4FE0              ; +13 sprite group pointer
  59+ 4FE0              ; +15 animation list size
  60+ 4FE0              ; +16 animation list pointer for negative delta values
  61+ 4FE0              ; +18 animation list pointer for positive delta values
  62+ 4FE0              ; +20 active flag
  63+ 4FE0              ; +21 ticks for movement
  64+ 4FE0              ; +22 timer
  65+ 4FE0              ; total = 24b
  66+ 4FE0
  67+ 4FE0              ; *******************************************************************************************************
  68+ 4FE0              ; helper function HL=A*5
  69+ 4FE0              ; changes HL,DE;
  70+ 4FE0              Ax5:
  71+ 4FE0 26 00            LD H,0
  72+ 4FE2 6F               LD L,A
  73+ 4FE3 54               LD D,H
  74+ 4FE4 5D               LD E,L
  75+ 4FE5 29               ADD HL,HL
  76+ 4FE6 29               ADD HL,HL
  77+ 4FE7 19               ADD HL,DE
  78+ 4FE8 C9               RET
  79+ 4FE9              ; *******************************************************************************************************
  80+ 4FE9
  81+ 4FE9              ; *******************************************************************************************************
  82+ 4FE9              ; helper function gets pointer to n-th animation item
  83+ 4FE9              ; changes HL,DE;
  84+ 4FE9              GETnthANIMITEM:
  85+ 4FE9 CD E0 4F         CALL Ax5
  86+ 4FEC ED 5B D5 4F      LD DE,(ANIMITEMPTR)
  87+ 4FF0 19               ADD HL,DE
  88+ 4FF1 C9               RET
  89+ 4FF2              ; *******************************************************************************************************
  90+ 4FF2
  91+ 4FF2              ; *******************************************************************************************************
  92+ 4FF2              ; helper function gets pointer to n-th entry in animation definition
  93+ 4FF2              ; changes HL,DE;
  94+ 4FF2              GETnthANIMDEF:
  95+ 4FF2 26 00            LD H,0
  96+ 4FF4 6F               LD L,A
  97+ 4FF5 CD E0 61         CALL HLx16
  98+ 4FF8 ED 5B D8 4F      LD DE,(ANIMDEFPTR)
  99+ 4FFC 19               ADD HL,DE
 100+ 4FFD C9               RET
 101+ 4FFE              ; *******************************************************************************************************
 102+ 4FFE
 103+ 4FFE              ; *******************************************************************************************************
 104+ 4FFE              ; helper function gets pointer to n-th entry in sprite animation
 105+ 4FFE              ; changes HL,DE;
 106+ 4FFE              GETnthSPRANIM:
 107+ 4FFE 26 00            LD H,0
 108+ 5000 6F               LD L,A
 109+ 5001 CD E1 61         CALL HLx8
 110+ 5004 ED 5B DB 4F      LD DE,(ANIMSPRPTR)
 111+ 5008 19               ADD HL,DE
 112+ 5009 C9               RET
 113+ 500A              ; *******************************************************************************************************
 114+ 500A
 115+ 500A              ; *******************************************************************************************************
 116+ 500A              ; helper function gets pointer to n-th entry in autosgam table
 117+ 500A              ; changes HL,DE;
 118+ 500A              GETnthAUTOSGAM:
 119+ 500A 26 00            LD H,0
 120+ 500C 6F               LD L,A
 121+ 500D CD E1 61         CALL HLx8
 122+ 5010 54               LD D,H
 123+ 5011 5D               LD E,L
 124+ 5012 29               ADD HL,HL
 125+ 5013 19               ADD HL,DE
 126+ 5014 ED 5B DE 4F      LD DE,(AUTOSGAMPTR)
 127+ 5018 19               ADD HL,DE
 128+ 5019 C9               RET
 129+ 501A              ; *******************************************************************************************************
 130+ 501A
 131+ 501A              ; *******************************************************************************************************
 132+ 501A              ; function to handle CALL MAXANIMITEMS basic extension
 133+ 501A              ; MAXANIMITEMS (BYTE number)
 134+ 501A              ; sets new number and moves memory buffers as needed
 135+ 501A              MAXANIMITEMS:
 136+ 501A              	; opening (
 137+ 501A CD F2 62     	CALL CHKCHAR
 138+ 501D 28           	DB '('
 139+ 501E              	; get value
 140+ 501E DD 21 1C 52  	LD IX, GETBYT
 141+ 5022 CD 59 01     	CALL CALBAS
 142+ 5025 F5               PUSH AF
 143+ 5026              	; ending )
 144+ 5026 CD F2 62     	CALL CHKCHAR
 145+ 5029 29           	DB ')'
 146+ 502A F1               POP AF
 147+ 502B
 148+ 502B              	; save position
 149+ 502B E5           	PUSH HL
 150+ 502C              .ENTRY:
 151+ 502C 47               LD B,A
 152+ 502D 3A D4 4F         LD A,(ANIMITEMNUM)
 153+ 5030 90               SUB B
 154+ 5031 28 28            JR Z, .EXIT; same value as before
 155+ 5033 FD 21 D8 4F      LD IY,ANIMDEFPTR
 156+ 5037 FA 5E 50         JP M, .INCREASE
 157+ 503A                  ; new value is lower than previous one
 158+ 503A CD 7D 50         CALL .SIZEDIFF
 159+ 503D CD 98 50         CALL .DECREASE_COMMON
 160+ 5040 2A DB 4F         LD HL,(ANIMSPRPTR)
 161+ 5043 AF               XOR A
 162+ 5044 ED 42            SBC HL,BC
 163+ 5046 22 DB 4F         LD (ANIMSPRPTR),HL
 164+ 5049              .E1:
 165+ 5049 2A DE 4F         LD HL,(AUTOSGAMPTR)
 166+ 504C AF               XOR A
 167+ 504D ED 42            SBC HL,BC
 168+ 504F 22 DE 4F         LD (AUTOSGAMPTR),HL
 169+ 5052              .E3:
 170+ 5052 2A 10 40         LD HL,(FREEMEMPTR)
 171+ 5055 AF               XOR A
 172+ 5056 ED 42            SBC HL,BC
 173+ 5058 22 10 40         LD (FREEMEMPTR),HL
 174+ 505B              .EXIT:
 175+ 505B FB               EI
 176+ 505C E1           	POP HL
 177+ 505D C9           	RET
 178+ 505E              .INCREASE:
 179+ 505E ED 44            NEG
 180+ 5060 CD 7D 50         CALL .SIZEDIFF
 181+ 5063 CD C4 50         CALL .INCREASE_COMMON
 182+ 5066 2A DB 4F         LD HL,(ANIMSPRPTR)
 183+ 5069 09               ADD HL,BC
 184+ 506A 22 DB 4F         LD (ANIMSPRPTR),HL
 185+ 506D              .E2:
 186+ 506D 2A DE 4F         LD HL,(AUTOSGAMPTR)
 187+ 5070 09               ADD HL,BC
 188+ 5071 22 DE 4F         LD (AUTOSGAMPTR),HL
 189+ 5074              .E4:
 190+ 5074 2A 10 40         LD HL,(FREEMEMPTR)
 191+ 5077 09               ADD HL,BC
 192+ 5078 22 10 40         LD (FREEMEMPTR),HL
 193+ 507B 18 DE            JR .EXIT
 194+ 507D              .SIZEDIFF:
 195+ 507D CD E0 4F         CALL Ax5
 196+ 5080 78               LD A,B
 197+ 5081 32 D4 4F         LD (ANIMITEMNUM),A
 198+ 5084 44               LD B,H
 199+ 5085 4D               LD C,L
 200+ 5086 C9               RET ; BC=size difference in bytes
 201+ 5087              .SIZETOMOVE:
 202+ 5087 D5               PUSH DE
 203+ 5088 2A 10 40         LD HL,(FREEMEMPTR)
 204+ 508B FD 5E 00         LD E,(IY)
 205+ 508E FD 56 01         LD D,(IY+1)
 206+ 5091 AF               XOR A
 207+ 5092 ED 52            SBC HL,DE
 208+ 5094 44               LD B,H
 209+ 5095 4D               LD C,L
 210+ 5096 D1               POP DE
 211+ 5097 C9               RET
 212+ 5098              .DECREASE_COMMON:
 213+ 5098 FD 6E 00         LD L,(IY)
 214+ 509B FD 66 01         LD H,(IY+1)
 215+ 509E AF               XOR A
 216+ 509F ED 42            SBC HL,BC
 217+ 50A1 EB               EX DE,HL
 218+ 50A2 C5               PUSH BC
 219+ 50A3 CD 87 50         CALL .SIZETOMOVE
 220+ 50A6 F3               DI
 221+ 50A7 78               LD A,B
 222+ 50A8 B1               OR C
 223+ 50A9 28 08            JR Z,.L1
 224+ 50AB FD 6E 00         LD L,(IY)
 225+ 50AE FD 66 01         LD H,(IY+1)
 226+ 50B1 ED B0            LDIR
 227+ 50B3              .L1:
 228+ 50B3 C1               POP BC
 229+ 50B4 FD 6E 00         LD L,(IY)
 230+ 50B7 FD 66 01         LD H,(IY+1)
 231+ 50BA AF               XOR A
 232+ 50BB ED 42            SBC HL,BC
 233+ 50BD FD 75 00         LD (IY),L
 234+ 50C0 FD 74 01         LD (IY+1),H
 235+ 50C3 C9               RET
 236+ 50C4              .INCREASE_COMMON:
 237+ 50C4 2A 10 40         LD HL,(FREEMEMPTR)
 238+ 50C7 2B               DEC HL
 239+ 50C8 AF               XOR A
 240+ 50C9 ED 42            SBC HL,BC
 241+ 50CB EB               EX DE,HL
 242+ 50CC C5               PUSH BC
 243+ 50CD CD 87 50         CALL .SIZETOMOVE
 244+ 50D0 F3               DI
 245+ 50D1 78               LD A,B
 246+ 50D2 B1               OR C
 247+ 50D3 28 06            JR Z,.L2
 248+ 50D5 2A 10 40         LD HL,(FREEMEMPTR)
 249+ 50D8 2B               DEC HL
 250+ 50D9 ED B8            LDDR
 251+ 50DB              .L2:
 252+ 50DB C1               POP BC
 253+ 50DC FD 6E 00         LD L,(IY)
 254+ 50DF FD 66 01         LD H,(IY+1)
 255+ 50E2 09               ADD HL,BC
 256+ 50E3 FD 75 00         LD (IY),L
 257+ 50E6 FD 74 01         LD (IY+1),H
 258+ 50E9 C9               RET
 259+ 50EA              ; *******************************************************************************************************
 260+ 50EA
 261+ 50EA              ; *******************************************************************************************************
 262+ 50EA              ; function to handle CALL ANIMITEMPAT basic extension
 263+ 50EA              ; ANIMITEMPAT ( BYTE id,
 264+ 50EA              ;               INT ticks,
 265+ 50EA              ;               BYTE pattern,
 266+ 50EA              ;               BYTE color )
 267+ 50EA              ; fills animation item data, returns an error if out of bounds
 268+ 50EA              ANIMITEMPAT:
 269+ 50EA                  ; opening (
 270+ 50EA CD F2 62     	CALL CHKCHAR
 271+ 50ED 28           	DB '('
 272+ 50EE              	; get id
 273+ 50EE DD 21 1C 52  	LD IX, GETBYT
 274+ 50F2 CD 59 01     	CALL CALBAS
 275+ 50F5 F5               PUSH AF
 276+ 50F6                  ; check if out of bounds
 277+ 50F6 3C               INC A
 278+ 50F7 4F               LD C,A
 279+ 50F8 3A D4 4F         LD A,(ANIMITEMNUM)
 280+ 50FB B9               CP C
 281+ 50FC DA 08 63         JP C,SUBSCRIPT_OUT_OF_RANGE
 282+ 50FF              	; comma
 283+ 50FF CD F2 62     	CALL CHKCHAR
 284+ 5102 2C           	DB ','
 285+ 5103              	; get ticks
 286+ 5103 DD 21 2F 54  	LD IX, FRMQNT
 287+ 5107 CD 59 01     	CALL CALBAS
 288+ 510A D5           	PUSH DE
 289+ 510B              	; comma
 290+ 510B CD F2 62     	CALL CHKCHAR
 291+ 510E 2C           	DB ','
 292+ 510F              	; get pattern
 293+ 510F DD 21 1C 52  	LD IX, GETBYT
 294+ 5113 CD 59 01     	CALL CALBAS
 295+ 5116 F5               PUSH AF
 296+ 5117              	; comma
 297+ 5117 CD F2 62     	CALL CHKCHAR
 298+ 511A 2C           	DB ','
 299+ 511B              	; get color
 300+ 511B DD 21 1C 52  	LD IX, GETBYT
 301+ 511F CD 59 01     	CALL CALBAS
 302+ 5122 F5               PUSH AF
 303+ 5123              	; ending )
 304+ 5123 CD F2 62     	CALL CHKCHAR
 305+ 5126 29           	DB ')'
 306+ 5127              .ENTRY:
 307+ 5127 E5               PUSH HL
 308+ 5128 DD E1            POP IX
 309+ 512A D9               EXX
 310+ 512B C1               POP BC ; color
 311+ 512C D1               POP DE ; pattern
 312+ 512D E1               POP HL ; ticks
 313+ 512E D9               EXX
 314+ 512F F1               POP AF
 315+ 5130 CD E9 4F         CALL GETnthANIMITEM
 316+ 5133 E5               PUSH HL
 317+ 5134 FD E1            POP IY
 318+ 5136 D9               EXX
 319+ 5137 FD 36 00 00      LD (IY),0 ; type=0
 320+ 513B FD 75 01         LD (IY+1),L
 321+ 513E FD 74 02         LD (IY+2),H
 322+ 5141 FD 72 03         LD (IY+3),D
 323+ 5144 FD 70 04         LD (IY+4),B
 324+ 5147
 325+ 5147 DD E5            PUSH IX
 326+ 5149 E1               POP HL
 327+ 514A C9               RET
 328+ 514B              ; *******************************************************************************************************
 329+ 514B
 330+ 514B              ; *******************************************************************************************************
 331+ 514B              ; function to handle CALL ANIMITEMPTR basic extension
 332+ 514B              ; ANIMITEMPTR ( BYTE id,
 333+ 514B              ;               INT ticks,
 334+ 514B              ;               INT pointer,
 335+ 514B              ; fills animation item data, returns an error if out of bounds
 336+ 514B              ANIMITEMPTR_CMD:
 337+ 514B                  ; opening (
 338+ 514B CD F2 62     	CALL CHKCHAR
 339+ 514E 28           	DB '('
 340+ 514F              	; get id
 341+ 514F DD 21 1C 52  	LD IX, GETBYT
 342+ 5153 CD 59 01     	CALL CALBAS
 343+ 5156 F5               PUSH AF
 344+ 5157                  ; check if out of bounds
 345+ 5157 3C               INC A
 346+ 5158 4F               LD C,A
 347+ 5159 3A D4 4F         LD A,(ANIMITEMNUM)
 348+ 515C B9               CP C
 349+ 515D DA 08 63         JP C,SUBSCRIPT_OUT_OF_RANGE
 350+ 5160              	; comma
 351+ 5160 CD F2 62     	CALL CHKCHAR
 352+ 5163 2C           	DB ','
 353+ 5164              	; get ticks
 354+ 5164 DD 21 2F 54  	LD IX, FRMQNT
 355+ 5168 CD 59 01     	CALL CALBAS
 356+ 516B D5           	PUSH DE
 357+ 516C              	; comma
 358+ 516C CD F2 62     	CALL CHKCHAR
 359+ 516F 2C           	DB ','
 360+ 5170              	; get pointer
 361+ 5170 DD 21 2F 54  	LD IX, FRMQNT
 362+ 5174 CD 59 01     	CALL CALBAS
 363+ 5177 D5           	PUSH DE
 364+ 5178              	; ending )
 365+ 5178 CD F2 62     	CALL CHKCHAR
 366+ 517B 29           	DB ')'
 367+ 517C              .ENTRY:
 368+ 517C E5               PUSH HL
 369+ 517D DD E1            POP IX
 370+ 517F D9               EXX
 371+ 5180 D1               POP DE ; pointer
 372+ 5181 E1               POP HL ; ticks
 373+ 5182 D9               EXX
 374+ 5183 F1               POP AF
 375+ 5184 CD E9 4F         CALL GETnthANIMITEM
 376+ 5187 E5               PUSH HL
 377+ 5188 FD E1            POP IY
 378+ 518A D9               EXX
 379+ 518B FD 36 00 01      LD (IY),1 ; type=1
 380+ 518F FD 75 01         LD (IY+1),L
 381+ 5192 FD 74 02         LD (IY+2),H
 382+ 5195 FD 73 03         LD (IY+3),E
 383+ 5198 FD 72 04         LD (IY+4),D
 384+ 519B
 385+ 519B DD E5            PUSH IX
 386+ 519D E1               POP HL
 387+ 519E C9               RET
 388+ 519F              ; *******************************************************************************************************
 389+ 519F
 390+ 519F              ; *******************************************************************************************************
 391+ 519F              ; function to handle CALL MAXANIMDEFS basic extension
 392+ 519F              ; MAXANIMDEFS (BYTE number)
 393+ 519F              ; sets new number and moves memory buffers as needed
 394+ 519F              MAXANIMDEFS:
 395+ 519F              	; opening (
 396+ 519F CD F2 62     	CALL CHKCHAR
 397+ 51A2 28           	DB '('
 398+ 51A3              	; get value
 399+ 51A3 DD 21 1C 52  	LD IX, GETBYT
 400+ 51A7 CD 59 01     	CALL CALBAS
 401+ 51AA F5               PUSH AF
 402+ 51AB              	; ending )
 403+ 51AB CD F2 62     	CALL CHKCHAR
 404+ 51AE 29           	DB ')'
 405+ 51AF F1               POP AF
 406+ 51B0
 407+ 51B0              	; save position
 408+ 51B0 E5           	PUSH HL
 409+ 51B1              .ENTRY:
 410+ 51B1 47               LD B,A
 411+ 51B2 3A D7 4F         LD A,(ANIMDEFNUM)
 412+ 51B5 90               SUB B
 413+ 51B6 CA 5B 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 414+ 51B9 FD 21 DB 4F      LD IY,ANIMSPRPTR
 415+ 51BD FA C9 51         JP M, .INCREASE
 416+ 51C0                  ; new value is lower than previous one
 417+ 51C0 CD D4 51         CALL .SIZEDIFF
 418+ 51C3 CD 98 50         CALL MAXANIMITEMS.DECREASE_COMMON
 419+ 51C6 C3 49 50         JP MAXANIMITEMS.E1
 420+ 51C9              .INCREASE:
 421+ 51C9 ED 44            NEG
 422+ 51CB CD D4 51         CALL .SIZEDIFF
 423+ 51CE CD C4 50         CALL MAXANIMITEMS.INCREASE_COMMON
 424+ 51D1 C3 6D 50         JP MAXANIMITEMS.E2
 425+ 51D4              .SIZEDIFF:
 426+ 51D4 26 00            LD H,0
 427+ 51D6 6F               LD L,A
 428+ 51D7 CD E0 61         CALL HLx16
 429+ 51DA 78               LD A,B
 430+ 51DB 32 D7 4F         LD (ANIMDEFNUM),A
 431+ 51DE 44               LD B,H
 432+ 51DF 4D               LD C,L
 433+ 51E0 C9               RET ; BC=size difference in bytes
 434+ 51E1              ; *******************************************************************************************************
 435+ 51E1
 436+ 51E1              ; *******************************************************************************************************
 437+ 51E1              ; function to handle CALL ANIMDEF basic extension
 438+ 51E1              ; ANIMITEMPAT ( BYTE id,
 439+ 51E1              ;               BYTE size,
 440+ 51E1              ;               INT[] list )
 441+ 51E1              ; fills animation definition data, returns an error if out of bounds, or invalid type
 442+ 51E1              ANIMDEF:
 443+ 51E1                  ; opening (
 444+ 51E1 CD F2 62     	CALL CHKCHAR
 445+ 51E4 28           	DB '('
 446+ 51E5              	; get id
 447+ 51E5 DD 21 1C 52  	LD IX, GETBYT
 448+ 51E9 CD 59 01     	CALL CALBAS
 449+ 51EC F5               PUSH AF
 450+ 51ED                  ; check if out of bounds
 451+ 51ED 3C               INC A
 452+ 51EE 4F               LD C,A
 453+ 51EF 3A D7 4F         LD A,(ANIMDEFNUM)
 454+ 51F2 B9               CP C
 455+ 51F3 DA 08 63         JP C,SUBSCRIPT_OUT_OF_RANGE
 456+ 51F6              	; comma
 457+ 51F6 CD F2 62     	CALL CHKCHAR
 458+ 51F9 2C           	DB ','
 459+ 51FA              	; get size
 460+ 51FA DD 21 1C 52  	LD IX, GETBYT
 461+ 51FE CD 59 01     	CALL CALBAS
 462+ 5201 FE 10            CP 16
 463+ 5203 D2 0C 63         JP NC, OVERFLOW
 464+ 5206 B7               OR A
 465+ 5207 CA 0C 63         JP Z, OVERFLOW
 466+ 520A F5           	PUSH AF
 467+ 520B              	; comma
 468+ 520B CD F2 62     	CALL CHKCHAR
 469+ 520E 2C           	DB ','
 470+ 520F              	; get pointer to a list of animation items in integer array format
 471+ 520F                  ; get array pointer
 472+ 520F D1               POP DE
 473+ 5210 D5               PUSH DE
 474+ 5211 3E 02            LD A,2
 475+ 5213 06 01            LD B,1
 476+ 5215 CD 1D 63         CALL GET_BASIC_ARRAY_DATA_POINTER
 477+ 5218 C5               PUSH BC
 478+ 5219              	; ending )
 479+ 5219 CD F2 62     	CALL CHKCHAR
 480+ 521C 29           	DB ')'
 481+ 521D              .ENTRY:
 482+ 521D E5               PUSH HL
 483+ 521E DD E1            POP IX
 484+ 5220 D1               POP DE ; pointer to INT array
 485+ 5221 C1               POP BC ; B=item number
 486+ 5222 F1               POP AF ; id
 487+ 5223 D5               PUSH DE
 488+ 5224 CD F2 4F         CALL GETnthANIMDEF
 489+ 5227 D1               POP DE
 490+ 5228 70               LD (HL),B
 491+ 5229              .L1:
 492+ 5229 23               INC HL
 493+ 522A 1A               LD A,(DE)
 494+ 522B 13          > INC DE
 494+ 522C 13          > INC DE
 495+ 522D 77               LD (HL),A
 496+ 522E 10 F9            DJNZ .L1
 497+ 5230 DD E5            PUSH IX
 498+ 5232 E1               POP HL
 499+ 5233 C9               RET
 500+ 5234              ; *******************************************************************************************************
 501+ 5234
 502+ 5234              ; *******************************************************************************************************
 503+ 5234              ; function to handle CALL MAXANIMSPRS basic extension
 504+ 5234              ; MAXANIMSPRS (BYTE number)
 505+ 5234              ; sets new number and moves memory buffers as needed
 506+ 5234              MAXANIMSPRS:
 507+ 5234              	; opening (
 508+ 5234 CD F2 62     	CALL CHKCHAR
 509+ 5237 28           	DB '('
 510+ 5238              	; get value
 511+ 5238 DD 21 1C 52  	LD IX, GETBYT
 512+ 523C CD 59 01     	CALL CALBAS
 513+ 523F F5               PUSH AF
 514+ 5240              	; ending )
 515+ 5240 CD F2 62     	CALL CHKCHAR
 516+ 5243 29           	DB ')'
 517+ 5244 F1               POP AF
 518+ 5245
 519+ 5245              	; save position
 520+ 5245 E5           	PUSH HL
 521+ 5246              .ENTRY:
 522+ 5246 47               LD B,A
 523+ 5247 3A DA 4F         LD A,(ANIMSPRNUM)
 524+ 524A 90               SUB B
 525+ 524B CA 5B 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 526+ 524E FD 21 DE 4F      LD IY,AUTOSGAMPTR
 527+ 5252 FA 5E 52         JP M, .INCREASE
 528+ 5255                  ; new value is lower than previous one
 529+ 5255 CD 7D 52         CALL .SIZEDIFF
 530+ 5258 CD 98 50         CALL MAXANIMITEMS.DECREASE_COMMON
 531+ 525B C3 52 50         JP MAXANIMITEMS.E3
 532+ 525E              .INCREASE:
 533+ 525E ED 44            NEG
 534+ 5260 F5               PUSH AF; save difference for later to set active flag to 0 of new entires
 535+ 5261 CD 7D 52         CALL .SIZEDIFF
 536+ 5264 CD C4 50         CALL MAXANIMITEMS.INCREASE_COMMON
 537+ 5267 AF               XOR A
 538+ 5268 ED 42            SBC HL,BC ; location of new stuff
 539+ 526A F1               POP AF
 540+ 526B 47               LD B,A
 541+ 526C 11 08 00         LD DE,8
 542+ 526F E5               PUSH HL
 543+ 5270 DD E1            POP IX
 544+ 5272              .L1:
 545+ 5272 DD 36 06 00      LD (IX+6),0
 546+ 5276 DD 19            ADD IX,DE
 547+ 5278 10 F8            DJNZ .L1
 548+ 527A C3 74 50         JP MAXANIMITEMS.E4
 549+ 527D              .SIZEDIFF:
 550+ 527D 26 00            LD H,0
 551+ 527F 6F               LD L,A
 552+ 5280 CD E1 61         CALL HLx8
 553+ 5283 78               LD A,B
 554+ 5284 32 DA 4F         LD (ANIMSPRNUM),A
 555+ 5287 44               LD B,H
 556+ 5288 4D               LD C,L
 557+ 5289 C9               RET ; BC=size difference in bytes
 558+ 528A              ; *******************************************************************************************************
 559+ 528A
 560+ 528A              ; *******************************************************************************************************
 561+ 528A              ; function to handle CALL ANIMSPRITE basic extension
 562+ 528A              ; ANIMSPRITE ( BYTE id,
 563+ 528A              ;              BYTE sprite_number,
 564+ 528A              ;              BYTE animation_definition_id,
 565+ 528A              ;              BYTE cyclic_flag )
 566+ 528A              ; fills sprite animation data, returns an error if out of bounds, or invalid type
 567+ 528A              ANIMSPRITE:
 568+ 528A                  ; opening (
 569+ 528A CD F2 62     	CALL CHKCHAR
 570+ 528D 28           	DB '('
 571+ 528E              	; get sprite animation id
 572+ 528E DD 21 1C 52  	LD IX, GETBYT
 573+ 5292 CD 59 01     	CALL CALBAS
 574+ 5295 F5               PUSH AF
 575+ 5296 3C               INC A
 576+ 5297 4F               LD C,A
 577+ 5298 3A DA 4F         LD A,(ANIMSPRNUM)
 578+ 529B B9               CP C
 579+ 529C DA 08 63         JP C,SUBSCRIPT_OUT_OF_RANGE
 580+ 529F              	; comma
 581+ 529F CD F2 62     	CALL CHKCHAR
 582+ 52A2 2C           	DB ','
 583+ 52A3              	; get sprite number
 584+ 52A3 DD 21 1C 52  	LD IX, GETBYT
 585+ 52A7 CD 59 01     	CALL CALBAS
 586+ 52AA F5               PUSH AF
 587+ 52AB                  ; check if out of bounds
 588+ 52AB FE 20            CP 32
 589+ 52AD D2 08 63         JP NC, SUBSCRIPT_OUT_OF_RANGE
 590+ 52B0              	; comma
 591+ 52B0 CD F2 62     	CALL CHKCHAR
 592+ 52B3 2C           	DB ','
 593+ 52B4              	; get animation definition id
 594+ 52B4 DD 21 1C 52  	LD IX, GETBYT
 595+ 52B8 CD 59 01     	CALL CALBAS
 596+ 52BB F5               PUSH AF
 597+ 52BC 3C               INC A
 598+ 52BD 4F               LD C,A
 599+ 52BE 3A D7 4F         LD A,(ANIMDEFNUM)
 600+ 52C1 B9               CP C
 601+ 52C2 DA 08 63         JP C,SUBSCRIPT_OUT_OF_RANGE
 602+ 52C5              	; comma
 603+ 52C5 CD F2 62     	CALL CHKCHAR
 604+ 52C8 2C           	DB ','
 605+ 52C9              	; get cyclic flag
 606+ 52C9 DD 21 1C 52  	LD IX, GETBYT
 607+ 52CD CD 59 01         CALL CALBAS
 608+ 52D0 F5           	PUSH AF
 609+ 52D1              	; ending )
 610+ 52D1 CD F2 62     	CALL CHKCHAR
 611+ 52D4 29           	DB ')'
 612+ 52D5              .ENTRY:
 613+ 52D5 E5               PUSH HL
 614+ 52D6 DD E1            POP IX
 615+ 52D8 D9               EXX
 616+ 52D9 D1               POP DE ; cyclic
 617+ 52DA C1               POP BC ; animation definition id
 618+ 52DB E1               POP HL ; sprite number
 619+ 52DC D9               EXX
 620+ 52DD F1               POP AF ; sprite animation id
 621+ 52DE CD FE 4F         CALL GETnthSPRANIM
 622+ 52E1 E5               PUSH HL
 623+ 52E2 FD E1            POP IY
 624+ 52E4 D9               EXX
 625+ 52E5 FD 74 00         LD (IY),H
 626+ 52E8 FD 70 04         LD (IY+4),B
 627+ 52EB FD 72 05         LD (IY+5),D
 628+ 52EE                  ;LD (IY+6),0 -- not needed as set in MAXANIMSPRS
 629+ 52EE                  ; following will do preparation for ANIMSTEP situation
 630+ 52EE                  ; current item set to above limit and timer to 1
 631+ 52EE                  ; any call to ANIMSTEP will switch and setup to first item for cyclic
 632+ 52EE FD 36 03 FF      LD (IY+3),255
 633+ 52F2 FD 36 01 01      LD (IY+1),1
 634+ 52F6 FD 36 02 00      LD (IY+2),0
 635+ 52FA                  ; mark as sprite animation
 636+ 52FA FD 36 07 00      LD (IY+7),0
 637+ 52FE DD E5            PUSH IX
 638+ 5300 E1               POP HL
 639+ 5301 C9               RET
 640+ 5302              ; *******************************************************************************************************
 641+ 5302
 642+ 5302              ; *******************************************************************************************************
 643+ 5302              ; function to handle CALL ANIMCHAR basic extension
 644+ 5302              ; ANIMCHAR ( BYTE id,
 645+ 5302              ;            INT character number 0-767,
 646+ 5302              ;            BYTE animation_definition_id,
 647+ 5302              ;            BYTE cyclic_flag )
 648+ 5302              ; fills sprite animation data, returns an error if out of bounds, or invalid type
 649+ 5302              ANIMCHAR:
 650+ 5302                  ; opening (
 651+ 5302 CD F2 62     	CALL CHKCHAR
 652+ 5305 28           	DB '('
 653+ 5306              	; get sprite animation id
 654+ 5306 DD 21 1C 52  	LD IX, GETBYT
 655+ 530A CD 59 01     	CALL CALBAS
 656+ 530D F5               PUSH AF
 657+ 530E 3C               INC A
 658+ 530F 4F               LD C,A
 659+ 5310 3A DA 4F         LD A,(ANIMSPRNUM)
 660+ 5313 B9               CP C
 661+ 5314 DA 08 63         JP C,SUBSCRIPT_OUT_OF_RANGE
 662+ 5317              	; comma
 663+ 5317 CD F2 62     	CALL CHKCHAR
 664+ 531A 2C           	DB ','
 665+ 531B              	; get character number
 666+ 531B DD 21 2F 54  	LD IX, FRMQNT
 667+ 531F CD 59 01     	CALL CALBAS
 668+ 5322 D5               PUSH DE
 669+ 5323                  ; check if out of bounds
 670+ 5323 7A               LD A,D
 671+ 5324 FE 03            CP 3
 672+ 5326 D2 08 63         JP NC, SUBSCRIPT_OUT_OF_RANGE
 673+ 5329              	; comma
 674+ 5329 CD F2 62     	CALL CHKCHAR
 675+ 532C 2C           	DB ','
 676+ 532D              	; get animation definition id
 677+ 532D DD 21 1C 52  	LD IX, GETBYT
 678+ 5331 CD 59 01     	CALL CALBAS
 679+ 5334 F5               PUSH AF
 680+ 5335 3C               INC A
 681+ 5336 4F               LD C,A
 682+ 5337 3A D7 4F         LD A,(ANIMDEFNUM)
 683+ 533A B9               CP C
 684+ 533B DA 08 63         JP C,SUBSCRIPT_OUT_OF_RANGE
 685+ 533E              	; comma
 686+ 533E CD F2 62     	CALL CHKCHAR
 687+ 5341 2C           	DB ','
 688+ 5342              	; get cyclic flag
 689+ 5342 DD 21 1C 52  	LD IX, GETBYT
 690+ 5346 CD 59 01         CALL CALBAS
 691+ 5349 F5           	PUSH AF
 692+ 534A              	; ending )
 693+ 534A CD F2 62     	CALL CHKCHAR
 694+ 534D 29           	DB ')'
 695+ 534E              .ENTRY:
 696+ 534E E5               PUSH HL
 697+ 534F DD E1            POP IX
 698+ 5351 D9               EXX
 699+ 5352 D1               POP DE ; cyclic
 700+ 5353 C1               POP BC ; animation definition id
 701+ 5354 E1               POP HL ; character number
 702+ 5355 D9               EXX
 703+ 5356 F1               POP AF ; sprite animation id
 704+ 5357 CD FE 4F         CALL GETnthSPRANIM
 705+ 535A E5               PUSH HL
 706+ 535B FD E1            POP IY
 707+ 535D D9               EXX
 708+ 535E FD 75 00         LD (IY),L
 709+ 5361 24               INC H ; save character bank+1
 710+ 5362 FD 74 07         LD (IY+7),H
 711+ 5365 FD 70 04         LD (IY+4),B
 712+ 5368 FD 72 05         LD (IY+5),D
 713+ 536B                  ;LD (IY+6),0 -- not needed as set in MAXANIMSPRS
 714+ 536B                  ; following will do preparation for ANIMSTEP situation
 715+ 536B                  ; current item set to above limit and timer to 1
 716+ 536B                  ; any call to ANIMSTEP will switch and setup to first item for cyclic
 717+ 536B FD 36 03 FF      LD (IY+3),255
 718+ 536F FD 36 01 01      LD (IY+1),1
 719+ 5373 FD 36 02 00      LD (IY+2),0
 720+ 5377 DD E5            PUSH IX
 721+ 5379 E1               POP HL
 722+ 537A C9               RET
 723+ 537B              ; *******************************************************************************************************
 724+ 537B
 725+ 537B              ; *******************************************************************************************************
 726+ 537B              ; function to handle CALL MAXAUTOSGAMS basic extension
 727+ 537B              ; MAXAUTOSGAMS (BYTE number)
 728+ 537B              ; sets new number and moves memory buffers as needed
 729+ 537B              MAXAUTOSGAMS:
 730+ 537B              	; opening (
 731+ 537B CD F2 62     	CALL CHKCHAR
 732+ 537E 28           	DB '('
 733+ 537F              	; get value
 734+ 537F DD 21 1C 52  	LD IX, GETBYT
 735+ 5383 CD 59 01     	CALL CALBAS
 736+ 5386 F5               PUSH AF
 737+ 5387              	; ending )
 738+ 5387 CD F2 62     	CALL CHKCHAR
 739+ 538A 29           	DB ')'
 740+ 538B F1               POP AF
 741+ 538C
 742+ 538C              	; save position
 743+ 538C E5           	PUSH HL
 744+ 538D              .ENTRY:
 745+ 538D 47               LD B,A
 746+ 538E 3A DD 4F         LD A,(AUTOSGAMNUM)
 747+ 5391 90               SUB B
 748+ 5392 CA 5B 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 749+ 5395 FD 21 10 40      LD IY,FREEMEMPTR
 750+ 5399 FA A5 53         JP M, .INCREASE
 751+ 539C                  ; new value is lower than previous one
 752+ 539C CD C4 53         CALL .SIZEDIFF
 753+ 539F CD 98 50         CALL MAXANIMITEMS.DECREASE_COMMON
 754+ 53A2 C3 5B 50         JP MAXANIMITEMS.EXIT
 755+ 53A5              .INCREASE:
 756+ 53A5 ED 44            NEG
 757+ 53A7 F5               PUSH AF; save difference for later to set active flag to 0 of new entires
 758+ 53A8 CD C4 53         CALL .SIZEDIFF
 759+ 53AB CD C4 50         CALL MAXANIMITEMS.INCREASE_COMMON
 760+ 53AE AF               XOR A
 761+ 53AF ED 42            SBC HL,BC ; location of new stuff
 762+ 53B1 F1               POP AF
 763+ 53B2 47               LD B,A
 764+ 53B3 11 18 00         LD DE,24
 765+ 53B6 E5               PUSH HL
 766+ 53B7 DD E1            POP IX
 767+ 53B9              .L1:
 768+ 53B9 DD 36 14 00      LD (IX+20),0 ; active flag
 769+ 53BD DD 19            ADD IX,DE
 770+ 53BF 10 F8            DJNZ .L1
 771+ 53C1 C3 5B 50         JP MAXANIMITEMS.EXIT
 772+ 53C4              .SIZEDIFF:
 773+ 53C4 26 00            LD H,0
 774+ 53C6 6F               LD L,A
 775+ 53C7 CD E1 61         CALL HLx8
 776+ 53CA 54               LD D,H
 777+ 53CB 5D               LD E,L
 778+ 53CC 29               ADD HL,HL
 779+ 53CD 19               ADD HL,DE
 780+ 53CE 78               LD A,B
 781+ 53CF 32 DD 4F         LD (AUTOSGAMNUM),A
 782+ 53D2 44               LD B,H
 783+ 53D3 4D               LD C,L
 784+ 53D4 C9               RET ; BC=size difference in bytes
 785+ 53D5              ; *******************************************************************************************************
 786+ 53D5
 787+ 53D5              ; *******************************************************************************************************
 788+ 53D5              ; function to handle CALL ANIMSTEP basic extension
 789+ 53D5              ; two forms
 790+ 53D5              ; ANIMSTEP ( BYTE id )
 791+ 53D5              ; or
 792+ 53D5              ; ANIMSTEP ( BYTE item_number,
 793+ 53D5              ;            INT[] sprite_animations )
 794+ 53D5              ; sets active flag to 1
 795+ 53D5              ANIMSTEP:
 796+ 53D5 11 52 54         LD DE,ANIMSTARTSTOP_COMMON.STEP
 797+ 53D8 18 08            JR ANIMSTARTSTOP_COMMON
 798+ 53DA              ; *******************************************************************************************************
 799+ 53DA              ; *******************************************************************************************************
 800+ 53DA              ; function to handle CALL ANIMSTART basic extension
 801+ 53DA              ; two forms
 802+ 53DA              ; ANIMSTART ( BYTE id )
 803+ 53DA              ; or
 804+ 53DA              ; ANIMSTART ( BYTE item_number,
 805+ 53DA              ;             INT[] sprite_animations )
 806+ 53DA              ; sets active flag to 1
 807+ 53DA              ANIMSTART:
 808+ 53DA 11 40 54         LD DE,ANIMSTARTSTOP_COMMON.START
 809+ 53DD 18 03            JR ANIMSTARTSTOP_COMMON
 810+ 53DF              ; *******************************************************************************************************
 811+ 53DF              ; *******************************************************************************************************
 812+ 53DF              ; function to handle CALL ANIMSTOP basic extension
 813+ 53DF              ; two forms
 814+ 53DF              ; ANIMSTOP ( BYTE id )
 815+ 53DF              ; or
 816+ 53DF              ; ANIMSTOP ( BYTE item_number,
 817+ 53DF              ;            INT[] sprite_animations )
 818+ 53DF              ; sets active flag to 1
 819+ 53DF              ANIMSTOP:
 820+ 53DF 11 4D 54         LD DE,ANIMSTARTSTOP_COMMON.STOP
 821+ 53E2              ; *******************************************************************************************************
 822+ 53E2              ANIMSTARTSTOP_COMMON:
 823+ 53E2 ED 53 3E 54      LD (ANIMSTARTSTOP_COMMON.FN+1),DE
 824+ 53E6                  ; opening (
 825+ 53E6 CD F2 62     	CALL CHKCHAR
 826+ 53E9 28           	DB '('
 827+ 53EA              	; get sprite animation id or array size
 828+ 53EA DD 21 1C 52  	LD IX,GETBYT
 829+ 53EE CD 59 01     	CALL CALBAS
 830+ 53F1 F5               PUSH AF
 831+ 53F2                  ; check if comma present
 832+ 53F2 CD FC 62         CALL GETPREVCHAR
 833+ 53F5 23               INC HL
 834+ 53F6 FE 2C            CP ','
 835+ 53F8 28 0C            JR Z,.L1
 836+ 53FA FE 29            CP ')'
 837+ 53FC C2 14 63         JP NZ,SYNTAX_ERROR
 838+ 53FF                  ; ok so single argument variant
 839+ 53FF F1               POP AF
 840+ 5400 E5               PUSH HL
 841+ 5401 CD 2C 54         CALL .SETVALUE
 842+ 5404 E1               POP HL
 843+ 5405 C9               RET
 844+ 5406              .L1:
 845+ 5406                  ; get array pointer
 846+ 5406 D1               POP DE
 847+ 5407 D5               PUSH DE
 848+ 5408 3E 02            LD A,2
 849+ 540A 06 01            LD B,1
 850+ 540C CD 1D 63         CALL GET_BASIC_ARRAY_DATA_POINTER
 851+ 540F C5               PUSH BC
 852+ 5410              	; ending )
 853+ 5410 CD F2 62     	CALL CHKCHAR
 854+ 5413 29           	DB ')'
 855+ 5414 D1               POP DE ; array pointer
 856+ 5415 C1               POP BC ; number of items
 857+ 5416 78               LD A,B
 858+ 5417 B7               OR A
 859+ 5418 CA 08 63         JP Z,SUBSCRIPT_OUT_OF_RANGE
 860+ 541B E5               PUSH HL
 861+ 541C F3               DI
 862+ 541D              .L2:
 863+ 541D C5               PUSH BC
 864+ 541E 1A               LD A,(DE)
 865+ 541F 13          > INC DE
 865+ 5420 13          > INC DE
 866+ 5421 D5               PUSH DE
 867+ 5422 CD 2C 54         CALL .SETVALUE
 868+ 5425 D1               POP DE
 869+ 5426 C1               POP BC
 870+ 5427 10 F4            DJNZ .L2
 871+ 5429 FB               EI
 872+ 542A E1               POP HL
 873+ 542B C9               RET
 874+ 542C
 875+ 542C              .SETVALUE:
 876+ 542C 47               LD B,A
 877+ 542D 3C               INC A
 878+ 542E 4F               LD C,A
 879+ 542F 3A DA 4F         LD A,(ANIMSPRNUM)
 880+ 5432 B9               CP C
 881+ 5433 DA 08 63         JP C,SUBSCRIPT_OUT_OF_RANGE
 882+ 5436 78               LD A,B
 883+ 5437 CD FE 4F         CALL GETnthSPRANIM
 884+ 543A E5               PUSH HL
 885+ 543B DD E1            POP IX
 886+ 543D              .FN:
 887+ 543D C3 00 00         JP 0
 888+ 5440              .START:
 889+ 5440 DD 36 06 01      LD (IX+6),1 ; active flag
 890+ 5444 DD 36 03 00      LD (IX+3),0 ; current item
 891+ 5448 06 00            LD B,0 ; setup timer
 892+ 544A C3 D1 54         JP SETUP_ANIM_STEP
 893+ 544D              .STOP:
 894+ 544D DD 36 06 00      LD (IX+6),0 ; active flag
 895+ 5451 C9               RET
 896+ 5452              .STEP:
 897+ 5452 06 00            LD B,0
 898+ 5454 C3 75 54         JP PROCESS_SINGLE_ANIMATION.INACTIVE_TOO
 899+ 5457              ; *******************************************************************************************************
 900+ 5457
 901+ 5457              ; *******************************************************************************************************
 902+ 5457              ; function processes animations during vblank period
 903+ 5457              PROCESS_ANIMATIONS:
 904+ 5457 3A DA 4F         LD A,(ANIMSPRNUM)
 905+ 545A B7               OR A
 906+ 545B C8               RET Z; no animations defined
 907+ 545C 47               LD B,A
 908+ 545D DD 2A DB 4F      LD IX,(ANIMSPRPTR)
 909+ 5461              .L1:
 910+ 5461 C5               PUSH BC
 911+ 5462 06 00            LD B,0 ; normal mode, change on timer expiry only
 912+ 5464 CD 70 54         CALL PROCESS_SINGLE_ANIMATION
 913+ 5467 11 08 00         LD DE,8
 914+ 546A DD 19            ADD IX,DE
 915+ 546C C1               POP BC
 916+ 546D 10 F2            DJNZ .L1
 917+ 546F C9               RET
 918+ 5470              ; *******************************************************************************************************
 919+ 5470
 920+ 5470              ; *******************************************************************************************************
 921+ 5470              ; processes single sprite animation
 922+ 5470              ; skips inactive ones, but this can be skipped by calling .INACTIVE_TOO entry point
 923+ 5470              ; on timer expiry goes to next animation item
 924+ 5470              ; input IX=sprite animation pointer
 925+ 5470              ; input B=1 force mode, activate animation action regardless of expired timer
 926+ 5470              PROCESS_SINGLE_ANIMATION:
 927+ 5470 DD 7E 06         LD A,(IX+6); active
 928+ 5473 B7               OR A
 929+ 5474 C8               RET Z ; inactive animation
 930+ 5475              .INACTIVE_TOO:
 931+ 5475 DD 6E 01         LD L,(IX+1)
 932+ 5478 DD 66 02         LD H,(IX+2) ; HL=end time
 933+ 547B 2B               DEC HL
 934+ 547C DD 75 01         LD (IX+1),L
 935+ 547F DD 74 02         LD (IX+2),H
 936+ 5482 7D               LD A,L
 937+ 5483 B4               OR H
 938+ 5484 28 06            JR Z,.STEP
 939+ 5486 05               DEC B
 940+ 5487 04               INC B
 941+ 5488 C8               RET Z ; not forced mode, return
 942+ 5489 C3 D1 54         JP SETUP_ANIM_STEP; call function with flag to skip timer setup
 943+ 548C              .STEP:
 944+ 548C 06 00            LD B,0; setup timer
 945+ 548E DD 34 03         INC (IX+3) ; current animation item
 946+ 5491 C3 D1 54         JP SETUP_ANIM_STEP
 947+ 5494              ; *******************************************************************************************************
 948+ 5494
 949+ 5494              ; *******************************************************************************************************
 950+ 5494              ; function will setup sprite animation after current item change
 951+ 5494              ; input A=current animation definition
 952+ 5494              ; input IX=pointer to sprite animation
 953+ 5494              ; input B=1 skip timer setup
 954+ 5494              ; output IY=pointer to animation item
 955+ 5494              ; CF=1 error or non-cyclic animation ended, in both cases set active flag to 0
 956+ 5494              ; basically sets new end time for current animation
 957+ 5494              INIT_CURRENT_ANIMATION:
 958+ 5494 CD F2 4F         CALL GETnthANIMDEF
 959+ 5497 DD 7E 03         LD A,(IX+3) ; current animation item
 960+ 549A BE               CP (HL) ; number of animation items in the animation definition
 961+ 549B 38 0A            JR C,.L3 ; last item not reached
 962+ 549D                  ; last item reached
 963+ 549D DD 7E 05         LD A,(IX+5) ; cyclic flag
 964+ 54A0 B7               OR A
 965+ 54A1 28 2C            JR Z,.ERROR ; non-cyclic animation
 966+ 54A3                  ; cyclic animation, restart
 967+ 54A3 DD 36 03 00      LD (IX+3),0; current item
 968+ 54A7              .L3:
 969+ 54A7                  ; HL = animation definition
 970+ 54A7 23               INC HL ; skip animation definition size field
 971+ 54A8 16 00            LD D,0
 972+ 54AA DD 5E 03         LD E,(IX+3); current item
 973+ 54AD 19               ADD HL,DE
 974+ 54AE 4E               LD C,(HL) ; current animation item
 975+ 54AF 0C               INC C
 976+ 54B0 3A D4 4F         LD A,(ANIMITEMNUM)
 977+ 54B3 B9               CP C
 978+ 54B4 38 19            JR C,.ERROR ; invalid animation item, stop animation
 979+ 54B6 0D               DEC C
 980+ 54B7 79               LD A,C
 981+ 54B8 CD E9 4F         CALL GETnthANIMITEM
 982+ 54BB E5               PUSH HL
 983+ 54BC FD E1            POP IY ; IY=animation item
 984+ 54BE 05               DEC B
 985+ 54BF 28 0C            JR Z,.EXIT
 986+ 54C1 FD 5E 01         LD E,(IY+1)
 987+ 54C4 FD 56 02         LD D,(IY+2) ; duration
 988+ 54C7 DD 73 01         LD (IX+1),E
 989+ 54CA DD 72 02         LD (IX+2),D
 990+ 54CD              .EXIT:
 991+ 54CD AF               XOR A
 992+ 54CE C9               RET
 993+ 54CF              .ERROR:
 994+ 54CF 37               SCF
 995+ 54D0 C9               RET
 996+ 54D1              ; *******************************************************************************************************
 997+ 54D1
 998+ 54D1              ; *******************************************************************************************************
 999+ 54D1              ; function will display currect item and set up expiry time
1000+ 54D1              ; it will also stop the animation if expired
1001+ 54D1              ; sets sprite update flag if any changes in sprite data made
1002+ 54D1              ; input IX=current sprite animation
1003+ 54D1              ; input B=1 skip timer setup
1004+ 54D1              SETUP_ANIM_STEP:
1005+ 54D1 DD 4E 04         LD C,(IX+4) ; animation definition ID
1006+ 54D4 0C               INC C
1007+ 54D5 3A D7 4F         LD A,(ANIMDEFNUM)
1008+ 54D8 B9               CP C
1009+ 54D9 30 05            JR NC,.L2
1010+ 54DB                  ; given animation item is outside of bounds, deactivate animation
1011+ 54DB              .STOPANIM:
1012+ 54DB DD 36 06 00      LD (IX+6),0
1013+ 54DF C9               RET
1014+ 54E0              .L2:
1015+ 54E0 0D               DEC C
1016+ 54E1 79               LD A,C
1017+ 54E2 CD 94 54         CALL INIT_CURRENT_ANIMATION
1018+ 54E5 38 F4            JR C, .STOPANIM
1019+ 54E7 FD 7E 00         LD A,(IY) ; type of animation item
1020+ 54EA B7               OR A
1021+ 54EB 28 44            JR Z,.L4 ; change pattern and/or color
1022+ 54ED              .PAT:
1023+ 54ED                  ; change pattern definition
1024+ 54ED                  ; check if sprite or character
1025+ 54ED DD 7E 07         LD A,(IX+7)
1026+ 54F0 B7               OR A
1027+ 54F1 20 58            JR NZ,.CHAR
1028+ 54F3 DD 7E 00         LD A,(IX) ; sprite number
1029+ 54F6 CD 7C 4D         CALL GETnthSPRATTR
1030+ 54F9 23          > INC HL ; skip y and x
1030+ 54FA 23          > INC HL
1030+ 54FB 23          > INC HL
1030+ 54FC 23          > INC HL
1031+ 54FD 7E               LD A,(HL); current pattern
1032+ 54FE 26 00            LD H,0
1033+ 5500 6F               LD L,A
1034+ 5501 3A E0 F3         LD A,(REG1SAV)
1035+ 5504 E6 02            AND 2
1036+ 5506 20 07            JR NZ,.L6
1037+ 5508                  ; 8x8 sprite
1038+ 5508 CD E1 61         CALL HLx8
1039+ 550B 06 08            LD B,8
1040+ 550D 18 05            JR .L5
1041+ 550F              .L6:
1042+ 550F CD DF 61         CALL HLx32
1043+ 5512 06 20            LD B,32
1044+ 5514              .L5:
1045+ 5514 3A AF FC         LD A,(SCRMOD)
1046+ 5517 3D               DEC A
1047+ 5518 20 06            JR NZ,.L10
1048+ 551A ED 5B C5 F3      LD DE,(T32PAT)
1049+ 551E 18 04            JR .L7
1050+ 5520              .L10:
1051+ 5520 ED 5B CF F3      LD DE,(GRPPAT)
1052+ 5524              .L7:
1053+ 5524 19               ADD HL,DE
1054+ 5525 CD CC 61         CALL SETWRT_LOCAL
1055+ 5528 FD 6E 03         LD L,(IY+3)
1056+ 552B FD 66 04         LD H,(IY+4) ; pointer to sprite pattern data
1057+ 552E C3 D7 61         JP BBYTECOPY
1058+ 5531              .L4:
1059+ 5531                  ; change pattern and color in sprite attributes table
1060+ 5531 DD 7E 00         LD A,(IX) ; sprite number
1061+ 5534 CD 7C 4D         CALL GETnthSPRATTR
1062+ 5537 23          > INC HL ; skip y and x
1062+ 5538 23          > INC HL
1062+ 5539 23          > INC HL
1062+ 553A 23          > INC HL
1063+ 553B FD 7E 03         LD A,(IY+3) ; new pattern
1064+ 553E 77               LD (HL),A
1065+ 553F 23          > INC HL
1065+ 5540 23          > INC HL
1066+ 5541 FD 7E 04         LD A,(IY+4) ; new color
1067+ 5544 77               LD (HL),A
1068+ 5545 2A 74 4D         LD HL,(SPRATR_UPDATE_FLAG)
1069+ 5548 36 01            LD (HL),1
1070+ 554A C9               RET
1071+ 554B              .CHAR:
1072+ 554B DD 6E 00         LD L,(IX)
1073+ 554E 3D               DEC A
1074+ 554F 67               LD H,A
1075+ 5550 CD E1 61         CALL HLx8
1076+ 5553 3A AF FC         LD A,(SCRMOD)
1077+ 5556 3D               DEC A
1078+ 5557 20 06            JR NZ,.L8
1079+ 5559 ED 5B C1 F3      LD DE,(T32CGP)
1080+ 555D 18 04            JR .L9
1081+ 555F              .L8:
1082+ 555F ED 5B CB F3      LD DE,(GRPCGP)
1083+ 5563              .L9:
1084+ 5563 06 08            LD B,8
1085+ 5565 18 BD            JR .L7
1086+ 5567              ; *******************************************************************************************************
1087+ 5567
# file closed: asm\ANIMATION.asm
 124  5567               INCLUDE "SGAM.asm"
# file opened: asm\SGAM.asm
   1+ 5567              ; Sprite Group Animate and Move
   2+ 5567
   3+ 5567              ; *******************************************************************************************************
   4+ 5567              ; function to handle CALL SGAM basic extension
   5+ 5567              ; sets position of a group of sprites as described in SPRGRPMOV
   6+ 5567              ; and manually animate a list of animations
   7+ 5567              ; _SGAM ( INT x,
   8+ 5567              ;	      INT y,
   9+ 5567              ;		  BYTE count,
  10+ 5567              ;		  INT[2][count] data_ptr,
  11+ 5567              ;         BYTE item_number,
  12+ 5567              ;         INT[] sprite_animations )
  13+ 5567              ; will put ram in page 0 also, page 1 is already there
  14+ 5567              SGAM:
  15+ 5567 3A 73 4D     	LD A, (SPRATR_INIT_STATUS)
  16+ 556A B7           	OR A
  17+ 556B CA 10 63     	JP Z,ILLEGAL_FUNCTION
  18+ 556E              	; opening (
  19+ 556E CD F2 62     	CALL CHKCHAR
  20+ 5571 28           	DB '('
  21+ 5572              	; get x
  22+ 5572 DD 21 2F 54  	LD IX, FRMQNT
  23+ 5576 CD 59 01     	CALL CALBAS
  24+ 5579 ED 53 12 60  	LD (BLIT_STRUCT),DE
  25+ 557D              	; comma
  26+ 557D CD F2 62     	CALL CHKCHAR
  27+ 5580 2C           	DB ','
  28+ 5581              	; get y
  29+ 5581 DD 21 2F 54  	LD IX, FRMQNT
  30+ 5585 CD 59 01     	CALL CALBAS
  31+ 5588 ED 53 14 60  	LD (BLIT_STRUCT+2),DE
  32+ 558C              	; comma
  33+ 558C CD F2 62     	CALL CHKCHAR
  34+ 558F 2C           	DB ','
  35+ 5590              	; get count
  36+ 5590 DD 21 1C 52  	LD IX, GETBYT
  37+ 5594 CD 59 01     	CALL CALBAS
  38+ 5597 B7               OR A
  39+ 5598 CA 08 63         JP Z,SUBSCRIPT_OUT_OF_RANGE
  40+ 559B 32 16 60     	LD (BLIT_STRUCT+4),A
  41+ 559E              	; comma
  42+ 559E CD F2 62     	CALL CHKCHAR
  43+ 55A1 2C           	DB ','
  44+ 55A2              	; get sprite group definition array data pointer
  45+ 55A2 3A 16 60         LD A,(BLIT_STRUCT+4)
  46+ 55A5 5F           	LD E,A
  47+ 55A6 16 03        	LD D,3
  48+ 55A8 3E 02        	LD A,2
  49+ 55AA 47           	LD B,A
  50+ 55AB CD 1D 63     	CALL GET_BASIC_ARRAY_DATA_POINTER
  51+ 55AE ED 43 17 60  	LD (BLIT_STRUCT+5),BC
  52+ 55B2              	; comma
  53+ 55B2 CD F2 62     	CALL CHKCHAR
  54+ 55B5 2C           	DB ','
  55+ 55B6              	; get sprite animation array size
  56+ 55B6 DD 21 1C 52  	LD IX,GETBYT
  57+ 55BA CD 59 01     	CALL CALBAS
  58+ 55BD 32 19 60         LD (BLIT_STRUCT+7),A
  59+ 55C0 B7               OR A
  60+ 55C1 CA 08 63         JP Z,SUBSCRIPT_OUT_OF_RANGE
  61+ 55C4              	; comma
  62+ 55C4 CD F2 62     	CALL CHKCHAR
  63+ 55C7 2C           	DB ','
  64+ 55C8                  ; get array pointer
  65+ 55C8 3A 19 60         LD A,(BLIT_STRUCT+7)
  66+ 55CB 57               LD D,A
  67+ 55CC 3E 02            LD A,2
  68+ 55CE 06 01            LD B,1
  69+ 55D0 CD 1D 63         CALL GET_BASIC_ARRAY_DATA_POINTER
  70+ 55D3 ED 43 1A 60      LD (BLIT_STRUCT+8),BC
  71+ 55D7              	; ending )
  72+ 55D7 CD F2 62     	CALL CHKCHAR
  73+ 55DA 29           	DB ')'
  74+ 55DB
  75+ 55DB E5               PUSH HL
  76+ 55DC F3               DI
  77+ 55DD
  78+ 55DD              	; enable page 0
  79+ 55DD FD 21 E4 55  	LD IY, .RET
  80+ 55E1 C3 A5 62     	JP ENABLE_PAGE0
  81+ 55E4              .RET:
  82+ 55E4 D9               EXX
  83+ 55E5 ED 5B 12 60      LD DE,(BLIT_STRUCT) ; initial x
  84+ 55E9 ED 4B 14 60      LD BC,(BLIT_STRUCT+2) ; initial y
  85+ 55ED D9               EXX
  86+ 55EE 2A 17 60         LD HL,(BLIT_STRUCT+5) ; pointer to data
  87+ 55F1 3A 16 60         LD A,(BLIT_STRUCT+4) ; number of entries
  88+ 55F4 47               LD B,A
  89+ 55F5 CD C2 4F         CALL SPRGRPMOV.UPDATE_LOC
  90+ 55F8
  91+ 55F8 21 1A 56         LD HL,.STEP
  92+ 55FB 22 3E 54         LD (ANIMSTARTSTOP_COMMON.FN+1),HL
  93+ 55FE 3A 19 60         LD A,(BLIT_STRUCT+7) ; anim number
  94+ 5601 47               LD B,A
  95+ 5602 ED 5B 1A 60      LD DE,(BLIT_STRUCT+8) ; anim list
  96+ 5606              .L1:
  97+ 5606 C5               PUSH BC
  98+ 5607 1A               LD A,(DE)
  99+ 5608 13          > INC DE
  99+ 5609 13          > INC DE
 100+ 560A D5               PUSH DE
 101+ 560B CD 2C 54         CALL ANIMSTARTSTOP_COMMON.SETVALUE
 102+ 560E D1               POP DE
 103+ 560F C1               POP BC
 104+ 5610 10 F4            DJNZ .L1
 105+ 5612
 106+ 5612 D1               POP DE
 107+ 5613 C1               POP BC
 108+ 5614 CD 1C 62         CALL RESTORE_PAGE_INFO
 109+ 5617 FB               EI
 110+ 5618 E1               POP HL
 111+ 5619 C9               RET
 112+ 561A              .STEP:
 113+ 561A 06 01            LD B,1
 114+ 561C C3 75 54         JP PROCESS_SINGLE_ANIMATION.INACTIVE_TOO
 115+ 561F              ; *******************************************************************************************************
 116+ 561F
# file closed: asm\SGAM.asm
 125  561F               ENDIF
 126  561F
 127  561F               IF (RAM_CMDS == 1)
 128  561F               INCLUDE "MEMORY.asm"
# file opened: asm\MEMORY.asm
   1+ 561F              ; *******************************************************************************************************
   2+ 561F              ; function to handle CALL MEMCPY basic extension
   3+ 561F              ; _MEMCPY ( INT source,
   4+ 561F              ;			INT destination,
   5+ 561F              ;			INT count,
   6+ 561F              ; will put ram in page 0 also, page 1 is already there
   7+ 561F              MEMCPY:
   8+ 561F              	; opening (
   9+ 561F CD F2 62     	CALL CHKCHAR
  10+ 5622 28           	DB '('
  11+ 5623              	; get source address
  12+ 5623 DD 21 2F 54  	LD IX, FRMQNT
  13+ 5627 CD 59 01     	CALL CALBAS
  14+ 562A D5           	PUSH DE
  15+ 562B              	; comma
  16+ 562B CD F2 62     	CALL CHKCHAR
  17+ 562E 2C           	DB ','
  18+ 562F              	; get destination address
  19+ 562F DD 21 2F 54  	LD IX, FRMQNT
  20+ 5633 CD 59 01     	CALL CALBAS
  21+ 5636 D5           	PUSH DE
  22+ 5637              	; comma
  23+ 5637 CD F2 62     	CALL CHKCHAR
  24+ 563A 2C           	DB ','
  25+ 563B              	; get length
  26+ 563B DD 21 2F 54  	LD IX, FRMQNT
  27+ 563F CD 59 01     	CALL CALBAS
  28+ 5642 D5           	PUSH DE
  29+ 5643              	; ending )
  30+ 5643 CD F2 62     	CALL CHKCHAR
  31+ 5646 29           	DB ')'
  32+ 5647
  33+ 5647              	; save position
  34+ 5647 E5           	PUSH HL
  35+ 5648 DD E1        	POP IX
  36+ 564A
  37+ 564A C1           	POP BC ; count
  38+ 564B D1           	POP DE ; destination
  39+ 564C E1           	POP HL ; source
  40+ 564D D9           	EXX
  41+ 564E              	; enable page 0
  42+ 564E FD 21 55 56  	LD IY, .RET
  43+ 5652 C3 A5 62     	JP ENABLE_PAGE0
  44+ 5655              .RET:
  45+ 5655 FB           	EI
  46+ 5656 D9           	EXX
  47+ 5657 ED B0        	LDIR
  48+ 5659 D1               POP DE
  49+ 565A C1               POP BC
  50+ 565B CD 1C 62         CALL RESTORE_PAGE_INFO
  51+ 565E DD E5        	PUSH IX
  52+ 5660 E1           	POP HL
  53+ 5661 C9           	RET
  54+ 5662              ; *******************************************************************************************************
  55+ 5662
  56+ 5662              ; *******************************************************************************************************
  57+ 5662              ; function to handle CALL FILRAM basic extension
  58+ 5662              ; FILRAM ( INT start address,
  59+ 5662              ;		   INT count,
  60+ 5662              ;		   BYTE value,
  61+ 5662              ; will put ram in page 0 also, page 1 is already there
  62+ 5662              FILRAM:
  63+ 5662              	; opening (
  64+ 5662 CD F2 62     	CALL CHKCHAR
  65+ 5665 28           	DB '('
  66+ 5666              	; get start address
  67+ 5666 DD 21 2F 54  	LD IX, FRMQNT
  68+ 566A CD 59 01     	CALL CALBAS
  69+ 566D D5           	PUSH DE
  70+ 566E              	; comma
  71+ 566E CD F2 62     	CALL CHKCHAR
  72+ 5671 2C           	DB ','
  73+ 5672              	; get count
  74+ 5672 DD 21 2F 54  	LD IX, FRMQNT
  75+ 5676 CD 59 01     	CALL CALBAS
  76+ 5679 D5           	PUSH DE
  77+ 567A              	; comma
  78+ 567A CD F2 62     	CALL CHKCHAR
  79+ 567D 2C           	DB ','
  80+ 567E              	; get value
  81+ 567E DD 21 1C 52  	LD IX, GETBYT
  82+ 5682 CD 59 01     	CALL CALBAS
  83+ 5685 F5           	PUSH AF
  84+ 5686              	; ending )
  85+ 5686 CD F2 62     	CALL CHKCHAR
  86+ 5689 29           	DB ')'
  87+ 568A
  88+ 568A              	; save position
  89+ 568A E5           	PUSH HL
  90+ 568B DD E1        	POP IX
  91+ 568D
  92+ 568D D1           	POP DE ; actually AF
  93+ 568E C1           	POP BC ; count
  94+ 568F E1           	POP HL ; start address
  95+ 5690 78           	LD A, B
  96+ 5691 B7           	OR A
  97+ 5692 20 0A        	JR NZ, .L1 ; >=256 bytes to fill
  98+ 5694 B1           	OR C
  99+ 5695 28 19        	JR Z, .EXIT ; 0 bytes to fill, skip
 100+ 5697 79           	LD A, C
 101+ 5698 3D           	DEC A
 102+ 5699 20 03        	JR NZ, .L1 ; ; >1 byte to fill
 103+ 569B              	; one byte to fill
 104+ 569B 72           	LD (HL), D
 105+ 569C 18 12        	JR .EXIT
 106+ 569E              .L1:
 107+ 569E D9           	EXX
 108+ 569F              	; enable page 0
 109+ 569F FD 21 A6 56  	LD IY, .RET
 110+ 56A3 C3 A5 62     	JP ENABLE_PAGE0
 111+ 56A6              .RET:
 112+ 56A6 FB           	EI
 113+ 56A7 D9           	EXX
 114+ 56A8 CD B4 56     	CALL .FILLVALUE
 115+ 56AB D1               POP DE
 116+ 56AC C1               POP BC
 117+ 56AD CD 1C 62         CALL RESTORE_PAGE_INFO
 118+ 56B0              .EXIT:
 119+ 56B0 DD E5        	PUSH IX
 120+ 56B2 E1           	POP HL
 121+ 56B3 C9           	RET
 122+ 56B4
 123+ 56B4              .FILLVALUE:
 124+ 56B4 72               LD (HL), D
 125+ 56B5 54               LD D, H
 126+ 56B6 5D               LD E, L
 127+ 56B7 13               INC DE
 128+ 56B8 0B               DEC BC
 129+ 56B9 ED B0            LDIR
 130+ 56BB C9               RET
 131+ 56BC              ; *******************************************************************************************************
 132+ 56BC
# file closed: asm\MEMORY.asm
 129  56BC               ENDIF
 130  56BC
 131  56BC               IF (SOUND_CMDS == 1)
 132  56BC               INCLUDE "SOUND.asm"
# file opened: asm\SOUND.asm
   1+ 56BC              MUSIC_INIT_STATUS:
   2+ 56BC 00            DB 0
   3+ 56BD              SFX_INIT_STATUS:
   4+ 56BD 00            DB 0
   5+ 56BE              SOUND_ENABLED:
   6+ 56BE 00            DB 0
   7+ 56BF
   8+ 56BF              ; *******************************************************************************************************
   9+ 56BF              ; function to handle CALL SNDPLYINIT basic extension
  10+ 56BF              ; initializes sound player
  11+ 56BF              ; _SNDPLYINIT ( INT music_offset,
  12+ 56BF              ;				INT sfx_offset, can be -1 if no SFX
  13+ 56BF              ; will put ram in page 0 also, page 1 is already there
  14+ 56BF              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
  15+ 56BF              SNDPLYINIT:
  16+ 56BF              	; opening (
  17+ 56BF CD F2 62     	CALL CHKCHAR
  18+ 56C2 28           	DB '('
  19+ 56C3              	; get music address
  20+ 56C3 DD 21 2F 54  	LD IX, FRMQNT
  21+ 56C7 CD 59 01     	CALL CALBAS
  22+ 56CA D5           	PUSH DE
  23+ 56CB              	; comma
  24+ 56CB CD F2 62     	CALL CHKCHAR
  25+ 56CE 2C           	DB ','
  26+ 56CF              	; get sfx address
  27+ 56CF DD 21 2F 54  	LD IX, FRMQNT
  28+ 56D3 CD 59 01     	CALL CALBAS
  29+ 56D6 D5           	PUSH DE
  30+ 56D7              	; ending )
  31+ 56D7 CD F2 62     	CALL CHKCHAR
  32+ 56DA 29           	DB ')'
  33+ 56DB
  34+ 56DB                  ; save position in BASIC text
  35+ 56DB 44           	LD B, H
  36+ 56DC 4D           	LD C, L
  37+ 56DD
  38+ 56DD              	; pop LDIR parameters and store away for later
  39+ 56DD D1           	POP DE ; sfx address
  40+ 56DE E1           	POP HL ; music address
  41+ 56DF C5           	PUSH BC ; basic text location
  42+ 56E0 D9           	EXX
  43+ 56E1 FD 21 E8 56  	LD IY, .RET
  44+ 56E5 C3 A5 62     	JP ENABLE_PAGE0
  45+ 56E8              .RET:
  46+ 56E8 D9           	EXX
  47+ 56E9
  48+ 56E9 D5           	PUSH DE
  49+ 56EA AF           	XOR A
  50+ 56EB              	; HL = music location
  51+ 56EB CD 62 41     	CALL PLY_AKG_INIT
  52+ 56EE 3E 01        	LD A, 1
  53+ 56F0 32 BC 56     	LD (MUSIC_INIT_STATUS), A
  54+ 56F3
  55+ 56F3 E1           	POP HL ; SFX
  56+ 56F4              	; check if SFX address -1
  57+ 56F4 23           	INC HL
  58+ 56F5 7D           	LD A, L
  59+ 56F6 B4           	OR H
  60+ 56F7 28 09        	JR Z,.L1
  61+ 56F9 2B           	DEC HL
  62+ 56FA CD 1D 40     	CALL PLY_AKG_INITSOUNDEFFECTS
  63+ 56FD 3E 01        	LD A, 1
  64+ 56FF 32 BD 56     	LD (SFX_INIT_STATUS), A
  65+ 5702              .L1:
  66+ 5702 D1               POP DE
  67+ 5703 C1               POP BC
  68+ 5704 CD 1C 62         CALL RESTORE_PAGE_INFO
  69+ 5707
  70+ 5707 E1           	POP HL
  71+ 5708 C9           	RET
  72+ 5709              ; *******************************************************************************************************
  73+ 5709
  74+ 5709              ; *******************************************************************************************************
  75+ 5709              ; function to handle CALL SNDPLYON basic extension
  76+ 5709              ; enables sound player
  77+ 5709              ; _SNDPLYON
  78+ 5709              ; sets SOUND_ENABLED variable to 1 if init call was done
  79+ 5709              ; if not throws out of data error
  80+ 5709              SNDPLYON:
  81+ 5709 3A BC 56     	LD A, (MUSIC_INIT_STATUS)
  82+ 570C B7           	OR A
  83+ 570D 20 05        	JR NZ, .L1
  84+ 570F              	; player not initialized, throw error
  85+ 570F 1E 04        	LD E, 04 ; Out of DATA
  86+ 5711 C3 16 63     	JP THROW_ERROR
  87+ 5714              .L1:
  88+ 5714 32 BE 56     	LD (SOUND_ENABLED), A
  89+ 5717              	; disable key click
  90+ 5717 AF           	XOR A
  91+ 5718 32 DB F3     	LD (CLIKSW), A
  92+ 571B C9           	RET
  93+ 571C              ; *******************************************************************************************************
  94+ 571C
  95+ 571C              ; *******************************************************************************************************
  96+ 571C              ; function to handle CALL SNDPLYOFF basic extension
  97+ 571C              ; disables sound player
  98+ 571C              ; _SNDPLYOFF
  99+ 571C              ; sets SOUND_ENABLED variable to 0
 100+ 571C              ; calls AKG to stop music and SFX on all channels if initialized
 101+ 571C              SNDPLYOFF:
 102+ 571C 3A BE 56     	LD A, (SOUND_ENABLED)
 103+ 571F B7           	OR A
 104+ 5720 C8           	RET Z ; already stopped
 105+ 5721 AF           	XOR A
 106+ 5722 32 BE 56     	LD (SOUND_ENABLED), A
 107+ 5725 E5           	PUSH HL
 108+ 5726 CD 21 42     	CALL PLY_AKG_STOP
 109+ 5729 3A BD 56     	LD A, (SFX_INIT_STATUS)
 110+ 572C B7           	OR A
 111+ 572D 28 0E        	JR Z, .EXIT ; SFX not in use
 112+ 572F AF           	XOR A
 113+ 5730 CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
 114+ 5733 3E 01        	LD A, 1
 115+ 5735 CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
 116+ 5738 3E 02        	LD A, 2
 117+ 573A CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
 118+ 573D              .EXIT:
 119+ 573D E1           	POP HL
 120+ 573E C9           	RET
 121+ 573F              ; *******************************************************************************************************
 122+ 573F
 123+ 573F              ; *******************************************************************************************************
 124+ 573F              ; function to handle CALL SNDSFX basic extension
 125+ 573F              ; plays a sound effect
 126+ 573F              ; _SNDSFX ( BYTE sfx_number, >0
 127+ 573F              ;			BYTE channel, = 0,1 or 2
 128+ 573F              ;			BYTE inverted_volume = 0-16, 0 being full volume
 129+ 573F              ; will put ram in page 0 also, page 1 is already there
 130+ 573F              ; if sound off throws illegal function call
 131+ 573F              ; if sfx not initialized, throws out of data
 132+ 573F              SNDSFX:
 133+ 573F              	; opening (
 134+ 573F CD F2 62     	CALL CHKCHAR
 135+ 5742 28           	DB '('
 136+ 5743              	; get sfx_number
 137+ 5743 DD 21 1C 52  	LD IX, GETBYT
 138+ 5747 CD 59 01     	CALL CALBAS
 139+ 574A D5           	PUSH DE
 140+ 574B              	; comma
 141+ 574B CD F2 62     	CALL CHKCHAR
 142+ 574E 2C           	DB ','
 143+ 574F              	; get sfx address
 144+ 574F DD 21 1C 52  	LD IX, GETBYT
 145+ 5753 CD 59 01     	CALL CALBAS
 146+ 5756 D5           	PUSH DE
 147+ 5757              	; comma
 148+ 5757 CD F2 62     	CALL CHKCHAR
 149+ 575A 2C           	DB ','
 150+ 575B              	; get inverted volume
 151+ 575B DD 21 1C 52  	LD IX, GETBYT
 152+ 575F CD 59 01     	CALL CALBAS
 153+ 5762 D5           	PUSH DE
 154+ 5763              	; ending )
 155+ 5763 CD F2 62     	CALL CHKCHAR
 156+ 5766 29           	DB ')'
 157+ 5767
 158+ 5767 3A BE 56     	LD A, (SOUND_ENABLED)
 159+ 576A B7           	OR A
 160+ 576B 20 05        	JR NZ, .L1
 161+ 576D              	; sound disabled, throw illegal function call
 162+ 576D 1E 05        	LD E, 5
 163+ 576F C3 16 63     	JP THROW_ERROR
 164+ 5772              .L1:
 165+ 5772 3A BD 56     	LD A, (SFX_INIT_STATUS)
 166+ 5775 B7           	OR A
 167+ 5776 20 05        	JR NZ, .L2
 168+ 5778              	; sfx data not initialized, throw out of data
 169+ 5778 1E 04        	LD E, 4
 170+ 577A C3 16 63     	JP THROW_ERROR
 171+ 577D              .L2:
 172+ 577D              	; pop  parameters and store away for later
 173+ 577D D1           	POP DE ; inverted volume
 174+ 577E 43           	LD B, E
 175+ 577F D1           	POP DE ; channel
 176+ 5780 4B           	LD C, E
 177+ 5781 D1           	POP DE
 178+ 5782 7B           	LD A, E
 179+ 5783 08           	EX AF, AF'
 180+ 5784 E5           	PUSH HL ; basic text location
 181+ 5785 D9           	EXX
 182+ 5786 FD 21 8D 57  	LD IY, .RET
 183+ 578A C3 A5 62     	JP ENABLE_PAGE0
 184+ 578D              .RET:
 185+ 578D D9           	EXX
 186+ 578E 08           	EX AF, AF'
 187+ 578F CD 21 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
 188+ 5792
 189+ 5792 D1               POP DE
 190+ 5793 C1               POP BC
 191+ 5794 CD 1C 62         CALL RESTORE_PAGE_INFO
 192+ 5797
 193+ 5797 E1           	POP HL
 194+ 5798 C9           	RET
 195+ 5799              ; *******************************************************************************************************
# file closed: asm\SOUND.asm
 133  5799               ENDIF
 134  5799
 135  5799               IF (VRAM_CMDS == 1)
 136  5799               INCLUDE "VRAM.asm"
# file opened: asm\VRAM.asm
   1+ 5799              ; *******************************************************************************************************
   2+ 5799              ; function to handle CALL FILVRM basic extension
   3+ 5799              ; FILVRM ( INT offset,
   4+ 5799              ;		   INT count,
   5+ 5799              ;		   BYTE value,
   6+ 5799              ;		   BYTE wait_vsync) >0 = true
   7+ 5799              ; wait_vsync will issue HALT before copying
   8+ 5799              FILVRM:
   9+ 5799              	; opening (
  10+ 5799 CD F2 62     	CALL CHKCHAR
  11+ 579C 28           	DB '('
  12+ 579D              	; get offset address
  13+ 579D DD 21 2F 54  	LD IX, FRMQNT
  14+ 57A1 CD 59 01     	CALL CALBAS
  15+ 57A4 D5           	PUSH DE
  16+ 57A5              	; comma
  17+ 57A5 CD F2 62     	CALL CHKCHAR
  18+ 57A8 2C           	DB ','
  19+ 57A9              	; get count
  20+ 57A9 DD 21 2F 54  	LD IX, FRMQNT
  21+ 57AD CD 59 01     	CALL CALBAS
  22+ 57B0 D5           	PUSH DE
  23+ 57B1              	; comma
  24+ 57B1 CD F2 62     	CALL CHKCHAR
  25+ 57B4 2C           	DB ','
  26+ 57B5              	; get value
  27+ 57B5 DD 21 1C 52  	LD IX, GETBYT
  28+ 57B9 CD 59 01     	CALL CALBAS
  29+ 57BC F5           	PUSH AF
  30+ 57BD              	; comma
  31+ 57BD CD F2 62     	CALL CHKCHAR
  32+ 57C0 2C           	DB ','
  33+ 57C1              	; get vsync wait
  34+ 57C1 DD 21 1C 52  	LD IX, GETBYT
  35+ 57C5 CD 59 01     	CALL CALBAS
  36+ 57C8 F5           	PUSH AF
  37+ 57C9              	; ending )
  38+ 57C9 CD F2 62     	CALL CHKCHAR
  39+ 57CC 29           	DB ')'
  40+ 57CD
  41+ 57CD FB               EI
  42+ 57CE              	; save position
  43+ 57CE E5           	PUSH HL
  44+ 57CF DD E1        	POP IX
  45+ 57D1
  46+ 57D1              	; syntax ok
  47+ 57D1              	; wait for vsync if needed
  48+ 57D1 F1           	POP AF
  49+ 57D2 B7           	OR A
  50+ 57D3 28 01        	JR Z, .L1
  51+ 57D5 76           	HALT
  52+ 57D6
  53+ 57D6              .L1:
  54+ 57D6 3E 01        	LD A,1
  55+ 57D8 32 23 60     	LD (VRAM_UPDATE_IN_PROGRESS),A
  56+ 57DB F1               POP AF ; value
  57+ 57DC C1               POP BC ; count
  58+ 57DD E1               POP HL ; offset
  59+ 57DE CD 56 00         CALL BIOS_FILVRM
  60+ 57E1 AF           	XOR A
  61+ 57E2 32 23 60     	LD (VRAM_UPDATE_IN_PROGRESS),A
  62+ 57E5
  63+ 57E5              .L3:
  64+ 57E5 DD E5        	PUSH IX
  65+ 57E7 E1           	POP HL
  66+ 57E8 C9           	RET
  67+ 57E9              ; *******************************************************************************************************
  68+ 57E9
  69+ 57E9              ; *******************************************************************************************************
  70+ 57E9              ; function to handle CALL MEMVRM basic extension
  71+ 57E9              ; copies from RAM to VRAM
  72+ 57E9              ; _MEMVRM ( INT source,
  73+ 57E9              ;			INT destination,
  74+ 57E9              ;			INT count,
  75+ 57E9              ;			BYTE wait_vsync) >0 = true
  76+ 57E9              ; will put ram in page 0 also, page 1 is already there
  77+ 57E9              ; wait_vsync will issue HALT before copying
  78+ 57E9              MEMVRM:
  79+ 57E9              	; opening (
  80+ 57E9 CD F2 62     	CALL CHKCHAR
  81+ 57EC 28           	DB '('
  82+ 57ED              	; get source address
  83+ 57ED DD 21 2F 54  	LD IX, FRMQNT
  84+ 57F1 CD 59 01     	CALL CALBAS
  85+ 57F4 D5           	PUSH DE
  86+ 57F5              	; comma
  87+ 57F5 CD F2 62     	CALL CHKCHAR
  88+ 57F8 2C           	DB ','
  89+ 57F9              	; get destination address
  90+ 57F9 DD 21 2F 54  	LD IX, FRMQNT
  91+ 57FD CD 59 01     	CALL CALBAS
  92+ 5800 D5           	PUSH DE
  93+ 5801              	; comma
  94+ 5801 CD F2 62     	CALL CHKCHAR
  95+ 5804 2C           	DB ','
  96+ 5805              	; get length
  97+ 5805 DD 21 2F 54  	LD IX, FRMQNT
  98+ 5809 CD 59 01     	CALL CALBAS
  99+ 580C D5           	PUSH DE
 100+ 580D              	; comma
 101+ 580D CD F2 62     	CALL CHKCHAR
 102+ 5810 2C           	DB ','
 103+ 5811              	; get vsync wait
 104+ 5811 DD 21 1C 52  	LD IX, GETBYT
 105+ 5815 CD 59 01     	CALL CALBAS
 106+ 5818 F5           	PUSH AF
 107+ 5819              	; ending )
 108+ 5819 CD F2 62     	CALL CHKCHAR
 109+ 581C 29           	DB ')'
 110+ 581D
 111+ 581D                  ; save position in BASIC text
 112+ 581D E5           	PUSH HL
 113+ 581E DD E1        	POP IX
 114+ 5820
 115+ 5820 F1           	POP AF ; wait vsync
 116+ 5821 B7           	OR A
 117+ 5822 28 03        	JR Z, .L1
 118+ 5824 FB               EI
 119+ 5825 76           	HALT
 120+ 5826 F3           	DI
 121+ 5827              .L1:
 122+ 5827              	; pop LDIR parameters and store away for later
 123+ 5827 C1           	POP BC ; count
 124+ 5828 D1           	POP DE ; vram destination
 125+ 5829 E1           	POP HL ; ram source
 126+ 582A D9           	EXX
 127+ 582B FD 21 32 58   	LD IY, .RET
 128+ 582F C3 A5 62     	JP ENABLE_PAGE0
 129+ 5832              .RET:
 130+ 5832 FB           	EI
 131+ 5833 D9           	EXX
 132+ 5834 3E 01        	LD A,1
 133+ 5836 32 23 60     	LD (VRAM_UPDATE_IN_PROGRESS),A
 134+ 5839 CD 49 58     	CALL .LDIRVM
 135+ 583C AF           	XOR A
 136+ 583D 32 23 60     	LD (VRAM_UPDATE_IN_PROGRESS),A
 137+ 5840 D1               POP DE
 138+ 5841 C1               POP BC
 139+ 5842 CD 1C 62         CALL RESTORE_PAGE_INFO
 140+ 5845 DD E5        	PUSH IX
 141+ 5847 E1           	POP HL
 142+ 5848 C9           	RET
 143+ 5849
 144+ 5849              .LDIRVM:
 145+ 5849 EB           	EX DE, HL
 146+ 584A F3           	DI
 147+ 584B CD CC 61     	CALL SETWRT_LOCAL
 148+ 584E FB           	EI
 149+ 584F EB           	EX DE, HL
 150+ 5850 78           	LD A, B
 151+ 5851 B7           	OR A
 152+ 5852 28 0D        	JR Z, .L3
 153+ 5854 C5           	PUSH BC
 154+ 5855 0E 98        	LD C, #98
 155+ 5857              .L2:
 156+ 5857 50           	LD D, B
 157+ 5858 06 00        	LD B, 0
 158+ 585A CD D9 61     	CALL BBYTECOPY_NO_C
 159+ 585D 42           	LD B, D
 160+ 585E 10 F7        	DJNZ .L2
 161+ 5860 C1           	POP BC
 162+ 5861              .L3:
 163+ 5861 79           	LD A, C
 164+ 5862 B7           	OR A
 165+ 5863 C8           	RET Z
 166+ 5864 41           	LD B, C
 167+ 5865 C3 D7 61     	JP BBYTECOPY
 168+ 5868              ; *******************************************************************************************************
 169+ 5868
 170+ 5868              ; *******************************************************************************************************
 171+ 5868              ; function to handle CALL VRMMEM basic extension
 172+ 5868              ; copies from RAM to VRAM
 173+ 5868              ; _VRMMEM ( INT source,
 174+ 5868              ;			INT destination,
 175+ 5868              ;			INT count
 176+ 5868              ; will put ram in page 0 also, page 1 is already there
 177+ 5868              VRMMEM:
 178+ 5868              	; opening (
 179+ 5868 CD F2 62     	CALL CHKCHAR
 180+ 586B 28           	DB '('
 181+ 586C              	; get source address
 182+ 586C DD 21 2F 54  	LD IX, FRMQNT
 183+ 5870 CD 59 01     	CALL CALBAS
 184+ 5873 D5           	PUSH DE
 185+ 5874              	; comma
 186+ 5874 CD F2 62     	CALL CHKCHAR
 187+ 5877 2C           	DB ','
 188+ 5878              	; get destination address
 189+ 5878 DD 21 2F 54  	LD IX, FRMQNT
 190+ 587C CD 59 01     	CALL CALBAS
 191+ 587F D5           	PUSH DE
 192+ 5880              	; comma
 193+ 5880 CD F2 62     	CALL CHKCHAR
 194+ 5883 2C           	DB ','
 195+ 5884              	; get length
 196+ 5884 DD 21 2F 54  	LD IX, FRMQNT
 197+ 5888 CD 59 01     	CALL CALBAS
 198+ 588B D5           	PUSH DE
 199+ 588C              	; ending )
 200+ 588C CD F2 62     	CALL CHKCHAR
 201+ 588F 29           	DB ')'
 202+ 5890
 203+ 5890                  ; save position in BASIC text
 204+ 5890 E5           	PUSH HL
 205+ 5891 DD E1        	POP IX
 206+ 5893
 207+ 5893 C1           	POP BC ; count
 208+ 5894 D1           	POP DE ; destination
 209+ 5895 E1           	POP HL ; source
 210+ 5896 D9           	EXX
 211+ 5897 FD 21 9E 58  	LD IY, .RET
 212+ 589B C3 A5 62     	JP ENABLE_PAGE0
 213+ 589E              .RET:
 214+ 589E FB           	EI
 215+ 589F D9           	EXX
 216+ 58A0 3E 01        	LD A,1
 217+ 58A2 32 23 60     	LD (VRAM_UPDATE_IN_PROGRESS),A
 218+ 58A5 CD B5 58     	CALL .LDIRMV
 219+ 58A8 AF           	XOR A
 220+ 58A9 32 23 60     	LD (VRAM_UPDATE_IN_PROGRESS),A
 221+ 58AC D1               POP DE
 222+ 58AD C1               POP BC
 223+ 58AE CD 1C 62         CALL RESTORE_PAGE_INFO
 224+ 58B1 DD E5        	PUSH IX
 225+ 58B3 E1           	POP HL
 226+ 58B4 C9           	RET
 227+ 58B5
 228+ 58B5              .LDIRMV:
 229+ 58B5              	; set VRAM address *exactly* as in ROM, otherwise corruption
 230+ 58B5 7D           	LD	A, L
 231+ 58B6 F3           	DI
 232+ 58B7 D3 99        	OUT	(099H), A
 233+ 58B9 7C           	LD	A, H
 234+ 58BA E6 3F        	AND	03FH
 235+ 58BC D3 99        	OUT	(099H), A
 236+ 58BE FB           	EI
 237+ 58BF              	;EX (SP), HL
 238+ 58BF              	;EX (SP), HL
 239+ 58BF              	;NOP
 240+ 58BF              	;NOP
 241+ 58BF              .L4:
 242+ 58BF DB 98            IN A, (#98)
 243+ 58C1 12           	LD (DE), A
 244+ 58C2 13               INC DE
 245+ 58C3 0B               DEC BC
 246+ 58C4 79               LD A, C
 247+ 58C5 B0               OR B
 248+ 58C6 20 F7            JR NZ, .L4
 249+ 58C8 C9               RET
 250+ 58C9              ; *******************************************************************************************************
# file closed: asm\VRAM.asm
 137  58C9               ENDIF
 138  58C9
 139  58C9               IF (GENCAL_CMD == 1)
 140  58C9               INCLUDE "GENCAL.asm"
# file opened: asm\GENCAL.asm
   1+ 58C9              ; *******************************************************************************************************
   2+ 58C9              ; function to handle CALL GENCAL basic extension
   3+ 58C9              ; GENCAL ( INT fn_addr, = address of the function to call
   4+ 58C9              ;		   INT[] reg_list_ptr, = array holding register values (AF,BC,DE,HL,IX,IY)
   5+ 58C9              ; output values of registers will also be stored at reg_list_ptr
   6+ 58C9              GENCAL_VAR_SP:
   7+ 58C9 00 00            DW 0
   8+ 58CB              GENCAL_VAR_SP2:
   9+ 58CB 00 00            DW 0
  10+ 58CD              GENCAL:
  11+ 58CD              	; opening (
  12+ 58CD CD F2 62     	CALL CHKCHAR
  13+ 58D0 28           	DB '('
  14+ 58D1              	; get function address
  15+ 58D1 DD 21 2F 54  	LD IX, FRMQNT
  16+ 58D5 CD 59 01     	CALL CALBAS
  17+ 58D8 D5           	PUSH DE
  18+ 58D9              	; comma
  19+ 58D9 CD F2 62     	CALL CHKCHAR
  20+ 58DC 2C           	DB ','
  21+ 58DD              	; get pointer to register list
  22+ 58DD 3E 02            LD A,2
  23+ 58DF 06 01            LD B,1
  24+ 58E1 11 00 05         LD DE,#0500
  25+ 58E4 CD 1D 63         CALL GET_BASIC_ARRAY_DATA_POINTER
  26+ 58E7 C5           	PUSH BC
  27+ 58E8              	; ending )
  28+ 58E8 CD F2 62     	CALL CHKCHAR
  29+ 58EB 29           	DB ')'
  30+ 58EC
  31+ 58EC              	; save BASIC token position
  32+ 58EC E5           	PUSH HL
  33+ 58ED D9               EXX
  34+ 58EE E1           	POP HL ; HL'=next basic token
  35+ 58EF D9               EXX
  36+ 58F0
  37+ 58F0 E1               POP HL ; get pointer to register values
  38+ 58F1 F3           	DI
  39+ 58F2 ED 73 C9 58      LD (GENCAL_VAR_SP), SP
  40+ 58F6 F9               LD SP, HL
  41+ 58F7 F1               POP AF
  42+ 58F8 C1               POP BC
  43+ 58F9 D1               POP DE
  44+ 58FA E1               POP HL
  45+ 58FB DD E1            POP IX
  46+ 58FD FD E1            POP IY
  47+ 58FF D9               EXX
  48+ 5900 ED 73 CB 58      LD (GENCAL_VAR_SP2), SP
  49+ 5904 ED 7B C9 58      LD SP, (GENCAL_VAR_SP)
  50+ 5908 FB               EI
  51+ 5909 D1               POP DE ; get function to call
  52+ 590A E5               PUSH HL
  53+ 590B CD 26 59         CALL .EXXDECALL
  54+ 590E F3               DI
  55+ 590F ED 73 C9 58      LD (GENCAL_VAR_SP), SP
  56+ 5913 ED 7B CB 58      LD SP, (GENCAL_VAR_SP2)
  57+ 5917 FD E5            PUSH IY
  58+ 5919 DD E5            PUSH IX
  59+ 591B E5               PUSH HL
  60+ 591C D5               PUSH DE
  61+ 591D C5               PUSH BC
  62+ 591E F5               PUSH AF
  63+ 591F ED 7B C9 58      LD SP, (GENCAL_VAR_SP)
  64+ 5923 FB               EI
  65+ 5924 E1               POP HL
  66+ 5925 C9           	RET
  67+ 5926
  68+ 5926              .EXXDECALL:
  69+ 5926 D5               PUSH DE
  70+ 5927 D9               EXX
  71+ 5928 C9               RET
  72+ 5929              ; *******************************************************************************************************
# file closed: asm\GENCAL.asm
 141  5929               ENDIF
 142  5929
 143  5929               IF (BOX_CMDS == 1)
 144  5929               INCLUDE "BOX.asm"
# file opened: asm\BOX.asm
   1+ 5929              ; *******************************************************************************************************
   2+ 5929              ; generic function to implement rectangle data copy
   3+ 5929              ; should be modified to call appropriate function for memory or vram
   4+ 5929              ; input IX=pointer to following structure
   5+ 5929              ; +00 source data pointer
   6+ 5929              ; +02 num bytes in a row
   7+ 5929              ; +04 number of rows
   8+ 5929              ; +06 source add-to value till next row
   9+ 5929              ; +08 destination address
  10+ 5929              ; +10 destination add-to value till next row
  11+ 5929              ; modifies AF, BC, DE, HL
  12+ 5929              RECTANGLE_COPY:
  13+ 5929 DD 6E 00     	LD L, (IX+0)
  14+ 592C DD 66 01     	LD H, (IX+1) ; source address
  15+ 592F DD 5E 08     	LD E, (IX+8)
  16+ 5932 DD 56 09     	LD D, (IX+9) ; destination
  17+ 5935 DD 46 04     	LD B, (IX+4) ; row number
  18+ 5938              .L1:
  19+ 5938 C5           	PUSH BC
  20+ 5939 E5           		PUSH HL
  21+ 593A D5           			PUSH DE
  22+ 593B DD 4E 02     				LD C, (IX+2)
  23+ 593E DD 46 03     				LD B, (IX+3) ; num bytes in a row
  24+ 5941              .CALL1:
  25+ 5941 CD 00 00     				CALL 0 ; set destination address from DE
  26+ 5944              .CALL2:
  27+ 5944 CD 00 00     				CALL 0 ; copy data fn
  28+ 5947 E1           			POP HL
  29+ 5948 DD 4E 0A     			LD C, (IX+10)
  30+ 594B DD 46 0B     			LD B, (IX+11) ; destination add-to
  31+ 594E 09           			ADD HL, BC
  32+ 594F EB           			EX DE, HL
  33+ 5950 E1           		POP HL
  34+ 5951 DD 4E 06     		LD C, (IX+6)
  35+ 5954 DD 46 07     		LD B, (IX+7) ; src add-to
  36+ 5957 09           		ADD HL, BC
  37+ 5958 C1           	POP BC
  38+ 5959 10 DD        	DJNZ .L1
  39+ 595B C9           	RET
  40+ 595C              ; *******************************************************************************************************
  41+ 595C
  42+ 595C              ; *******************************************************************************************************
  43+ 595C              ; function to handle CALL BOXMEMCPY basic extension
  44+ 595C              ; copies data with window like boundaries within ram
  45+ 595C              ; BOXMEMCPY ( INT source data pointer,
  46+ 595C              ;			  INT source number of bytes in a row,
  47+ 595C              ;			  INT number of rows,
  48+ 595C              ;			  INT source add-to value till next row,
  49+ 595C              ; 			  INT destination pointer,
  50+ 595C              ;			  INT destination add-to value till next row )
  51+ 595C              ; request_data_ptr described in RECTANGLE_COPY
  52+ 595C              ; will put ram in page 0 also, page 1 is already there
  53+ 595C              BOXMEMCPY:
  54+ 595C 11 66 59     	LD DE,BOXMEMCPY.RET
  55+ 595F ED 53 DA 59  	LD (BOXCOMMON.ADDR+2), DE
  56+ 5963 C3 79 59     	JP BOXCOMMON
  57+ 5966              .RET:
  58+ 5966 FB           	EI
  59+ 5967              	; set RAM functions to call
  60+ 5967 21 00 00     	LD HL, 0
  61+ 596A 22 41 59     	LD (RECTANGLE_COPY.CALL1), HL ; NOP NOP
  62+ 596D 22 43 59     	LD (RECTANGLE_COPY.CALL1+2), HL ; NOP NOP
  63+ 5970 21 ED B0     	LD HL, #B0ED ; LDIR
  64+ 5973 22 45 59     	LD (RECTANGLE_COPY.CALL1+4), HL
  65+ 5976 C3 DF 59     	JP BOXCOMMON.CALL
  66+ 5979              ; *******************************************************************************************************
  67+ 5979
  68+ 5979              ; *******************************************************************************************************
  69+ 5979              ; common parts of BOX commands
  70+ 5979              BOXCOMMON:
  71+ 5979              	; opening (
  72+ 5979 CD F2 62     	CALL CHKCHAR
  73+ 597C 28           	DB '('
  74+ 597D              	; get source data pointer
  75+ 597D DD 21 2F 54  	LD IX, FRMQNT
  76+ 5981 CD 59 01     	CALL CALBAS
  77+ 5984 ED 53 12 60  	LD (BLIT_STRUCT+0), DE
  78+ 5988              	; comma
  79+ 5988 CD F2 62     	CALL CHKCHAR
  80+ 598B 2C           	DB ','
  81+ 598C              	; source number of bytes in a row
  82+ 598C DD 21 2F 54  	LD IX, FRMQNT
  83+ 5990 CD 59 01     	CALL CALBAS
  84+ 5993 ED 53 14 60  	LD (BLIT_STRUCT+2), DE
  85+ 5997              	; comma
  86+ 5997 CD F2 62     	CALL CHKCHAR
  87+ 599A 2C           	DB ','
  88+ 599B              	; number of rows
  89+ 599B DD 21 2F 54  	LD IX, FRMQNT
  90+ 599F CD 59 01     	CALL CALBAS
  91+ 59A2 ED 53 16 60  	LD (BLIT_STRUCT+4), DE
  92+ 59A6              	; comma
  93+ 59A6 CD F2 62     	CALL CHKCHAR
  94+ 59A9 2C           	DB ','
  95+ 59AA              	; source add-to value till next row
  96+ 59AA DD 21 2F 54  	LD IX, FRMQNT
  97+ 59AE CD 59 01     	CALL CALBAS
  98+ 59B1 ED 53 18 60  	LD (BLIT_STRUCT+6), DE
  99+ 59B5              	; comma
 100+ 59B5 CD F2 62     	CALL CHKCHAR
 101+ 59B8 2C           	DB ','
 102+ 59B9              	; destination pointer
 103+ 59B9 DD 21 2F 54  	LD IX, FRMQNT
 104+ 59BD CD 59 01     	CALL CALBAS
 105+ 59C0 ED 53 1A 60  	LD (BLIT_STRUCT+8), DE
 106+ 59C4              	; comma
 107+ 59C4 CD F2 62     	CALL CHKCHAR
 108+ 59C7 2C           	DB ','
 109+ 59C8              	; destination add-to value till next row
 110+ 59C8 DD 21 2F 54  	LD IX, FRMQNT
 111+ 59CC CD 59 01     	CALL CALBAS
 112+ 59CF ED 53 1C 60  	LD (BLIT_STRUCT+10), DE
 113+ 59D3              	; ending )
 114+ 59D3 CD F2 62     	CALL CHKCHAR
 115+ 59D6 29           	DB ')'
 116+ 59D7
 117+ 59D7 E5           	PUSH HL ; save position in BASIC buffer
 118+ 59D8              .ADDR:
 119+ 59D8 FD 21 00 00  	LD IY, 0
 120+ 59DC C3 A5 62     	JP ENABLE_PAGE0
 121+ 59DF              .CALL:
 122+ 59DF DD 21 12 60  	LD IX,BLIT_STRUCT
 123+ 59E3 CD 29 59     	CALL RECTANGLE_COPY
 124+ 59E6 AF           	XOR A
 125+ 59E7 32 23 60     	LD (VRAM_UPDATE_IN_PROGRESS),A
 126+ 59EA
 127+ 59EA D1               POP DE
 128+ 59EB C1               POP BC
 129+ 59EC CD 1C 62         CALL RESTORE_PAGE_INFO
 130+ 59EF
 131+ 59EF E1           	POP HL
 132+ 59F0 C9           	RET
 133+ 59F1              ; *******************************************************************************************************
 134+ 59F1
 135+ 59F1              ; *******************************************************************************************************
 136+ 59F1              ; function to handle CALL BOXMEMVRM basic extension
 137+ 59F1              ; copies data with window like boundaries from ram to Vram
 138+ 59F1              ; BOXMEMVRM ( INT source data pointer,
 139+ 59F1              ;			  INT source number of bytes in a row,
 140+ 59F1              ;			  INT number of rows,
 141+ 59F1              ;			  INT source add-to value till next row,
 142+ 59F1              ; 			  INT destination pointer,
 143+ 59F1              ;			  INT destination add-to value till next row )
 144+ 59F1              ; request_data_ptr described in RECTANGLE_COPY
 145+ 59F1              ; will put ram in page 0 also, page 1 is already there
 146+ 59F1              BOXMEMVRM:
 147+ 59F1 11 FB 59     	LD DE,BOXMEMVRM.RET
 148+ 59F4 ED 53 DA 59  	LD (BOXCOMMON.ADDR+2), DE
 149+ 59F8 C3 79 59     	JP BOXCOMMON
 150+ 59FB              .RET:
 151+ 59FB FB           	EI
 152+ 59FC              	; set RAM functions to call
 153+ 59FC 21 16 5A     	LD HL, .SETDEST
 154+ 59FF 22 42 59     	LD (RECTANGLE_COPY.CALL1+1), HL
 155+ 5A02 21 1E 5A     	LD HL, .COPYDATA
 156+ 5A05 22 45 59     	LD (RECTANGLE_COPY.CALL2+1), HL
 157+ 5A08 3E CD        	LD A, #CD ; CALL
 158+ 5A0A 32 41 59     	LD (RECTANGLE_COPY.CALL1), A
 159+ 5A0D 32 44 59     	LD (RECTANGLE_COPY.CALL2), A
 160+ 5A10              	;LD A,1
 161+ 5A10 32 23 60     	LD (VRAM_UPDATE_IN_PROGRESS),A
 162+ 5A13 C3 DF 59     	JP BOXCOMMON.CALL
 163+ 5A16              .SETDEST:
 164+ 5A16 EB           	EX DE, HL
 165+ 5A17 F3           	DI
 166+ 5A18 CD CC 61     	CALL SETWRT_LOCAL
 167+ 5A1B FB           	EI
 168+ 5A1C EB           	EX DE, HL
 169+ 5A1D C9           	RET
 170+ 5A1E              .COPYDATA:
 171+ 5A1E 41           	LD B, C
 172+ 5A1F C3 D7 61     	JP BBYTECOPY
 173+ 5A22              ; *******************************************************************************************************
# file closed: asm\BOX.asm
 145  5A22               ENDIF
 146  5A22
 147  5A22               IF (BLIT_CMDS == 1)
 148  5A22               INCLUDE "BLIT.asm"
# file opened: asm\BLIT.asm
   1+ 5A22              ; *******************************************************************************************************
   2+ 5A22              ; function rotates mask and data of several characters and applies to background data
   3+ 5A22              ; this handles x-shift from 0 to 4
   4+ 5A22              ; contains self-modifying code that is set-up from external function
   5+ 5A22              ; input HL=pointer to mask data
   6+ 5A22              ; input HL'=pointer to character data
   7+ 5A22              ; input DE=output buffer containing background data
   8+ 5A22              ; input BC=DE+8
   9+ 5A22              ; input A=number of characters to process
  10+ 5A22              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
  11+ 5A22              SHIFT04:
  12+ 5A22 08           	EX AF, AF'
  13+ 5A23 7E           	LD A, (HL) ; get mask
  14+ 5A24 D9           	EXX
  15+ 5A25 57           	LD D, A
  16+ 5A26 1E FF        	LD E, #FF
  17+ 5A28 37           	SCF
  18+ 5A29              .M1:
  19+ 5A29 18 FE        	JR .M1 ; this is self-modifying part
  20+ 5A2B CB 1A        	RR D
  21+ 5A2D CB 1B        	RR E
  22+ 5A2F CB 1A        	RR D
  23+ 5A31 CB 1B        	RR E
  24+ 5A33 CB 1A        	RR D
  25+ 5A35 CB 1B        	RR E
  26+ 5A37 CB 1A        	RR D
  27+ 5A39 CB 1B        	RR E
  28+ 5A3B
  29+ 5A3B 46           	LD B, (HL) ; get data
  30+ 5A3C 0E 00        	LD C, 0
  31+ 5A3E              .M2:
  32+ 5A3E 18 FE        	JR .M2 ; also self-modifying part
  33+ 5A40 CB 38        	SRL B
  34+ 5A42 CB 19        	RR C
  35+ 5A44 CB 38        	SRL B
  36+ 5A46 CB 19        	RR C
  37+ 5A48 CB 38        	SRL B
  38+ 5A4A CB 19        	RR C
  39+ 5A4C CB 38        	SRL B
  40+ 5A4E CB 19        	RR C
  41+ 5A50
  42+ 5A50 D9           	EXX
  43+ 5A51 1A           	LD A, (DE) ; background
  44+ 5A52 D9           	EXX
  45+ 5A53 A2           	AND D
  46+ 5A54 B0           	OR B
  47+ 5A55 D9           	EXX
  48+ 5A56 12           	LD (DE), A
  49+ 5A57
  50+ 5A57 0A           	LD A, (BC)
  51+ 5A58 D9           	EXX
  52+ 5A59 A3           	AND E
  53+ 5A5A B1           	OR C
  54+ 5A5B 23           	INC HL
  55+ 5A5C D9           	EXX
  56+ 5A5D 02           	LD (BC), A
  57+ 5A5E
  58+ 5A5E 23           	INC HL
  59+ 5A5F 13           	INC DE
  60+ 5A60 03           	INC BC
  61+ 5A61
  62+ 5A61 08           	EX AF, AF'
  63+ 5A62 3D           	DEC A
  64+ 5A63 C2 22 5A     	JP NZ, SHIFT04
  65+ 5A66 C9           	RET
  66+ 5A67              ; *******************************************************************************************************
  67+ 5A67
  68+ 5A67              ; *******************************************************************************************************
  69+ 5A67              ; function rotates mask and data of several characters and applies to background data
  70+ 5A67              ; this handles x-shift from 5 to 8
  71+ 5A67              ; contains self-modifying code that is set-up from external function
  72+ 5A67              ; input HL=pointer to mask data
  73+ 5A67              ; input HL'=pointer to character data
  74+ 5A67              ; input DE=output buffer containing background data
  75+ 5A67              ; input BC=DE+8
  76+ 5A67              ; input A=number of characters to process
  77+ 5A67              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
  78+ 5A67              SHIFT58:
  79+ 5A67 08           	EX AF, AF'
  80+ 5A68 7E           	LD A, (HL) ; get mask
  81+ 5A69 D9           	EXX
  82+ 5A6A 57           	LD D, A
  83+ 5A6B 1E FF        	LD E, #FF
  84+ 5A6D 37           	SCF
  85+ 5A6E              .M1:
  86+ 5A6E 18 FE        	JR .M1 ; this is self-modifying part
  87+ 5A70 CB 12        	RL D
  88+ 5A72 CB 13        	RL E
  89+ 5A74 CB 12        	RL D
  90+ 5A76 CB 13        	RL E
  91+ 5A78 CB 12        	RL D
  92+ 5A7A CB 13        	RL E
  93+ 5A7C
  94+ 5A7C 46           	LD B, (HL)
  95+ 5A7D 0E 00        	LD C, 0
  96+ 5A7F              .M2:
  97+ 5A7F 18 FE        	JR .M2 ; also self-modifying part
  98+ 5A81 CB 20        	SLA B
  99+ 5A83 CB 11        	RL C
 100+ 5A85 CB 20        	SLA B
 101+ 5A87 CB 11        	RL C
 102+ 5A89 CB 20        	SLA B
 103+ 5A8B CB 11        	RL C
 104+ 5A8D
 105+ 5A8D D9           	EXX
 106+ 5A8E 1A           	LD A, (DE) ; background
 107+ 5A8F D9           	EXX
 108+ 5A90 A3           	AND E
 109+ 5A91 B1           	OR C
 110+ 5A92 D9           	EXX
 111+ 5A93 12           	LD (DE), A
 112+ 5A94
 113+ 5A94 0A           	LD A, (BC)
 114+ 5A95 D9           	EXX
 115+ 5A96 A2           	AND D
 116+ 5A97 B0           	OR B
 117+ 5A98 23           	INC HL
 118+ 5A99 D9           	EXX
 119+ 5A9A 02           	LD (BC), A
 120+ 5A9B
 121+ 5A9B 23           	INC HL
 122+ 5A9C 13           	INC DE
 123+ 5A9D 03           	INC BC
 124+ 5A9E
 125+ 5A9E 08           	EX AF, AF'
 126+ 5A9F 3D           	DEC A
 127+ 5AA0 C2 67 5A     	JP NZ, SHIFT58
 128+ 5AA3 C9           	RET
 129+ 5AA4              ; *******************************************************************************************************
 130+ 5AA4
 131+ 5AA4              ; *******************************************************************************************************
 132+ 5AA4              ; routine that shifts one row of characters
 133+ 5AA4              ; contains self-modifying code that is set-up from external function
 134+ 5AA4              ; input HL=pointer to mask data
 135+ 5AA4              ; input HL'=pointer to character data
 136+ 5AA4              ; input DE=output buffer containing background data
 137+ 5AA4              ; input A=number of characters to process
 138+ 5AA4              ; input IX=pointer to structure describing input data
 139+ 5AA4              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
 140+ 5AA4              SHIFT_ROW:
 141+ 5AA4 F5           	PUSH AF
 142+ 5AA5 ED 53 0E 60  		LD (BLIT_TMP1), DE
 143+ 5AA9 E5           		PUSH HL
 144+ 5AAA CD ED 5A     			CALL .ADDYSHIFT
 145+ 5AAD E1           		POP HL
 146+ 5AAE ED 53 10 60  		LD (BLIT_TMP2), DE ; DE+vertical shift
 147+ 5AB2              .L1:
 148+ 5AB2 3E 08        		LD A, 8
 149+ 5AB4 DD 96 02     		SUB (IX+2) ; y shift
 150+ 5AB7              .CALL1:
 151+ 5AB7 CD 00 00     		CALL 0
 152+ 5ABA DD 7E 02     		LD A, (IX+2); y shift
 153+ 5ABD B7           		OR A
 154+ 5ABE 28 26        		JR Z, .DONE
 155+ 5AC0 ED 5B 0E 60  		LD DE, (BLIT_TMP1)
 156+ 5AC4 E5           		PUSH HL
 157+ 5AC5 CD FB 5A     			CALL .DETONEXTROW
 158+ 5AC8 E1           		POP HL
 159+ 5AC9              .CALL2:
 160+ 5AC9 CD 00 00     		CALL 0
 161+ 5ACC ED 5B 0E 60  		LD DE, (BLIT_TMP1)
 162+ 5AD0 E5           		PUSH HL
 163+ 5AD1 CD F5 5A     			CALL .ADD8
 164+ 5AD4 E1           		POP HL
 165+ 5AD5 ED 53 0E 60  		LD (BLIT_TMP1), DE
 166+ 5AD9 ED 5B 10 60  		LD DE, (BLIT_TMP2)
 167+ 5ADD E5           		PUSH HL
 168+ 5ADE CD F5 5A     			CALL .ADD8
 169+ 5AE1 E1           		POP HL
 170+ 5AE2 ED 53 10 60  		LD (BLIT_TMP2), DE ; DE+vertical shift
 171+ 5AE6              .DONE:
 172+ 5AE6 F1           	POP AF
 173+ 5AE7 3D           	DEC A
 174+ 5AE8 C8           	RET Z
 175+ 5AE9 F5           	PUSH AF
 176+ 5AEA C3 B2 5A     	JP .L1
 177+ 5AED              .ADDYSHIFT:
 178+ 5AED EB           	EX DE, HL
 179+ 5AEE 16 00        	LD D, 0
 180+ 5AF0 DD 5E 02     	LD E, (IX+2); y shift
 181+ 5AF3 18 0C        	JR .MOVDEBC
 182+ 5AF5              .ADD8:
 183+ 5AF5 21 08 00     	LD HL, 8
 184+ 5AF8 C3 01 5B     	JP .MOVDEBC
 185+ 5AFB              .DETONEXTROW:
 186+ 5AFB DD 6E 06     	LD L, (IX+6)
 187+ 5AFE DD 66 07     	LD H, (IX+7) ; bkg add to value
 188+ 5B01              .MOVDEBC:
 189+ 5B01 19           	ADD HL, DE
 190+ 5B02 54           	LD D, H
 191+ 5B03 5D           	LD E, L
 192+ 5B04 01 08 00     	LD BC, 8
 193+ 5B07 09           	ADD HL, BC
 194+ 5B08 44           	LD B, H
 195+ 5B09 4D           	LD C, L
 196+ 5B0A C9           	RET
 197+ 5B0B              ; *******************************************************************************************************
 198+ 5B0B
 199+ 5B0B              ; *******************************************************************************************************
 200+ 5B0B              ; function rotates mask and character data and applies it to background
 201+ 5B0B              ; input IX=pointer to structure describing input data
 202+ 5B0B              ; +0  DW horizontal shift count 0-7 (low byte used)
 203+ 5B0B              ; +2  DW vertical shift count 0-7 (low byte used)
 204+ 5B0B              ; +4  DW background data start;
 205+ 5B0B              ; +6  DW background add to value to next row of background data
 206+ 5B0B              ; +8  DW mask data start;
 207+ 5B0B              ; +10  DW character data start;
 208+ 5B0B              ; +12 DW character&mask add to value to next row of data
 209+ 5B0B              ; +14 DW columns (low byte used)
 210+ 5B0B              ; +16 DW rows (low byte used)
 211+ 5B0B              SHIFT_MERGE_CHARACTER:
 212+ 5B0B DD 7E 00     	LD A, (IX) ; shift
 213+ 5B0E FE 05        	CP 5
 214+ 5B10 38 25        	JR C, .RIGHT
 215+ 5B12              	; shifts 5-7, use rotate towards left 1-3
 216+ 5B12 21 67 5A     	LD HL, SHIFT58
 217+ 5B15 22 B8 5A     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
 218+ 5B18 22 CA 5A     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
 219+ 5B1B D6 05        	SUB 5
 220+ 5B1D 28 0D        	JR Z, .L1
 221+ 5B1F 87           	ADD A, A
 222+ 5B20 87           	ADD A, A
 223+ 5B21 67           	LD H, A
 224+ 5B22 2E 18        	LD L, #18 ; JR opcode
 225+ 5B24 22 6E 5A     	LD (SHIFT58.M1), HL
 226+ 5B27 22 7F 5A     	LD (SHIFT58.M2), HL
 227+ 5B2A 18 32        	JR .DO
 228+ 5B2C              .L1:
 229+ 5B2C 21 00 00     	LD HL, 0 ; 2xNOP opcode
 230+ 5B2F 22 6E 5A     	LD (SHIFT58.M1), HL
 231+ 5B32 22 7F 5A     	LD (SHIFT58.M2), HL
 232+ 5B35 18 27        	JR .DO
 233+ 5B37              .RIGHT:
 234+ 5B37              	; shifts 0-4, rotate towards right
 235+ 5B37 21 22 5A     	LD HL, SHIFT04
 236+ 5B3A 22 B8 5A     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
 237+ 5B3D 22 CA 5A     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
 238+ 5B40 FE 04        	CP 4
 239+ 5B42 28 11        	JR Z, .R1
 240+ 5B44 D6 04        	SUB 4
 241+ 5B46 ED 44        	NEG
 242+ 5B48 87           	ADD A, A
 243+ 5B49 87           	ADD A, A
 244+ 5B4A 67           	LD H, A
 245+ 5B4B 2E 18        	LD L, #18 ; JR opcode
 246+ 5B4D 22 29 5A     	LD (SHIFT04.M1), HL
 247+ 5B50 22 3E 5A     	LD (SHIFT04.M2), HL
 248+ 5B53 18 09        	JR .DO
 249+ 5B55              .R1:
 250+ 5B55 21 00 00     	LD HL, 0 ; 2xNOP opcode
 251+ 5B58 22 29 5A     	LD (SHIFT04.M1), HL
 252+ 5B5B 22 3E 5A     	LD (SHIFT04.M2), HL
 253+ 5B5E              .DO:
 254+ 5B5E DD 46 10     	LD B, (IX+16) ; rows
 255+ 5B61 DD 6E 08     	LD L, (IX+8)
 256+ 5B64 DD 66 09     	LD H, (IX+9) ; mask data
 257+ 5B67 DD 5E 04     	LD E, (IX+4)
 258+ 5B6A DD 56 05     	LD D, (IX+5) ; background data
 259+ 5B6D D9           	EXX
 260+ 5B6E DD 6E 0A     	LD L, (IX+10)
 261+ 5B71 DD 66 0B     	LD H, (IX+11) ; character data
 262+ 5B74 D9           	EXX
 263+ 5B75              .LOOP:
 264+ 5B75 C5           	PUSH BC
 265+ 5B76 E5           		PUSH HL
 266+ 5B77 D5           			PUSH DE
 267+ 5B78 D9           				EXX
 268+ 5B79 E5           				PUSH HL
 269+ 5B7A D9           					EXX
 270+ 5B7B DD 7E 0E     					LD A, (IX+14) ; columns
 271+ 5B7E              .CALL:
 272+ 5B7E CD A4 5A     					CALL SHIFT_ROW
 273+ 5B81 E1           				POP HL
 274+ 5B82 DD 5E 0C     				LD E, (IX+12)
 275+ 5B85 DD 56 0D     				LD D, (IX+13) ; char data to next row
 276+ 5B88 19           				ADD HL, DE
 277+ 5B89 D9           				EXX
 278+ 5B8A E1           			POP HL
 279+ 5B8B DD 5E 06     			LD E, (IX+6)
 280+ 5B8E DD 56 07     			LD D, (IX+7) ; background to next row
 281+ 5B91 19           			ADD HL, DE
 282+ 5B92 EB           			EX DE, HL
 283+ 5B93 E1           		POP HL
 284+ 5B94 DD 4E 0C     		LD C, (IX+12)
 285+ 5B97 DD 46 0D     		LD B, (IX+13) ; char data to next row
 286+ 5B9A 09           		ADD HL, BC
 287+ 5B9B C1           	POP BC
 288+ 5B9C 10 D7        	DJNZ .LOOP
 289+ 5B9E C9           	RET
 290+ 5B9F              ; *******************************************************************************************************
 291+ 5B9F
 292+ 5B9F               IFNDEF CMDS_WITH_PARAMETERS
 293+ 5B9F ~            ; *******************************************************************************************************
 294+ 5B9F ~            ; function to handle CALL BLIT basic extension
 295+ 5B9F ~            ; rotates 1-bit character drawing horizontally with mask and character data and
 296+ 5B9F ~            ; fuses with background data and applies vertical shift too
 297+ 5B9F ~            ; BLIT ( INT request_data_ptr )
 298+ 5B9F ~            ; request_data_ptr described in SHIFT_MERGE_CHARACTER
 299+ 5B9F ~            ; will put ram in page 0 also, page 1 is already there
 300+ 5B9F ~            BLIT:
 301+ 5B9F ~            	; opening (
 302+ 5B9F ~            	CALL CHKCHAR
 303+ 5B9F ~            	DB '('
 304+ 5B9F ~            	; get pointer to request struct
 305+ 5B9F ~            	LD IX, FRMQNT
 306+ 5B9F ~            	CALL CALBAS
 307+ 5B9F ~            	PUSH DE
 308+ 5B9F ~            	; ending )
 309+ 5B9F ~            	CALL CHKCHAR
 310+ 5B9F ~            	DB ')'
 311+ 5B9F ~
 312+ 5B9F ~            	POP IX ; pointer to request struct
 313+ 5B9F ~
 314+ 5B9F ~            	PUSH HL ; save position in BASIC buffer
 315+ 5B9F ~
 316+ 5B9F ~            	LD IY, .RET
 317+ 5B9F ~            	JP ENABLE_PAGE0
 318+ 5B9F ~            .RET:
 319+ 5B9F ~            	EI
 320+ 5B9F ~            	CALL SHIFT_MERGE_CHARACTER
 321+ 5B9F ~
 322+ 5B9F ~                POP DE
 323+ 5B9F ~                POP BC
 324+ 5B9F ~                CALL RESTORE_PAGE_INFO
 325+ 5B9F ~
 326+ 5B9F ~            	POP HL
 327+ 5B9F ~            	RET
 328+ 5B9F ~            ; *******************************************************************************************************
 329+ 5B9F               ENDIF
 330+ 5B9F
 331+ 5B9F               IFDEF CMDS_WITH_PARAMETERS
 332+ 5B9F              ; *******************************************************************************************************
 333+ 5B9F              ; function to handle CALL BLIT basic extension
 334+ 5B9F              ; rotates 1-bit character drawing horizontally with mask and character data and
 335+ 5B9F              ; fuses with background data and applies vertical shift too
 336+ 5B9F              ; in form without pointers
 337+ 5B9F              ; BLIT ( INT x,
 338+ 5B9F              ;		 INT y,
 339+ 5B9F              ;		 INT char_data_pointer,
 340+ 5B9F              ;		 INT mask_data_pointer,
 341+ 5B9F              ;		 INT width (in characters),
 342+ 5B9F              ;		 INT height (in characters),
 343+ 5B9F              ;		 INT background_pointer (top left),
 344+ 5B9F              ;		 INT background_width (in characters),
 345+ 5B9F              ;		 INT background_height (in characters))
 346+ 5B9F              ; will put ram in page 0 also, page 1 is already there
 347+ 5B9F              BLIT:
 348+ 5B9F              	; opening (
 349+ 5B9F CD F2 62     	CALL CHKCHAR
 350+ 5BA2 28           	DB '('
 351+ 5BA3              	; get x coordinate
 352+ 5BA3 DD 21 2F 54  	LD IX, FRMQNT
 353+ 5BA7 CD 59 01     	CALL CALBAS
 354+ 5BAA 7B           	LD A, E
 355+ 5BAB E6 07        	AND 7
 356+ 5BAD 32 12 60     	LD (BLIT_STRUCT+0), A
 357+ 5BB0 CD 8D 5C     	CALL .DAdiv8
 358+ 5BB3 32 0E 60     	LD (BLIT_TMP+0),A
 359+ 5BB6              	; comma
 360+ 5BB6 CD F2 62     	CALL CHKCHAR
 361+ 5BB9 2C           	DB ','
 362+ 5BBA              	; get y coordinate
 363+ 5BBA DD 21 2F 54  	LD IX, FRMQNT
 364+ 5BBE CD 59 01     	CALL CALBAS
 365+ 5BC1 7B           	LD A, E
 366+ 5BC2 E6 07        	AND 7
 367+ 5BC4 32 14 60     	LD (BLIT_STRUCT+2), A
 368+ 5BC7 CD 8D 5C     	CALL .DAdiv8
 369+ 5BCA 32 0F 60     	LD (BLIT_TMP+1),A
 370+ 5BCD              	; comma
 371+ 5BCD CD F2 62     	CALL CHKCHAR
 372+ 5BD0 2C           	DB ','
 373+ 5BD1              	; get char data pointer
 374+ 5BD1 DD 21 2F 54  	LD IX, FRMQNT
 375+ 5BD5 CD 59 01     	CALL CALBAS
 376+ 5BD8 ED 53 1C 60  	LD (BLIT_STRUCT+10), DE
 377+ 5BDC              	; comma
 378+ 5BDC CD F2 62     	CALL CHKCHAR
 379+ 5BDF 2C           	DB ','
 380+ 5BE0              	; get mask data pointer
 381+ 5BE0 DD 21 2F 54  	LD IX, FRMQNT
 382+ 5BE4 CD 59 01     	CALL CALBAS
 383+ 5BE7 ED 53 1A 60  	LD (BLIT_STRUCT+8), DE
 384+ 5BEB              	; comma
 385+ 5BEB CD F2 62     	CALL CHKCHAR
 386+ 5BEE 2C           	DB ','
 387+ 5BEF              	; get width
 388+ 5BEF DD 21 2F 54  	LD IX, FRMQNT
 389+ 5BF3 CD 59 01     	CALL CALBAS
 390+ 5BF6 7B           	LD A, E
 391+ 5BF7 32 20 60     	LD (BLIT_STRUCT+14), A
 392+ 5BFA              	; comma
 393+ 5BFA CD F2 62     	CALL CHKCHAR
 394+ 5BFD 2C           	DB ','
 395+ 5BFE              	; get height
 396+ 5BFE DD 21 2F 54  	LD IX, FRMQNT
 397+ 5C02 CD 59 01     	CALL CALBAS
 398+ 5C05 7B           	LD A, E
 399+ 5C06 32 22 60     	LD (BLIT_STRUCT+16), A
 400+ 5C09              	; comma
 401+ 5C09 CD F2 62     	CALL CHKCHAR
 402+ 5C0C 2C           	DB ','
 403+ 5C0D              	; get background pointer
 404+ 5C0D DD 21 2F 54  	LD IX, FRMQNT
 405+ 5C11 CD 59 01     	CALL CALBAS
 406+ 5C14 ED 53 16 60  	LD (BLIT_STRUCT+4), DE
 407+ 5C18              	; comma
 408+ 5C18 CD F2 62     	CALL CHKCHAR
 409+ 5C1B 2C           	DB ','
 410+ 5C1C              	; get background width
 411+ 5C1C DD 21 2F 54  	LD IX, FRMQNT
 412+ 5C20 CD 59 01     	CALL CALBAS
 413+ 5C23 7B           	LD A, E
 414+ 5C24 32 10 60     	LD (BLIT_TMP+2), A
 415+ 5C27              	; comma
 416+ 5C27 CD F2 62     	CALL CHKCHAR
 417+ 5C2A 2C           	DB ','
 418+ 5C2B              	; get background height
 419+ 5C2B DD 21 2F 54  	LD IX, FRMQNT
 420+ 5C2F CD 59 01     	CALL CALBAS
 421+ 5C32 7B           	LD A, E
 422+ 5C33 32 11 60     	LD (BLIT_TMP+3), A
 423+ 5C36              	; ending )
 424+ 5C36 CD F2 62     	CALL CHKCHAR
 425+ 5C39 29           	DB ')'
 426+ 5C3A
 427+ 5C3A E5           	PUSH HL ; save position in BASIC buffer
 428+ 5C3B
 429+ 5C3B              	; calculate char&mask add to value
 430+ 5C3B 26 00        	LD H, 0
 431+ 5C3D 3A 20 60     	LD A, (BLIT_STRUCT+14)
 432+ 5C40 6F           	LD L, A
 433+ 5C41 CD E1 61     	CALL HLx8
 434+ 5C44 22 1E 60     	LD (BLIT_STRUCT+12), HL
 435+ 5C47              	; calculate background add to value
 436+ 5C47 26 00        	LD H, 0
 437+ 5C49 3A 10 60     	LD A, (BLIT_TMP+2)
 438+ 5C4C 6F           	LD L, A
 439+ 5C4D CD E1 61     	CALL HLx8
 440+ 5C50 22 18 60     	LD (BLIT_STRUCT+6), HL
 441+ 5C53              	; calculate pointer to background location
 442+ 5C53 21 00 00     	LD HL, 0
 443+ 5C56 3A 0F 60     	LD A,(BLIT_TMP+1)
 444+ 5C59 B7           	OR A
 445+ 5C5A 28 08        	JR Z, .L1
 446+ 5C5C 47           	LD B,A
 447+ 5C5D ED 5B 18 60  	LD DE,(BLIT_STRUCT+6)
 448+ 5C61              .L0:
 449+ 5C61 19           	ADD HL, DE
 450+ 5C62 10 FD        	DJNZ .L0
 451+ 5C64              .L1:
 452+ 5C64 EB           	EX DE,HL
 453+ 5C65 26 00        	LD H,0
 454+ 5C67 3A 0E 60     	LD A,(BLIT_TMP+0)
 455+ 5C6A 6F           	LD L,A
 456+ 5C6B CD E1 61     	CALL HLx8
 457+ 5C6E 19           	ADD HL,DE
 458+ 5C6F ED 5B 16 60  	LD DE,(BLIT_STRUCT+4)
 459+ 5C73 19           	ADD HL,DE
 460+ 5C74 22 16 60     	LD (BLIT_STRUCT+4),HL
 461+ 5C77
 462+ 5C77 FD 21 7E 5C  	LD IY, .RET
 463+ 5C7B C3 A5 62     	JP ENABLE_PAGE0
 464+ 5C7E              .RET:
 465+ 5C7E FB           	EI
 466+ 5C7F DD 21 12 60  	LD IX, BLIT_STRUCT
 467+ 5C83 CD 0B 5B     	CALL SHIFT_MERGE_CHARACTER
 468+ 5C86
 469+ 5C86 D1               POP DE
 470+ 5C87 C1               POP BC
 471+ 5C88 CD 1C 62         CALL RESTORE_PAGE_INFO
 472+ 5C8B
 473+ 5C8B E1           	POP HL
 474+ 5C8C C9           	RET
 475+ 5C8D              .DAdiv8:
 476+ 5C8D 7B           	LD A,E
 477+ 5C8E CB 2A        	SRA D
 478+ 5C90 CB 1F            RR  A
 479+ 5C92 CB 2A            SRA D
 480+ 5C94 CB 1F            RR  A
 481+ 5C96 CB 2A            SRA D
 482+ 5C98 CB 1F            RR  A
 483+ 5C9A C9           	RET
 484+ 5C9B              ; *******************************************************************************************************
 485+ 5C9B               ENDIF
# file closed: asm\BLIT.asm
 149  5C9B               ENDIF
 150  5C9B
 151  5C9B               IF (TILE_CMDS == 1)
 152  5C9B               INCLUDE "TILE.asm"
# file opened: asm\TILE.asm
   1+ 5C9B              ; *******************************************************************************************************
   2+ 5C9B              ; generic function to implement tiling
   3+ 5C9B              ; should be modified to call appropriate function for memory or vram
   4+ 5C9B              ; input IX=pointer to following structure
   5+ 5C9B              ; +00 tile_data_ptr
   6+ 5C9B              ; +02 tile_rows
   7+ 5C9B              ; +04 tile_columns
   8+ 5C9B              ; +06 destination_address
   9+ 5C9B              ; +08 dest_to_next_row_add_to_value
  10+ 5C9B              ; +10 num_horizontal_tiles
  11+ 5C9B              ; +12 num_vertical_tiles
  12+ 5C9B              ; modifies AF, BC, DE, HL
  13+ 5C9B              TILE:
  14+ 5C9B DD 6E 06     	LD L, (IX+6)
  15+ 5C9E DD 66 07     	LD H, (IX+7) ; destination address
  16+ 5CA1 22 0E 60     	LD (TILETMP1), HL
  17+ 5CA4 DD 46 0C     	LD B, (IX+12) ; vertical tile number
  18+ 5CA7              .L1:
  19+ 5CA7 C5           	PUSH BC
  20+ 5CA8 DD 6E 00     		LD L, (IX+0)
  21+ 5CAB DD 66 01     		LD H, (IX+1) ; tile address
  22+ 5CAE 22 10 60     		LD (TILETMP2), HL
  23+ 5CB1 DD 46 02     		LD B, (IX+2) ; tile rows
  24+ 5CB4              .L2:
  25+ 5CB4 C5           		PUSH BC
  26+ 5CB5 CD 00 00     .CALL1:		CALL 0
  27+ 5CB8 DD 46 0A     			LD B, (IX+10) ; horizontal tile num
  28+ 5CBB              .L3:
  29+ 5CBB C5           			PUSH BC
  30+ 5CBC 2A 10 60     				LD HL, (TILETMP2)
  31+ 5CBF DD 46 04     				LD B, (IX+4) ; tile columns
  32+ 5CC2              .L4:
  33+ 5CC2 C5           				PUSH BC
  34+ 5CC3              .CALL2:
  35+ 5CC3 CD 00 00     					CALL 0
  36+ 5CC6 C1           				POP BC
  37+ 5CC7 10 F9        				DJNZ .L4
  38+ 5CC9 C1           			POP BC
  39+ 5CCA 10 EF        			DJNZ .L3
  40+ 5CCC 22 10 60     			LD (TILETMP2), HL
  41+ 5CCF 2A 0E 60     			LD HL, (TILETMP1)
  42+ 5CD2 DD 5E 08     			LD E, (IX+8)
  43+ 5CD5 DD 56 09     			LD D, (IX+9) ; add to value for dest next row
  44+ 5CD8 19           			ADD HL, DE
  45+ 5CD9 22 0E 60     			LD (TILETMP1), HL
  46+ 5CDC C1           		POP BC
  47+ 5CDD 10 D5        		DJNZ .L2
  48+ 5CDF C1           	POP BC
  49+ 5CE0 10 C5        	DJNZ .L1
  50+ 5CE2 C9           	RET
  51+ 5CE3              ; *******************************************************************************************************
  52+ 5CE3
  53+ 5CE3               IFNDEF CMDS_WITH_PARAMETERS
  54+ 5CE3 ~            ; *******************************************************************************************************
  55+ 5CE3 ~            ; function to handle CALL TILERAM basic extension
  56+ 5CE3 ~            ; fills memory with tiles
  57+ 5CE3 ~            ; TILERAM ( INT request_data_ptr )
  58+ 5CE3 ~            ; request_data_ptr described in TILE
  59+ 5CE3 ~            ; will put ram in page 0 also, page 1 is already there
  60+ 5CE3 ~            TILERAM:
  61+ 5CE3 ~            	; opening (
  62+ 5CE3 ~            	CALL CHKCHAR
  63+ 5CE3 ~            	DB '('
  64+ 5CE3 ~            	; get pointer to request struct
  65+ 5CE3 ~            	LD IX, FRMQNT
  66+ 5CE3 ~            	CALL CALBAS
  67+ 5CE3 ~            	PUSH DE
  68+ 5CE3 ~            	; ending )
  69+ 5CE3 ~            	CALL CHKCHAR
  70+ 5CE3 ~            	DB ')'
  71+ 5CE3 ~
  72+ 5CE3 ~            	POP IX ; pointer to request struct
  73+ 5CE3 ~
  74+ 5CE3 ~            	PUSH HL ; save position in BASIC buffer
  75+ 5CE3 ~
  76+ 5CE3 ~            	LD IY, .RET
  77+ 5CE3 ~            	JP ENABLE_PAGE0
  78+ 5CE3 ~            .RET:
  79+ 5CE3 ~            	EI
  80+ 5CE3 ~            	; set RAM functions to call
  81+ 5CE3 ~            	LD HL, .TILECOPY
  82+ 5CE3 ~            	LD (TILE.CALL2+1), HL
  83+ 5CE3 ~            	LD HL, .SETDESTROW
  84+ 5CE3 ~            	LD (TILE.CALL1+1), HL
  85+ 5CE3 ~            	LD A,1
  86+ 5CE3 ~            	LD (VRAM_UPDATE_IN_PROGRESS),A
  87+ 5CE3 ~            	CALL TILE
  88+ 5CE3 ~            	XOR A
  89+ 5CE3 ~            	LD (VRAM_UPDATE_IN_PROGRESS),A
  90+ 5CE3 ~
  91+ 5CE3 ~                POP DE
  92+ 5CE3 ~                POP BC
  93+ 5CE3 ~                CALL RESTORE_PAGE_INFO
  94+ 5CE3 ~
  95+ 5CE3 ~            	POP HL
  96+ 5CE3 ~            	RET
  97+ 5CE3 ~            .TILECOPY:
  98+ 5CE3 ~            	.8 LDI
  99+ 5CE3 ~            	RET
 100+ 5CE3 ~            .SETDESTROW:
 101+ 5CE3 ~            	LD DE, (TILETMP1)
 102+ 5CE3 ~            	RET
 103+ 5CE3 ~            ; *******************************************************************************************************
 104+ 5CE3               ENDIF
 105+ 5CE3
 106+ 5CE3               IFDEF CMDS_WITH_PARAMETERS
 107+ 5CE3              ; *******************************************************************************************************
 108+ 5CE3              ; function to handle CALL TILERAM basic extension
 109+ 5CE3              ; fills memory with tiles
 110+ 5CE3              ; TILERAM ( INT tile_data_pointer,
 111+ 5CE3              ;			INT tile_columns,
 112+ 5CE3              ;			INT tile_rows,
 113+ 5CE3              ;			INT destination_pointer,
 114+ 5CE3              ;			INT destination_columns,
 115+ 5CE3              ;			INT destination_rows,
 116+ 5CE3              ;			INT destination_begin_column,
 117+ 5CE3              ;			INT destination_begin_row,
 118+ 5CE3              ;			INT number_of_tiles_horizontally,
 119+ 5CE3              ;			INT	number_of_tiles_vertically )
 120+ 5CE3              ; will put ram in page 0 also, page 1 is already there
 121+ 5CE3              TILERAM:
 122+ 5CE3              	; opening (
 123+ 5CE3 CD F2 62     	CALL CHKCHAR
 124+ 5CE6 28           	DB '('
 125+ 5CE7              	; get tile data pointer coordinate
 126+ 5CE7 DD 21 2F 54  	LD IX, FRMQNT
 127+ 5CEB CD 59 01     	CALL CALBAS
 128+ 5CEE ED 53 12 60  	LD (BLIT_STRUCT+0), DE
 129+ 5CF2              	; comma
 130+ 5CF2 CD F2 62     	CALL CHKCHAR
 131+ 5CF5 2C           	DB ','
 132+ 5CF6              	; get tile columns
 133+ 5CF6 DD 21 2F 54  	LD IX, FRMQNT
 134+ 5CFA CD 59 01     	CALL CALBAS
 135+ 5CFD ED 53 16 60  	LD (BLIT_STRUCT+4), DE
 136+ 5D01              	; comma
 137+ 5D01 CD F2 62     	CALL CHKCHAR
 138+ 5D04 2C           	DB ','
 139+ 5D05              	; get tile columns
 140+ 5D05 DD 21 2F 54  	LD IX, FRMQNT
 141+ 5D09 CD 59 01     	CALL CALBAS
 142+ 5D0C ED 53 14 60  	LD (BLIT_STRUCT+2), DE
 143+ 5D10              	; comma
 144+ 5D10 CD F2 62     	CALL CHKCHAR
 145+ 5D13 2C           	DB ','
 146+ 5D14              	; get destintion pointer
 147+ 5D14 DD 21 2F 54  	LD IX, FRMQNT
 148+ 5D18 CD 59 01     	CALL CALBAS
 149+ 5D1B ED 53 18 60  	LD (BLIT_STRUCT+6), DE
 150+ 5D1F              	; comma
 151+ 5D1F CD F2 62     	CALL CHKCHAR
 152+ 5D22 2C           	DB ','
 153+ 5D23              	; get destination columns
 154+ 5D23 DD 21 2F 54  	LD IX, FRMQNT
 155+ 5D27 CD 59 01     	CALL CALBAS
 156+ 5D2A 7B           	LD A, E
 157+ 5D2B 32 0E 60     	LD (BLIT_TMP+0), A
 158+ 5D2E              	; comma
 159+ 5D2E CD F2 62     	CALL CHKCHAR
 160+ 5D31 2C           	DB ','
 161+ 5D32              	; get destination rows
 162+ 5D32 DD 21 2F 54  	LD IX, FRMQNT
 163+ 5D36 CD 59 01     	CALL CALBAS
 164+ 5D39 7B           	LD A, E
 165+ 5D3A 32 0F 60     	LD (BLIT_TMP+1), A
 166+ 5D3D              	; comma
 167+ 5D3D CD F2 62     	CALL CHKCHAR
 168+ 5D40 2C           	DB ','
 169+ 5D41              	; get destination begin column
 170+ 5D41 DD 21 2F 54  	LD IX, FRMQNT
 171+ 5D45 CD 59 01     	CALL CALBAS
 172+ 5D48 7B           	LD A, E
 173+ 5D49 32 10 60     	LD (BLIT_TMP+2), A
 174+ 5D4C              	; comma
 175+ 5D4C CD F2 62     	CALL CHKCHAR
 176+ 5D4F 2C           	DB ','
 177+ 5D50              	; get destination begin row
 178+ 5D50 DD 21 2F 54  	LD IX, FRMQNT
 179+ 5D54 CD 59 01     	CALL CALBAS
 180+ 5D57 7B           	LD A, E
 181+ 5D58 32 11 60     	LD (BLIT_TMP+3), A
 182+ 5D5B              	; comma
 183+ 5D5B CD F2 62     	CALL CHKCHAR
 184+ 5D5E 2C           	DB ','
 185+ 5D5F              	; get number of tiles horizontally
 186+ 5D5F DD 21 2F 54  	LD IX, FRMQNT
 187+ 5D63 CD 59 01     	CALL CALBAS
 188+ 5D66 ED 53 1C 60  	LD (BLIT_STRUCT+10), DE
 189+ 5D6A              	; comma
 190+ 5D6A CD F2 62     	CALL CHKCHAR
 191+ 5D6D 2C           	DB ','
 192+ 5D6E              	; get number of tiles vertically
 193+ 5D6E DD 21 2F 54  	LD IX, FRMQNT
 194+ 5D72 CD 59 01     	CALL CALBAS
 195+ 5D75 ED 53 1E 60  	LD (BLIT_STRUCT+12), DE
 196+ 5D79              	; ending )
 197+ 5D79 CD F2 62     	CALL CHKCHAR
 198+ 5D7C 29           	DB ')'
 199+ 5D7D
 200+ 5D7D E5           	PUSH HL ; save position in BASIC buffer
 201+ 5D7E
 202+ 5D7E              	; calculate destination add to value
 203+ 5D7E 26 00        	LD H, 0
 204+ 5D80 3A 0E 60     	LD A, (BLIT_TMP+0)
 205+ 5D83 6F           	LD L, A
 206+ 5D84 CD E1 61     	CALL HLx8
 207+ 5D87 22 1A 60     	LD (BLIT_STRUCT+8), HL
 208+ 5D8A              	; calculate pointer to background location
 209+ 5D8A 21 00 00     	LD HL, 0
 210+ 5D8D 3A 11 60     	LD A,(BLIT_TMP+3)
 211+ 5D90 B7           	OR A
 212+ 5D91 28 08        	JR Z, .L1
 213+ 5D93 47           	LD B,A
 214+ 5D94 ED 5B 1A 60  	LD DE,(BLIT_STRUCT+8)
 215+ 5D98              .L0:
 216+ 5D98 19           	ADD HL, DE
 217+ 5D99 10 FD        	DJNZ .L0
 218+ 5D9B              .L1:
 219+ 5D9B EB           	EX DE,HL
 220+ 5D9C 26 00        	LD H,0
 221+ 5D9E 3A 10 60     	LD A,(BLIT_TMP+2)
 222+ 5DA1 6F           	LD L,A
 223+ 5DA2 CD E1 61     	CALL HLx8
 224+ 5DA5 19           	ADD HL,DE
 225+ 5DA6 ED 5B 18 60  	LD DE,(BLIT_STRUCT+6)
 226+ 5DAA 19           	ADD HL,DE
 227+ 5DAB 22 18 60     	LD (BLIT_STRUCT+6),HL
 228+ 5DAE
 229+ 5DAE FD 21 B5 5D  	LD IY, .RET
 230+ 5DB2 C3 A5 62     	JP ENABLE_PAGE0
 231+ 5DB5              .RET:
 232+ 5DB5 FB           	EI
 233+ 5DB6              	; set RAM functions to call
 234+ 5DB6 21 D0 5D     	LD HL, .TILECOPY
 235+ 5DB9 22 C4 5C     	LD (TILE.CALL2+1), HL
 236+ 5DBC 21 E1 5D     	LD HL, .SETDESTROW
 237+ 5DBF 22 B6 5C     	LD (TILE.CALL1+1), HL
 238+ 5DC2 DD 21 12 60  	LD IX,BLIT_STRUCT
 239+ 5DC6 CD 9B 5C     	CALL TILE
 240+ 5DC9
 241+ 5DC9 D1               POP DE
 242+ 5DCA C1               POP BC
 243+ 5DCB CD 1C 62         CALL RESTORE_PAGE_INFO
 244+ 5DCE
 245+ 5DCE E1           	POP HL
 246+ 5DCF C9           	RET
 247+ 5DD0              .TILECOPY:
 248+ 5DD0 ED A0       > LDI
 248+ 5DD2 ED A0       > LDI
 248+ 5DD4 ED A0       > LDI
 248+ 5DD6 ED A0       > LDI
 248+ 5DD8 ED A0       > LDI
 248+ 5DDA ED A0       > LDI
 248+ 5DDC ED A0       > LDI
 248+ 5DDE ED A0       > LDI
 249+ 5DE0 C9           	RET
 250+ 5DE1              .SETDESTROW:
 251+ 5DE1 ED 5B 0E 60  	LD DE, (TILETMP1)
 252+ 5DE5 C9           	RET
 253+ 5DE6              ; *******************************************************************************************************
 254+ 5DE6               ENDIF
 255+ 5DE6
 256+ 5DE6               IFDEF CMDS_WITH_PARAMETERS
 257+ 5DE6              ; *******************************************************************************************************
 258+ 5DE6              ; function to handle CALL TILEVRM basic extension
 259+ 5DE6              ; fills vram with tiles
 260+ 5DE6              ; TILEVRM ( INT tile_data_pointer,
 261+ 5DE6              ;			INT tile_columns,
 262+ 5DE6              ;			INT tile_rows,
 263+ 5DE6              ;			INT destination_begin_column,
 264+ 5DE6              ;			INT destination_begin_row,
 265+ 5DE6              ;			INT number_of_tiles_horizontally,
 266+ 5DE6              ;			INT	number_of_tiles_vertically )
 267+ 5DE6              ; will put ram in page 0 also, page 1 is already there
 268+ 5DE6              ; for destination uses address of SCREEN 2 pattern buffer and 32x24 size
 269+ 5DE6              TILEVRM:
 270+ 5DE6              	; opening (
 271+ 5DE6 CD F2 62     	CALL CHKCHAR
 272+ 5DE9 28           	DB '('
 273+ 5DEA              	; get tile data pointer coordinate
 274+ 5DEA DD 21 2F 54  	LD IX, FRMQNT
 275+ 5DEE CD 59 01     	CALL CALBAS
 276+ 5DF1 ED 53 12 60  	LD (BLIT_STRUCT+0), DE
 277+ 5DF5              	; comma
 278+ 5DF5 CD F2 62     	CALL CHKCHAR
 279+ 5DF8 2C           	DB ','
 280+ 5DF9              	; get tile columns
 281+ 5DF9 DD 21 2F 54  	LD IX, FRMQNT
 282+ 5DFD CD 59 01     	CALL CALBAS
 283+ 5E00 ED 53 16 60  	LD (BLIT_STRUCT+4), DE
 284+ 5E04              	; comma
 285+ 5E04 CD F2 62     	CALL CHKCHAR
 286+ 5E07 2C           	DB ','
 287+ 5E08              	; get tile columns
 288+ 5E08 DD 21 2F 54  	LD IX, FRMQNT
 289+ 5E0C CD 59 01     	CALL CALBAS
 290+ 5E0F ED 53 14 60  	LD (BLIT_STRUCT+2), DE
 291+ 5E13              	; comma
 292+ 5E13 CD F2 62     	CALL CHKCHAR
 293+ 5E16 2C           	DB ','
 294+ 5E17              	; get destination begin column
 295+ 5E17 DD 21 2F 54  	LD IX, FRMQNT
 296+ 5E1B CD 59 01     	CALL CALBAS
 297+ 5E1E 7B           	LD A, E
 298+ 5E1F 32 10 60     	LD (BLIT_TMP+2), A
 299+ 5E22              	; comma
 300+ 5E22 CD F2 62     	CALL CHKCHAR
 301+ 5E25 2C           	DB ','
 302+ 5E26              	; get destination begin row
 303+ 5E26 DD 21 2F 54  	LD IX, FRMQNT
 304+ 5E2A CD 59 01     	CALL CALBAS
 305+ 5E2D 7B           	LD A, E
 306+ 5E2E 32 11 60     	LD (BLIT_TMP+3), A
 307+ 5E31              	; comma
 308+ 5E31 CD F2 62     	CALL CHKCHAR
 309+ 5E34 2C           	DB ','
 310+ 5E35              	; get number of tiles horizontally
 311+ 5E35 DD 21 2F 54  	LD IX, FRMQNT
 312+ 5E39 CD 59 01     	CALL CALBAS
 313+ 5E3C ED 53 1C 60  	LD (BLIT_STRUCT+10), DE
 314+ 5E40              	; comma
 315+ 5E40 CD F2 62     	CALL CHKCHAR
 316+ 5E43 2C           	DB ','
 317+ 5E44              	; get number of tiles vertically
 318+ 5E44 DD 21 2F 54  	LD IX, FRMQNT
 319+ 5E48 CD 59 01     	CALL CALBAS
 320+ 5E4B ED 53 1E 60  	LD (BLIT_STRUCT+12), DE
 321+ 5E4F              	; ending )
 322+ 5E4F CD F2 62     	CALL CHKCHAR
 323+ 5E52 29           	DB ')'
 324+ 5E53
 325+ 5E53 E5           	PUSH HL ; save position in BASIC buffer
 326+ 5E54
 327+ 5E54              	; calculate destination add to value
 328+ 5E54 21 00 01     	LD HL, 256
 329+ 5E57 22 1A 60     	LD (BLIT_STRUCT+8), HL
 330+ 5E5A              	; calculate pointer to background location
 331+ 5E5A 3A 11 60     	LD A,(BLIT_TMP+3)
 332+ 5E5D 67           	LD H,A
 333+ 5E5E 2E 00        	LD L,0
 334+ 5E60 EB           	EX DE,HL
 335+ 5E61 26 00        	LD H,0
 336+ 5E63 3A 10 60     	LD A,(BLIT_TMP+2)
 337+ 5E66 6F           	LD L,A
 338+ 5E67 CD E1 61     	CALL HLx8
 339+ 5E6A 19           	ADD HL,DE
 340+ 5E6B ED 5B CB F3  	LD DE,(GRPCGP)
 341+ 5E6F 19           	ADD HL,DE
 342+ 5E70 22 18 60     	LD (BLIT_STRUCT+6),HL
 343+ 5E73
 344+ 5E73 FD 21 7A 5E  	LD IY, .RET
 345+ 5E77 C3 A5 62     	JP ENABLE_PAGE0
 346+ 5E7A              .RET:
 347+ 5E7A FB           	EI
 348+ 5E7B              	; set RAM functions to call
 349+ 5E7B 21 95 5E     	LD HL, .TILECOPY
 350+ 5E7E 22 C4 5C     	LD (TILE.CALL2+1), HL
 351+ 5E81 21 9B 5E     	LD HL, .SETDESTROW
 352+ 5E84 22 B6 5C     	LD (TILE.CALL1+1), HL
 353+ 5E87 DD 21 12 60  	LD IX,BLIT_STRUCT
 354+ 5E8B CD 9B 5C     	CALL TILE
 355+ 5E8E
 356+ 5E8E D1               POP DE
 357+ 5E8F C1               POP BC
 358+ 5E90 CD 1C 62         CALL RESTORE_PAGE_INFO
 359+ 5E93
 360+ 5E93 E1           	POP HL
 361+ 5E94 C9           	RET
 362+ 5E95              .TILECOPY:
 363+ 5E95 01 98 08     	LD BC, #0898
 364+ 5E98 C3 D9 61     	JP BBYTECOPY_NO_C
 365+ 5E9B              .SETDESTROW:
 366+ 5E9B 2A 0E 60     	LD HL, (TILETMP1)
 367+ 5E9E F3           	DI
 368+ 5E9F CD CC 61     	CALL SETWRT_LOCAL
 369+ 5EA2 FB           	EI
 370+ 5EA3 C9           	RET
 371+ 5EA4              ; *******************************************************************************************************
 372+ 5EA4               ENDIF
 373+ 5EA4
 374+ 5EA4               IFNDEF CMDS_WITH_PARAMETERS
 375+ 5EA4 ~            ; *******************************************************************************************************
 376+ 5EA4 ~            ; function to handle CALL TILEVRM basic extension
 377+ 5EA4 ~            ; fills vram with tiles
 378+ 5EA4 ~            ; TILEVRM ( INT request_data_ptr )
 379+ 5EA4 ~            ; request_data_ptr described in TILE
 380+ 5EA4 ~            ; will put ram in page 0 also, page 1 is already there
 381+ 5EA4 ~            TILEVRM:
 382+ 5EA4 ~            	; opening (
 383+ 5EA4 ~            	CALL CHKCHAR
 384+ 5EA4 ~            	DB '('
 385+ 5EA4 ~            	; get pointer to request struct
 386+ 5EA4 ~            	LD IX, FRMQNT
 387+ 5EA4 ~            	CALL CALBAS
 388+ 5EA4 ~            	PUSH DE
 389+ 5EA4 ~            	; ending )
 390+ 5EA4 ~            	CALL CHKCHAR
 391+ 5EA4 ~            	DB ')'
 392+ 5EA4 ~
 393+ 5EA4 ~            	POP IX ; pointer to request struct
 394+ 5EA4 ~
 395+ 5EA4 ~            	PUSH HL ; save position in BASIC buffer
 396+ 5EA4 ~
 397+ 5EA4 ~            	LD IY, .RET
 398+ 5EA4 ~            	JP ENABLE_PAGE0
 399+ 5EA4 ~            .RET:
 400+ 5EA4 ~            	EI
 401+ 5EA4 ~            	; set RAM functions to call
 402+ 5EA4 ~            	LD HL, .TILECOPY
 403+ 5EA4 ~            	LD (TILE.CALL2+1), HL
 404+ 5EA4 ~            	LD HL, .SETDESTROW
 405+ 5EA4 ~            	LD (TILE.CALL1+1), HL
 406+ 5EA4 ~            	CALL TILE
 407+ 5EA4 ~
 408+ 5EA4 ~                POP DE
 409+ 5EA4 ~                POP BC
 410+ 5EA4 ~                CALL RESTORE_PAGE_INFO
 411+ 5EA4 ~
 412+ 5EA4 ~            	POP HL
 413+ 5EA4 ~            	RET
 414+ 5EA4 ~            .TILECOPY:
 415+ 5EA4 ~            	LD BC, #0898
 416+ 5EA4 ~            	JP BBYTECOPY_NO_C
 417+ 5EA4 ~            .SETDESTROW:
 418+ 5EA4 ~            	LD HL, (TILETMP1)
 419+ 5EA4 ~            	DI
 420+ 5EA4 ~            	CALL SETWRT_LOCAL
 421+ 5EA4 ~            	EI
 422+ 5EA4 ~            	RET
 423+ 5EA4 ~            ; *******************************************************************************************************
 424+ 5EA4               ENDIF
# file closed: asm\TILE.asm
 153  5EA4               ENDIF
 154  5EA4
 155  5EA4               IF (BYTEOPS_CMDS == 1)
 156  5EA4 ~             INCLUDE "BYTEOPS.asm"
 157  5EA4               ENDIF
 158  5EA4
 159  5EA4               IF (COLL_CMD == 1)
 160  5EA4               INCLUDE "COLLISION.asm"
# file opened: asm\COLLISION.asm
   1+ 5EA4              ; ************************************************************************************************
   2+ 5EA4              ; quick test if HL<=DE<=HL+BC
   3+ 5EA4              ; input BC=width, DE=x, HL=min
   4+ 5EA4              ; if not true flag C set
   5+ 5EA4              ; modifies AF
   6+ 5EA4              GENERIC_INNER_CHECK:
   7+ 5EA4 E5               PUSH HL
   8+ 5EA5 D5               PUSH DE
   9+ 5EA6 EB               EX DE,HL
  10+ 5EA7 A7               AND A
  11+ 5EA8 ED 52            SBC HL, DE
  12+ 5EAA FA B8 5E         JP M, .GENERIC_INNER_CHECK_NOT
  13+ 5EAD A7               AND A
  14+ 5EAE ED 42            SBC HL, BC
  15+ 5EB0 28 03            JR Z, .L2
  16+ 5EB2 F2 B8 5E         JP P, .GENERIC_INNER_CHECK_NOT
  17+ 5EB5              .L2:
  18+ 5EB5 A7               AND A
  19+ 5EB6 18 01            JR .EXIT
  20+ 5EB8              .GENERIC_INNER_CHECK_NOT:
  21+ 5EB8 37               SCF
  22+ 5EB9              .EXIT:
  23+ 5EB9 D1               POP DE
  24+ 5EBA E1               POP HL
  25+ 5EBB C9               RET
  26+ 5EBC              ; ************************************************************************************************
  27+ 5EBC
  28+ 5EBC              ; ************************************************************************************************
  29+ 5EBC              ; function to check if rectangles are overlapping
  30+ 5EBC              ; input IX=pointer to struct
  31+ 5EBC              ;  +00 active flag
  32+ 5EBC              ;  +02 x coordinate
  33+ 5EBC              ;  +04 y coordinate
  34+ 5EBC              ;  +06 x offset where rectangle begins
  35+ 5EBC              ;  +08 y offset where rectangle begins
  36+ 5EBC              ;  +10 width
  37+ 5EBC              ;  +12 height
  38+ 5EBC              ; input BLIT_STRUCT data
  39+ 5EBC              ;  +00 x coordinate
  40+ 5EBC              ;  +02 y coordinate
  41+ 5EBC              ;  +04 width
  42+ 5EBC              ;  +06 height
  43+ 5EBC              ; returns CF=1 if not overlapping, CF=0 if overlapping
  44+ 5EBC              RECTANGLE_OVERLAP_CHECK:
  45+ 5EBC                  ; first check which rectanlge is higher
  46+ 5EBC DD 6E 0C         LD L,(IX+12)
  47+ 5EBF DD 66 0D         LD H,(IX+13)
  48+ 5EC2 ED 5B 18 60      LD DE,(BLIT_STRUCT+6)
  49+ 5EC6 A7               AND A
  50+ 5EC7 ED 52            SBC HL,DE
  51+ 5EC9 DD 6E 04         LD L,(IX+4)
  52+ 5ECC DD 66 05         LD H,(IX+5)
  53+ 5ECF DD 5E 08         LD E,(IX+8)
  54+ 5ED2 DD 56 09         LD D,(IX+9)
  55+ 5ED5 FA F5 5E         JP M,.L1
  56+ 5ED8                  ; equally high or IX defined one higher
  57+ 5ED8                  ; check upper boundary
  58+ 5ED8 19               ADD HL,DE
  59+ 5ED9 ED 5B 14 60      LD DE,(BLIT_STRUCT+2)
  60+ 5EDD DD 4E 0C         LD C,(IX+12)
  61+ 5EE0 DD 46 0D         LD B,(IX+13)
  62+ 5EE3 CD A4 5E         CALL GENERIC_INNER_CHECK
  63+ 5EE6 30 29            JR NC,.INSIDE
  64+ 5EE8                  ; check lower boundary
  65+ 5EE8 E5               PUSH HL
  66+ 5EE9 2A 18 60         LD HL,(BLIT_STRUCT+6)
  67+ 5EEC 19               ADD HL,DE
  68+ 5EED EB               EX DE,HL
  69+ 5EEE E1               POP HL
  70+ 5EEF CD A4 5E         CALL GENERIC_INNER_CHECK
  71+ 5EF2 30 1D            JR NC,.INSIDE
  72+ 5EF4 C9               RET ; not overlapping
  73+ 5EF5              .L1:
  74+ 5EF5                  ; rectangle defined in BLIT_STRUCT is higher
  75+ 5EF5 19               ADD HL,DE
  76+ 5EF6 EB               EX DE,HL
  77+ 5EF7 2A 14 60         LD HL,(BLIT_STRUCT+2)
  78+ 5EFA ED 4B 18 60      LD BC,(BLIT_STRUCT+6)
  79+ 5EFE CD A4 5E         CALL GENERIC_INNER_CHECK
  80+ 5F01 30 0E            JR NC,.INSIDE
  81+ 5F03 E5               PUSH HL
  82+ 5F04 DD 6E 0C         LD L,(IX+12)
  83+ 5F07 DD 66 0D         LD H,(IX+13)
  84+ 5F0A 19               ADD HL,DE
  85+ 5F0B EB               EX DE,HL
  86+ 5F0C E1               POP HL
  87+ 5F0D CD A4 5E         CALL GENERIC_INNER_CHECK
  88+ 5F10 D8               RET C
  89+ 5F11              .INSIDE:
  90+ 5F11                  ; check x coordinate
  91+ 5F11                  ; first check which rectangle is wider
  92+ 5F11 DD 6E 0A         LD L,(IX+10)
  93+ 5F14 DD 66 0B         LD H,(IX+11)
  94+ 5F17 ED 5B 16 60      LD DE,(BLIT_STRUCT+4)
  95+ 5F1B A7               AND A
  96+ 5F1C ED 52            SBC HL,DE
  97+ 5F1E DD 6E 02         LD L,(IX+2)
  98+ 5F21 DD 66 03         LD H,(IX+3)
  99+ 5F24 DD 5E 06         LD E,(IX+6)
 100+ 5F27 DD 56 07         LD D,(IX+7)
 101+ 5F2A FA 46 5F         JP M,.L2
 102+ 5F2D                  ; equally wide or IX defined one wider
 103+ 5F2D                  ; check left boundary
 104+ 5F2D 19               ADD HL,DE
 105+ 5F2E ED 5B 12 60      LD DE,(BLIT_STRUCT+0)
 106+ 5F32 DD 4E 0A         LD C,(IX+10)
 107+ 5F35 DD 46 0B         LD B,(IX+11)
 108+ 5F38 CD A4 5E         CALL GENERIC_INNER_CHECK
 109+ 5F3B D0               RET NC ; overlap
 110+ 5F3C                  ; check right boundary
 111+ 5F3C E5               PUSH HL
 112+ 5F3D 2A 16 60         LD HL,(BLIT_STRUCT+4)
 113+ 5F40 19               ADD HL,DE
 114+ 5F41 EB               EX DE,HL
 115+ 5F42 E1               POP HL
 116+ 5F43 C3 A4 5E         JP GENERIC_INNER_CHECK ; CF and result set by fn call
 117+ 5F46              .L2:
 118+ 5F46                  ; rectangle defined in BLIT_STRUCT is higher
 119+ 5F46 19               ADD HL,DE
 120+ 5F47 EB               EX DE,HL
 121+ 5F48 2A 12 60         LD HL,(BLIT_STRUCT+0)
 122+ 5F4B ED 4B 16 60      LD BC,(BLIT_STRUCT+4)
 123+ 5F4F CD A4 5E         CALL GENERIC_INNER_CHECK
 124+ 5F52 D0               RET NC ; overlap
 125+ 5F53 E5               PUSH HL
 126+ 5F54 DD 6E 0A         LD L,(IX+10)
 127+ 5F57 DD 66 0B         LD H,(IX+11)
 128+ 5F5A 19               ADD HL,DE
 129+ 5F5B EB               EX DE,HL
 130+ 5F5C E1               POP HL
 131+ 5F5D C3 A4 5E         JP GENERIC_INNER_CHECK
 132+ 5F60              ; ************************************************************************************************
 133+ 5F60
 134+ 5F60              ; ************************************************************************************************
 135+ 5F60              ; function tries to find rectangle overlap and returns an index if found
 136+ 5F60              ; input BLIT_STRUCT data
 137+ 5F60              ;  +00 x coordinate
 138+ 5F60              ;  +02 y coordinate
 139+ 5F60              ;  +04 width
 140+ 5F60              ;  +06 height
 141+ 5F60              ;  +08 number of items in a list, described under RECTANGLE_OVERLAP_CHECK
 142+ 5F60              ;  +09 pointer to first element
 143+ 5F60              ;  +11 pointer to INT result variable
 144+ 5F60              ; returns CF=1 if not overlapping
 145+ 5F60              ; returns A=list index and CF=0 if overlapping
 146+ 5F60              FIND_OVERLAP:
 147+ 5F60 3A 1A 60         LD A,(BLIT_STRUCT+8)
 148+ 5F63 47               LD B,A
 149+ 5F64 DD 2A 1B 60      LD IX,(BLIT_STRUCT+9)
 150+ 5F68              .L1:
 151+ 5F68 C5               PUSH BC
 152+ 5F69 DD 7E 00         LD A,(IX)
 153+ 5F6C DD B6 01         OR (IX+1)
 154+ 5F6F 28 0C            JR Z,.NEXT
 155+ 5F71 CD BC 5E         CALL RECTANGLE_OVERLAP_CHECK
 156+ 5F74 38 07            JR C,.NEXT
 157+ 5F76                  ; found
 158+ 5F76 C1               POP BC
 159+ 5F77 3A 1A 60         LD A,(BLIT_STRUCT+8)
 160+ 5F7A 90               SUB B
 161+ 5F7B A7               AND A
 162+ 5F7C C9               RET
 163+ 5F7D              .NEXT:
 164+ 5F7D 11 0E 00         LD DE,14
 165+ 5F80 DD 19            ADD IX,DE
 166+ 5F82 C1               POP BC
 167+ 5F83 10 E3            DJNZ .L1
 168+ 5F85 37               SCF
 169+ 5F86 C9               RET
 170+ 5F87              ; ************************************************************************************************
 171+ 5F87
 172+ 5F87              ; ************************************************************************************************
 173+ 5F87              ; function to handle CALL COLL basic extension
 174+ 5F87              ; checks for collision between player and other rectangles
 175+ 5F87              ; COLL ( INT result variable,
 176+ 5F87              ;	     INT player x value,
 177+ 5F87              ;	     INT player y value,
 178+ 5F87              ;	     INT player width,
 179+ 5F87              ;	     INT player height,
 180+ 5F87              ;	     INT number of items in a list,
 181+ 5F87              ;		 INT[6][n] rectangle struct )
 182+ 5F87              ; will fill result variable with index or -1 if no collision
 183+ 5F87              ; rectangle struct described under RECTANGLE_OVERLAP_CHECK
 184+ 5F87              COLL:
 185+ 5F87              	; opening (
 186+ 5F87 CD F2 62     	CALL CHKCHAR
 187+ 5F8A 28           	DB '('
 188+ 5F8B              	; get address of result variable
 189+ 5F8B DD 21 A4 5E  	LD IX, PTRGET
 190+ 5F8F CD 59 01     	CALL CALBAS
 191+ 5F92 ED 53 1D 60  	LD (BLIT_STRUCT+11),DE
 192+ 5F96              	; comma
 193+ 5F96 CD F2 62     	CALL CHKCHAR
 194+ 5F99 2C           	DB ','
 195+ 5F9A              	; get x
 196+ 5F9A DD 21 2F 54  	LD IX, FRMQNT
 197+ 5F9E CD 59 01     	CALL CALBAS
 198+ 5FA1 ED 53 12 60  	LD (BLIT_STRUCT+0),DE
 199+ 5FA5              	; comma
 200+ 5FA5 CD F2 62     	CALL CHKCHAR
 201+ 5FA8 2C           	DB ','
 202+ 5FA9              	; get y
 203+ 5FA9 DD 21 2F 54  	LD IX, FRMQNT
 204+ 5FAD CD 59 01     	CALL CALBAS
 205+ 5FB0 ED 53 14 60  	LD (BLIT_STRUCT+2),DE
 206+ 5FB4              	; comma
 207+ 5FB4 CD F2 62     	CALL CHKCHAR
 208+ 5FB7 2C           	DB ','
 209+ 5FB8              	; get width
 210+ 5FB8 DD 21 2F 54  	LD IX, FRMQNT
 211+ 5FBC CD 59 01     	CALL CALBAS
 212+ 5FBF ED 53 16 60  	LD (BLIT_STRUCT+4),DE
 213+ 5FC3              	; comma
 214+ 5FC3 CD F2 62     	CALL CHKCHAR
 215+ 5FC6 2C           	DB ','
 216+ 5FC7              	; get height
 217+ 5FC7 DD 21 2F 54  	LD IX, FRMQNT
 218+ 5FCB CD 59 01     	CALL CALBAS
 219+ 5FCE ED 53 18 60  	LD (BLIT_STRUCT+6),DE
 220+ 5FD2              	; comma
 221+ 5FD2 CD F2 62     	CALL CHKCHAR
 222+ 5FD5 2C           	DB ','
 223+ 5FD6              	; get number of items in a list
 224+ 5FD6 DD 21 1C 52  	LD IX, GETBYT
 225+ 5FDA CD 59 01     	CALL CALBAS
 226+ 5FDD 32 1A 60     	LD (BLIT_STRUCT+8),A
 227+ 5FE0              	; comma
 228+ 5FE0 CD F2 62     	CALL CHKCHAR
 229+ 5FE3 2C           	DB ','
 230+ 5FE4              	; get address of rectangle structure array DIM R%(6,n)
 231+ 5FE4 3A 1A 60     	LD A,(BLIT_STRUCT+8)
 232+ 5FE7 5F               LD E,A
 233+ 5FE8 3E 02            LD A,2
 234+ 5FEA 47           	LD B,A
 235+ 5FEB 16 07        	LD D,7
 236+ 5FED CD 1D 63     	CALL GET_BASIC_ARRAY_DATA_POINTER
 237+ 5FF0 ED 43 1B 60  	LD (BLIT_STRUCT+9),BC
 238+ 5FF4              	; ending )
 239+ 5FF4 CD F2 62     	CALL CHKCHAR
 240+ 5FF7 29           	DB ')'
 241+ 5FF8
 242+ 5FF8 E5               PUSH HL
 243+ 5FF9 CD 60 5F         CALL FIND_OVERLAP
 244+ 5FFC 2A 1D 60         LD HL,(BLIT_STRUCT+11)
 245+ 5FFF 38 06            JR C,.NOTFOUND
 246+ 6001 77               LD (HL),A
 247+ 6002 23               INC HL
 248+ 6003 36 00            LD (HL),0
 249+ 6005 E1               POP HL
 250+ 6006 C9               RET
 251+ 6007              .NOTFOUND:
 252+ 6007 36 FF            LD (HL),#FF
 253+ 6009 23               INC HL
 254+ 600A 36 FF            LD (HL),#FF
 255+ 600C E1               POP HL
 256+ 600D C9               RET
 257+ 600E              ; ************************************************************************************************
 258+ 600E
# file closed: asm\COLLISION.asm
 161  600E               ENDIF
 162  600E
 163  600E              ; temp variables for BLIT, TILE functions
 164  600E               IF (BLIT_CMDS + TILE_CMDS + BOX_CMDS + SPRITE_CMDS + ANIM_CMDS + COLL_CMD > 0)
 165  600E              BLIT_TMP:
 166  600E              TILETMP1:
 167  600E              BLIT_TMP1:
 168  600E 00 00         DW 0
 169  6010              TILETMP2:
 170  6010              BLIT_TMP2:
 171  6010 00 00         DW 0
 172  6012                IFDEF CMDS_WITH_PARAMETERS
 173  6012              BLIT_STRUCT:
 174  6012 00 00 00...   DS 17
 175  6016                ENDIF
 176  6016               ENDIF
 177  6023
 178  6023               IF (VRAM_CMDS + TILE_CMDS + BOX_CMDS + SPRITE_CMDS + ANIM_CMDS > 0)
 179  6023              VRAM_UPDATE_IN_PROGRESS:
 180  6023 00            DB 0
 181  6024               ENDIF
 182  6024
 183  6024              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 184  6024              ; per starting letter, if no commands with this letter, NULL value
 185  6024              CMDS:
 186  6024               IF (ANIM_CMDS == 1)
 187  6024 63 61        	DW CMDS_A ;
 188  6026               ELSE
 189  6026 ~                DW 0 ; A
 190  6026               ENDIF
 191  6026               IF (BLIT_CMDS + BOX_CMDS > 0)
 192  6026 2E 61            DW CMDS_B ; B
 193  6028               ELSE
 194  6028 ~            	DW 0
 195  6028               ENDIF
 196  6028               IF (COLL_CMD == 1)
 197  6028 C4 61        	DW CMDS_C ;
 198  602A               ELSE
 199  602A ~                DW 0 ; C
 200  602A               ENDIF
 201  602A 00 00            DW 0 ; D
 202  602C 00 00            DW 0 ; E
 203  602E               IF (VRAM_CMDS + RAM_CMDS > 0)
 204  602E A5 60            DW CMDS_F; F
 205  6030               ELSE
 206  6030 ~            	DW 0
 207  6030               ENDIF
 208  6030               IF (GENCAL_CMD > 0)
 209  6030 B8 60            DW CMDS_G; G
 210  6032               ELSE
 211  6032 ~            	DW 0
 212  6032               ENDIF
 213  6032               IF (BYTEOPS_CMDS == 1)
 214  6032 ~                DW CMDS_H; H
 215  6032               ELSE
 216  6032 00 00            DW 0
 217  6034               ENDIF
 218  6034 00 00            DW 0 ; I
 219  6036 00 00            DW 0 ; J
 220  6038 00 00            DW 0 ; K
 221  603A               IF (BYTEOPS_CMDS == 1)
 222  603A ~                DW CMDS_L; L
 223  603A               ELSE
 224  603A 00 00            DW 0
 225  603C               ENDIF
 226  603C               IF (VRAM_CMDS + RAM_CMDS + ANIM_CMDS > 0)
 227  603C 58 60            DW CMDS_M ; M
 228  603E               ELSE
 229  603E ~            	DW 0
 230  603E               ENDIF
 231  603E 00 00            DW 0 ; N
 232  6040 00 00            DW 0 ; O
 233  6042 00 00            DW 0 ; P
 234  6044 00 00            DW 0 ; Q
 235  6046               IF (BYTEOPS_CMDS == 1)
 236  6046 ~                DW CMDS_R; R
 237  6046               ELSE
 238  6046 00 00            DW 0
 239  6048               ENDIF
 240  6048               IF (SOUND_CMDS + SPRITE_CMDS > 0)
 241  6048 CC 60            DW CMDS_S ; S
 242  604A               ELSE
 243  604A ~            	DW 0
 244  604A               ENDIF
 245  604A               IF (TILE_CMDS > 0)
 246  604A 4E 61            DW CMDS_T ; T
 247  604C               ELSE
 248  604C ~            	DW 0
 249  604C               ENDIF
 250  604C 00 00            DW 0 ; U
 251  604E               IF (VRAM_CMDS > 0)
 252  604E C2 60            DW CMDS_V ; V
 253  6050               ELSE
 254  6050 ~            	DW 0
 255  6050               ENDIF
 256  6050               IF (BYTEOPS_CMDS == 1)
 257  6050 ~                DW CMDS_W; W
 258  6050               ELSE
 259  6050 00 00            DW 0
 260  6052               ENDIF
 261  6052 00 00            DW 0 ; X
 262  6054 00 00            DW 0 ; Y
 263  6056 00 00            DW 0 ; Z
 264  6058
 265  6058              CMDS_M:
 266  6058               IF (VRAM_CMDS == 1)
 267  6058 4D 45 4D 56      DB "MEMVRM", 0
 267  605C 52 4D 00
 268  605F E9 57            DW MEMVRM
 269  6061               ENDIF
 270  6061               IF (RAM_CMDS == 1)
 271  6061 4D 45 4D 43  	DB "MEMCPY", 0
 271  6065 50 59 00
 272  6068 1F 56        	DW MEMCPY
 273  606A               ENDIF
 274  606A               IF (ANIM_CMDS == 1)
 275  606A 4D 41 58 41  	DB "MAXANIMITEMS",0
 275  606E 4E 49 4D 49
 275  6072 54 45 4D 53
 275  6076 00
 276  6077 1A 50        	DW MAXANIMITEMS
 277  6079 4D 41 58 41  	DB "MAXANIMDEFS",0
 277  607D 4E 49 4D 44
 277  6081 45 46 53 00
 278  6085 9F 51        	DW MAXANIMDEFS
 279  6087 4D 41 58 41  	DB "MAXANIMSPRS",0
 279  608B 4E 49 4D 53
 279  608F 50 52 53 00
 280  6093 34 52        	DW MAXANIMSPRS
 281  6095 4D 41 58 41     DB "MAXAUTOSGAMS",0
 281  6099 55 54 4F 53
 281  609D 47 41 4D 53
 281  60A1 00
 282  60A2 7B 53           DW MAXAUTOSGAMS
 283  60A4               ENDIF
 284  60A4               IF (VRAM_CMDS + RAM_CMDS + ANIM_CMDS > 0)
 285  60A4 00           	DB 0
 286  60A5               ENDIF
 287  60A5              CMDS_F:
 288  60A5               IF (VRAM_CMDS == 1)
 289  60A5 46 49 4C 56      DB "FILVRM", 0
 289  60A9 52 4D 00
 290  60AC 99 57            DW FILVRM
 291  60AE               ENDIF
 292  60AE               IF (RAM_CMDS == 1)
 293  60AE 46 49 4C 52      DB "FILRAM", 0
 293  60B2 41 4D 00
 294  60B5 62 56            DW FILRAM
 295  60B7               ENDIF
 296  60B7               IF (VRAM_CMDS + RAM_CMDS > 0)
 297  60B7 00               DB 0
 298  60B8               ENDIF
 299  60B8              CMDS_G:
 300  60B8               IF (GENCAL_CMD == 1)
 301  60B8 47 45 4E 43      DB "GENCAL", 0
 301  60BC 41 4C 00
 302  60BF CD 58            DW GENCAL
 303  60C1               ENDIF
 304  60C1               IF (GENCAL_CMD > 0)
 305  60C1 00           	DB	0
 306  60C2               ENDIF
 307  60C2              CMDS_V:
 308  60C2               IF (VRAM_CMDS == 1)
 309  60C2 56 52 4D 4D  	DB "VRMMEM", 0
 309  60C6 45 4D 00
 310  60C9 68 58        	DW VRMMEM
 311  60CB               ENDIF
 312  60CB               IF (VRAM_CMDS > 0)
 313  60CB 00           	DB 0
 314  60CC               ENDIF
 315  60CC              CMDS_S:
 316  60CC               IF (SPRITE_CMDS + ANIM_CMDS > 0)
 317  60CC 53 47 41 4D      DB "SGAM",0
 317  60D0 00
 318  60D1 67 55            DW SGAM
 319  60D3               ENDIF
 320  60D3               IF (SPRITE_CMDS == 1)
 321  60D3 53 50 52 53   	DB "SPRSET", 0
 321  60D7 45 54 00
 322  60DA 99 4E        	DW SPRSET
 323  60DC 53 50 52 47  	DB "SPRGRPMOV", 0
 323  60E0 52 50 4D 4F
 323  60E4 56 00
 324  60E6 4A 4F        	DW SPRGRPMOV
 325  60E8               ENDIF
 326  60E8               IF (SOUND_CMDS == 1)
 327  60E8 53 4E 44 53  	DB "SNDSFX", 0
 327  60EC 46 58 00
 328  60EF 3F 57        	DW SNDSFX
 329  60F1 53 4E 44 50  	DB "SNDPLYON", 0
 329  60F5 4C 59 4F 4E
 329  60F9 00
 330  60FA 09 57        	DW SNDPLYON
 331  60FC 53 4E 44 50  	DB "SNDPLYOFF", 0
 331  6100 4C 59 4F 46
 331  6104 46 00
 332  6106 1C 57        	DW SNDPLYOFF
 333  6108 53 4E 44 50  	DB "SNDPLYINI", 0
 333  610C 4C 59 49 4E
 333  6110 49 00
 334  6112 BF 56        	DW SNDPLYINIT
 335  6114               ENDIF
 336  6114               IF (SPRITE_CMDS == 1)
 337  6114 53 50 52 45  	DB "SPRENABLE", 0
 337  6118 4E 41 42 4C
 337  611C 45 00
 338  611E 54 4E        	DW SPRENABLE
 339  6120 53 50 52 44  	DB "SPRDISABLE", 0
 339  6124 49 53 41 42
 339  6128 4C 45 00
 340  612B 94 4E        	DW SPRDISABLE
 341  612D               ENDIF
 342  612D               IF (SOUND_CMDS + SPRITE_CMDS + ANIM_CMDS > 0)
 343  612D 00           	DB 0
 344  612E               ENDIF
 345  612E              CMDS_B:
 346  612E               IF (BLIT_CMDS == 1)
 347  612E 42 4C 49 54  	DB "BLIT", 0
 347  6132 00
 348  6133 9F 5B        	DW BLIT
 349  6135               ENDIF
 350  6135               IF (BOX_CMDS == 1)
 351  6135 42 4F 58 4D  	DB "BOXMEMCPY", 0
 351  6139 45 4D 43 50
 351  613D 59 00
 352  613F 5C 59        	DW BOXMEMCPY
 353  6141 42 4F 58 4D  	DB "BOXMEMVRM", 0
 353  6145 45 4D 56 52
 353  6149 4D 00
 354  614B F1 59        	DW BOXMEMVRM
 355  614D               ENDIF
 356  614D               IF (BLIT_CMDS + BOX_CMDS > 0)
 357  614D 00           	DB 0
 358  614E               ENDIF
 359  614E              CMDS_T:
 360  614E               IF (TILE_CMDS == 1)
 361  614E 54 49 4C 45  	DB "TILERAM", 0
 361  6152 52 41 4D 00
 362  6156 E3 5C        	DW TILERAM
 363  6158 54 49 4C 45  	DB "TILEVRM", 0
 363  615C 56 52 4D 00
 364  6160 E6 5D        	DW TILEVRM
 365  6162               ENDIF
 366  6162               IF (TILE_CMDS > 0)
 367  6162 00           	DB 0
 368  6163               ENDIF
 369  6163              CMDS_A:
 370  6163               IF (ANIM_CMDS == 1)
 371  6163 41 4E 49 4D      DB "ANIMSTEP",0
 371  6167 53 54 45 50
 371  616B 00
 372  616C D5 53            DW ANIMSTEP
 373  616E 41 4E 49 4D  	DB "ANIMSTART",0
 373  6172 53 54 41 52
 373  6176 54 00
 374  6178 DA 53        	DW ANIMSTART
 375  617A 41 4E 49 4D  	DB "ANIMSTOP",0
 375  617E 53 54 4F 50
 375  6182 00
 376  6183 DF 53        	DW ANIMSTOP
 377  6185 41 4E 49 4D  	DB "ANIMITEMPAT",0
 377  6189 49 54 45 4D
 377  618D 50 41 54 00
 378  6191 EA 50        	DW ANIMITEMPAT
 379  6193 41 4E 49 4D  	DB "ANIMITEMPTR",0
 379  6197 49 54 45 4D
 379  619B 50 54 52 00
 380  619F 4B 51        	DW ANIMITEMPTR_CMD
 381  61A1 41 4E 49 4D  	DB "ANIMDEF",0
 381  61A5 44 45 46 00
 382  61A9 E1 51        	DW ANIMDEF
 383  61AB 41 4E 49 4D  	DB "ANIMSPRITE",0
 383  61AF 53 50 52 49
 383  61B3 54 45 00
 384  61B6 8A 52        	DW ANIMSPRITE
 385  61B8 41 4E 49 4D      DB "ANIMCHAR",0
 385  61BC 43 48 41 52
 385  61C0 00
 386  61C1 02 53            DW ANIMCHAR
 387  61C3 00           	DB 0
 388  61C4               ENDIF
 389  61C4              CMDS_H:
 390  61C4               IF (BYTEOPS_CMDS == 1)
 391  61C4 ~                DB "HI", 0
 392  61C4 ~                DW HI
 393  61C4               ENDIF
 394  61C4               IF (BYTEOPS_CMDS > 0)
 395  61C4 ~            	DB	0
 396  61C4               ENDIF
 397  61C4              CMDS_L:
 398  61C4               IF (BYTEOPS_CMDS == 1)
 399  61C4 ~                DB "LO", 0
 400  61C4 ~                DW LO
 401  61C4               ENDIF
 402  61C4               IF (BYTEOPS_CMDS > 0)
 403  61C4 ~            	DB	0
 404  61C4               ENDIF
 405  61C4              CMDS_W:
 406  61C4               IF (BYTEOPS_CMDS == 1)
 407  61C4 ~                DB "W", 0
 408  61C4 ~                DW WORD
 409  61C4               ENDIF
 410  61C4               IF (BYTEOPS_CMDS > 0)
 411  61C4 ~            	DB	0
 412  61C4               ENDIF
 413  61C4              CMDS_R:
 414  61C4               IF (BYTEOPS_CMDS == 1)
 415  61C4 ~                DB "RANGE", 0
 416  61C4 ~                DW RANGE
 417  61C4               ENDIF
 418  61C4               IF (BYTEOPS_CMDS > 0)
 419  61C4 ~            	DB	0
 420  61C4               ENDIF
 421  61C4              CMDS_C:
 422  61C4               IF (COLL_CMD == 1)
 423  61C4 43 4F 4C 4C      DB "COLL", 0
 423  61C8 00
 424  61C9 87 5F            DW COLL
 425  61CB               ENDIF
 426  61CB               IF (COLL_CMD > 0)
 427  61CB 00           	DB	0
 428  61CC               ENDIF
 429  61CC
 430  61CC               IF (VRAM_CMDS + TILE_CMDS + SPRITE_CMDS > 0)
 431  61CC              ; ****************************************************************************************************
 432  61CC              ; function sets VRAM address
 433  61CC              ; input HL=address
 434  61CC              ; modifies AF
 435  61CC              SETWRT_LOCAL:
 436  61CC 7D           	LD	A, L
 437  61CD D3 99        	OUT	(099H), A
 438  61CF 7C           	LD	A, H
 439  61D0 E6 3F        	AND	03FH
 440  61D2 F6 40        	OR	040H
 441  61D4 D3 99        	OUT	(099H), A
 442  61D6 C9           	RET
 443  61D7              ; ****************************************************************************************************
 444  61D7               ENDIF
 445  61D7
 446  61D7               IF (VRAM_CMDS + TILE_CMDS > 0)
 447  61D7              ; ****************************************************************************************************
 448  61D7              ; function copies data from RAM to VRAM
 449  61D7              ; input HL=address in RAM
 450  61D7              ; input B=count
 451  61D7              ; modifies AF, BC, HL
 452  61D7              BBYTECOPY:
 453  61D7 0E 98        	LD C,#98
 454  61D9              BBYTECOPY_NO_C:
 455  61D9 ED A3        	OUTI
 456  61DB C2 D9 61     	JP	NZ, BBYTECOPY_NO_C
 457  61DE C9           	RET
 458  61DF              ; ****************************************************************************************************
 459  61DF               ENDIF
 460  61DF
 461  61DF              ; ****************************************************************************************************
 462  61DF              ; function multiplies HL by 32
 463  61DF              HLx32:
 464  61DF 29           	ADD HL,HL
 465  61E0              ; ****************************************************************************************************
 466  61E0              ; function multiplies HL by 16
 467  61E0              HLx16:
 468  61E0 29           	ADD HL,HL
 469  61E1              ; ****************************************************************************************************
 470  61E1              ; function multiplies HL by 8
 471  61E1              HLx8:
 472  61E1 29          > ADD HL, HL
 472  61E2 29          > ADD HL, HL
 472  61E3 29          > ADD HL, HL
 473  61E4 C9           	RET
 474  61E5              ; ****************************************************************************************************
 475  61E5
 476  61E5              ; ****************************************************************************************************
 477  61E5              ; function gets slot and subslot data for specific page
 478  61E5              ; input A=page (0, 1 or 2)
 479  61E5              ; output B = 0A8H register value
 480  61E5              ; output D = 0 is no subslots, 1 if yes
 481  61E5              ; output C = 0A8H value when page 3 slot equals to requested page slot
 482  61E5              ; output E = subslot value if present
 483  61E5              ; modifies AF, BC, DE, HL
 484  61E5              GET_PAGE_INFO:
 485  61E5 6F               LD L, A
 486  61E6 C6 C1            ADD A, low (EXPTBL)
 487  61E8 32 F2 61         LD (GET_PAGE_INFO_L1+1), A
 488  61EB DB A8            IN A, (0A8H)
 489  61ED 47               LD B, A
 490  61EE E6 3F            AND 03FH
 491  61F0 4F               LD C, A
 492  61F1              GET_PAGE_INFO_L1:
 493  61F1 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 494  61F4 E6 80            AND 080H
 495  61F6 28 1B            JR Z, GET_PAGE_INFO_L2
 496  61F8                  ; expanded
 497  61F8 2D               DEC L
 498  61F9 FA 18 62         JP M, GET_PAGE_INFO_L3
 499  61FC 2D               DEC L
 500  61FD FA 16 62         JP M, GET_PAGE_INFO_L4
 501  6200                  ; page 2
 502  6200 07               RLCA
 503  6201 07               RLCA
 504  6202              GET_PAGE_INFO_L5:
 505  6202 E6 C0            AND 0C0H
 506  6204 B1               OR C
 507  6205 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 508  6207 4F               LD C, A
 509  6208 3A FF FF         LD A, (0FFFFH)
 510  620B 2F               CPL
 511  620C 5F               LD E, A
 512  620D 16 01            LD D, 1
 513  620F 78               LD A, B ; return stack
 514  6210 D3 A8            OUT (0A8H), A
 515  6212 C9               RET
 516  6213              GET_PAGE_INFO_L2:
 517  6213                  ; not expanded
 518  6213 16 00            LD D, 0
 519  6215 C9               RET
 520  6216              GET_PAGE_INFO_L4:
 521  6216                  ; page 1
 522  6216 0F               RRCA
 523  6217 0F               RRCA
 524  6218              GET_PAGE_INFO_L3:
 525  6218                  ; page 0
 526  6218 0F               RRCA
 527  6219 0F               RRCA
 528  621A 18 E6            JR GET_PAGE_INFO_L5
 529  621C              ; ****************************************************************************************************
 530  621C
 531  621C              ; ****************************************************************************************************
 532  621C              ; function returns original slot and subslot info
 533  621C              ; input B = 0A8H register value
 534  621C              ; input D = 0 is no subslots, 1 if yes
 535  621C              ; input C = 0A8H value when page 3 slot equals to requested page slot
 536  621C              ; input E = subslot value if present
 537  621C              ; modifies AF, disables interrupts
 538  621C              RESTORE_PAGE_INFO:
 539  621C 7A               LD A, D
 540  621D B7               OR A
 541  621E 28 08            JR Z, RESTORE_PAGE_INFO_L1
 542  6220 79               LD A, C
 543  6221 F3           	DI
 544  6222 D3 A8            OUT (0A8H), A
 545  6224 7B               LD A, E
 546  6225 32 FF FF         LD (0FFFFH), A
 547  6228              RESTORE_PAGE_INFO_L1:
 548  6228 78               LD A, B
 549  6229 D3 A8            OUT (0A8H), A
 550  622B C9               RET
 551  622C              ; ****************************************************************************************************
 552  622C
 553  622C              ; *******************************************************************************************************
 554  622C              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 555  622C              ; INPUT:  A = SLOT ID: EXXXSSPP
 556  622C              ; E = EXPANDED FLAG
 557  622C              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 558  622C              ; PP = PRIMARY SLOT NUMBER
 559  622C              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 560  622C              ; CHANGES: AF, BC, DE
 561  622C
 562  622C              LOCAL_ENASLT:
 563  622C CD 4C 62         CALL L0353
 564  622F FA 39 62         JP M, L0340
 565  6232 DB A8            IN A, (0A8H)
 566  6234 A1               AND C
 567  6235 B0               OR B
 568  6236 D3 A8            OUT (0A8H), A
 569  6238 C9               RET
 570  6239              L0340:
 571  6239 E5               PUSH HL
 572  623A CD 71 62         CALL L0378
 573  623D 4F               LD C, A
 574  623E 06 00            LD B, 0
 575  6240 7D               LD A, L
 576  6241 A4               AND H
 577  6242 B2               OR D
 578  6243 21 C5 FC         LD HL, 0FCC5H
 579  6246 09               ADD HL, BC
 580  6247 77               LD (HL), A
 581  6248 E1               POP HL
 582  6249 79               LD A, C
 583  624A 18 E0            JR LOCAL_ENASLT
 584  624C              L0353:
 585  624C F3               DI
 586  624D F5               PUSH AF
 587  624E 7C               LD A, H
 588  624F 07               RLCA
 589  6250 07               RLCA
 590  6251 E6 03            AND 3
 591  6253 5F               LD E, A
 592  6254 3E C0            LD A, 0C0H
 593  6256              L035D:
 594  6256 07               RLCA
 595  6257 07               RLCA
 596  6258 1D               DEC E
 597  6259 F2 56 62         JP P, L035D
 598  625C 5F               LD E, A
 599  625D 2F               CPL
 600  625E 4F               LD C, A
 601  625F F1               POP AF
 602  6260 F5               PUSH AF
 603  6261 E6 03            AND 3
 604  6263 3C               INC A
 605  6264 47               LD B, A
 606  6265 3E AB            LD A, 0ABH
 607  6267              L036E:
 608  6267 C6 55            ADD A, 055H
 609  6269 10 FC            DJNZ L036E
 610  626B 57               LD D, A
 611  626C A3               AND E
 612  626D 47               LD B, A
 613  626E F1               POP AF
 614  626F A7               AND A
 615  6270 C9               RET
 616  6271              L0378:
 617  6271 F5               PUSH AF
 618  6272 7A               LD A, D
 619  6273 E6 C0            AND 0C0H
 620  6275 4F               LD C, A
 621  6276 F1               POP AF
 622  6277 F5               PUSH AF
 623  6278 57               LD D, A
 624  6279 DB A8            IN A, (0A8H)
 625  627B 47               LD B, A
 626  627C E6 3F            AND 03FH
 627  627E B1               OR C
 628  627F D3 A8            OUT (0A8H), A
 629  6281 7A               LD A, D
 630  6282 0F               RRCA
 631  6283 0F               RRCA
 632  6284 E6 03            AND 3
 633  6286 57               LD D, A
 634  6287 3E AB            LD A, 0ABH
 635  6289              L0390:
 636  6289 C6 55            ADD A, 055H
 637  628B 15               DEC D
 638  628C F2 89 62         JP P, L0390
 639  628F A3               AND E
 640  6290 57               LD D, A
 641  6291 7B               LD A, E
 642  6292 2F               CPL
 643  6293 67               LD H, A
 644  6294 3A FF FF         LD A, (0FFFFH)
 645  6297 2F               CPL
 646  6298 6F               LD L, A
 647  6299 A4               AND H
 648  629A B2               OR D
 649  629B 32 FF FF         LD (0FFFFH), A
 650  629E 78               LD A, B
 651  629F D3 A8            OUT (0A8H), A
 652  62A1 F1               POP AF
 653  62A2 E6 03            AND 3
 654  62A4 C9               RET
 655  62A5              ; *******************************************************************************************************
 656  62A5
 657  62A5              ; *******************************************************************************************************
 658  62A5              ; some common code to activate page 0 and place values needed to restore original page on stack
 659  62A5              ; input IY=return address
 660  62A5              ENABLE_PAGE0:
 661  62A5 AF               XOR A
 662  62A6 CD E5 61         CALL GET_PAGE_INFO
 663  62A9 C5               PUSH BC
 664  62AA D5               PUSH DE
 665  62AB 3A 41 F3         LD A, (RAMAD0)
 666  62AE 26 00            LD H, 0
 667  62B0 CD 2C 62         CALL LOCAL_ENASLT
 668  62B3 FD E9        	JP (IY)
 669  62B5              ; *******************************************************************************************************
 670  62B5
 671  62B5              ; General BASIC CALL-instruction handler
 672  62B5              CALLHAND:
 673  62B5 E5           	PUSH HL
 674  62B6 21 24 60     	LD	HL, CMDS ; pointer table based on starting letter
 675  62B9 3A 89 FD         LD A, (PROCNM)
 676  62BC D6 41            SUB 'A'
 677  62BE 87               ADD A, A
 678  62BF 16 00            LD D, 0
 679  62C1 5F               LD E, A
 680  62C2 19               ADD HL, DE
 681  62C3 5E               LD E, (HL)
 682  62C4 23               INC HL
 683  62C5 56               LD D, (HL)
 684  62C6 7A               LD A, D
 685  62C7 B3               OR E
 686  62C8 28 23            JR Z, .CMDNOTRECOGNIZED
 687  62CA EB               EX DE, HL
 688  62CB              .CHKCMD:
 689  62CB 11 89 FD     	LD	DE, PROCNM
 690  62CE 1A           .LOOP:	LD	A,(DE)
 691  62CF BE           	CP	(HL)
 692  62D0 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 693  62D2 13           	INC	DE
 694  62D3 23           	INC	HL
 695  62D4 A7           	AND	A
 696  62D5 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 697  62D7 5E           	LD	E,(HL)
 698  62D8 23           	INC	HL
 699  62D9 56           	LD	D,(HL)
 700  62DA E1           	POP	HL		; routine address
 701  62DB CD FC 62     	CALL	GETPREVCHAR
 702  62DE CD F0 62     	CALL	.CALLDE		; Call routine
 703  62E1 A7           	AND	A
 704  62E2 C9           	RET
 705  62E3
 706  62E3              .TONEXTCMD:
 707  62E3 0E FF        	LD	C,0FFH
 708  62E5 AF           	XOR	A
 709  62E6 ED B1        	CPIR			; Skip to end of instruction name
 710  62E8 23           	INC	HL
 711  62E9 23           	INC	HL		; Skip address
 712  62EA BE           	CP	(HL)
 713  62EB 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 714  62ED              .CMDNOTRECOGNIZED:
 715  62ED E1           	POP	HL
 716  62EE 37               SCF
 717  62EF C9           	RET
 718  62F0
 719  62F0              .CALLDE:
 720  62F0 D5           	PUSH	DE
 721  62F1 C9           	RET
 722  62F2
 723  62F2              ;---------------------------
 724  62F2
 725  62F2              ;GETSTRPNT:
 726  62F2              ; OUT:
 727  62F2              ; HL = String Address
 728  62F2              ; B  = Lenght
 729  62F2              ;        LD      HL,(USR)
 730  62F2              ;        LD      B,(HL)
 731  62F2              ;        INC     HL
 732  62F2              ;        LD      E,(HL)
 733  62F2              ;        INC     HL
 734  62F2              ;        LD      D,(HL)
 735  62F2              ;        EX      DE,HL
 736  62F2              ;        RET
 737  62F2
 738  62F2              ;EVALTXTPARAM:
 739  62F2              ;	CALL	CHKCHAR
 740  62F2              ;	DEFB	"("             ; Check for (
 741  62F2              ;	LD	IX,FRMEVL
 742  62F2              ;	CALL	CALBAS		; Evaluate expression
 743  62F2              ;       LD      A,(VALTYP)
 744  62F2              ;        CP      3               ; Text type?
 745  62F2              ;        JP      NZ,TYPE_MISMATCH
 746  62F2              ;        PUSH	HL
 747  62F2              ;        LD	IX,FRESTR         ; Free the temporary string
 748  62F2              ;        CALL	CALBAS
 749  62F2              ;        POP	HL
 750  62F2              ;	CALL	CHKCHAR
 751  62F2              ;	DEFB	")"             ; Check for )
 752  62F2              ;        RET
 753  62F2
 754  62F2
 755  62F2              CHKCHAR:
 756  62F2 CD FC 62     	CALL	GETPREVCHAR	; Get previous basic char
 757  62F5 E3           	EX	(SP),HL
 758  62F6 BE           	CP	(HL) 	        ; Check if good char
 759  62F7 20 1B        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 760  62F9 23           	INC	HL
 761  62FA E3           	EX	(SP),HL
 762  62FB 23           	INC	HL		; Get next basic char
 763  62FC
 764  62FC              GETPREVCHAR:
 765  62FC 2B           	DEC	HL
 766  62FD DD 21 66 46  	LD	IX,CHRGTR
 767  6301 C3 59 01     	JP      CALBAS
 768  6304
 769  6304
 770  6304              TYPE_MISMATCH:
 771  6304 1E 0D            LD E, 13 ; Type mismatch
 772  6306 18 0E            JR THROW_ERROR
 773  6308              SUBSCRIPT_OUT_OF_RANGE:
 774  6308 1E 09            LD E,9 ; subscript out of range
 775  630A 18 0A        	JR THROW_ERROR
 776  630C              OVERFLOW:
 777  630C 1E 06        	LD E,6
 778  630E 18 06        	JR THROW_ERROR
 779  6310              ILLEGAL_FUNCTION:
 780  6310 1E 05            LD E, 5 ; illegal function call
 781  6312 18 02            JR THROW_ERROR
 782  6314              SYNTAX_ERROR:
 783  6314 1E 02            LD E, 2 ; Syntax error
 784  6316              THROW_ERROR:
 785  6316 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 786  631A C3 59 01     	JP	CALBAS
 787  631D
 788  631D              ;---------------------------
 789  631D
 790  631D              ; *******************************************************************************************************
 791  631D              ; helper function to get pointer to BASIC array data
 792  631D              ; input A=data type (2=INT,4=SINGLE,8=DOUBLE)
 793  631D              ; input B=dimensions (1 or 2)
 794  631D              ; input D=minimal first dimension
 795  631D              ; input E=minimal second dimension, if applicable
 796  631D              ; returns BC=pointer to first data element
 797  631D              ; throws BASIC error if invalid type
 798  631D              GET_BASIC_ARRAY_DATA_POINTER:
 799  631D D5           	PUSH DE
 800  631E C5           	PUSH BC
 801  631F F5           	PUSH AF
 802  6320 3E 01           LD A,1
 803  6322 32 A5 F6        LD (SUBFLG),A ; search for arrays only
 804  6325 DD 21 A4 5E  	LD IX, PTRGET
 805  6329 CD 59 01     	CALL CALBAS
 806  632C AF              XOR A
 807  632D 32 A5 F6        LD (SUBFLG),A ; if not reset will cause syntax errors
 808  6330 3A 63 F6     	LD A,(VALTYP)
 809  6333 D1           	POP DE ; required type
 810  6334 BA           	CP D
 811  6335 C2 04 63     	JP NZ,TYPE_MISMATCH
 812  6338 0A           	LD A,(BC)
 813  6339 03           	INC BC
 814  633A D1           	POP DE ; required number of dimensions
 815  633B BA           	CP D
 816  633C C2 04 63     	JP NZ,TYPE_MISMATCH
 817  633F D1           	POP DE ; required minimal array dimensions
 818  6340 3D           	DEC A
 819  6341 28 07        	JR Z,.ONE_DIMENSION
 820  6343              	; 2-dimension array
 821  6343 0A           	LD A,(BC)
 822  6344 03          > INC BC
 822  6345 03          > INC BC
 823  6346 BB           	CP E
 824  6347 DA 08 63     	JP C,SUBSCRIPT_OUT_OF_RANGE
 825  634A              .ONE_DIMENSION:
 826  634A 0A           	LD A,(BC)
 827  634B 03          > INC BC
 827  634C 03          > INC BC
 828  634D BA           	CP D
 829  634E DA 08 63     	JP C,SUBSCRIPT_OUT_OF_RANGE
 830  6351 C9           	RET
 831  6352              ; *******************************************************************************************************
 832  6352
 833  6352              EXT_END:
 834  6352
# file closed: asm\main.asm
