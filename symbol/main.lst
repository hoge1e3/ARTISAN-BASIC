# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; control variables to include/exclude parts of code
   4  4000              SOUND_CMDS	 	EQU 1
   5  4000              RAM_CMDS 		EQU 1
   6  4000              VRAM_CMDS 		EQU 1
   7  4000              BLIT_CMDS		EQU 1
   8  4000              SPRITE_CMDS 	EQU 1
   9  4000              GENCAL_CMD		EQU 1
  10  4000              TILE_CMDS		EQU 1
  11  4000              BOX_CMDS		   EQU 1
  12  4000              ANIM_CMDS		EQU 1
  13  4000              COLL_CMD       EQU 1
  14  4000
  15  4000               DEFINE CMDS_WITH_PARAMETERS
  16  4000
  17  4000              CHPUT   EQU    #A2
  18  4000              CALBAS  EQU		#159
  19  4000              ERRHAND EQU    #406F
  20  4000              FRMEVL  EQU    #4C64
  21  4000              FRESTR  EQU		#67D0
  22  4000              ; FRMQNT = formula quantificator
  23  4000              ; input HL=pointer to current program expression
  24  4000              ; output HL=next address
  25  4000              ; output DE=integer datum
  26  4000              FRMQNT	EQU		#542F
  27  4000              ; GETBYT = get byte parameter
  28  4000              ; input HL=pointer to current program expression
  29  4000              ; output HL=next address
  30  4000              ; output A=E=byte read
  31  4000              GETBYT		EQU	#521C
  32  4000              CHRGTR  	   EQU   #4666
  33  4000              PTRGET		EQU 	#5EA4
  34  4000              SUBFLG		EQU	#F6A5
  35  4000              SYNCHR		EQU	#558C
  36  4000              VALTYP  	   EQU   #F663
  37  4000              DAC         EQU   #F7F6
  38  4000              USR     	   EQU   #F7F8
  39  4000              PROCNM		EQU	#FD89
  40  4000              BIOS_FILVRM EQU   #0056
  41  4000              CLIKSW		EQU	#F3DB
  42  4000
  43  4000              RAMAD0	   EQU	#F341	; Main-RAM Slot (00000h~03FFFh)
  44  4000              RAMAD1	   EQU	#F342	; Main-RAM Slot (04000h~07FFFh)
  45  4000              RAMAD2	   EQU	#F343	; Main-RAM Slot (08000h~0BFFFh)
  46  4000              RAMAD3	   EQU	#F344	; Main-RAM Slot (0C000h~0FFFFh)
  47  4000              EXPTBL	   EQU   #FCC1
  48  4000              SCRMOD	   EQU   #FCAF ; current screen mode
  49  4000              REG1SAV     EQU   #F3E0 ; VDP(1)
  50  4000              JIFFY	      EQU   #FC9E
  51  4000              GRPPAT	   EQU   #F3CF ; SCREEN 2 sprite generator table address
  52  4000              GRPCGP		EQU	#F3CB ; SCREEN 2 pattern generator table address
  53  4000              GRPATR      EQU   #F3CD ; SCREEN 2 sprite attribute table address
  54  4000              T32PAT	   EQU   #F3C5 ; SCREEN 1 sprite generator table address
  55  4000              T32CGP      EQU   #F3C1 ; SCREEN 1 pattern ganarator table address
  56  4000              T32ATR      EQU   #F3C3 ; SCREEN 1 sprite attribute table address
  57  4000
  58  4000              ; BASIC error codes
  59  4000              ;01 NEXT without FOR
  60  4000              ;02 Syntax error
  61  4000              ;03 RETURN without GOSUB
  62  4000              ;04 Out of DATA
  63  4000              ;05 Illegal function call
  64  4000              ;06 Overflow
  65  4000              ;07 Out of memory
  66  4000              ;08 Undefined line number
  67  4000              ;09 Subscript out of range
  68  4000              ;10 Redimensioned array
  69  4000              ;11 Division by zero
  70  4000              ;12 Illegal direct
  71  4000              ;13 Type mismatch
  72  4000              ;14 Out of string space
  73  4000              ;15 String too long
  74  4000              ;16 String formula too complex
  75  4000              ;17 Can't CONTINUE
  76  4000              ;18 Undefined user function
  77  4000              ;19 Device I/O error
  78  4000              ;20 Verify error
  79  4000              ;21 No RESUME
  80  4000              ;22 RESUME without error
  81  4000              ;23 Unprintable error
  82  4000              ;24 Missing operand
  83  4000              ;25 Line buffer overflow
  84  4000              ;50 FIELD overflow
  85  4000              ;51 Internal error
  86  4000              ;52 Bad file number
  87  4000              ;53 File not found
  88  4000              ;54 File already open
  89  4000              ;55 Input past end
  90  4000              ;56 Bad file name
  91  4000              ;57 Direct statement in file
  92  4000              ;58 Sequential I/O only
  93  4000              ;59 File not OPEN
  94  4000
  95  4000
  96  4000               ; simulate cartridge with BASIC extension
  97  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  97  4004 8D 65 00 00
  97  4008 00 00 00 00
  97  400C 00 00 00 00
  98  4010
  99  4010              ; this location #4010 stores last location used by basic extension
 100  4010              ; free memory after that point
 101  4010              FREEMEMPTR:
 102  4010 2D 66         DW EXT_END
 103  4012
 104  4012              ; this location #4012 stores extension version in DAA format
 105  4012              ; first byte is major version and second minor
 106  4012              VERSION:
 107  4012 00 80         DB #00, #80
 108  4014
 109  4014              ; binary included AKG player compiled at #4014
 110  4014               IF (SOUND_CMDS == 1)
 111  4014              	INCBIN "bin/AKG.bin"
 112  4CF0              	INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CF0              MAIN_PLAYER_START EQU 04014H
   2+ 4CF0              PLY_AKG_START EQU 04014H
   3+ 4CF0              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401DH
   4+ 4CF0              PLY_AKG_INITSOUNDEFFECTS EQU 0401DH
   5+ 4CF0              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 04021H
   6+ 4CF0              PLY_AKG_PLAYSOUNDEFFECT EQU 04021H
   7+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04022H
   8+ 4CF0              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04022H
   9+ 4CF0              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04049H
  10+ 4CF0              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04049H
  11+ 4CF0              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04057H
  12+ 4CF0              PLY_AKG_PSES_PLAY EQU 04090H
  13+ 4CF0              PLY_AKG_PSES_READFIRSTBYTE EQU 04099H
  14+ 4CF0              PLY_AKG_PSES_S_ENDORLOOP EQU 040B1H
  15+ 4CF0              PLY_AKG_PSES_S_LOOP EQU 040BCH
  16+ 4CF0              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C2H
  17+ 4CF0              PLY_AKG_PSES_NOTREACHED EQU 040D5H
  18+ 4CF0              PLY_AKG_PSES_HARDWAREONLY EQU 040D9H
  19+ 4CF0              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040E0H
  20+ 4CF0              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F2H
  21+ 4CF0              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FCH
  22+ 4CF0              PLY_AKG_PSES_H_AFTERRETRIG EQU 04106H
  23+ 4CF0              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 0411AH
  24+ 4CF0              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411FH
  25+ 4CF0              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04127H
  26+ 4CF0              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04132H
  27+ 4CF0              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413EH
  28+ 4CF0              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 04140H
  29+ 4CF0              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04146H
  30+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 0414AH
  31+ 4CF0              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 0414AH
  32+ 4CF0              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414CH
  33+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414CH
  34+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414CH
  35+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414DH
  36+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414EH
  37+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04152H
  38+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04152H
  39+ 4CF0              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04152H
  40+ 4CF0              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 0415AH
  41+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04162H
  42+ 4CF0              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04162H
  43+ 4CF0              PLY_AKG_INIT EQU 04162H
  44+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04162H
  45+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 04190H
  46+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A4H
  47+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B6H
  48+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D5H
  49+ 4CF0              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E2H
  50+ 4CF0              PLY_AKG_INIT_READWORDSANDFILL EQU 041E8H
  51+ 4CF0              PLY_AKG_INITTABLE0 EQU 041EBH
  52+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041EBH
  53+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04205H
  54+ 4CF0              PLY_AKG_INITTABLE0_END EQU 04205H
  55+ 4CF0              PLY_AKG_INITTABLE1 EQU 04205H
  56+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04205H
  57+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04209H
  58+ 4CF0              PLY_AKG_INITTABLE1_END EQU 04209H
  59+ 4CF0              PLY_AKG_INITTABLEORA EQU 04209H
  60+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04209H
  61+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 04221H
  62+ 4CF0              PLY_AKG_INITTABLEORA_END EQU 04221H
  63+ 4CF0              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 04221H
  64+ 4CF0              PLY_AKG_STOP EQU 04221H
  65+ 4CF0              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04233H
  66+ 4CF0              PLY_AKG_PLAY EQU 04233H
  67+ 4CF0              PLY_AKG_TICKDECREASINGCOUNTER EQU 0423BH
  68+ 4CF0              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 04241H
  69+ 4CF0              PLY_AKG_READLINKER EQU 04246H
  70+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04246H
  71+ 4CF0              PLY_AKG_READLINKER_PTLINKER EQU 04246H
  72+ 4CF0              PLY_AKG_READLINKER_NOLOOP EQU 04251H
  73+ 4CF0              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 0428AH
  74+ 4CF0              PLY_AKG_READLINE EQU 0428DH
  75+ 4CF0              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428DH
  76+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04293H
  77+ 4CF0              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04293H
  78+ 4CF0              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 042A0H
  79+ 4CF0              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A4H
  80+ 4CF0              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A7H
  81+ 4CF0              PLY_AKG_SPEEDTRACK_END EQU 042AAH
  82+ 4CF0              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042AAH
  83+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042B0H
  84+ 4CF0              PLY_AKG_EVENTTRACK_PTTRACK EQU 042B0H
  85+ 4CF0              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BDH
  86+ 4CF0              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042C1H
  87+ 4CF0              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C4H
  88+ 4CF0              PLY_AKG_EVENTTRACK_END EQU 042C7H
  89+ 4CF0              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C7H
  90+ 4CF0              PLY_AKG_CHANNEL1_READTRACK EQU 042D3H
  91+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D3H
  92+ 4CF0              PLY_AKG_CHANNEL1_PTTRACK EQU 042D3H
  93+ 4CF0              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042EEH
  94+ 4CF0              PLY_AKG_CHANNEL1_WAIT EQU 042F9H
  95+ 4CF0              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 04300H
  96+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 04300H
  97+ 4CF0              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 04300H
  98+ 4CF0              PLY_AKG_CHANNEL1_NOTE EQU 04309H
  99+ 4CF0              PLY_AKG_BASENOTEINDEX EQU 04309H
 100+ 4CF0              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 0430BH
 101+ 4CF0              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 0430BH
 102+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 0431BH
 103+ 4CF0              PLY_AKG_INSTRUMENTSTABLE EQU 0431BH
 104+ 4CF0              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432DH
 105+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433DH
 106+ 4CF0              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04365H
 107+ 4CF0              PLY_AKG_CHANNEL1_READCELLEND EQU 04368H
 108+ 4CF0              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04368H
 109+ 4CF0              PLY_AKG_CHANNEL2_READTRACK EQU 04374H
 110+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04374H
 111+ 4CF0              PLY_AKG_CHANNEL2_PTTRACK EQU 04374H
 112+ 4CF0              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438FH
 113+ 4CF0              PLY_AKG_CHANNEL2_WAIT EQU 0439AH
 114+ 4CF0              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 043A1H
 115+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 043A1H
 116+ 4CF0              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 043A1H
 117+ 4CF0              PLY_AKG_CHANNEL2_NOTE EQU 043AAH
 118+ 4CF0              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043AFH
 119+ 4CF0              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043AFH
 120+ 4CF0              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043D1H
 121+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043E1H
 122+ 4CF0              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04409H
 123+ 4CF0              PLY_AKG_CHANNEL2_READCELLEND EQU 0440CH
 124+ 4CF0              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440CH
 125+ 4CF0              PLY_AKG_CHANNEL3_READTRACK EQU 04418H
 126+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04418H
 127+ 4CF0              PLY_AKG_CHANNEL3_PTTRACK EQU 04418H
 128+ 4CF0              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04433H
 129+ 4CF0              PLY_AKG_CHANNEL3_WAIT EQU 0443EH
 130+ 4CF0              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04445H
 131+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04445H
 132+ 4CF0              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04445H
 133+ 4CF0              PLY_AKG_CHANNEL3_NOTE EQU 0444EH
 134+ 4CF0              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04453H
 135+ 4CF0              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04453H
 136+ 4CF0              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04475H
 137+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04485H
 138+ 4CF0              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ADH
 139+ 4CF0              PLY_AKG_CHANNEL3_READCELLEND EQU 044B0H
 140+ 4CF0              PLY_AKG_CURRENTSPEED EQU 044B0H
 141+ 4CF0              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B2H
 142+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B5H
 143+ 4CF0              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B5H
 144+ 4CF0              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B8H
 145+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044BBH
 146+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044BBH
 147+ 4CF0              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C7H
 148+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CEH
 149+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044D1H
 150+ 4CF0              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D7H
 151+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044DAH
 152+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044DAH
 153+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E8H
 154+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EDH
 155+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F8H
 156+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044FBH
 157+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044FBH
 158+ 4CF0              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FEH
 159+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 04501H
 160+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE EQU 04501H
 161+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 0450AH
 162+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04514H
 163+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04517H
 164+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04517H
 165+ 4CF0              PLY_AKG_CHANNEL1_PITCH EQU 04517H
 166+ 4CF0              PLY_AKG_CHANNEL1_ISPITCH EQU 0451AH
 167+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451FH
 168+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451FH
 169+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04523H
 170+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04525H
 171+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04527H
 172+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452EH
 173+ 4CF0              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452FH
 174+ 4CF0              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04532H
 175+ 4CF0              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04532H
 176+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454EH
 177+ 4CF0              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454EH
 178+ 4CF0              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 0455BH
 179+ 4CF0              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455FH
 180+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456FH
 181+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456FH
 182+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 04570H
 183+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 04571H
 184+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04573H
 185+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04573H
 186+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04573H
 187+ 4CF0              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04574H
 188+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04575H
 189+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04577H
 190+ 4CF0              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04577H
 191+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04577H
 192+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04577H
 193+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04577H
 194+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_END EQU 0457AH
 195+ 4CF0              PLY_AKG_CHANNEL1_PITCH_END EQU 0457CH
 196+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04584H
 197+ 4CF0              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04584H
 198+ 4CF0              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04587H
 199+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 0458AH
 200+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 0458AH
 201+ 4CF0              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04596H
 202+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459DH
 203+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 045A0H
 204+ 4CF0              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A6H
 205+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A9H
 206+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A9H
 207+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B7H
 208+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BCH
 209+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C7H
 210+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045CAH
 211+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045CAH
 212+ 4CF0              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CDH
 213+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045D0H
 214+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045D0H
 215+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D9H
 216+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E3H
 217+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E6H
 218+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E6H
 219+ 4CF0              PLY_AKG_CHANNEL2_PITCH EQU 045E6H
 220+ 4CF0              PLY_AKG_CHANNEL2_ISPITCH EQU 045E9H
 221+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045EEH
 222+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045EEH
 223+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F2H
 224+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F4H
 225+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F6H
 226+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FDH
 227+ 4CF0              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FEH
 228+ 4CF0              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04601H
 229+ 4CF0              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 04601H
 230+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461DH
 231+ 4CF0              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461DH
 232+ 4CF0              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 0462AH
 233+ 4CF0              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462EH
 234+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463EH
 235+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463EH
 236+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463FH
 237+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 04640H
 238+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04642H
 239+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04642H
 240+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04642H
 241+ 4CF0              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04643H
 242+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04644H
 243+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04646H
 244+ 4CF0              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04646H
 245+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04646H
 246+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04646H
 247+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04646H
 248+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_END EQU 04649H
 249+ 4CF0              PLY_AKG_CHANNEL2_PITCH_END EQU 0464BH
 250+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04653H
 251+ 4CF0              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04653H
 252+ 4CF0              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04656H
 253+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04659H
 254+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04659H
 255+ 4CF0              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04665H
 256+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466CH
 257+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466FH
 258+ 4CF0              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04675H
 259+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04678H
 260+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04678H
 261+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04686H
 262+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 0468BH
 263+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04696H
 264+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04699H
 265+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04699H
 266+ 4CF0              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469CH
 267+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469FH
 268+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469FH
 269+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A8H
 270+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B2H
 271+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B5H
 272+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B5H
 273+ 4CF0              PLY_AKG_CHANNEL3_PITCH EQU 046B5H
 274+ 4CF0              PLY_AKG_CHANNEL3_ISPITCH EQU 046B8H
 275+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BDH
 276+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BDH
 277+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046C1H
 278+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C3H
 279+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C5H
 280+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CCH
 281+ 4CF0              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CDH
 282+ 4CF0              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046D0H
 283+ 4CF0              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046D0H
 284+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046ECH
 285+ 4CF0              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046ECH
 286+ 4CF0              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F9H
 287+ 4CF0              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FDH
 288+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470DH
 289+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470DH
 290+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470EH
 291+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470FH
 292+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 04711H
 293+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 04711H
 294+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 04711H
 295+ 4CF0              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04712H
 296+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04713H
 297+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04715H
 298+ 4CF0              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04715H
 299+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04715H
 300+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04715H
 301+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04715H
 302+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_END EQU 04718H
 303+ 4CF0              PLY_AKG_CHANNEL3_PITCH_END EQU 0471AH
 304+ 4CF0              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04726H
 305+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04726H
 306+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04726H
 307+ 4CF0              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04729H
 308+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 0472BH
 309+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 04731H
 310+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04734H
 311+ 4CF0              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04734H
 312+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04737H
 313+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 04740H
 314+ 4CF0              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04748H
 315+ 4CF0              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04755H
 316+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04755H
 317+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04755H
 318+ 4CF0              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04758H
 319+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 0475AH
 320+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 04760H
 321+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04763H
 322+ 4CF0              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04763H
 323+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04766H
 324+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476FH
 325+ 4CF0              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04777H
 326+ 4CF0              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04785H
 327+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04785H
 328+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04785H
 329+ 4CF0              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04788H
 330+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 0478AH
 331+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 04790H
 332+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04793H
 333+ 4CF0              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04793H
 334+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04796H
 335+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479FH
 336+ 4CF0              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A7H
 337+ 4CF0              PLY_AKG_SENDPSGREGISTERS EQU 047B6H
 338+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BEH
 339+ 4CF0              PLY_AKG_PSGREG01_INSTR EQU 047BEH
 340+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CEH
 341+ 4CF0              PLY_AKG_PSGREG23_INSTR EQU 047CEH
 342+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DFH
 343+ 4CF0              PLY_AKG_PSGREG45_INSTR EQU 047DFH
 344+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047F0H
 345+ 4CF0              PLY_AKG_PSGREG6_8_INSTR EQU 047F0H
 346+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 04801H
 347+ 4CF0              PLY_AKG_PSGREG9_10_INSTR EQU 04801H
 348+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04812H
 349+ 4CF0              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04812H
 350+ 4CF0              PLY_AKG_PSGREG13_OLDVALUE EQU 04827H
 351+ 4CF0              PLY_AKG_RETRIG EQU 04829H
 352+ 4CF0              PLY_AKG_PSGREG13_INSTR EQU 0482BH
 353+ 4CF0              PLY_AKG_PSGREG13_END EQU 0483AH
 354+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 0483AH
 355+ 4CF0              PLY_AKG_SAVESP EQU 0483AH
 356+ 4CF0              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483EH
 357+ 4CF0              PLY_AKG_CHANNEL1_READEFFECTS EQU 04846H
 358+ 4CF0              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04853H
 359+ 4CF0              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04853H
 360+ 4CF0              PLY_AKG_CHANNEL2_READEFFECTS EQU 0485BH
 361+ 4CF0              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04868H
 362+ 4CF0              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04868H
 363+ 4CF0              PLY_AKG_CHANNEL3_READEFFECTS EQU 04870H
 364+ 4CF0              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 0487BH
 365+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS EQU 0487BH
 366+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 0488AH
 367+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 0488AH
 368+ 4CF0              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 04891H
 369+ 4CF0              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 048A1H
 370+ 4CF0              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 048A1H
 371+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A8H
 372+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A8H
 373+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048ABH
 374+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B4H
 375+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B4H
 376+ 4CF0              PLY_AKG_READINSTRUMENTCELL EQU 048BAH
 377+ 4CF0              PLY_AKG_NOSOFTNOHARD EQU 048C7H
 378+ 4CF0              PLY_AKG_NSNH_NONOISE EQU 048DCH
 379+ 4CF0              PLY_AKG_SOFT EQU 048DFH
 380+ 4CF0              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E6H
 381+ 4CF0              PLY_AKG_S_NOTSIMPLE EQU 048EEH
 382+ 4CF0              PLY_AKG_S_AFTERSIMPLETEST EQU 048F1H
 383+ 4CF0              PLY_AKG_HARDTOSOFT EQU 048FEH
 384+ 4CF0              PLY_AKG_HS_JUMPRATIO EQU 04909H
 385+ 4CF0              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04936H
 386+ 4CF0              PLY_AKG_ENDWITHOUTLOOP EQU 04938H
 387+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04938H
 388+ 4CF0              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04938H
 389+ 4CF0              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 04940H
 390+ 4CF0              PLY_AKG_SH_JUMPRATIO EQU 0494DH
 391+ 4CF0              PLY_AKG_SH_JUMPRATIOEND EQU 0496EH
 392+ 4CF0              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497DH
 393+ 4CF0              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04983H
 394+ 4CF0              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499DH
 395+ 4CF0              PLY_AKG_H_RETRIGEND EQU 049AFH
 396+ 4CF0              PLY_AKG_H_AFTERRETRIG EQU 049B0H
 397+ 4CF0              PLY_AKG_ENDWITHLOOP EQU 049C2H
 398+ 4CF0              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C9H
 399+ 4CF0              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DFH
 400+ 4CF0              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EDH
 401+ 4CF0              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FDH
 402+ 4CF0              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A0BH
 403+ 4CF0              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A1AH
 404+ 4CF0              PLY_AKG_SHOHS_RETRIGEND EQU 04A29H
 405+ 4CF0              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A2AH
 406+ 4CF0              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3CH
 407+ 4CF0              PLY_AKG_EFFECTTABLE EQU 04A4AH
 408+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A4AH
 409+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6EH
 410+ 4CF0              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6EH
 411+ 4CF0              PLY_AKG_EFFECT_RESET EQU 04A71H
 412+ 4CF0              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A73H
 413+ 4CF0              PLY_AKG_EFFECT_VOLUME EQU 04A8EH
 414+ 4CF0              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A9AH
 415+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04AA0H
 416+ 4CF0              PLY_AKG_ARPEGGIOSTABLE EQU 04AA0H
 417+ 4CF0              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC7H
 418+ 4CF0              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACEH
 419+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD4H
 420+ 4CF0              PLY_AKG_PITCHESTABLE EQU 04AD4H
 421+ 4CF0              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AFBH
 422+ 4CF0              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B02H
 423+ 4CF0              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B13H
 424+ 4CF0              PLY_AKG_EFFECT_PITCHDOWN EQU 04B1AH
 425+ 4CF0              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B2AH
 426+ 4CF0              PLY_AKG_EFFECT_PITCHUP EQU 04B3FH
 427+ 4CF0              PLY_AKG_EFFECT_PITCHSTOP EQU 04B51H
 428+ 4CF0              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B58H
 429+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B82H
 430+ 4CF0              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B82H
 431+ 4CF0              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B9BH
 432+ 4CF0              PLY_AKG_EFFECT_GLIDESPEED EQU 04B9BH
 433+ 4CF0              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BADH
 434+ 4CF0              PLY_AKG_EFFECT_LEGATO EQU 04BC3H
 435+ 4CF0              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD7H
 436+ 4CF0              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDFH
 437+ 4CF0              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE7H
 438+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEFH
 439+ 4CF0              PLY_AKG_EVENT EQU 04BEFH
 440+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BF0H
 441+ 4CF0              PLY_AKG_PERIODTABLE EQU 04BF0H
 442+ 4CF0              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BF0H
 443+ 4CF0              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CF0H
 444+ 4CF0              PLY_AKG_PERIODTABLE_END EQU 04CF0H
 445+ 4CF0              PLY_AKG_END EQU 04CF0H
 446+ 4CF0              MAIN_PLAYER_END EQU 04CF0H
 447+ 4CF0              TESTEREND EQU 04CF0H
 448+ 4CF0
# file closed: ./symbol/AKG.sym
 113  4CF0               ENDIF
 114  4CF0
 115  4CF0               INCLUDE "VBLANK.asm"
# file opened: asm\VBLANK.asm
   1+ 4CF0              ORIG.HTIMI:
   2+ 4CF0 00 00 00 00  	DB 0, 0, 0, 0, 0
   2+ 4CF4 00
   3+ 4CF5               EXPORT ORIG.HTIMI
   4+ 4CF5
   5+ 4CF5              ; *******************************************************************************************************
   6+ 4CF5              ; interrupt handler when page 0 enabled
   7+ 4CF5              ; we are here only if one of the extended basic commands have paged in page 0
   8+ 4CF5              ; which means we arrived from BASIC so page 2 is already good
   9+ 4CF5              VBLANK:
  10+ 4CF5              	EXPORT VBLANK
  11+ 4CF5
  12+ 4CF5 F5               PUSH AF
  13+ 4CF6              	; is VDP originator ?
  14+ 4CF6 DB 99        	IN	A, (099H)
  15+ 4CF8 A7           	AND	A
  16+ 4CF9 F2 20 4D     	JP P, .EXIT
  17+ 4CFC
  18+ 4CFC               IF (SOUND_CMDS + SPRITE_CMDS > 0)
  19+ 4CFC C5               PUSH BC
  20+ 4CFD D5               PUSH DE
  21+ 4CFE E5               PUSH HL
  22+ 4CFF 08               EX AF, AF'
  23+ 4D00 D9               EXX
  24+ 4D01 F5               PUSH AF
  25+ 4D02 C5               PUSH BC
  26+ 4D03 D5               PUSH DE
  27+ 4D04 E5               PUSH HL
  28+ 4D05 DD E5            PUSH IX
  29+ 4D07 FD E5            PUSH IY
  30+ 4D09
  31+ 4D09               IF (SPRITE_CMDS == 1)
  32+ 4D09 CD 5A 4D     	CALL PROCESS_SPRITES_AND_ANIMATIONS
  33+ 4D0C               ENDIF
  34+ 4D0C
  35+ 4D0C               IF (SOUND_CMDS == 1)
  36+ 4D0C 3A 3F 59     	LD A, (SOUND_ENABLED)
  37+ 4D0F B7           	OR A
  38+ 4D10 C4 33 42     	CALL NZ,PLY_AKG_PLAY
  39+ 4D13               ENDIF
  40+ 4D13
  41+ 4D13                  ; increase JIFFY
  42+ 4D13                  ;LD HL,(JIFFY)
  43+ 4D13                  ;INC HL
  44+ 4D13                  ;LD (JIFFY),HL
  45+ 4D13
  46+ 4D13 FD E1            POP IY
  47+ 4D15 DD E1            POP IX
  48+ 4D17 E1               POP HL
  49+ 4D18 D1               POP DE
  50+ 4D19 C1               POP BC
  51+ 4D1A F1               POP AF
  52+ 4D1B 08               EX AF, AF'
  53+ 4D1C D9               EXX
  54+ 4D1D E1               POP HL
  55+ 4D1E D1               POP DE
  56+ 4D1F C1               POP BC
  57+ 4D20               ENDIF
  58+ 4D20
  59+ 4D20              .EXIT:
  60+ 4D20 F1           	POP AF
  61+ 4D21 FB           	EI
  62+ 4D22 ED 4D        	RETI
  63+ 4D24              ; *******************************************************************************************************
  64+ 4D24
  65+ 4D24              ; *******************************************************************************************************
  66+ 4D24              ; H.TIMI function
  67+ 4D24              ; we can end up here from anywhere so page in both page 0 and 2
  68+ 4D24              MBGE_HTIMI:
  69+ 4D24               EXPORT MBGE_HTIMI
  70+ 4D24
  71+ 4D24               IF (SOUND_CMDS + SPRITE_CMDS > 0)
  72+ 4D24
  73+ 4D24 F5           	PUSH AF
  74+ 4D25
  75+ 4D25              	; enable page 2
  76+ 4D25 3E 02            LD A, 2
  77+ 4D27 CD BD 64         CALL GET_PAGE_INFO
  78+ 4D2A C5               PUSH BC
  79+ 4D2B D5               PUSH DE
  80+ 4D2C 3A 43 F3         LD A, (RAMAD2)
  81+ 4D2F 26 80            LD H, 080H
  82+ 4D31 CD 04 65         CALL LOCAL_ENASLT
  83+ 4D34              	; enable page 0
  84+ 4D34 AF               XOR A
  85+ 4D35 CD BD 64         CALL GET_PAGE_INFO
  86+ 4D38 C5               PUSH BC
  87+ 4D39 D5               PUSH DE
  88+ 4D3A 3A 41 F3         LD A, (RAMAD0)
  89+ 4D3D 26 00            LD H, 0
  90+ 4D3F CD 04 65         CALL LOCAL_ENASLT
  91+ 4D42
  92+ 4D42               IF (SPRITE_CMDS == 1)
  93+ 4D42 CD 5A 4D     	CALL PROCESS_SPRITES_AND_ANIMATIONS
  94+ 4D45               ENDIF
  95+ 4D45
  96+ 4D45               IF (SOUND_CMDS == 1)
  97+ 4D45 3A 3F 59     	LD A, (SOUND_ENABLED)
  98+ 4D48 B7           	OR A
  99+ 4D49 C4 33 42     	CALL NZ,PLY_AKG_PLAY
 100+ 4D4C               ENDIF
 101+ 4D4C
 102+ 4D4C              	; restore page 0
 103+ 4D4C D1               POP DE
 104+ 4D4D C1               POP BC
 105+ 4D4E CD F4 64         CALL RESTORE_PAGE_INFO
 106+ 4D51              	; restore page 2
 107+ 4D51 D1               POP DE
 108+ 4D52 C1               POP BC
 109+ 4D53 CD F4 64         CALL RESTORE_PAGE_INFO
 110+ 4D56
 111+ 4D56 F1           	POP AF
 112+ 4D57               ENDIF
 113+ 4D57 C3 F0 4C     	JP ORIG.HTIMI
 114+ 4D5A              ; *******************************************************************************************************
 115+ 4D5A
 116+ 4D5A              ; *******************************************************************************************************
 117+ 4D5A              ; function checks if the sprite system is initialized and what screen mode we are running
 118+ 4D5A              ; also checks if some VRAM modifying command is running
 119+ 4D5A              ; when that checks out calls sprite updates and animation processing
 120+ 4D5A              ; if in an unsupported mode disables sprite handling
 121+ 4D5A              PROCESS_SPRITES_AND_ANIMATIONS:
 122+ 4D5A              	; check if initialized
 123+ 4D5A 3A 7C 4D     	LD A, (SPRATR_INIT_STATUS)
 124+ 4D5D B7           	OR A
 125+ 4D5E C8           	RET Z
 126+ 4D5F              	; check screen mode
 127+ 4D5F 3A AF FC     	LD A, (SCRMOD)
 128+ 4D62 3D           	DEC A
 129+ 4D63 28 08        	JR Z, .L0 ; screen 1
 130+ 4D65 3D           	DEC A
 131+ 4D66 28 05            JR Z, .L0 ; screen 2
 132+ 4D68              	; unsupported screen mode, disable
 133+ 4D68 AF               XOR A
 134+ 4D69 32 7C 4D         LD (SPRATR_INIT_STATUS),A
 135+ 4D6C C9               RET
 136+ 4D6D              .L0:
 137+ 4D6D                  ; check if anyone else is working with VRAM
 138+ 4D6D 3A CE 62         LD A,(VRAM_UPDATE_IN_PROGRESS)
 139+ 4D70 B7               OR A
 140+ 4D71 C0               RET NZ
 141+ 4D72
 142+ 4D72 CD 91 4D         CALL SPRATR_UPDATE
 143+ 4D75
 144+ 4D75               IF (ANIM_CMDS == 1)
 145+ 4D75 CD E1 55         CALL PROCESS_ANIMATIONS
 146+ 4D78 CD AD 57         CALL PROCESS_AUTOSGAMS
 147+ 4D7B               ENDIF
 148+ 4D7B C9               RET
 149+ 4D7C              ; *******************************************************************************************************
# file closed: asm\VBLANK.asm
 116  4D7C
 117  4D7C               IF (SPRITE_CMDS == 1)
 118  4D7C               INCLUDE "SPRITES.asm"
# file opened: asm\SPRITES.asm
   1+ 4D7C              ; commands and variables related to sprites
   2+ 4D7C
   3+ 4D7C              SPRATR_INIT_STATUS:
   4+ 4D7C 00            DB 0
   5+ 4D7D              SPRATR_UPDATE_FLAG:
   6+ 4D7D 00 00         DW 0
   7+ 4D7F              SPRATR_DATA:
   8+ 4D7F 00 00         DW 0
   9+ 4D81              SPRFLICKER_ENABLED:
  10+ 4D81 00            DB 0
  11+ 4D82              ; to support sprite flicker
  12+ 4D82              FLICKER:
  13+ 4D82 00            DB 0
  14+ 4D83
  15+ 4D83              ; to temporarily store stack pointer
  16+ 4D83              TMPSP:
  17+ 4D83 00 00         DW 0
  18+ 4D85
  19+ 4D85              ; *******************************************************************************************************
  20+ 4D85              ; helper function gets pointer to n-th entry in sprite attributes
  21+ 4D85              ; changes HL,DE
  22+ 4D85              GETnthSPRATTR:
  23+ 4D85 26 00            LD H,0
  24+ 4D87 6F               LD L,A
  25+ 4D88 CD B9 64         CALL HLx8
  26+ 4D8B ED 5B 7F 4D      LD DE,(SPRATR_DATA)
  27+ 4D8F 19               ADD HL,DE
  28+ 4D90 C9               RET
  29+ 4D91              ; *******************************************************************************************************
  30+ 4D91
  31+ 4D91              ; *******************************************************************************************************
  32+ 4D91              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
  33+ 4D91              ; struct {
  34+ 4D91              ; DW y
  35+ 4D91              ; DW x
  36+ 4D91              ; DW pattern (0-63)
  37+ 4D91              ; DW color
  38+ 4D91              ; } [32]
  39+ 4D91              ; will hide sprites whose location is outside of visible area
  40+ 4D91              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
  41+ 4D91              ; modifies AF, AF', BC, DE, HL
  42+ 4D91              SPRATR_UPDATE:
  43+ 4D91              	; check if update requested
  44+ 4D91 2A 7D 4D     	LD HL, (SPRATR_UPDATE_FLAG)
  45+ 4D94 7E           	LD A, (HL)
  46+ 4D95 B7           	OR A
  47+ 4D96 C8           	RET Z
  48+ 4D97              .L0:
  49+ 4D97 06 20        	LD B, 32 ; sprite number
  50+ 4D99 0E 98        	LD C, #98 ; register for vdp data output
  51+ 4D9B              	; set VDP address
  52+ 4D9B 3A AF FC         LD A,(SCRMOD)
  53+ 4D9E 3D               DEC A
  54+ 4D9F 20 05            JR NZ,.L4
  55+ 4DA1 2A C3 F3         LD HL, (T32ATR)
  56+ 4DA4 18 03            JR .L5
  57+ 4DA6              .L4:
  58+ 4DA6 2A CD F3         LD HL, (GRPATR)
  59+ 4DA9              .L5:
  60+ 4DA9 3A 81 4D     	LD A, (SPRFLICKER_ENABLED)
  61+ 4DAC B7           	OR A
  62+ 4DAD 28 03        	JR Z, .L3
  63+ 4DAF 3A 82 4D     	LD A, (FLICKER)
  64+ 4DB2              .L3:
  65+ 4DB2 5F           	LD E, A
  66+ 4DB3 08           	EX AF, AF'
  67+ 4DB4 7B           	LD A, E
  68+ 4DB5 87           	ADD A, A
  69+ 4DB6 87           	ADD A, A
  70+ 4DB7 16 00        	LD D, 0
  71+ 4DB9 5F           	LD E, A
  72+ 4DBA 19           	ADD HL, DE
  73+ 4DBB CD A4 64     	CALL SETWRT_LOCAL
  74+ 4DBE ED 73 83 4D  	LD (TMPSP), SP
  75+ 4DC2 ED 7B 7F 4D  	LD SP, (SPRATR_DATA)
  76+ 4DC6
  77+ 4DC6              .LOOP:
  78+ 4DC6 E1           	POP HL
  79+ 4DC7 24           	INC H
  80+ 4DC8 28 0D        	JR Z, .L1 ; negative number between -256 and -1
  81+ 4DCA 25           	DEC H
  82+ 4DCB 20 15        	JR NZ, .OUT3 ; sprite vertically can't be visible
  83+ 4DCD 7D           	LD A, L
  84+ 4DCE FE C0        	CP 192
  85+ 4DD0 30 10        	JR NC, .OUT3
  86+ 4DD2 3D           	DEC A ; due to VDP rule that top of screen is -1
  87+ 4DD3 57           	LD D, A
  88+ 4DD4 C3 FB 4D     	JP .X
  89+ 4DD7              .L1:
  90+ 4DD7 7D           	LD A, L
  91+ 4DD8 C6 10        	ADD 16
  92+ 4DDA FA E2 4D     	JP M, .OUT3 ; below -16
  93+ 4DDD 2D           	DEC L ; due to VDP rule that top of screen is -1
  94+ 4DDE 55           	LD D, L
  95+ 4DDF C3 FB 4D     	JP .X
  96+ 4DE2              .OUT3:
  97+ 4DE2 E1           	POP HL ; skip x value
  98+ 4DE3              .OUT2:
  99+ 4DE3 E1           	POP HL ; skip pattern
 100+ 4DE4 E1           	POP HL ; skip color
 101+ 4DE5 3E D1        	LD A, #D1
 102+ 4DE7 ED 79        	OUT (C), A ; sprite hidden
 103+ 4DE9 00          > NOP
 103+ 4DEA 00          > NOP
 103+ 4DEB 00          > NOP
 104+ 4DEC ED 79        	OUT (C), A ; value unimportant
 105+ 4DEE 00          > NOP
 105+ 4DEF 00          > NOP
 105+ 4DF0 00          > NOP
 106+ 4DF1 ED 79        	OUT (C), A ; value unimportant
 107+ 4DF3 00          > NOP
 107+ 4DF4 00          > NOP
 107+ 4DF5 00          > NOP
 108+ 4DF6 ED 79        	OUT (C), A ; value unimportant
 109+ 4DF8 C3 26 4E     	JP .NEXT
 110+ 4DFB              .X:
 111+ 4DFB E1           	POP HL
 112+ 4DFC 24           	INC H
 113+ 4DFD 28 08        	JR Z, .L2
 114+ 4DFF 25           	DEC H
 115+ 4E00 20 E1        	JR NZ, .OUT2
 116+ 4E02 1E 00        	LD E, 0 ; EC bit
 117+ 4E04 C3 10 4E     	JP .XY
 118+ 4E07              .L2:
 119+ 4E07 7D           	LD A, L
 120+ 4E08 C6 20        	ADD 32
 121+ 4E0A FA E3 4D     	JP M, .OUT2
 122+ 4E0D 6F           	LD L, A
 123+ 4E0E 1E 80        	LD E, #80
 124+ 4E10              .XY:
 125+ 4E10 ED 51        	OUT (C), D
 126+ 4E12 3A E0 F3     	LD A, (REG1SAV)
 127+ 4E15 E6 02        	AND 2
 128+ 4E17 ED 69        	OUT (C), L
 129+ 4E19 E1           	POP HL ; pattern
 130+ 4E1A 7D           	LD A, L
 131+ 4E1B 28 02        	JR Z, .SMALLSPRITES
 132+ 4E1D 87           	ADD A, A
 133+ 4E1E 87           	ADD A, A ; needs to go at 4x
 134+ 4E1F              .SMALLSPRITES:
 135+ 4E1F D3 98        	OUT (#98), A
 136+ 4E21 E1           	POP HL ; color
 137+ 4E22 7D           	LD A, L
 138+ 4E23 B3           	OR E
 139+ 4E24 D3 98        	OUT (#98), A
 140+ 4E26              .NEXT:
 141+ 4E26 08           	EX AF, AF'
 142+ 4E27 3C           	INC A
 143+ 4E28 E6 1F        	AND 31
 144+ 4E2A C2 49 4E     	JP NZ, .NEXT2
 145+ 4E2D 08           	EX AF, AF'
 146+ 4E2E 3A AF FC         LD A,(SCRMOD)
 147+ 4E31 3D               DEC A
 148+ 4E32 20 05            JR NZ,.L6
 149+ 4E34 2A C3 F3         LD HL, (T32ATR)
 150+ 4E37 18 03            JR .L7
 151+ 4E39              .L6:
 152+ 4E39 2A CD F3         LD HL, (GRPATR)
 153+ 4E3C              .L7:
 154+ 4E3C              	; CALL SETWRT_LOCAL not allowed as SP modified
 155+ 4E3C 7D           	LD	A, L
 156+ 4E3D D3 99        	OUT	(099H), A
 157+ 4E3F 7C           	LD	A, H
 158+ 4E40 E6 3F        	AND	03FH
 159+ 4E42 F6 40        	OR	040H
 160+ 4E44 D3 99        	OUT	(099H), A
 161+ 4E46 C3 4A 4E     	JP .NEXT3
 162+ 4E49              .NEXT2:
 163+ 4E49 08           	EX AF, AF'
 164+ 4E4A              .NEXT3:
 165+ 4E4A 05           	DEC B
 166+ 4E4B C2 C6 4D     	JP NZ, .LOOP
 167+ 4E4E 08           	EX AF, AF'
 168+ 4E4F 3C           	INC A
 169+ 4E50 32 82 4D     	LD (FLICKER), A
 170+ 4E53
 171+ 4E53 ED 7B 83 4D  	LD SP, (TMPSP)
 172+ 4E57 2A 7D 4D     	LD HL, (SPRATR_UPDATE_FLAG)
 173+ 4E5A 36 00        	LD (HL), 0 ; zero out update flag
 174+ 4E5C C9           	RET
 175+ 4E5D              ; *******************************************************************************************************
 176+ 4E5D
 177+ 4E5D              ; *******************************************************************************************************
 178+ 4E5D              ; function to handle CALL SPRENABLE basic extension
 179+ 4E5D              ; initializes sprites handler
 180+ 4E5D              ; _SPRENABLE ( INT[3][31] variable sprites_attributes,
 181+ 4E5D              ;			   INT variable update_variable,
 182+ 4E5D              ;			   BYTE sprite_flicker_enabled )
 183+ 4E5D              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA and SPRFLICKER_ENABLED
 184+ 4E5D              SPRENABLE:
 185+ 4E5D              	; opening (
 186+ 4E5D CD CB 65     	CALL CHKCHAR
 187+ 4E60 28           	DB '('
 188+ 4E61              	; get address of sprite attribute table DIM SA%(3,31)
 189+ 4E61 3E 02        	LD A,2
 190+ 4E63 06 02        	LD B,2
 191+ 4E65 11 20 04     	LD DE,#0420
 192+ 4E68 CD F8 65     	CALL GET_BASIC_ARRAY_DATA_POINTER
 193+ 4E6B C5           	PUSH BC
 194+ 4E6C              	; comma
 195+ 4E6C CD CB 65     	CALL CHKCHAR
 196+ 4E6F 2C           	DB ','
 197+ 4E70              	; get address of sprite update flag
 198+ 4E70 DD 21 A4 5E  	LD IX, PTRGET
 199+ 4E74 CD 59 01     	CALL CALBAS
 200+ 4E77 D5           	PUSH DE
 201+ 4E78              	; comma
 202+ 4E78 CD CB 65     	CALL CHKCHAR
 203+ 4E7B 2C           	DB ','
 204+ 4E7C              	; get flicker enabled flag
 205+ 4E7C DD 21 1C 52  	LD IX, GETBYT
 206+ 4E80 CD 59 01     	CALL CALBAS
 207+ 4E83 F5           	PUSH AF
 208+ 4E84              	; ending )
 209+ 4E84 CD CB 65     	CALL CHKCHAR
 210+ 4E87 29           	DB ')'
 211+ 4E88
 212+ 4E88 F1           	POP AF ; get flicker flag
 213+ 4E89 B7           	OR A
 214+ 4E8A 32 81 4D     	LD (SPRFLICKER_ENABLED), A
 215+ 4E8D
 216+ 4E8D D1           	POP DE ; update variable location
 217+ 4E8E ED 53 7D 4D  	LD (SPRATR_UPDATE_FLAG), DE
 218+ 4E92 D1           	POP DE ; address of sprite attribute table
 219+ 4E93 ED 53 7F 4D  	LD (SPRATR_DATA), DE
 220+ 4E97 3E 01        	LD A, 1
 221+ 4E99 32 7C 4D     	LD (SPRATR_INIT_STATUS), A
 222+ 4E9C C9           	RET
 223+ 4E9D              ; *******************************************************************************************************
 224+ 4E9D
 225+ 4E9D              ; *******************************************************************************************************
 226+ 4E9D              ; function to handle CALL SPRDISABLE basic extension
 227+ 4E9D              ; disables sprites handling
 228+ 4E9D              ; _SPRDISABLE
 229+ 4E9D              ; resets variable SPRATR_INIT_STATUS
 230+ 4E9D              SPRDISABLE:
 231+ 4E9D AF           	XOR A
 232+ 4E9E 32 7C 4D     	LD (SPRATR_INIT_STATUS), A
 233+ 4EA1 C9           	RET
 234+ 4EA2              ; *******************************************************************************************************
 235+ 4EA2
 236+ 4EA2              ; *******************************************************************************************************
 237+ 4EA2              ; function to handle CALL SPRSET basic extension
 238+ 4EA2              ; sets position, and optionally pattern and color of sprite
 239+ 4EA2              ; _SPRSET ( BYTE sprite_num , valid 0-31
 240+ 4EA2              ;			INT x,
 241+ 4EA2              ;			INT y,
 242+ 4EA2              ;			INT pattern, valid 0-63, otherwise ignored
 243+ 4EA2              ;			INT color, valid 0-15, otherwise ignored
 244+ 4EA2              SPRSET:
 245+ 4EA2 3A 7C 4D     	LD A, (SPRATR_INIT_STATUS)
 246+ 4EA5 B7           	OR A
 247+ 4EA6 20 05        	JR NZ, .L1
 248+ 4EA8 1E 05        	LD E, 5 ; illegal function call
 249+ 4EAA C3 F1 65     	JP THROW_ERROR
 250+ 4EAD              .L1:
 251+ 4EAD              	; opening (
 252+ 4EAD CD CB 65     	CALL CHKCHAR
 253+ 4EB0 28           	DB '('
 254+ 4EB1              	; get sprite number
 255+ 4EB1 DD 21 1C 52  	LD IX, GETBYT
 256+ 4EB5 CD 59 01     	CALL CALBAS
 257+ 4EB8 F5           	PUSH AF
 258+ 4EB9              	; comma
 259+ 4EB9 CD CB 65     	CALL CHKCHAR
 260+ 4EBC 2C           	DB ','
 261+ 4EBD              	; get x
 262+ 4EBD DD 21 2F 54  	LD IX, FRMQNT
 263+ 4EC1 CD 59 01     	CALL CALBAS
 264+ 4EC4 D5           	PUSH DE
 265+ 4EC5              	; comma
 266+ 4EC5 CD CB 65     	CALL CHKCHAR
 267+ 4EC8 2C           	DB ','
 268+ 4EC9              	; get y
 269+ 4EC9 DD 21 2F 54  	LD IX, FRMQNT
 270+ 4ECD CD 59 01     	CALL CALBAS
 271+ 4ED0 D5           	PUSH DE
 272+ 4ED1              	; comma
 273+ 4ED1 CD CB 65     	CALL CHKCHAR
 274+ 4ED4 2C           	DB ','
 275+ 4ED5              	; get pattern
 276+ 4ED5 DD 21 2F 54  	LD IX, FRMQNT
 277+ 4ED9 CD 59 01     	CALL CALBAS
 278+ 4EDC D5           	PUSH DE
 279+ 4EDD              	; comma
 280+ 4EDD CD CB 65     	CALL CHKCHAR
 281+ 4EE0 2C           	DB ','
 282+ 4EE1              	; get color
 283+ 4EE1 DD 21 2F 54  	LD IX, FRMQNT
 284+ 4EE5 CD 59 01     	CALL CALBAS
 285+ 4EE8 D5           	PUSH DE
 286+ 4EE9              	; ending )
 287+ 4EE9 CD CB 65     	CALL CHKCHAR
 288+ 4EEC 29           	DB ')'
 289+ 4EED
 290+ 4EED                  ; save position in BASIC text
 291+ 4EED E5           	PUSH HL
 292+ 4EEE DD E1        	POP IX
 293+ 4EF0
 294+ 4EF0 C1           	POP BC ; color
 295+ 4EF1 D1           	POP DE ; pattern
 296+ 4EF2 D9           	EXX
 297+ 4EF3 C1           	POP BC ; y
 298+ 4EF4 D1           	POP DE ; x
 299+ 4EF5 F1           	POP AF ; sprite number
 300+ 4EF6 FE 20        	CP 32
 301+ 4EF8 38 05        	JR C, .L2
 302+ 4EFA 1E 05        	LD E, 5 ; illegal function call
 303+ 4EFC C3 F1 65     	JP THROW_ERROR
 304+ 4EFF              .L2:
 305+ 4EFF              	; find location in sprite attributes table
 306+ 4EFF D5           	PUSH DE
 307+ 4F00 CD 85 4D     	CALL GETnthSPRATTR
 308+ 4F03 D1           	POP DE
 309+ 4F04 F3           	DI
 310+ 4F05              	; set y
 311+ 4F05 71           	LD (HL), C
 312+ 4F06 23           	INC HL
 313+ 4F07 70           	LD (HL), B
 314+ 4F08 23           	INC HL
 315+ 4F09              	; set x
 316+ 4F09 73           	LD (HL), E
 317+ 4F0A 23           	INC HL
 318+ 4F0B 72           	LD (HL), D
 319+ 4F0C 23           	INC HL
 320+ 4F0D E5           	PUSH HL
 321+ 4F0E D9           	EXX
 322+ 4F0F E1           	POP HL
 323+ 4F10              	; check if 0<=pattern<64
 324+ 4F10 7A           	LD A, D
 325+ 4F11 B7           	OR A
 326+ 4F12 20 0B        	JR NZ, .L3
 327+ 4F14 7B           	LD A, E
 328+ 4F15 FE 40        	CP 64
 329+ 4F17 30 06        	JR NC, .L3
 330+ 4F19              	; set pattern
 331+ 4F19              	;ADD A, A
 332+ 4F19              	;ADD A, A
 333+ 4F19              	;ADD A, A
 334+ 4F19 77           	LD (HL), A
 335+ 4F1A 23           	INC HL
 336+ 4F1B 72           	LD (HL), D
 337+ 4F1C 23           	INC HL
 338+ 4F1D 18 02        	JR .L4
 339+ 4F1F              .L3:
 340+ 4F1F              	; skip pattern
 341+ 4F1F 23          > INC HL
 341+ 4F20 23          > INC HL
 342+ 4F21              .L4:
 343+ 4F21              	; check if 0<=color<16
 344+ 4F21 78           	LD A, B
 345+ 4F22 B7           	OR A
 346+ 4F23 20 08        	JR NZ, .L5
 347+ 4F25 79           	LD A, C
 348+ 4F26 FE 10        	CP 16
 349+ 4F28 30 03        	JR NC, .L5
 350+ 4F2A              	; set color
 351+ 4F2A 71           	LD (HL), C
 352+ 4F2B 23           	INC HL
 353+ 4F2C 70           	LD (HL), B
 354+ 4F2D
 355+ 4F2D              .L5:
 356+ 4F2D FB           	EI
 357+ 4F2E DD E5        	PUSH IX
 358+ 4F30 E1           	POP HL
 359+ 4F31 C9           	RET
 360+ 4F32              ; *******************************************************************************************************
 361+ 4F32
 362+ 4F32              ; *******************************************************************************************************
 363+ 4F32              ; function sets sprite location based on initial coordinates and offset provided
 364+ 4F32              ; input A=sprite number in SPRATR_DATA , 0-31
 365+ 4F32              ; input DE=initial x
 366+ 4F32              ; input BC=initial y
 367+ 4F32              ; input IY=location where delta y,x are located
 368+ 4F32              ; modifies AF, HL, IX
 369+ 4F32              SPRSET_DELTA_POS:
 370+ 4F32 D5           	PUSH DE
 371+ 4F33 CD 85 4D     	CALL GETnthSPRATTR
 372+ 4F36 E5           	PUSH HL
 373+ 4F37 DD E1        	POP IX
 374+ 4F39 D1           	POP DE
 375+ 4F3A              	; IX=sprite's y location
 376+ 4F3A FD 6E 00     	LD L, (IY)
 377+ 4F3D FD 66 01     	LD H, (IY+1)
 378+ 4F40 09           	ADD HL, BC
 379+ 4F41 DD 75 00     	LD (IX), L
 380+ 4F44 DD 74 01     	LD (IX+1), H
 381+ 4F47 FD 6E 02     	LD L, (IY+2)
 382+ 4F4A FD 66 03     	LD H, (IY+3)
 383+ 4F4D 19           	ADD HL, DE
 384+ 4F4E DD 75 02     	LD (IX+2), L
 385+ 4F51 DD 74 03     	LD (IX+3), H
 386+ 4F54 C9           	RET
 387+ 4F55              ; *******************************************************************************************************
 388+ 4F55
 389+ 4F55              ; *******************************************************************************************************
 390+ 4F55              ; function to handle CALL SPRGRPMOV basic extension
 391+ 4F55              ; sets position of a group of sprites described with
 392+ 4F55              ; { int sprite_num, int delta_y, int delta_x } [count]
 393+ 4F55              ; _SPRGRPMOV ( INT x,
 394+ 4F55              ;			   INT y,
 395+ 4F55              ;			   BYTE count,
 396+ 4F55              ;			   INT[2][count] data_ptr
 397+ 4F55              SPRGRPMOV:
 398+ 4F55 3A 7C 4D     	LD A, (SPRATR_INIT_STATUS)
 399+ 4F58 B7           	OR A
 400+ 4F59 CA EB 65     	JP Z,ILLEGAL_FUNCTION
 401+ 4F5C              	; opening (
 402+ 4F5C CD CB 65     	CALL CHKCHAR
 403+ 4F5F 28           	DB '('
 404+ 4F60              	; get x
 405+ 4F60 DD 21 2F 54  	LD IX, FRMQNT
 406+ 4F64 CD 59 01     	CALL CALBAS
 407+ 4F67 ED 53 BD 62  	LD (BLIT_STRUCT),DE
 408+ 4F6B              	; comma
 409+ 4F6B CD CB 65     	CALL CHKCHAR
 410+ 4F6E 2C           	DB ','
 411+ 4F6F              	; get y
 412+ 4F6F DD 21 2F 54  	LD IX, FRMQNT
 413+ 4F73 CD 59 01     	CALL CALBAS
 414+ 4F76 ED 53 BF 62  	LD (BLIT_STRUCT+2),DE
 415+ 4F7A              	; comma
 416+ 4F7A CD CB 65     	CALL CHKCHAR
 417+ 4F7D 2C           	DB ','
 418+ 4F7E              	; get count
 419+ 4F7E DD 21 1C 52  	LD IX, GETBYT
 420+ 4F82 CD 59 01     	CALL CALBAS
 421+ 4F85 32 C1 62     	LD (BLIT_STRUCT+4),A
 422+ 4F88              	; comma
 423+ 4F88 CD CB 65     	CALL CHKCHAR
 424+ 4F8B 2C           	DB ','
 425+ 4F8C              	; get sprite group definition array data pointer
 426+ 4F8C 3A C1 62     	LD A,(BLIT_STRUCT+4)
 427+ 4F8F 5F           	LD E,A
 428+ 4F90 16 03        	LD D,3
 429+ 4F92 3E 02        	LD A,2
 430+ 4F94 47           	LD B,A
 431+ 4F95 CD F8 65     	CALL GET_BASIC_ARRAY_DATA_POINTER
 432+ 4F98 ED 43 C2 62  	LD (BLIT_STRUCT+5),BC
 433+ 4F9C              	; ending )
 434+ 4F9C CD CB 65     	CALL CHKCHAR
 435+ 4F9F 29           	DB ')'
 436+ 4FA0
 437+ 4FA0 E5           	PUSH HL
 438+ 4FA1
 439+ 4FA1 D9               EXX
 440+ 4FA2 ED 5B BD 62      LD DE,(BLIT_STRUCT) ; initial x
 441+ 4FA6 ED 4B BF 62      LD BC,(BLIT_STRUCT+2) ; initial y
 442+ 4FAA D9               EXX
 443+ 4FAB 2A C2 62         LD HL,(BLIT_STRUCT+5) ; pointer to data
 444+ 4FAE 3A C1 62         LD A,(BLIT_STRUCT+4) ; number of entries
 445+ 4FB1 47               LD B,A
 446+ 4FB2 3E 01        	LD A,1
 447+ 4FB4 32 CE 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 448+ 4FB7 F3           	DI
 449+ 4FB8 CD C2 4F     	CALL .UPDATE_LOC
 450+ 4FBB FB           	EI
 451+ 4FBC AF           	XOR A
 452+ 4FBD 32 CE 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 453+ 4FC0
 454+ 4FC0 E1           	POP HL
 455+ 4FC1 C9           	RET
 456+ 4FC2
 457+ 4FC2              .UPDATE_LOC:
 458+ 4FC2 7E           	LD A, (HL)
 459+ 4FC3 23           	INC HL
 460+ 4FC4 23           	INC HL
 461+ 4FC5 E5           	PUSH HL
 462+ 4FC6 FD E1        	POP IY
 463+ 4FC8 D9           	EXX
 464+ 4FC9 CD 32 4F     	CALL SPRSET_DELTA_POS
 465+ 4FCC D9           	EXX
 466+ 4FCD 23          > INC HL
 466+ 4FCE 23          > INC HL
 466+ 4FCF 23          > INC HL
 466+ 4FD0 23          > INC HL
 467+ 4FD1 10 EF        	DJNZ .UPDATE_LOC
 468+ 4FD3 C9           	RET
 469+ 4FD4              ; *******************************************************************************************************
 470+ 4FD4
# file closed: asm\SPRITES.asm
 119  4FD4               ENDIF
 120  4FD4
 121  4FD4               IF (ANIM_CMDS == 1)
 122  4FD4               INCLUDE "ANIMATION.asm"
# file opened: asm\ANIMATION.asm
   1+ 4FD4              ; sprite animation routines
   2+ 4FD4
   3+ 4FD4              ; number of animation items and pointer
   4+ 4FD4              ANIMITEMNUM:
   5+ 4FD4 00            DB 0
   6+ 4FD5              ANIMITEMPTR:
   7+ 4FD5 2D 66         DW EXT_END
   8+ 4FD7              ; number of animation definitions and pointer
   9+ 4FD7              ANIMDEFNUM:
  10+ 4FD7 00            DB 0
  11+ 4FD8              ANIMDEFPTR:
  12+ 4FD8 2D 66         DW EXT_END
  13+ 4FDA              ; number of links between sprite and animation definitions
  14+ 4FDA              ANIMSPRNUM:
  15+ 4FDA 00            DB 0
  16+ 4FDB              ANIMSPRPTR:
  17+ 4FDB 2D 66         DW EXT_END
  18+ 4FDD              ; number of automatic sprite group move and animate structures
  19+ 4FDD              AUTOSGAMNUM:
  20+ 4FDD 00            DB 0
  21+ 4FDE              AUTOSGAMPTR:
  22+ 4FDE 2D 66         DW EXT_END
  23+ 4FE0
  24+ 4FE0              ; ANIMATION ITEM
  25+ 4FE0              ; byte type = [0 - pattern and color change
  26+ 4FE0              ;              1 - pattern definition change ]
  27+ 4FE0              ; word ticks - number of ticks to hold this state
  28+ 4FE0              ; for type = 0
  29+ 4FE0              ;   byte pattern;
  30+ 4FE0              ;   byte color;
  31+ 4FE0              ; for type = 1
  32+ 4FE0              ;   work data_pointer;
  33+ 4FE0              ; total size = 5b
  34+ 4FE0
  35+ 4FE0              ; ANIMATION DEFINITION
  36+ 4FE0              ; byte number of items 1-15
  37+ 4FE0              ; byte[15] anim_item;
  38+ 4FE0              ; total size = 16b
  39+ 4FE0
  40+ 4FE0              ; SPRITE/CHAR ANIMATION
  41+ 4FE0              ; +00 byte sprite/char number;
  42+ 4FE0              ; +01 word time;
  43+ 4FE0              ; +03 byte current item;
  44+ 4FE0              ; +04 byte animation definition;
  45+ 4FE0              ; +05 byte cyclic;
  46+ 4FE0              ; +06 byte active;
  47+ 4FE0              ; +07 byte 0=sprite, 1-3 character bank
  48+ 4FE0              ; total size = 8b
  49+ 4FE0
  50+ 4FE0              ; AUTOMATIC SPRITE GROUP MOVE AND ANIMATE structure
  51+ 4FE0              ; +00 pointer to X variable
  52+ 4FE0              ; +02 pointer to Y variable
  53+ 4FE0              ; +04 minimum value
  54+ 4FE0              ; +06 maximal value
  55+ 4FE0              ; +08 delta value
  56+ 4FE0              ; +10 direction 0=horizontal, <>0 = vertical
  57+ 4FE0              ; +11 sprite group size
  58+ 4FE0              ; +12 sprite group pointer
  59+ 4FE0              ; +14 animation list size
  60+ 4FE0              ; +15 animation list pointer for negative delta values
  61+ 4FE0              ; +17 animation list pointer for positive delta values
  62+ 4FE0              ; +19 active flag
  63+ 4FE0              ; +20 ticks for movement
  64+ 4FE0              ; +22 timer
  65+ 4FE0              ; total = 24b
  66+ 4FE0
  67+ 4FE0              ; *******************************************************************************************************
  68+ 4FE0              ; helper function HL=A*5
  69+ 4FE0              ; changes HL,DE
  70+ 4FE0              Ax5:
  71+ 4FE0 26 00            LD H,0
  72+ 4FE2 6F               LD L,A
  73+ 4FE3 54               LD D,H
  74+ 4FE4 5D               LD E,L
  75+ 4FE5 29               ADD HL,HL
  76+ 4FE6 29               ADD HL,HL
  77+ 4FE7 19               ADD HL,DE
  78+ 4FE8 C9               RET
  79+ 4FE9              ; *******************************************************************************************************
  80+ 4FE9
  81+ 4FE9              ; *******************************************************************************************************
  82+ 4FE9              ; helper function gets pointer to n-th animation item
  83+ 4FE9              ; changes HL,DE
  84+ 4FE9              GETnthANIMITEM:
  85+ 4FE9 CD E0 4F         CALL Ax5
  86+ 4FEC ED 5B D5 4F      LD DE,(ANIMITEMPTR)
  87+ 4FF0 19               ADD HL,DE
  88+ 4FF1 C9               RET
  89+ 4FF2              ; *******************************************************************************************************
  90+ 4FF2
  91+ 4FF2              ; *******************************************************************************************************
  92+ 4FF2              ; helper function gets pointer to n-th entry in animation definition
  93+ 4FF2              ; changes HL,DE
  94+ 4FF2              GETnthANIMDEF:
  95+ 4FF2 26 00            LD H,0
  96+ 4FF4 6F               LD L,A
  97+ 4FF5 CD B8 64         CALL HLx16
  98+ 4FF8 ED 5B D8 4F      LD DE,(ANIMDEFPTR)
  99+ 4FFC 19               ADD HL,DE
 100+ 4FFD C9               RET
 101+ 4FFE              ; *******************************************************************************************************
 102+ 4FFE
 103+ 4FFE              ; *******************************************************************************************************
 104+ 4FFE              ; helper function gets pointer to n-th entry in sprite animation
 105+ 4FFE              ; changes HL,DE
 106+ 4FFE              GETnthSPRANIM:
 107+ 4FFE 26 00            LD H,0
 108+ 5000 6F               LD L,A
 109+ 5001 CD B9 64         CALL HLx8
 110+ 5004 ED 5B DB 4F      LD DE,(ANIMSPRPTR)
 111+ 5008 19               ADD HL,DE
 112+ 5009 C9               RET
 113+ 500A              ; *******************************************************************************************************
 114+ 500A
 115+ 500A              ; *******************************************************************************************************
 116+ 500A              ; helper function gets pointer to n-th entry in autosgam table
 117+ 500A              ; changes HL,DE
 118+ 500A              GETnthAUTOSGAM:
 119+ 500A 26 00            LD H,0
 120+ 500C 6F               LD L,A
 121+ 500D CD B9 64         CALL HLx8
 122+ 5010 54               LD D,H
 123+ 5011 5D               LD E,L
 124+ 5012 29               ADD HL,HL
 125+ 5013 19               ADD HL,DE
 126+ 5014 ED 5B DE 4F      LD DE,(AUTOSGAMPTR)
 127+ 5018 19               ADD HL,DE
 128+ 5019 C9               RET
 129+ 501A              ; *******************************************************************************************************
 130+ 501A
 131+ 501A              ; *******************************************************************************************************
 132+ 501A              ; function to handle CALL MAXANIMITEMS basic extension
 133+ 501A              ; MAXANIMITEMS (BYTE number)
 134+ 501A              ; sets new number and moves memory buffers as needed
 135+ 501A              MAXANIMITEMS:
 136+ 501A              	; opening (
 137+ 501A CD CB 65     	CALL CHKCHAR
 138+ 501D 28           	DB '('
 139+ 501E              	; get value
 140+ 501E DD 21 1C 52  	LD IX, GETBYT
 141+ 5022 CD 59 01     	CALL CALBAS
 142+ 5025 F5               PUSH AF
 143+ 5026              	; ending )
 144+ 5026 CD CB 65     	CALL CHKCHAR
 145+ 5029 29           	DB ')'
 146+ 502A F1               POP AF
 147+ 502B F3               DI
 148+ 502C              	; save position
 149+ 502C E5           	PUSH HL
 150+ 502D              .ENTRY:
 151+ 502D 47               LD B,A
 152+ 502E 3A D4 4F         LD A,(ANIMITEMNUM)
 153+ 5031 90               SUB B
 154+ 5032 28 28            JR Z, .EXIT; same value as before
 155+ 5034 FD 21 D8 4F      LD IY,ANIMDEFPTR
 156+ 5038 FA 5F 50         JP M, .INCREASE
 157+ 503B                  ; new value is lower than previous one
 158+ 503B CD 7E 50         CALL .SIZEDIFF
 159+ 503E CD 99 50         CALL .DECREASE_COMMON
 160+ 5041 2A DB 4F         LD HL,(ANIMSPRPTR)
 161+ 5044 AF               XOR A
 162+ 5045 ED 42            SBC HL,BC
 163+ 5047 22 DB 4F         LD (ANIMSPRPTR),HL
 164+ 504A              .E1:
 165+ 504A 2A DE 4F         LD HL,(AUTOSGAMPTR)
 166+ 504D AF               XOR A
 167+ 504E ED 42            SBC HL,BC
 168+ 5050 22 DE 4F         LD (AUTOSGAMPTR),HL
 169+ 5053              .E3:
 170+ 5053 2A 10 40         LD HL,(FREEMEMPTR)
 171+ 5056 AF               XOR A
 172+ 5057 ED 42            SBC HL,BC
 173+ 5059 22 10 40         LD (FREEMEMPTR),HL
 174+ 505C              .EXIT:
 175+ 505C FB               EI
 176+ 505D E1           	POP HL
 177+ 505E C9           	RET
 178+ 505F              .INCREASE:
 179+ 505F ED 44            NEG
 180+ 5061 CD 7E 50         CALL .SIZEDIFF
 181+ 5064 CD C5 50         CALL .INCREASE_COMMON
 182+ 5067 2A DB 4F         LD HL,(ANIMSPRPTR)
 183+ 506A 09               ADD HL,BC
 184+ 506B 22 DB 4F         LD (ANIMSPRPTR),HL
 185+ 506E              .E2:
 186+ 506E 2A DE 4F         LD HL,(AUTOSGAMPTR)
 187+ 5071 09               ADD HL,BC
 188+ 5072 22 DE 4F         LD (AUTOSGAMPTR),HL
 189+ 5075              .E4:
 190+ 5075 2A 10 40         LD HL,(FREEMEMPTR)
 191+ 5078 09               ADD HL,BC
 192+ 5079 22 10 40         LD (FREEMEMPTR),HL
 193+ 507C 18 DE            JR .EXIT
 194+ 507E              .SIZEDIFF:
 195+ 507E CD E0 4F         CALL Ax5
 196+ 5081 78               LD A,B
 197+ 5082 32 D4 4F         LD (ANIMITEMNUM),A
 198+ 5085 44               LD B,H
 199+ 5086 4D               LD C,L
 200+ 5087 C9               RET ; BC=size difference in bytes
 201+ 5088              .SIZETOMOVE:
 202+ 5088 D5               PUSH DE
 203+ 5089 2A 10 40         LD HL,(FREEMEMPTR)
 204+ 508C FD 5E 00         LD E,(IY)
 205+ 508F FD 56 01         LD D,(IY+1)
 206+ 5092 AF               XOR A
 207+ 5093 ED 52            SBC HL,DE
 208+ 5095 44               LD B,H
 209+ 5096 4D               LD C,L
 210+ 5097 D1               POP DE
 211+ 5098 C9               RET
 212+ 5099              .DECREASE_COMMON:
 213+ 5099 FD 6E 00         LD L,(IY)
 214+ 509C FD 66 01         LD H,(IY+1)
 215+ 509F AF               XOR A
 216+ 50A0 ED 42            SBC HL,BC
 217+ 50A2 EB               EX DE,HL
 218+ 50A3 C5               PUSH BC
 219+ 50A4 CD 88 50         CALL .SIZETOMOVE
 220+ 50A7 F3               DI
 221+ 50A8 78               LD A,B
 222+ 50A9 B1               OR C
 223+ 50AA 28 08            JR Z,.L1
 224+ 50AC FD 6E 00         LD L,(IY)
 225+ 50AF FD 66 01         LD H,(IY+1)
 226+ 50B2 ED B0            LDIR
 227+ 50B4              .L1:
 228+ 50B4 C1               POP BC
 229+ 50B5 FD 6E 00         LD L,(IY)
 230+ 50B8 FD 66 01         LD H,(IY+1)
 231+ 50BB AF               XOR A
 232+ 50BC ED 42            SBC HL,BC
 233+ 50BE FD 75 00         LD (IY),L
 234+ 50C1 FD 74 01         LD (IY+1),H
 235+ 50C4 C9               RET
 236+ 50C5              .INCREASE_COMMON:
 237+ 50C5 2A 10 40         LD HL,(FREEMEMPTR)
 238+ 50C8 2B               DEC HL
 239+ 50C9 AF               XOR A
 240+ 50CA ED 42            SBC HL,BC
 241+ 50CC EB               EX DE,HL
 242+ 50CD C5               PUSH BC
 243+ 50CE CD 88 50         CALL .SIZETOMOVE
 244+ 50D1 F3               DI
 245+ 50D2 78               LD A,B
 246+ 50D3 B1               OR C
 247+ 50D4 28 06            JR Z,.L2
 248+ 50D6 2A 10 40         LD HL,(FREEMEMPTR)
 249+ 50D9 2B               DEC HL
 250+ 50DA ED B8            LDDR
 251+ 50DC              .L2:
 252+ 50DC C1               POP BC
 253+ 50DD FD 6E 00         LD L,(IY)
 254+ 50E0 FD 66 01         LD H,(IY+1)
 255+ 50E3 09               ADD HL,BC
 256+ 50E4 FD 75 00         LD (IY),L
 257+ 50E7 FD 74 01         LD (IY+1),H
 258+ 50EA C9               RET
 259+ 50EB              ; *******************************************************************************************************
 260+ 50EB
 261+ 50EB              ; *******************************************************************************************************
 262+ 50EB              ; function to handle CALL ANIMITEMPAT basic extension
 263+ 50EB              ; ANIMITEMPAT ( BYTE id,
 264+ 50EB              ;               INT ticks >0,
 265+ 50EB              ;               BYTE pattern,
 266+ 50EB              ;               BYTE color )
 267+ 50EB              ; fills animation item data, returns an error if ID out of bounds
 268+ 50EB              ANIMITEMPAT:
 269+ 50EB                  ; opening (
 270+ 50EB CD CB 65     	CALL CHKCHAR
 271+ 50EE 28           	DB '('
 272+ 50EF              	; get id
 273+ 50EF DD 21 1C 52  	LD IX, GETBYT
 274+ 50F3 CD 59 01     	CALL CALBAS
 275+ 50F6 F5               PUSH AF
 276+ 50F7                  ; check if out of bounds
 277+ 50F7 3C               INC A
 278+ 50F8 4F               LD C,A
 279+ 50F9 3A D4 4F         LD A,(ANIMITEMNUM)
 280+ 50FC B9               CP C
 281+ 50FD DA E3 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 282+ 5100              	; comma
 283+ 5100 CD CB 65     	CALL CHKCHAR
 284+ 5103 2C           	DB ','
 285+ 5104              	; get ticks
 286+ 5104 DD 21 2F 54  	LD IX, FRMQNT
 287+ 5108 CD 59 01     	CALL CALBAS
 288+ 510B 7A               LD A,D
 289+ 510C B3               OR E
 290+ 510D CA E7 65         JP Z, OVERFLOW
 291+ 5110 D5           	PUSH DE
 292+ 5111              	; comma
 293+ 5111 CD CB 65     	CALL CHKCHAR
 294+ 5114 2C           	DB ','
 295+ 5115              	; get pattern
 296+ 5115 DD 21 1C 52  	LD IX, GETBYT
 297+ 5119 CD 59 01     	CALL CALBAS
 298+ 511C F5               PUSH AF
 299+ 511D              	; comma
 300+ 511D CD CB 65     	CALL CHKCHAR
 301+ 5120 2C           	DB ','
 302+ 5121              	; get color
 303+ 5121 DD 21 1C 52  	LD IX, GETBYT
 304+ 5125 CD 59 01     	CALL CALBAS
 305+ 5128 F5               PUSH AF
 306+ 5129              	; ending )
 307+ 5129 CD CB 65     	CALL CHKCHAR
 308+ 512C 29           	DB ')'
 309+ 512D              .ENTRY:
 310+ 512D E5               PUSH HL
 311+ 512E DD E1            POP IX
 312+ 5130 D9               EXX
 313+ 5131 C1               POP BC ; color
 314+ 5132 D1               POP DE ; pattern
 315+ 5133 E1               POP HL ; ticks
 316+ 5134 D9               EXX
 317+ 5135 F1               POP AF
 318+ 5136 CD E9 4F         CALL GETnthANIMITEM
 319+ 5139 E5               PUSH HL
 320+ 513A FD E1            POP IY
 321+ 513C D9               EXX
 322+ 513D FD 36 00 00      LD (IY),0 ; type=0
 323+ 5141 FD 75 01         LD (IY+1),L
 324+ 5144 FD 74 02         LD (IY+2),H
 325+ 5147 FD 72 03         LD (IY+3),D
 326+ 514A FD 70 04         LD (IY+4),B
 327+ 514D
 328+ 514D DD E5            PUSH IX
 329+ 514F E1               POP HL
 330+ 5150 C9               RET
 331+ 5151              ; *******************************************************************************************************
 332+ 5151
 333+ 5151              ; *******************************************************************************************************
 334+ 5151              ; function to handle CALL ANIMITEMPTR basic extension
 335+ 5151              ; ANIMITEMPTR ( BYTE id,
 336+ 5151              ;               INT ticks,
 337+ 5151              ;               INT pointer,
 338+ 5151              ; fills animation item data, returns an error if ID out of bounds
 339+ 5151              ANIMITEMPTR_CMD:
 340+ 5151                  ; opening (
 341+ 5151 CD CB 65     	CALL CHKCHAR
 342+ 5154 28           	DB '('
 343+ 5155              	; get id
 344+ 5155 DD 21 1C 52  	LD IX, GETBYT
 345+ 5159 CD 59 01     	CALL CALBAS
 346+ 515C F5               PUSH AF
 347+ 515D                  ; check if out of bounds
 348+ 515D 3C               INC A
 349+ 515E 4F               LD C,A
 350+ 515F 3A D4 4F         LD A,(ANIMITEMNUM)
 351+ 5162 B9               CP C
 352+ 5163 DA E3 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 353+ 5166              	; comma
 354+ 5166 CD CB 65     	CALL CHKCHAR
 355+ 5169 2C           	DB ','
 356+ 516A              	; get ticks
 357+ 516A DD 21 2F 54  	LD IX, FRMQNT
 358+ 516E CD 59 01     	CALL CALBAS
 359+ 5171 7A               LD A,D
 360+ 5172 B3               OR E
 361+ 5173 CA E7 65         JP Z,OVERFLOW
 362+ 5176 D5           	PUSH DE
 363+ 5177              	; comma
 364+ 5177 CD CB 65     	CALL CHKCHAR
 365+ 517A 2C           	DB ','
 366+ 517B              	; get pointer
 367+ 517B DD 21 2F 54  	LD IX, FRMQNT
 368+ 517F CD 59 01     	CALL CALBAS
 369+ 5182 D5           	PUSH DE
 370+ 5183              	; ending )
 371+ 5183 CD CB 65     	CALL CHKCHAR
 372+ 5186 29           	DB ')'
 373+ 5187              .ENTRY:
 374+ 5187 E5               PUSH HL
 375+ 5188 DD E1            POP IX
 376+ 518A D9               EXX
 377+ 518B D1               POP DE ; pointer
 378+ 518C E1               POP HL ; ticks
 379+ 518D D9               EXX
 380+ 518E F1               POP AF
 381+ 518F CD E9 4F         CALL GETnthANIMITEM
 382+ 5192 E5               PUSH HL
 383+ 5193 FD E1            POP IY
 384+ 5195 D9               EXX
 385+ 5196 FD 36 00 01      LD (IY),1 ; type=1
 386+ 519A FD 75 01         LD (IY+1),L
 387+ 519D FD 74 02         LD (IY+2),H
 388+ 51A0 FD 73 03         LD (IY+3),E
 389+ 51A3 FD 72 04         LD (IY+4),D
 390+ 51A6
 391+ 51A6 DD E5            PUSH IX
 392+ 51A8 E1               POP HL
 393+ 51A9 C9               RET
 394+ 51AA              ; *******************************************************************************************************
 395+ 51AA
 396+ 51AA              ; *******************************************************************************************************
 397+ 51AA              ; function to handle CALL MAXANIMDEFS basic extension
 398+ 51AA              ; MAXANIMDEFS (BYTE number)
 399+ 51AA              ; sets new number and moves memory buffers as needed
 400+ 51AA              MAXANIMDEFS:
 401+ 51AA              	; opening (
 402+ 51AA CD CB 65     	CALL CHKCHAR
 403+ 51AD 28           	DB '('
 404+ 51AE              	; get value
 405+ 51AE DD 21 1C 52  	LD IX, GETBYT
 406+ 51B2 CD 59 01     	CALL CALBAS
 407+ 51B5 F5               PUSH AF
 408+ 51B6              	; ending )
 409+ 51B6 CD CB 65     	CALL CHKCHAR
 410+ 51B9 29           	DB ')'
 411+ 51BA F1               POP AF
 412+ 51BB F3               DI
 413+ 51BC              	; save position
 414+ 51BC E5           	PUSH HL
 415+ 51BD              .ENTRY:
 416+ 51BD 47               LD B,A
 417+ 51BE 3A D7 4F         LD A,(ANIMDEFNUM)
 418+ 51C1 90               SUB B
 419+ 51C2 CA 5C 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 420+ 51C5 FD 21 DB 4F      LD IY,ANIMSPRPTR
 421+ 51C9 FA D5 51         JP M, .INCREASE
 422+ 51CC                  ; new value is lower than previous one
 423+ 51CC CD E0 51         CALL .SIZEDIFF
 424+ 51CF CD 99 50         CALL MAXANIMITEMS.DECREASE_COMMON
 425+ 51D2 C3 4A 50         JP MAXANIMITEMS.E1
 426+ 51D5              .INCREASE:
 427+ 51D5 ED 44            NEG
 428+ 51D7 CD E0 51         CALL .SIZEDIFF
 429+ 51DA CD C5 50         CALL MAXANIMITEMS.INCREASE_COMMON
 430+ 51DD C3 6E 50         JP MAXANIMITEMS.E2
 431+ 51E0              .SIZEDIFF:
 432+ 51E0 26 00            LD H,0
 433+ 51E2 6F               LD L,A
 434+ 51E3 CD B8 64         CALL HLx16
 435+ 51E6 78               LD A,B
 436+ 51E7 32 D7 4F         LD (ANIMDEFNUM),A
 437+ 51EA 44               LD B,H
 438+ 51EB 4D               LD C,L
 439+ 51EC C9               RET ; BC=size difference in bytes
 440+ 51ED              ; *******************************************************************************************************
 441+ 51ED
 442+ 51ED              ; *******************************************************************************************************
 443+ 51ED              ; function to handle CALL ANIMDEF basic extension
 444+ 51ED              ; ANIMITEMPAT ( BYTE id,
 445+ 51ED              ;               BYTE size,
 446+ 51ED              ;               INT[] list )
 447+ 51ED              ; fills animation definition data, returns an error if out of bounds, or invalid type
 448+ 51ED              ANIMDEF:
 449+ 51ED                  ; opening (
 450+ 51ED CD CB 65     	CALL CHKCHAR
 451+ 51F0 28           	DB '('
 452+ 51F1              	; get id
 453+ 51F1 DD 21 1C 52  	LD IX, GETBYT
 454+ 51F5 CD 59 01     	CALL CALBAS
 455+ 51F8 F5               PUSH AF
 456+ 51F9                  ; check if out of bounds
 457+ 51F9 3C               INC A
 458+ 51FA 4F               LD C,A
 459+ 51FB 3A D7 4F         LD A,(ANIMDEFNUM)
 460+ 51FE B9               CP C
 461+ 51FF DA E3 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 462+ 5202              	; comma
 463+ 5202 CD CB 65     	CALL CHKCHAR
 464+ 5205 2C           	DB ','
 465+ 5206              	; get size
 466+ 5206 DD 21 1C 52  	LD IX, GETBYT
 467+ 520A CD 59 01     	CALL CALBAS
 468+ 520D FE 10            CP 16
 469+ 520F D2 E7 65         JP NC, OVERFLOW
 470+ 5212 B7               OR A
 471+ 5213 CA E7 65         JP Z, OVERFLOW
 472+ 5216 F5           	PUSH AF
 473+ 5217              	; comma
 474+ 5217 CD CB 65     	CALL CHKCHAR
 475+ 521A 2C           	DB ','
 476+ 521B              	; get pointer to a list of animation items in integer array format
 477+ 521B                  ; get array pointer
 478+ 521B D1               POP DE
 479+ 521C D5               PUSH DE
 480+ 521D 3E 02            LD A,2
 481+ 521F 06 01            LD B,1
 482+ 5221 CD F8 65         CALL GET_BASIC_ARRAY_DATA_POINTER
 483+ 5224 C5               PUSH BC
 484+ 5225              	; ending )
 485+ 5225 CD CB 65     	CALL CHKCHAR
 486+ 5228 29           	DB ')'
 487+ 5229              .ENTRY:
 488+ 5229 E5               PUSH HL
 489+ 522A DD E1            POP IX
 490+ 522C D1               POP DE ; pointer to INT array
 491+ 522D C1               POP BC ; B=item number
 492+ 522E F1               POP AF ; id
 493+ 522F D5               PUSH DE
 494+ 5230 CD F2 4F         CALL GETnthANIMDEF
 495+ 5233 D1               POP DE
 496+ 5234 70               LD (HL),B
 497+ 5235              .L1:
 498+ 5235 23               INC HL
 499+ 5236 1A               LD A,(DE)
 500+ 5237 13          > INC DE
 500+ 5238 13          > INC DE
 501+ 5239 77               LD (HL),A
 502+ 523A 10 F9            DJNZ .L1
 503+ 523C DD E5            PUSH IX
 504+ 523E E1               POP HL
 505+ 523F C9               RET
 506+ 5240              ; *******************************************************************************************************
 507+ 5240
 508+ 5240              ; *******************************************************************************************************
 509+ 5240              ; function to handle CALL MAXANIMSPRS basic extension
 510+ 5240              ; MAXANIMSPRS (BYTE number)
 511+ 5240              ; sets new number and moves memory buffers as needed
 512+ 5240              MAXANIMSPRS:
 513+ 5240              	; opening (
 514+ 5240 CD CB 65     	CALL CHKCHAR
 515+ 5243 28           	DB '('
 516+ 5244              	; get value
 517+ 5244 DD 21 1C 52  	LD IX, GETBYT
 518+ 5248 CD 59 01     	CALL CALBAS
 519+ 524B F5               PUSH AF
 520+ 524C              	; ending )
 521+ 524C CD CB 65     	CALL CHKCHAR
 522+ 524F 29           	DB ')'
 523+ 5250 F1               POP AF
 524+ 5251 F3               DI
 525+ 5252              	; save position
 526+ 5252 E5           	PUSH HL
 527+ 5253              .ENTRY:
 528+ 5253 47               LD B,A
 529+ 5254 3A DA 4F         LD A,(ANIMSPRNUM)
 530+ 5257 90               SUB B
 531+ 5258 CA 5C 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 532+ 525B FD 21 DE 4F      LD IY,AUTOSGAMPTR
 533+ 525F FA 6B 52         JP M, .INCREASE
 534+ 5262                  ; new value is lower than previous one
 535+ 5262 CD 8C 52         CALL .SIZEDIFF
 536+ 5265 CD 99 50         CALL MAXANIMITEMS.DECREASE_COMMON
 537+ 5268 C3 53 50         JP MAXANIMITEMS.E3
 538+ 526B              .INCREASE:
 539+ 526B ED 44            NEG
 540+ 526D F5               PUSH AF; save difference for later to set active flag to 0 of new entires
 541+ 526E CD 8C 52         CALL .SIZEDIFF
 542+ 5271 CD C5 50         CALL MAXANIMITEMS.INCREASE_COMMON
 543+ 5274 AF               XOR A
 544+ 5275 ED 42            SBC HL,BC ; location of new stuff
 545+ 5277 F1               POP AF
 546+ 5278 C5               PUSH BC
 547+ 5279 47               LD B,A
 548+ 527A 11 08 00         LD DE,8
 549+ 527D E5               PUSH HL
 550+ 527E DD E1            POP IX
 551+ 5280              .L1:
 552+ 5280 DD 36 06 00      LD (IX+6),0 ; active flag
 553+ 5284 DD 19            ADD IX,DE
 554+ 5286 10 F8            DJNZ .L1
 555+ 5288 C1               POP BC
 556+ 5289 C3 75 50         JP MAXANIMITEMS.E4
 557+ 528C              .SIZEDIFF:
 558+ 528C 26 00            LD H,0
 559+ 528E 6F               LD L,A
 560+ 528F CD B9 64         CALL HLx8
 561+ 5292 78               LD A,B
 562+ 5293 32 DA 4F         LD (ANIMSPRNUM),A
 563+ 5296 44               LD B,H
 564+ 5297 4D               LD C,L
 565+ 5298 C9               RET ; BC=size difference in bytes
 566+ 5299              ; *******************************************************************************************************
 567+ 5299
 568+ 5299              ; *******************************************************************************************************
 569+ 5299              ; function to handle CALL ANIMSPRITE basic extension
 570+ 5299              ; ANIMSPRITE ( BYTE id,
 571+ 5299              ;              BYTE sprite_number,
 572+ 5299              ;              BYTE animation_definition_id,
 573+ 5299              ;              BYTE cyclic_flag )
 574+ 5299              ; fills sprite animation data, returns an error if out of bounds, or invalid type
 575+ 5299              ANIMSPRITE:
 576+ 5299                  ; opening (
 577+ 5299 CD CB 65     	CALL CHKCHAR
 578+ 529C 28           	DB '('
 579+ 529D              	; get sprite animation id
 580+ 529D DD 21 1C 52  	LD IX, GETBYT
 581+ 52A1 CD 59 01     	CALL CALBAS
 582+ 52A4 F5               PUSH AF
 583+ 52A5 3C               INC A
 584+ 52A6 4F               LD C,A
 585+ 52A7 3A DA 4F         LD A,(ANIMSPRNUM)
 586+ 52AA B9               CP C
 587+ 52AB DA E3 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 588+ 52AE              	; comma
 589+ 52AE CD CB 65     	CALL CHKCHAR
 590+ 52B1 2C           	DB ','
 591+ 52B2              	; get sprite number
 592+ 52B2 DD 21 1C 52  	LD IX, GETBYT
 593+ 52B6 CD 59 01     	CALL CALBAS
 594+ 52B9 F5               PUSH AF
 595+ 52BA                  ; check if out of bounds
 596+ 52BA FE 20            CP 32
 597+ 52BC D2 E3 65         JP NC, SUBSCRIPT_OUT_OF_RANGE
 598+ 52BF              	; comma
 599+ 52BF CD CB 65     	CALL CHKCHAR
 600+ 52C2 2C           	DB ','
 601+ 52C3              	; get animation definition id
 602+ 52C3 DD 21 1C 52  	LD IX, GETBYT
 603+ 52C7 CD 59 01     	CALL CALBAS
 604+ 52CA F5               PUSH AF
 605+ 52CB 3C               INC A
 606+ 52CC 4F               LD C,A
 607+ 52CD 3A D7 4F         LD A,(ANIMDEFNUM)
 608+ 52D0 B9               CP C
 609+ 52D1 DA E3 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 610+ 52D4              	; comma
 611+ 52D4 CD CB 65     	CALL CHKCHAR
 612+ 52D7 2C           	DB ','
 613+ 52D8              	; get cyclic flag
 614+ 52D8 DD 21 1C 52  	LD IX, GETBYT
 615+ 52DC CD 59 01         CALL CALBAS
 616+ 52DF F5           	PUSH AF
 617+ 52E0              	; ending )
 618+ 52E0 CD CB 65     	CALL CHKCHAR
 619+ 52E3 29           	DB ')'
 620+ 52E4              .ENTRY:
 621+ 52E4 E5               PUSH HL
 622+ 52E5 DD E1            POP IX
 623+ 52E7 D9               EXX
 624+ 52E8 D1               POP DE ; cyclic
 625+ 52E9 C1               POP BC ; animation definition id
 626+ 52EA E1               POP HL ; sprite number
 627+ 52EB D9               EXX
 628+ 52EC F1               POP AF ; sprite animation id
 629+ 52ED CD FE 4F         CALL GETnthSPRANIM
 630+ 52F0 E5               PUSH HL
 631+ 52F1 FD E1            POP IY
 632+ 52F3 D9               EXX
 633+ 52F4 FD 74 00         LD (IY),H
 634+ 52F7 FD 70 04         LD (IY+4),B
 635+ 52FA FD 72 05         LD (IY+5),D
 636+ 52FD                  ;LD (IY+6),0 -- not needed as set in MAXANIMSPRS
 637+ 52FD                  ; following will do preparation for ANIMSTEP situation
 638+ 52FD                  ; current item set to above limit and timer to 1
 639+ 52FD                  ; any call to ANIMSTEP will switch and setup to first item for cyclic
 640+ 52FD FD 36 03 FF      LD (IY+3),255
 641+ 5301 FD 36 01 01      LD (IY+1),1
 642+ 5305 FD 36 02 00      LD (IY+2),0
 643+ 5309                  ; mark as sprite animation
 644+ 5309 FD 36 07 00      LD (IY+7),0
 645+ 530D DD E5            PUSH IX
 646+ 530F E1               POP HL
 647+ 5310 C9               RET
 648+ 5311              ; *******************************************************************************************************
 649+ 5311
 650+ 5311              ; *******************************************************************************************************
 651+ 5311              ; function to handle CALL ANIMCHAR basic extension
 652+ 5311              ; ANIMCHAR ( BYTE id,
 653+ 5311              ;            INT character number 0-767,
 654+ 5311              ;            BYTE animation_definition_id,
 655+ 5311              ;            BYTE cyclic_flag )
 656+ 5311              ; fills sprite animation data, returns an error if out of bounds, or invalid type
 657+ 5311              ANIMCHAR:
 658+ 5311                  ; opening (
 659+ 5311 CD CB 65     	CALL CHKCHAR
 660+ 5314 28           	DB '('
 661+ 5315              	; get sprite animation id
 662+ 5315 DD 21 1C 52  	LD IX, GETBYT
 663+ 5319 CD 59 01     	CALL CALBAS
 664+ 531C F5               PUSH AF
 665+ 531D 3C               INC A
 666+ 531E 4F               LD C,A
 667+ 531F 3A DA 4F         LD A,(ANIMSPRNUM)
 668+ 5322 B9               CP C
 669+ 5323 DA E3 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 670+ 5326              	; comma
 671+ 5326 CD CB 65     	CALL CHKCHAR
 672+ 5329 2C           	DB ','
 673+ 532A              	; get character number
 674+ 532A DD 21 2F 54  	LD IX, FRMQNT
 675+ 532E CD 59 01     	CALL CALBAS
 676+ 5331 D5               PUSH DE
 677+ 5332                  ; check if out of bounds
 678+ 5332 7A               LD A,D
 679+ 5333 FE 03            CP 3
 680+ 5335 D2 E3 65         JP NC, SUBSCRIPT_OUT_OF_RANGE
 681+ 5338              	; comma
 682+ 5338 CD CB 65     	CALL CHKCHAR
 683+ 533B 2C           	DB ','
 684+ 533C              	; get animation definition id
 685+ 533C DD 21 1C 52  	LD IX, GETBYT
 686+ 5340 CD 59 01     	CALL CALBAS
 687+ 5343 F5               PUSH AF
 688+ 5344 3C               INC A
 689+ 5345 4F               LD C,A
 690+ 5346 3A D7 4F         LD A,(ANIMDEFNUM)
 691+ 5349 B9               CP C
 692+ 534A DA E3 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 693+ 534D              	; comma
 694+ 534D CD CB 65     	CALL CHKCHAR
 695+ 5350 2C           	DB ','
 696+ 5351              	; get cyclic flag
 697+ 5351 DD 21 1C 52  	LD IX, GETBYT
 698+ 5355 CD 59 01         CALL CALBAS
 699+ 5358 F5           	PUSH AF
 700+ 5359              	; ending )
 701+ 5359 CD CB 65     	CALL CHKCHAR
 702+ 535C 29           	DB ')'
 703+ 535D              .ENTRY:
 704+ 535D E5               PUSH HL
 705+ 535E DD E1            POP IX
 706+ 5360 D9               EXX
 707+ 5361 D1               POP DE ; cyclic
 708+ 5362 C1               POP BC ; animation definition id
 709+ 5363 E1               POP HL ; character number
 710+ 5364 D9               EXX
 711+ 5365 F1               POP AF ; sprite animation id
 712+ 5366 CD FE 4F         CALL GETnthSPRANIM
 713+ 5369 E5               PUSH HL
 714+ 536A FD E1            POP IY
 715+ 536C D9               EXX
 716+ 536D FD 75 00         LD (IY),L
 717+ 5370 24               INC H ; save character bank+1
 718+ 5371 FD 74 07         LD (IY+7),H
 719+ 5374 FD 70 04         LD (IY+4),B
 720+ 5377 FD 72 05         LD (IY+5),D
 721+ 537A                  ;LD (IY+6),0 -- not needed as set in MAXANIMSPRS
 722+ 537A                  ; following will do preparation for ANIMSTEP situation
 723+ 537A                  ; current item set to above limit and timer to 1
 724+ 537A                  ; any call to ANIMSTEP will switch and setup to first item for cyclic
 725+ 537A FD 36 03 FF      LD (IY+3),255
 726+ 537E FD 36 01 01      LD (IY+1),1
 727+ 5382 FD 36 02 00      LD (IY+2),0
 728+ 5386 DD E5            PUSH IX
 729+ 5388 E1               POP HL
 730+ 5389 C9               RET
 731+ 538A              ; *******************************************************************************************************
 732+ 538A
 733+ 538A              ; *******************************************************************************************************
 734+ 538A              ; function to handle CALL MAXAUTOSGAMS basic extension
 735+ 538A              ; MAXAUTOSGAMS (BYTE number)
 736+ 538A              ; sets new number and moves memory buffers as needed
 737+ 538A              MAXAUTOSGAMS:
 738+ 538A              	; opening (
 739+ 538A CD CB 65     	CALL CHKCHAR
 740+ 538D 28           	DB '('
 741+ 538E              	; get value
 742+ 538E DD 21 1C 52  	LD IX, GETBYT
 743+ 5392 CD 59 01     	CALL CALBAS
 744+ 5395 F5               PUSH AF
 745+ 5396              	; ending )
 746+ 5396 CD CB 65     	CALL CHKCHAR
 747+ 5399 29           	DB ')'
 748+ 539A F1               POP AF
 749+ 539B F3               DI
 750+ 539C              	; save position
 751+ 539C E5           	PUSH HL
 752+ 539D              .ENTRY:
 753+ 539D 47               LD B,A
 754+ 539E 3A DD 4F         LD A,(AUTOSGAMNUM)
 755+ 53A1 90               SUB B
 756+ 53A2 CA 5C 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 757+ 53A5 FD 21 10 40      LD IY,FREEMEMPTR
 758+ 53A9 FA B5 53         JP M, .INCREASE
 759+ 53AC                  ; new value is lower than previous one
 760+ 53AC CD D6 53         CALL .SIZEDIFF
 761+ 53AF CD 99 50         CALL MAXANIMITEMS.DECREASE_COMMON
 762+ 53B2 C3 5C 50         JP MAXANIMITEMS.EXIT
 763+ 53B5              .INCREASE:
 764+ 53B5 ED 44            NEG
 765+ 53B7 F5               PUSH AF; save difference for later to set active flag to 0 of new entires
 766+ 53B8 CD D6 53         CALL .SIZEDIFF
 767+ 53BB CD C5 50         CALL MAXANIMITEMS.INCREASE_COMMON
 768+ 53BE AF               XOR A
 769+ 53BF ED 42            SBC HL,BC ; location of new stuff
 770+ 53C1 F1               POP AF
 771+ 53C2 C5               PUSH BC
 772+ 53C3 47               LD B,A
 773+ 53C4 11 18 00         LD DE,24
 774+ 53C7 E5               PUSH HL
 775+ 53C8 DD E1            POP IX
 776+ 53CA              .L1:
 777+ 53CA DD 36 13 00      LD (IX+19),0 ; active flag
 778+ 53CE DD 19            ADD IX,DE
 779+ 53D0 10 F8            DJNZ .L1
 780+ 53D2 C1               POP BC
 781+ 53D3 C3 5C 50         JP MAXANIMITEMS.EXIT
 782+ 53D6              .SIZEDIFF:
 783+ 53D6 26 00            LD H,0
 784+ 53D8 6F               LD L,A
 785+ 53D9 CD B9 64         CALL HLx8
 786+ 53DC 54               LD D,H
 787+ 53DD 5D               LD E,L
 788+ 53DE 29               ADD HL,HL
 789+ 53DF 19               ADD HL,DE
 790+ 53E0 78               LD A,B
 791+ 53E1 32 DD 4F         LD (AUTOSGAMNUM),A
 792+ 53E4 44               LD B,H
 793+ 53E5 4D               LD C,L
 794+ 53E6 C9               RET ; BC=size difference in bytes
 795+ 53E7              ; *******************************************************************************************************
 796+ 53E7
 797+ 53E7              ; *******************************************************************************************************
 798+ 53E7              ; function to handle CALL AUTOSGAMDEF basic extension
 799+ 53E7              ; AUTOSGAMDEF ( BYTE id,
 800+ 53E7              ;               INT VARIABLE x, INT VARIABLE y,
 801+ 53E7              ;               INT minimum, INT maximum, INT delta,
 802+ 53E7              ;               INT direction =0 horizontal,
 803+ 53E7              ;               INT ticks,
 804+ 53E7              ;               BYTE sprite_group_count,
 805+ 53E7              ;               INT[2][sprite_group_count] VARIABLE sprite_group,
 806+ 53E7              ;               BYTE item_number,
 807+ 53E7              ;               INT[] VARIABLE sprite_animations_negative_direction,
 808+ 53E7              ;               INT[] VARIABLE sprite_animations_positive_direction
 809+ 53E7              AUTOSGAMDEF:
 810+ 53E7                  ; opening (
 811+ 53E7 CD CB 65     	CALL CHKCHAR
 812+ 53EA 28           	DB '('
 813+ 53EB              	; get sprite animation id
 814+ 53EB DD 21 1C 52  	LD IX, GETBYT
 815+ 53EF CD 59 01     	CALL CALBAS
 816+ 53F2 F5               PUSH AF
 817+ 53F3 3C               INC A
 818+ 53F4 4F               LD C,A
 819+ 53F5 3A DD 4F         LD A,(AUTOSGAMNUM)
 820+ 53F8 B9               CP C
 821+ 53F9 DA E3 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 822+ 53FC F1               POP AF
 823+ 53FD E5               PUSH HL
 824+ 53FE CD 0A 50         CALL GETnthAUTOSGAM
 825+ 5401 22 B9 62         LD (BLIT_TMP),HL ; for later
 826+ 5404 E1               POP HL
 827+ 5405              	; comma
 828+ 5405 CD CB 65     	CALL CHKCHAR
 829+ 5408 2C           	DB ','
 830+ 5409              	; get address of the X coordinate variable
 831+ 5409 DD 21 A4 5E  	LD IX, PTRGET
 832+ 540D CD 59 01     	CALL CALBAS
 833+ 5410 DD 2A B9 62  	LD IX,(BLIT_TMP)
 834+ 5414 DD 73 00         LD (IX+0),E
 835+ 5417 DD 72 01         LD (IX+1),D
 836+ 541A              	; comma
 837+ 541A CD CB 65     	CALL CHKCHAR
 838+ 541D 2C           	DB ','
 839+ 541E              	; get address of the Y coordinate variable
 840+ 541E DD 21 A4 5E  	LD IX, PTRGET
 841+ 5422 CD 59 01     	CALL CALBAS
 842+ 5425 DD 2A B9 62  	LD IX,(BLIT_TMP)
 843+ 5429 DD 73 02         LD (IX+2),E
 844+ 542C DD 72 03         LD (IX+3),D
 845+ 542F              	; comma
 846+ 542F CD CB 65     	CALL CHKCHAR
 847+ 5432 2C           	DB ','
 848+ 5433              	; get minimum value
 849+ 5433 DD 21 2F 54  	LD IX, FRMQNT
 850+ 5437 CD 59 01     	CALL CALBAS
 851+ 543A DD 2A B9 62  	LD IX,(BLIT_TMP)
 852+ 543E DD 73 04         LD (IX+4),E
 853+ 5441 DD 72 05         LD (IX+5),D
 854+ 5444              	; comma
 855+ 5444 CD CB 65     	CALL CHKCHAR
 856+ 5447 2C           	DB ','
 857+ 5448              	; get maximum value
 858+ 5448 DD 21 2F 54  	LD IX, FRMQNT
 859+ 544C CD 59 01     	CALL CALBAS
 860+ 544F DD 2A B9 62  	LD IX,(BLIT_TMP)
 861+ 5453 DD 73 06         LD (IX+6),E
 862+ 5456 DD 72 07         LD (IX+7),D
 863+ 5459              	; comma
 864+ 5459 CD CB 65     	CALL CHKCHAR
 865+ 545C 2C           	DB ','
 866+ 545D              	; get delta value
 867+ 545D DD 21 2F 54  	LD IX, FRMQNT
 868+ 5461 CD 59 01     	CALL CALBAS
 869+ 5464 DD 2A B9 62  	LD IX,(BLIT_TMP)
 870+ 5468 DD 73 08         LD (IX+8),E
 871+ 546B DD 72 09         LD (IX+9),D
 872+ 546E              	; comma
 873+ 546E CD CB 65     	CALL CHKCHAR
 874+ 5471 2C           	DB ','
 875+ 5472              	; get direction value
 876+ 5472 DD 21 2F 54  	LD IX, FRMQNT
 877+ 5476 CD 59 01     	CALL CALBAS
 878+ 5479 DD 2A B9 62  	LD IX,(BLIT_TMP)
 879+ 547D DD 73 0A         LD (IX+10),E
 880+ 5480 DD 72 0B         LD (IX+11),D
 881+ 5483              	; comma
 882+ 5483 CD CB 65     	CALL CHKCHAR
 883+ 5486 2C           	DB ','
 884+ 5487              	; get ticks value
 885+ 5487 DD 21 2F 54  	LD IX, FRMQNT
 886+ 548B CD 59 01     	CALL CALBAS
 887+ 548E DD 2A B9 62  	LD IX,(BLIT_TMP)
 888+ 5492 DD 73 14         LD (IX+20),E
 889+ 5495 DD 72 15         LD (IX+21),D
 890+ 5498              	; comma
 891+ 5498 CD CB 65     	CALL CHKCHAR
 892+ 549B 2C           	DB ','
 893+ 549C              	; get sprite group count
 894+ 549C DD 21 1C 52  	LD IX, GETBYT
 895+ 54A0 CD 59 01     	CALL CALBAS
 896+ 54A3 B7               OR A
 897+ 54A4 CA E3 65         JP Z,SUBSCRIPT_OUT_OF_RANGE
 898+ 54A7 DD 2A B9 62  	LD IX,(BLIT_TMP)
 899+ 54AB DD 77 0B         LD (IX+11),A
 900+ 54AE              	; comma
 901+ 54AE CD CB 65     	CALL CHKCHAR
 902+ 54B1 2C           	DB ','
 903+ 54B2              	; get sprite group definition array data pointer
 904+ 54B2 DD 2A B9 62  	LD IX,(BLIT_TMP)
 905+ 54B6 DD 5E 0B         LD E,(IX+11)
 906+ 54B9 16 03        	LD D,3
 907+ 54BB 3E 02        	LD A,2
 908+ 54BD 47           	LD B,A
 909+ 54BE CD F8 65     	CALL GET_BASIC_ARRAY_DATA_POINTER
 910+ 54C1 DD 2A B9 62  	LD IX,(BLIT_TMP)
 911+ 54C5 DD 71 0C     	LD (IX+12),C
 912+ 54C8 DD 70 0D         LD (IX+13),B
 913+ 54CB              	; comma
 914+ 54CB CD CB 65     	CALL CHKCHAR
 915+ 54CE 2C           	DB ','
 916+ 54CF              	; get sprite animation array size
 917+ 54CF DD 21 1C 52  	LD IX,GETBYT
 918+ 54D3 CD 59 01     	CALL CALBAS
 919+ 54D6 DD 2A B9 62  	LD IX,(BLIT_TMP)
 920+ 54DA DD 77 0E         LD (IX+14),A
 921+ 54DD B7               OR A
 922+ 54DE CA E3 65         JP Z,SUBSCRIPT_OUT_OF_RANGE
 923+ 54E1              	; comma
 924+ 54E1 CD CB 65     	CALL CHKCHAR
 925+ 54E4 2C           	DB ','
 926+ 54E5                  ; get array pointer for negative direction
 927+ 54E5 DD 2A B9 62  	LD IX,(BLIT_TMP)
 928+ 54E9 DD 56 0E         LD D,(IX+14)
 929+ 54EC 3E 02            LD A,2
 930+ 54EE 06 01            LD B,1
 931+ 54F0 CD F8 65         CALL GET_BASIC_ARRAY_DATA_POINTER
 932+ 54F3 DD 2A B9 62  	LD IX,(BLIT_TMP)
 933+ 54F7 DD 71 0F         LD (IX+15),C
 934+ 54FA DD 70 10         LD (IX+16),B
 935+ 54FD              	; comma
 936+ 54FD CD CB 65     	CALL CHKCHAR
 937+ 5500 2C           	DB ','
 938+ 5501                  ; get array pointer for positive direction
 939+ 5501 DD 2A B9 62  	LD IX,(BLIT_TMP)
 940+ 5505 DD 56 0E         LD D,(IX+14)
 941+ 5508 3E 02            LD A,2
 942+ 550A 06 01            LD B,1
 943+ 550C CD F8 65         CALL GET_BASIC_ARRAY_DATA_POINTER
 944+ 550F DD 2A B9 62  	LD IX,(BLIT_TMP)
 945+ 5513 DD 71 11         LD (IX+17),C
 946+ 5516 DD 70 12         LD (IX+18),B
 947+ 5519              	; ending )
 948+ 5519 CD CB 65     	CALL CHKCHAR
 949+ 551C 29           	DB ')'
 950+ 551D C9               RET
 951+ 551E              ; *******************************************************************************************************
 952+ 551E
 953+ 551E              ; *******************************************************************************************************
 954+ 551E              ; function to handle CALL AUTOSGAMSTART basic extension
 955+ 551E              ; AUTOSGAMSTART ( BYTE id )
 956+ 551E              AUTOSGAMSTART:
 957+ 551E 3E 01            LD A,1
 958+ 5520              .COMMON:
 959+ 5520 32 4C 55         LD (.SETVALUE+3),A
 960+ 5523                  ; opening (
 961+ 5523 CD CB 65     	CALL CHKCHAR
 962+ 5526 28           	DB '('
 963+ 5527              	; get sprite animation id
 964+ 5527 DD 21 1C 52  	LD IX, GETBYT
 965+ 552B CD 59 01     	CALL CALBAS
 966+ 552E F5               PUSH AF
 967+ 552F 3C               INC A
 968+ 5530 4F               LD C,A
 969+ 5531 3A DD 4F         LD A,(AUTOSGAMNUM)
 970+ 5534 B9               CP C
 971+ 5535 DA E3 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 972+ 5538 F1               POP AF
 973+ 5539 E5               PUSH HL
 974+ 553A CD 0A 50         CALL GETnthAUTOSGAM
 975+ 553D E5               PUSH HL
 976+ 553E DD E1            POP IX
 977+ 5540 E1               POP HL
 978+ 5541 DD E5            PUSH IX
 979+ 5543              	; ending )
 980+ 5543 CD CB 65     	CALL CHKCHAR
 981+ 5546 29           	DB ')'
 982+ 5547
 983+ 5547                  ; so syntax is fine
 984+ 5547 DD E1            POP IX
 985+ 5549              .SETVALUE:
 986+ 5549 DD 36 13 01      LD (IX+19),1 ; active flag
 987+ 554D                  ; set initial timer
 988+ 554D DD 7E 14         LD A,(IX+20)
 989+ 5550 DD 77 16         LD (IX+22),A
 990+ 5553 DD 7E 15         LD A,(IX+21)
 991+ 5556 DD 77 17         LD (IX+23),A
 992+ 5559 C9               RET
 993+ 555A              ; *******************************************************************************************************
 994+ 555A
 995+ 555A              ; *******************************************************************************************************
 996+ 555A              ; function to handle CALL AUTOSGAMSTOP basic extension
 997+ 555A              ; AUTOSGAMSTOP ( BYTE id )
 998+ 555A              AUTOSGAMSTOP:
 999+ 555A AF               XOR A
1000+ 555B 18 C3            JR AUTOSGAMSTART.COMMON
1001+ 555D              ; *******************************************************************************************************
1002+ 555D
1003+ 555D              ; *******************************************************************************************************
1004+ 555D              ; function to handle CALL ANIMSTEP basic extension
1005+ 555D              ; two forms
1006+ 555D              ; ANIMSTEP ( BYTE id )
1007+ 555D              ; or
1008+ 555D              ; ANIMSTEP ( BYTE item_number,
1009+ 555D              ;            INT[] sprite_animations )
1010+ 555D              ANIMSTEP:
1011+ 555D 11 DC 55         LD DE,ANIMSTARTSTOP_COMMON.STEP
1012+ 5560 18 08            JR ANIMSTARTSTOP_COMMON
1013+ 5562              ; *******************************************************************************************************
1014+ 5562              ; *******************************************************************************************************
1015+ 5562              ; function to handle CALL ANIMSTART basic extension
1016+ 5562              ; two forms
1017+ 5562              ; ANIMSTART ( BYTE id )
1018+ 5562              ; or
1019+ 5562              ; ANIMSTART ( BYTE item_number,
1020+ 5562              ;             INT[] sprite_animations )
1021+ 5562              ; sets active flag to 1
1022+ 5562              ANIMSTART:
1023+ 5562 11 CA 55         LD DE,ANIMSTARTSTOP_COMMON.START
1024+ 5565 18 03            JR ANIMSTARTSTOP_COMMON
1025+ 5567              ; *******************************************************************************************************
1026+ 5567              ; *******************************************************************************************************
1027+ 5567              ; function to handle CALL ANIMSTOP basic extension
1028+ 5567              ; two forms
1029+ 5567              ; ANIMSTOP ( BYTE id )
1030+ 5567              ; or
1031+ 5567              ; ANIMSTOP ( BYTE item_number,
1032+ 5567              ;            INT[] sprite_animations )
1033+ 5567              ; sets active flag to 1
1034+ 5567              ANIMSTOP:
1035+ 5567 11 D7 55         LD DE,ANIMSTARTSTOP_COMMON.STOP
1036+ 556A              ; *******************************************************************************************************
1037+ 556A              ANIMSTARTSTOP_COMMON:
1038+ 556A ED 53 C8 55      LD (ANIMSTARTSTOP_COMMON.FN+1),DE
1039+ 556E                  ; opening (
1040+ 556E CD CB 65     	CALL CHKCHAR
1041+ 5571 28           	DB '('
1042+ 5572              	; get sprite animation id or array size
1043+ 5572 DD 21 1C 52  	LD IX,GETBYT
1044+ 5576 CD 59 01     	CALL CALBAS
1045+ 5579 F5               PUSH AF
1046+ 557A                  ; check if comma present
1047+ 557A CD D5 65         CALL GETPREVCHAR
1048+ 557D 23               INC HL
1049+ 557E FE 2C            CP ','
1050+ 5580 28 0E            JR Z,.L1
1051+ 5582 FE 29            CP ')'
1052+ 5584 C2 EF 65         JP NZ,SYNTAX_ERROR
1053+ 5587                  ; ok so single argument variant
1054+ 5587 F1               POP AF
1055+ 5588 E5               PUSH HL
1056+ 5589 F3               DI
1057+ 558A CD B6 55         CALL .SETVALUE
1058+ 558D FB               EI
1059+ 558E E1               POP HL
1060+ 558F C9               RET
1061+ 5590              .L1:
1062+ 5590                  ; get array pointer
1063+ 5590 D1               POP DE
1064+ 5591 D5               PUSH DE
1065+ 5592 3E 02            LD A,2
1066+ 5594 06 01            LD B,1
1067+ 5596 CD F8 65         CALL GET_BASIC_ARRAY_DATA_POINTER
1068+ 5599 C5               PUSH BC
1069+ 559A              	; ending )
1070+ 559A CD CB 65     	CALL CHKCHAR
1071+ 559D 29           	DB ')'
1072+ 559E D1               POP DE ; array pointer
1073+ 559F C1               POP BC ; number of items
1074+ 55A0 78               LD A,B
1075+ 55A1 B7               OR A
1076+ 55A2 CA E3 65         JP Z,SUBSCRIPT_OUT_OF_RANGE
1077+ 55A5 E5               PUSH HL
1078+ 55A6 F3               DI
1079+ 55A7              .L2:
1080+ 55A7 C5               PUSH BC
1081+ 55A8 1A               LD A,(DE)
1082+ 55A9 13          > INC DE
1082+ 55AA 13          > INC DE
1083+ 55AB D5               PUSH DE
1084+ 55AC CD B6 55         CALL .SETVALUE
1085+ 55AF D1               POP DE
1086+ 55B0 C1               POP BC
1087+ 55B1 10 F4            DJNZ .L2
1088+ 55B3 FB               EI
1089+ 55B4 E1               POP HL
1090+ 55B5 C9               RET
1091+ 55B6
1092+ 55B6              .SETVALUE:
1093+ 55B6 47               LD B,A
1094+ 55B7 3C               INC A
1095+ 55B8 4F               LD C,A
1096+ 55B9 3A DA 4F         LD A,(ANIMSPRNUM)
1097+ 55BC B9               CP C
1098+ 55BD DA E3 65         JP C,SUBSCRIPT_OUT_OF_RANGE
1099+ 55C0 78               LD A,B
1100+ 55C1 CD FE 4F         CALL GETnthSPRANIM
1101+ 55C4 E5               PUSH HL
1102+ 55C5 DD E1            POP IX
1103+ 55C7              .FN:
1104+ 55C7 C3 00 00         JP 0
1105+ 55CA              .START:
1106+ 55CA DD 36 06 01      LD (IX+6),1 ; active flag
1107+ 55CE DD 36 03 00      LD (IX+3),0 ; current item
1108+ 55D2 06 00            LD B,0 ; setup timer
1109+ 55D4 C3 5B 56         JP SETUP_ANIM_STEP
1110+ 55D7              .STOP:
1111+ 55D7 DD 36 06 00      LD (IX+6),0 ; active flag
1112+ 55DB C9               RET
1113+ 55DC              .STEP:
1114+ 55DC 06 00            LD B,0
1115+ 55DE C3 FF 55         JP PROCESS_SINGLE_ANIMATION.INACTIVE_TOO
1116+ 55E1              ; *******************************************************************************************************
1117+ 55E1
1118+ 55E1              ; *******************************************************************************************************
1119+ 55E1              ; function processes animations during vblank period
1120+ 55E1              PROCESS_ANIMATIONS:
1121+ 55E1 3A DA 4F         LD A,(ANIMSPRNUM)
1122+ 55E4 B7               OR A
1123+ 55E5 C8               RET Z; no animations defined
1124+ 55E6 47               LD B,A
1125+ 55E7 DD 2A DB 4F      LD IX,(ANIMSPRPTR)
1126+ 55EB              .L1:
1127+ 55EB C5               PUSH BC
1128+ 55EC 06 00            LD B,0 ; normal mode, change on timer expiry only
1129+ 55EE CD FA 55         CALL PROCESS_SINGLE_ANIMATION
1130+ 55F1 11 08 00         LD DE,8
1131+ 55F4 DD 19            ADD IX,DE
1132+ 55F6 C1               POP BC
1133+ 55F7 10 F2            DJNZ .L1
1134+ 55F9 C9               RET
1135+ 55FA              ; *******************************************************************************************************
1136+ 55FA
1137+ 55FA              ; *******************************************************************************************************
1138+ 55FA              ; processes single sprite animation
1139+ 55FA              ; skips inactive ones, but this can be skipped by calling .INACTIVE_TOO entry point
1140+ 55FA              ; on timer expiry goes to next animation item
1141+ 55FA              ; input IX=sprite animation pointer
1142+ 55FA              ; input B=1 force mode, activate animation action regardless of expired timer
1143+ 55FA              PROCESS_SINGLE_ANIMATION:
1144+ 55FA DD 7E 06         LD A,(IX+6); active
1145+ 55FD B7               OR A
1146+ 55FE C8               RET Z ; inactive animation
1147+ 55FF              .INACTIVE_TOO:
1148+ 55FF DD 6E 01         LD L,(IX+1)
1149+ 5602 DD 66 02         LD H,(IX+2) ; HL=end time
1150+ 5605 2B               DEC HL
1151+ 5606 DD 75 01         LD (IX+1),L
1152+ 5609 DD 74 02         LD (IX+2),H
1153+ 560C 7D               LD A,L
1154+ 560D B4               OR H
1155+ 560E 28 06            JR Z,.STEP
1156+ 5610 05               DEC B
1157+ 5611 04               INC B
1158+ 5612 C8               RET Z ; not forced mode, return
1159+ 5613 C3 5B 56         JP SETUP_ANIM_STEP; call function with flag to skip timer setup
1160+ 5616              .STEP:
1161+ 5616 06 00            LD B,0; setup timer
1162+ 5618 DD 34 03         INC (IX+3) ; current animation item
1163+ 561B C3 5B 56         JP SETUP_ANIM_STEP
1164+ 561E              ; *******************************************************************************************************
1165+ 561E
1166+ 561E              ; *******************************************************************************************************
1167+ 561E              ; function will setup sprite animation after current item change
1168+ 561E              ; input A=current animation definition
1169+ 561E              ; input IX=pointer to sprite animation
1170+ 561E              ; input B=1 skip timer setup
1171+ 561E              ; output IY=pointer to animation item
1172+ 561E              ; CF=1 error or non-cyclic animation ended, in both cases set active flag to 0
1173+ 561E              ; basically sets new end time for current animation
1174+ 561E              INIT_CURRENT_ANIMATION:
1175+ 561E CD F2 4F         CALL GETnthANIMDEF
1176+ 5621 DD 7E 03         LD A,(IX+3) ; current animation item
1177+ 5624 BE               CP (HL) ; number of animation items in the animation definition
1178+ 5625 38 0A            JR C,.L3 ; last item not reached
1179+ 5627                  ; last item reached
1180+ 5627 DD 7E 05         LD A,(IX+5) ; cyclic flag
1181+ 562A B7               OR A
1182+ 562B 28 2C            JR Z,.ERROR ; non-cyclic animation
1183+ 562D                  ; cyclic animation, restart
1184+ 562D DD 36 03 00      LD (IX+3),0; current item
1185+ 5631              .L3:
1186+ 5631                  ; HL = animation definition
1187+ 5631 23               INC HL ; skip animation definition size field
1188+ 5632 16 00            LD D,0
1189+ 5634 DD 5E 03         LD E,(IX+3); current item
1190+ 5637 19               ADD HL,DE
1191+ 5638 4E               LD C,(HL) ; current animation item
1192+ 5639 0C               INC C
1193+ 563A 3A D4 4F         LD A,(ANIMITEMNUM)
1194+ 563D B9               CP C
1195+ 563E 38 19            JR C,.ERROR ; invalid animation item, stop animation
1196+ 5640 0D               DEC C
1197+ 5641 79               LD A,C
1198+ 5642 CD E9 4F         CALL GETnthANIMITEM
1199+ 5645 E5               PUSH HL
1200+ 5646 FD E1            POP IY ; IY=animation item
1201+ 5648 05               DEC B
1202+ 5649 28 0C            JR Z,.EXIT
1203+ 564B FD 5E 01         LD E,(IY+1)
1204+ 564E FD 56 02         LD D,(IY+2) ; duration
1205+ 5651 DD 73 01         LD (IX+1),E
1206+ 5654 DD 72 02         LD (IX+2),D
1207+ 5657              .EXIT:
1208+ 5657 AF               XOR A
1209+ 5658 C9               RET
1210+ 5659              .ERROR:
1211+ 5659 37               SCF
1212+ 565A C9               RET
1213+ 565B              ; *******************************************************************************************************
1214+ 565B
1215+ 565B              ; *******************************************************************************************************
1216+ 565B              ; function will display currect item and set up expiry time
1217+ 565B              ; it will also stop the animation if expired
1218+ 565B              ; sets sprite update flag if any changes in sprite data made
1219+ 565B              ; input IX=current sprite animation
1220+ 565B              ; input B=1 skip timer setup
1221+ 565B              SETUP_ANIM_STEP:
1222+ 565B DD 4E 04         LD C,(IX+4) ; animation definition ID
1223+ 565E 0C               INC C
1224+ 565F 3A D7 4F         LD A,(ANIMDEFNUM)
1225+ 5662 B9               CP C
1226+ 5663 30 05            JR NC,.L2
1227+ 5665                  ; given animation item is outside of bounds, deactivate animation
1228+ 5665              .STOPANIM:
1229+ 5665 DD 36 06 00      LD (IX+6),0
1230+ 5669 C9               RET
1231+ 566A              .L2:
1232+ 566A 0D               DEC C
1233+ 566B 79               LD A,C
1234+ 566C CD 1E 56         CALL INIT_CURRENT_ANIMATION
1235+ 566F 38 F4            JR C, .STOPANIM
1236+ 5671 FD 7E 00         LD A,(IY) ; type of animation item
1237+ 5674 B7               OR A
1238+ 5675 28 44            JR Z,.L4 ; change pattern and/or color
1239+ 5677              .PAT:
1240+ 5677                  ; change pattern definition
1241+ 5677                  ; check if sprite or character
1242+ 5677 DD 7E 07         LD A,(IX+7)
1243+ 567A B7               OR A
1244+ 567B 20 58            JR NZ,.CHAR
1245+ 567D DD 7E 00         LD A,(IX) ; sprite number
1246+ 5680 CD 85 4D         CALL GETnthSPRATTR
1247+ 5683 23          > INC HL ; skip y and x
1247+ 5684 23          > INC HL
1247+ 5685 23          > INC HL
1247+ 5686 23          > INC HL
1248+ 5687 7E               LD A,(HL); current pattern
1249+ 5688 26 00            LD H,0
1250+ 568A 6F               LD L,A
1251+ 568B 3A E0 F3         LD A,(REG1SAV)
1252+ 568E E6 02            AND 2
1253+ 5690 20 07            JR NZ,.L6
1254+ 5692                  ; 8x8 sprite
1255+ 5692 CD B9 64         CALL HLx8
1256+ 5695 06 08            LD B,8
1257+ 5697 18 05            JR .L5
1258+ 5699              .L6:
1259+ 5699 CD B7 64         CALL HLx32
1260+ 569C 06 20            LD B,32
1261+ 569E              .L5:
1262+ 569E 3A AF FC         LD A,(SCRMOD)
1263+ 56A1 3D               DEC A
1264+ 56A2 20 06            JR NZ,.L10
1265+ 56A4 ED 5B C5 F3      LD DE,(T32PAT)
1266+ 56A8 18 04            JR .L7
1267+ 56AA              .L10:
1268+ 56AA ED 5B CF F3      LD DE,(GRPPAT)
1269+ 56AE              .L7:
1270+ 56AE 19               ADD HL,DE
1271+ 56AF CD A4 64         CALL SETWRT_LOCAL
1272+ 56B2 FD 6E 03         LD L,(IY+3)
1273+ 56B5 FD 66 04         LD H,(IY+4) ; pointer to sprite pattern data
1274+ 56B8 C3 AF 64         JP BBYTECOPY
1275+ 56BB              .L4:
1276+ 56BB                  ; change pattern and color in sprite attributes table
1277+ 56BB DD 7E 00         LD A,(IX) ; sprite number
1278+ 56BE CD 85 4D         CALL GETnthSPRATTR
1279+ 56C1 23          > INC HL ; skip y and x
1279+ 56C2 23          > INC HL
1279+ 56C3 23          > INC HL
1279+ 56C4 23          > INC HL
1280+ 56C5 FD 7E 03         LD A,(IY+3) ; new pattern
1281+ 56C8 77               LD (HL),A
1282+ 56C9 23          > INC HL
1282+ 56CA 23          > INC HL
1283+ 56CB FD 7E 04         LD A,(IY+4) ; new color
1284+ 56CE 77               LD (HL),A
1285+ 56CF 2A 7D 4D         LD HL,(SPRATR_UPDATE_FLAG)
1286+ 56D2 36 01            LD (HL),1
1287+ 56D4 C9               RET
1288+ 56D5              .CHAR:
1289+ 56D5 DD 6E 00         LD L,(IX)
1290+ 56D8 3D               DEC A
1291+ 56D9 67               LD H,A
1292+ 56DA CD B9 64         CALL HLx8
1293+ 56DD 3A AF FC         LD A,(SCRMOD)
1294+ 56E0 3D               DEC A
1295+ 56E1 20 06            JR NZ,.L8
1296+ 56E3 ED 5B C1 F3      LD DE,(T32CGP)
1297+ 56E7 18 04            JR .L9
1298+ 56E9              .L8:
1299+ 56E9 ED 5B CB F3      LD DE,(GRPCGP)
1300+ 56ED              .L9:
1301+ 56ED 06 08            LD B,8
1302+ 56EF 18 BD            JR .L7
1303+ 56F1              ; *******************************************************************************************************
1304+ 56F1
# file closed: asm\ANIMATION.asm
 123  56F1               INCLUDE "SGAM.asm"
# file opened: asm\SGAM.asm
   1+ 56F1              ; Sprite Group Animate and Move
   2+ 56F1
   3+ 56F1              ; *******************************************************************************************************
   4+ 56F1              ; shared function to process a list of animations
   5+ 56F1              ; input B=list size
   6+ 56F1              ; input DE=list pointer
   7+ 56F1              SGAM_PROCESS_ANIM_LIST:
   8+ 56F1 21 04 57         LD HL,.STEP
   9+ 56F4 22 C8 55         LD (ANIMSTARTSTOP_COMMON.FN+1),HL
  10+ 56F7              .L1:
  11+ 56F7 C5               PUSH BC
  12+ 56F8 1A               LD A,(DE)
  13+ 56F9 13          > INC DE
  13+ 56FA 13          > INC DE
  14+ 56FB D5               PUSH DE
  15+ 56FC CD B6 55         CALL ANIMSTARTSTOP_COMMON.SETVALUE
  16+ 56FF D1               POP DE
  17+ 5700 C1               POP BC
  18+ 5701 10 F4            DJNZ .L1
  19+ 5703 C9           	RET
  20+ 5704              .STEP:
  21+ 5704 06 01            LD B,1
  22+ 5706 C3 FF 55         JP PROCESS_SINGLE_ANIMATION.INACTIVE_TOO
  23+ 5709              ; *******************************************************************************************************
  24+ 5709
  25+ 5709              ; *******************************************************************************************************
  26+ 5709              ; function to handle CALL SGAM basic extension
  27+ 5709              ; sets position of a group of sprites as described in SPRGRPMOV
  28+ 5709              ; and manually animate a list of animations
  29+ 5709              ; _SGAM ( INT x,
  30+ 5709              ;	      INT y,
  31+ 5709              ;		  BYTE count,
  32+ 5709              ;		  INT[2][count] data_ptr,
  33+ 5709              ;         BYTE item_number,
  34+ 5709              ;         INT[] sprite_animations )
  35+ 5709              ; will put ram in page 0 also, page 1 is already there
  36+ 5709              SGAM:
  37+ 5709 3A 7C 4D     	LD A, (SPRATR_INIT_STATUS)
  38+ 570C B7           	OR A
  39+ 570D CA EB 65     	JP Z,ILLEGAL_FUNCTION
  40+ 5710              	; opening (
  41+ 5710 CD CB 65     	CALL CHKCHAR
  42+ 5713 28           	DB '('
  43+ 5714              	; get x
  44+ 5714 DD 21 2F 54  	LD IX, FRMQNT
  45+ 5718 CD 59 01     	CALL CALBAS
  46+ 571B ED 53 BD 62  	LD (BLIT_STRUCT),DE
  47+ 571F              	; comma
  48+ 571F CD CB 65     	CALL CHKCHAR
  49+ 5722 2C           	DB ','
  50+ 5723              	; get y
  51+ 5723 DD 21 2F 54  	LD IX, FRMQNT
  52+ 5727 CD 59 01     	CALL CALBAS
  53+ 572A ED 53 BF 62  	LD (BLIT_STRUCT+2),DE
  54+ 572E              	; comma
  55+ 572E CD CB 65     	CALL CHKCHAR
  56+ 5731 2C           	DB ','
  57+ 5732              	; get count
  58+ 5732 DD 21 1C 52  	LD IX, GETBYT
  59+ 5736 CD 59 01     	CALL CALBAS
  60+ 5739 B7               OR A
  61+ 573A CA E3 65         JP Z,SUBSCRIPT_OUT_OF_RANGE
  62+ 573D 32 C1 62     	LD (BLIT_STRUCT+4),A
  63+ 5740              	; comma
  64+ 5740 CD CB 65     	CALL CHKCHAR
  65+ 5743 2C           	DB ','
  66+ 5744              	; get sprite group definition array data pointer
  67+ 5744 3A C1 62         LD A,(BLIT_STRUCT+4)
  68+ 5747 5F           	LD E,A
  69+ 5748 16 03        	LD D,3
  70+ 574A 3E 02        	LD A,2
  71+ 574C 47           	LD B,A
  72+ 574D CD F8 65     	CALL GET_BASIC_ARRAY_DATA_POINTER
  73+ 5750 ED 43 C2 62  	LD (BLIT_STRUCT+5),BC
  74+ 5754              	; comma
  75+ 5754 CD CB 65     	CALL CHKCHAR
  76+ 5757 2C           	DB ','
  77+ 5758              	; get sprite animation array size
  78+ 5758 DD 21 1C 52  	LD IX,GETBYT
  79+ 575C CD 59 01     	CALL CALBAS
  80+ 575F 32 C4 62         LD (BLIT_STRUCT+7),A
  81+ 5762 B7               OR A
  82+ 5763 CA E3 65         JP Z,SUBSCRIPT_OUT_OF_RANGE
  83+ 5766              	; comma
  84+ 5766 CD CB 65     	CALL CHKCHAR
  85+ 5769 2C           	DB ','
  86+ 576A                  ; get array pointer
  87+ 576A 3A C4 62         LD A,(BLIT_STRUCT+7)
  88+ 576D 57               LD D,A
  89+ 576E 3E 02            LD A,2
  90+ 5770 06 01            LD B,1
  91+ 5772 CD F8 65         CALL GET_BASIC_ARRAY_DATA_POINTER
  92+ 5775 ED 43 C5 62      LD (BLIT_STRUCT+8),BC
  93+ 5779              	; ending )
  94+ 5779 CD CB 65     	CALL CHKCHAR
  95+ 577C 29           	DB ')'
  96+ 577D              .ENTRY:
  97+ 577D E5               PUSH HL
  98+ 577E F3               DI
  99+ 577F
 100+ 577F              	; enable page 0
 101+ 577F FD 21 86 57  	LD IY, .RET
 102+ 5783 C3 7D 65     	JP ENABLE_PAGE0
 103+ 5786              .RET:
 104+ 5786 D9               EXX
 105+ 5787 ED 5B BD 62      LD DE,(BLIT_STRUCT) ; initial x
 106+ 578B ED 4B BF 62      LD BC,(BLIT_STRUCT+2) ; initial y
 107+ 578F D9               EXX
 108+ 5790 2A C2 62         LD HL,(BLIT_STRUCT+5) ; pointer to data
 109+ 5793 3A C1 62         LD A,(BLIT_STRUCT+4) ; number of entries
 110+ 5796 47               LD B,A
 111+ 5797 CD C2 4F         CALL SPRGRPMOV.UPDATE_LOC
 112+ 579A
 113+ 579A 3A C4 62         LD A,(BLIT_STRUCT+7) ; anim number
 114+ 579D 47               LD B,A
 115+ 579E ED 5B C5 62      LD DE,(BLIT_STRUCT+8) ; anim list
 116+ 57A2 CD F1 56     	CALL SGAM_PROCESS_ANIM_LIST
 117+ 57A5
 118+ 57A5 D1               POP DE
 119+ 57A6 C1               POP BC
 120+ 57A7 CD F4 64         CALL RESTORE_PAGE_INFO
 121+ 57AA FB               EI
 122+ 57AB E1               POP HL
 123+ 57AC C9               RET
 124+ 57AD              ; *******************************************************************************************************
 125+ 57AD
 126+ 57AD              ; *******************************************************************************************************
 127+ 57AD              ; handles automatic move and animate sprite groups during interrupt
 128+ 57AD              PROCESS_AUTOSGAMS:
 129+ 57AD 3A DD 4F     	LD A,(AUTOSGAMNUM)
 130+ 57B0 B7           	OR A
 131+ 57B1 C8           	RET Z
 132+ 57B2 47           	LD B,A
 133+ 57B3 DD 2A DE 4F  	LD IX,(AUTOSGAMPTR)
 134+ 57B7              .L1:
 135+ 57B7 C5           	PUSH BC
 136+ 57B8 DD 7E 13     	LD A,(IX+19) ; active flag
 137+ 57BB B7           	OR A
 138+ 57BC 28 28        	JR Z,.LOOPEND
 139+ 57BE              	; active, check timer
 140+ 57BE DD 6E 16     	LD L,(IX+22)
 141+ 57C1 DD 66 17     	LD H,(IX+23) ; timer
 142+ 57C4 2B           	DEC HL
 143+ 57C5 7C           	LD A,H
 144+ 57C6 B5           	OR L
 145+ 57C7 28 08        	JR Z,.L2
 146+ 57C9              	; not expired
 147+ 57C9 DD 75 16     	LD (IX+22),L
 148+ 57CC DD 74 17     	LD (IX+23),H
 149+ 57CF 18 15        	JR .LOOPEND
 150+ 57D1              .L2:
 151+ 57D1              	; expired, process
 152+ 57D1
 153+ 57D1                  ; set initial timer
 154+ 57D1 DD 7E 14         LD A,(IX+20)
 155+ 57D4 DD 77 16         LD (IX+22),A
 156+ 57D7 DD 7E 15         LD A,(IX+21)
 157+ 57DA DD 77 17         LD (IX+23),A
 158+ 57DD
 159+ 57DD CD EF 57     	CALL .MOVE
 160+ 57E0 CD 5A 58     	CALL .UPDATELOC
 161+ 57E3 CD 7F 58     	CALL .PROCESS_ANIM_LIST
 162+ 57E6
 163+ 57E6              .LOOPEND:
 164+ 57E6 11 18 00     	LD DE,24
 165+ 57E9 DD 19        	ADD IX,DE
 166+ 57EB C1           	POP BC
 167+ 57EC 10 C9        	DJNZ .L1
 168+ 57EE C9           	RET
 169+ 57EF
 170+ 57EF              .MOVE:
 171+ 57EF              	; process movement
 172+ 57EF DD 7E 0A     	LD A,(IX+10) ; direction
 173+ 57F2 B7           	OR A
 174+ 57F3 28 08        	JR Z, .MOVE_L1
 175+ 57F5              	; vertical
 176+ 57F5 DD 6E 02     	LD L,(IX+2)
 177+ 57F8 DD 66 03     	LD H,(IX+3) ; vertical variable pointer
 178+ 57FB 18 06        	JR .MOVE_L2
 179+ 57FD              .MOVE_L1:
 180+ 57FD              	; horizontal
 181+ 57FD DD 6E 00     	LD L,(IX+0)
 182+ 5800 DD 66 01     	LD H,(IX+1) ; horizontal variable pointer
 183+ 5803              .MOVE_L2:
 184+ 5803 E5           	PUSH HL
 185+ 5804 FD E1        	POP IY
 186+ 5806 FD 6E 00     	LD L,(IY+0)
 187+ 5809 FD 66 01     	LD H,(IY+1)
 188+ 580C DD 5E 08     	LD E,(IX+8)
 189+ 580F DD 56 09     	LD D,(IX+9) ; delta value
 190+ 5812 19           	ADD HL,DE
 191+ 5813 E5           	PUSH HL
 192+ 5814 DD 5E 04     	LD E,(IX+4)
 193+ 5817 DD 56 05     	LD D,(IX+5) ; minimum value
 194+ 581A A7           	AND A
 195+ 581B ED 52        	SBC HL,DE
 196+ 581D FA 37 58     	JP M,.MOVE_L3 ; below minimum
 197+ 5820 E1           	POP HL
 198+ 5821 E5           	PUSH HL
 199+ 5822 DD 5E 06     	LD E,(IX+6)
 200+ 5825 DD 56 07     	LD D,(IX+7) ; maximum value
 201+ 5828 EB           	EX DE,HL
 202+ 5829 A7           	AND A
 203+ 582A ED 52        	SBC HL,DE
 204+ 582C FA 3F 58     	JP M,.MOVE_L4 ; above maximum
 205+ 582F E1           	POP HL
 206+ 5830              	; within bounds
 207+ 5830              .MOVE_L5:
 208+ 5830 FD 75 00     	LD (IY+0),L
 209+ 5833 FD 74 01     	LD (IY+1),H
 210+ 5836 C9           	RET
 211+ 5837              .MOVE_L3:
 212+ 5837 E1           	POP HL
 213+ 5838 CD 4B 58     	CALL .INVERSE_DELTA
 214+ 583B 6B           	LD L,E
 215+ 583C 62           	LD H,D
 216+ 583D 18 F1        	JR .MOVE_L5
 217+ 583F              .MOVE_L4:
 218+ 583F E1           	POP HL
 219+ 5840 CD 4B 58     	CALL .INVERSE_DELTA
 220+ 5843 DD 6E 06     	LD L,(IX+6)
 221+ 5846 DD 66 07     	LD H,(IX+7) ; maximum
 222+ 5849 18 E5        	JR .MOVE_L5
 223+ 584B              .INVERSE_DELTA:
 224+ 584B AF           	XOR A
 225+ 584C DD 96 08     	SUB (IX+8)
 226+ 584F DD 77 08     	LD (IX+8),A
 227+ 5852 9F           	SBC A,A
 228+ 5853 DD 96 09     	SUB (IX+9)
 229+ 5856 DD 77 09     	LD (IX+9),A
 230+ 5859 C9           	RET
 231+ 585A
 232+ 585A              .UPDATELOC:
 233+ 585A DD E5        	PUSH IX
 234+ 585C D9           	EXX
 235+ 585D DD 6E 00     	LD L,(IX+0)
 236+ 5860 DD 66 01     	LD H,(IX+1)
 237+ 5863 5E           	LD E,(HL)
 238+ 5864 23           	INC HL
 239+ 5865 56           	LD D,(HL)
 240+ 5866 DD 6E 02     	LD L,(IX+2)
 241+ 5869 DD 66 03     	LD H,(IX+3)
 242+ 586C 4E           	LD C,(HL)
 243+ 586D 23           	INC HL
 244+ 586E 46           	LD B,(HL)
 245+ 586F D9           	EXX
 246+ 5870 DD 6E 0C     	LD L,(IX+12)
 247+ 5873 DD 66 0D     	LD H,(IX+13) ; pointer to sprite group data
 248+ 5876 DD 46 0B     	LD B,(IX+11) ; sprite group size
 249+ 5879 CD C2 4F     	CALL SPRGRPMOV.UPDATE_LOC
 250+ 587C DD E1        	POP IX
 251+ 587E C9           	RET
 252+ 587F
 253+ 587F              .PROCESS_ANIM_LIST:
 254+ 587F DD E5        	PUSH IX
 255+ 5881 DD 46 0E         LD B,(IX+14) ; anim list size
 256+ 5884 DD CB 09 7E  	BIT 7,(IX+9)
 257+ 5888 28 08        	JR Z,.PROCESS_ANIM_LIST_L1
 258+ 588A              	; negative direction
 259+ 588A DD 5E 0F     	LD E,(IX+15)
 260+ 588D DD 56 10     	LD D,(IX+16)
 261+ 5890 18 06        	JR .PROCESS_ANIM_LIST_L2
 262+ 5892              .PROCESS_ANIM_LIST_L1:
 263+ 5892              	; positive direction
 264+ 5892 DD 5E 11     	LD E,(IX+17)
 265+ 5895 DD 56 12     	LD D,(IX+18)
 266+ 5898              .PROCESS_ANIM_LIST_L2:
 267+ 5898 CD F1 56     	CALL SGAM_PROCESS_ANIM_LIST
 268+ 589B DD E1        	POP IX
 269+ 589D C9           	RET
 270+ 589E              ; *******************************************************************************************************
 271+ 589E
# file closed: asm\SGAM.asm
 124  589E               ENDIF
 125  589E
 126  589E               IF (RAM_CMDS == 1)
 127  589E               INCLUDE "MEMORY.asm"
# file opened: asm\MEMORY.asm
   1+ 589E              ; *******************************************************************************************************
   2+ 589E              ; function to handle CALL MEMCPY basic extension
   3+ 589E              ; _MEMCPY ( INT source,
   4+ 589E              ;			INT destination,
   5+ 589E              ;			INT count,
   6+ 589E              ; will put ram in page 0 also, page 1 is already there
   7+ 589E              MEMCPY:
   8+ 589E              	; opening (
   9+ 589E CD CB 65     	CALL CHKCHAR
  10+ 58A1 28           	DB '('
  11+ 58A2              	; get source address
  12+ 58A2 DD 21 2F 54  	LD IX, FRMQNT
  13+ 58A6 CD 59 01     	CALL CALBAS
  14+ 58A9 D5           	PUSH DE
  15+ 58AA              	; comma
  16+ 58AA CD CB 65     	CALL CHKCHAR
  17+ 58AD 2C           	DB ','
  18+ 58AE              	; get destination address
  19+ 58AE DD 21 2F 54  	LD IX, FRMQNT
  20+ 58B2 CD 59 01     	CALL CALBAS
  21+ 58B5 D5           	PUSH DE
  22+ 58B6              	; comma
  23+ 58B6 CD CB 65     	CALL CHKCHAR
  24+ 58B9 2C           	DB ','
  25+ 58BA              	; get length
  26+ 58BA DD 21 2F 54  	LD IX, FRMQNT
  27+ 58BE CD 59 01     	CALL CALBAS
  28+ 58C1 D5           	PUSH DE
  29+ 58C2              	; ending )
  30+ 58C2 CD CB 65     	CALL CHKCHAR
  31+ 58C5 29           	DB ')'
  32+ 58C6
  33+ 58C6              	; save position
  34+ 58C6 E5           	PUSH HL
  35+ 58C7 DD E1        	POP IX
  36+ 58C9
  37+ 58C9 C1           	POP BC ; count
  38+ 58CA D1           	POP DE ; destination
  39+ 58CB E1           	POP HL ; source
  40+ 58CC D9           	EXX
  41+ 58CD              	; enable page 0
  42+ 58CD F3           	DI
  43+ 58CE FD 21 D5 58  	LD IY, .RET
  44+ 58D2 C3 7D 65     	JP ENABLE_PAGE0
  45+ 58D5              .RET:
  46+ 58D5 FB           	EI
  47+ 58D6 D9           	EXX
  48+ 58D7 ED B0        	LDIR
  49+ 58D9 D1               POP DE
  50+ 58DA C1               POP BC
  51+ 58DB CD F4 64         CALL RESTORE_PAGE_INFO
  52+ 58DE DD E5        	PUSH IX
  53+ 58E0 E1           	POP HL
  54+ 58E1 C9           	RET
  55+ 58E2              ; *******************************************************************************************************
  56+ 58E2
  57+ 58E2              ; *******************************************************************************************************
  58+ 58E2              ; function to handle CALL FILRAM basic extension
  59+ 58E2              ; FILRAM ( INT start address,
  60+ 58E2              ;		   INT count,
  61+ 58E2              ;		   BYTE value )
  62+ 58E2              ; will put ram in page 0 also, page 1 is already there
  63+ 58E2              FILRAM:
  64+ 58E2              	; opening (
  65+ 58E2 CD CB 65     	CALL CHKCHAR
  66+ 58E5 28           	DB '('
  67+ 58E6              	; get start address
  68+ 58E6 DD 21 2F 54  	LD IX, FRMQNT
  69+ 58EA CD 59 01     	CALL CALBAS
  70+ 58ED D5           	PUSH DE
  71+ 58EE              	; comma
  72+ 58EE CD CB 65     	CALL CHKCHAR
  73+ 58F1 2C           	DB ','
  74+ 58F2              	; get count
  75+ 58F2 DD 21 2F 54  	LD IX, FRMQNT
  76+ 58F6 CD 59 01     	CALL CALBAS
  77+ 58F9 D5           	PUSH DE
  78+ 58FA              	; comma
  79+ 58FA CD CB 65     	CALL CHKCHAR
  80+ 58FD 2C           	DB ','
  81+ 58FE              	; get value
  82+ 58FE DD 21 1C 52  	LD IX, GETBYT
  83+ 5902 CD 59 01     	CALL CALBAS
  84+ 5905 F5           	PUSH AF
  85+ 5906              	; ending )
  86+ 5906 CD CB 65     	CALL CHKCHAR
  87+ 5909 29           	DB ')'
  88+ 590A
  89+ 590A              	; save position
  90+ 590A E5           	PUSH HL
  91+ 590B DD E1        	POP IX
  92+ 590D
  93+ 590D D1           	POP DE ; actually AF
  94+ 590E C1           	POP BC ; count
  95+ 590F E1           	POP HL ; start address
  96+ 5910 78           	LD A, B
  97+ 5911 B7           	OR A
  98+ 5912 20 0A        	JR NZ, .L1 ; >=256 bytes to fill
  99+ 5914 B1           	OR C
 100+ 5915 28 1A        	JR Z, .EXIT ; 0 bytes to fill, skip
 101+ 5917 79           	LD A, C
 102+ 5918 3D           	DEC A
 103+ 5919 20 03        	JR NZ, .L1 ; ; >1 byte to fill
 104+ 591B              	; one byte to fill
 105+ 591B 72           	LD (HL), D
 106+ 591C 18 13        	JR .EXIT
 107+ 591E              .L1:
 108+ 591E D9           	EXX
 109+ 591F              	; enable page 0
 110+ 591F F3           	DI
 111+ 5920 FD 21 27 59  	LD IY, .RET
 112+ 5924 C3 7D 65     	JP ENABLE_PAGE0
 113+ 5927              .RET:
 114+ 5927 FB           	EI
 115+ 5928 D9           	EXX
 116+ 5929 CD 35 59     	CALL .FILLVALUE
 117+ 592C D1               POP DE
 118+ 592D C1               POP BC
 119+ 592E CD F4 64         CALL RESTORE_PAGE_INFO
 120+ 5931              .EXIT:
 121+ 5931 DD E5        	PUSH IX
 122+ 5933 E1           	POP HL
 123+ 5934 C9           	RET
 124+ 5935
 125+ 5935              .FILLVALUE:
 126+ 5935 72               LD (HL), D
 127+ 5936 54               LD D, H
 128+ 5937 5D               LD E, L
 129+ 5938 13               INC DE
 130+ 5939 0B               DEC BC
 131+ 593A ED B0            LDIR
 132+ 593C C9               RET
 133+ 593D              ; *******************************************************************************************************
 134+ 593D
# file closed: asm\MEMORY.asm
 128  593D               ENDIF
 129  593D
 130  593D               IF (SOUND_CMDS == 1)
 131  593D               INCLUDE "SOUND.asm"
# file opened: asm\SOUND.asm
   1+ 593D              MUSIC_INIT_STATUS:
   2+ 593D 00            DB 0
   3+ 593E              SFX_INIT_STATUS:
   4+ 593E 00            DB 0
   5+ 593F              SOUND_ENABLED:
   6+ 593F 00            DB 0
   7+ 5940
   8+ 5940              ; *******************************************************************************************************
   9+ 5940              ; function to handle CALL SNDPLYINIT basic extension
  10+ 5940              ; initializes sound player
  11+ 5940              ; _SNDPLYINIT ( INT music_offset,
  12+ 5940              ;				INT sfx_offset, can be -1 if no SFX
  13+ 5940              ; will put ram in page 0 also, page 1 is already there
  14+ 5940              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
  15+ 5940              SNDPLYINIT:
  16+ 5940              	; opening (
  17+ 5940 CD CB 65     	CALL CHKCHAR
  18+ 5943 28           	DB '('
  19+ 5944              	; get music address
  20+ 5944 DD 21 2F 54  	LD IX, FRMQNT
  21+ 5948 CD 59 01     	CALL CALBAS
  22+ 594B D5           	PUSH DE
  23+ 594C              	; comma
  24+ 594C CD CB 65     	CALL CHKCHAR
  25+ 594F 2C           	DB ','
  26+ 5950              	; get sfx address
  27+ 5950 DD 21 2F 54  	LD IX, FRMQNT
  28+ 5954 CD 59 01     	CALL CALBAS
  29+ 5957 D5           	PUSH DE
  30+ 5958              	; ending )
  31+ 5958 CD CB 65     	CALL CHKCHAR
  32+ 595B 29           	DB ')'
  33+ 595C
  34+ 595C                  ; save position in BASIC text
  35+ 595C 44           	LD B, H
  36+ 595D 4D           	LD C, L
  37+ 595E
  38+ 595E              	; pop LDIR parameters and store away for later
  39+ 595E D1           	POP DE ; sfx address
  40+ 595F E1           	POP HL ; music address
  41+ 5960 C5           	PUSH BC ; basic text location
  42+ 5961 D9           	EXX
  43+ 5962 FD 21 69 59  	LD IY, .RET
  44+ 5966 C3 7D 65     	JP ENABLE_PAGE0
  45+ 5969              .RET:
  46+ 5969 D9           	EXX
  47+ 596A
  48+ 596A D5           	PUSH DE
  49+ 596B AF           	XOR A
  50+ 596C              	; HL = music location
  51+ 596C CD 62 41     	CALL PLY_AKG_INIT
  52+ 596F 3E 01        	LD A, 1
  53+ 5971 32 3D 59     	LD (MUSIC_INIT_STATUS), A
  54+ 5974
  55+ 5974 E1           	POP HL ; SFX
  56+ 5975              	; check if SFX address -1
  57+ 5975 23           	INC HL
  58+ 5976 7D           	LD A, L
  59+ 5977 B4           	OR H
  60+ 5978 28 09        	JR Z,.L1
  61+ 597A 2B           	DEC HL
  62+ 597B CD 1D 40     	CALL PLY_AKG_INITSOUNDEFFECTS
  63+ 597E 3E 01        	LD A, 1
  64+ 5980 32 3E 59     	LD (SFX_INIT_STATUS), A
  65+ 5983              .L1:
  66+ 5983 D1               POP DE
  67+ 5984 C1               POP BC
  68+ 5985 CD F4 64         CALL RESTORE_PAGE_INFO
  69+ 5988
  70+ 5988 E1           	POP HL
  71+ 5989 C9           	RET
  72+ 598A              ; *******************************************************************************************************
  73+ 598A
  74+ 598A              ; *******************************************************************************************************
  75+ 598A              ; function to handle CALL SNDPLYON basic extension
  76+ 598A              ; enables sound player
  77+ 598A              ; _SNDPLYON
  78+ 598A              ; sets SOUND_ENABLED variable to 1 if init call was done
  79+ 598A              ; if not throws out of data error
  80+ 598A              SNDPLYON:
  81+ 598A 3A 3D 59     	LD A, (MUSIC_INIT_STATUS)
  82+ 598D B7           	OR A
  83+ 598E 20 05        	JR NZ, .L1
  84+ 5990              	; player not initialized, throw error
  85+ 5990 1E 04        	LD E, 04 ; Out of DATA
  86+ 5992 C3 F1 65     	JP THROW_ERROR
  87+ 5995              .L1:
  88+ 5995 32 3F 59     	LD (SOUND_ENABLED), A
  89+ 5998              	; disable key click
  90+ 5998 AF           	XOR A
  91+ 5999 32 DB F3     	LD (CLIKSW), A
  92+ 599C C9           	RET
  93+ 599D              ; *******************************************************************************************************
  94+ 599D
  95+ 599D              ; *******************************************************************************************************
  96+ 599D              ; function to handle CALL SNDPLYOFF basic extension
  97+ 599D              ; disables sound player
  98+ 599D              ; _SNDPLYOFF
  99+ 599D              ; sets SOUND_ENABLED variable to 0
 100+ 599D              ; calls AKG to stop music and SFX on all channels if initialized
 101+ 599D              SNDPLYOFF:
 102+ 599D 3A 3F 59     	LD A, (SOUND_ENABLED)
 103+ 59A0 B7           	OR A
 104+ 59A1 C8           	RET Z ; already stopped
 105+ 59A2 AF           	XOR A
 106+ 59A3 32 3F 59     	LD (SOUND_ENABLED), A
 107+ 59A6 E5           	PUSH HL
 108+ 59A7 CD 21 42     	CALL PLY_AKG_STOP
 109+ 59AA 3A 3E 59     	LD A, (SFX_INIT_STATUS)
 110+ 59AD B7           	OR A
 111+ 59AE 28 0E        	JR Z, .EXIT ; SFX not in use
 112+ 59B0 AF           	XOR A
 113+ 59B1 CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
 114+ 59B4 3E 01        	LD A, 1
 115+ 59B6 CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
 116+ 59B9 3E 02        	LD A, 2
 117+ 59BB CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
 118+ 59BE              .EXIT:
 119+ 59BE E1           	POP HL
 120+ 59BF C9           	RET
 121+ 59C0              ; *******************************************************************************************************
 122+ 59C0
 123+ 59C0              ; *******************************************************************************************************
 124+ 59C0              ; function to handle CALL SNDSFX basic extension
 125+ 59C0              ; plays a sound effect
 126+ 59C0              ; _SNDSFX ( BYTE sfx_number, >0
 127+ 59C0              ;			BYTE channel, = 0,1 or 2
 128+ 59C0              ;			BYTE inverted_volume = 0-16, 0 being full volume
 129+ 59C0              ; will put ram in page 0 also, page 1 is already there
 130+ 59C0              ; if sound off throws illegal function call
 131+ 59C0              ; if sfx not initialized, throws out of data
 132+ 59C0              SNDSFX:
 133+ 59C0              	; opening (
 134+ 59C0 CD CB 65     	CALL CHKCHAR
 135+ 59C3 28           	DB '('
 136+ 59C4              	; get sfx_number
 137+ 59C4 DD 21 1C 52  	LD IX, GETBYT
 138+ 59C8 CD 59 01     	CALL CALBAS
 139+ 59CB D5           	PUSH DE
 140+ 59CC              	; comma
 141+ 59CC CD CB 65     	CALL CHKCHAR
 142+ 59CF 2C           	DB ','
 143+ 59D0              	; get sfx address
 144+ 59D0 DD 21 1C 52  	LD IX, GETBYT
 145+ 59D4 CD 59 01     	CALL CALBAS
 146+ 59D7 D5           	PUSH DE
 147+ 59D8              	; comma
 148+ 59D8 CD CB 65     	CALL CHKCHAR
 149+ 59DB 2C           	DB ','
 150+ 59DC              	; get inverted volume
 151+ 59DC DD 21 1C 52  	LD IX, GETBYT
 152+ 59E0 CD 59 01     	CALL CALBAS
 153+ 59E3 D5           	PUSH DE
 154+ 59E4              	; ending )
 155+ 59E4 CD CB 65     	CALL CHKCHAR
 156+ 59E7 29           	DB ')'
 157+ 59E8
 158+ 59E8 3A 3F 59     	LD A, (SOUND_ENABLED)
 159+ 59EB B7           	OR A
 160+ 59EC 20 05        	JR NZ, .L1
 161+ 59EE              	; sound disabled, throw illegal function call
 162+ 59EE 1E 05        	LD E, 5
 163+ 59F0 C3 F1 65     	JP THROW_ERROR
 164+ 59F3              .L1:
 165+ 59F3 3A 3E 59     	LD A, (SFX_INIT_STATUS)
 166+ 59F6 B7           	OR A
 167+ 59F7 20 05        	JR NZ, .L2
 168+ 59F9              	; sfx data not initialized, throw out of data
 169+ 59F9 1E 04        	LD E, 4
 170+ 59FB C3 F1 65     	JP THROW_ERROR
 171+ 59FE              .L2:
 172+ 59FE              	; pop  parameters and store away for later
 173+ 59FE D1           	POP DE ; inverted volume
 174+ 59FF 43           	LD B, E
 175+ 5A00 D1           	POP DE ; channel
 176+ 5A01 4B           	LD C, E
 177+ 5A02 D1           	POP DE
 178+ 5A03 7B           	LD A, E
 179+ 5A04 08           	EX AF, AF'
 180+ 5A05 E5           	PUSH HL ; basic text location
 181+ 5A06 D9           	EXX
 182+ 5A07 FD 21 0E 5A  	LD IY, .RET
 183+ 5A0B C3 7D 65     	JP ENABLE_PAGE0
 184+ 5A0E              .RET:
 185+ 5A0E D9           	EXX
 186+ 5A0F 08           	EX AF, AF'
 187+ 5A10 CD 21 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
 188+ 5A13
 189+ 5A13 D1               POP DE
 190+ 5A14 C1               POP BC
 191+ 5A15 CD F4 64         CALL RESTORE_PAGE_INFO
 192+ 5A18
 193+ 5A18 E1           	POP HL
 194+ 5A19 C9           	RET
 195+ 5A1A              ; *******************************************************************************************************
# file closed: asm\SOUND.asm
 132  5A1A               ENDIF
 133  5A1A
 134  5A1A               IF (VRAM_CMDS == 1)
 135  5A1A               INCLUDE "VRAM.asm"
# file opened: asm\VRAM.asm
   1+ 5A1A              ; *******************************************************************************************************
   2+ 5A1A              ; function to handle CALL FILVRM basic extension
   3+ 5A1A              ; FILVRM ( INT offset,
   4+ 5A1A              ;		   INT count,
   5+ 5A1A              ;		   BYTE value,
   6+ 5A1A              ;		   BYTE wait_vsync) >0 = true
   7+ 5A1A              ; wait_vsync will issue HALT before copying
   8+ 5A1A              FILVRM:
   9+ 5A1A              	; opening (
  10+ 5A1A CD CB 65     	CALL CHKCHAR
  11+ 5A1D 28           	DB '('
  12+ 5A1E              	; get offset address
  13+ 5A1E DD 21 2F 54  	LD IX, FRMQNT
  14+ 5A22 CD 59 01     	CALL CALBAS
  15+ 5A25 D5           	PUSH DE
  16+ 5A26              	; comma
  17+ 5A26 CD CB 65     	CALL CHKCHAR
  18+ 5A29 2C           	DB ','
  19+ 5A2A              	; get count
  20+ 5A2A DD 21 2F 54  	LD IX, FRMQNT
  21+ 5A2E CD 59 01     	CALL CALBAS
  22+ 5A31 D5           	PUSH DE
  23+ 5A32              	; comma
  24+ 5A32 CD CB 65     	CALL CHKCHAR
  25+ 5A35 2C           	DB ','
  26+ 5A36              	; get value
  27+ 5A36 DD 21 1C 52  	LD IX, GETBYT
  28+ 5A3A CD 59 01     	CALL CALBAS
  29+ 5A3D F5           	PUSH AF
  30+ 5A3E              	; comma
  31+ 5A3E CD CB 65     	CALL CHKCHAR
  32+ 5A41 2C           	DB ','
  33+ 5A42              	; get vsync wait
  34+ 5A42 DD 21 1C 52  	LD IX, GETBYT
  35+ 5A46 CD 59 01     	CALL CALBAS
  36+ 5A49 F5           	PUSH AF
  37+ 5A4A              	; ending )
  38+ 5A4A CD CB 65     	CALL CHKCHAR
  39+ 5A4D 29           	DB ')'
  40+ 5A4E
  41+ 5A4E              	; save position
  42+ 5A4E E5           	PUSH HL
  43+ 5A4F DD E1        	POP IX
  44+ 5A51
  45+ 5A51              	; syntax ok
  46+ 5A51              	; wait for vsync if needed
  47+ 5A51 F1           	POP AF
  48+ 5A52 B7           	OR A
  49+ 5A53 28 01        	JR Z, .L1
  50+ 5A55 76           	HALT
  51+ 5A56
  52+ 5A56              .L1:
  53+ 5A56 3E 01        	LD A,1
  54+ 5A58 32 CE 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
  55+ 5A5B F1               POP AF ; value
  56+ 5A5C C1               POP BC ; count
  57+ 5A5D E1               POP HL ; offset
  58+ 5A5E CD 56 00         CALL BIOS_FILVRM
  59+ 5A61 AF           	XOR A
  60+ 5A62 32 CE 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
  61+ 5A65
  62+ 5A65              .L3:
  63+ 5A65 DD E5        	PUSH IX
  64+ 5A67 E1           	POP HL
  65+ 5A68 C9           	RET
  66+ 5A69              ; *******************************************************************************************************
  67+ 5A69
  68+ 5A69              ; *******************************************************************************************************
  69+ 5A69              ; function to handle CALL MEMVRM basic extension
  70+ 5A69              ; copies from RAM to VRAM
  71+ 5A69              ; _MEMVRM ( INT source,
  72+ 5A69              ;			INT destination,
  73+ 5A69              ;			INT count,
  74+ 5A69              ;			BYTE wait_vsync) >0 = true
  75+ 5A69              ; will put ram in page 0 also, page 1 is already there
  76+ 5A69              ; wait_vsync will issue HALT before copying
  77+ 5A69              MEMVRM:
  78+ 5A69              	; opening (
  79+ 5A69 CD CB 65     	CALL CHKCHAR
  80+ 5A6C 28           	DB '('
  81+ 5A6D              	; get source address
  82+ 5A6D DD 21 2F 54  	LD IX, FRMQNT
  83+ 5A71 CD 59 01     	CALL CALBAS
  84+ 5A74 D5           	PUSH DE
  85+ 5A75              	; comma
  86+ 5A75 CD CB 65     	CALL CHKCHAR
  87+ 5A78 2C           	DB ','
  88+ 5A79              	; get destination address
  89+ 5A79 DD 21 2F 54  	LD IX, FRMQNT
  90+ 5A7D CD 59 01     	CALL CALBAS
  91+ 5A80 D5           	PUSH DE
  92+ 5A81              	; comma
  93+ 5A81 CD CB 65     	CALL CHKCHAR
  94+ 5A84 2C           	DB ','
  95+ 5A85              	; get length
  96+ 5A85 DD 21 2F 54  	LD IX, FRMQNT
  97+ 5A89 CD 59 01     	CALL CALBAS
  98+ 5A8C D5           	PUSH DE
  99+ 5A8D              	; comma
 100+ 5A8D CD CB 65     	CALL CHKCHAR
 101+ 5A90 2C           	DB ','
 102+ 5A91              	; get vsync wait
 103+ 5A91 DD 21 1C 52  	LD IX, GETBYT
 104+ 5A95 CD 59 01     	CALL CALBAS
 105+ 5A98 F5           	PUSH AF
 106+ 5A99              	; ending )
 107+ 5A99 CD CB 65     	CALL CHKCHAR
 108+ 5A9C 29           	DB ')'
 109+ 5A9D
 110+ 5A9D                  ; save position in BASIC text
 111+ 5A9D E5           	PUSH HL
 112+ 5A9E DD E1        	POP IX
 113+ 5AA0
 114+ 5AA0 F1           	POP AF ; wait vsync
 115+ 5AA1 B7           	OR A
 116+ 5AA2 28 02        	JR Z, .L1
 117+ 5AA4 76           	HALT
 118+ 5AA5 F3           	DI
 119+ 5AA6              .L1:
 120+ 5AA6              	; pop LDIR parameters and store away for later
 121+ 5AA6 C1           	POP BC ; count
 122+ 5AA7 D1           	POP DE ; vram destination
 123+ 5AA8 E1           	POP HL ; ram source
 124+ 5AA9 D9           	EXX
 125+ 5AAA FD 21 B1 5A   	LD IY, .RET
 126+ 5AAE C3 7D 65     	JP ENABLE_PAGE0
 127+ 5AB1              .RET:
 128+ 5AB1 FB           	EI
 129+ 5AB2 D9           	EXX
 130+ 5AB3 3E 01        	LD A,1
 131+ 5AB5 32 CE 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 132+ 5AB8 CD C8 5A     	CALL .LDIRVM
 133+ 5ABB AF           	XOR A
 134+ 5ABC 32 CE 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 135+ 5ABF D1               POP DE
 136+ 5AC0 C1               POP BC
 137+ 5AC1 CD F4 64         CALL RESTORE_PAGE_INFO
 138+ 5AC4 DD E5        	PUSH IX
 139+ 5AC6 E1           	POP HL
 140+ 5AC7 C9           	RET
 141+ 5AC8
 142+ 5AC8              .LDIRVM:
 143+ 5AC8 EB           	EX DE, HL
 144+ 5AC9 F3           	DI
 145+ 5ACA CD A4 64     	CALL SETWRT_LOCAL
 146+ 5ACD FB           	EI
 147+ 5ACE EB           	EX DE, HL
 148+ 5ACF 78           	LD A, B
 149+ 5AD0 B7           	OR A
 150+ 5AD1 28 0D        	JR Z, .L3
 151+ 5AD3 C5           	PUSH BC
 152+ 5AD4 0E 98        	LD C, #98
 153+ 5AD6              .L2:
 154+ 5AD6 50           	LD D, B
 155+ 5AD7 06 00        	LD B, 0
 156+ 5AD9 CD B1 64     	CALL BBYTECOPY_NO_C
 157+ 5ADC 42           	LD B, D
 158+ 5ADD 10 F7        	DJNZ .L2
 159+ 5ADF C1           	POP BC
 160+ 5AE0              .L3:
 161+ 5AE0 79           	LD A, C
 162+ 5AE1 B7           	OR A
 163+ 5AE2 C8           	RET Z
 164+ 5AE3 41           	LD B, C
 165+ 5AE4 C3 AF 64     	JP BBYTECOPY
 166+ 5AE7              ; *******************************************************************************************************
 167+ 5AE7
 168+ 5AE7              ; *******************************************************************************************************
 169+ 5AE7              ; function to handle CALL VRMMEM basic extension
 170+ 5AE7              ; copies from RAM to VRAM
 171+ 5AE7              ; _VRMMEM ( INT source,
 172+ 5AE7              ;			INT destination,
 173+ 5AE7              ;			INT count
 174+ 5AE7              ; will put ram in page 0 also, page 1 is already there
 175+ 5AE7              VRMMEM:
 176+ 5AE7              	; opening (
 177+ 5AE7 CD CB 65     	CALL CHKCHAR
 178+ 5AEA 28           	DB '('
 179+ 5AEB              	; get source address
 180+ 5AEB DD 21 2F 54  	LD IX, FRMQNT
 181+ 5AEF CD 59 01     	CALL CALBAS
 182+ 5AF2 D5           	PUSH DE
 183+ 5AF3              	; comma
 184+ 5AF3 CD CB 65     	CALL CHKCHAR
 185+ 5AF6 2C           	DB ','
 186+ 5AF7              	; get destination address
 187+ 5AF7 DD 21 2F 54  	LD IX, FRMQNT
 188+ 5AFB CD 59 01     	CALL CALBAS
 189+ 5AFE D5           	PUSH DE
 190+ 5AFF              	; comma
 191+ 5AFF CD CB 65     	CALL CHKCHAR
 192+ 5B02 2C           	DB ','
 193+ 5B03              	; get length
 194+ 5B03 DD 21 2F 54  	LD IX, FRMQNT
 195+ 5B07 CD 59 01     	CALL CALBAS
 196+ 5B0A D5           	PUSH DE
 197+ 5B0B              	; ending )
 198+ 5B0B CD CB 65     	CALL CHKCHAR
 199+ 5B0E 29           	DB ')'
 200+ 5B0F
 201+ 5B0F                  ; save position in BASIC text
 202+ 5B0F E5           	PUSH HL
 203+ 5B10 DD E1        	POP IX
 204+ 5B12
 205+ 5B12 C1           	POP BC ; count
 206+ 5B13 D1           	POP DE ; destination
 207+ 5B14 E1           	POP HL ; source
 208+ 5B15 D9           	EXX
 209+ 5B16 FD 21 1E 5B  	LD IY, .RET
 210+ 5B1A F3           	DI
 211+ 5B1B C3 7D 65     	JP ENABLE_PAGE0
 212+ 5B1E              .RET:
 213+ 5B1E FB           	EI
 214+ 5B1F D9           	EXX
 215+ 5B20 3E 01        	LD A,1
 216+ 5B22 32 CE 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 217+ 5B25 CD 35 5B     	CALL .LDIRMV
 218+ 5B28 AF           	XOR A
 219+ 5B29 32 CE 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 220+ 5B2C D1               POP DE
 221+ 5B2D C1               POP BC
 222+ 5B2E CD F4 64         CALL RESTORE_PAGE_INFO
 223+ 5B31 DD E5        	PUSH IX
 224+ 5B33 E1           	POP HL
 225+ 5B34 C9           	RET
 226+ 5B35
 227+ 5B35              .LDIRMV:
 228+ 5B35              	; set VRAM address *exactly* as in ROM, otherwise corruption
 229+ 5B35 7D           	LD	A, L
 230+ 5B36 F3           	DI
 231+ 5B37 D3 99        	OUT	(099H), A
 232+ 5B39 7C           	LD	A, H
 233+ 5B3A E6 3F        	AND	03FH
 234+ 5B3C D3 99        	OUT	(099H), A
 235+ 5B3E FB           	EI
 236+ 5B3F              	;EX (SP), HL
 237+ 5B3F              	;EX (SP), HL
 238+ 5B3F              	;NOP
 239+ 5B3F              	;NOP
 240+ 5B3F              .L4:
 241+ 5B3F DB 98            IN A, (#98)
 242+ 5B41 12           	LD (DE), A
 243+ 5B42 13               INC DE
 244+ 5B43 0B               DEC BC
 245+ 5B44 79               LD A, C
 246+ 5B45 B0               OR B
 247+ 5B46 20 F7            JR NZ, .L4
 248+ 5B48 C9               RET
 249+ 5B49              ; *******************************************************************************************************
# file closed: asm\VRAM.asm
 136  5B49               ENDIF
 137  5B49
 138  5B49               IF (GENCAL_CMD == 1)
 139  5B49               INCLUDE "GENCAL.asm"
# file opened: asm\GENCAL.asm
   1+ 5B49              ; *******************************************************************************************************
   2+ 5B49              ; function to handle CALL GENCAL basic extension
   3+ 5B49              ; GENCAL ( INT fn_addr, = address of the function to call
   4+ 5B49              ;		   INT[] reg_list_ptr, = array holding register values (AF,BC,DE,HL,IX,IY)
   5+ 5B49              ; output values of registers will also be stored at reg_list_ptr
   6+ 5B49              GENCAL:
   7+ 5B49              	; opening (
   8+ 5B49 CD CB 65     	CALL CHKCHAR
   9+ 5B4C 28           	DB '('
  10+ 5B4D              	; get function address
  11+ 5B4D DD 21 2F 54  	LD IX, FRMQNT
  12+ 5B51 CD 59 01     	CALL CALBAS
  13+ 5B54 D5           	PUSH DE
  14+ 5B55              	; comma
  15+ 5B55 CD CB 65     	CALL CHKCHAR
  16+ 5B58 2C           	DB ','
  17+ 5B59              	; get pointer to register list
  18+ 5B59 3E 02            LD A,2
  19+ 5B5B 06 01            LD B,1
  20+ 5B5D 11 00 05         LD DE,#0500
  21+ 5B60 CD F8 65         CALL GET_BASIC_ARRAY_DATA_POINTER
  22+ 5B63 C5           	PUSH BC
  23+ 5B64              	; ending )
  24+ 5B64 CD CB 65     	CALL CHKCHAR
  25+ 5B67 29           	DB ')'
  26+ 5B68
  27+ 5B68              	; save BASIC token position
  28+ 5B68 E5           	PUSH HL
  29+ 5B69 D9               EXX
  30+ 5B6A E1           	POP HL ; HL'=next basic token
  31+ 5B6B D9               EXX
  32+ 5B6C
  33+ 5B6C E1               POP HL ; get pointer to register values
  34+ 5B6D F3           	DI
  35+ 5B6E ED 73 BD 62      LD (BLIT_STRUCT), SP
  36+ 5B72 F9               LD SP, HL
  37+ 5B73 F1               POP AF
  38+ 5B74 C1               POP BC
  39+ 5B75 D1               POP DE
  40+ 5B76 E1               POP HL
  41+ 5B77 DD E1            POP IX
  42+ 5B79 FD E1            POP IY
  43+ 5B7B D9               EXX
  44+ 5B7C ED 73 BF 62      LD (BLIT_STRUCT+2), SP
  45+ 5B80 ED 7B BD 62      LD SP, (BLIT_STRUCT)
  46+ 5B84 FB               EI
  47+ 5B85 D1               POP DE ; get function to call
  48+ 5B86 E5               PUSH HL
  49+ 5B87 CD A2 5B         CALL .EXXDECALL
  50+ 5B8A F3               DI
  51+ 5B8B ED 73 BD 62      LD (BLIT_STRUCT), SP
  52+ 5B8F ED 7B BF 62      LD SP, (BLIT_STRUCT+2)
  53+ 5B93 FD E5            PUSH IY
  54+ 5B95 DD E5            PUSH IX
  55+ 5B97 E5               PUSH HL
  56+ 5B98 D5               PUSH DE
  57+ 5B99 C5               PUSH BC
  58+ 5B9A F5               PUSH AF
  59+ 5B9B ED 7B BD 62      LD SP, (BLIT_STRUCT)
  60+ 5B9F FB               EI
  61+ 5BA0 E1               POP HL
  62+ 5BA1 C9           	RET
  63+ 5BA2
  64+ 5BA2              .EXXDECALL:
  65+ 5BA2 D5               PUSH DE
  66+ 5BA3 D9               EXX
  67+ 5BA4 C9               RET
  68+ 5BA5              ; *******************************************************************************************************
# file closed: asm\GENCAL.asm
 140  5BA5               ENDIF
 141  5BA5
 142  5BA5               IF (BOX_CMDS == 1)
 143  5BA5               INCLUDE "BOX.asm"
# file opened: asm\BOX.asm
   1+ 5BA5              ; *******************************************************************************************************
   2+ 5BA5              ; generic function to implement rectangle data copy
   3+ 5BA5              ; should be modified to call appropriate function for memory or vram
   4+ 5BA5              ; input IX=pointer to following structure
   5+ 5BA5              ; +00 source data pointer
   6+ 5BA5              ; +02 num bytes in a row
   7+ 5BA5              ; +04 number of rows
   8+ 5BA5              ; +06 source add-to value till next row
   9+ 5BA5              ; +08 destination address
  10+ 5BA5              ; +10 destination add-to value till next row
  11+ 5BA5              ; modifies AF, BC, DE, HL
  12+ 5BA5              RECTANGLE_COPY:
  13+ 5BA5 DD 6E 00     	LD L, (IX+0)
  14+ 5BA8 DD 66 01     	LD H, (IX+1) ; source address
  15+ 5BAB DD 5E 08     	LD E, (IX+8)
  16+ 5BAE DD 56 09     	LD D, (IX+9) ; destination
  17+ 5BB1 DD 46 04     	LD B, (IX+4) ; row number
  18+ 5BB4              .L1:
  19+ 5BB4 C5           	PUSH BC
  20+ 5BB5 E5           		PUSH HL
  21+ 5BB6 D5           			PUSH DE
  22+ 5BB7 DD 4E 02     				LD C, (IX+2)
  23+ 5BBA DD 46 03     				LD B, (IX+3) ; num bytes in a row
  24+ 5BBD              .CALL1:
  25+ 5BBD CD 00 00     				CALL 0 ; set destination address from DE
  26+ 5BC0              .CALL2:
  27+ 5BC0 CD 00 00     				CALL 0 ; copy data fn
  28+ 5BC3 E1           			POP HL
  29+ 5BC4 DD 4E 0A     			LD C, (IX+10)
  30+ 5BC7 DD 46 0B     			LD B, (IX+11) ; destination add-to
  31+ 5BCA 09           			ADD HL, BC
  32+ 5BCB EB           			EX DE, HL
  33+ 5BCC E1           		POP HL
  34+ 5BCD DD 4E 06     		LD C, (IX+6)
  35+ 5BD0 DD 46 07     		LD B, (IX+7) ; src add-to
  36+ 5BD3 09           		ADD HL, BC
  37+ 5BD4 C1           	POP BC
  38+ 5BD5 10 DD        	DJNZ .L1
  39+ 5BD7 C9           	RET
  40+ 5BD8              ; *******************************************************************************************************
  41+ 5BD8
  42+ 5BD8              ; *******************************************************************************************************
  43+ 5BD8              ; function to handle CALL BOXMEMCPY basic extension
  44+ 5BD8              ; copies data with window like boundaries within ram
  45+ 5BD8              ; BOXMEMCPY ( INT source data pointer,
  46+ 5BD8              ;			  INT source number of bytes in a row,
  47+ 5BD8              ;			  INT number of rows,
  48+ 5BD8              ;			  INT source add-to value till next row,
  49+ 5BD8              ; 			  INT destination pointer,
  50+ 5BD8              ;			  INT destination add-to value till next row )
  51+ 5BD8              ; request_data_ptr described in RECTANGLE_COPY
  52+ 5BD8              ; will put ram in page 0 also, page 1 is already there
  53+ 5BD8              BOXMEMCPY:
  54+ 5BD8 11 E2 5B     	LD DE,BOXMEMCPY.RET
  55+ 5BDB ED 53 57 5C  	LD (BOXCOMMON.ADDR+2), DE
  56+ 5BDF C3 F5 5B     	JP BOXCOMMON
  57+ 5BE2              .RET:
  58+ 5BE2 FB           	EI
  59+ 5BE3              	; set RAM functions to call
  60+ 5BE3 21 00 00     	LD HL, 0
  61+ 5BE6 22 BD 5B     	LD (RECTANGLE_COPY.CALL1), HL ; NOP NOP
  62+ 5BE9 22 BF 5B     	LD (RECTANGLE_COPY.CALL1+2), HL ; NOP NOP
  63+ 5BEC 21 ED B0     	LD HL, #B0ED ; LDIR
  64+ 5BEF 22 C1 5B     	LD (RECTANGLE_COPY.CALL1+4), HL
  65+ 5BF2 C3 5C 5C     	JP BOXCOMMON.CALL
  66+ 5BF5              ; *******************************************************************************************************
  67+ 5BF5
  68+ 5BF5              ; *******************************************************************************************************
  69+ 5BF5              ; common parts of BOX commands
  70+ 5BF5              BOXCOMMON:
  71+ 5BF5              	; opening (
  72+ 5BF5 CD CB 65     	CALL CHKCHAR
  73+ 5BF8 28           	DB '('
  74+ 5BF9              	; get source data pointer
  75+ 5BF9 DD 21 2F 54  	LD IX, FRMQNT
  76+ 5BFD CD 59 01     	CALL CALBAS
  77+ 5C00 ED 53 BD 62  	LD (BLIT_STRUCT+0), DE
  78+ 5C04              	; comma
  79+ 5C04 CD CB 65     	CALL CHKCHAR
  80+ 5C07 2C           	DB ','
  81+ 5C08              	; source number of bytes in a row
  82+ 5C08 DD 21 2F 54  	LD IX, FRMQNT
  83+ 5C0C CD 59 01     	CALL CALBAS
  84+ 5C0F ED 53 BF 62  	LD (BLIT_STRUCT+2), DE
  85+ 5C13              	; comma
  86+ 5C13 CD CB 65     	CALL CHKCHAR
  87+ 5C16 2C           	DB ','
  88+ 5C17              	; number of rows
  89+ 5C17 DD 21 2F 54  	LD IX, FRMQNT
  90+ 5C1B CD 59 01     	CALL CALBAS
  91+ 5C1E ED 53 C1 62  	LD (BLIT_STRUCT+4), DE
  92+ 5C22              	; comma
  93+ 5C22 CD CB 65     	CALL CHKCHAR
  94+ 5C25 2C           	DB ','
  95+ 5C26              	; source add-to value till next row
  96+ 5C26 DD 21 2F 54  	LD IX, FRMQNT
  97+ 5C2A CD 59 01     	CALL CALBAS
  98+ 5C2D ED 53 C3 62  	LD (BLIT_STRUCT+6), DE
  99+ 5C31              	; comma
 100+ 5C31 CD CB 65     	CALL CHKCHAR
 101+ 5C34 2C           	DB ','
 102+ 5C35              	; destination pointer
 103+ 5C35 DD 21 2F 54  	LD IX, FRMQNT
 104+ 5C39 CD 59 01     	CALL CALBAS
 105+ 5C3C ED 53 C5 62  	LD (BLIT_STRUCT+8), DE
 106+ 5C40              	; comma
 107+ 5C40 CD CB 65     	CALL CHKCHAR
 108+ 5C43 2C           	DB ','
 109+ 5C44              	; destination add-to value till next row
 110+ 5C44 DD 21 2F 54  	LD IX, FRMQNT
 111+ 5C48 CD 59 01     	CALL CALBAS
 112+ 5C4B ED 53 C7 62  	LD (BLIT_STRUCT+10), DE
 113+ 5C4F              	; ending )
 114+ 5C4F CD CB 65     	CALL CHKCHAR
 115+ 5C52 29           	DB ')'
 116+ 5C53
 117+ 5C53 E5           	PUSH HL ; save position in BASIC buffer
 118+ 5C54 F3           	DI
 119+ 5C55              .ADDR:
 120+ 5C55 FD 21 00 00  	LD IY, 0
 121+ 5C59 C3 7D 65     	JP ENABLE_PAGE0
 122+ 5C5C              .CALL:
 123+ 5C5C DD 21 BD 62  	LD IX,BLIT_STRUCT
 124+ 5C60 CD A5 5B     	CALL RECTANGLE_COPY
 125+ 5C63 AF           	XOR A
 126+ 5C64 32 CE 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 127+ 5C67
 128+ 5C67 D1               POP DE
 129+ 5C68 C1               POP BC
 130+ 5C69 CD F4 64         CALL RESTORE_PAGE_INFO
 131+ 5C6C
 132+ 5C6C E1           	POP HL
 133+ 5C6D C9           	RET
 134+ 5C6E              ; *******************************************************************************************************
 135+ 5C6E
 136+ 5C6E              ; *******************************************************************************************************
 137+ 5C6E              ; function to handle CALL BOXMEMVRM basic extension
 138+ 5C6E              ; copies data with window like boundaries from ram to Vram
 139+ 5C6E              ; BOXMEMVRM ( INT source data pointer,
 140+ 5C6E              ;			  INT source number of bytes in a row,
 141+ 5C6E              ;			  INT number of rows,
 142+ 5C6E              ;			  INT source add-to value till next row,
 143+ 5C6E              ; 			  INT destination pointer,
 144+ 5C6E              ;			  INT destination add-to value till next row )
 145+ 5C6E              ; request_data_ptr described in RECTANGLE_COPY
 146+ 5C6E              ; will put ram in page 0 also, page 1 is already there
 147+ 5C6E              BOXMEMVRM:
 148+ 5C6E 11 78 5C     	LD DE,BOXMEMVRM.RET
 149+ 5C71 ED 53 57 5C  	LD (BOXCOMMON.ADDR+2), DE
 150+ 5C75 C3 F5 5B     	JP BOXCOMMON
 151+ 5C78              .RET:
 152+ 5C78 FB           	EI
 153+ 5C79              	; set RAM functions to call
 154+ 5C79 21 93 5C     	LD HL, .SETDEST
 155+ 5C7C 22 BE 5B     	LD (RECTANGLE_COPY.CALL1+1), HL
 156+ 5C7F 21 9B 5C     	LD HL, .COPYDATA
 157+ 5C82 22 C1 5B     	LD (RECTANGLE_COPY.CALL2+1), HL
 158+ 5C85 3E CD        	LD A, #CD ; CALL
 159+ 5C87 32 BD 5B     	LD (RECTANGLE_COPY.CALL1), A
 160+ 5C8A 32 C0 5B     	LD (RECTANGLE_COPY.CALL2), A
 161+ 5C8D              	;LD A,1
 162+ 5C8D 32 CE 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 163+ 5C90 C3 5C 5C     	JP BOXCOMMON.CALL
 164+ 5C93              .SETDEST:
 165+ 5C93 EB           	EX DE, HL
 166+ 5C94 F3           	DI
 167+ 5C95 CD A4 64     	CALL SETWRT_LOCAL
 168+ 5C98 FB           	EI
 169+ 5C99 EB           	EX DE, HL
 170+ 5C9A C9           	RET
 171+ 5C9B              .COPYDATA:
 172+ 5C9B 41           	LD B, C
 173+ 5C9C C3 AF 64     	JP BBYTECOPY
 174+ 5C9F              ; *******************************************************************************************************
# file closed: asm\BOX.asm
 144  5C9F               ENDIF
 145  5C9F
 146  5C9F               IF (BLIT_CMDS == 1)
 147  5C9F               INCLUDE "BLIT.asm"
# file opened: asm\BLIT.asm
   1+ 5C9F              ; *******************************************************************************************************
   2+ 5C9F              ; function rotates mask and data of several characters and applies to background data
   3+ 5C9F              ; this handles x-shift from 0 to 4
   4+ 5C9F              ; contains self-modifying code that is set-up from external function
   5+ 5C9F              ; input HL=pointer to mask data
   6+ 5C9F              ; input HL'=pointer to character data
   7+ 5C9F              ; input DE=output buffer containing background data
   8+ 5C9F              ; input BC=DE+8
   9+ 5C9F              ; input A=number of characters to process
  10+ 5C9F              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
  11+ 5C9F              SHIFT04:
  12+ 5C9F 08           	EX AF, AF'
  13+ 5CA0 7E           	LD A, (HL) ; get mask
  14+ 5CA1 D9           	EXX
  15+ 5CA2 57           	LD D, A
  16+ 5CA3 1E FF        	LD E, #FF
  17+ 5CA5 37           	SCF
  18+ 5CA6              .M1:
  19+ 5CA6 18 FE        	JR .M1 ; this is self-modifying part
  20+ 5CA8 CB 1A        	RR D
  21+ 5CAA CB 1B        	RR E
  22+ 5CAC CB 1A        	RR D
  23+ 5CAE CB 1B        	RR E
  24+ 5CB0 CB 1A        	RR D
  25+ 5CB2 CB 1B        	RR E
  26+ 5CB4 CB 1A        	RR D
  27+ 5CB6 CB 1B        	RR E
  28+ 5CB8
  29+ 5CB8 46           	LD B, (HL) ; get data
  30+ 5CB9 0E 00        	LD C, 0
  31+ 5CBB              .M2:
  32+ 5CBB 18 FE        	JR .M2 ; also self-modifying part
  33+ 5CBD CB 38        	SRL B
  34+ 5CBF CB 19        	RR C
  35+ 5CC1 CB 38        	SRL B
  36+ 5CC3 CB 19        	RR C
  37+ 5CC5 CB 38        	SRL B
  38+ 5CC7 CB 19        	RR C
  39+ 5CC9 CB 38        	SRL B
  40+ 5CCB CB 19        	RR C
  41+ 5CCD
  42+ 5CCD D9           	EXX
  43+ 5CCE 1A           	LD A, (DE) ; background
  44+ 5CCF D9           	EXX
  45+ 5CD0 A2           	AND D
  46+ 5CD1 B0           	OR B
  47+ 5CD2 D9           	EXX
  48+ 5CD3 12           	LD (DE), A
  49+ 5CD4
  50+ 5CD4 0A           	LD A, (BC)
  51+ 5CD5 D9           	EXX
  52+ 5CD6 A3           	AND E
  53+ 5CD7 B1           	OR C
  54+ 5CD8 23           	INC HL
  55+ 5CD9 D9           	EXX
  56+ 5CDA 02           	LD (BC), A
  57+ 5CDB
  58+ 5CDB 23           	INC HL
  59+ 5CDC 13           	INC DE
  60+ 5CDD 03           	INC BC
  61+ 5CDE
  62+ 5CDE 08           	EX AF, AF'
  63+ 5CDF 3D           	DEC A
  64+ 5CE0 C2 9F 5C     	JP NZ, SHIFT04
  65+ 5CE3 C9           	RET
  66+ 5CE4              ; *******************************************************************************************************
  67+ 5CE4
  68+ 5CE4              ; *******************************************************************************************************
  69+ 5CE4              ; function rotates mask and data of several characters and applies to background data
  70+ 5CE4              ; this handles x-shift from 5 to 8
  71+ 5CE4              ; contains self-modifying code that is set-up from external function
  72+ 5CE4              ; input HL=pointer to mask data
  73+ 5CE4              ; input HL'=pointer to character data
  74+ 5CE4              ; input DE=output buffer containing background data
  75+ 5CE4              ; input BC=DE+8
  76+ 5CE4              ; input A=number of characters to process
  77+ 5CE4              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
  78+ 5CE4              SHIFT58:
  79+ 5CE4 08           	EX AF, AF'
  80+ 5CE5 7E           	LD A, (HL) ; get mask
  81+ 5CE6 D9           	EXX
  82+ 5CE7 57           	LD D, A
  83+ 5CE8 1E FF        	LD E, #FF
  84+ 5CEA 37           	SCF
  85+ 5CEB              .M1:
  86+ 5CEB 18 FE        	JR .M1 ; this is self-modifying part
  87+ 5CED CB 12        	RL D
  88+ 5CEF CB 13        	RL E
  89+ 5CF1 CB 12        	RL D
  90+ 5CF3 CB 13        	RL E
  91+ 5CF5 CB 12        	RL D
  92+ 5CF7 CB 13        	RL E
  93+ 5CF9
  94+ 5CF9 46           	LD B, (HL)
  95+ 5CFA 0E 00        	LD C, 0
  96+ 5CFC              .M2:
  97+ 5CFC 18 FE        	JR .M2 ; also self-modifying part
  98+ 5CFE CB 20        	SLA B
  99+ 5D00 CB 11        	RL C
 100+ 5D02 CB 20        	SLA B
 101+ 5D04 CB 11        	RL C
 102+ 5D06 CB 20        	SLA B
 103+ 5D08 CB 11        	RL C
 104+ 5D0A
 105+ 5D0A D9           	EXX
 106+ 5D0B 1A           	LD A, (DE) ; background
 107+ 5D0C D9           	EXX
 108+ 5D0D A3           	AND E
 109+ 5D0E B1           	OR C
 110+ 5D0F D9           	EXX
 111+ 5D10 12           	LD (DE), A
 112+ 5D11
 113+ 5D11 0A           	LD A, (BC)
 114+ 5D12 D9           	EXX
 115+ 5D13 A2           	AND D
 116+ 5D14 B0           	OR B
 117+ 5D15 23           	INC HL
 118+ 5D16 D9           	EXX
 119+ 5D17 02           	LD (BC), A
 120+ 5D18
 121+ 5D18 23           	INC HL
 122+ 5D19 13           	INC DE
 123+ 5D1A 03           	INC BC
 124+ 5D1B
 125+ 5D1B 08           	EX AF, AF'
 126+ 5D1C 3D           	DEC A
 127+ 5D1D C2 E4 5C     	JP NZ, SHIFT58
 128+ 5D20 C9           	RET
 129+ 5D21              ; *******************************************************************************************************
 130+ 5D21
 131+ 5D21              ; *******************************************************************************************************
 132+ 5D21              ; routine that shifts one row of characters
 133+ 5D21              ; contains self-modifying code that is set-up from external function
 134+ 5D21              ; input HL=pointer to mask data
 135+ 5D21              ; input HL'=pointer to character data
 136+ 5D21              ; input DE=output buffer containing background data
 137+ 5D21              ; input A=number of characters to process
 138+ 5D21              ; input IX=pointer to structure describing input data
 139+ 5D21              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
 140+ 5D21              SHIFT_ROW:
 141+ 5D21 F5           	PUSH AF
 142+ 5D22 ED 53 B9 62  		LD (BLIT_TMP1), DE
 143+ 5D26 E5           		PUSH HL
 144+ 5D27 CD 6A 5D     			CALL .ADDYSHIFT
 145+ 5D2A E1           		POP HL
 146+ 5D2B ED 53 BB 62  		LD (BLIT_TMP2), DE ; DE+vertical shift
 147+ 5D2F              .L1:
 148+ 5D2F 3E 08        		LD A, 8
 149+ 5D31 DD 96 02     		SUB (IX+2) ; y shift
 150+ 5D34              .CALL1:
 151+ 5D34 CD 00 00     		CALL 0
 152+ 5D37 DD 7E 02     		LD A, (IX+2); y shift
 153+ 5D3A B7           		OR A
 154+ 5D3B 28 26        		JR Z, .DONE
 155+ 5D3D ED 5B B9 62  		LD DE, (BLIT_TMP1)
 156+ 5D41 E5           		PUSH HL
 157+ 5D42 CD 78 5D     			CALL .DETONEXTROW
 158+ 5D45 E1           		POP HL
 159+ 5D46              .CALL2:
 160+ 5D46 CD 00 00     		CALL 0
 161+ 5D49 ED 5B B9 62  		LD DE, (BLIT_TMP1)
 162+ 5D4D E5           		PUSH HL
 163+ 5D4E CD 72 5D     			CALL .ADD8
 164+ 5D51 E1           		POP HL
 165+ 5D52 ED 53 B9 62  		LD (BLIT_TMP1), DE
 166+ 5D56 ED 5B BB 62  		LD DE, (BLIT_TMP2)
 167+ 5D5A E5           		PUSH HL
 168+ 5D5B CD 72 5D     			CALL .ADD8
 169+ 5D5E E1           		POP HL
 170+ 5D5F ED 53 BB 62  		LD (BLIT_TMP2), DE ; DE+vertical shift
 171+ 5D63              .DONE:
 172+ 5D63 F1           	POP AF
 173+ 5D64 3D           	DEC A
 174+ 5D65 C8           	RET Z
 175+ 5D66 F5           	PUSH AF
 176+ 5D67 C3 2F 5D     	JP .L1
 177+ 5D6A              .ADDYSHIFT:
 178+ 5D6A EB           	EX DE, HL
 179+ 5D6B 16 00        	LD D, 0
 180+ 5D6D DD 5E 02     	LD E, (IX+2); y shift
 181+ 5D70 18 0C        	JR .MOVDEBC
 182+ 5D72              .ADD8:
 183+ 5D72 21 08 00     	LD HL, 8
 184+ 5D75 C3 7E 5D     	JP .MOVDEBC
 185+ 5D78              .DETONEXTROW:
 186+ 5D78 DD 6E 06     	LD L, (IX+6)
 187+ 5D7B DD 66 07     	LD H, (IX+7) ; bkg add to value
 188+ 5D7E              .MOVDEBC:
 189+ 5D7E 19           	ADD HL, DE
 190+ 5D7F 54           	LD D, H
 191+ 5D80 5D           	LD E, L
 192+ 5D81 01 08 00     	LD BC, 8
 193+ 5D84 09           	ADD HL, BC
 194+ 5D85 44           	LD B, H
 195+ 5D86 4D           	LD C, L
 196+ 5D87 C9           	RET
 197+ 5D88              ; *******************************************************************************************************
 198+ 5D88
 199+ 5D88              ; *******************************************************************************************************
 200+ 5D88              ; function rotates mask and character data and applies it to background
 201+ 5D88              ; input IX=pointer to structure describing input data
 202+ 5D88              ; +0  DW horizontal shift count 0-7 (low byte used)
 203+ 5D88              ; +2  DW vertical shift count 0-7 (low byte used)
 204+ 5D88              ; +4  DW background data start;
 205+ 5D88              ; +6  DW background add to value to next row of background data
 206+ 5D88              ; +8  DW mask data start;
 207+ 5D88              ; +10  DW character data start;
 208+ 5D88              ; +12 DW character&mask add to value to next row of data
 209+ 5D88              ; +14 DW columns (low byte used)
 210+ 5D88              ; +16 DW rows (low byte used)
 211+ 5D88              SHIFT_MERGE_CHARACTER:
 212+ 5D88 DD 7E 00     	LD A, (IX) ; shift
 213+ 5D8B FE 05        	CP 5
 214+ 5D8D 38 25        	JR C, .RIGHT
 215+ 5D8F              	; shifts 5-7, use rotate towards left 1-3
 216+ 5D8F 21 E4 5C     	LD HL, SHIFT58
 217+ 5D92 22 35 5D     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
 218+ 5D95 22 47 5D     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
 219+ 5D98 D6 05        	SUB 5
 220+ 5D9A 28 0D        	JR Z, .L1
 221+ 5D9C 87           	ADD A, A
 222+ 5D9D 87           	ADD A, A
 223+ 5D9E 67           	LD H, A
 224+ 5D9F 2E 18        	LD L, #18 ; JR opcode
 225+ 5DA1 22 EB 5C     	LD (SHIFT58.M1), HL
 226+ 5DA4 22 FC 5C     	LD (SHIFT58.M2), HL
 227+ 5DA7 18 32        	JR .DO
 228+ 5DA9              .L1:
 229+ 5DA9 21 00 00     	LD HL, 0 ; 2xNOP opcode
 230+ 5DAC 22 EB 5C     	LD (SHIFT58.M1), HL
 231+ 5DAF 22 FC 5C     	LD (SHIFT58.M2), HL
 232+ 5DB2 18 27        	JR .DO
 233+ 5DB4              .RIGHT:
 234+ 5DB4              	; shifts 0-4, rotate towards right
 235+ 5DB4 21 9F 5C     	LD HL, SHIFT04
 236+ 5DB7 22 35 5D     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
 237+ 5DBA 22 47 5D     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
 238+ 5DBD FE 04        	CP 4
 239+ 5DBF 28 11        	JR Z, .R1
 240+ 5DC1 D6 04        	SUB 4
 241+ 5DC3 ED 44        	NEG
 242+ 5DC5 87           	ADD A, A
 243+ 5DC6 87           	ADD A, A
 244+ 5DC7 67           	LD H, A
 245+ 5DC8 2E 18        	LD L, #18 ; JR opcode
 246+ 5DCA 22 A6 5C     	LD (SHIFT04.M1), HL
 247+ 5DCD 22 BB 5C     	LD (SHIFT04.M2), HL
 248+ 5DD0 18 09        	JR .DO
 249+ 5DD2              .R1:
 250+ 5DD2 21 00 00     	LD HL, 0 ; 2xNOP opcode
 251+ 5DD5 22 A6 5C     	LD (SHIFT04.M1), HL
 252+ 5DD8 22 BB 5C     	LD (SHIFT04.M2), HL
 253+ 5DDB              .DO:
 254+ 5DDB DD 46 10     	LD B, (IX+16) ; rows
 255+ 5DDE DD 6E 08     	LD L, (IX+8)
 256+ 5DE1 DD 66 09     	LD H, (IX+9) ; mask data
 257+ 5DE4 DD 5E 04     	LD E, (IX+4)
 258+ 5DE7 DD 56 05     	LD D, (IX+5) ; background data
 259+ 5DEA D9           	EXX
 260+ 5DEB DD 6E 0A     	LD L, (IX+10)
 261+ 5DEE DD 66 0B     	LD H, (IX+11) ; character data
 262+ 5DF1 D9           	EXX
 263+ 5DF2              .LOOP:
 264+ 5DF2 C5           	PUSH BC
 265+ 5DF3 E5           		PUSH HL
 266+ 5DF4 D5           			PUSH DE
 267+ 5DF5 D9           				EXX
 268+ 5DF6 E5           				PUSH HL
 269+ 5DF7 D9           					EXX
 270+ 5DF8 DD 7E 0E     					LD A, (IX+14) ; columns
 271+ 5DFB              .CALL:
 272+ 5DFB CD 21 5D     					CALL SHIFT_ROW
 273+ 5DFE E1           				POP HL
 274+ 5DFF DD 5E 0C     				LD E, (IX+12)
 275+ 5E02 DD 56 0D     				LD D, (IX+13) ; char data to next row
 276+ 5E05 19           				ADD HL, DE
 277+ 5E06 D9           				EXX
 278+ 5E07 E1           			POP HL
 279+ 5E08 DD 5E 06     			LD E, (IX+6)
 280+ 5E0B DD 56 07     			LD D, (IX+7) ; background to next row
 281+ 5E0E 19           			ADD HL, DE
 282+ 5E0F EB           			EX DE, HL
 283+ 5E10 E1           		POP HL
 284+ 5E11 DD 4E 0C     		LD C, (IX+12)
 285+ 5E14 DD 46 0D     		LD B, (IX+13) ; char data to next row
 286+ 5E17 09           		ADD HL, BC
 287+ 5E18 C1           	POP BC
 288+ 5E19 10 D7        	DJNZ .LOOP
 289+ 5E1B C9           	RET
 290+ 5E1C              ; *******************************************************************************************************
 291+ 5E1C
 292+ 5E1C               IFNDEF CMDS_WITH_PARAMETERS
 293+ 5E1C ~            ; *******************************************************************************************************
 294+ 5E1C ~            ; function to handle CALL BLIT basic extension
 295+ 5E1C ~            ; rotates 1-bit character drawing horizontally with mask and character data and
 296+ 5E1C ~            ; fuses with background data and applies vertical shift too
 297+ 5E1C ~            ; BLIT ( INT request_data_ptr )
 298+ 5E1C ~            ; request_data_ptr described in SHIFT_MERGE_CHARACTER
 299+ 5E1C ~            ; will put ram in page 0 also, page 1 is already there
 300+ 5E1C ~            BLIT:
 301+ 5E1C ~            	; opening (
 302+ 5E1C ~            	CALL CHKCHAR
 303+ 5E1C ~            	DB '('
 304+ 5E1C ~            	; get pointer to request struct
 305+ 5E1C ~            	LD IX, FRMQNT
 306+ 5E1C ~            	CALL CALBAS
 307+ 5E1C ~            	PUSH DE
 308+ 5E1C ~            	; ending )
 309+ 5E1C ~            	CALL CHKCHAR
 310+ 5E1C ~            	DB ')'
 311+ 5E1C ~
 312+ 5E1C ~            	POP IX ; pointer to request struct
 313+ 5E1C ~
 314+ 5E1C ~            	PUSH HL ; save position in BASIC buffer
 315+ 5E1C ~
 316+ 5E1C ~            	LD IY, .RET
 317+ 5E1C ~            	JP ENABLE_PAGE0
 318+ 5E1C ~            .RET:
 319+ 5E1C ~            	EI
 320+ 5E1C ~            	CALL SHIFT_MERGE_CHARACTER
 321+ 5E1C ~
 322+ 5E1C ~                POP DE
 323+ 5E1C ~                POP BC
 324+ 5E1C ~                CALL RESTORE_PAGE_INFO
 325+ 5E1C ~
 326+ 5E1C ~            	POP HL
 327+ 5E1C ~            	RET
 328+ 5E1C ~            ; *******************************************************************************************************
 329+ 5E1C               ENDIF
 330+ 5E1C
 331+ 5E1C               IFDEF CMDS_WITH_PARAMETERS
 332+ 5E1C              ; *******************************************************************************************************
 333+ 5E1C              ; function to handle CALL BLIT basic extension
 334+ 5E1C              ; rotates 1-bit character drawing horizontally with mask and character data and
 335+ 5E1C              ; fuses with background data and applies vertical shift too
 336+ 5E1C              ; in form without pointers
 337+ 5E1C              ; BLIT ( INT x,
 338+ 5E1C              ;		 INT y,
 339+ 5E1C              ;		 INT char_data_pointer,
 340+ 5E1C              ;		 INT mask_data_pointer,
 341+ 5E1C              ;		 INT width (in characters),
 342+ 5E1C              ;		 INT height (in characters),
 343+ 5E1C              ;		 INT background_pointer (top left),
 344+ 5E1C              ;		 INT background_width (in characters),
 345+ 5E1C              ;		 INT background_height (in characters))
 346+ 5E1C              ; will put ram in page 0 also, page 1 is already there
 347+ 5E1C              BLIT:
 348+ 5E1C              	; opening (
 349+ 5E1C CD CB 65     	CALL CHKCHAR
 350+ 5E1F 28           	DB '('
 351+ 5E20              	; get x coordinate
 352+ 5E20 DD 21 2F 54  	LD IX, FRMQNT
 353+ 5E24 CD 59 01     	CALL CALBAS
 354+ 5E27 7B           	LD A, E
 355+ 5E28 E6 07        	AND 7
 356+ 5E2A 32 BD 62     	LD (BLIT_STRUCT+0), A
 357+ 5E2D CD 0B 5F     	CALL .DAdiv8
 358+ 5E30 32 B9 62     	LD (BLIT_TMP+0),A
 359+ 5E33              	; comma
 360+ 5E33 CD CB 65     	CALL CHKCHAR
 361+ 5E36 2C           	DB ','
 362+ 5E37              	; get y coordinate
 363+ 5E37 DD 21 2F 54  	LD IX, FRMQNT
 364+ 5E3B CD 59 01     	CALL CALBAS
 365+ 5E3E 7B           	LD A, E
 366+ 5E3F E6 07        	AND 7
 367+ 5E41 32 BF 62     	LD (BLIT_STRUCT+2), A
 368+ 5E44 CD 0B 5F     	CALL .DAdiv8
 369+ 5E47 32 BA 62     	LD (BLIT_TMP+1),A
 370+ 5E4A              	; comma
 371+ 5E4A CD CB 65     	CALL CHKCHAR
 372+ 5E4D 2C           	DB ','
 373+ 5E4E              	; get char data pointer
 374+ 5E4E DD 21 2F 54  	LD IX, FRMQNT
 375+ 5E52 CD 59 01     	CALL CALBAS
 376+ 5E55 ED 53 C7 62  	LD (BLIT_STRUCT+10), DE
 377+ 5E59              	; comma
 378+ 5E59 CD CB 65     	CALL CHKCHAR
 379+ 5E5C 2C           	DB ','
 380+ 5E5D              	; get mask data pointer
 381+ 5E5D DD 21 2F 54  	LD IX, FRMQNT
 382+ 5E61 CD 59 01     	CALL CALBAS
 383+ 5E64 ED 53 C5 62  	LD (BLIT_STRUCT+8), DE
 384+ 5E68              	; comma
 385+ 5E68 CD CB 65     	CALL CHKCHAR
 386+ 5E6B 2C           	DB ','
 387+ 5E6C              	; get width
 388+ 5E6C DD 21 2F 54  	LD IX, FRMQNT
 389+ 5E70 CD 59 01     	CALL CALBAS
 390+ 5E73 7B           	LD A, E
 391+ 5E74 32 CB 62     	LD (BLIT_STRUCT+14), A
 392+ 5E77              	; comma
 393+ 5E77 CD CB 65     	CALL CHKCHAR
 394+ 5E7A 2C           	DB ','
 395+ 5E7B              	; get height
 396+ 5E7B DD 21 2F 54  	LD IX, FRMQNT
 397+ 5E7F CD 59 01     	CALL CALBAS
 398+ 5E82 7B           	LD A, E
 399+ 5E83 32 CD 62     	LD (BLIT_STRUCT+16), A
 400+ 5E86              	; comma
 401+ 5E86 CD CB 65     	CALL CHKCHAR
 402+ 5E89 2C           	DB ','
 403+ 5E8A              	; get background pointer
 404+ 5E8A DD 21 2F 54  	LD IX, FRMQNT
 405+ 5E8E CD 59 01     	CALL CALBAS
 406+ 5E91 ED 53 C1 62  	LD (BLIT_STRUCT+4), DE
 407+ 5E95              	; comma
 408+ 5E95 CD CB 65     	CALL CHKCHAR
 409+ 5E98 2C           	DB ','
 410+ 5E99              	; get background width
 411+ 5E99 DD 21 2F 54  	LD IX, FRMQNT
 412+ 5E9D CD 59 01     	CALL CALBAS
 413+ 5EA0 7B           	LD A, E
 414+ 5EA1 32 BB 62     	LD (BLIT_TMP+2), A
 415+ 5EA4              	; comma
 416+ 5EA4 CD CB 65     	CALL CHKCHAR
 417+ 5EA7 2C           	DB ','
 418+ 5EA8              	; get background height
 419+ 5EA8 DD 21 2F 54  	LD IX, FRMQNT
 420+ 5EAC CD 59 01     	CALL CALBAS
 421+ 5EAF 7B           	LD A, E
 422+ 5EB0 32 BC 62     	LD (BLIT_TMP+3), A
 423+ 5EB3              	; ending )
 424+ 5EB3 CD CB 65     	CALL CHKCHAR
 425+ 5EB6 29           	DB ')'
 426+ 5EB7
 427+ 5EB7 E5           	PUSH HL ; save position in BASIC buffer
 428+ 5EB8
 429+ 5EB8              	; calculate char&mask add to value
 430+ 5EB8 26 00        	LD H, 0
 431+ 5EBA 3A CB 62     	LD A, (BLIT_STRUCT+14)
 432+ 5EBD 6F           	LD L, A
 433+ 5EBE CD B9 64     	CALL HLx8
 434+ 5EC1 22 C9 62     	LD (BLIT_STRUCT+12), HL
 435+ 5EC4              	; calculate background add to value
 436+ 5EC4 26 00        	LD H, 0
 437+ 5EC6 3A BB 62     	LD A, (BLIT_TMP+2)
 438+ 5EC9 6F           	LD L, A
 439+ 5ECA CD B9 64     	CALL HLx8
 440+ 5ECD 22 C3 62     	LD (BLIT_STRUCT+6), HL
 441+ 5ED0              	; calculate pointer to background location
 442+ 5ED0 21 00 00     	LD HL, 0
 443+ 5ED3 3A BA 62     	LD A,(BLIT_TMP+1)
 444+ 5ED6 B7           	OR A
 445+ 5ED7 28 08        	JR Z, .L1
 446+ 5ED9 47           	LD B,A
 447+ 5EDA ED 5B C3 62  	LD DE,(BLIT_STRUCT+6)
 448+ 5EDE              .L0:
 449+ 5EDE 19           	ADD HL, DE
 450+ 5EDF 10 FD        	DJNZ .L0
 451+ 5EE1              .L1:
 452+ 5EE1 EB           	EX DE,HL
 453+ 5EE2 26 00        	LD H,0
 454+ 5EE4 3A B9 62     	LD A,(BLIT_TMP+0)
 455+ 5EE7 6F           	LD L,A
 456+ 5EE8 CD B9 64     	CALL HLx8
 457+ 5EEB 19           	ADD HL,DE
 458+ 5EEC ED 5B C1 62  	LD DE,(BLIT_STRUCT+4)
 459+ 5EF0 19           	ADD HL,DE
 460+ 5EF1 22 C1 62     	LD (BLIT_STRUCT+4),HL
 461+ 5EF4
 462+ 5EF4 F3           	DI
 463+ 5EF5 FD 21 FC 5E  	LD IY, .RET
 464+ 5EF9 C3 7D 65     	JP ENABLE_PAGE0
 465+ 5EFC              .RET:
 466+ 5EFC FB           	EI
 467+ 5EFD DD 21 BD 62  	LD IX, BLIT_STRUCT
 468+ 5F01 CD 88 5D     	CALL SHIFT_MERGE_CHARACTER
 469+ 5F04
 470+ 5F04 D1               POP DE
 471+ 5F05 C1               POP BC
 472+ 5F06 CD F4 64         CALL RESTORE_PAGE_INFO
 473+ 5F09
 474+ 5F09 E1           	POP HL
 475+ 5F0A C9           	RET
 476+ 5F0B              .DAdiv8:
 477+ 5F0B 7B           	LD A,E
 478+ 5F0C CB 2A        	SRA D
 479+ 5F0E CB 1F            RR  A
 480+ 5F10 CB 2A            SRA D
 481+ 5F12 CB 1F            RR  A
 482+ 5F14 CB 2A            SRA D
 483+ 5F16 CB 1F            RR  A
 484+ 5F18 C9           	RET
 485+ 5F19              ; *******************************************************************************************************
 486+ 5F19               ENDIF
# file closed: asm\BLIT.asm
 148  5F19               ENDIF
 149  5F19
 150  5F19               IF (TILE_CMDS == 1)
 151  5F19               INCLUDE "TILE.asm"
# file opened: asm\TILE.asm
   1+ 5F19              ; *******************************************************************************************************
   2+ 5F19              ; generic function to implement tiling
   3+ 5F19              ; should be modified to call appropriate function for memory or vram
   4+ 5F19              ; input IX=pointer to following structure
   5+ 5F19              ; +00 tile_data_ptr
   6+ 5F19              ; +02 tile_rows
   7+ 5F19              ; +04 tile_columns
   8+ 5F19              ; +06 destination_address
   9+ 5F19              ; +08 dest_to_next_row_add_to_value
  10+ 5F19              ; +10 num_horizontal_tiles
  11+ 5F19              ; +12 num_vertical_tiles
  12+ 5F19              ; modifies AF, BC, DE, HL
  13+ 5F19              TILE:
  14+ 5F19 DD 6E 06     	LD L, (IX+6)
  15+ 5F1C DD 66 07     	LD H, (IX+7) ; destination address
  16+ 5F1F 22 B9 62     	LD (TILETMP1), HL
  17+ 5F22 DD 46 0C     	LD B, (IX+12) ; vertical tile number
  18+ 5F25              .L1:
  19+ 5F25 C5           	PUSH BC
  20+ 5F26 DD 6E 00     		LD L, (IX+0)
  21+ 5F29 DD 66 01     		LD H, (IX+1) ; tile address
  22+ 5F2C 22 BB 62     		LD (TILETMP2), HL
  23+ 5F2F DD 46 02     		LD B, (IX+2) ; tile rows
  24+ 5F32              .L2:
  25+ 5F32 C5           		PUSH BC
  26+ 5F33 CD 00 00     .CALL1:		CALL 0
  27+ 5F36 DD 46 0A     			LD B, (IX+10) ; horizontal tile num
  28+ 5F39              .L3:
  29+ 5F39 C5           			PUSH BC
  30+ 5F3A 2A BB 62     				LD HL, (TILETMP2)
  31+ 5F3D DD 46 04     				LD B, (IX+4) ; tile columns
  32+ 5F40              .L4:
  33+ 5F40 C5           				PUSH BC
  34+ 5F41              .CALL2:
  35+ 5F41 CD 00 00     					CALL 0
  36+ 5F44 C1           				POP BC
  37+ 5F45 10 F9        				DJNZ .L4
  38+ 5F47 C1           			POP BC
  39+ 5F48 10 EF        			DJNZ .L3
  40+ 5F4A 22 BB 62     			LD (TILETMP2), HL
  41+ 5F4D 2A B9 62     			LD HL, (TILETMP1)
  42+ 5F50 DD 5E 08     			LD E, (IX+8)
  43+ 5F53 DD 56 09     			LD D, (IX+9) ; add to value for dest next row
  44+ 5F56 19           			ADD HL, DE
  45+ 5F57 22 B9 62     			LD (TILETMP1), HL
  46+ 5F5A C1           		POP BC
  47+ 5F5B 10 D5        		DJNZ .L2
  48+ 5F5D C1           	POP BC
  49+ 5F5E 10 C5        	DJNZ .L1
  50+ 5F60 C9           	RET
  51+ 5F61              ; *******************************************************************************************************
  52+ 5F61
  53+ 5F61               IFNDEF CMDS_WITH_PARAMETERS
  54+ 5F61 ~            ; *******************************************************************************************************
  55+ 5F61 ~            ; function to handle CALL TILERAM basic extension
  56+ 5F61 ~            ; fills memory with tiles
  57+ 5F61 ~            ; TILERAM ( INT request_data_ptr )
  58+ 5F61 ~            ; request_data_ptr described in TILE
  59+ 5F61 ~            ; will put ram in page 0 also, page 1 is already there
  60+ 5F61 ~            TILERAM:
  61+ 5F61 ~            	; opening (
  62+ 5F61 ~            	CALL CHKCHAR
  63+ 5F61 ~            	DB '('
  64+ 5F61 ~            	; get pointer to request struct
  65+ 5F61 ~            	LD IX, FRMQNT
  66+ 5F61 ~            	CALL CALBAS
  67+ 5F61 ~            	PUSH DE
  68+ 5F61 ~            	; ending )
  69+ 5F61 ~            	CALL CHKCHAR
  70+ 5F61 ~            	DB ')'
  71+ 5F61 ~
  72+ 5F61 ~            	POP IX ; pointer to request struct
  73+ 5F61 ~
  74+ 5F61 ~            	PUSH HL ; save position in BASIC buffer
  75+ 5F61 ~            	DI
  76+ 5F61 ~            	LD IY, .RET
  77+ 5F61 ~            	JP ENABLE_PAGE0
  78+ 5F61 ~            .RET:
  79+ 5F61 ~            	EI
  80+ 5F61 ~            	; set RAM functions to call
  81+ 5F61 ~            	LD HL, .TILECOPY
  82+ 5F61 ~            	LD (TILE.CALL2+1), HL
  83+ 5F61 ~            	LD HL, .SETDESTROW
  84+ 5F61 ~            	LD (TILE.CALL1+1), HL
  85+ 5F61 ~            	LD A,1
  86+ 5F61 ~            	LD (VRAM_UPDATE_IN_PROGRESS),A
  87+ 5F61 ~            	CALL TILE
  88+ 5F61 ~            	XOR A
  89+ 5F61 ~            	LD (VRAM_UPDATE_IN_PROGRESS),A
  90+ 5F61 ~
  91+ 5F61 ~                POP DE
  92+ 5F61 ~                POP BC
  93+ 5F61 ~                CALL RESTORE_PAGE_INFO
  94+ 5F61 ~
  95+ 5F61 ~            	POP HL
  96+ 5F61 ~            	RET
  97+ 5F61 ~            .TILECOPY:
  98+ 5F61 ~            	.8 LDI
  99+ 5F61 ~            	RET
 100+ 5F61 ~            .SETDESTROW:
 101+ 5F61 ~            	LD DE, (TILETMP1)
 102+ 5F61 ~            	RET
 103+ 5F61 ~            ; *******************************************************************************************************
 104+ 5F61               ENDIF
 105+ 5F61
 106+ 5F61               IFDEF CMDS_WITH_PARAMETERS
 107+ 5F61              ; *******************************************************************************************************
 108+ 5F61              ; function to handle CALL TILERAM basic extension
 109+ 5F61              ; fills memory with tiles
 110+ 5F61              ; TILERAM ( INT tile_data_pointer,
 111+ 5F61              ;			INT tile_columns,
 112+ 5F61              ;			INT tile_rows,
 113+ 5F61              ;			INT destination_pointer,
 114+ 5F61              ;			INT destination_columns,
 115+ 5F61              ;			INT destination_rows,
 116+ 5F61              ;			INT destination_begin_column,
 117+ 5F61              ;			INT destination_begin_row,
 118+ 5F61              ;			INT number_of_tiles_horizontally,
 119+ 5F61              ;			INT	number_of_tiles_vertically )
 120+ 5F61              ; will put ram in page 0 also, page 1 is already there
 121+ 5F61              TILERAM:
 122+ 5F61              	; opening (
 123+ 5F61 CD CB 65     	CALL CHKCHAR
 124+ 5F64 28           	DB '('
 125+ 5F65              	; get tile data pointer coordinate
 126+ 5F65 DD 21 2F 54  	LD IX, FRMQNT
 127+ 5F69 CD 59 01     	CALL CALBAS
 128+ 5F6C ED 53 BD 62  	LD (BLIT_STRUCT+0), DE
 129+ 5F70              	; comma
 130+ 5F70 CD CB 65     	CALL CHKCHAR
 131+ 5F73 2C           	DB ','
 132+ 5F74              	; get tile columns
 133+ 5F74 DD 21 2F 54  	LD IX, FRMQNT
 134+ 5F78 CD 59 01     	CALL CALBAS
 135+ 5F7B ED 53 C1 62  	LD (BLIT_STRUCT+4), DE
 136+ 5F7F              	; comma
 137+ 5F7F CD CB 65     	CALL CHKCHAR
 138+ 5F82 2C           	DB ','
 139+ 5F83              	; get tile columns
 140+ 5F83 DD 21 2F 54  	LD IX, FRMQNT
 141+ 5F87 CD 59 01     	CALL CALBAS
 142+ 5F8A ED 53 BF 62  	LD (BLIT_STRUCT+2), DE
 143+ 5F8E              	; comma
 144+ 5F8E CD CB 65     	CALL CHKCHAR
 145+ 5F91 2C           	DB ','
 146+ 5F92              	; get destintion pointer
 147+ 5F92 DD 21 2F 54  	LD IX, FRMQNT
 148+ 5F96 CD 59 01     	CALL CALBAS
 149+ 5F99 ED 53 C3 62  	LD (BLIT_STRUCT+6), DE
 150+ 5F9D              	; comma
 151+ 5F9D CD CB 65     	CALL CHKCHAR
 152+ 5FA0 2C           	DB ','
 153+ 5FA1              	; get destination columns
 154+ 5FA1 DD 21 2F 54  	LD IX, FRMQNT
 155+ 5FA5 CD 59 01     	CALL CALBAS
 156+ 5FA8 7B           	LD A, E
 157+ 5FA9 32 B9 62     	LD (BLIT_TMP+0), A
 158+ 5FAC              	; comma
 159+ 5FAC CD CB 65     	CALL CHKCHAR
 160+ 5FAF 2C           	DB ','
 161+ 5FB0              	; get destination rows
 162+ 5FB0 DD 21 2F 54  	LD IX, FRMQNT
 163+ 5FB4 CD 59 01     	CALL CALBAS
 164+ 5FB7 7B           	LD A, E
 165+ 5FB8 32 BA 62     	LD (BLIT_TMP+1), A
 166+ 5FBB              	; comma
 167+ 5FBB CD CB 65     	CALL CHKCHAR
 168+ 5FBE 2C           	DB ','
 169+ 5FBF              	; get destination begin column
 170+ 5FBF DD 21 2F 54  	LD IX, FRMQNT
 171+ 5FC3 CD 59 01     	CALL CALBAS
 172+ 5FC6 7B           	LD A, E
 173+ 5FC7 32 BB 62     	LD (BLIT_TMP+2), A
 174+ 5FCA              	; comma
 175+ 5FCA CD CB 65     	CALL CHKCHAR
 176+ 5FCD 2C           	DB ','
 177+ 5FCE              	; get destination begin row
 178+ 5FCE DD 21 2F 54  	LD IX, FRMQNT
 179+ 5FD2 CD 59 01     	CALL CALBAS
 180+ 5FD5 7B           	LD A, E
 181+ 5FD6 32 BC 62     	LD (BLIT_TMP+3), A
 182+ 5FD9              	; comma
 183+ 5FD9 CD CB 65     	CALL CHKCHAR
 184+ 5FDC 2C           	DB ','
 185+ 5FDD              	; get number of tiles horizontally
 186+ 5FDD DD 21 2F 54  	LD IX, FRMQNT
 187+ 5FE1 CD 59 01     	CALL CALBAS
 188+ 5FE4 ED 53 C7 62  	LD (BLIT_STRUCT+10), DE
 189+ 5FE8              	; comma
 190+ 5FE8 CD CB 65     	CALL CHKCHAR
 191+ 5FEB 2C           	DB ','
 192+ 5FEC              	; get number of tiles vertically
 193+ 5FEC DD 21 2F 54  	LD IX, FRMQNT
 194+ 5FF0 CD 59 01     	CALL CALBAS
 195+ 5FF3 ED 53 C9 62  	LD (BLIT_STRUCT+12), DE
 196+ 5FF7              	; ending )
 197+ 5FF7 CD CB 65     	CALL CHKCHAR
 198+ 5FFA 29           	DB ')'
 199+ 5FFB
 200+ 5FFB E5           	PUSH HL ; save position in BASIC buffer
 201+ 5FFC
 202+ 5FFC              	; calculate destination add to value
 203+ 5FFC 26 00        	LD H, 0
 204+ 5FFE 3A B9 62     	LD A, (BLIT_TMP+0)
 205+ 6001 6F           	LD L, A
 206+ 6002 CD B9 64     	CALL HLx8
 207+ 6005 22 C5 62     	LD (BLIT_STRUCT+8), HL
 208+ 6008              	; calculate pointer to background location
 209+ 6008 21 00 00     	LD HL, 0
 210+ 600B 3A BC 62     	LD A,(BLIT_TMP+3)
 211+ 600E B7           	OR A
 212+ 600F 28 08        	JR Z, .L1
 213+ 6011 47           	LD B,A
 214+ 6012 ED 5B C5 62  	LD DE,(BLIT_STRUCT+8)
 215+ 6016              .L0:
 216+ 6016 19           	ADD HL, DE
 217+ 6017 10 FD        	DJNZ .L0
 218+ 6019              .L1:
 219+ 6019 EB           	EX DE,HL
 220+ 601A 26 00        	LD H,0
 221+ 601C 3A BB 62     	LD A,(BLIT_TMP+2)
 222+ 601F 6F           	LD L,A
 223+ 6020 CD B9 64     	CALL HLx8
 224+ 6023 19           	ADD HL,DE
 225+ 6024 ED 5B C3 62  	LD DE,(BLIT_STRUCT+6)
 226+ 6028 19           	ADD HL,DE
 227+ 6029 22 C3 62     	LD (BLIT_STRUCT+6),HL
 228+ 602C F3           	DI
 229+ 602D FD 21 34 60  	LD IY, .RET
 230+ 6031 C3 7D 65     	JP ENABLE_PAGE0
 231+ 6034              .RET:
 232+ 6034 FB           	EI
 233+ 6035              	; set RAM functions to call
 234+ 6035 21 4F 60     	LD HL, .TILECOPY
 235+ 6038 22 42 5F     	LD (TILE.CALL2+1), HL
 236+ 603B 21 60 60     	LD HL, .SETDESTROW
 237+ 603E 22 34 5F     	LD (TILE.CALL1+1), HL
 238+ 6041 DD 21 BD 62  	LD IX,BLIT_STRUCT
 239+ 6045 CD 19 5F     	CALL TILE
 240+ 6048
 241+ 6048 D1               POP DE
 242+ 6049 C1               POP BC
 243+ 604A CD F4 64         CALL RESTORE_PAGE_INFO
 244+ 604D
 245+ 604D E1           	POP HL
 246+ 604E C9           	RET
 247+ 604F              .TILECOPY:
 248+ 604F ED A0       > LDI
 248+ 6051 ED A0       > LDI
 248+ 6053 ED A0       > LDI
 248+ 6055 ED A0       > LDI
 248+ 6057 ED A0       > LDI
 248+ 6059 ED A0       > LDI
 248+ 605B ED A0       > LDI
 248+ 605D ED A0       > LDI
 249+ 605F C9           	RET
 250+ 6060              .SETDESTROW:
 251+ 6060 ED 5B B9 62  	LD DE, (TILETMP1)
 252+ 6064 C9           	RET
 253+ 6065              ; *******************************************************************************************************
 254+ 6065               ENDIF
 255+ 6065
 256+ 6065               IFDEF CMDS_WITH_PARAMETERS
 257+ 6065              ; *******************************************************************************************************
 258+ 6065              ; function to handle CALL TILEVRM basic extension
 259+ 6065              ; fills vram with tiles
 260+ 6065              ; TILEVRM ( INT tile_data_pointer,
 261+ 6065              ;			INT tile_columns,
 262+ 6065              ;			INT tile_rows,
 263+ 6065              ;			INT destination_begin_column,
 264+ 6065              ;			INT destination_begin_row,
 265+ 6065              ;			INT number_of_tiles_horizontally,
 266+ 6065              ;			INT	number_of_tiles_vertically )
 267+ 6065              ; will put ram in page 0 also, page 1 is already there
 268+ 6065              ; for destination uses address of SCREEN 2 pattern buffer and 32x24 size
 269+ 6065              TILEVRM:
 270+ 6065              	; opening (
 271+ 6065 CD CB 65     	CALL CHKCHAR
 272+ 6068 28           	DB '('
 273+ 6069              	; get tile data pointer coordinate
 274+ 6069 DD 21 2F 54  	LD IX, FRMQNT
 275+ 606D CD 59 01     	CALL CALBAS
 276+ 6070 ED 53 BD 62  	LD (BLIT_STRUCT+0), DE
 277+ 6074              	; comma
 278+ 6074 CD CB 65     	CALL CHKCHAR
 279+ 6077 2C           	DB ','
 280+ 6078              	; get tile columns
 281+ 6078 DD 21 2F 54  	LD IX, FRMQNT
 282+ 607C CD 59 01     	CALL CALBAS
 283+ 607F ED 53 C1 62  	LD (BLIT_STRUCT+4), DE
 284+ 6083              	; comma
 285+ 6083 CD CB 65     	CALL CHKCHAR
 286+ 6086 2C           	DB ','
 287+ 6087              	; get tile columns
 288+ 6087 DD 21 2F 54  	LD IX, FRMQNT
 289+ 608B CD 59 01     	CALL CALBAS
 290+ 608E ED 53 BF 62  	LD (BLIT_STRUCT+2), DE
 291+ 6092              	; comma
 292+ 6092 CD CB 65     	CALL CHKCHAR
 293+ 6095 2C           	DB ','
 294+ 6096              	; get destination begin column
 295+ 6096 DD 21 2F 54  	LD IX, FRMQNT
 296+ 609A CD 59 01     	CALL CALBAS
 297+ 609D 7B           	LD A, E
 298+ 609E 32 BB 62     	LD (BLIT_TMP+2), A
 299+ 60A1              	; comma
 300+ 60A1 CD CB 65     	CALL CHKCHAR
 301+ 60A4 2C           	DB ','
 302+ 60A5              	; get destination begin row
 303+ 60A5 DD 21 2F 54  	LD IX, FRMQNT
 304+ 60A9 CD 59 01     	CALL CALBAS
 305+ 60AC 7B           	LD A, E
 306+ 60AD 32 BC 62     	LD (BLIT_TMP+3), A
 307+ 60B0              	; comma
 308+ 60B0 CD CB 65     	CALL CHKCHAR
 309+ 60B3 2C           	DB ','
 310+ 60B4              	; get number of tiles horizontally
 311+ 60B4 DD 21 2F 54  	LD IX, FRMQNT
 312+ 60B8 CD 59 01     	CALL CALBAS
 313+ 60BB ED 53 C7 62  	LD (BLIT_STRUCT+10), DE
 314+ 60BF              	; comma
 315+ 60BF CD CB 65     	CALL CHKCHAR
 316+ 60C2 2C           	DB ','
 317+ 60C3              	; get number of tiles vertically
 318+ 60C3 DD 21 2F 54  	LD IX, FRMQNT
 319+ 60C7 CD 59 01     	CALL CALBAS
 320+ 60CA ED 53 C9 62  	LD (BLIT_STRUCT+12), DE
 321+ 60CE              	; ending )
 322+ 60CE CD CB 65     	CALL CHKCHAR
 323+ 60D1 29           	DB ')'
 324+ 60D2
 325+ 60D2 E5           	PUSH HL ; save position in BASIC buffer
 326+ 60D3
 327+ 60D3              	; calculate destination add to value
 328+ 60D3 21 00 01     	LD HL, 256
 329+ 60D6 22 C5 62     	LD (BLIT_STRUCT+8), HL
 330+ 60D9              	; calculate pointer to background location
 331+ 60D9 3A BC 62     	LD A,(BLIT_TMP+3)
 332+ 60DC 67           	LD H,A
 333+ 60DD 2E 00        	LD L,0
 334+ 60DF EB           	EX DE,HL
 335+ 60E0 26 00        	LD H,0
 336+ 60E2 3A BB 62     	LD A,(BLIT_TMP+2)
 337+ 60E5 6F           	LD L,A
 338+ 60E6 CD B9 64     	CALL HLx8
 339+ 60E9 19           	ADD HL,DE
 340+ 60EA ED 5B CB F3  	LD DE,(GRPCGP)
 341+ 60EE 19           	ADD HL,DE
 342+ 60EF 22 C3 62     	LD (BLIT_STRUCT+6),HL
 343+ 60F2 F3           	DI
 344+ 60F3 FD 21 FA 60  	LD IY, .RET
 345+ 60F7 C3 7D 65     	JP ENABLE_PAGE0
 346+ 60FA              .RET:
 347+ 60FA FB           	EI
 348+ 60FB              	; set RAM functions to call
 349+ 60FB 21 15 61     	LD HL, .TILECOPY
 350+ 60FE 22 42 5F     	LD (TILE.CALL2+1), HL
 351+ 6101 21 1B 61     	LD HL, .SETDESTROW
 352+ 6104 22 34 5F     	LD (TILE.CALL1+1), HL
 353+ 6107 DD 21 BD 62  	LD IX,BLIT_STRUCT
 354+ 610B CD 19 5F     	CALL TILE
 355+ 610E
 356+ 610E D1               POP DE
 357+ 610F C1               POP BC
 358+ 6110 CD F4 64         CALL RESTORE_PAGE_INFO
 359+ 6113
 360+ 6113 E1           	POP HL
 361+ 6114 C9           	RET
 362+ 6115              .TILECOPY:
 363+ 6115 01 98 08     	LD BC, #0898
 364+ 6118 C3 B1 64     	JP BBYTECOPY_NO_C
 365+ 611B              .SETDESTROW:
 366+ 611B 2A B9 62     	LD HL, (TILETMP1)
 367+ 611E F3           	DI
 368+ 611F CD A4 64     	CALL SETWRT_LOCAL
 369+ 6122 FB           	EI
 370+ 6123 C9           	RET
 371+ 6124              ; *******************************************************************************************************
 372+ 6124               ENDIF
 373+ 6124
 374+ 6124               IFNDEF CMDS_WITH_PARAMETERS
 375+ 6124 ~            ; *******************************************************************************************************
 376+ 6124 ~            ; function to handle CALL TILEVRM basic extension
 377+ 6124 ~            ; fills vram with tiles
 378+ 6124 ~            ; TILEVRM ( INT request_data_ptr )
 379+ 6124 ~            ; request_data_ptr described in TILE
 380+ 6124 ~            ; will put ram in page 0 also, page 1 is already there
 381+ 6124 ~            TILEVRM:
 382+ 6124 ~            	; opening (
 383+ 6124 ~            	CALL CHKCHAR
 384+ 6124 ~            	DB '('
 385+ 6124 ~            	; get pointer to request struct
 386+ 6124 ~            	LD IX, FRMQNT
 387+ 6124 ~            	CALL CALBAS
 388+ 6124 ~            	PUSH DE
 389+ 6124 ~            	; ending )
 390+ 6124 ~            	CALL CHKCHAR
 391+ 6124 ~            	DB ')'
 392+ 6124 ~
 393+ 6124 ~            	POP IX ; pointer to request struct
 394+ 6124 ~
 395+ 6124 ~            	PUSH HL ; save position in BASIC buffer
 396+ 6124 ~            	DI
 397+ 6124 ~            	LD IY, .RET
 398+ 6124 ~            	JP ENABLE_PAGE0
 399+ 6124 ~            .RET:
 400+ 6124 ~            	EI
 401+ 6124 ~            	; set RAM functions to call
 402+ 6124 ~            	LD HL, .TILECOPY
 403+ 6124 ~            	LD (TILE.CALL2+1), HL
 404+ 6124 ~            	LD HL, .SETDESTROW
 405+ 6124 ~            	LD (TILE.CALL1+1), HL
 406+ 6124 ~            	CALL TILE
 407+ 6124 ~
 408+ 6124 ~                POP DE
 409+ 6124 ~                POP BC
 410+ 6124 ~                CALL RESTORE_PAGE_INFO
 411+ 6124 ~
 412+ 6124 ~            	POP HL
 413+ 6124 ~            	RET
 414+ 6124 ~            .TILECOPY:
 415+ 6124 ~            	LD BC, #0898
 416+ 6124 ~            	JP BBYTECOPY_NO_C
 417+ 6124 ~            .SETDESTROW:
 418+ 6124 ~            	LD HL, (TILETMP1)
 419+ 6124 ~            	DI
 420+ 6124 ~            	CALL SETWRT_LOCAL
 421+ 6124 ~            	EI
 422+ 6124 ~            	RET
 423+ 6124 ~            ; *******************************************************************************************************
 424+ 6124               ENDIF
# file closed: asm\TILE.asm
 152  6124               ENDIF
 153  6124
 154  6124               IF (COLL_CMD == 1)
 155  6124               INCLUDE "COLLISION.asm"
# file opened: asm\COLLISION.asm
   1+ 6124              ; generic collision checking routines
   2+ 6124              ; in BASIC we use rectangle structure array DIM R%(7,n) of the format
   3+ 6124              ; R%(0,n) is active flag, <>0 active / 0 skipped in checks
   4+ 6124              ; R%(1,n) is either upper left x coordinate or sprite id (0-31) depending on R(7,n)
   5+ 6124              ; R%(2,n) is either upper left y coordinate or unused depending on R(7,n)
   6+ 6124              ; R%(3,n) x offset where rectangle begins
   7+ 6124              ; R%(4,n) y offset where rectangle begins
   8+ 6124              ; R%(5,n) is width
   9+ 6124              ; R%(6,n) is height
  10+ 6124              ; R%(7,0) is type, 0=generic where R%(1,0) contains x coordinate
  11+ 6124              ;                  <>0 sprite where R%(1,0) contains sprite id
  12+ 6124              ; for type sprite, upper left coordinates are taken from sprite attribute array
  13+ 6124
  14+ 6124              ; ************************************************************************************************
  15+ 6124              ; quick test if HL<=DE<=HL+BC
  16+ 6124              ; input BC=width, DE=x, HL=min
  17+ 6124              ; if not true flag C set
  18+ 6124              ; modifies AF
  19+ 6124              GENERIC_INNER_CHECK:
  20+ 6124 E5               PUSH HL
  21+ 6125 D5               PUSH DE
  22+ 6126 EB               EX DE,HL
  23+ 6127 A7               AND A
  24+ 6128 ED 52            SBC HL, DE
  25+ 612A FA 38 61         JP M, .GENERIC_INNER_CHECK_NOT
  26+ 612D A7               AND A
  27+ 612E ED 42            SBC HL, BC
  28+ 6130 28 03            JR Z, .L2
  29+ 6132 F2 38 61         JP P, .GENERIC_INNER_CHECK_NOT
  30+ 6135              .L2:
  31+ 6135 A7               AND A
  32+ 6136 18 01            JR .EXIT
  33+ 6138              .GENERIC_INNER_CHECK_NOT:
  34+ 6138 37               SCF
  35+ 6139              .EXIT:
  36+ 6139 D1               POP DE
  37+ 613A E1               POP HL
  38+ 613B C9               RET
  39+ 613C              ; ************************************************************************************************
  40+ 613C
  41+ 613C              ; ************************************************************************************************
  42+ 613C              ; function to check if rectangles are overlapping
  43+ 613C              ; input IX=IY=pointer to struct
  44+ 613C              ;  +00 active flag
  45+ 613C              ;  +02 x coordinate
  46+ 613C              ;  +04 y coordinate
  47+ 613C              ;  +06 x offset where rectangle begins
  48+ 613C              ;  +08 y offset where rectangle begins
  49+ 613C              ;  +10 width
  50+ 613C              ;  +12 height
  51+ 613C              ; where IY is used to read +2 and +4, and IX to read +6, +8, +10 and +12
  52+ 613C              ; this is a hack to allow location being taken from sprite attributes table
  53+ 613C              ; input BLIT_STRUCT data
  54+ 613C              ;  +00 x coordinate
  55+ 613C              ;  +02 y coordinate
  56+ 613C              ;  +04 width
  57+ 613C              ;  +06 height
  58+ 613C              ; returns CF=1 if not overlapping, CF=0 if overlapping
  59+ 613C              RECTANGLE_OVERLAP_CHECK:
  60+ 613C                  ; first check which rectangle is higher
  61+ 613C DD 6E 0C         LD L,(IX+12)
  62+ 613F DD 66 0D         LD H,(IX+13)
  63+ 6142 ED 5B C3 62      LD DE,(BLIT_STRUCT+6)
  64+ 6146 A7               AND A
  65+ 6147 ED 52            SBC HL,DE
  66+ 6149 FD 6E 04         LD L,(IY+4)
  67+ 614C FD 66 05         LD H,(IY+5)
  68+ 614F DD 5E 08         LD E,(IX+8)
  69+ 6152 DD 56 09         LD D,(IX+9)
  70+ 6155 FA 75 61         JP M,.L1
  71+ 6158                  ; equally high or IX defined one higher
  72+ 6158                  ; check upper boundary
  73+ 6158 19               ADD HL,DE
  74+ 6159 ED 5B BF 62      LD DE,(BLIT_STRUCT+2)
  75+ 615D DD 4E 0C         LD C,(IX+12)
  76+ 6160 DD 46 0D         LD B,(IX+13)
  77+ 6163 CD 24 61         CALL GENERIC_INNER_CHECK
  78+ 6166 30 29            JR NC,.INSIDE
  79+ 6168                  ; check lower boundary
  80+ 6168 E5               PUSH HL
  81+ 6169 2A C3 62         LD HL,(BLIT_STRUCT+6)
  82+ 616C 19               ADD HL,DE
  83+ 616D EB               EX DE,HL
  84+ 616E E1               POP HL
  85+ 616F CD 24 61         CALL GENERIC_INNER_CHECK
  86+ 6172 30 1D            JR NC,.INSIDE
  87+ 6174 C9               RET ; not overlapping
  88+ 6175              .L1:
  89+ 6175                  ; rectangle defined in BLIT_STRUCT is higher
  90+ 6175 19               ADD HL,DE
  91+ 6176 EB               EX DE,HL
  92+ 6177 2A BF 62         LD HL,(BLIT_STRUCT+2)
  93+ 617A ED 4B C3 62      LD BC,(BLIT_STRUCT+6)
  94+ 617E CD 24 61         CALL GENERIC_INNER_CHECK
  95+ 6181 30 0E            JR NC,.INSIDE
  96+ 6183 E5               PUSH HL
  97+ 6184 DD 6E 0C         LD L,(IX+12)
  98+ 6187 DD 66 0D         LD H,(IX+13)
  99+ 618A 19               ADD HL,DE
 100+ 618B EB               EX DE,HL
 101+ 618C E1               POP HL
 102+ 618D CD 24 61         CALL GENERIC_INNER_CHECK
 103+ 6190 D8               RET C
 104+ 6191              .INSIDE:
 105+ 6191                  ; check x coordinate
 106+ 6191                  ; first check which rectangle is wider
 107+ 6191 DD 6E 0A         LD L,(IX+10)
 108+ 6194 DD 66 0B         LD H,(IX+11)
 109+ 6197 ED 5B C1 62      LD DE,(BLIT_STRUCT+4)
 110+ 619B A7               AND A
 111+ 619C ED 52            SBC HL,DE
 112+ 619E FD 6E 02         LD L,(IY+2)
 113+ 61A1 FD 66 03         LD H,(IY+3)
 114+ 61A4 DD 5E 06         LD E,(IX+6)
 115+ 61A7 DD 56 07         LD D,(IX+7)
 116+ 61AA FA C6 61         JP M,.L2
 117+ 61AD                  ; equally wide or IX defined one wider
 118+ 61AD                  ; check left boundary
 119+ 61AD 19               ADD HL,DE
 120+ 61AE ED 5B BD 62      LD DE,(BLIT_STRUCT+0)
 121+ 61B2 DD 4E 0A         LD C,(IX+10)
 122+ 61B5 DD 46 0B         LD B,(IX+11)
 123+ 61B8 CD 24 61         CALL GENERIC_INNER_CHECK
 124+ 61BB D0               RET NC ; overlap
 125+ 61BC                  ; check right boundary
 126+ 61BC E5               PUSH HL
 127+ 61BD 2A C1 62         LD HL,(BLIT_STRUCT+4)
 128+ 61C0 19               ADD HL,DE
 129+ 61C1 EB               EX DE,HL
 130+ 61C2 E1               POP HL
 131+ 61C3 C3 24 61         JP GENERIC_INNER_CHECK ; CF and result set by fn call
 132+ 61C6              .L2:
 133+ 61C6                  ; rectangle defined in BLIT_STRUCT is higher
 134+ 61C6 19               ADD HL,DE
 135+ 61C7 EB               EX DE,HL
 136+ 61C8 2A BD 62         LD HL,(BLIT_STRUCT+0)
 137+ 61CB ED 4B C1 62      LD BC,(BLIT_STRUCT+4)
 138+ 61CF CD 24 61         CALL GENERIC_INNER_CHECK
 139+ 61D2 D0               RET NC ; overlap
 140+ 61D3 E5               PUSH HL
 141+ 61D4 DD 6E 0A         LD L,(IX+10)
 142+ 61D7 DD 66 0B         LD H,(IX+11)
 143+ 61DA 19               ADD HL,DE
 144+ 61DB EB               EX DE,HL
 145+ 61DC E1               POP HL
 146+ 61DD C3 24 61         JP GENERIC_INNER_CHECK
 147+ 61E0              ; ************************************************************************************************
 148+ 61E0
 149+ 61E0              ; ************************************************************************************************
 150+ 61E0              ; function tries to find rectangle overlap and returns an index if found
 151+ 61E0              ; input BLIT_STRUCT data
 152+ 61E0              ;  +00 x coordinate
 153+ 61E0              ;  +02 y coordinate
 154+ 61E0              ;  +04 width
 155+ 61E0              ;  +06 height
 156+ 61E0              ;  +08 number of items in a list, described under RECTANGLE_OVERLAP_CHECK
 157+ 61E0              ;  +09 pointer to first element of R%(7,n)
 158+ 61E0              ;  +11 pointer to INT result variable
 159+ 61E0              ; returns CF=1 if not overlapping
 160+ 61E0              ; returns A=list index and CF=0 if overlapping
 161+ 61E0              FIND_OVERLAP:
 162+ 61E0 3A C5 62         LD A,(BLIT_STRUCT+8)
 163+ 61E3 47               LD B,A
 164+ 61E4 DD 2A C6 62      LD IX,(BLIT_STRUCT+9)
 165+ 61E8              .L1:
 166+ 61E8 C5               PUSH BC
 167+ 61E9                  ; check active flag
 168+ 61E9 DD 7E 00         LD A,(IX)
 169+ 61EC DD B6 01         OR (IX+1)
 170+ 61EF 28 18            JR Z,.NEXT
 171+ 61F1                  ; check type
 172+ 61F1 DD 7E 0E         LD A,(IX+14)
 173+ 61F4 DD B6 0F         OR (IX+15)
 174+ 61F7 20 1A            JR NZ,.L2
 175+ 61F9 DD E5            PUSH IX
 176+ 61FB FD E1            POP IY
 177+ 61FD              .L3:
 178+ 61FD CD 3C 61         CALL RECTANGLE_OVERLAP_CHECK
 179+ 6200 38 07            JR C,.NEXT
 180+ 6202                  ; found
 181+ 6202 C1               POP BC
 182+ 6203 3A C5 62         LD A,(BLIT_STRUCT+8)
 183+ 6206 90               SUB B
 184+ 6207 A7               AND A
 185+ 6208 C9               RET
 186+ 6209              .NEXT:
 187+ 6209 11 10 00         LD DE,16
 188+ 620C DD 19            ADD IX,DE
 189+ 620E C1               POP BC
 190+ 620F 10 D7            DJNZ .L1
 191+ 6211 37               SCF
 192+ 6212 C9               RET
 193+ 6213              .L2:
 194+ 6213                  ; sprite, need to build a temporary data struct since x and y values are inversed
 195+ 6213                  ; at BLIT_STRUCT+13
 196+ 6213 DD 7E 02         LD A,(IX+2) ; sprite ID
 197+ 6216 CD 85 4D         CALL GETnthSPRATTR
 198+ 6219 FD 21 C8 62      LD IY,BLIT_STRUCT+11
 199+ 621D 7E               LD A,(HL)
 200+ 621E FD 77 04         LD (IY+4),A
 201+ 6221 23               INC HL
 202+ 6222 7E               LD A,(HL)
 203+ 6223 FD 77 05         LD (IY+5),A
 204+ 6226 23               INC HL
 205+ 6227 7E               LD A,(HL)
 206+ 6228 FD 77 02         LD (IY+2),A
 207+ 622B 23               INC HL
 208+ 622C 7E               LD A,(HL)
 209+ 622D FD 77 03         LD (IY+3),A
 210+ 6230 18 CB            JR .L3
 211+ 6232              ; ************************************************************************************************
 212+ 6232
 213+ 6232              ; ************************************************************************************************
 214+ 6232              ; function to handle CALL COLL basic extension
 215+ 6232              ; checks for collision between player and other rectangles
 216+ 6232              ; COLL ( INT result variable,
 217+ 6232              ;	     INT player x value,
 218+ 6232              ;	     INT player y value,
 219+ 6232              ;	     INT player width,
 220+ 6232              ;	     INT player height,
 221+ 6232              ;	     INT number of items in a list,
 222+ 6232              ;		 INT[6][n] rectangle struct )
 223+ 6232              ; will fill result variable with index or -1 if no collision
 224+ 6232              ; rectangle struct described under RECTANGLE_OVERLAP_CHECK
 225+ 6232              COLL:
 226+ 6232              	; opening (
 227+ 6232 CD CB 65     	CALL CHKCHAR
 228+ 6235 28           	DB '('
 229+ 6236              	; get address of result variable
 230+ 6236 DD 21 A4 5E  	LD IX, PTRGET
 231+ 623A CD 59 01     	CALL CALBAS
 232+ 623D ED 53 C8 62  	LD (BLIT_STRUCT+11),DE
 233+ 6241              	; comma
 234+ 6241 CD CB 65     	CALL CHKCHAR
 235+ 6244 2C           	DB ','
 236+ 6245              	; get x
 237+ 6245 DD 21 2F 54  	LD IX, FRMQNT
 238+ 6249 CD 59 01     	CALL CALBAS
 239+ 624C ED 53 BD 62  	LD (BLIT_STRUCT+0),DE
 240+ 6250              	; comma
 241+ 6250 CD CB 65     	CALL CHKCHAR
 242+ 6253 2C           	DB ','
 243+ 6254              	; get y
 244+ 6254 DD 21 2F 54  	LD IX, FRMQNT
 245+ 6258 CD 59 01     	CALL CALBAS
 246+ 625B ED 53 BF 62  	LD (BLIT_STRUCT+2),DE
 247+ 625F              	; comma
 248+ 625F CD CB 65     	CALL CHKCHAR
 249+ 6262 2C           	DB ','
 250+ 6263              	; get width
 251+ 6263 DD 21 2F 54  	LD IX, FRMQNT
 252+ 6267 CD 59 01     	CALL CALBAS
 253+ 626A ED 53 C1 62  	LD (BLIT_STRUCT+4),DE
 254+ 626E              	; comma
 255+ 626E CD CB 65     	CALL CHKCHAR
 256+ 6271 2C           	DB ','
 257+ 6272              	; get height
 258+ 6272 DD 21 2F 54  	LD IX, FRMQNT
 259+ 6276 CD 59 01     	CALL CALBAS
 260+ 6279 ED 53 C3 62  	LD (BLIT_STRUCT+6),DE
 261+ 627D              	; comma
 262+ 627D CD CB 65     	CALL CHKCHAR
 263+ 6280 2C           	DB ','
 264+ 6281              	; get number of items in a list
 265+ 6281 DD 21 1C 52  	LD IX, GETBYT
 266+ 6285 CD 59 01     	CALL CALBAS
 267+ 6288 32 C5 62     	LD (BLIT_STRUCT+8),A
 268+ 628B              	; comma
 269+ 628B CD CB 65     	CALL CHKCHAR
 270+ 628E 2C           	DB ','
 271+ 628F              	; get address of rectangle structure array DIM R%(7,n)
 272+ 628F 3A C5 62     	LD A,(BLIT_STRUCT+8)
 273+ 6292 5F               LD E,A
 274+ 6293 3E 02            LD A,2
 275+ 6295 47           	LD B,A
 276+ 6296 16 07        	LD D,7
 277+ 6298 CD F8 65     	CALL GET_BASIC_ARRAY_DATA_POINTER
 278+ 629B ED 43 C6 62  	LD (BLIT_STRUCT+9),BC
 279+ 629F              	; ending )
 280+ 629F CD CB 65     	CALL CHKCHAR
 281+ 62A2 29           	DB ')'
 282+ 62A3
 283+ 62A3 E5               PUSH HL
 284+ 62A4 CD E0 61         CALL FIND_OVERLAP
 285+ 62A7 2A C8 62         LD HL,(BLIT_STRUCT+11)
 286+ 62AA 38 06            JR C,.NOTFOUND
 287+ 62AC 77               LD (HL),A
 288+ 62AD 23               INC HL
 289+ 62AE 36 00            LD (HL),0
 290+ 62B0 E1               POP HL
 291+ 62B1 C9               RET
 292+ 62B2              .NOTFOUND:
 293+ 62B2 36 FF            LD (HL),#FF
 294+ 62B4 23               INC HL
 295+ 62B5 36 FF            LD (HL),#FF
 296+ 62B7 E1               POP HL
 297+ 62B8 C9               RET
 298+ 62B9              ; ************************************************************************************************
 299+ 62B9
# file closed: asm\COLLISION.asm
 156  62B9               ENDIF
 157  62B9
 158  62B9              ; temp variables for BLIT, TILE functions
 159  62B9               IF (BLIT_CMDS + TILE_CMDS + BOX_CMDS + SPRITE_CMDS + ANIM_CMDS + COLL_CMD > 0)
 160  62B9              BLIT_TMP:
 161  62B9              TILETMP1:
 162  62B9              BLIT_TMP1:
 163  62B9 00 00         DW 0
 164  62BB              TILETMP2:
 165  62BB              BLIT_TMP2:
 166  62BB 00 00         DW 0
 167  62BD                IFDEF CMDS_WITH_PARAMETERS
 168  62BD              BLIT_STRUCT:
 169  62BD 00 00 00...   DS 17
 170  62C1                ENDIF
 171  62C1               ENDIF
 172  62CE
 173  62CE               IF (VRAM_CMDS + TILE_CMDS + BOX_CMDS + SPRITE_CMDS + ANIM_CMDS > 0)
 174  62CE              VRAM_UPDATE_IN_PROGRESS:
 175  62CE 00            DB 0
 176  62CF               ENDIF
 177  62CF
 178  62CF              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 179  62CF              ; per starting letter, if no commands with this letter, NULL value
 180  62CF              CMDS:
 181  62CF               IF (ANIM_CMDS == 1)
 182  62CF 0E 64        	DW CMDS_A ;
 183  62D1               ELSE
 184  62D1 ~                DW 0 ; A
 185  62D1               ENDIF
 186  62D1               IF (BLIT_CMDS + BOX_CMDS > 0)
 187  62D1 D9 63            DW CMDS_B ; B
 188  62D3               ELSE
 189  62D3 ~            	DW 0
 190  62D3               ENDIF
 191  62D3               IF (COLL_CMD == 1)
 192  62D3 9C 64        	DW CMDS_C ;
 193  62D5               ELSE
 194  62D5 ~                DW 0 ; C
 195  62D5               ENDIF
 196  62D5 00 00            DW 0 ; D
 197  62D7 00 00            DW 0 ; E
 198  62D9               IF (VRAM_CMDS + RAM_CMDS > 0)
 199  62D9 50 63            DW CMDS_F; F
 200  62DB               ELSE
 201  62DB ~            	DW 0
 202  62DB               ENDIF
 203  62DB               IF (GENCAL_CMD > 0)
 204  62DB 63 63            DW CMDS_G; G
 205  62DD               ELSE
 206  62DD ~            	DW 0
 207  62DD               ENDIF
 208  62DD 00 00            DW 0 ; H
 209  62DF 00 00            DW 0 ; I
 210  62E1 00 00            DW 0 ; J
 211  62E3 00 00            DW 0 ; K
 212  62E5 00 00            DW 0 ; L
 213  62E7               IF (VRAM_CMDS + RAM_CMDS + ANIM_CMDS > 0)
 214  62E7 03 63            DW CMDS_M ; M
 215  62E9               ELSE
 216  62E9 ~            	DW 0
 217  62E9               ENDIF
 218  62E9 00 00            DW 0 ; N
 219  62EB 00 00            DW 0 ; O
 220  62ED 00 00            DW 0 ; P
 221  62EF 00 00            DW 0 ; Q
 222  62F1 00 00            DW 0 ; R
 223  62F3               IF (SOUND_CMDS + SPRITE_CMDS > 0)
 224  62F3 77 63            DW CMDS_S ; S
 225  62F5               ELSE
 226  62F5 ~            	DW 0
 227  62F5               ENDIF
 228  62F5               IF (TILE_CMDS > 0)
 229  62F5 F9 63            DW CMDS_T ; T
 230  62F7               ELSE
 231  62F7 ~            	DW 0
 232  62F7               ENDIF
 233  62F7 00 00            DW 0 ; U
 234  62F9               IF (VRAM_CMDS > 0)
 235  62F9 6D 63            DW CMDS_V ; V
 236  62FB               ELSE
 237  62FB ~            	DW 0
 238  62FB               ENDIF
 239  62FB 00 00            DW 0 ; W
 240  62FD 00 00            DW 0 ; X
 241  62FF 00 00            DW 0 ; Y
 242  6301 00 00            DW 0 ; Z
 243  6303
 244  6303              CMDS_M:
 245  6303               IF (VRAM_CMDS == 1)
 246  6303 4D 45 4D 56      DB "MEMVRM", 0
 246  6307 52 4D 00
 247  630A 69 5A            DW MEMVRM
 248  630C               ENDIF
 249  630C               IF (RAM_CMDS == 1)
 250  630C 4D 45 4D 43  	DB "MEMCPY", 0
 250  6310 50 59 00
 251  6313 9E 58        	DW MEMCPY
 252  6315               ENDIF
 253  6315               IF (ANIM_CMDS == 1)
 254  6315 4D 41 58 41  	DB "MAXANIMITEMS",0
 254  6319 4E 49 4D 49
 254  631D 54 45 4D 53
 254  6321 00
 255  6322 1A 50        	DW MAXANIMITEMS
 256  6324 4D 41 58 41  	DB "MAXANIMDEFS",0
 256  6328 4E 49 4D 44
 256  632C 45 46 53 00
 257  6330 AA 51        	DW MAXANIMDEFS
 258  6332 4D 41 58 41  	DB "MAXANIMSPRS",0
 258  6336 4E 49 4D 53
 258  633A 50 52 53 00
 259  633E 40 52        	DW MAXANIMSPRS
 260  6340 4D 41 58 41     DB "MAXAUTOSGAMS",0
 260  6344 55 54 4F 53
 260  6348 47 41 4D 53
 260  634C 00
 261  634D 8A 53           DW MAXAUTOSGAMS
 262  634F               ENDIF
 263  634F               IF (VRAM_CMDS + RAM_CMDS + ANIM_CMDS > 0)
 264  634F 00           	DB 0
 265  6350               ENDIF
 266  6350              CMDS_F:
 267  6350               IF (VRAM_CMDS == 1)
 268  6350 46 49 4C 56      DB "FILVRM", 0
 268  6354 52 4D 00
 269  6357 1A 5A            DW FILVRM
 270  6359               ENDIF
 271  6359               IF (RAM_CMDS == 1)
 272  6359 46 49 4C 52      DB "FILRAM", 0
 272  635D 41 4D 00
 273  6360 E2 58            DW FILRAM
 274  6362               ENDIF
 275  6362               IF (VRAM_CMDS + RAM_CMDS > 0)
 276  6362 00               DB 0
 277  6363               ENDIF
 278  6363              CMDS_G:
 279  6363               IF (GENCAL_CMD == 1)
 280  6363 47 45 4E 43      DB "GENCAL", 0
 280  6367 41 4C 00
 281  636A 49 5B            DW GENCAL
 282  636C               ENDIF
 283  636C               IF (GENCAL_CMD > 0)
 284  636C 00           	DB	0
 285  636D               ENDIF
 286  636D              CMDS_V:
 287  636D               IF (VRAM_CMDS == 1)
 288  636D 56 52 4D 4D  	DB "VRMMEM", 0
 288  6371 45 4D 00
 289  6374 E7 5A        	DW VRMMEM
 290  6376               ENDIF
 291  6376               IF (VRAM_CMDS > 0)
 292  6376 00           	DB 0
 293  6377               ENDIF
 294  6377              CMDS_S:
 295  6377               IF (SPRITE_CMDS + ANIM_CMDS > 0)
 296  6377 53 47 41 4D      DB "SGAM",0
 296  637B 00
 297  637C 09 57            DW SGAM
 298  637E               ENDIF
 299  637E               IF (SPRITE_CMDS == 1)
 300  637E 53 50 52 53   	DB "SPRSET", 0
 300  6382 45 54 00
 301  6385 A2 4E        	DW SPRSET
 302  6387 53 50 52 47  	DB "SPRGRPMOV", 0
 302  638B 52 50 4D 4F
 302  638F 56 00
 303  6391 55 4F        	DW SPRGRPMOV
 304  6393               ENDIF
 305  6393               IF (SOUND_CMDS == 1)
 306  6393 53 4E 44 53  	DB "SNDSFX", 0
 306  6397 46 58 00
 307  639A C0 59        	DW SNDSFX
 308  639C 53 4E 44 50  	DB "SNDPLYON", 0
 308  63A0 4C 59 4F 4E
 308  63A4 00
 309  63A5 8A 59        	DW SNDPLYON
 310  63A7 53 4E 44 50  	DB "SNDPLYOFF", 0
 310  63AB 4C 59 4F 46
 310  63AF 46 00
 311  63B1 9D 59        	DW SNDPLYOFF
 312  63B3 53 4E 44 50  	DB "SNDPLYINI", 0
 312  63B7 4C 59 49 4E
 312  63BB 49 00
 313  63BD 40 59        	DW SNDPLYINIT
 314  63BF               ENDIF
 315  63BF               IF (SPRITE_CMDS == 1)
 316  63BF 53 50 52 45  	DB "SPRENABLE", 0
 316  63C3 4E 41 42 4C
 316  63C7 45 00
 317  63C9 5D 4E        	DW SPRENABLE
 318  63CB 53 50 52 44  	DB "SPRDISABLE", 0
 318  63CF 49 53 41 42
 318  63D3 4C 45 00
 319  63D6 9D 4E        	DW SPRDISABLE
 320  63D8               ENDIF
 321  63D8               IF (SOUND_CMDS + SPRITE_CMDS + ANIM_CMDS > 0)
 322  63D8 00           	DB 0
 323  63D9               ENDIF
 324  63D9              CMDS_B:
 325  63D9               IF (BLIT_CMDS == 1)
 326  63D9 42 4C 49 54  	DB "BLIT", 0
 326  63DD 00
 327  63DE 1C 5E        	DW BLIT
 328  63E0               ENDIF
 329  63E0               IF (BOX_CMDS == 1)
 330  63E0 42 4F 58 4D  	DB "BOXMEMCPY", 0
 330  63E4 45 4D 43 50
 330  63E8 59 00
 331  63EA D8 5B        	DW BOXMEMCPY
 332  63EC 42 4F 58 4D  	DB "BOXMEMVRM", 0
 332  63F0 45 4D 56 52
 332  63F4 4D 00
 333  63F6 6E 5C        	DW BOXMEMVRM
 334  63F8               ENDIF
 335  63F8               IF (BLIT_CMDS + BOX_CMDS > 0)
 336  63F8 00           	DB 0
 337  63F9               ENDIF
 338  63F9              CMDS_T:
 339  63F9               IF (TILE_CMDS == 1)
 340  63F9 54 49 4C 45  	DB "TILERAM", 0
 340  63FD 52 41 4D 00
 341  6401 61 5F        	DW TILERAM
 342  6403 54 49 4C 45  	DB "TILEVRM", 0
 342  6407 56 52 4D 00
 343  640B 65 60        	DW TILEVRM
 344  640D               ENDIF
 345  640D               IF (TILE_CMDS > 0)
 346  640D 00           	DB 0
 347  640E               ENDIF
 348  640E              CMDS_A:
 349  640E               IF (ANIM_CMDS == 1)
 350  640E 41 4E 49 4D     DB "ANIMSTEP",0
 350  6412 53 54 45 50
 350  6416 00
 351  6417 5D 55           DW ANIMSTEP
 352  6419 41 4E 49 4D  	DB "ANIMSTART",0
 352  641D 53 54 41 52
 352  6421 54 00
 353  6423 62 55        	DW ANIMSTART
 354  6425 41 4E 49 4D  	DB "ANIMSTOP",0
 354  6429 53 54 4F 50
 354  642D 00
 355  642E 67 55        	DW ANIMSTOP
 356  6430 41 4E 49 4D  	DB "ANIMITEMPAT",0
 356  6434 49 54 45 4D
 356  6438 50 41 54 00
 357  643C EB 50        	DW ANIMITEMPAT
 358  643E 41 4E 49 4D  	DB "ANIMITEMPTR",0
 358  6442 49 54 45 4D
 358  6446 50 54 52 00
 359  644A 51 51        	DW ANIMITEMPTR_CMD
 360  644C 41 4E 49 4D  	DB "ANIMDEF",0
 360  6450 44 45 46 00
 361  6454 ED 51        	DW ANIMDEF
 362  6456 41 4E 49 4D  	DB "ANIMSPRITE",0
 362  645A 53 50 52 49
 362  645E 54 45 00
 363  6461 99 52        	DW ANIMSPRITE
 364  6463 41 4E 49 4D     DB "ANIMCHAR",0
 364  6467 43 48 41 52
 364  646B 00
 365  646C 11 53           DW ANIMCHAR
 366  646E 41 55 54 4F     DB "AUTOSGAMDEF",0
 366  6472 53 47 41 4D
 366  6476 44 45 46 00
 367  647A E7 53           DW AUTOSGAMDEF
 368  647C 41 55 54 4F     DB "AUTOSGAMSTART",0
 368  6480 53 47 41 4D
 368  6484 53 54 41 52
 368  6488 54 00
 369  648A 1E 55           DW AUTOSGAMSTART
 370  648C 41 55 54 4F     DB "AUTOSGAMSTOP",0
 370  6490 53 47 41 4D
 370  6494 53 54 4F 50
 370  6498 00
 371  6499 5A 55           DW AUTOSGAMSTOP
 372  649B 00           	DB 0
 373  649C               ENDIF
 374  649C              CMDS_C:
 375  649C               IF (COLL_CMD == 1)
 376  649C 43 4F 4C 4C      DB "COLL", 0
 376  64A0 00
 377  64A1 32 62            DW COLL
 378  64A3               ENDIF
 379  64A3               IF (COLL_CMD > 0)
 380  64A3 00           	DB	0
 381  64A4               ENDIF
 382  64A4
 383  64A4               IF (VRAM_CMDS + TILE_CMDS + SPRITE_CMDS > 0)
 384  64A4              ; ****************************************************************************************************
 385  64A4              ; function sets VRAM address
 386  64A4              ; input HL=address
 387  64A4              ; modifies AF
 388  64A4              SETWRT_LOCAL:
 389  64A4 7D           	LD	A, L
 390  64A5 D3 99        	OUT	(099H), A
 391  64A7 7C           	LD	A, H
 392  64A8 E6 3F        	AND	03FH
 393  64AA F6 40        	OR	040H
 394  64AC D3 99        	OUT	(099H), A
 395  64AE C9           	RET
 396  64AF              ; ****************************************************************************************************
 397  64AF               ENDIF
 398  64AF
 399  64AF               IF (VRAM_CMDS + TILE_CMDS > 0)
 400  64AF              ; ****************************************************************************************************
 401  64AF              ; function copies data from RAM to VRAM
 402  64AF              ; input HL=address in RAM
 403  64AF              ; input B=count
 404  64AF              ; modifies AF, BC, HL
 405  64AF              BBYTECOPY:
 406  64AF 0E 98        	LD C,#98
 407  64B1              BBYTECOPY_NO_C:
 408  64B1 ED A3        	OUTI
 409  64B3 C2 B1 64     	JP	NZ, BBYTECOPY_NO_C
 410  64B6 C9           	RET
 411  64B7              ; ****************************************************************************************************
 412  64B7               ENDIF
 413  64B7
 414  64B7              ; ****************************************************************************************************
 415  64B7              ; function multiplies HL by 32
 416  64B7              HLx32:
 417  64B7 29           	ADD HL,HL
 418  64B8              ; ****************************************************************************************************
 419  64B8              ; function multiplies HL by 16
 420  64B8              HLx16:
 421  64B8 29           	ADD HL,HL
 422  64B9              ; ****************************************************************************************************
 423  64B9              ; function multiplies HL by 8
 424  64B9              HLx8:
 425  64B9 29          > ADD HL, HL
 425  64BA 29          > ADD HL, HL
 425  64BB 29          > ADD HL, HL
 426  64BC C9           	RET
 427  64BD              ; ****************************************************************************************************
 428  64BD
 429  64BD              ; ****************************************************************************************************
 430  64BD              ; function gets slot and subslot data for specific page
 431  64BD              ; input A=page (0, 1 or 2)
 432  64BD              ; output B = 0A8H register value
 433  64BD              ; output D = 0 is no subslots, 1 if yes
 434  64BD              ; output C = 0A8H value when page 3 slot equals to requested page slot
 435  64BD              ; output E = subslot value if present
 436  64BD              ; modifies AF, BC, DE, HL
 437  64BD              GET_PAGE_INFO:
 438  64BD 6F               LD L, A
 439  64BE C6 C1            ADD A, low (EXPTBL)
 440  64C0 32 CA 64         LD (GET_PAGE_INFO_L1+1), A
 441  64C3 DB A8            IN A, (0A8H)
 442  64C5 47               LD B, A
 443  64C6 E6 3F            AND 03FH
 444  64C8 4F               LD C, A
 445  64C9              GET_PAGE_INFO_L1:
 446  64C9 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 447  64CC E6 80            AND 080H
 448  64CE 28 1B            JR Z, GET_PAGE_INFO_L2
 449  64D0                  ; expanded
 450  64D0 2D               DEC L
 451  64D1 FA F0 64         JP M, GET_PAGE_INFO_L3
 452  64D4 2D               DEC L
 453  64D5 FA EE 64         JP M, GET_PAGE_INFO_L4
 454  64D8                  ; page 2
 455  64D8 07               RLCA
 456  64D9 07               RLCA
 457  64DA              GET_PAGE_INFO_L5:
 458  64DA E6 C0            AND 0C0H
 459  64DC B1               OR C
 460  64DD D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 461  64DF 4F               LD C, A
 462  64E0 3A FF FF         LD A, (0FFFFH)
 463  64E3 2F               CPL
 464  64E4 5F               LD E, A
 465  64E5 16 01            LD D, 1
 466  64E7 78               LD A, B ; return stack
 467  64E8 D3 A8            OUT (0A8H), A
 468  64EA C9               RET
 469  64EB              GET_PAGE_INFO_L2:
 470  64EB                  ; not expanded
 471  64EB 16 00            LD D, 0
 472  64ED C9               RET
 473  64EE              GET_PAGE_INFO_L4:
 474  64EE                  ; page 1
 475  64EE 0F               RRCA
 476  64EF 0F               RRCA
 477  64F0              GET_PAGE_INFO_L3:
 478  64F0                  ; page 0
 479  64F0 0F               RRCA
 480  64F1 0F               RRCA
 481  64F2 18 E6            JR GET_PAGE_INFO_L5
 482  64F4              ; ****************************************************************************************************
 483  64F4
 484  64F4              ; ****************************************************************************************************
 485  64F4              ; function returns original slot and subslot info
 486  64F4              ; input B = 0A8H register value
 487  64F4              ; input D = 0 is no subslots, 1 if yes
 488  64F4              ; input C = 0A8H value when page 3 slot equals to requested page slot
 489  64F4              ; input E = subslot value if present
 490  64F4              ; modifies AF, disables interrupts
 491  64F4              RESTORE_PAGE_INFO:
 492  64F4 7A              LD A, D
 493  64F5 B7              OR A
 494  64F6 28 08           JR Z, RESTORE_PAGE_INFO_L1
 495  64F8 79              LD A, C
 496  64F9 F3           	DI
 497  64FA D3 A8           OUT (0A8H), A
 498  64FC 7B              LD A, E
 499  64FD 32 FF FF        LD (0FFFFH), A
 500  6500              RESTORE_PAGE_INFO_L1:
 501  6500 78              LD A, B
 502  6501 D3 A8           OUT (0A8H), A
 503  6503 C9              RET
 504  6504              ; ****************************************************************************************************
 505  6504
 506  6504              ; *******************************************************************************************************
 507  6504              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 508  6504              ; INPUT:  A = SLOT ID: EXXXSSPP
 509  6504              ; E = EXPANDED FLAG
 510  6504              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 511  6504              ; PP = PRIMARY SLOT NUMBER
 512  6504              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 513  6504              ; CHANGES: AF, BC, DE
 514  6504
 515  6504              LOCAL_ENASLT:
 516  6504 CD 24 65         CALL L0353
 517  6507 FA 11 65         JP M, L0340
 518  650A DB A8            IN A, (0A8H)
 519  650C A1               AND C
 520  650D B0               OR B
 521  650E D3 A8            OUT (0A8H), A
 522  6510 C9               RET
 523  6511              L0340:
 524  6511 E5               PUSH HL
 525  6512 CD 49 65         CALL L0378
 526  6515 4F               LD C, A
 527  6516 06 00            LD B, 0
 528  6518 7D               LD A, L
 529  6519 A4               AND H
 530  651A B2               OR D
 531  651B 21 C5 FC         LD HL, 0FCC5H
 532  651E 09               ADD HL, BC
 533  651F 77               LD (HL), A
 534  6520 E1               POP HL
 535  6521 79               LD A, C
 536  6522 18 E0            JR LOCAL_ENASLT
 537  6524              L0353:
 538  6524 F3               DI
 539  6525 F5               PUSH AF
 540  6526 7C               LD A, H
 541  6527 07               RLCA
 542  6528 07               RLCA
 543  6529 E6 03            AND 3
 544  652B 5F               LD E, A
 545  652C 3E C0            LD A, 0C0H
 546  652E              L035D:
 547  652E 07               RLCA
 548  652F 07               RLCA
 549  6530 1D               DEC E
 550  6531 F2 2E 65         JP P, L035D
 551  6534 5F               LD E, A
 552  6535 2F               CPL
 553  6536 4F               LD C, A
 554  6537 F1               POP AF
 555  6538 F5               PUSH AF
 556  6539 E6 03            AND 3
 557  653B 3C               INC A
 558  653C 47               LD B, A
 559  653D 3E AB            LD A, 0ABH
 560  653F              L036E:
 561  653F C6 55            ADD A, 055H
 562  6541 10 FC            DJNZ L036E
 563  6543 57               LD D, A
 564  6544 A3               AND E
 565  6545 47               LD B, A
 566  6546 F1               POP AF
 567  6547 A7               AND A
 568  6548 C9               RET
 569  6549              L0378:
 570  6549 F5               PUSH AF
 571  654A 7A               LD A, D
 572  654B E6 C0            AND 0C0H
 573  654D 4F               LD C, A
 574  654E F1               POP AF
 575  654F F5               PUSH AF
 576  6550 57               LD D, A
 577  6551 DB A8            IN A, (0A8H)
 578  6553 47               LD B, A
 579  6554 E6 3F            AND 03FH
 580  6556 B1               OR C
 581  6557 D3 A8            OUT (0A8H), A
 582  6559 7A               LD A, D
 583  655A 0F               RRCA
 584  655B 0F               RRCA
 585  655C E6 03            AND 3
 586  655E 57               LD D, A
 587  655F 3E AB            LD A, 0ABH
 588  6561              L0390:
 589  6561 C6 55            ADD A, 055H
 590  6563 15               DEC D
 591  6564 F2 61 65         JP P, L0390
 592  6567 A3               AND E
 593  6568 57               LD D, A
 594  6569 7B               LD A, E
 595  656A 2F               CPL
 596  656B 67               LD H, A
 597  656C 3A FF FF         LD A, (0FFFFH)
 598  656F 2F               CPL
 599  6570 6F               LD L, A
 600  6571 A4               AND H
 601  6572 B2               OR D
 602  6573 32 FF FF         LD (0FFFFH), A
 603  6576 78               LD A, B
 604  6577 D3 A8            OUT (0A8H), A
 605  6579 F1               POP AF
 606  657A E6 03            AND 3
 607  657C C9               RET
 608  657D              ; *******************************************************************************************************
 609  657D
 610  657D              ; *******************************************************************************************************
 611  657D              ; some common code to activate page 0 and place values needed to restore original page on stack
 612  657D              ; input IY=return address
 613  657D              ENABLE_PAGE0:
 614  657D AF              XOR A
 615  657E CD BD 64        CALL GET_PAGE_INFO
 616  6581 C5              PUSH BC
 617  6582 D5              PUSH DE
 618  6583 3A 41 F3        LD A, (RAMAD0)
 619  6586 26 00           LD H, 0
 620  6588 CD 04 65        CALL LOCAL_ENASLT
 621  658B FD E9        	JP (IY)
 622  658D              ; *******************************************************************************************************
 623  658D
 624  658D              ; General BASIC CALL-instruction handler
 625  658D              CALLHAND:
 626  658D FB              EI
 627  658E E5           	PUSH HL
 628  658F 21 CF 62     	LD	HL, CMDS ; pointer table based on starting letter
 629  6592 3A 89 FD        LD A, (PROCNM)
 630  6595 D6 41           SUB 'A'
 631  6597 87              ADD A, A
 632  6598 16 00           LD D, 0
 633  659A 5F              LD E, A
 634  659B 19              ADD HL, DE
 635  659C 5E              LD E, (HL)
 636  659D 23              INC HL
 637  659E 56              LD D, (HL)
 638  659F 7A              LD A, D
 639  65A0 B3              OR E
 640  65A1 28 23           JR Z, .CMDNOTRECOGNIZED
 641  65A3 EB              EX DE, HL
 642  65A4              .CHKCMD:
 643  65A4 11 89 FD     	LD	DE, PROCNM
 644  65A7              .LOOP:
 645  65A7 1A              LD	A,(DE)
 646  65A8 BE           	CP	(HL)
 647  65A9 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 648  65AB 13           	INC	DE
 649  65AC 23           	INC	HL
 650  65AD A7           	AND	A
 651  65AE 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 652  65B0 5E           	LD	E,(HL)
 653  65B1 23           	INC	HL
 654  65B2 56           	LD	D,(HL)
 655  65B3 E1           	POP	HL		; routine address
 656  65B4 CD D5 65     	CALL	GETPREVCHAR
 657  65B7 CD C9 65     	CALL	.CALLDE		; Call routine
 658  65BA A7           	AND	A
 659  65BB C9           	RET
 660  65BC
 661  65BC              .TONEXTCMD:
 662  65BC 0E FF        	LD	C,0FFH
 663  65BE AF           	XOR	A
 664  65BF ED B1        	CPIR			; Skip to end of instruction name
 665  65C1 23           	INC	HL
 666  65C2 23           	INC	HL		; Skip address
 667  65C3 BE           	CP	(HL)
 668  65C4 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 669  65C6              .CMDNOTRECOGNIZED:
 670  65C6 E1           	POP	HL
 671  65C7 37              SCF
 672  65C8 C9           	RET
 673  65C9
 674  65C9              .CALLDE:
 675  65C9 D5           	PUSH	DE
 676  65CA C9           	RET
 677  65CB
 678  65CB              ;---------------------------
 679  65CB
 680  65CB              ;GETSTRPNT:
 681  65CB              ; OUT:
 682  65CB              ; HL = String Address
 683  65CB              ; B  = Lenght
 684  65CB              ;        LD      HL,(USR)
 685  65CB              ;        LD      B,(HL)
 686  65CB              ;        INC     HL
 687  65CB              ;        LD      E,(HL)
 688  65CB              ;        INC     HL
 689  65CB              ;        LD      D,(HL)
 690  65CB              ;        EX      DE,HL
 691  65CB              ;        RET
 692  65CB
 693  65CB              ;EVALTXTPARAM:
 694  65CB              ;	CALL	CHKCHAR
 695  65CB              ;	DEFB	"("             ; Check for (
 696  65CB              ;	LD	IX,FRMEVL
 697  65CB              ;	CALL	CALBAS		; Evaluate expression
 698  65CB              ;       LD      A,(VALTYP)
 699  65CB              ;        CP      3               ; Text type?
 700  65CB              ;        JP      NZ,TYPE_MISMATCH
 701  65CB              ;        PUSH	HL
 702  65CB              ;        LD	IX,FRESTR         ; Free the temporary string
 703  65CB              ;        CALL	CALBAS
 704  65CB              ;        POP	HL
 705  65CB              ;	CALL	CHKCHAR
 706  65CB              ;	DEFB	")"             ; Check for )
 707  65CB              ;        RET
 708  65CB
 709  65CB
 710  65CB              CHKCHAR:
 711  65CB CD D5 65     	CALL	GETPREVCHAR	; Get previous basic char
 712  65CE E3           	EX	(SP),HL
 713  65CF BE           	CP	(HL) 	        ; Check if good char
 714  65D0 20 1D        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 715  65D2 23           	INC	HL
 716  65D3 E3           	EX	(SP),HL
 717  65D4 23           	INC	HL		; Get next basic char
 718  65D5
 719  65D5              GETPREVCHAR:
 720  65D5 2B           	DEC HL
 721  65D6 DD 21 66 46  	LD	IX,CHRGTR
 722  65DA CD 59 01     	CALL CALBAS
 723  65DD FB              EI
 724  65DE C9              RET
 725  65DF
 726  65DF
 727  65DF              TYPE_MISMATCH:
 728  65DF 1E 0D            LD E, 13 ; Type mismatch
 729  65E1 18 0E            JR THROW_ERROR
 730  65E3              SUBSCRIPT_OUT_OF_RANGE:
 731  65E3 1E 09            LD E,9 ; subscript out of range
 732  65E5 18 0A        	JR THROW_ERROR
 733  65E7              OVERFLOW:
 734  65E7 1E 06        	LD E,6
 735  65E9 18 06        	JR THROW_ERROR
 736  65EB              ILLEGAL_FUNCTION:
 737  65EB 1E 05            LD E, 5 ; illegal function call
 738  65ED 18 02            JR THROW_ERROR
 739  65EF              SYNTAX_ERROR:
 740  65EF 1E 02            LD E, 2 ; Syntax error
 741  65F1              THROW_ERROR:
 742  65F1 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 743  65F5 C3 59 01     	JP	CALBAS
 744  65F8
 745  65F8              ;---------------------------
 746  65F8
 747  65F8              ; *******************************************************************************************************
 748  65F8              ; helper function to get pointer to BASIC array data
 749  65F8              ; input A=data type (2=INT,4=SINGLE,8=DOUBLE)
 750  65F8              ; input B=dimensions (1 or 2)
 751  65F8              ; input D=minimal first dimension
 752  65F8              ; input E=minimal second dimension, if applicable
 753  65F8              ; returns BC=pointer to first data element
 754  65F8              ; throws BASIC error if invalid type
 755  65F8              GET_BASIC_ARRAY_DATA_POINTER:
 756  65F8 D5           	PUSH DE
 757  65F9 C5           	PUSH BC
 758  65FA F5           	PUSH AF
 759  65FB 3E 01           LD A,1
 760  65FD 32 A5 F6        LD (SUBFLG),A ; search for arrays only
 761  6600 DD 21 A4 5E  	LD IX, PTRGET
 762  6604 CD 59 01     	CALL CALBAS
 763  6607 AF              XOR A
 764  6608 32 A5 F6        LD (SUBFLG),A ; if not reset will cause syntax errors
 765  660B 3A 63 F6     	LD A,(VALTYP)
 766  660E D1           	POP DE ; required type
 767  660F BA           	CP D
 768  6610 C2 DF 65     	JP NZ,TYPE_MISMATCH
 769  6613 0A           	LD A,(BC)
 770  6614 03           	INC BC
 771  6615 D1           	POP DE ; required number of dimensions
 772  6616 BA           	CP D
 773  6617 C2 DF 65     	JP NZ,TYPE_MISMATCH
 774  661A D1           	POP DE ; required minimal array dimensions
 775  661B 3D           	DEC A
 776  661C 28 07        	JR Z,.ONE_DIMENSION
 777  661E              	; 2-dimension array
 778  661E 0A           	LD A,(BC)
 779  661F 03          > INC BC
 779  6620 03          > INC BC
 780  6621 BB           	CP E
 781  6622 DA E3 65     	JP C,SUBSCRIPT_OUT_OF_RANGE
 782  6625              .ONE_DIMENSION:
 783  6625 0A           	LD A,(BC)
 784  6626 03          > INC BC
 784  6627 03          > INC BC
 785  6628 BA           	CP D
 786  6629 DA E3 65     	JP C,SUBSCRIPT_OUT_OF_RANGE
 787  662C C9           	RET
 788  662D              ; *******************************************************************************************************
 789  662D
 790  662D              EXT_END:
 791  662D
# file closed: asm\main.asm
