# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; control variables to include/exclude parts of code
   4  4000              SOUND_CMDS	 	EQU 1
   5  4000              RAM_CMDS 		EQU 1
   6  4000              VRAM_CMDS 		EQU 1
   7  4000              BLIT_CMDS		EQU 1
   8  4000              SPRITE_CMDS 	EQU 1
   9  4000              GENCAL_CMD		EQU 1
  10  4000              TILE_CMDS		EQU 1
  11  4000              BOX_CMDS		   EQU 1
  12  4000              ANIM_CMDS		EQU 1
  13  4000              COLL_CMD       EQU 1
  14  4000
  15  4000               DEFINE CMDS_WITH_PARAMETERS
  16  4000
  17  4000              CHPUT   EQU    #A2
  18  4000              CALBAS  EQU		#159
  19  4000              ERRHAND EQU    #406F
  20  4000              FRMEVL  EQU    #4C64
  21  4000              FRESTR  EQU		#67D0
  22  4000              ; FRMQNT = formula quantificator
  23  4000              ; input HL=pointer to current program expression
  24  4000              ; output HL=next address
  25  4000              ; output DE=integer datum
  26  4000              FRMQNT	EQU		#542F
  27  4000              ; GETBYT = get byte parameter
  28  4000              ; input HL=pointer to current program expression
  29  4000              ; output HL=next address
  30  4000              ; output A=E=byte read
  31  4000              GETBYT		EQU	#521C
  32  4000              CHRGTR  	   EQU   #4666
  33  4000              PTRGET		EQU 	#5EA4
  34  4000              SUBFLG		EQU	#F6A5
  35  4000              SYNCHR		EQU	#558C
  36  4000              VALTYP  	   EQU   #F663
  37  4000              DAC         EQU   #F7F6
  38  4000              USR     	   EQU   #F7F8
  39  4000              PROCNM		EQU	#FD89
  40  4000              BIOS_FILVRM EQU   #0056
  41  4000              CLIKSW		EQU	#F3DB
  42  4000
  43  4000              RAMAD0	   EQU	#F341	; Main-RAM Slot (00000h~03FFFh)
  44  4000              RAMAD1	   EQU	#F342	; Main-RAM Slot (04000h~07FFFh)
  45  4000              RAMAD2	   EQU	#F343	; Main-RAM Slot (08000h~0BFFFh)
  46  4000              RAMAD3	   EQU	#F344	; Main-RAM Slot (0C000h~0FFFFh)
  47  4000              EXPTBL	   EQU   #FCC1
  48  4000              SCRMOD	   EQU   #FCAF ; current screen mode
  49  4000              REG1SAV     EQU   #F3E0 ; VDP(1)
  50  4000              JIFFY	      EQU   #FC9E
  51  4000              GRPPAT	   EQU   #F3CF ; SCREEN 2 sprite generator table address
  52  4000              GRPCGP		EQU	#F3CB ; SCREEN 2 pattern generator table address
  53  4000              GRPATR      EQU   #F3CD ; SCREEN 2 sprite attribute table address
  54  4000              T32PAT	   EQU   #F3C5 ; SCREEN 1 sprite generator table address
  55  4000              T32CGP      EQU   #F3C1 ; SCREEN 1 pattern ganarator table address
  56  4000              T32ATR      EQU   #F3C3 ; SCREEN 1 sprite attribute table address
  57  4000
  58  4000              ; BASIC error codes
  59  4000              ;01 NEXT without FOR
  60  4000              ;02 Syntax error
  61  4000              ;03 RETURN without GOSUB
  62  4000              ;04 Out of DATA
  63  4000              ;05 Illegal function call
  64  4000              ;06 Overflow
  65  4000              ;07 Out of memory
  66  4000              ;08 Undefined line number
  67  4000              ;09 Subscript out of range
  68  4000              ;10 Redimensioned array
  69  4000              ;11 Division by zero
  70  4000              ;12 Illegal direct
  71  4000              ;13 Type mismatch
  72  4000              ;14 Out of string space
  73  4000              ;15 String too long
  74  4000              ;16 String formula too complex
  75  4000              ;17 Can't CONTINUE
  76  4000              ;18 Undefined user function
  77  4000              ;19 Device I/O error
  78  4000              ;20 Verify error
  79  4000              ;21 No RESUME
  80  4000              ;22 RESUME without error
  81  4000              ;23 Unprintable error
  82  4000              ;24 Missing operand
  83  4000              ;25 Line buffer overflow
  84  4000              ;50 FIELD overflow
  85  4000              ;51 Internal error
  86  4000              ;52 Bad file number
  87  4000              ;53 File not found
  88  4000              ;54 File already open
  89  4000              ;55 Input past end
  90  4000              ;56 Bad file name
  91  4000              ;57 Direct statement in file
  92  4000              ;58 Sequential I/O only
  93  4000              ;59 File not OPEN
  94  4000
  95  4000
  96  4000               ; simulate cartridge with BASIC extension
  97  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  97  4004 7F 65 00 00
  97  4008 00 00 00 00
  97  400C 00 00 00 00
  98  4010
  99  4010              ; this location #4010 stores last location used by basic extension
 100  4010              ; free memory after that point
 101  4010              FREEMEMPTR:
 102  4010 1F 66         DW EXT_END
 103  4012
 104  4012              ; this location #4012 stores extension version in DAA format
 105  4012              ; first byte is major version and second minor
 106  4012              VERSION:
 107  4012 00 80         DB #00, #80
 108  4014
 109  4014              ; binary included AKG player compiled at #4014
 110  4014               IF (SOUND_CMDS == 1)
 111  4014              	INCBIN "bin/AKG.bin"
 112  4CF0              	INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CF0              MAIN_PLAYER_START EQU 04014H
   2+ 4CF0              PLY_AKG_START EQU 04014H
   3+ 4CF0              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401DH
   4+ 4CF0              PLY_AKG_INITSOUNDEFFECTS EQU 0401DH
   5+ 4CF0              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 04021H
   6+ 4CF0              PLY_AKG_PLAYSOUNDEFFECT EQU 04021H
   7+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04022H
   8+ 4CF0              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04022H
   9+ 4CF0              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04049H
  10+ 4CF0              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04049H
  11+ 4CF0              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04057H
  12+ 4CF0              PLY_AKG_PSES_PLAY EQU 04090H
  13+ 4CF0              PLY_AKG_PSES_READFIRSTBYTE EQU 04099H
  14+ 4CF0              PLY_AKG_PSES_S_ENDORLOOP EQU 040B1H
  15+ 4CF0              PLY_AKG_PSES_S_LOOP EQU 040BCH
  16+ 4CF0              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C2H
  17+ 4CF0              PLY_AKG_PSES_NOTREACHED EQU 040D5H
  18+ 4CF0              PLY_AKG_PSES_HARDWAREONLY EQU 040D9H
  19+ 4CF0              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040E0H
  20+ 4CF0              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F2H
  21+ 4CF0              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FCH
  22+ 4CF0              PLY_AKG_PSES_H_AFTERRETRIG EQU 04106H
  23+ 4CF0              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 0411AH
  24+ 4CF0              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411FH
  25+ 4CF0              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04127H
  26+ 4CF0              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04132H
  27+ 4CF0              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413EH
  28+ 4CF0              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 04140H
  29+ 4CF0              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04146H
  30+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 0414AH
  31+ 4CF0              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 0414AH
  32+ 4CF0              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414CH
  33+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414CH
  34+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414CH
  35+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414DH
  36+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414EH
  37+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04152H
  38+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04152H
  39+ 4CF0              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04152H
  40+ 4CF0              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 0415AH
  41+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04162H
  42+ 4CF0              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04162H
  43+ 4CF0              PLY_AKG_INIT EQU 04162H
  44+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04162H
  45+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 04190H
  46+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A4H
  47+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B6H
  48+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D5H
  49+ 4CF0              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E2H
  50+ 4CF0              PLY_AKG_INIT_READWORDSANDFILL EQU 041E8H
  51+ 4CF0              PLY_AKG_INITTABLE0 EQU 041EBH
  52+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041EBH
  53+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04205H
  54+ 4CF0              PLY_AKG_INITTABLE0_END EQU 04205H
  55+ 4CF0              PLY_AKG_INITTABLE1 EQU 04205H
  56+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04205H
  57+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04209H
  58+ 4CF0              PLY_AKG_INITTABLE1_END EQU 04209H
  59+ 4CF0              PLY_AKG_INITTABLEORA EQU 04209H
  60+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04209H
  61+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 04221H
  62+ 4CF0              PLY_AKG_INITTABLEORA_END EQU 04221H
  63+ 4CF0              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 04221H
  64+ 4CF0              PLY_AKG_STOP EQU 04221H
  65+ 4CF0              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04233H
  66+ 4CF0              PLY_AKG_PLAY EQU 04233H
  67+ 4CF0              PLY_AKG_TICKDECREASINGCOUNTER EQU 0423BH
  68+ 4CF0              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 04241H
  69+ 4CF0              PLY_AKG_READLINKER EQU 04246H
  70+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04246H
  71+ 4CF0              PLY_AKG_READLINKER_PTLINKER EQU 04246H
  72+ 4CF0              PLY_AKG_READLINKER_NOLOOP EQU 04251H
  73+ 4CF0              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 0428AH
  74+ 4CF0              PLY_AKG_READLINE EQU 0428DH
  75+ 4CF0              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428DH
  76+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04293H
  77+ 4CF0              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04293H
  78+ 4CF0              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 042A0H
  79+ 4CF0              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A4H
  80+ 4CF0              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A7H
  81+ 4CF0              PLY_AKG_SPEEDTRACK_END EQU 042AAH
  82+ 4CF0              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042AAH
  83+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042B0H
  84+ 4CF0              PLY_AKG_EVENTTRACK_PTTRACK EQU 042B0H
  85+ 4CF0              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BDH
  86+ 4CF0              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042C1H
  87+ 4CF0              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C4H
  88+ 4CF0              PLY_AKG_EVENTTRACK_END EQU 042C7H
  89+ 4CF0              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C7H
  90+ 4CF0              PLY_AKG_CHANNEL1_READTRACK EQU 042D3H
  91+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D3H
  92+ 4CF0              PLY_AKG_CHANNEL1_PTTRACK EQU 042D3H
  93+ 4CF0              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042EEH
  94+ 4CF0              PLY_AKG_CHANNEL1_WAIT EQU 042F9H
  95+ 4CF0              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 04300H
  96+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 04300H
  97+ 4CF0              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 04300H
  98+ 4CF0              PLY_AKG_CHANNEL1_NOTE EQU 04309H
  99+ 4CF0              PLY_AKG_BASENOTEINDEX EQU 04309H
 100+ 4CF0              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 0430BH
 101+ 4CF0              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 0430BH
 102+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 0431BH
 103+ 4CF0              PLY_AKG_INSTRUMENTSTABLE EQU 0431BH
 104+ 4CF0              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432DH
 105+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433DH
 106+ 4CF0              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04365H
 107+ 4CF0              PLY_AKG_CHANNEL1_READCELLEND EQU 04368H
 108+ 4CF0              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04368H
 109+ 4CF0              PLY_AKG_CHANNEL2_READTRACK EQU 04374H
 110+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04374H
 111+ 4CF0              PLY_AKG_CHANNEL2_PTTRACK EQU 04374H
 112+ 4CF0              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438FH
 113+ 4CF0              PLY_AKG_CHANNEL2_WAIT EQU 0439AH
 114+ 4CF0              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 043A1H
 115+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 043A1H
 116+ 4CF0              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 043A1H
 117+ 4CF0              PLY_AKG_CHANNEL2_NOTE EQU 043AAH
 118+ 4CF0              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043AFH
 119+ 4CF0              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043AFH
 120+ 4CF0              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043D1H
 121+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043E1H
 122+ 4CF0              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04409H
 123+ 4CF0              PLY_AKG_CHANNEL2_READCELLEND EQU 0440CH
 124+ 4CF0              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440CH
 125+ 4CF0              PLY_AKG_CHANNEL3_READTRACK EQU 04418H
 126+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04418H
 127+ 4CF0              PLY_AKG_CHANNEL3_PTTRACK EQU 04418H
 128+ 4CF0              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04433H
 129+ 4CF0              PLY_AKG_CHANNEL3_WAIT EQU 0443EH
 130+ 4CF0              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04445H
 131+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04445H
 132+ 4CF0              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04445H
 133+ 4CF0              PLY_AKG_CHANNEL3_NOTE EQU 0444EH
 134+ 4CF0              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04453H
 135+ 4CF0              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04453H
 136+ 4CF0              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04475H
 137+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04485H
 138+ 4CF0              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ADH
 139+ 4CF0              PLY_AKG_CHANNEL3_READCELLEND EQU 044B0H
 140+ 4CF0              PLY_AKG_CURRENTSPEED EQU 044B0H
 141+ 4CF0              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B2H
 142+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B5H
 143+ 4CF0              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B5H
 144+ 4CF0              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B8H
 145+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044BBH
 146+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044BBH
 147+ 4CF0              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C7H
 148+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CEH
 149+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044D1H
 150+ 4CF0              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D7H
 151+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044DAH
 152+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044DAH
 153+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E8H
 154+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EDH
 155+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F8H
 156+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044FBH
 157+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044FBH
 158+ 4CF0              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FEH
 159+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 04501H
 160+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE EQU 04501H
 161+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 0450AH
 162+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04514H
 163+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04517H
 164+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04517H
 165+ 4CF0              PLY_AKG_CHANNEL1_PITCH EQU 04517H
 166+ 4CF0              PLY_AKG_CHANNEL1_ISPITCH EQU 0451AH
 167+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451FH
 168+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451FH
 169+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04523H
 170+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04525H
 171+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04527H
 172+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452EH
 173+ 4CF0              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452FH
 174+ 4CF0              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04532H
 175+ 4CF0              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04532H
 176+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454EH
 177+ 4CF0              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454EH
 178+ 4CF0              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 0455BH
 179+ 4CF0              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455FH
 180+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456FH
 181+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456FH
 182+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 04570H
 183+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 04571H
 184+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04573H
 185+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04573H
 186+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04573H
 187+ 4CF0              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04574H
 188+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04575H
 189+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04577H
 190+ 4CF0              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04577H
 191+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04577H
 192+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04577H
 193+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04577H
 194+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_END EQU 0457AH
 195+ 4CF0              PLY_AKG_CHANNEL1_PITCH_END EQU 0457CH
 196+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04584H
 197+ 4CF0              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04584H
 198+ 4CF0              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04587H
 199+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 0458AH
 200+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 0458AH
 201+ 4CF0              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04596H
 202+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459DH
 203+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 045A0H
 204+ 4CF0              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A6H
 205+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A9H
 206+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A9H
 207+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B7H
 208+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BCH
 209+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C7H
 210+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045CAH
 211+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045CAH
 212+ 4CF0              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CDH
 213+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045D0H
 214+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045D0H
 215+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D9H
 216+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E3H
 217+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E6H
 218+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E6H
 219+ 4CF0              PLY_AKG_CHANNEL2_PITCH EQU 045E6H
 220+ 4CF0              PLY_AKG_CHANNEL2_ISPITCH EQU 045E9H
 221+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045EEH
 222+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045EEH
 223+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F2H
 224+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F4H
 225+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F6H
 226+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FDH
 227+ 4CF0              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FEH
 228+ 4CF0              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04601H
 229+ 4CF0              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 04601H
 230+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461DH
 231+ 4CF0              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461DH
 232+ 4CF0              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 0462AH
 233+ 4CF0              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462EH
 234+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463EH
 235+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463EH
 236+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463FH
 237+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 04640H
 238+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04642H
 239+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04642H
 240+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04642H
 241+ 4CF0              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04643H
 242+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04644H
 243+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04646H
 244+ 4CF0              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04646H
 245+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04646H
 246+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04646H
 247+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04646H
 248+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_END EQU 04649H
 249+ 4CF0              PLY_AKG_CHANNEL2_PITCH_END EQU 0464BH
 250+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04653H
 251+ 4CF0              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04653H
 252+ 4CF0              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04656H
 253+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04659H
 254+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04659H
 255+ 4CF0              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04665H
 256+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466CH
 257+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466FH
 258+ 4CF0              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04675H
 259+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04678H
 260+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04678H
 261+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04686H
 262+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 0468BH
 263+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04696H
 264+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04699H
 265+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04699H
 266+ 4CF0              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469CH
 267+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469FH
 268+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469FH
 269+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A8H
 270+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B2H
 271+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B5H
 272+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B5H
 273+ 4CF0              PLY_AKG_CHANNEL3_PITCH EQU 046B5H
 274+ 4CF0              PLY_AKG_CHANNEL3_ISPITCH EQU 046B8H
 275+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BDH
 276+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BDH
 277+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046C1H
 278+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C3H
 279+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C5H
 280+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CCH
 281+ 4CF0              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CDH
 282+ 4CF0              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046D0H
 283+ 4CF0              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046D0H
 284+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046ECH
 285+ 4CF0              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046ECH
 286+ 4CF0              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F9H
 287+ 4CF0              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FDH
 288+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470DH
 289+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470DH
 290+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470EH
 291+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470FH
 292+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 04711H
 293+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 04711H
 294+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 04711H
 295+ 4CF0              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04712H
 296+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04713H
 297+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04715H
 298+ 4CF0              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04715H
 299+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04715H
 300+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04715H
 301+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04715H
 302+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_END EQU 04718H
 303+ 4CF0              PLY_AKG_CHANNEL3_PITCH_END EQU 0471AH
 304+ 4CF0              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04726H
 305+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04726H
 306+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04726H
 307+ 4CF0              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04729H
 308+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 0472BH
 309+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 04731H
 310+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04734H
 311+ 4CF0              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04734H
 312+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04737H
 313+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 04740H
 314+ 4CF0              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04748H
 315+ 4CF0              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04755H
 316+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04755H
 317+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04755H
 318+ 4CF0              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04758H
 319+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 0475AH
 320+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 04760H
 321+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04763H
 322+ 4CF0              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04763H
 323+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04766H
 324+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476FH
 325+ 4CF0              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04777H
 326+ 4CF0              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04785H
 327+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04785H
 328+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04785H
 329+ 4CF0              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04788H
 330+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 0478AH
 331+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 04790H
 332+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04793H
 333+ 4CF0              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04793H
 334+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04796H
 335+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479FH
 336+ 4CF0              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A7H
 337+ 4CF0              PLY_AKG_SENDPSGREGISTERS EQU 047B6H
 338+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BEH
 339+ 4CF0              PLY_AKG_PSGREG01_INSTR EQU 047BEH
 340+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CEH
 341+ 4CF0              PLY_AKG_PSGREG23_INSTR EQU 047CEH
 342+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DFH
 343+ 4CF0              PLY_AKG_PSGREG45_INSTR EQU 047DFH
 344+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047F0H
 345+ 4CF0              PLY_AKG_PSGREG6_8_INSTR EQU 047F0H
 346+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 04801H
 347+ 4CF0              PLY_AKG_PSGREG9_10_INSTR EQU 04801H
 348+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04812H
 349+ 4CF0              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04812H
 350+ 4CF0              PLY_AKG_PSGREG13_OLDVALUE EQU 04827H
 351+ 4CF0              PLY_AKG_RETRIG EQU 04829H
 352+ 4CF0              PLY_AKG_PSGREG13_INSTR EQU 0482BH
 353+ 4CF0              PLY_AKG_PSGREG13_END EQU 0483AH
 354+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 0483AH
 355+ 4CF0              PLY_AKG_SAVESP EQU 0483AH
 356+ 4CF0              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483EH
 357+ 4CF0              PLY_AKG_CHANNEL1_READEFFECTS EQU 04846H
 358+ 4CF0              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04853H
 359+ 4CF0              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04853H
 360+ 4CF0              PLY_AKG_CHANNEL2_READEFFECTS EQU 0485BH
 361+ 4CF0              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04868H
 362+ 4CF0              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04868H
 363+ 4CF0              PLY_AKG_CHANNEL3_READEFFECTS EQU 04870H
 364+ 4CF0              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 0487BH
 365+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS EQU 0487BH
 366+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 0488AH
 367+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 0488AH
 368+ 4CF0              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 04891H
 369+ 4CF0              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 048A1H
 370+ 4CF0              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 048A1H
 371+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A8H
 372+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A8H
 373+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048ABH
 374+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B4H
 375+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B4H
 376+ 4CF0              PLY_AKG_READINSTRUMENTCELL EQU 048BAH
 377+ 4CF0              PLY_AKG_NOSOFTNOHARD EQU 048C7H
 378+ 4CF0              PLY_AKG_NSNH_NONOISE EQU 048DCH
 379+ 4CF0              PLY_AKG_SOFT EQU 048DFH
 380+ 4CF0              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E6H
 381+ 4CF0              PLY_AKG_S_NOTSIMPLE EQU 048EEH
 382+ 4CF0              PLY_AKG_S_AFTERSIMPLETEST EQU 048F1H
 383+ 4CF0              PLY_AKG_HARDTOSOFT EQU 048FEH
 384+ 4CF0              PLY_AKG_HS_JUMPRATIO EQU 04909H
 385+ 4CF0              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04936H
 386+ 4CF0              PLY_AKG_ENDWITHOUTLOOP EQU 04938H
 387+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04938H
 388+ 4CF0              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04938H
 389+ 4CF0              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 04940H
 390+ 4CF0              PLY_AKG_SH_JUMPRATIO EQU 0494DH
 391+ 4CF0              PLY_AKG_SH_JUMPRATIOEND EQU 0496EH
 392+ 4CF0              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497DH
 393+ 4CF0              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04983H
 394+ 4CF0              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499DH
 395+ 4CF0              PLY_AKG_H_RETRIGEND EQU 049AFH
 396+ 4CF0              PLY_AKG_H_AFTERRETRIG EQU 049B0H
 397+ 4CF0              PLY_AKG_ENDWITHLOOP EQU 049C2H
 398+ 4CF0              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C9H
 399+ 4CF0              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DFH
 400+ 4CF0              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EDH
 401+ 4CF0              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FDH
 402+ 4CF0              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A0BH
 403+ 4CF0              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A1AH
 404+ 4CF0              PLY_AKG_SHOHS_RETRIGEND EQU 04A29H
 405+ 4CF0              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A2AH
 406+ 4CF0              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3CH
 407+ 4CF0              PLY_AKG_EFFECTTABLE EQU 04A4AH
 408+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A4AH
 409+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6EH
 410+ 4CF0              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6EH
 411+ 4CF0              PLY_AKG_EFFECT_RESET EQU 04A71H
 412+ 4CF0              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A73H
 413+ 4CF0              PLY_AKG_EFFECT_VOLUME EQU 04A8EH
 414+ 4CF0              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A9AH
 415+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04AA0H
 416+ 4CF0              PLY_AKG_ARPEGGIOSTABLE EQU 04AA0H
 417+ 4CF0              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC7H
 418+ 4CF0              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACEH
 419+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD4H
 420+ 4CF0              PLY_AKG_PITCHESTABLE EQU 04AD4H
 421+ 4CF0              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AFBH
 422+ 4CF0              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B02H
 423+ 4CF0              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B13H
 424+ 4CF0              PLY_AKG_EFFECT_PITCHDOWN EQU 04B1AH
 425+ 4CF0              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B2AH
 426+ 4CF0              PLY_AKG_EFFECT_PITCHUP EQU 04B3FH
 427+ 4CF0              PLY_AKG_EFFECT_PITCHSTOP EQU 04B51H
 428+ 4CF0              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B58H
 429+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B82H
 430+ 4CF0              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B82H
 431+ 4CF0              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B9BH
 432+ 4CF0              PLY_AKG_EFFECT_GLIDESPEED EQU 04B9BH
 433+ 4CF0              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BADH
 434+ 4CF0              PLY_AKG_EFFECT_LEGATO EQU 04BC3H
 435+ 4CF0              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD7H
 436+ 4CF0              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDFH
 437+ 4CF0              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE7H
 438+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEFH
 439+ 4CF0              PLY_AKG_EVENT EQU 04BEFH
 440+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BF0H
 441+ 4CF0              PLY_AKG_PERIODTABLE EQU 04BF0H
 442+ 4CF0              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BF0H
 443+ 4CF0              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CF0H
 444+ 4CF0              PLY_AKG_PERIODTABLE_END EQU 04CF0H
 445+ 4CF0              PLY_AKG_END EQU 04CF0H
 446+ 4CF0              MAIN_PLAYER_END EQU 04CF0H
 447+ 4CF0              TESTEREND EQU 04CF0H
 448+ 4CF0
# file closed: ./symbol/AKG.sym
 113  4CF0               ENDIF
 114  4CF0
 115  4CF0               INCLUDE "VBLANK.asm"
# file opened: asm\VBLANK.asm
   1+ 4CF0              ORIG.HTIMI:
   2+ 4CF0 00 00 00 00  	DB 0, 0, 0, 0, 0
   2+ 4CF4 00
   3+ 4CF5               EXPORT ORIG.HTIMI
   4+ 4CF5
   5+ 4CF5              ; *******************************************************************************************************
   6+ 4CF5              ; interrupt handler when page 0 enabled
   7+ 4CF5              ; we are here only if one of the extended basic commands have paged in page 0
   8+ 4CF5              ; which means we arrived from BASIC so page 2 is already good
   9+ 4CF5              VBLANK:
  10+ 4CF5              	EXPORT VBLANK
  11+ 4CF5
  12+ 4CF5 F5               PUSH AF
  13+ 4CF6              	; is VDP originator ?
  14+ 4CF6 DB 99        	IN	A, (099H)
  15+ 4CF8 A7           	AND	A
  16+ 4CF9 F2 20 4D     	JP P, .EXIT
  17+ 4CFC
  18+ 4CFC               IF (SOUND_CMDS + SPRITE_CMDS > 0)
  19+ 4CFC C5               PUSH BC
  20+ 4CFD D5               PUSH DE
  21+ 4CFE E5               PUSH HL
  22+ 4CFF 08               EX AF, AF'
  23+ 4D00 D9               EXX
  24+ 4D01 F5               PUSH AF
  25+ 4D02 C5               PUSH BC
  26+ 4D03 D5               PUSH DE
  27+ 4D04 E5               PUSH HL
  28+ 4D05 DD E5            PUSH IX
  29+ 4D07 FD E5            PUSH IY
  30+ 4D09
  31+ 4D09               IF (SPRITE_CMDS == 1)
  32+ 4D09 CD 5A 4D     	CALL PROCESS_SPRITES_AND_ANIMATIONS
  33+ 4D0C               ENDIF
  34+ 4D0C
  35+ 4D0C               IF (SOUND_CMDS == 1)
  36+ 4D0C 3A 31 59     	LD A, (SOUND_ENABLED)
  37+ 4D0F B7           	OR A
  38+ 4D10 C4 33 42     	CALL NZ,PLY_AKG_PLAY
  39+ 4D13               ENDIF
  40+ 4D13
  41+ 4D13                  ; increase JIFFY
  42+ 4D13                  ;LD HL,(JIFFY)
  43+ 4D13                  ;INC HL
  44+ 4D13                  ;LD (JIFFY),HL
  45+ 4D13
  46+ 4D13 FD E1            POP IY
  47+ 4D15 DD E1            POP IX
  48+ 4D17 E1               POP HL
  49+ 4D18 D1               POP DE
  50+ 4D19 C1               POP BC
  51+ 4D1A F1               POP AF
  52+ 4D1B 08               EX AF, AF'
  53+ 4D1C D9               EXX
  54+ 4D1D E1               POP HL
  55+ 4D1E D1               POP DE
  56+ 4D1F C1               POP BC
  57+ 4D20               ENDIF
  58+ 4D20
  59+ 4D20              .EXIT:
  60+ 4D20 F1           	POP AF
  61+ 4D21 FB           	EI
  62+ 4D22 ED 4D        	RETI
  63+ 4D24              ; *******************************************************************************************************
  64+ 4D24
  65+ 4D24              ; *******************************************************************************************************
  66+ 4D24              ; H.TIMI function
  67+ 4D24              ; we can end up here from anywhere so page in both page 0 and 2
  68+ 4D24              MBGE_HTIMI:
  69+ 4D24               EXPORT MBGE_HTIMI
  70+ 4D24
  71+ 4D24               IF (SOUND_CMDS + SPRITE_CMDS > 0)
  72+ 4D24
  73+ 4D24 F5           	PUSH AF
  74+ 4D25
  75+ 4D25              	; enable page 2
  76+ 4D25 3E 02            LD A, 2
  77+ 4D27 CD AF 64         CALL GET_PAGE_INFO
  78+ 4D2A C5               PUSH BC
  79+ 4D2B D5               PUSH DE
  80+ 4D2C 3A 43 F3         LD A, (RAMAD2)
  81+ 4D2F 26 80            LD H, 080H
  82+ 4D31 CD F6 64         CALL LOCAL_ENASLT
  83+ 4D34              	; enable page 0
  84+ 4D34 AF               XOR A
  85+ 4D35 CD AF 64         CALL GET_PAGE_INFO
  86+ 4D38 C5               PUSH BC
  87+ 4D39 D5               PUSH DE
  88+ 4D3A 3A 41 F3         LD A, (RAMAD0)
  89+ 4D3D 26 00            LD H, 0
  90+ 4D3F CD F6 64         CALL LOCAL_ENASLT
  91+ 4D42
  92+ 4D42               IF (SPRITE_CMDS == 1)
  93+ 4D42 CD 5A 4D     	CALL PROCESS_SPRITES_AND_ANIMATIONS
  94+ 4D45               ENDIF
  95+ 4D45
  96+ 4D45               IF (SOUND_CMDS == 1)
  97+ 4D45 3A 31 59     	LD A, (SOUND_ENABLED)
  98+ 4D48 B7           	OR A
  99+ 4D49 C4 33 42     	CALL NZ,PLY_AKG_PLAY
 100+ 4D4C               ENDIF
 101+ 4D4C
 102+ 4D4C              	; restore page 0
 103+ 4D4C D1               POP DE
 104+ 4D4D C1               POP BC
 105+ 4D4E CD E6 64         CALL RESTORE_PAGE_INFO
 106+ 4D51              	; restore page 2
 107+ 4D51 D1               POP DE
 108+ 4D52 C1               POP BC
 109+ 4D53 CD E6 64         CALL RESTORE_PAGE_INFO
 110+ 4D56
 111+ 4D56 F1           	POP AF
 112+ 4D57               ENDIF
 113+ 4D57 C3 F0 4C     	JP ORIG.HTIMI
 114+ 4D5A              ; *******************************************************************************************************
 115+ 4D5A
 116+ 4D5A              ; *******************************************************************************************************
 117+ 4D5A              ; function checks if the sprite system is initialized and what screen mode we are running
 118+ 4D5A              ; also checks if some VRAM modifying command is running
 119+ 4D5A              ; when that checks out calls sprite updates and animation processing
 120+ 4D5A              ; if in an unsupported mode disables sprite handling
 121+ 4D5A              PROCESS_SPRITES_AND_ANIMATIONS:
 122+ 4D5A              	; check if initialized
 123+ 4D5A 3A 7C 4D     	LD A, (SPRATR_INIT_STATUS)
 124+ 4D5D B7           	OR A
 125+ 4D5E C8           	RET Z
 126+ 4D5F              	; check screen mode
 127+ 4D5F 3A AF FC     	LD A, (SCRMOD)
 128+ 4D62 3D           	DEC A
 129+ 4D63 28 08        	JR Z, .L0 ; screen 1
 130+ 4D65 3D           	DEC A
 131+ 4D66 28 05            JR Z, .L0 ; screen 2
 132+ 4D68              	; unsupported screen mode, disable
 133+ 4D68 AF               XOR A
 134+ 4D69 32 7C 4D         LD (SPRATR_INIT_STATUS),A
 135+ 4D6C C9               RET
 136+ 4D6D              .L0:
 137+ 4D6D                  ; check if anyone else is working with VRAM
 138+ 4D6D 3A C0 62         LD A,(VRAM_UPDATE_IN_PROGRESS)
 139+ 4D70 B7               OR A
 140+ 4D71 C0               RET NZ
 141+ 4D72
 142+ 4D72 CD 91 4D         CALL SPRATR_UPDATE
 143+ 4D75
 144+ 4D75               IF (ANIM_CMDS == 1)
 145+ 4D75 CD D3 55         CALL PROCESS_ANIMATIONS
 146+ 4D78 CD 9F 57         CALL PROCESS_AUTOSGAMS
 147+ 4D7B               ENDIF
 148+ 4D7B C9               RET
 149+ 4D7C              ; *******************************************************************************************************
# file closed: asm\VBLANK.asm
 116  4D7C
 117  4D7C               IF (SPRITE_CMDS == 1)
 118  4D7C               INCLUDE "SPRITES.asm"
# file opened: asm\SPRITES.asm
   1+ 4D7C              ; commands and variables related to sprites
   2+ 4D7C
   3+ 4D7C              SPRATR_INIT_STATUS:
   4+ 4D7C 00            DB 0
   5+ 4D7D              SPRATR_UPDATE_FLAG:
   6+ 4D7D 00 00         DW 0
   7+ 4D7F              SPRATR_DATA:
   8+ 4D7F 00 00         DW 0
   9+ 4D81              SPRFLICKER_ENABLED:
  10+ 4D81 00            DB 0
  11+ 4D82              ; to support sprite flicker
  12+ 4D82              FLICKER:
  13+ 4D82 00            DB 0
  14+ 4D83
  15+ 4D83              ; to temporarily store stack pointer
  16+ 4D83              TMPSP:
  17+ 4D83 00 00         DW 0
  18+ 4D85
  19+ 4D85              ; *******************************************************************************************************
  20+ 4D85              ; helper function gets pointer to n-th entry in sprite attributes
  21+ 4D85              ; changes HL,DE
  22+ 4D85              GETnthSPRATTR:
  23+ 4D85 26 00            LD H,0
  24+ 4D87 6F               LD L,A
  25+ 4D88 CD AB 64         CALL HLx8
  26+ 4D8B ED 5B 7F 4D      LD DE,(SPRATR_DATA)
  27+ 4D8F 19               ADD HL,DE
  28+ 4D90 C9               RET
  29+ 4D91              ; *******************************************************************************************************
  30+ 4D91
  31+ 4D91              ; *******************************************************************************************************
  32+ 4D91              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
  33+ 4D91              ; struct {
  34+ 4D91              ; DW y
  35+ 4D91              ; DW x
  36+ 4D91              ; DW pattern (0-63)
  37+ 4D91              ; DW color
  38+ 4D91              ; } [32]
  39+ 4D91              ; will hide sprites whose location is outside of visible area
  40+ 4D91              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
  41+ 4D91              ; modifies AF, AF', BC, DE, HL
  42+ 4D91              SPRATR_UPDATE:
  43+ 4D91              	; check if update requested
  44+ 4D91 2A 7D 4D     	LD HL, (SPRATR_UPDATE_FLAG)
  45+ 4D94 7E           	LD A, (HL)
  46+ 4D95 B7           	OR A
  47+ 4D96 C8           	RET Z
  48+ 4D97              .L0:
  49+ 4D97 06 20        	LD B, 32 ; sprite number
  50+ 4D99 0E 98        	LD C, #98 ; register for vdp data output
  51+ 4D9B              	; set VDP address
  52+ 4D9B 3A AF FC         LD A,(SCRMOD)
  53+ 4D9E 3D               DEC A
  54+ 4D9F 20 05            JR NZ,.L4
  55+ 4DA1 2A C3 F3         LD HL, (T32ATR)
  56+ 4DA4 18 03            JR .L5
  57+ 4DA6              .L4:
  58+ 4DA6 2A CD F3         LD HL, (GRPATR)
  59+ 4DA9              .L5:
  60+ 4DA9 3A 81 4D     	LD A, (SPRFLICKER_ENABLED)
  61+ 4DAC B7           	OR A
  62+ 4DAD 28 03        	JR Z, .L3
  63+ 4DAF 3A 82 4D     	LD A, (FLICKER)
  64+ 4DB2              .L3:
  65+ 4DB2 5F           	LD E, A
  66+ 4DB3 08           	EX AF, AF'
  67+ 4DB4 7B           	LD A, E
  68+ 4DB5 87           	ADD A, A
  69+ 4DB6 87           	ADD A, A
  70+ 4DB7 16 00        	LD D, 0
  71+ 4DB9 5F           	LD E, A
  72+ 4DBA 19           	ADD HL, DE
  73+ 4DBB CD 96 64     	CALL SETWRT_LOCAL
  74+ 4DBE ED 73 83 4D  	LD (TMPSP), SP
  75+ 4DC2 ED 7B 7F 4D  	LD SP, (SPRATR_DATA)
  76+ 4DC6
  77+ 4DC6              .LOOP:
  78+ 4DC6 E1           	POP HL
  79+ 4DC7 24           	INC H
  80+ 4DC8 28 0D        	JR Z, .L1 ; negative number between -256 and -1
  81+ 4DCA 25           	DEC H
  82+ 4DCB 20 15        	JR NZ, .OUT3 ; sprite vertically can't be visible
  83+ 4DCD 7D           	LD A, L
  84+ 4DCE FE C0        	CP 192
  85+ 4DD0 30 10        	JR NC, .OUT3
  86+ 4DD2 3D           	DEC A ; due to VDP rule that top of screen is -1
  87+ 4DD3 57           	LD D, A
  88+ 4DD4 C3 FB 4D     	JP .X
  89+ 4DD7              .L1:
  90+ 4DD7 7D           	LD A, L
  91+ 4DD8 C6 10        	ADD 16
  92+ 4DDA FA E2 4D     	JP M, .OUT3 ; below -16
  93+ 4DDD 2D           	DEC L ; due to VDP rule that top of screen is -1
  94+ 4DDE 55           	LD D, L
  95+ 4DDF C3 FB 4D     	JP .X
  96+ 4DE2              .OUT3:
  97+ 4DE2 E1           	POP HL ; skip x value
  98+ 4DE3              .OUT2:
  99+ 4DE3 E1           	POP HL ; skip pattern
 100+ 4DE4 E1           	POP HL ; skip color
 101+ 4DE5 3E D1        	LD A, #D1
 102+ 4DE7 ED 79        	OUT (C), A ; sprite hidden
 103+ 4DE9 00          > NOP
 103+ 4DEA 00          > NOP
 103+ 4DEB 00          > NOP
 104+ 4DEC ED 79        	OUT (C), A ; value unimportant
 105+ 4DEE 00          > NOP
 105+ 4DEF 00          > NOP
 105+ 4DF0 00          > NOP
 106+ 4DF1 ED 79        	OUT (C), A ; value unimportant
 107+ 4DF3 00          > NOP
 107+ 4DF4 00          > NOP
 107+ 4DF5 00          > NOP
 108+ 4DF6 ED 79        	OUT (C), A ; value unimportant
 109+ 4DF8 C3 26 4E     	JP .NEXT
 110+ 4DFB              .X:
 111+ 4DFB E1           	POP HL
 112+ 4DFC 24           	INC H
 113+ 4DFD 28 08        	JR Z, .L2
 114+ 4DFF 25           	DEC H
 115+ 4E00 20 E1        	JR NZ, .OUT2
 116+ 4E02 1E 00        	LD E, 0 ; EC bit
 117+ 4E04 C3 10 4E     	JP .XY
 118+ 4E07              .L2:
 119+ 4E07 7D           	LD A, L
 120+ 4E08 C6 20        	ADD 32
 121+ 4E0A FA E3 4D     	JP M, .OUT2
 122+ 4E0D 6F           	LD L, A
 123+ 4E0E 1E 80        	LD E, #80
 124+ 4E10              .XY:
 125+ 4E10 ED 51        	OUT (C), D
 126+ 4E12 3A E0 F3     	LD A, (REG1SAV)
 127+ 4E15 E6 02        	AND 2
 128+ 4E17 ED 69        	OUT (C), L
 129+ 4E19 E1           	POP HL ; pattern
 130+ 4E1A 7D           	LD A, L
 131+ 4E1B 28 02        	JR Z, .SMALLSPRITES
 132+ 4E1D 87           	ADD A, A
 133+ 4E1E 87           	ADD A, A ; needs to go at 4x
 134+ 4E1F              .SMALLSPRITES:
 135+ 4E1F D3 98        	OUT (#98), A
 136+ 4E21 E1           	POP HL ; color
 137+ 4E22 7D           	LD A, L
 138+ 4E23 B3           	OR E
 139+ 4E24 D3 98        	OUT (#98), A
 140+ 4E26              .NEXT:
 141+ 4E26 08           	EX AF, AF'
 142+ 4E27 3C           	INC A
 143+ 4E28 E6 1F        	AND 31
 144+ 4E2A C2 49 4E     	JP NZ, .NEXT2
 145+ 4E2D 08           	EX AF, AF'
 146+ 4E2E 3A AF FC         LD A,(SCRMOD)
 147+ 4E31 3D               DEC A
 148+ 4E32 20 05            JR NZ,.L6
 149+ 4E34 2A C3 F3         LD HL, (T32ATR)
 150+ 4E37 18 03            JR .L7
 151+ 4E39              .L6:
 152+ 4E39 2A CD F3         LD HL, (GRPATR)
 153+ 4E3C              .L7:
 154+ 4E3C              	; CALL SETWRT_LOCAL not allowed as SP modified
 155+ 4E3C 7D           	LD	A, L
 156+ 4E3D D3 99        	OUT	(099H), A
 157+ 4E3F 7C           	LD	A, H
 158+ 4E40 E6 3F        	AND	03FH
 159+ 4E42 F6 40        	OR	040H
 160+ 4E44 D3 99        	OUT	(099H), A
 161+ 4E46 C3 4A 4E     	JP .NEXT3
 162+ 4E49              .NEXT2:
 163+ 4E49 08           	EX AF, AF'
 164+ 4E4A              .NEXT3:
 165+ 4E4A 05           	DEC B
 166+ 4E4B C2 C6 4D     	JP NZ, .LOOP
 167+ 4E4E 08           	EX AF, AF'
 168+ 4E4F 3C           	INC A
 169+ 4E50 32 82 4D     	LD (FLICKER), A
 170+ 4E53
 171+ 4E53 ED 7B 83 4D  	LD SP, (TMPSP)
 172+ 4E57 2A 7D 4D     	LD HL, (SPRATR_UPDATE_FLAG)
 173+ 4E5A 36 00        	LD (HL), 0 ; zero out update flag
 174+ 4E5C C9           	RET
 175+ 4E5D              ; *******************************************************************************************************
 176+ 4E5D
 177+ 4E5D              ; *******************************************************************************************************
 178+ 4E5D              ; function to handle CALL SPRENABLE basic extension
 179+ 4E5D              ; initializes sprites handler
 180+ 4E5D              ; _SPRENABLE ( INT[][] sprites_attributes,
 181+ 4E5D              ;			   INT update_variable,
 182+ 4E5D              ;			   BYTE sprite_flicker_enabled )
 183+ 4E5D              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA and SPRFLICKER_ENABLED
 184+ 4E5D              SPRENABLE:
 185+ 4E5D              	; opening (
 186+ 4E5D CD BD 65     	CALL CHKCHAR
 187+ 4E60 28           	DB '('
 188+ 4E61              	; get address of sprite attribute table DIM SA%(3,31)
 189+ 4E61 3E 02        	LD A,2
 190+ 4E63 06 02        	LD B,2
 191+ 4E65 11 20 04     	LD DE,#0420
 192+ 4E68 CD EA 65     	CALL GET_BASIC_ARRAY_DATA_POINTER
 193+ 4E6B C5           	PUSH BC
 194+ 4E6C              	; comma
 195+ 4E6C CD BD 65     	CALL CHKCHAR
 196+ 4E6F 2C           	DB ','
 197+ 4E70              	; get address of sprite update flag
 198+ 4E70 DD 21 A4 5E  	LD IX, PTRGET
 199+ 4E74 CD 59 01     	CALL CALBAS
 200+ 4E77 D5           	PUSH DE
 201+ 4E78              	; comma
 202+ 4E78 CD BD 65     	CALL CHKCHAR
 203+ 4E7B 2C           	DB ','
 204+ 4E7C              	; get flicker enabled flag
 205+ 4E7C DD 21 1C 52  	LD IX, GETBYT
 206+ 4E80 CD 59 01     	CALL CALBAS
 207+ 4E83 F5           	PUSH AF
 208+ 4E84              	; ending )
 209+ 4E84 CD BD 65     	CALL CHKCHAR
 210+ 4E87 29           	DB ')'
 211+ 4E88
 212+ 4E88 F1           	POP AF ; get flicker flag
 213+ 4E89 B7           	OR A
 214+ 4E8A 32 81 4D     	LD (SPRFLICKER_ENABLED), A
 215+ 4E8D
 216+ 4E8D D1           	POP DE ; update variable location
 217+ 4E8E ED 53 7D 4D  	LD (SPRATR_UPDATE_FLAG), DE
 218+ 4E92 D1           	POP DE ; address of sprite attribute table
 219+ 4E93 ED 53 7F 4D  	LD (SPRATR_DATA), DE
 220+ 4E97 3E 01        	LD A, 1
 221+ 4E99 32 7C 4D     	LD (SPRATR_INIT_STATUS), A
 222+ 4E9C C9           	RET
 223+ 4E9D              ; *******************************************************************************************************
 224+ 4E9D
 225+ 4E9D              ; *******************************************************************************************************
 226+ 4E9D              ; function to handle CALL SPRDISABLE basic extension
 227+ 4E9D              ; disables sprites handling
 228+ 4E9D              ; _SPRDISABLE
 229+ 4E9D              ; resets variable SPRATR_INIT_STATUS
 230+ 4E9D              SPRDISABLE:
 231+ 4E9D AF           	XOR A
 232+ 4E9E 32 7C 4D     	LD (SPRATR_INIT_STATUS), A
 233+ 4EA1 C9           	RET
 234+ 4EA2              ; *******************************************************************************************************
 235+ 4EA2
 236+ 4EA2              ; *******************************************************************************************************
 237+ 4EA2              ; function to handle CALL SPRSET basic extension
 238+ 4EA2              ; sets position, and optionally pattern and color of sprite
 239+ 4EA2              ; _SPRSET ( BYTE sprite_num , valid 0-31
 240+ 4EA2              ;			INT x,
 241+ 4EA2              ;			INT y,
 242+ 4EA2              ;			INT pattern, valid 0-63, otherwise ignored
 243+ 4EA2              ;			INT color, valid 0-15, otherwise ignored
 244+ 4EA2              SPRSET:
 245+ 4EA2 3A 7C 4D     	LD A, (SPRATR_INIT_STATUS)
 246+ 4EA5 B7           	OR A
 247+ 4EA6 20 05        	JR NZ, .L1
 248+ 4EA8 1E 05        	LD E, 5 ; illegal function call
 249+ 4EAA C3 E3 65     	JP THROW_ERROR
 250+ 4EAD              .L1:
 251+ 4EAD              	; opening (
 252+ 4EAD CD BD 65     	CALL CHKCHAR
 253+ 4EB0 28           	DB '('
 254+ 4EB1              	; get sprite number
 255+ 4EB1 DD 21 1C 52  	LD IX, GETBYT
 256+ 4EB5 CD 59 01     	CALL CALBAS
 257+ 4EB8 F5           	PUSH AF
 258+ 4EB9              	; comma
 259+ 4EB9 CD BD 65     	CALL CHKCHAR
 260+ 4EBC 2C           	DB ','
 261+ 4EBD              	; get x
 262+ 4EBD DD 21 2F 54  	LD IX, FRMQNT
 263+ 4EC1 CD 59 01     	CALL CALBAS
 264+ 4EC4 D5           	PUSH DE
 265+ 4EC5              	; comma
 266+ 4EC5 CD BD 65     	CALL CHKCHAR
 267+ 4EC8 2C           	DB ','
 268+ 4EC9              	; get y
 269+ 4EC9 DD 21 2F 54  	LD IX, FRMQNT
 270+ 4ECD CD 59 01     	CALL CALBAS
 271+ 4ED0 D5           	PUSH DE
 272+ 4ED1              	; comma
 273+ 4ED1 CD BD 65     	CALL CHKCHAR
 274+ 4ED4 2C           	DB ','
 275+ 4ED5              	; get pattern
 276+ 4ED5 DD 21 2F 54  	LD IX, FRMQNT
 277+ 4ED9 CD 59 01     	CALL CALBAS
 278+ 4EDC D5           	PUSH DE
 279+ 4EDD              	; comma
 280+ 4EDD CD BD 65     	CALL CHKCHAR
 281+ 4EE0 2C           	DB ','
 282+ 4EE1              	; get color
 283+ 4EE1 DD 21 2F 54  	LD IX, FRMQNT
 284+ 4EE5 CD 59 01     	CALL CALBAS
 285+ 4EE8 D5           	PUSH DE
 286+ 4EE9              	; ending )
 287+ 4EE9 CD BD 65     	CALL CHKCHAR
 288+ 4EEC 29           	DB ')'
 289+ 4EED
 290+ 4EED                  ; save position in BASIC text
 291+ 4EED E5           	PUSH HL
 292+ 4EEE DD E1        	POP IX
 293+ 4EF0
 294+ 4EF0 C1           	POP BC ; color
 295+ 4EF1 D1           	POP DE ; pattern
 296+ 4EF2 D9           	EXX
 297+ 4EF3 C1           	POP BC ; y
 298+ 4EF4 D1           	POP DE ; x
 299+ 4EF5 F1           	POP AF ; sprite number
 300+ 4EF6 FE 20        	CP 32
 301+ 4EF8 38 05        	JR C, .L2
 302+ 4EFA 1E 05        	LD E, 5 ; illegal function call
 303+ 4EFC C3 E3 65     	JP THROW_ERROR
 304+ 4EFF              .L2:
 305+ 4EFF              	; find location in sprite attributes table
 306+ 4EFF D5           	PUSH DE
 307+ 4F00 CD 85 4D     	CALL GETnthSPRATTR
 308+ 4F03 D1           	POP DE
 309+ 4F04 F3           	DI
 310+ 4F05              	; set y
 311+ 4F05 71           	LD (HL), C
 312+ 4F06 23           	INC HL
 313+ 4F07 70           	LD (HL), B
 314+ 4F08 23           	INC HL
 315+ 4F09              	; set x
 316+ 4F09 73           	LD (HL), E
 317+ 4F0A 23           	INC HL
 318+ 4F0B 72           	LD (HL), D
 319+ 4F0C 23           	INC HL
 320+ 4F0D E5           	PUSH HL
 321+ 4F0E D9           	EXX
 322+ 4F0F E1           	POP HL
 323+ 4F10              	; check if 0<=pattern<64
 324+ 4F10 7A           	LD A, D
 325+ 4F11 B7           	OR A
 326+ 4F12 20 0B        	JR NZ, .L3
 327+ 4F14 7B           	LD A, E
 328+ 4F15 FE 40        	CP 64
 329+ 4F17 30 06        	JR NC, .L3
 330+ 4F19              	; set pattern
 331+ 4F19              	;ADD A, A
 332+ 4F19              	;ADD A, A
 333+ 4F19              	;ADD A, A
 334+ 4F19 77           	LD (HL), A
 335+ 4F1A 23           	INC HL
 336+ 4F1B 72           	LD (HL), D
 337+ 4F1C 23           	INC HL
 338+ 4F1D 18 02        	JR .L4
 339+ 4F1F              .L3:
 340+ 4F1F              	; skip pattern
 341+ 4F1F 23          > INC HL
 341+ 4F20 23          > INC HL
 342+ 4F21              .L4:
 343+ 4F21              	; check if 0<=color<16
 344+ 4F21 78           	LD A, B
 345+ 4F22 B7           	OR A
 346+ 4F23 20 08        	JR NZ, .L5
 347+ 4F25 79           	LD A, C
 348+ 4F26 FE 10        	CP 16
 349+ 4F28 30 03        	JR NC, .L5
 350+ 4F2A              	; set color
 351+ 4F2A 71           	LD (HL), C
 352+ 4F2B 23           	INC HL
 353+ 4F2C 70           	LD (HL), B
 354+ 4F2D
 355+ 4F2D              .L5:
 356+ 4F2D FB           	EI
 357+ 4F2E DD E5        	PUSH IX
 358+ 4F30 E1           	POP HL
 359+ 4F31 C9           	RET
 360+ 4F32              ; *******************************************************************************************************
 361+ 4F32
 362+ 4F32              ; *******************************************************************************************************
 363+ 4F32              ; function sets sprite location based on initial coordinates and offset provided
 364+ 4F32              ; input A=sprite number in SPRATR_DATA , 0-31
 365+ 4F32              ; input DE=initial x
 366+ 4F32              ; input BC=initial y
 367+ 4F32              ; input IY=location where delta y,x are located
 368+ 4F32              ; modifies AF, HL, IX
 369+ 4F32              SPRSET_DELTA_POS:
 370+ 4F32 D5           	PUSH DE
 371+ 4F33 CD 85 4D     	CALL GETnthSPRATTR
 372+ 4F36 E5           	PUSH HL
 373+ 4F37 DD E1        	POP IX
 374+ 4F39 D1           	POP DE
 375+ 4F3A              	; IX=sprite's y location
 376+ 4F3A FD 6E 00     	LD L, (IY)
 377+ 4F3D FD 66 01     	LD H, (IY+1)
 378+ 4F40 09           	ADD HL, BC
 379+ 4F41 DD 75 00     	LD (IX), L
 380+ 4F44 DD 74 01     	LD (IX+1), H
 381+ 4F47 FD 6E 02     	LD L, (IY+2)
 382+ 4F4A FD 66 03     	LD H, (IY+3)
 383+ 4F4D 19           	ADD HL, DE
 384+ 4F4E DD 75 02     	LD (IX+2), L
 385+ 4F51 DD 74 03     	LD (IX+3), H
 386+ 4F54 C9           	RET
 387+ 4F55              ; *******************************************************************************************************
 388+ 4F55
 389+ 4F55              ; *******************************************************************************************************
 390+ 4F55              ; function to handle CALL SPRGRPMOV basic extension
 391+ 4F55              ; sets position of a group of sprites described with
 392+ 4F55              ; { int sprite_num, int delta_y, int delta_x } [count]
 393+ 4F55              ; _SPRGRPMOV ( INT x,
 394+ 4F55              ;			   INT y,
 395+ 4F55              ;			   BYTE count,
 396+ 4F55              ;			   INT[2][count] data_ptr
 397+ 4F55              SPRGRPMOV:
 398+ 4F55 3A 7C 4D     	LD A, (SPRATR_INIT_STATUS)
 399+ 4F58 B7           	OR A
 400+ 4F59 CA DD 65     	JP Z,ILLEGAL_FUNCTION
 401+ 4F5C              	; opening (
 402+ 4F5C CD BD 65     	CALL CHKCHAR
 403+ 4F5F 28           	DB '('
 404+ 4F60              	; get x
 405+ 4F60 DD 21 2F 54  	LD IX, FRMQNT
 406+ 4F64 CD 59 01     	CALL CALBAS
 407+ 4F67 ED 53 AF 62  	LD (BLIT_STRUCT),DE
 408+ 4F6B              	; comma
 409+ 4F6B CD BD 65     	CALL CHKCHAR
 410+ 4F6E 2C           	DB ','
 411+ 4F6F              	; get y
 412+ 4F6F DD 21 2F 54  	LD IX, FRMQNT
 413+ 4F73 CD 59 01     	CALL CALBAS
 414+ 4F76 ED 53 B1 62  	LD (BLIT_STRUCT+2),DE
 415+ 4F7A              	; comma
 416+ 4F7A CD BD 65     	CALL CHKCHAR
 417+ 4F7D 2C           	DB ','
 418+ 4F7E              	; get count
 419+ 4F7E DD 21 1C 52  	LD IX, GETBYT
 420+ 4F82 CD 59 01     	CALL CALBAS
 421+ 4F85 32 B3 62     	LD (BLIT_STRUCT+4),A
 422+ 4F88              	; comma
 423+ 4F88 CD BD 65     	CALL CHKCHAR
 424+ 4F8B 2C           	DB ','
 425+ 4F8C              	; get sprite group definition array data pointer
 426+ 4F8C 3A B3 62     	LD A,(BLIT_STRUCT+4)
 427+ 4F8F 5F           	LD E,A
 428+ 4F90 16 03        	LD D,3
 429+ 4F92 3E 02        	LD A,2
 430+ 4F94 47           	LD B,A
 431+ 4F95 CD EA 65     	CALL GET_BASIC_ARRAY_DATA_POINTER
 432+ 4F98 ED 43 B4 62  	LD (BLIT_STRUCT+5),BC
 433+ 4F9C              	; ending )
 434+ 4F9C CD BD 65     	CALL CHKCHAR
 435+ 4F9F 29           	DB ')'
 436+ 4FA0
 437+ 4FA0 E5           	PUSH HL
 438+ 4FA1
 439+ 4FA1 D9               EXX
 440+ 4FA2 ED 5B AF 62      LD DE,(BLIT_STRUCT) ; initial x
 441+ 4FA6 ED 4B B1 62      LD BC,(BLIT_STRUCT+2) ; initial y
 442+ 4FAA D9               EXX
 443+ 4FAB 2A B4 62         LD HL,(BLIT_STRUCT+5) ; pointer to data
 444+ 4FAE 3A B3 62         LD A,(BLIT_STRUCT+4) ; number of entries
 445+ 4FB1 47               LD B,A
 446+ 4FB2 3E 01        	LD A,1
 447+ 4FB4 32 C0 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 448+ 4FB7 F3           	DI
 449+ 4FB8 CD C2 4F     	CALL .UPDATE_LOC
 450+ 4FBB FB           	EI
 451+ 4FBC AF           	XOR A
 452+ 4FBD 32 C0 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 453+ 4FC0
 454+ 4FC0 E1           	POP HL
 455+ 4FC1 C9           	RET
 456+ 4FC2
 457+ 4FC2              .UPDATE_LOC:
 458+ 4FC2 7E           	LD A, (HL)
 459+ 4FC3 23           	INC HL
 460+ 4FC4 23           	INC HL
 461+ 4FC5 E5           	PUSH HL
 462+ 4FC6 FD E1        	POP IY
 463+ 4FC8 D9           	EXX
 464+ 4FC9 CD 32 4F     	CALL SPRSET_DELTA_POS
 465+ 4FCC D9           	EXX
 466+ 4FCD 23          > INC HL
 466+ 4FCE 23          > INC HL
 466+ 4FCF 23          > INC HL
 466+ 4FD0 23          > INC HL
 467+ 4FD1 10 EF        	DJNZ .UPDATE_LOC
 468+ 4FD3 C9           	RET
 469+ 4FD4              ; *******************************************************************************************************
 470+ 4FD4
# file closed: asm\SPRITES.asm
 119  4FD4               ENDIF
 120  4FD4
 121  4FD4               IF (ANIM_CMDS == 1)
 122  4FD4               INCLUDE "ANIMATION.asm"
# file opened: asm\ANIMATION.asm
   1+ 4FD4              ; sprite animation routines
   2+ 4FD4
   3+ 4FD4              ; number of animation items and pointer
   4+ 4FD4              ANIMITEMNUM:
   5+ 4FD4 00            DB 0
   6+ 4FD5              ANIMITEMPTR:
   7+ 4FD5 1F 66         DW EXT_END
   8+ 4FD7              ; number of animation definitions and pointer
   9+ 4FD7              ANIMDEFNUM:
  10+ 4FD7 00            DB 0
  11+ 4FD8              ANIMDEFPTR:
  12+ 4FD8 1F 66         DW EXT_END
  13+ 4FDA              ; number of links between sprite and animation definitions
  14+ 4FDA              ANIMSPRNUM:
  15+ 4FDA 00            DB 0
  16+ 4FDB              ANIMSPRPTR:
  17+ 4FDB 1F 66         DW EXT_END
  18+ 4FDD              ; number of automatic sprite group move and animate structures
  19+ 4FDD              AUTOSGAMNUM:
  20+ 4FDD 00            DB 0
  21+ 4FDE              AUTOSGAMPTR:
  22+ 4FDE 1F 66         DW EXT_END
  23+ 4FE0
  24+ 4FE0              ; ANIMATION ITEM
  25+ 4FE0              ; byte type = [0 - pattern and color change
  26+ 4FE0              ;              1 - pattern definition change ]
  27+ 4FE0              ; word ticks - number of ticks to hold this state
  28+ 4FE0              ; for type = 0
  29+ 4FE0              ;   byte pattern;
  30+ 4FE0              ;   byte color;
  31+ 4FE0              ; for type = 1
  32+ 4FE0              ;   work data_pointer;
  33+ 4FE0              ; total size = 5b
  34+ 4FE0
  35+ 4FE0              ; ANIMATION DEFINITION
  36+ 4FE0              ; byte number of items 1-15
  37+ 4FE0              ; byte[15] anim_item;
  38+ 4FE0              ; total size = 16b
  39+ 4FE0
  40+ 4FE0              ; SPRITE/CHAR ANIMATION
  41+ 4FE0              ; +00 byte sprite/char number;
  42+ 4FE0              ; +01 word time;
  43+ 4FE0              ; +03 byte current item;
  44+ 4FE0              ; +04 byte animation definition;
  45+ 4FE0              ; +05 byte cyclic;
  46+ 4FE0              ; +06 byte active;
  47+ 4FE0              ; +07 byte 0=sprite, 1-3 character bank
  48+ 4FE0              ; total size = 8b
  49+ 4FE0
  50+ 4FE0              ; AUTOMATIC SPRITE GROUP MOVE AND ANIMATE structure
  51+ 4FE0              ; +00 pointer to X variable
  52+ 4FE0              ; +02 pointer to Y variable
  53+ 4FE0              ; +04 minimum value
  54+ 4FE0              ; +06 maximal value
  55+ 4FE0              ; +08 delta value
  56+ 4FE0              ; +10 direction 0=horizontal, <>0 = vertical
  57+ 4FE0              ; +11 sprite group size
  58+ 4FE0              ; +12 sprite group pointer
  59+ 4FE0              ; +14 animation list size
  60+ 4FE0              ; +15 animation list pointer for negative delta values
  61+ 4FE0              ; +17 animation list pointer for positive delta values
  62+ 4FE0              ; +19 active flag
  63+ 4FE0              ; +20 ticks for movement
  64+ 4FE0              ; +22 timer
  65+ 4FE0              ; total = 24b
  66+ 4FE0
  67+ 4FE0              ; *******************************************************************************************************
  68+ 4FE0              ; helper function HL=A*5
  69+ 4FE0              ; changes HL,DE
  70+ 4FE0              Ax5:
  71+ 4FE0 26 00            LD H,0
  72+ 4FE2 6F               LD L,A
  73+ 4FE3 54               LD D,H
  74+ 4FE4 5D               LD E,L
  75+ 4FE5 29               ADD HL,HL
  76+ 4FE6 29               ADD HL,HL
  77+ 4FE7 19               ADD HL,DE
  78+ 4FE8 C9               RET
  79+ 4FE9              ; *******************************************************************************************************
  80+ 4FE9
  81+ 4FE9              ; *******************************************************************************************************
  82+ 4FE9              ; helper function gets pointer to n-th animation item
  83+ 4FE9              ; changes HL,DE
  84+ 4FE9              GETnthANIMITEM:
  85+ 4FE9 CD E0 4F         CALL Ax5
  86+ 4FEC ED 5B D5 4F      LD DE,(ANIMITEMPTR)
  87+ 4FF0 19               ADD HL,DE
  88+ 4FF1 C9               RET
  89+ 4FF2              ; *******************************************************************************************************
  90+ 4FF2
  91+ 4FF2              ; *******************************************************************************************************
  92+ 4FF2              ; helper function gets pointer to n-th entry in animation definition
  93+ 4FF2              ; changes HL,DE
  94+ 4FF2              GETnthANIMDEF:
  95+ 4FF2 26 00            LD H,0
  96+ 4FF4 6F               LD L,A
  97+ 4FF5 CD AA 64         CALL HLx16
  98+ 4FF8 ED 5B D8 4F      LD DE,(ANIMDEFPTR)
  99+ 4FFC 19               ADD HL,DE
 100+ 4FFD C9               RET
 101+ 4FFE              ; *******************************************************************************************************
 102+ 4FFE
 103+ 4FFE              ; *******************************************************************************************************
 104+ 4FFE              ; helper function gets pointer to n-th entry in sprite animation
 105+ 4FFE              ; changes HL,DE
 106+ 4FFE              GETnthSPRANIM:
 107+ 4FFE 26 00            LD H,0
 108+ 5000 6F               LD L,A
 109+ 5001 CD AB 64         CALL HLx8
 110+ 5004 ED 5B DB 4F      LD DE,(ANIMSPRPTR)
 111+ 5008 19               ADD HL,DE
 112+ 5009 C9               RET
 113+ 500A              ; *******************************************************************************************************
 114+ 500A
 115+ 500A              ; *******************************************************************************************************
 116+ 500A              ; helper function gets pointer to n-th entry in autosgam table
 117+ 500A              ; changes HL,DE
 118+ 500A              GETnthAUTOSGAM:
 119+ 500A 26 00            LD H,0
 120+ 500C 6F               LD L,A
 121+ 500D CD AB 64         CALL HLx8
 122+ 5010 54               LD D,H
 123+ 5011 5D               LD E,L
 124+ 5012 29               ADD HL,HL
 125+ 5013 19               ADD HL,DE
 126+ 5014 ED 5B DE 4F      LD DE,(AUTOSGAMPTR)
 127+ 5018 19               ADD HL,DE
 128+ 5019 C9               RET
 129+ 501A              ; *******************************************************************************************************
 130+ 501A
 131+ 501A              ; *******************************************************************************************************
 132+ 501A              ; function to handle CALL MAXANIMITEMS basic extension
 133+ 501A              ; MAXANIMITEMS (BYTE number)
 134+ 501A              ; sets new number and moves memory buffers as needed
 135+ 501A              MAXANIMITEMS:
 136+ 501A              	; opening (
 137+ 501A CD BD 65     	CALL CHKCHAR
 138+ 501D 28           	DB '('
 139+ 501E              	; get value
 140+ 501E DD 21 1C 52  	LD IX, GETBYT
 141+ 5022 CD 59 01     	CALL CALBAS
 142+ 5025 F5               PUSH AF
 143+ 5026              	; ending )
 144+ 5026 CD BD 65     	CALL CHKCHAR
 145+ 5029 29           	DB ')'
 146+ 502A F1               POP AF
 147+ 502B F3               DI
 148+ 502C              	; save position
 149+ 502C E5           	PUSH HL
 150+ 502D              .ENTRY:
 151+ 502D 47               LD B,A
 152+ 502E 3A D4 4F         LD A,(ANIMITEMNUM)
 153+ 5031 90               SUB B
 154+ 5032 28 28            JR Z, .EXIT; same value as before
 155+ 5034 FD 21 D8 4F      LD IY,ANIMDEFPTR
 156+ 5038 FA 5F 50         JP M, .INCREASE
 157+ 503B                  ; new value is lower than previous one
 158+ 503B CD 7E 50         CALL .SIZEDIFF
 159+ 503E CD 99 50         CALL .DECREASE_COMMON
 160+ 5041 2A DB 4F         LD HL,(ANIMSPRPTR)
 161+ 5044 AF               XOR A
 162+ 5045 ED 42            SBC HL,BC
 163+ 5047 22 DB 4F         LD (ANIMSPRPTR),HL
 164+ 504A              .E1:
 165+ 504A 2A DE 4F         LD HL,(AUTOSGAMPTR)
 166+ 504D AF               XOR A
 167+ 504E ED 42            SBC HL,BC
 168+ 5050 22 DE 4F         LD (AUTOSGAMPTR),HL
 169+ 5053              .E3:
 170+ 5053 2A 10 40         LD HL,(FREEMEMPTR)
 171+ 5056 AF               XOR A
 172+ 5057 ED 42            SBC HL,BC
 173+ 5059 22 10 40         LD (FREEMEMPTR),HL
 174+ 505C              .EXIT:
 175+ 505C FB               EI
 176+ 505D E1           	POP HL
 177+ 505E C9           	RET
 178+ 505F              .INCREASE:
 179+ 505F ED 44            NEG
 180+ 5061 CD 7E 50         CALL .SIZEDIFF
 181+ 5064 CD C5 50         CALL .INCREASE_COMMON
 182+ 5067 2A DB 4F         LD HL,(ANIMSPRPTR)
 183+ 506A 09               ADD HL,BC
 184+ 506B 22 DB 4F         LD (ANIMSPRPTR),HL
 185+ 506E              .E2:
 186+ 506E 2A DE 4F         LD HL,(AUTOSGAMPTR)
 187+ 5071 09               ADD HL,BC
 188+ 5072 22 DE 4F         LD (AUTOSGAMPTR),HL
 189+ 5075              .E4:
 190+ 5075 2A 10 40         LD HL,(FREEMEMPTR)
 191+ 5078 09               ADD HL,BC
 192+ 5079 22 10 40         LD (FREEMEMPTR),HL
 193+ 507C 18 DE            JR .EXIT
 194+ 507E              .SIZEDIFF:
 195+ 507E CD E0 4F         CALL Ax5
 196+ 5081 78               LD A,B
 197+ 5082 32 D4 4F         LD (ANIMITEMNUM),A
 198+ 5085 44               LD B,H
 199+ 5086 4D               LD C,L
 200+ 5087 C9               RET ; BC=size difference in bytes
 201+ 5088              .SIZETOMOVE:
 202+ 5088 D5               PUSH DE
 203+ 5089 2A 10 40         LD HL,(FREEMEMPTR)
 204+ 508C FD 5E 00         LD E,(IY)
 205+ 508F FD 56 01         LD D,(IY+1)
 206+ 5092 AF               XOR A
 207+ 5093 ED 52            SBC HL,DE
 208+ 5095 44               LD B,H
 209+ 5096 4D               LD C,L
 210+ 5097 D1               POP DE
 211+ 5098 C9               RET
 212+ 5099              .DECREASE_COMMON:
 213+ 5099 FD 6E 00         LD L,(IY)
 214+ 509C FD 66 01         LD H,(IY+1)
 215+ 509F AF               XOR A
 216+ 50A0 ED 42            SBC HL,BC
 217+ 50A2 EB               EX DE,HL
 218+ 50A3 C5               PUSH BC
 219+ 50A4 CD 88 50         CALL .SIZETOMOVE
 220+ 50A7 F3               DI
 221+ 50A8 78               LD A,B
 222+ 50A9 B1               OR C
 223+ 50AA 28 08            JR Z,.L1
 224+ 50AC FD 6E 00         LD L,(IY)
 225+ 50AF FD 66 01         LD H,(IY+1)
 226+ 50B2 ED B0            LDIR
 227+ 50B4              .L1:
 228+ 50B4 C1               POP BC
 229+ 50B5 FD 6E 00         LD L,(IY)
 230+ 50B8 FD 66 01         LD H,(IY+1)
 231+ 50BB AF               XOR A
 232+ 50BC ED 42            SBC HL,BC
 233+ 50BE FD 75 00         LD (IY),L
 234+ 50C1 FD 74 01         LD (IY+1),H
 235+ 50C4 C9               RET
 236+ 50C5              .INCREASE_COMMON:
 237+ 50C5 2A 10 40         LD HL,(FREEMEMPTR)
 238+ 50C8 2B               DEC HL
 239+ 50C9 AF               XOR A
 240+ 50CA ED 42            SBC HL,BC
 241+ 50CC EB               EX DE,HL
 242+ 50CD C5               PUSH BC
 243+ 50CE CD 88 50         CALL .SIZETOMOVE
 244+ 50D1 F3               DI
 245+ 50D2 78               LD A,B
 246+ 50D3 B1               OR C
 247+ 50D4 28 06            JR Z,.L2
 248+ 50D6 2A 10 40         LD HL,(FREEMEMPTR)
 249+ 50D9 2B               DEC HL
 250+ 50DA ED B8            LDDR
 251+ 50DC              .L2:
 252+ 50DC C1               POP BC
 253+ 50DD FD 6E 00         LD L,(IY)
 254+ 50E0 FD 66 01         LD H,(IY+1)
 255+ 50E3 09               ADD HL,BC
 256+ 50E4 FD 75 00         LD (IY),L
 257+ 50E7 FD 74 01         LD (IY+1),H
 258+ 50EA C9               RET
 259+ 50EB              ; *******************************************************************************************************
 260+ 50EB
 261+ 50EB              ; *******************************************************************************************************
 262+ 50EB              ; function to handle CALL ANIMITEMPAT basic extension
 263+ 50EB              ; ANIMITEMPAT ( BYTE id,
 264+ 50EB              ;               INT ticks,
 265+ 50EB              ;               BYTE pattern,
 266+ 50EB              ;               BYTE color )
 267+ 50EB              ; fills animation item data, returns an error if ID out of bounds
 268+ 50EB              ANIMITEMPAT:
 269+ 50EB                  ; opening (
 270+ 50EB CD BD 65     	CALL CHKCHAR
 271+ 50EE 28           	DB '('
 272+ 50EF              	; get id
 273+ 50EF DD 21 1C 52  	LD IX, GETBYT
 274+ 50F3 CD 59 01     	CALL CALBAS
 275+ 50F6 F5               PUSH AF
 276+ 50F7                  ; check if out of bounds
 277+ 50F7 3C               INC A
 278+ 50F8 4F               LD C,A
 279+ 50F9 3A D4 4F         LD A,(ANIMITEMNUM)
 280+ 50FC B9               CP C
 281+ 50FD DA D5 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 282+ 5100              	; comma
 283+ 5100 CD BD 65     	CALL CHKCHAR
 284+ 5103 2C           	DB ','
 285+ 5104              	; get ticks
 286+ 5104 DD 21 2F 54  	LD IX, FRMQNT
 287+ 5108 CD 59 01     	CALL CALBAS
 288+ 510B D5           	PUSH DE
 289+ 510C              	; comma
 290+ 510C CD BD 65     	CALL CHKCHAR
 291+ 510F 2C           	DB ','
 292+ 5110              	; get pattern
 293+ 5110 DD 21 1C 52  	LD IX, GETBYT
 294+ 5114 CD 59 01     	CALL CALBAS
 295+ 5117 F5               PUSH AF
 296+ 5118              	; comma
 297+ 5118 CD BD 65     	CALL CHKCHAR
 298+ 511B 2C           	DB ','
 299+ 511C              	; get color
 300+ 511C DD 21 1C 52  	LD IX, GETBYT
 301+ 5120 CD 59 01     	CALL CALBAS
 302+ 5123 F5               PUSH AF
 303+ 5124              	; ending )
 304+ 5124 CD BD 65     	CALL CHKCHAR
 305+ 5127 29           	DB ')'
 306+ 5128              .ENTRY:
 307+ 5128 E5               PUSH HL
 308+ 5129 DD E1            POP IX
 309+ 512B D9               EXX
 310+ 512C C1               POP BC ; color
 311+ 512D D1               POP DE ; pattern
 312+ 512E E1               POP HL ; ticks
 313+ 512F D9               EXX
 314+ 5130 F1               POP AF
 315+ 5131 CD E9 4F         CALL GETnthANIMITEM
 316+ 5134 E5               PUSH HL
 317+ 5135 FD E1            POP IY
 318+ 5137 D9               EXX
 319+ 5138 FD 36 00 00      LD (IY),0 ; type=0
 320+ 513C FD 75 01         LD (IY+1),L
 321+ 513F FD 74 02         LD (IY+2),H
 322+ 5142 FD 72 03         LD (IY+3),D
 323+ 5145 FD 70 04         LD (IY+4),B
 324+ 5148
 325+ 5148 DD E5            PUSH IX
 326+ 514A E1               POP HL
 327+ 514B C9               RET
 328+ 514C              ; *******************************************************************************************************
 329+ 514C
 330+ 514C              ; *******************************************************************************************************
 331+ 514C              ; function to handle CALL ANIMITEMPTR basic extension
 332+ 514C              ; ANIMITEMPTR ( BYTE id,
 333+ 514C              ;               INT ticks,
 334+ 514C              ;               INT pointer,
 335+ 514C              ; fills animation item data, returns an error if ID out of bounds
 336+ 514C              ANIMITEMPTR_CMD:
 337+ 514C                  ; opening (
 338+ 514C CD BD 65     	CALL CHKCHAR
 339+ 514F 28           	DB '('
 340+ 5150              	; get id
 341+ 5150 DD 21 1C 52  	LD IX, GETBYT
 342+ 5154 CD 59 01     	CALL CALBAS
 343+ 5157 F5               PUSH AF
 344+ 5158                  ; check if out of bounds
 345+ 5158 3C               INC A
 346+ 5159 4F               LD C,A
 347+ 515A 3A D4 4F         LD A,(ANIMITEMNUM)
 348+ 515D B9               CP C
 349+ 515E DA D5 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 350+ 5161              	; comma
 351+ 5161 CD BD 65     	CALL CHKCHAR
 352+ 5164 2C           	DB ','
 353+ 5165              	; get ticks
 354+ 5165 DD 21 2F 54  	LD IX, FRMQNT
 355+ 5169 CD 59 01     	CALL CALBAS
 356+ 516C D5           	PUSH DE
 357+ 516D              	; comma
 358+ 516D CD BD 65     	CALL CHKCHAR
 359+ 5170 2C           	DB ','
 360+ 5171              	; get pointer
 361+ 5171 DD 21 2F 54  	LD IX, FRMQNT
 362+ 5175 CD 59 01     	CALL CALBAS
 363+ 5178 D5           	PUSH DE
 364+ 5179              	; ending )
 365+ 5179 CD BD 65     	CALL CHKCHAR
 366+ 517C 29           	DB ')'
 367+ 517D              .ENTRY:
 368+ 517D E5               PUSH HL
 369+ 517E DD E1            POP IX
 370+ 5180 D9               EXX
 371+ 5181 D1               POP DE ; pointer
 372+ 5182 E1               POP HL ; ticks
 373+ 5183 D9               EXX
 374+ 5184 F1               POP AF
 375+ 5185 CD E9 4F         CALL GETnthANIMITEM
 376+ 5188 E5               PUSH HL
 377+ 5189 FD E1            POP IY
 378+ 518B D9               EXX
 379+ 518C FD 36 00 01      LD (IY),1 ; type=1
 380+ 5190 FD 75 01         LD (IY+1),L
 381+ 5193 FD 74 02         LD (IY+2),H
 382+ 5196 FD 73 03         LD (IY+3),E
 383+ 5199 FD 72 04         LD (IY+4),D
 384+ 519C
 385+ 519C DD E5            PUSH IX
 386+ 519E E1               POP HL
 387+ 519F C9               RET
 388+ 51A0              ; *******************************************************************************************************
 389+ 51A0
 390+ 51A0              ; *******************************************************************************************************
 391+ 51A0              ; function to handle CALL MAXANIMDEFS basic extension
 392+ 51A0              ; MAXANIMDEFS (BYTE number)
 393+ 51A0              ; sets new number and moves memory buffers as needed
 394+ 51A0              MAXANIMDEFS:
 395+ 51A0              	; opening (
 396+ 51A0 CD BD 65     	CALL CHKCHAR
 397+ 51A3 28           	DB '('
 398+ 51A4              	; get value
 399+ 51A4 DD 21 1C 52  	LD IX, GETBYT
 400+ 51A8 CD 59 01     	CALL CALBAS
 401+ 51AB F5               PUSH AF
 402+ 51AC              	; ending )
 403+ 51AC CD BD 65     	CALL CHKCHAR
 404+ 51AF 29           	DB ')'
 405+ 51B0 F1               POP AF
 406+ 51B1 F3               DI
 407+ 51B2              	; save position
 408+ 51B2 E5           	PUSH HL
 409+ 51B3              .ENTRY:
 410+ 51B3 47               LD B,A
 411+ 51B4 3A D7 4F         LD A,(ANIMDEFNUM)
 412+ 51B7 90               SUB B
 413+ 51B8 CA 5C 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 414+ 51BB FD 21 DB 4F      LD IY,ANIMSPRPTR
 415+ 51BF FA CB 51         JP M, .INCREASE
 416+ 51C2                  ; new value is lower than previous one
 417+ 51C2 CD D6 51         CALL .SIZEDIFF
 418+ 51C5 CD 99 50         CALL MAXANIMITEMS.DECREASE_COMMON
 419+ 51C8 C3 4A 50         JP MAXANIMITEMS.E1
 420+ 51CB              .INCREASE:
 421+ 51CB ED 44            NEG
 422+ 51CD CD D6 51         CALL .SIZEDIFF
 423+ 51D0 CD C5 50         CALL MAXANIMITEMS.INCREASE_COMMON
 424+ 51D3 C3 6E 50         JP MAXANIMITEMS.E2
 425+ 51D6              .SIZEDIFF:
 426+ 51D6 26 00            LD H,0
 427+ 51D8 6F               LD L,A
 428+ 51D9 CD AA 64         CALL HLx16
 429+ 51DC 78               LD A,B
 430+ 51DD 32 D7 4F         LD (ANIMDEFNUM),A
 431+ 51E0 44               LD B,H
 432+ 51E1 4D               LD C,L
 433+ 51E2 C9               RET ; BC=size difference in bytes
 434+ 51E3              ; *******************************************************************************************************
 435+ 51E3
 436+ 51E3              ; *******************************************************************************************************
 437+ 51E3              ; function to handle CALL ANIMDEF basic extension
 438+ 51E3              ; ANIMITEMPAT ( BYTE id,
 439+ 51E3              ;               BYTE size,
 440+ 51E3              ;               INT[] list )
 441+ 51E3              ; fills animation definition data, returns an error if out of bounds, or invalid type
 442+ 51E3              ANIMDEF:
 443+ 51E3                  ; opening (
 444+ 51E3 CD BD 65     	CALL CHKCHAR
 445+ 51E6 28           	DB '('
 446+ 51E7              	; get id
 447+ 51E7 DD 21 1C 52  	LD IX, GETBYT
 448+ 51EB CD 59 01     	CALL CALBAS
 449+ 51EE F5               PUSH AF
 450+ 51EF                  ; check if out of bounds
 451+ 51EF 3C               INC A
 452+ 51F0 4F               LD C,A
 453+ 51F1 3A D7 4F         LD A,(ANIMDEFNUM)
 454+ 51F4 B9               CP C
 455+ 51F5 DA D5 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 456+ 51F8              	; comma
 457+ 51F8 CD BD 65     	CALL CHKCHAR
 458+ 51FB 2C           	DB ','
 459+ 51FC              	; get size
 460+ 51FC DD 21 1C 52  	LD IX, GETBYT
 461+ 5200 CD 59 01     	CALL CALBAS
 462+ 5203 FE 10            CP 16
 463+ 5205 D2 D9 65         JP NC, OVERFLOW
 464+ 5208 B7               OR A
 465+ 5209 CA D9 65         JP Z, OVERFLOW
 466+ 520C F5           	PUSH AF
 467+ 520D              	; comma
 468+ 520D CD BD 65     	CALL CHKCHAR
 469+ 5210 2C           	DB ','
 470+ 5211              	; get pointer to a list of animation items in integer array format
 471+ 5211                  ; get array pointer
 472+ 5211 D1               POP DE
 473+ 5212 D5               PUSH DE
 474+ 5213 3E 02            LD A,2
 475+ 5215 06 01            LD B,1
 476+ 5217 CD EA 65         CALL GET_BASIC_ARRAY_DATA_POINTER
 477+ 521A C5               PUSH BC
 478+ 521B              	; ending )
 479+ 521B CD BD 65     	CALL CHKCHAR
 480+ 521E 29           	DB ')'
 481+ 521F              .ENTRY:
 482+ 521F E5               PUSH HL
 483+ 5220 DD E1            POP IX
 484+ 5222 D1               POP DE ; pointer to INT array
 485+ 5223 C1               POP BC ; B=item number
 486+ 5224 F1               POP AF ; id
 487+ 5225 D5               PUSH DE
 488+ 5226 CD F2 4F         CALL GETnthANIMDEF
 489+ 5229 D1               POP DE
 490+ 522A 70               LD (HL),B
 491+ 522B              .L1:
 492+ 522B 23               INC HL
 493+ 522C 1A               LD A,(DE)
 494+ 522D 13          > INC DE
 494+ 522E 13          > INC DE
 495+ 522F 77               LD (HL),A
 496+ 5230 10 F9            DJNZ .L1
 497+ 5232 DD E5            PUSH IX
 498+ 5234 E1               POP HL
 499+ 5235 C9               RET
 500+ 5236              ; *******************************************************************************************************
 501+ 5236
 502+ 5236              ; *******************************************************************************************************
 503+ 5236              ; function to handle CALL MAXANIMSPRS basic extension
 504+ 5236              ; MAXANIMSPRS (BYTE number)
 505+ 5236              ; sets new number and moves memory buffers as needed
 506+ 5236              MAXANIMSPRS:
 507+ 5236              	; opening (
 508+ 5236 CD BD 65     	CALL CHKCHAR
 509+ 5239 28           	DB '('
 510+ 523A              	; get value
 511+ 523A DD 21 1C 52  	LD IX, GETBYT
 512+ 523E CD 59 01     	CALL CALBAS
 513+ 5241 F5               PUSH AF
 514+ 5242              	; ending )
 515+ 5242 CD BD 65     	CALL CHKCHAR
 516+ 5245 29           	DB ')'
 517+ 5246 F1               POP AF
 518+ 5247 F3               DI
 519+ 5248              	; save position
 520+ 5248 E5           	PUSH HL
 521+ 5249              .ENTRY:
 522+ 5249 47               LD B,A
 523+ 524A 3A DA 4F         LD A,(ANIMSPRNUM)
 524+ 524D 90               SUB B
 525+ 524E CA 5C 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 526+ 5251 FD 21 DE 4F      LD IY,AUTOSGAMPTR
 527+ 5255 FA 61 52         JP M, .INCREASE
 528+ 5258                  ; new value is lower than previous one
 529+ 5258 CD 80 52         CALL .SIZEDIFF
 530+ 525B CD 99 50         CALL MAXANIMITEMS.DECREASE_COMMON
 531+ 525E C3 53 50         JP MAXANIMITEMS.E3
 532+ 5261              .INCREASE:
 533+ 5261 ED 44            NEG
 534+ 5263 F5               PUSH AF; save difference for later to set active flag to 0 of new entires
 535+ 5264 CD 80 52         CALL .SIZEDIFF
 536+ 5267 CD C5 50         CALL MAXANIMITEMS.INCREASE_COMMON
 537+ 526A AF               XOR A
 538+ 526B ED 42            SBC HL,BC ; location of new stuff
 539+ 526D F1               POP AF
 540+ 526E 47               LD B,A
 541+ 526F 11 08 00         LD DE,8
 542+ 5272 E5               PUSH HL
 543+ 5273 DD E1            POP IX
 544+ 5275              .L1:
 545+ 5275 DD 36 06 00      LD (IX+6),0 ; active flag
 546+ 5279 DD 19            ADD IX,DE
 547+ 527B 10 F8            DJNZ .L1
 548+ 527D C3 75 50         JP MAXANIMITEMS.E4
 549+ 5280              .SIZEDIFF:
 550+ 5280 26 00            LD H,0
 551+ 5282 6F               LD L,A
 552+ 5283 CD AB 64         CALL HLx8
 553+ 5286 78               LD A,B
 554+ 5287 32 DA 4F         LD (ANIMSPRNUM),A
 555+ 528A 44               LD B,H
 556+ 528B 4D               LD C,L
 557+ 528C C9               RET ; BC=size difference in bytes
 558+ 528D              ; *******************************************************************************************************
 559+ 528D
 560+ 528D              ; *******************************************************************************************************
 561+ 528D              ; function to handle CALL ANIMSPRITE basic extension
 562+ 528D              ; ANIMSPRITE ( BYTE id,
 563+ 528D              ;              BYTE sprite_number,
 564+ 528D              ;              BYTE animation_definition_id,
 565+ 528D              ;              BYTE cyclic_flag )
 566+ 528D              ; fills sprite animation data, returns an error if out of bounds, or invalid type
 567+ 528D              ANIMSPRITE:
 568+ 528D                  ; opening (
 569+ 528D CD BD 65     	CALL CHKCHAR
 570+ 5290 28           	DB '('
 571+ 5291              	; get sprite animation id
 572+ 5291 DD 21 1C 52  	LD IX, GETBYT
 573+ 5295 CD 59 01     	CALL CALBAS
 574+ 5298 F5               PUSH AF
 575+ 5299 3C               INC A
 576+ 529A 4F               LD C,A
 577+ 529B 3A DA 4F         LD A,(ANIMSPRNUM)
 578+ 529E B9               CP C
 579+ 529F DA D5 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 580+ 52A2              	; comma
 581+ 52A2 CD BD 65     	CALL CHKCHAR
 582+ 52A5 2C           	DB ','
 583+ 52A6              	; get sprite number
 584+ 52A6 DD 21 1C 52  	LD IX, GETBYT
 585+ 52AA CD 59 01     	CALL CALBAS
 586+ 52AD F5               PUSH AF
 587+ 52AE                  ; check if out of bounds
 588+ 52AE FE 20            CP 32
 589+ 52B0 D2 D5 65         JP NC, SUBSCRIPT_OUT_OF_RANGE
 590+ 52B3              	; comma
 591+ 52B3 CD BD 65     	CALL CHKCHAR
 592+ 52B6 2C           	DB ','
 593+ 52B7              	; get animation definition id
 594+ 52B7 DD 21 1C 52  	LD IX, GETBYT
 595+ 52BB CD 59 01     	CALL CALBAS
 596+ 52BE F5               PUSH AF
 597+ 52BF 3C               INC A
 598+ 52C0 4F               LD C,A
 599+ 52C1 3A D7 4F         LD A,(ANIMDEFNUM)
 600+ 52C4 B9               CP C
 601+ 52C5 DA D5 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 602+ 52C8              	; comma
 603+ 52C8 CD BD 65     	CALL CHKCHAR
 604+ 52CB 2C           	DB ','
 605+ 52CC              	; get cyclic flag
 606+ 52CC DD 21 1C 52  	LD IX, GETBYT
 607+ 52D0 CD 59 01         CALL CALBAS
 608+ 52D3 F5           	PUSH AF
 609+ 52D4              	; ending )
 610+ 52D4 CD BD 65     	CALL CHKCHAR
 611+ 52D7 29           	DB ')'
 612+ 52D8              .ENTRY:
 613+ 52D8 E5               PUSH HL
 614+ 52D9 DD E1            POP IX
 615+ 52DB D9               EXX
 616+ 52DC D1               POP DE ; cyclic
 617+ 52DD C1               POP BC ; animation definition id
 618+ 52DE E1               POP HL ; sprite number
 619+ 52DF D9               EXX
 620+ 52E0 F1               POP AF ; sprite animation id
 621+ 52E1 CD FE 4F         CALL GETnthSPRANIM
 622+ 52E4 E5               PUSH HL
 623+ 52E5 FD E1            POP IY
 624+ 52E7 D9               EXX
 625+ 52E8 FD 74 00         LD (IY),H
 626+ 52EB FD 70 04         LD (IY+4),B
 627+ 52EE FD 72 05         LD (IY+5),D
 628+ 52F1                  ;LD (IY+6),0 -- not needed as set in MAXANIMSPRS
 629+ 52F1                  ; following will do preparation for ANIMSTEP situation
 630+ 52F1                  ; current item set to above limit and timer to 1
 631+ 52F1                  ; any call to ANIMSTEP will switch and setup to first item for cyclic
 632+ 52F1 FD 36 03 FF      LD (IY+3),255
 633+ 52F5 FD 36 01 01      LD (IY+1),1
 634+ 52F9 FD 36 02 00      LD (IY+2),0
 635+ 52FD                  ; mark as sprite animation
 636+ 52FD FD 36 07 00      LD (IY+7),0
 637+ 5301 DD E5            PUSH IX
 638+ 5303 E1               POP HL
 639+ 5304 C9               RET
 640+ 5305              ; *******************************************************************************************************
 641+ 5305
 642+ 5305              ; *******************************************************************************************************
 643+ 5305              ; function to handle CALL ANIMCHAR basic extension
 644+ 5305              ; ANIMCHAR ( BYTE id,
 645+ 5305              ;            INT character number 0-767,
 646+ 5305              ;            BYTE animation_definition_id,
 647+ 5305              ;            BYTE cyclic_flag )
 648+ 5305              ; fills sprite animation data, returns an error if out of bounds, or invalid type
 649+ 5305              ANIMCHAR:
 650+ 5305                  ; opening (
 651+ 5305 CD BD 65     	CALL CHKCHAR
 652+ 5308 28           	DB '('
 653+ 5309              	; get sprite animation id
 654+ 5309 DD 21 1C 52  	LD IX, GETBYT
 655+ 530D CD 59 01     	CALL CALBAS
 656+ 5310 F5               PUSH AF
 657+ 5311 3C               INC A
 658+ 5312 4F               LD C,A
 659+ 5313 3A DA 4F         LD A,(ANIMSPRNUM)
 660+ 5316 B9               CP C
 661+ 5317 DA D5 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 662+ 531A              	; comma
 663+ 531A CD BD 65     	CALL CHKCHAR
 664+ 531D 2C           	DB ','
 665+ 531E              	; get character number
 666+ 531E DD 21 2F 54  	LD IX, FRMQNT
 667+ 5322 CD 59 01     	CALL CALBAS
 668+ 5325 D5               PUSH DE
 669+ 5326                  ; check if out of bounds
 670+ 5326 7A               LD A,D
 671+ 5327 FE 03            CP 3
 672+ 5329 D2 D5 65         JP NC, SUBSCRIPT_OUT_OF_RANGE
 673+ 532C              	; comma
 674+ 532C CD BD 65     	CALL CHKCHAR
 675+ 532F 2C           	DB ','
 676+ 5330              	; get animation definition id
 677+ 5330 DD 21 1C 52  	LD IX, GETBYT
 678+ 5334 CD 59 01     	CALL CALBAS
 679+ 5337 F5               PUSH AF
 680+ 5338 3C               INC A
 681+ 5339 4F               LD C,A
 682+ 533A 3A D7 4F         LD A,(ANIMDEFNUM)
 683+ 533D B9               CP C
 684+ 533E DA D5 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 685+ 5341              	; comma
 686+ 5341 CD BD 65     	CALL CHKCHAR
 687+ 5344 2C           	DB ','
 688+ 5345              	; get cyclic flag
 689+ 5345 DD 21 1C 52  	LD IX, GETBYT
 690+ 5349 CD 59 01         CALL CALBAS
 691+ 534C F5           	PUSH AF
 692+ 534D              	; ending )
 693+ 534D CD BD 65     	CALL CHKCHAR
 694+ 5350 29           	DB ')'
 695+ 5351              .ENTRY:
 696+ 5351 E5               PUSH HL
 697+ 5352 DD E1            POP IX
 698+ 5354 D9               EXX
 699+ 5355 D1               POP DE ; cyclic
 700+ 5356 C1               POP BC ; animation definition id
 701+ 5357 E1               POP HL ; character number
 702+ 5358 D9               EXX
 703+ 5359 F1               POP AF ; sprite animation id
 704+ 535A CD FE 4F         CALL GETnthSPRANIM
 705+ 535D E5               PUSH HL
 706+ 535E FD E1            POP IY
 707+ 5360 D9               EXX
 708+ 5361 FD 75 00         LD (IY),L
 709+ 5364 24               INC H ; save character bank+1
 710+ 5365 FD 74 07         LD (IY+7),H
 711+ 5368 FD 70 04         LD (IY+4),B
 712+ 536B FD 72 05         LD (IY+5),D
 713+ 536E                  ;LD (IY+6),0 -- not needed as set in MAXANIMSPRS
 714+ 536E                  ; following will do preparation for ANIMSTEP situation
 715+ 536E                  ; current item set to above limit and timer to 1
 716+ 536E                  ; any call to ANIMSTEP will switch and setup to first item for cyclic
 717+ 536E FD 36 03 FF      LD (IY+3),255
 718+ 5372 FD 36 01 01      LD (IY+1),1
 719+ 5376 FD 36 02 00      LD (IY+2),0
 720+ 537A DD E5            PUSH IX
 721+ 537C E1               POP HL
 722+ 537D C9               RET
 723+ 537E              ; *******************************************************************************************************
 724+ 537E
 725+ 537E              ; *******************************************************************************************************
 726+ 537E              ; function to handle CALL MAXAUTOSGAMS basic extension
 727+ 537E              ; MAXAUTOSGAMS (BYTE number)
 728+ 537E              ; sets new number and moves memory buffers as needed
 729+ 537E              MAXAUTOSGAMS:
 730+ 537E              	; opening (
 731+ 537E CD BD 65     	CALL CHKCHAR
 732+ 5381 28           	DB '('
 733+ 5382              	; get value
 734+ 5382 DD 21 1C 52  	LD IX, GETBYT
 735+ 5386 CD 59 01     	CALL CALBAS
 736+ 5389 F5               PUSH AF
 737+ 538A              	; ending )
 738+ 538A CD BD 65     	CALL CHKCHAR
 739+ 538D 29           	DB ')'
 740+ 538E F1               POP AF
 741+ 538F F3               DI
 742+ 5390              	; save position
 743+ 5390 E5           	PUSH HL
 744+ 5391              .ENTRY:
 745+ 5391 47               LD B,A
 746+ 5392 3A DD 4F         LD A,(AUTOSGAMNUM)
 747+ 5395 90               SUB B
 748+ 5396 CA 5C 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 749+ 5399 FD 21 10 40      LD IY,FREEMEMPTR
 750+ 539D FA A9 53         JP M, .INCREASE
 751+ 53A0                  ; new value is lower than previous one
 752+ 53A0 CD C8 53         CALL .SIZEDIFF
 753+ 53A3 CD 99 50         CALL MAXANIMITEMS.DECREASE_COMMON
 754+ 53A6 C3 5C 50         JP MAXANIMITEMS.EXIT
 755+ 53A9              .INCREASE:
 756+ 53A9 ED 44            NEG
 757+ 53AB F5               PUSH AF; save difference for later to set active flag to 0 of new entires
 758+ 53AC CD C8 53         CALL .SIZEDIFF
 759+ 53AF CD C5 50         CALL MAXANIMITEMS.INCREASE_COMMON
 760+ 53B2 AF               XOR A
 761+ 53B3 ED 42            SBC HL,BC ; location of new stuff
 762+ 53B5 F1               POP AF
 763+ 53B6 47               LD B,A
 764+ 53B7 11 18 00         LD DE,24
 765+ 53BA E5               PUSH HL
 766+ 53BB DD E1            POP IX
 767+ 53BD              .L1:
 768+ 53BD DD 36 13 00      LD (IX+19),0 ; active flag
 769+ 53C1 DD 19            ADD IX,DE
 770+ 53C3 10 F8            DJNZ .L1
 771+ 53C5 C3 5C 50         JP MAXANIMITEMS.EXIT
 772+ 53C8              .SIZEDIFF:
 773+ 53C8 26 00            LD H,0
 774+ 53CA 6F               LD L,A
 775+ 53CB CD AB 64         CALL HLx8
 776+ 53CE 54               LD D,H
 777+ 53CF 5D               LD E,L
 778+ 53D0 29               ADD HL,HL
 779+ 53D1 19               ADD HL,DE
 780+ 53D2 78               LD A,B
 781+ 53D3 32 DD 4F         LD (AUTOSGAMNUM),A
 782+ 53D6 44               LD B,H
 783+ 53D7 4D               LD C,L
 784+ 53D8 C9               RET ; BC=size difference in bytes
 785+ 53D9              ; *******************************************************************************************************
 786+ 53D9
 787+ 53D9              ; *******************************************************************************************************
 788+ 53D9              ; function to handle CALL AUTOSGAMDEF basic extension
 789+ 53D9              ; AUTOSGAMDEF ( BYTE id,
 790+ 53D9              ;               INT VARIABLE x, INT VARIABLE y,
 791+ 53D9              ;               INT minimum, INT maximum, INT delta,
 792+ 53D9              ;               INT direction,
 793+ 53D9              ;               INT ticks,
 794+ 53D9              ;               BYTE sprite_group_count,
 795+ 53D9              ;               INT[2][sprite_group_count] VARIABLE sprite_group,
 796+ 53D9              ;               BYTE item_number,
 797+ 53D9              ;               INT[] VARIABLE sprite_animations_negative_direction,
 798+ 53D9              ;               INT[] VARIABLE sprite_animations_positive_direction
 799+ 53D9              AUTOSGAMDEF:
 800+ 53D9                  ; opening (
 801+ 53D9 CD BD 65     	CALL CHKCHAR
 802+ 53DC 28           	DB '('
 803+ 53DD              	; get sprite animation id
 804+ 53DD DD 21 1C 52  	LD IX, GETBYT
 805+ 53E1 CD 59 01     	CALL CALBAS
 806+ 53E4 F5               PUSH AF
 807+ 53E5 3C               INC A
 808+ 53E6 4F               LD C,A
 809+ 53E7 3A DD 4F         LD A,(AUTOSGAMNUM)
 810+ 53EA B9               CP C
 811+ 53EB DA D5 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 812+ 53EE F1               POP AF
 813+ 53EF E5               PUSH HL
 814+ 53F0 CD 0A 50         CALL GETnthAUTOSGAM
 815+ 53F3 22 AB 62         LD (BLIT_TMP),HL ; for later
 816+ 53F6 E1               POP HL
 817+ 53F7              	; comma
 818+ 53F7 CD BD 65     	CALL CHKCHAR
 819+ 53FA 2C           	DB ','
 820+ 53FB              	; get address of the X coordinate variable
 821+ 53FB DD 21 A4 5E  	LD IX, PTRGET
 822+ 53FF CD 59 01     	CALL CALBAS
 823+ 5402 DD 2A AB 62  	LD IX,(BLIT_TMP)
 824+ 5406 DD 73 00         LD (IX+0),E
 825+ 5409 DD 72 01         LD (IX+1),D
 826+ 540C              	; comma
 827+ 540C CD BD 65     	CALL CHKCHAR
 828+ 540F 2C           	DB ','
 829+ 5410              	; get address of the Y coordinate variable
 830+ 5410 DD 21 A4 5E  	LD IX, PTRGET
 831+ 5414 CD 59 01     	CALL CALBAS
 832+ 5417 DD 2A AB 62  	LD IX,(BLIT_TMP)
 833+ 541B DD 73 02         LD (IX+2),E
 834+ 541E DD 72 03         LD (IX+3),D
 835+ 5421              	; comma
 836+ 5421 CD BD 65     	CALL CHKCHAR
 837+ 5424 2C           	DB ','
 838+ 5425              	; get minimum value
 839+ 5425 DD 21 2F 54  	LD IX, FRMQNT
 840+ 5429 CD 59 01     	CALL CALBAS
 841+ 542C DD 2A AB 62  	LD IX,(BLIT_TMP)
 842+ 5430 DD 73 04         LD (IX+4),E
 843+ 5433 DD 72 05         LD (IX+5),D
 844+ 5436              	; comma
 845+ 5436 CD BD 65     	CALL CHKCHAR
 846+ 5439 2C           	DB ','
 847+ 543A              	; get maximum value
 848+ 543A DD 21 2F 54  	LD IX, FRMQNT
 849+ 543E CD 59 01     	CALL CALBAS
 850+ 5441 DD 2A AB 62  	LD IX,(BLIT_TMP)
 851+ 5445 DD 73 06         LD (IX+6),E
 852+ 5448 DD 72 07         LD (IX+7),D
 853+ 544B              	; comma
 854+ 544B CD BD 65     	CALL CHKCHAR
 855+ 544E 2C           	DB ','
 856+ 544F              	; get delta value
 857+ 544F DD 21 2F 54  	LD IX, FRMQNT
 858+ 5453 CD 59 01     	CALL CALBAS
 859+ 5456 DD 2A AB 62  	LD IX,(BLIT_TMP)
 860+ 545A DD 73 08         LD (IX+8),E
 861+ 545D DD 72 09         LD (IX+9),D
 862+ 5460              	; comma
 863+ 5460 CD BD 65     	CALL CHKCHAR
 864+ 5463 2C           	DB ','
 865+ 5464              	; get direction value
 866+ 5464 DD 21 2F 54  	LD IX, FRMQNT
 867+ 5468 CD 59 01     	CALL CALBAS
 868+ 546B DD 2A AB 62  	LD IX,(BLIT_TMP)
 869+ 546F DD 73 0A         LD (IX+10),E
 870+ 5472 DD 72 0B         LD (IX+11),D
 871+ 5475              	; comma
 872+ 5475 CD BD 65     	CALL CHKCHAR
 873+ 5478 2C           	DB ','
 874+ 5479              	; get ticks value
 875+ 5479 DD 21 2F 54  	LD IX, FRMQNT
 876+ 547D CD 59 01     	CALL CALBAS
 877+ 5480 DD 2A AB 62  	LD IX,(BLIT_TMP)
 878+ 5484 DD 73 14         LD (IX+20),E
 879+ 5487 DD 72 15         LD (IX+21),D
 880+ 548A              	; comma
 881+ 548A CD BD 65     	CALL CHKCHAR
 882+ 548D 2C           	DB ','
 883+ 548E              	; get sprite group count
 884+ 548E DD 21 1C 52  	LD IX, GETBYT
 885+ 5492 CD 59 01     	CALL CALBAS
 886+ 5495 B7               OR A
 887+ 5496 CA D5 65         JP Z,SUBSCRIPT_OUT_OF_RANGE
 888+ 5499 DD 2A AB 62  	LD IX,(BLIT_TMP)
 889+ 549D DD 77 0B         LD (IX+11),A
 890+ 54A0              	; comma
 891+ 54A0 CD BD 65     	CALL CHKCHAR
 892+ 54A3 2C           	DB ','
 893+ 54A4              	; get sprite group definition array data pointer
 894+ 54A4 DD 2A AB 62  	LD IX,(BLIT_TMP)
 895+ 54A8 DD 5E 0B         LD E,(IX+11)
 896+ 54AB 16 03        	LD D,3
 897+ 54AD 3E 02        	LD A,2
 898+ 54AF 47           	LD B,A
 899+ 54B0 CD EA 65     	CALL GET_BASIC_ARRAY_DATA_POINTER
 900+ 54B3 DD 2A AB 62  	LD IX,(BLIT_TMP)
 901+ 54B7 DD 71 0C     	LD (IX+12),C
 902+ 54BA DD 70 0D         LD (IX+13),B
 903+ 54BD              	; comma
 904+ 54BD CD BD 65     	CALL CHKCHAR
 905+ 54C0 2C           	DB ','
 906+ 54C1              	; get sprite animation array size
 907+ 54C1 DD 21 1C 52  	LD IX,GETBYT
 908+ 54C5 CD 59 01     	CALL CALBAS
 909+ 54C8 DD 2A AB 62  	LD IX,(BLIT_TMP)
 910+ 54CC DD 77 0E         LD (IX+14),A
 911+ 54CF B7               OR A
 912+ 54D0 CA D5 65         JP Z,SUBSCRIPT_OUT_OF_RANGE
 913+ 54D3              	; comma
 914+ 54D3 CD BD 65     	CALL CHKCHAR
 915+ 54D6 2C           	DB ','
 916+ 54D7                  ; get array pointer for negative direction
 917+ 54D7 DD 2A AB 62  	LD IX,(BLIT_TMP)
 918+ 54DB DD 56 0E         LD D,(IX+14)
 919+ 54DE 3E 02            LD A,2
 920+ 54E0 06 01            LD B,1
 921+ 54E2 CD EA 65         CALL GET_BASIC_ARRAY_DATA_POINTER
 922+ 54E5 DD 2A AB 62  	LD IX,(BLIT_TMP)
 923+ 54E9 DD 71 0F         LD (IX+15),C
 924+ 54EC DD 70 10         LD (IX+16),B
 925+ 54EF              	; comma
 926+ 54EF CD BD 65     	CALL CHKCHAR
 927+ 54F2 2C           	DB ','
 928+ 54F3                  ; get array pointer for positive direction
 929+ 54F3 DD 2A AB 62  	LD IX,(BLIT_TMP)
 930+ 54F7 DD 56 0E         LD D,(IX+14)
 931+ 54FA 3E 02            LD A,2
 932+ 54FC 06 01            LD B,1
 933+ 54FE CD EA 65         CALL GET_BASIC_ARRAY_DATA_POINTER
 934+ 5501 DD 2A AB 62  	LD IX,(BLIT_TMP)
 935+ 5505 DD 71 11         LD (IX+17),C
 936+ 5508 DD 70 12         LD (IX+18),B
 937+ 550B              	; ending )
 938+ 550B CD BD 65     	CALL CHKCHAR
 939+ 550E 29           	DB ')'
 940+ 550F C9               RET
 941+ 5510              ; *******************************************************************************************************
 942+ 5510
 943+ 5510              ; *******************************************************************************************************
 944+ 5510              ; function to handle CALL AUTOSGAMSTART basic extension
 945+ 5510              ; AUTOSGAMSTART ( BYTE id )
 946+ 5510              AUTOSGAMSTART:
 947+ 5510 3E 01            LD A,1
 948+ 5512              .COMMON:
 949+ 5512 32 3E 55         LD (.SETVALUE+3),A
 950+ 5515                  ; opening (
 951+ 5515 CD BD 65     	CALL CHKCHAR
 952+ 5518 28           	DB '('
 953+ 5519              	; get sprite animation id
 954+ 5519 DD 21 1C 52  	LD IX, GETBYT
 955+ 551D CD 59 01     	CALL CALBAS
 956+ 5520 F5               PUSH AF
 957+ 5521 3C               INC A
 958+ 5522 4F               LD C,A
 959+ 5523 3A DD 4F         LD A,(AUTOSGAMNUM)
 960+ 5526 B9               CP C
 961+ 5527 DA D5 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 962+ 552A F1               POP AF
 963+ 552B E5               PUSH HL
 964+ 552C CD 0A 50         CALL GETnthAUTOSGAM
 965+ 552F E5               PUSH HL
 966+ 5530 DD E1            POP IX
 967+ 5532 E1               POP HL
 968+ 5533 DD E5            PUSH IX
 969+ 5535              	; ending )
 970+ 5535 CD BD 65     	CALL CHKCHAR
 971+ 5538 29           	DB ')'
 972+ 5539
 973+ 5539                  ; so syntax is fine
 974+ 5539 DD E1            POP IX
 975+ 553B              .SETVALUE:
 976+ 553B DD 36 13 01      LD (IX+19),1 ; active flag
 977+ 553F                  ; set initial timer
 978+ 553F DD 7E 14         LD A,(IX+20)
 979+ 5542 DD 77 16         LD (IX+22),A
 980+ 5545 DD 7E 15         LD A,(IX+21)
 981+ 5548 DD 77 17         LD (IX+23),A
 982+ 554B C9               RET
 983+ 554C              ; *******************************************************************************************************
 984+ 554C
 985+ 554C              ; *******************************************************************************************************
 986+ 554C              ; function to handle CALL AUTOSGAMSTOP basic extension
 987+ 554C              ; AUTOSGAMSTOP ( BYTE id )
 988+ 554C              AUTOSGAMSTOP:
 989+ 554C AF               XOR A
 990+ 554D 18 C3            JR AUTOSGAMSTART.COMMON
 991+ 554F              ; *******************************************************************************************************
 992+ 554F
 993+ 554F              ; *******************************************************************************************************
 994+ 554F              ; function to handle CALL ANIMSTEP basic extension
 995+ 554F              ; two forms
 996+ 554F              ; ANIMSTEP ( BYTE id )
 997+ 554F              ; or
 998+ 554F              ; ANIMSTEP ( BYTE item_number,
 999+ 554F              ;            INT[] sprite_animations )
1000+ 554F              ; sets active flag to 1
1001+ 554F              ANIMSTEP:
1002+ 554F 11 CE 55         LD DE,ANIMSTARTSTOP_COMMON.STEP
1003+ 5552 18 08            JR ANIMSTARTSTOP_COMMON
1004+ 5554              ; *******************************************************************************************************
1005+ 5554              ; *******************************************************************************************************
1006+ 5554              ; function to handle CALL ANIMSTART basic extension
1007+ 5554              ; two forms
1008+ 5554              ; ANIMSTART ( BYTE id )
1009+ 5554              ; or
1010+ 5554              ; ANIMSTART ( BYTE item_number,
1011+ 5554              ;             INT[] sprite_animations )
1012+ 5554              ; sets active flag to 1
1013+ 5554              ANIMSTART:
1014+ 5554 11 BC 55         LD DE,ANIMSTARTSTOP_COMMON.START
1015+ 5557 18 03            JR ANIMSTARTSTOP_COMMON
1016+ 5559              ; *******************************************************************************************************
1017+ 5559              ; *******************************************************************************************************
1018+ 5559              ; function to handle CALL ANIMSTOP basic extension
1019+ 5559              ; two forms
1020+ 5559              ; ANIMSTOP ( BYTE id )
1021+ 5559              ; or
1022+ 5559              ; ANIMSTOP ( BYTE item_number,
1023+ 5559              ;            INT[] sprite_animations )
1024+ 5559              ; sets active flag to 1
1025+ 5559              ANIMSTOP:
1026+ 5559 11 C9 55         LD DE,ANIMSTARTSTOP_COMMON.STOP
1027+ 555C              ; *******************************************************************************************************
1028+ 555C              ANIMSTARTSTOP_COMMON:
1029+ 555C ED 53 BA 55      LD (ANIMSTARTSTOP_COMMON.FN+1),DE
1030+ 5560                  ; opening (
1031+ 5560 CD BD 65     	CALL CHKCHAR
1032+ 5563 28           	DB '('
1033+ 5564              	; get sprite animation id or array size
1034+ 5564 DD 21 1C 52  	LD IX,GETBYT
1035+ 5568 CD 59 01     	CALL CALBAS
1036+ 556B F5               PUSH AF
1037+ 556C                  ; check if comma present
1038+ 556C CD C7 65         CALL GETPREVCHAR
1039+ 556F 23               INC HL
1040+ 5570 FE 2C            CP ','
1041+ 5572 28 0E            JR Z,.L1
1042+ 5574 FE 29            CP ')'
1043+ 5576 C2 E1 65         JP NZ,SYNTAX_ERROR
1044+ 5579                  ; ok so single argument variant
1045+ 5579 F1               POP AF
1046+ 557A E5               PUSH HL
1047+ 557B F3               DI
1048+ 557C CD A8 55         CALL .SETVALUE
1049+ 557F FB               EI
1050+ 5580 E1               POP HL
1051+ 5581 C9               RET
1052+ 5582              .L1:
1053+ 5582                  ; get array pointer
1054+ 5582 D1               POP DE
1055+ 5583 D5               PUSH DE
1056+ 5584 3E 02            LD A,2
1057+ 5586 06 01            LD B,1
1058+ 5588 CD EA 65         CALL GET_BASIC_ARRAY_DATA_POINTER
1059+ 558B C5               PUSH BC
1060+ 558C              	; ending )
1061+ 558C CD BD 65     	CALL CHKCHAR
1062+ 558F 29           	DB ')'
1063+ 5590 D1               POP DE ; array pointer
1064+ 5591 C1               POP BC ; number of items
1065+ 5592 78               LD A,B
1066+ 5593 B7               OR A
1067+ 5594 CA D5 65         JP Z,SUBSCRIPT_OUT_OF_RANGE
1068+ 5597 E5               PUSH HL
1069+ 5598 F3               DI
1070+ 5599              .L2:
1071+ 5599 C5               PUSH BC
1072+ 559A 1A               LD A,(DE)
1073+ 559B 13          > INC DE
1073+ 559C 13          > INC DE
1074+ 559D D5               PUSH DE
1075+ 559E CD A8 55         CALL .SETVALUE
1076+ 55A1 D1               POP DE
1077+ 55A2 C1               POP BC
1078+ 55A3 10 F4            DJNZ .L2
1079+ 55A5 FB               EI
1080+ 55A6 E1               POP HL
1081+ 55A7 C9               RET
1082+ 55A8
1083+ 55A8              .SETVALUE:
1084+ 55A8 47               LD B,A
1085+ 55A9 3C               INC A
1086+ 55AA 4F               LD C,A
1087+ 55AB 3A DA 4F         LD A,(ANIMSPRNUM)
1088+ 55AE B9               CP C
1089+ 55AF DA D5 65         JP C,SUBSCRIPT_OUT_OF_RANGE
1090+ 55B2 78               LD A,B
1091+ 55B3 CD FE 4F         CALL GETnthSPRANIM
1092+ 55B6 E5               PUSH HL
1093+ 55B7 DD E1            POP IX
1094+ 55B9              .FN:
1095+ 55B9 C3 00 00         JP 0
1096+ 55BC              .START:
1097+ 55BC DD 36 06 01      LD (IX+6),1 ; active flag
1098+ 55C0 DD 36 03 00      LD (IX+3),0 ; current item
1099+ 55C4 06 00            LD B,0 ; setup timer
1100+ 55C6 C3 4D 56         JP SETUP_ANIM_STEP
1101+ 55C9              .STOP:
1102+ 55C9 DD 36 06 00      LD (IX+6),0 ; active flag
1103+ 55CD C9               RET
1104+ 55CE              .STEP:
1105+ 55CE 06 00            LD B,0
1106+ 55D0 C3 F1 55         JP PROCESS_SINGLE_ANIMATION.INACTIVE_TOO
1107+ 55D3              ; *******************************************************************************************************
1108+ 55D3
1109+ 55D3              ; *******************************************************************************************************
1110+ 55D3              ; function processes animations during vblank period
1111+ 55D3              PROCESS_ANIMATIONS:
1112+ 55D3 3A DA 4F         LD A,(ANIMSPRNUM)
1113+ 55D6 B7               OR A
1114+ 55D7 C8               RET Z; no animations defined
1115+ 55D8 47               LD B,A
1116+ 55D9 DD 2A DB 4F      LD IX,(ANIMSPRPTR)
1117+ 55DD              .L1:
1118+ 55DD C5               PUSH BC
1119+ 55DE 06 00            LD B,0 ; normal mode, change on timer expiry only
1120+ 55E0 CD EC 55         CALL PROCESS_SINGLE_ANIMATION
1121+ 55E3 11 08 00         LD DE,8
1122+ 55E6 DD 19            ADD IX,DE
1123+ 55E8 C1               POP BC
1124+ 55E9 10 F2            DJNZ .L1
1125+ 55EB C9               RET
1126+ 55EC              ; *******************************************************************************************************
1127+ 55EC
1128+ 55EC              ; *******************************************************************************************************
1129+ 55EC              ; processes single sprite animation
1130+ 55EC              ; skips inactive ones, but this can be skipped by calling .INACTIVE_TOO entry point
1131+ 55EC              ; on timer expiry goes to next animation item
1132+ 55EC              ; input IX=sprite animation pointer
1133+ 55EC              ; input B=1 force mode, activate animation action regardless of expired timer
1134+ 55EC              PROCESS_SINGLE_ANIMATION:
1135+ 55EC DD 7E 06         LD A,(IX+6); active
1136+ 55EF B7               OR A
1137+ 55F0 C8               RET Z ; inactive animation
1138+ 55F1              .INACTIVE_TOO:
1139+ 55F1 DD 6E 01         LD L,(IX+1)
1140+ 55F4 DD 66 02         LD H,(IX+2) ; HL=end time
1141+ 55F7 2B               DEC HL
1142+ 55F8 DD 75 01         LD (IX+1),L
1143+ 55FB DD 74 02         LD (IX+2),H
1144+ 55FE 7D               LD A,L
1145+ 55FF B4               OR H
1146+ 5600 28 06            JR Z,.STEP
1147+ 5602 05               DEC B
1148+ 5603 04               INC B
1149+ 5604 C8               RET Z ; not forced mode, return
1150+ 5605 C3 4D 56         JP SETUP_ANIM_STEP; call function with flag to skip timer setup
1151+ 5608              .STEP:
1152+ 5608 06 00            LD B,0; setup timer
1153+ 560A DD 34 03         INC (IX+3) ; current animation item
1154+ 560D C3 4D 56         JP SETUP_ANIM_STEP
1155+ 5610              ; *******************************************************************************************************
1156+ 5610
1157+ 5610              ; *******************************************************************************************************
1158+ 5610              ; function will setup sprite animation after current item change
1159+ 5610              ; input A=current animation definition
1160+ 5610              ; input IX=pointer to sprite animation
1161+ 5610              ; input B=1 skip timer setup
1162+ 5610              ; output IY=pointer to animation item
1163+ 5610              ; CF=1 error or non-cyclic animation ended, in both cases set active flag to 0
1164+ 5610              ; basically sets new end time for current animation
1165+ 5610              INIT_CURRENT_ANIMATION:
1166+ 5610 CD F2 4F         CALL GETnthANIMDEF
1167+ 5613 DD 7E 03         LD A,(IX+3) ; current animation item
1168+ 5616 BE               CP (HL) ; number of animation items in the animation definition
1169+ 5617 38 0A            JR C,.L3 ; last item not reached
1170+ 5619                  ; last item reached
1171+ 5619 DD 7E 05         LD A,(IX+5) ; cyclic flag
1172+ 561C B7               OR A
1173+ 561D 28 2C            JR Z,.ERROR ; non-cyclic animation
1174+ 561F                  ; cyclic animation, restart
1175+ 561F DD 36 03 00      LD (IX+3),0; current item
1176+ 5623              .L3:
1177+ 5623                  ; HL = animation definition
1178+ 5623 23               INC HL ; skip animation definition size field
1179+ 5624 16 00            LD D,0
1180+ 5626 DD 5E 03         LD E,(IX+3); current item
1181+ 5629 19               ADD HL,DE
1182+ 562A 4E               LD C,(HL) ; current animation item
1183+ 562B 0C               INC C
1184+ 562C 3A D4 4F         LD A,(ANIMITEMNUM)
1185+ 562F B9               CP C
1186+ 5630 38 19            JR C,.ERROR ; invalid animation item, stop animation
1187+ 5632 0D               DEC C
1188+ 5633 79               LD A,C
1189+ 5634 CD E9 4F         CALL GETnthANIMITEM
1190+ 5637 E5               PUSH HL
1191+ 5638 FD E1            POP IY ; IY=animation item
1192+ 563A 05               DEC B
1193+ 563B 28 0C            JR Z,.EXIT
1194+ 563D FD 5E 01         LD E,(IY+1)
1195+ 5640 FD 56 02         LD D,(IY+2) ; duration
1196+ 5643 DD 73 01         LD (IX+1),E
1197+ 5646 DD 72 02         LD (IX+2),D
1198+ 5649              .EXIT:
1199+ 5649 AF               XOR A
1200+ 564A C9               RET
1201+ 564B              .ERROR:
1202+ 564B 37               SCF
1203+ 564C C9               RET
1204+ 564D              ; *******************************************************************************************************
1205+ 564D
1206+ 564D              ; *******************************************************************************************************
1207+ 564D              ; function will display currect item and set up expiry time
1208+ 564D              ; it will also stop the animation if expired
1209+ 564D              ; sets sprite update flag if any changes in sprite data made
1210+ 564D              ; input IX=current sprite animation
1211+ 564D              ; input B=1 skip timer setup
1212+ 564D              SETUP_ANIM_STEP:
1213+ 564D DD 4E 04         LD C,(IX+4) ; animation definition ID
1214+ 5650 0C               INC C
1215+ 5651 3A D7 4F         LD A,(ANIMDEFNUM)
1216+ 5654 B9               CP C
1217+ 5655 30 05            JR NC,.L2
1218+ 5657                  ; given animation item is outside of bounds, deactivate animation
1219+ 5657              .STOPANIM:
1220+ 5657 DD 36 06 00      LD (IX+6),0
1221+ 565B C9               RET
1222+ 565C              .L2:
1223+ 565C 0D               DEC C
1224+ 565D 79               LD A,C
1225+ 565E CD 10 56         CALL INIT_CURRENT_ANIMATION
1226+ 5661 38 F4            JR C, .STOPANIM
1227+ 5663 FD 7E 00         LD A,(IY) ; type of animation item
1228+ 5666 B7               OR A
1229+ 5667 28 44            JR Z,.L4 ; change pattern and/or color
1230+ 5669              .PAT:
1231+ 5669                  ; change pattern definition
1232+ 5669                  ; check if sprite or character
1233+ 5669 DD 7E 07         LD A,(IX+7)
1234+ 566C B7               OR A
1235+ 566D 20 58            JR NZ,.CHAR
1236+ 566F DD 7E 00         LD A,(IX) ; sprite number
1237+ 5672 CD 85 4D         CALL GETnthSPRATTR
1238+ 5675 23          > INC HL ; skip y and x
1238+ 5676 23          > INC HL
1238+ 5677 23          > INC HL
1238+ 5678 23          > INC HL
1239+ 5679 7E               LD A,(HL); current pattern
1240+ 567A 26 00            LD H,0
1241+ 567C 6F               LD L,A
1242+ 567D 3A E0 F3         LD A,(REG1SAV)
1243+ 5680 E6 02            AND 2
1244+ 5682 20 07            JR NZ,.L6
1245+ 5684                  ; 8x8 sprite
1246+ 5684 CD AB 64         CALL HLx8
1247+ 5687 06 08            LD B,8
1248+ 5689 18 05            JR .L5
1249+ 568B              .L6:
1250+ 568B CD A9 64         CALL HLx32
1251+ 568E 06 20            LD B,32
1252+ 5690              .L5:
1253+ 5690 3A AF FC         LD A,(SCRMOD)
1254+ 5693 3D               DEC A
1255+ 5694 20 06            JR NZ,.L10
1256+ 5696 ED 5B C5 F3      LD DE,(T32PAT)
1257+ 569A 18 04            JR .L7
1258+ 569C              .L10:
1259+ 569C ED 5B CF F3      LD DE,(GRPPAT)
1260+ 56A0              .L7:
1261+ 56A0 19               ADD HL,DE
1262+ 56A1 CD 96 64         CALL SETWRT_LOCAL
1263+ 56A4 FD 6E 03         LD L,(IY+3)
1264+ 56A7 FD 66 04         LD H,(IY+4) ; pointer to sprite pattern data
1265+ 56AA C3 A1 64         JP BBYTECOPY
1266+ 56AD              .L4:
1267+ 56AD                  ; change pattern and color in sprite attributes table
1268+ 56AD DD 7E 00         LD A,(IX) ; sprite number
1269+ 56B0 CD 85 4D         CALL GETnthSPRATTR
1270+ 56B3 23          > INC HL ; skip y and x
1270+ 56B4 23          > INC HL
1270+ 56B5 23          > INC HL
1270+ 56B6 23          > INC HL
1271+ 56B7 FD 7E 03         LD A,(IY+3) ; new pattern
1272+ 56BA 77               LD (HL),A
1273+ 56BB 23          > INC HL
1273+ 56BC 23          > INC HL
1274+ 56BD FD 7E 04         LD A,(IY+4) ; new color
1275+ 56C0 77               LD (HL),A
1276+ 56C1 2A 7D 4D         LD HL,(SPRATR_UPDATE_FLAG)
1277+ 56C4 36 01            LD (HL),1
1278+ 56C6 C9               RET
1279+ 56C7              .CHAR:
1280+ 56C7 DD 6E 00         LD L,(IX)
1281+ 56CA 3D               DEC A
1282+ 56CB 67               LD H,A
1283+ 56CC CD AB 64         CALL HLx8
1284+ 56CF 3A AF FC         LD A,(SCRMOD)
1285+ 56D2 3D               DEC A
1286+ 56D3 20 06            JR NZ,.L8
1287+ 56D5 ED 5B C1 F3      LD DE,(T32CGP)
1288+ 56D9 18 04            JR .L9
1289+ 56DB              .L8:
1290+ 56DB ED 5B CB F3      LD DE,(GRPCGP)
1291+ 56DF              .L9:
1292+ 56DF 06 08            LD B,8
1293+ 56E1 18 BD            JR .L7
1294+ 56E3              ; *******************************************************************************************************
1295+ 56E3
# file closed: asm\ANIMATION.asm
 123  56E3               INCLUDE "SGAM.asm"
# file opened: asm\SGAM.asm
   1+ 56E3              ; Sprite Group Animate and Move
   2+ 56E3
   3+ 56E3              ; *******************************************************************************************************
   4+ 56E3              ; shared function to process a list of animations
   5+ 56E3              ; input B=list size
   6+ 56E3              ; input DE=list pointer
   7+ 56E3              SGAM_PROCESS_ANIM_LIST:
   8+ 56E3 21 F6 56         LD HL,.STEP
   9+ 56E6 22 BA 55         LD (ANIMSTARTSTOP_COMMON.FN+1),HL
  10+ 56E9              .L1:
  11+ 56E9 C5               PUSH BC
  12+ 56EA 1A               LD A,(DE)
  13+ 56EB 13          > INC DE
  13+ 56EC 13          > INC DE
  14+ 56ED D5               PUSH DE
  15+ 56EE CD A8 55         CALL ANIMSTARTSTOP_COMMON.SETVALUE
  16+ 56F1 D1               POP DE
  17+ 56F2 C1               POP BC
  18+ 56F3 10 F4            DJNZ .L1
  19+ 56F5 C9           	RET
  20+ 56F6              .STEP:
  21+ 56F6 06 01            LD B,1
  22+ 56F8 C3 F1 55         JP PROCESS_SINGLE_ANIMATION.INACTIVE_TOO
  23+ 56FB              ; *******************************************************************************************************
  24+ 56FB
  25+ 56FB              ; *******************************************************************************************************
  26+ 56FB              ; function to handle CALL SGAM basic extension
  27+ 56FB              ; sets position of a group of sprites as described in SPRGRPMOV
  28+ 56FB              ; and manually animate a list of animations
  29+ 56FB              ; _SGAM ( INT x,
  30+ 56FB              ;	      INT y,
  31+ 56FB              ;		  BYTE count,
  32+ 56FB              ;		  INT[2][count] data_ptr,
  33+ 56FB              ;         BYTE item_number,
  34+ 56FB              ;         INT[] sprite_animations )
  35+ 56FB              ; will put ram in page 0 also, page 1 is already there
  36+ 56FB              SGAM:
  37+ 56FB 3A 7C 4D     	LD A, (SPRATR_INIT_STATUS)
  38+ 56FE B7           	OR A
  39+ 56FF CA DD 65     	JP Z,ILLEGAL_FUNCTION
  40+ 5702              	; opening (
  41+ 5702 CD BD 65     	CALL CHKCHAR
  42+ 5705 28           	DB '('
  43+ 5706              	; get x
  44+ 5706 DD 21 2F 54  	LD IX, FRMQNT
  45+ 570A CD 59 01     	CALL CALBAS
  46+ 570D ED 53 AF 62  	LD (BLIT_STRUCT),DE
  47+ 5711              	; comma
  48+ 5711 CD BD 65     	CALL CHKCHAR
  49+ 5714 2C           	DB ','
  50+ 5715              	; get y
  51+ 5715 DD 21 2F 54  	LD IX, FRMQNT
  52+ 5719 CD 59 01     	CALL CALBAS
  53+ 571C ED 53 B1 62  	LD (BLIT_STRUCT+2),DE
  54+ 5720              	; comma
  55+ 5720 CD BD 65     	CALL CHKCHAR
  56+ 5723 2C           	DB ','
  57+ 5724              	; get count
  58+ 5724 DD 21 1C 52  	LD IX, GETBYT
  59+ 5728 CD 59 01     	CALL CALBAS
  60+ 572B B7               OR A
  61+ 572C CA D5 65         JP Z,SUBSCRIPT_OUT_OF_RANGE
  62+ 572F 32 B3 62     	LD (BLIT_STRUCT+4),A
  63+ 5732              	; comma
  64+ 5732 CD BD 65     	CALL CHKCHAR
  65+ 5735 2C           	DB ','
  66+ 5736              	; get sprite group definition array data pointer
  67+ 5736 3A B3 62         LD A,(BLIT_STRUCT+4)
  68+ 5739 5F           	LD E,A
  69+ 573A 16 03        	LD D,3
  70+ 573C 3E 02        	LD A,2
  71+ 573E 47           	LD B,A
  72+ 573F CD EA 65     	CALL GET_BASIC_ARRAY_DATA_POINTER
  73+ 5742 ED 43 B4 62  	LD (BLIT_STRUCT+5),BC
  74+ 5746              	; comma
  75+ 5746 CD BD 65     	CALL CHKCHAR
  76+ 5749 2C           	DB ','
  77+ 574A              	; get sprite animation array size
  78+ 574A DD 21 1C 52  	LD IX,GETBYT
  79+ 574E CD 59 01     	CALL CALBAS
  80+ 5751 32 B6 62         LD (BLIT_STRUCT+7),A
  81+ 5754 B7               OR A
  82+ 5755 CA D5 65         JP Z,SUBSCRIPT_OUT_OF_RANGE
  83+ 5758              	; comma
  84+ 5758 CD BD 65     	CALL CHKCHAR
  85+ 575B 2C           	DB ','
  86+ 575C                  ; get array pointer
  87+ 575C 3A B6 62         LD A,(BLIT_STRUCT+7)
  88+ 575F 57               LD D,A
  89+ 5760 3E 02            LD A,2
  90+ 5762 06 01            LD B,1
  91+ 5764 CD EA 65         CALL GET_BASIC_ARRAY_DATA_POINTER
  92+ 5767 ED 43 B7 62      LD (BLIT_STRUCT+8),BC
  93+ 576B              	; ending )
  94+ 576B CD BD 65     	CALL CHKCHAR
  95+ 576E 29           	DB ')'
  96+ 576F
  97+ 576F E5               PUSH HL
  98+ 5770 F3               DI
  99+ 5771
 100+ 5771              	; enable page 0
 101+ 5771 FD 21 78 57  	LD IY, .RET
 102+ 5775 C3 6F 65     	JP ENABLE_PAGE0
 103+ 5778              .RET:
 104+ 5778 D9               EXX
 105+ 5779 ED 5B AF 62      LD DE,(BLIT_STRUCT) ; initial x
 106+ 577D ED 4B B1 62      LD BC,(BLIT_STRUCT+2) ; initial y
 107+ 5781 D9               EXX
 108+ 5782 2A B4 62         LD HL,(BLIT_STRUCT+5) ; pointer to data
 109+ 5785 3A B3 62         LD A,(BLIT_STRUCT+4) ; number of entries
 110+ 5788 47               LD B,A
 111+ 5789 CD C2 4F         CALL SPRGRPMOV.UPDATE_LOC
 112+ 578C
 113+ 578C 3A B6 62         LD A,(BLIT_STRUCT+7) ; anim number
 114+ 578F 47               LD B,A
 115+ 5790 ED 5B B7 62      LD DE,(BLIT_STRUCT+8) ; anim list
 116+ 5794 CD E3 56     	CALL SGAM_PROCESS_ANIM_LIST
 117+ 5797
 118+ 5797 D1               POP DE
 119+ 5798 C1               POP BC
 120+ 5799 CD E6 64         CALL RESTORE_PAGE_INFO
 121+ 579C FB               EI
 122+ 579D E1               POP HL
 123+ 579E C9               RET
 124+ 579F              ; *******************************************************************************************************
 125+ 579F
 126+ 579F              ; *******************************************************************************************************
 127+ 579F              ; handles automatic move and animate sprite groups during interrupt
 128+ 579F              PROCESS_AUTOSGAMS:
 129+ 579F 3A DD 4F     	LD A,(AUTOSGAMNUM)
 130+ 57A2 B7           	OR A
 131+ 57A3 C8           	RET Z
 132+ 57A4 47           	LD B,A
 133+ 57A5 DD 2A DE 4F  	LD IX,(AUTOSGAMPTR)
 134+ 57A9              .L1:
 135+ 57A9 C5           	PUSH BC
 136+ 57AA DD 7E 13     	LD A,(IX+19) ; active flag
 137+ 57AD B7           	OR A
 138+ 57AE 28 28        	JR Z,.LOOPEND
 139+ 57B0              	; active, check timer
 140+ 57B0 DD 6E 16     	LD L,(IX+22)
 141+ 57B3 DD 66 17     	LD H,(IX+23) ; timer
 142+ 57B6 2B           	DEC HL
 143+ 57B7 7C           	LD A,H
 144+ 57B8 B5           	OR L
 145+ 57B9 28 08        	JR Z,.L2
 146+ 57BB              	; not expired
 147+ 57BB DD 75 16     	LD (IX+22),L
 148+ 57BE DD 74 17     	LD (IX+23),H
 149+ 57C1 18 15        	JR .LOOPEND
 150+ 57C3              .L2:
 151+ 57C3              	; expired, process
 152+ 57C3
 153+ 57C3                  ; set initial timer
 154+ 57C3 DD 7E 14         LD A,(IX+20)
 155+ 57C6 DD 77 16         LD (IX+22),A
 156+ 57C9 DD 7E 15         LD A,(IX+21)
 157+ 57CC DD 77 17         LD (IX+23),A
 158+ 57CF
 159+ 57CF CD E1 57     	CALL .MOVE
 160+ 57D2 CD 4C 58     	CALL .UPDATELOC
 161+ 57D5 CD 71 58     	CALL .PROCESS_ANIM_LIST
 162+ 57D8
 163+ 57D8              .LOOPEND:
 164+ 57D8 11 18 00     	LD DE,24
 165+ 57DB DD 19        	ADD IX,DE
 166+ 57DD C1           	POP BC
 167+ 57DE 10 C9        	DJNZ .L1
 168+ 57E0 C9           	RET
 169+ 57E1
 170+ 57E1              .MOVE:
 171+ 57E1              	; process movement
 172+ 57E1 DD 7E 0A     	LD A,(IX+10) ; direction
 173+ 57E4 B7           	OR A
 174+ 57E5 28 08        	JR Z, .MOVE_L1
 175+ 57E7              	; vertical
 176+ 57E7 DD 6E 02     	LD L,(IX+2)
 177+ 57EA DD 66 03     	LD H,(IX+3) ; vertical variable pointer
 178+ 57ED 18 06        	JR .MOVE_L2
 179+ 57EF              .MOVE_L1:
 180+ 57EF              	; horizontal
 181+ 57EF DD 6E 00     	LD L,(IX+0)
 182+ 57F2 DD 66 01     	LD H,(IX+1) ; horizontal variable pointer
 183+ 57F5              .MOVE_L2:
 184+ 57F5 E5           	PUSH HL
 185+ 57F6 FD E1        	POP IY
 186+ 57F8 FD 6E 00     	LD L,(IY+0)
 187+ 57FB FD 66 01     	LD H,(IY+1)
 188+ 57FE DD 5E 08     	LD E,(IX+8)
 189+ 5801 DD 56 09     	LD D,(IX+9) ; delta value
 190+ 5804 19           	ADD HL,DE
 191+ 5805 E5           	PUSH HL
 192+ 5806 DD 5E 04     	LD E,(IX+4)
 193+ 5809 DD 56 05     	LD D,(IX+5) ; minimum value
 194+ 580C A7           	AND A
 195+ 580D ED 52        	SBC HL,DE
 196+ 580F FA 29 58     	JP M,.MOVE_L3 ; below minimum
 197+ 5812 E1           	POP HL
 198+ 5813 E5           	PUSH HL
 199+ 5814 DD 5E 06     	LD E,(IX+6)
 200+ 5817 DD 56 07     	LD D,(IX+7) ; maximum value
 201+ 581A EB           	EX DE,HL
 202+ 581B A7           	AND A
 203+ 581C ED 52        	SBC HL,DE
 204+ 581E FA 31 58     	JP M,.MOVE_L4 ; above maximum
 205+ 5821 E1           	POP HL
 206+ 5822              	; within bounds
 207+ 5822              .MOVE_L5:
 208+ 5822 FD 75 00     	LD (IY+0),L
 209+ 5825 FD 74 01     	LD (IY+1),H
 210+ 5828 C9           	RET
 211+ 5829              .MOVE_L3:
 212+ 5829 E1           	POP HL
 213+ 582A CD 3D 58     	CALL .INVERSE_DELTA
 214+ 582D 6B           	LD L,E
 215+ 582E 62           	LD H,D
 216+ 582F 18 F1        	JR .MOVE_L5
 217+ 5831              .MOVE_L4:
 218+ 5831 E1           	POP HL
 219+ 5832 CD 3D 58     	CALL .INVERSE_DELTA
 220+ 5835 DD 6E 06     	LD L,(IX+6)
 221+ 5838 DD 66 07     	LD H,(IX+7) ; maximum
 222+ 583B 18 E5        	JR .MOVE_L5
 223+ 583D              .INVERSE_DELTA:
 224+ 583D AF           	XOR A
 225+ 583E DD 96 08     	SUB (IX+8)
 226+ 5841 DD 77 08     	LD (IX+8),A
 227+ 5844 9F           	SBC A,A
 228+ 5845 DD 96 09     	SUB (IX+9)
 229+ 5848 DD 77 09     	LD (IX+9),A
 230+ 584B C9           	RET
 231+ 584C
 232+ 584C              .UPDATELOC:
 233+ 584C DD E5        	PUSH IX
 234+ 584E D9           	EXX
 235+ 584F DD 6E 00     	LD L,(IX+0)
 236+ 5852 DD 66 01     	LD H,(IX+1)
 237+ 5855 5E           	LD E,(HL)
 238+ 5856 23           	INC HL
 239+ 5857 56           	LD D,(HL)
 240+ 5858 DD 6E 02     	LD L,(IX+2)
 241+ 585B DD 66 03     	LD H,(IX+3)
 242+ 585E 4E           	LD C,(HL)
 243+ 585F 23           	INC HL
 244+ 5860 46           	LD B,(HL)
 245+ 5861 D9           	EXX
 246+ 5862 DD 6E 0C     	LD L,(IX+12)
 247+ 5865 DD 66 0D     	LD H,(IX+13) ; pointer to sprite group data
 248+ 5868 DD 46 0B     	LD B,(IX+11) ; sprite group size
 249+ 586B CD C2 4F     	CALL SPRGRPMOV.UPDATE_LOC
 250+ 586E DD E1        	POP IX
 251+ 5870 C9           	RET
 252+ 5871
 253+ 5871              .PROCESS_ANIM_LIST:
 254+ 5871 DD E5        	PUSH IX
 255+ 5873 DD 46 0E         LD B,(IX+14) ; anim list size
 256+ 5876 DD CB 09 7E  	BIT 7,(IX+9)
 257+ 587A 28 08        	JR Z,.PROCESS_ANIM_LIST_L1
 258+ 587C              	; negative direction
 259+ 587C DD 5E 0F     	LD E,(IX+15)
 260+ 587F DD 56 10     	LD D,(IX+16)
 261+ 5882 18 06        	JR .PROCESS_ANIM_LIST_L2
 262+ 5884              .PROCESS_ANIM_LIST_L1:
 263+ 5884              	; positive direction
 264+ 5884 DD 5E 11     	LD E,(IX+17)
 265+ 5887 DD 56 12     	LD D,(IX+18)
 266+ 588A              .PROCESS_ANIM_LIST_L2:
 267+ 588A CD E3 56     	CALL SGAM_PROCESS_ANIM_LIST
 268+ 588D DD E1        	POP IX
 269+ 588F C9           	RET
 270+ 5890              ; *******************************************************************************************************
 271+ 5890
# file closed: asm\SGAM.asm
 124  5890               ENDIF
 125  5890
 126  5890               IF (RAM_CMDS == 1)
 127  5890               INCLUDE "MEMORY.asm"
# file opened: asm\MEMORY.asm
   1+ 5890              ; *******************************************************************************************************
   2+ 5890              ; function to handle CALL MEMCPY basic extension
   3+ 5890              ; _MEMCPY ( INT source,
   4+ 5890              ;			INT destination,
   5+ 5890              ;			INT count,
   6+ 5890              ; will put ram in page 0 also, page 1 is already there
   7+ 5890              MEMCPY:
   8+ 5890              	; opening (
   9+ 5890 CD BD 65     	CALL CHKCHAR
  10+ 5893 28           	DB '('
  11+ 5894              	; get source address
  12+ 5894 DD 21 2F 54  	LD IX, FRMQNT
  13+ 5898 CD 59 01     	CALL CALBAS
  14+ 589B D5           	PUSH DE
  15+ 589C              	; comma
  16+ 589C CD BD 65     	CALL CHKCHAR
  17+ 589F 2C           	DB ','
  18+ 58A0              	; get destination address
  19+ 58A0 DD 21 2F 54  	LD IX, FRMQNT
  20+ 58A4 CD 59 01     	CALL CALBAS
  21+ 58A7 D5           	PUSH DE
  22+ 58A8              	; comma
  23+ 58A8 CD BD 65     	CALL CHKCHAR
  24+ 58AB 2C           	DB ','
  25+ 58AC              	; get length
  26+ 58AC DD 21 2F 54  	LD IX, FRMQNT
  27+ 58B0 CD 59 01     	CALL CALBAS
  28+ 58B3 D5           	PUSH DE
  29+ 58B4              	; ending )
  30+ 58B4 CD BD 65     	CALL CHKCHAR
  31+ 58B7 29           	DB ')'
  32+ 58B8
  33+ 58B8              	; save position
  34+ 58B8 E5           	PUSH HL
  35+ 58B9 DD E1        	POP IX
  36+ 58BB
  37+ 58BB C1           	POP BC ; count
  38+ 58BC D1           	POP DE ; destination
  39+ 58BD E1           	POP HL ; source
  40+ 58BE D9           	EXX
  41+ 58BF              	; enable page 0
  42+ 58BF F3           	DI
  43+ 58C0 FD 21 C7 58  	LD IY, .RET
  44+ 58C4 C3 6F 65     	JP ENABLE_PAGE0
  45+ 58C7              .RET:
  46+ 58C7 FB           	EI
  47+ 58C8 D9           	EXX
  48+ 58C9 ED B0        	LDIR
  49+ 58CB D1               POP DE
  50+ 58CC C1               POP BC
  51+ 58CD CD E6 64         CALL RESTORE_PAGE_INFO
  52+ 58D0 DD E5        	PUSH IX
  53+ 58D2 E1           	POP HL
  54+ 58D3 C9           	RET
  55+ 58D4              ; *******************************************************************************************************
  56+ 58D4
  57+ 58D4              ; *******************************************************************************************************
  58+ 58D4              ; function to handle CALL FILRAM basic extension
  59+ 58D4              ; FILRAM ( INT start address,
  60+ 58D4              ;		   INT count,
  61+ 58D4              ;		   BYTE value )
  62+ 58D4              ; will put ram in page 0 also, page 1 is already there
  63+ 58D4              FILRAM:
  64+ 58D4              	; opening (
  65+ 58D4 CD BD 65     	CALL CHKCHAR
  66+ 58D7 28           	DB '('
  67+ 58D8              	; get start address
  68+ 58D8 DD 21 2F 54  	LD IX, FRMQNT
  69+ 58DC CD 59 01     	CALL CALBAS
  70+ 58DF D5           	PUSH DE
  71+ 58E0              	; comma
  72+ 58E0 CD BD 65     	CALL CHKCHAR
  73+ 58E3 2C           	DB ','
  74+ 58E4              	; get count
  75+ 58E4 DD 21 2F 54  	LD IX, FRMQNT
  76+ 58E8 CD 59 01     	CALL CALBAS
  77+ 58EB D5           	PUSH DE
  78+ 58EC              	; comma
  79+ 58EC CD BD 65     	CALL CHKCHAR
  80+ 58EF 2C           	DB ','
  81+ 58F0              	; get value
  82+ 58F0 DD 21 1C 52  	LD IX, GETBYT
  83+ 58F4 CD 59 01     	CALL CALBAS
  84+ 58F7 F5           	PUSH AF
  85+ 58F8              	; ending )
  86+ 58F8 CD BD 65     	CALL CHKCHAR
  87+ 58FB 29           	DB ')'
  88+ 58FC
  89+ 58FC              	; save position
  90+ 58FC E5           	PUSH HL
  91+ 58FD DD E1        	POP IX
  92+ 58FF
  93+ 58FF D1           	POP DE ; actually AF
  94+ 5900 C1           	POP BC ; count
  95+ 5901 E1           	POP HL ; start address
  96+ 5902 78           	LD A, B
  97+ 5903 B7           	OR A
  98+ 5904 20 0A        	JR NZ, .L1 ; >=256 bytes to fill
  99+ 5906 B1           	OR C
 100+ 5907 28 1A        	JR Z, .EXIT ; 0 bytes to fill, skip
 101+ 5909 79           	LD A, C
 102+ 590A 3D           	DEC A
 103+ 590B 20 03        	JR NZ, .L1 ; ; >1 byte to fill
 104+ 590D              	; one byte to fill
 105+ 590D 72           	LD (HL), D
 106+ 590E 18 13        	JR .EXIT
 107+ 5910              .L1:
 108+ 5910 D9           	EXX
 109+ 5911              	; enable page 0
 110+ 5911 F3           	DI
 111+ 5912 FD 21 19 59  	LD IY, .RET
 112+ 5916 C3 6F 65     	JP ENABLE_PAGE0
 113+ 5919              .RET:
 114+ 5919 FB           	EI
 115+ 591A D9           	EXX
 116+ 591B CD 27 59     	CALL .FILLVALUE
 117+ 591E D1               POP DE
 118+ 591F C1               POP BC
 119+ 5920 CD E6 64         CALL RESTORE_PAGE_INFO
 120+ 5923              .EXIT:
 121+ 5923 DD E5        	PUSH IX
 122+ 5925 E1           	POP HL
 123+ 5926 C9           	RET
 124+ 5927
 125+ 5927              .FILLVALUE:
 126+ 5927 72               LD (HL), D
 127+ 5928 54               LD D, H
 128+ 5929 5D               LD E, L
 129+ 592A 13               INC DE
 130+ 592B 0B               DEC BC
 131+ 592C ED B0            LDIR
 132+ 592E C9               RET
 133+ 592F              ; *******************************************************************************************************
 134+ 592F
# file closed: asm\MEMORY.asm
 128  592F               ENDIF
 129  592F
 130  592F               IF (SOUND_CMDS == 1)
 131  592F               INCLUDE "SOUND.asm"
# file opened: asm\SOUND.asm
   1+ 592F              MUSIC_INIT_STATUS:
   2+ 592F 00            DB 0
   3+ 5930              SFX_INIT_STATUS:
   4+ 5930 00            DB 0
   5+ 5931              SOUND_ENABLED:
   6+ 5931 00            DB 0
   7+ 5932
   8+ 5932              ; *******************************************************************************************************
   9+ 5932              ; function to handle CALL SNDPLYINIT basic extension
  10+ 5932              ; initializes sound player
  11+ 5932              ; _SNDPLYINIT ( INT music_offset,
  12+ 5932              ;				INT sfx_offset, can be -1 if no SFX
  13+ 5932              ; will put ram in page 0 also, page 1 is already there
  14+ 5932              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
  15+ 5932              SNDPLYINIT:
  16+ 5932              	; opening (
  17+ 5932 CD BD 65     	CALL CHKCHAR
  18+ 5935 28           	DB '('
  19+ 5936              	; get music address
  20+ 5936 DD 21 2F 54  	LD IX, FRMQNT
  21+ 593A CD 59 01     	CALL CALBAS
  22+ 593D D5           	PUSH DE
  23+ 593E              	; comma
  24+ 593E CD BD 65     	CALL CHKCHAR
  25+ 5941 2C           	DB ','
  26+ 5942              	; get sfx address
  27+ 5942 DD 21 2F 54  	LD IX, FRMQNT
  28+ 5946 CD 59 01     	CALL CALBAS
  29+ 5949 D5           	PUSH DE
  30+ 594A              	; ending )
  31+ 594A CD BD 65     	CALL CHKCHAR
  32+ 594D 29           	DB ')'
  33+ 594E
  34+ 594E                  ; save position in BASIC text
  35+ 594E 44           	LD B, H
  36+ 594F 4D           	LD C, L
  37+ 5950
  38+ 5950              	; pop LDIR parameters and store away for later
  39+ 5950 D1           	POP DE ; sfx address
  40+ 5951 E1           	POP HL ; music address
  41+ 5952 C5           	PUSH BC ; basic text location
  42+ 5953 D9           	EXX
  43+ 5954 FD 21 5B 59  	LD IY, .RET
  44+ 5958 C3 6F 65     	JP ENABLE_PAGE0
  45+ 595B              .RET:
  46+ 595B D9           	EXX
  47+ 595C
  48+ 595C D5           	PUSH DE
  49+ 595D AF           	XOR A
  50+ 595E              	; HL = music location
  51+ 595E CD 62 41     	CALL PLY_AKG_INIT
  52+ 5961 3E 01        	LD A, 1
  53+ 5963 32 2F 59     	LD (MUSIC_INIT_STATUS), A
  54+ 5966
  55+ 5966 E1           	POP HL ; SFX
  56+ 5967              	; check if SFX address -1
  57+ 5967 23           	INC HL
  58+ 5968 7D           	LD A, L
  59+ 5969 B4           	OR H
  60+ 596A 28 09        	JR Z,.L1
  61+ 596C 2B           	DEC HL
  62+ 596D CD 1D 40     	CALL PLY_AKG_INITSOUNDEFFECTS
  63+ 5970 3E 01        	LD A, 1
  64+ 5972 32 30 59     	LD (SFX_INIT_STATUS), A
  65+ 5975              .L1:
  66+ 5975 D1               POP DE
  67+ 5976 C1               POP BC
  68+ 5977 CD E6 64         CALL RESTORE_PAGE_INFO
  69+ 597A
  70+ 597A E1           	POP HL
  71+ 597B C9           	RET
  72+ 597C              ; *******************************************************************************************************
  73+ 597C
  74+ 597C              ; *******************************************************************************************************
  75+ 597C              ; function to handle CALL SNDPLYON basic extension
  76+ 597C              ; enables sound player
  77+ 597C              ; _SNDPLYON
  78+ 597C              ; sets SOUND_ENABLED variable to 1 if init call was done
  79+ 597C              ; if not throws out of data error
  80+ 597C              SNDPLYON:
  81+ 597C 3A 2F 59     	LD A, (MUSIC_INIT_STATUS)
  82+ 597F B7           	OR A
  83+ 5980 20 05        	JR NZ, .L1
  84+ 5982              	; player not initialized, throw error
  85+ 5982 1E 04        	LD E, 04 ; Out of DATA
  86+ 5984 C3 E3 65     	JP THROW_ERROR
  87+ 5987              .L1:
  88+ 5987 32 31 59     	LD (SOUND_ENABLED), A
  89+ 598A              	; disable key click
  90+ 598A AF           	XOR A
  91+ 598B 32 DB F3     	LD (CLIKSW), A
  92+ 598E C9           	RET
  93+ 598F              ; *******************************************************************************************************
  94+ 598F
  95+ 598F              ; *******************************************************************************************************
  96+ 598F              ; function to handle CALL SNDPLYOFF basic extension
  97+ 598F              ; disables sound player
  98+ 598F              ; _SNDPLYOFF
  99+ 598F              ; sets SOUND_ENABLED variable to 0
 100+ 598F              ; calls AKG to stop music and SFX on all channels if initialized
 101+ 598F              SNDPLYOFF:
 102+ 598F 3A 31 59     	LD A, (SOUND_ENABLED)
 103+ 5992 B7           	OR A
 104+ 5993 C8           	RET Z ; already stopped
 105+ 5994 AF           	XOR A
 106+ 5995 32 31 59     	LD (SOUND_ENABLED), A
 107+ 5998 E5           	PUSH HL
 108+ 5999 CD 21 42     	CALL PLY_AKG_STOP
 109+ 599C 3A 30 59     	LD A, (SFX_INIT_STATUS)
 110+ 599F B7           	OR A
 111+ 59A0 28 0E        	JR Z, .EXIT ; SFX not in use
 112+ 59A2 AF           	XOR A
 113+ 59A3 CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
 114+ 59A6 3E 01        	LD A, 1
 115+ 59A8 CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
 116+ 59AB 3E 02        	LD A, 2
 117+ 59AD CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
 118+ 59B0              .EXIT:
 119+ 59B0 E1           	POP HL
 120+ 59B1 C9           	RET
 121+ 59B2              ; *******************************************************************************************************
 122+ 59B2
 123+ 59B2              ; *******************************************************************************************************
 124+ 59B2              ; function to handle CALL SNDSFX basic extension
 125+ 59B2              ; plays a sound effect
 126+ 59B2              ; _SNDSFX ( BYTE sfx_number, >0
 127+ 59B2              ;			BYTE channel, = 0,1 or 2
 128+ 59B2              ;			BYTE inverted_volume = 0-16, 0 being full volume
 129+ 59B2              ; will put ram in page 0 also, page 1 is already there
 130+ 59B2              ; if sound off throws illegal function call
 131+ 59B2              ; if sfx not initialized, throws out of data
 132+ 59B2              SNDSFX:
 133+ 59B2              	; opening (
 134+ 59B2 CD BD 65     	CALL CHKCHAR
 135+ 59B5 28           	DB '('
 136+ 59B6              	; get sfx_number
 137+ 59B6 DD 21 1C 52  	LD IX, GETBYT
 138+ 59BA CD 59 01     	CALL CALBAS
 139+ 59BD D5           	PUSH DE
 140+ 59BE              	; comma
 141+ 59BE CD BD 65     	CALL CHKCHAR
 142+ 59C1 2C           	DB ','
 143+ 59C2              	; get sfx address
 144+ 59C2 DD 21 1C 52  	LD IX, GETBYT
 145+ 59C6 CD 59 01     	CALL CALBAS
 146+ 59C9 D5           	PUSH DE
 147+ 59CA              	; comma
 148+ 59CA CD BD 65     	CALL CHKCHAR
 149+ 59CD 2C           	DB ','
 150+ 59CE              	; get inverted volume
 151+ 59CE DD 21 1C 52  	LD IX, GETBYT
 152+ 59D2 CD 59 01     	CALL CALBAS
 153+ 59D5 D5           	PUSH DE
 154+ 59D6              	; ending )
 155+ 59D6 CD BD 65     	CALL CHKCHAR
 156+ 59D9 29           	DB ')'
 157+ 59DA
 158+ 59DA 3A 31 59     	LD A, (SOUND_ENABLED)
 159+ 59DD B7           	OR A
 160+ 59DE 20 05        	JR NZ, .L1
 161+ 59E0              	; sound disabled, throw illegal function call
 162+ 59E0 1E 05        	LD E, 5
 163+ 59E2 C3 E3 65     	JP THROW_ERROR
 164+ 59E5              .L1:
 165+ 59E5 3A 30 59     	LD A, (SFX_INIT_STATUS)
 166+ 59E8 B7           	OR A
 167+ 59E9 20 05        	JR NZ, .L2
 168+ 59EB              	; sfx data not initialized, throw out of data
 169+ 59EB 1E 04        	LD E, 4
 170+ 59ED C3 E3 65     	JP THROW_ERROR
 171+ 59F0              .L2:
 172+ 59F0              	; pop  parameters and store away for later
 173+ 59F0 D1           	POP DE ; inverted volume
 174+ 59F1 43           	LD B, E
 175+ 59F2 D1           	POP DE ; channel
 176+ 59F3 4B           	LD C, E
 177+ 59F4 D1           	POP DE
 178+ 59F5 7B           	LD A, E
 179+ 59F6 08           	EX AF, AF'
 180+ 59F7 E5           	PUSH HL ; basic text location
 181+ 59F8 D9           	EXX
 182+ 59F9 FD 21 00 5A  	LD IY, .RET
 183+ 59FD C3 6F 65     	JP ENABLE_PAGE0
 184+ 5A00              .RET:
 185+ 5A00 D9           	EXX
 186+ 5A01 08           	EX AF, AF'
 187+ 5A02 CD 21 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
 188+ 5A05
 189+ 5A05 D1               POP DE
 190+ 5A06 C1               POP BC
 191+ 5A07 CD E6 64         CALL RESTORE_PAGE_INFO
 192+ 5A0A
 193+ 5A0A E1           	POP HL
 194+ 5A0B C9           	RET
 195+ 5A0C              ; *******************************************************************************************************
# file closed: asm\SOUND.asm
 132  5A0C               ENDIF
 133  5A0C
 134  5A0C               IF (VRAM_CMDS == 1)
 135  5A0C               INCLUDE "VRAM.asm"
# file opened: asm\VRAM.asm
   1+ 5A0C              ; *******************************************************************************************************
   2+ 5A0C              ; function to handle CALL FILVRM basic extension
   3+ 5A0C              ; FILVRM ( INT offset,
   4+ 5A0C              ;		   INT count,
   5+ 5A0C              ;		   BYTE value,
   6+ 5A0C              ;		   BYTE wait_vsync) >0 = true
   7+ 5A0C              ; wait_vsync will issue HALT before copying
   8+ 5A0C              FILVRM:
   9+ 5A0C              	; opening (
  10+ 5A0C CD BD 65     	CALL CHKCHAR
  11+ 5A0F 28           	DB '('
  12+ 5A10              	; get offset address
  13+ 5A10 DD 21 2F 54  	LD IX, FRMQNT
  14+ 5A14 CD 59 01     	CALL CALBAS
  15+ 5A17 D5           	PUSH DE
  16+ 5A18              	; comma
  17+ 5A18 CD BD 65     	CALL CHKCHAR
  18+ 5A1B 2C           	DB ','
  19+ 5A1C              	; get count
  20+ 5A1C DD 21 2F 54  	LD IX, FRMQNT
  21+ 5A20 CD 59 01     	CALL CALBAS
  22+ 5A23 D5           	PUSH DE
  23+ 5A24              	; comma
  24+ 5A24 CD BD 65     	CALL CHKCHAR
  25+ 5A27 2C           	DB ','
  26+ 5A28              	; get value
  27+ 5A28 DD 21 1C 52  	LD IX, GETBYT
  28+ 5A2C CD 59 01     	CALL CALBAS
  29+ 5A2F F5           	PUSH AF
  30+ 5A30              	; comma
  31+ 5A30 CD BD 65     	CALL CHKCHAR
  32+ 5A33 2C           	DB ','
  33+ 5A34              	; get vsync wait
  34+ 5A34 DD 21 1C 52  	LD IX, GETBYT
  35+ 5A38 CD 59 01     	CALL CALBAS
  36+ 5A3B F5           	PUSH AF
  37+ 5A3C              	; ending )
  38+ 5A3C CD BD 65     	CALL CHKCHAR
  39+ 5A3F 29           	DB ')'
  40+ 5A40
  41+ 5A40              	; save position
  42+ 5A40 E5           	PUSH HL
  43+ 5A41 DD E1        	POP IX
  44+ 5A43
  45+ 5A43              	; syntax ok
  46+ 5A43              	; wait for vsync if needed
  47+ 5A43 F1           	POP AF
  48+ 5A44 B7           	OR A
  49+ 5A45 28 01        	JR Z, .L1
  50+ 5A47 76           	HALT
  51+ 5A48
  52+ 5A48              .L1:
  53+ 5A48 3E 01        	LD A,1
  54+ 5A4A 32 C0 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
  55+ 5A4D F1               POP AF ; value
  56+ 5A4E C1               POP BC ; count
  57+ 5A4F E1               POP HL ; offset
  58+ 5A50 CD 56 00         CALL BIOS_FILVRM
  59+ 5A53 AF           	XOR A
  60+ 5A54 32 C0 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
  61+ 5A57
  62+ 5A57              .L3:
  63+ 5A57 DD E5        	PUSH IX
  64+ 5A59 E1           	POP HL
  65+ 5A5A C9           	RET
  66+ 5A5B              ; *******************************************************************************************************
  67+ 5A5B
  68+ 5A5B              ; *******************************************************************************************************
  69+ 5A5B              ; function to handle CALL MEMVRM basic extension
  70+ 5A5B              ; copies from RAM to VRAM
  71+ 5A5B              ; _MEMVRM ( INT source,
  72+ 5A5B              ;			INT destination,
  73+ 5A5B              ;			INT count,
  74+ 5A5B              ;			BYTE wait_vsync) >0 = true
  75+ 5A5B              ; will put ram in page 0 also, page 1 is already there
  76+ 5A5B              ; wait_vsync will issue HALT before copying
  77+ 5A5B              MEMVRM:
  78+ 5A5B              	; opening (
  79+ 5A5B CD BD 65     	CALL CHKCHAR
  80+ 5A5E 28           	DB '('
  81+ 5A5F              	; get source address
  82+ 5A5F DD 21 2F 54  	LD IX, FRMQNT
  83+ 5A63 CD 59 01     	CALL CALBAS
  84+ 5A66 D5           	PUSH DE
  85+ 5A67              	; comma
  86+ 5A67 CD BD 65     	CALL CHKCHAR
  87+ 5A6A 2C           	DB ','
  88+ 5A6B              	; get destination address
  89+ 5A6B DD 21 2F 54  	LD IX, FRMQNT
  90+ 5A6F CD 59 01     	CALL CALBAS
  91+ 5A72 D5           	PUSH DE
  92+ 5A73              	; comma
  93+ 5A73 CD BD 65     	CALL CHKCHAR
  94+ 5A76 2C           	DB ','
  95+ 5A77              	; get length
  96+ 5A77 DD 21 2F 54  	LD IX, FRMQNT
  97+ 5A7B CD 59 01     	CALL CALBAS
  98+ 5A7E D5           	PUSH DE
  99+ 5A7F              	; comma
 100+ 5A7F CD BD 65     	CALL CHKCHAR
 101+ 5A82 2C           	DB ','
 102+ 5A83              	; get vsync wait
 103+ 5A83 DD 21 1C 52  	LD IX, GETBYT
 104+ 5A87 CD 59 01     	CALL CALBAS
 105+ 5A8A F5           	PUSH AF
 106+ 5A8B              	; ending )
 107+ 5A8B CD BD 65     	CALL CHKCHAR
 108+ 5A8E 29           	DB ')'
 109+ 5A8F
 110+ 5A8F                  ; save position in BASIC text
 111+ 5A8F E5           	PUSH HL
 112+ 5A90 DD E1        	POP IX
 113+ 5A92
 114+ 5A92 F1           	POP AF ; wait vsync
 115+ 5A93 B7           	OR A
 116+ 5A94 28 02        	JR Z, .L1
 117+ 5A96 76           	HALT
 118+ 5A97 F3           	DI
 119+ 5A98              .L1:
 120+ 5A98              	; pop LDIR parameters and store away for later
 121+ 5A98 C1           	POP BC ; count
 122+ 5A99 D1           	POP DE ; vram destination
 123+ 5A9A E1           	POP HL ; ram source
 124+ 5A9B D9           	EXX
 125+ 5A9C FD 21 A3 5A   	LD IY, .RET
 126+ 5AA0 C3 6F 65     	JP ENABLE_PAGE0
 127+ 5AA3              .RET:
 128+ 5AA3 FB           	EI
 129+ 5AA4 D9           	EXX
 130+ 5AA5 3E 01        	LD A,1
 131+ 5AA7 32 C0 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 132+ 5AAA CD BA 5A     	CALL .LDIRVM
 133+ 5AAD AF           	XOR A
 134+ 5AAE 32 C0 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 135+ 5AB1 D1               POP DE
 136+ 5AB2 C1               POP BC
 137+ 5AB3 CD E6 64         CALL RESTORE_PAGE_INFO
 138+ 5AB6 DD E5        	PUSH IX
 139+ 5AB8 E1           	POP HL
 140+ 5AB9 C9           	RET
 141+ 5ABA
 142+ 5ABA              .LDIRVM:
 143+ 5ABA EB           	EX DE, HL
 144+ 5ABB F3           	DI
 145+ 5ABC CD 96 64     	CALL SETWRT_LOCAL
 146+ 5ABF FB           	EI
 147+ 5AC0 EB           	EX DE, HL
 148+ 5AC1 78           	LD A, B
 149+ 5AC2 B7           	OR A
 150+ 5AC3 28 0D        	JR Z, .L3
 151+ 5AC5 C5           	PUSH BC
 152+ 5AC6 0E 98        	LD C, #98
 153+ 5AC8              .L2:
 154+ 5AC8 50           	LD D, B
 155+ 5AC9 06 00        	LD B, 0
 156+ 5ACB CD A3 64     	CALL BBYTECOPY_NO_C
 157+ 5ACE 42           	LD B, D
 158+ 5ACF 10 F7        	DJNZ .L2
 159+ 5AD1 C1           	POP BC
 160+ 5AD2              .L3:
 161+ 5AD2 79           	LD A, C
 162+ 5AD3 B7           	OR A
 163+ 5AD4 C8           	RET Z
 164+ 5AD5 41           	LD B, C
 165+ 5AD6 C3 A1 64     	JP BBYTECOPY
 166+ 5AD9              ; *******************************************************************************************************
 167+ 5AD9
 168+ 5AD9              ; *******************************************************************************************************
 169+ 5AD9              ; function to handle CALL VRMMEM basic extension
 170+ 5AD9              ; copies from RAM to VRAM
 171+ 5AD9              ; _VRMMEM ( INT source,
 172+ 5AD9              ;			INT destination,
 173+ 5AD9              ;			INT count
 174+ 5AD9              ; will put ram in page 0 also, page 1 is already there
 175+ 5AD9              VRMMEM:
 176+ 5AD9              	; opening (
 177+ 5AD9 CD BD 65     	CALL CHKCHAR
 178+ 5ADC 28           	DB '('
 179+ 5ADD              	; get source address
 180+ 5ADD DD 21 2F 54  	LD IX, FRMQNT
 181+ 5AE1 CD 59 01     	CALL CALBAS
 182+ 5AE4 D5           	PUSH DE
 183+ 5AE5              	; comma
 184+ 5AE5 CD BD 65     	CALL CHKCHAR
 185+ 5AE8 2C           	DB ','
 186+ 5AE9              	; get destination address
 187+ 5AE9 DD 21 2F 54  	LD IX, FRMQNT
 188+ 5AED CD 59 01     	CALL CALBAS
 189+ 5AF0 D5           	PUSH DE
 190+ 5AF1              	; comma
 191+ 5AF1 CD BD 65     	CALL CHKCHAR
 192+ 5AF4 2C           	DB ','
 193+ 5AF5              	; get length
 194+ 5AF5 DD 21 2F 54  	LD IX, FRMQNT
 195+ 5AF9 CD 59 01     	CALL CALBAS
 196+ 5AFC D5           	PUSH DE
 197+ 5AFD              	; ending )
 198+ 5AFD CD BD 65     	CALL CHKCHAR
 199+ 5B00 29           	DB ')'
 200+ 5B01
 201+ 5B01                  ; save position in BASIC text
 202+ 5B01 E5           	PUSH HL
 203+ 5B02 DD E1        	POP IX
 204+ 5B04
 205+ 5B04 C1           	POP BC ; count
 206+ 5B05 D1           	POP DE ; destination
 207+ 5B06 E1           	POP HL ; source
 208+ 5B07 D9           	EXX
 209+ 5B08 FD 21 10 5B  	LD IY, .RET
 210+ 5B0C F3           	DI
 211+ 5B0D C3 6F 65     	JP ENABLE_PAGE0
 212+ 5B10              .RET:
 213+ 5B10 FB           	EI
 214+ 5B11 D9           	EXX
 215+ 5B12 3E 01        	LD A,1
 216+ 5B14 32 C0 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 217+ 5B17 CD 27 5B     	CALL .LDIRMV
 218+ 5B1A AF           	XOR A
 219+ 5B1B 32 C0 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 220+ 5B1E D1               POP DE
 221+ 5B1F C1               POP BC
 222+ 5B20 CD E6 64         CALL RESTORE_PAGE_INFO
 223+ 5B23 DD E5        	PUSH IX
 224+ 5B25 E1           	POP HL
 225+ 5B26 C9           	RET
 226+ 5B27
 227+ 5B27              .LDIRMV:
 228+ 5B27              	; set VRAM address *exactly* as in ROM, otherwise corruption
 229+ 5B27 7D           	LD	A, L
 230+ 5B28 F3           	DI
 231+ 5B29 D3 99        	OUT	(099H), A
 232+ 5B2B 7C           	LD	A, H
 233+ 5B2C E6 3F        	AND	03FH
 234+ 5B2E D3 99        	OUT	(099H), A
 235+ 5B30 FB           	EI
 236+ 5B31              	;EX (SP), HL
 237+ 5B31              	;EX (SP), HL
 238+ 5B31              	;NOP
 239+ 5B31              	;NOP
 240+ 5B31              .L4:
 241+ 5B31 DB 98            IN A, (#98)
 242+ 5B33 12           	LD (DE), A
 243+ 5B34 13               INC DE
 244+ 5B35 0B               DEC BC
 245+ 5B36 79               LD A, C
 246+ 5B37 B0               OR B
 247+ 5B38 20 F7            JR NZ, .L4
 248+ 5B3A C9               RET
 249+ 5B3B              ; *******************************************************************************************************
# file closed: asm\VRAM.asm
 136  5B3B               ENDIF
 137  5B3B
 138  5B3B               IF (GENCAL_CMD == 1)
 139  5B3B               INCLUDE "GENCAL.asm"
# file opened: asm\GENCAL.asm
   1+ 5B3B              ; *******************************************************************************************************
   2+ 5B3B              ; function to handle CALL GENCAL basic extension
   3+ 5B3B              ; GENCAL ( INT fn_addr, = address of the function to call
   4+ 5B3B              ;		   INT[] reg_list_ptr, = array holding register values (AF,BC,DE,HL,IX,IY)
   5+ 5B3B              ; output values of registers will also be stored at reg_list_ptr
   6+ 5B3B              GENCAL:
   7+ 5B3B              	; opening (
   8+ 5B3B CD BD 65     	CALL CHKCHAR
   9+ 5B3E 28           	DB '('
  10+ 5B3F              	; get function address
  11+ 5B3F DD 21 2F 54  	LD IX, FRMQNT
  12+ 5B43 CD 59 01     	CALL CALBAS
  13+ 5B46 D5           	PUSH DE
  14+ 5B47              	; comma
  15+ 5B47 CD BD 65     	CALL CHKCHAR
  16+ 5B4A 2C           	DB ','
  17+ 5B4B              	; get pointer to register list
  18+ 5B4B 3E 02            LD A,2
  19+ 5B4D 06 01            LD B,1
  20+ 5B4F 11 00 05         LD DE,#0500
  21+ 5B52 CD EA 65         CALL GET_BASIC_ARRAY_DATA_POINTER
  22+ 5B55 C5           	PUSH BC
  23+ 5B56              	; ending )
  24+ 5B56 CD BD 65     	CALL CHKCHAR
  25+ 5B59 29           	DB ')'
  26+ 5B5A
  27+ 5B5A              	; save BASIC token position
  28+ 5B5A E5           	PUSH HL
  29+ 5B5B D9               EXX
  30+ 5B5C E1           	POP HL ; HL'=next basic token
  31+ 5B5D D9               EXX
  32+ 5B5E
  33+ 5B5E E1               POP HL ; get pointer to register values
  34+ 5B5F F3           	DI
  35+ 5B60 ED 73 AF 62      LD (BLIT_STRUCT), SP
  36+ 5B64 F9               LD SP, HL
  37+ 5B65 F1               POP AF
  38+ 5B66 C1               POP BC
  39+ 5B67 D1               POP DE
  40+ 5B68 E1               POP HL
  41+ 5B69 DD E1            POP IX
  42+ 5B6B FD E1            POP IY
  43+ 5B6D D9               EXX
  44+ 5B6E ED 73 B1 62      LD (BLIT_STRUCT+2), SP
  45+ 5B72 ED 7B AF 62      LD SP, (BLIT_STRUCT)
  46+ 5B76 FB               EI
  47+ 5B77 D1               POP DE ; get function to call
  48+ 5B78 E5               PUSH HL
  49+ 5B79 CD 94 5B         CALL .EXXDECALL
  50+ 5B7C F3               DI
  51+ 5B7D ED 73 AF 62      LD (BLIT_STRUCT), SP
  52+ 5B81 ED 7B B1 62      LD SP, (BLIT_STRUCT+2)
  53+ 5B85 FD E5            PUSH IY
  54+ 5B87 DD E5            PUSH IX
  55+ 5B89 E5               PUSH HL
  56+ 5B8A D5               PUSH DE
  57+ 5B8B C5               PUSH BC
  58+ 5B8C F5               PUSH AF
  59+ 5B8D ED 7B AF 62      LD SP, (BLIT_STRUCT)
  60+ 5B91 FB               EI
  61+ 5B92 E1               POP HL
  62+ 5B93 C9           	RET
  63+ 5B94
  64+ 5B94              .EXXDECALL:
  65+ 5B94 D5               PUSH DE
  66+ 5B95 D9               EXX
  67+ 5B96 C9               RET
  68+ 5B97              ; *******************************************************************************************************
# file closed: asm\GENCAL.asm
 140  5B97               ENDIF
 141  5B97
 142  5B97               IF (BOX_CMDS == 1)
 143  5B97               INCLUDE "BOX.asm"
# file opened: asm\BOX.asm
   1+ 5B97              ; *******************************************************************************************************
   2+ 5B97              ; generic function to implement rectangle data copy
   3+ 5B97              ; should be modified to call appropriate function for memory or vram
   4+ 5B97              ; input IX=pointer to following structure
   5+ 5B97              ; +00 source data pointer
   6+ 5B97              ; +02 num bytes in a row
   7+ 5B97              ; +04 number of rows
   8+ 5B97              ; +06 source add-to value till next row
   9+ 5B97              ; +08 destination address
  10+ 5B97              ; +10 destination add-to value till next row
  11+ 5B97              ; modifies AF, BC, DE, HL
  12+ 5B97              RECTANGLE_COPY:
  13+ 5B97 DD 6E 00     	LD L, (IX+0)
  14+ 5B9A DD 66 01     	LD H, (IX+1) ; source address
  15+ 5B9D DD 5E 08     	LD E, (IX+8)
  16+ 5BA0 DD 56 09     	LD D, (IX+9) ; destination
  17+ 5BA3 DD 46 04     	LD B, (IX+4) ; row number
  18+ 5BA6              .L1:
  19+ 5BA6 C5           	PUSH BC
  20+ 5BA7 E5           		PUSH HL
  21+ 5BA8 D5           			PUSH DE
  22+ 5BA9 DD 4E 02     				LD C, (IX+2)
  23+ 5BAC DD 46 03     				LD B, (IX+3) ; num bytes in a row
  24+ 5BAF              .CALL1:
  25+ 5BAF CD 00 00     				CALL 0 ; set destination address from DE
  26+ 5BB2              .CALL2:
  27+ 5BB2 CD 00 00     				CALL 0 ; copy data fn
  28+ 5BB5 E1           			POP HL
  29+ 5BB6 DD 4E 0A     			LD C, (IX+10)
  30+ 5BB9 DD 46 0B     			LD B, (IX+11) ; destination add-to
  31+ 5BBC 09           			ADD HL, BC
  32+ 5BBD EB           			EX DE, HL
  33+ 5BBE E1           		POP HL
  34+ 5BBF DD 4E 06     		LD C, (IX+6)
  35+ 5BC2 DD 46 07     		LD B, (IX+7) ; src add-to
  36+ 5BC5 09           		ADD HL, BC
  37+ 5BC6 C1           	POP BC
  38+ 5BC7 10 DD        	DJNZ .L1
  39+ 5BC9 C9           	RET
  40+ 5BCA              ; *******************************************************************************************************
  41+ 5BCA
  42+ 5BCA              ; *******************************************************************************************************
  43+ 5BCA              ; function to handle CALL BOXMEMCPY basic extension
  44+ 5BCA              ; copies data with window like boundaries within ram
  45+ 5BCA              ; BOXMEMCPY ( INT source data pointer,
  46+ 5BCA              ;			  INT source number of bytes in a row,
  47+ 5BCA              ;			  INT number of rows,
  48+ 5BCA              ;			  INT source add-to value till next row,
  49+ 5BCA              ; 			  INT destination pointer,
  50+ 5BCA              ;			  INT destination add-to value till next row )
  51+ 5BCA              ; request_data_ptr described in RECTANGLE_COPY
  52+ 5BCA              ; will put ram in page 0 also, page 1 is already there
  53+ 5BCA              BOXMEMCPY:
  54+ 5BCA 11 D4 5B     	LD DE,BOXMEMCPY.RET
  55+ 5BCD ED 53 49 5C  	LD (BOXCOMMON.ADDR+2), DE
  56+ 5BD1 C3 E7 5B     	JP BOXCOMMON
  57+ 5BD4              .RET:
  58+ 5BD4 FB           	EI
  59+ 5BD5              	; set RAM functions to call
  60+ 5BD5 21 00 00     	LD HL, 0
  61+ 5BD8 22 AF 5B     	LD (RECTANGLE_COPY.CALL1), HL ; NOP NOP
  62+ 5BDB 22 B1 5B     	LD (RECTANGLE_COPY.CALL1+2), HL ; NOP NOP
  63+ 5BDE 21 ED B0     	LD HL, #B0ED ; LDIR
  64+ 5BE1 22 B3 5B     	LD (RECTANGLE_COPY.CALL1+4), HL
  65+ 5BE4 C3 4E 5C     	JP BOXCOMMON.CALL
  66+ 5BE7              ; *******************************************************************************************************
  67+ 5BE7
  68+ 5BE7              ; *******************************************************************************************************
  69+ 5BE7              ; common parts of BOX commands
  70+ 5BE7              BOXCOMMON:
  71+ 5BE7              	; opening (
  72+ 5BE7 CD BD 65     	CALL CHKCHAR
  73+ 5BEA 28           	DB '('
  74+ 5BEB              	; get source data pointer
  75+ 5BEB DD 21 2F 54  	LD IX, FRMQNT
  76+ 5BEF CD 59 01     	CALL CALBAS
  77+ 5BF2 ED 53 AF 62  	LD (BLIT_STRUCT+0), DE
  78+ 5BF6              	; comma
  79+ 5BF6 CD BD 65     	CALL CHKCHAR
  80+ 5BF9 2C           	DB ','
  81+ 5BFA              	; source number of bytes in a row
  82+ 5BFA DD 21 2F 54  	LD IX, FRMQNT
  83+ 5BFE CD 59 01     	CALL CALBAS
  84+ 5C01 ED 53 B1 62  	LD (BLIT_STRUCT+2), DE
  85+ 5C05              	; comma
  86+ 5C05 CD BD 65     	CALL CHKCHAR
  87+ 5C08 2C           	DB ','
  88+ 5C09              	; number of rows
  89+ 5C09 DD 21 2F 54  	LD IX, FRMQNT
  90+ 5C0D CD 59 01     	CALL CALBAS
  91+ 5C10 ED 53 B3 62  	LD (BLIT_STRUCT+4), DE
  92+ 5C14              	; comma
  93+ 5C14 CD BD 65     	CALL CHKCHAR
  94+ 5C17 2C           	DB ','
  95+ 5C18              	; source add-to value till next row
  96+ 5C18 DD 21 2F 54  	LD IX, FRMQNT
  97+ 5C1C CD 59 01     	CALL CALBAS
  98+ 5C1F ED 53 B5 62  	LD (BLIT_STRUCT+6), DE
  99+ 5C23              	; comma
 100+ 5C23 CD BD 65     	CALL CHKCHAR
 101+ 5C26 2C           	DB ','
 102+ 5C27              	; destination pointer
 103+ 5C27 DD 21 2F 54  	LD IX, FRMQNT
 104+ 5C2B CD 59 01     	CALL CALBAS
 105+ 5C2E ED 53 B7 62  	LD (BLIT_STRUCT+8), DE
 106+ 5C32              	; comma
 107+ 5C32 CD BD 65     	CALL CHKCHAR
 108+ 5C35 2C           	DB ','
 109+ 5C36              	; destination add-to value till next row
 110+ 5C36 DD 21 2F 54  	LD IX, FRMQNT
 111+ 5C3A CD 59 01     	CALL CALBAS
 112+ 5C3D ED 53 B9 62  	LD (BLIT_STRUCT+10), DE
 113+ 5C41              	; ending )
 114+ 5C41 CD BD 65     	CALL CHKCHAR
 115+ 5C44 29           	DB ')'
 116+ 5C45
 117+ 5C45 E5           	PUSH HL ; save position in BASIC buffer
 118+ 5C46 F3           	DI
 119+ 5C47              .ADDR:
 120+ 5C47 FD 21 00 00  	LD IY, 0
 121+ 5C4B C3 6F 65     	JP ENABLE_PAGE0
 122+ 5C4E              .CALL:
 123+ 5C4E DD 21 AF 62  	LD IX,BLIT_STRUCT
 124+ 5C52 CD 97 5B     	CALL RECTANGLE_COPY
 125+ 5C55 AF           	XOR A
 126+ 5C56 32 C0 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 127+ 5C59
 128+ 5C59 D1               POP DE
 129+ 5C5A C1               POP BC
 130+ 5C5B CD E6 64         CALL RESTORE_PAGE_INFO
 131+ 5C5E
 132+ 5C5E E1           	POP HL
 133+ 5C5F C9           	RET
 134+ 5C60              ; *******************************************************************************************************
 135+ 5C60
 136+ 5C60              ; *******************************************************************************************************
 137+ 5C60              ; function to handle CALL BOXMEMVRM basic extension
 138+ 5C60              ; copies data with window like boundaries from ram to Vram
 139+ 5C60              ; BOXMEMVRM ( INT source data pointer,
 140+ 5C60              ;			  INT source number of bytes in a row,
 141+ 5C60              ;			  INT number of rows,
 142+ 5C60              ;			  INT source add-to value till next row,
 143+ 5C60              ; 			  INT destination pointer,
 144+ 5C60              ;			  INT destination add-to value till next row )
 145+ 5C60              ; request_data_ptr described in RECTANGLE_COPY
 146+ 5C60              ; will put ram in page 0 also, page 1 is already there
 147+ 5C60              BOXMEMVRM:
 148+ 5C60 11 6A 5C     	LD DE,BOXMEMVRM.RET
 149+ 5C63 ED 53 49 5C  	LD (BOXCOMMON.ADDR+2), DE
 150+ 5C67 C3 E7 5B     	JP BOXCOMMON
 151+ 5C6A              .RET:
 152+ 5C6A FB           	EI
 153+ 5C6B              	; set RAM functions to call
 154+ 5C6B 21 85 5C     	LD HL, .SETDEST
 155+ 5C6E 22 B0 5B     	LD (RECTANGLE_COPY.CALL1+1), HL
 156+ 5C71 21 8D 5C     	LD HL, .COPYDATA
 157+ 5C74 22 B3 5B     	LD (RECTANGLE_COPY.CALL2+1), HL
 158+ 5C77 3E CD        	LD A, #CD ; CALL
 159+ 5C79 32 AF 5B     	LD (RECTANGLE_COPY.CALL1), A
 160+ 5C7C 32 B2 5B     	LD (RECTANGLE_COPY.CALL2), A
 161+ 5C7F              	;LD A,1
 162+ 5C7F 32 C0 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 163+ 5C82 C3 4E 5C     	JP BOXCOMMON.CALL
 164+ 5C85              .SETDEST:
 165+ 5C85 EB           	EX DE, HL
 166+ 5C86 F3           	DI
 167+ 5C87 CD 96 64     	CALL SETWRT_LOCAL
 168+ 5C8A FB           	EI
 169+ 5C8B EB           	EX DE, HL
 170+ 5C8C C9           	RET
 171+ 5C8D              .COPYDATA:
 172+ 5C8D 41           	LD B, C
 173+ 5C8E C3 A1 64     	JP BBYTECOPY
 174+ 5C91              ; *******************************************************************************************************
# file closed: asm\BOX.asm
 144  5C91               ENDIF
 145  5C91
 146  5C91               IF (BLIT_CMDS == 1)
 147  5C91               INCLUDE "BLIT.asm"
# file opened: asm\BLIT.asm
   1+ 5C91              ; *******************************************************************************************************
   2+ 5C91              ; function rotates mask and data of several characters and applies to background data
   3+ 5C91              ; this handles x-shift from 0 to 4
   4+ 5C91              ; contains self-modifying code that is set-up from external function
   5+ 5C91              ; input HL=pointer to mask data
   6+ 5C91              ; input HL'=pointer to character data
   7+ 5C91              ; input DE=output buffer containing background data
   8+ 5C91              ; input BC=DE+8
   9+ 5C91              ; input A=number of characters to process
  10+ 5C91              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
  11+ 5C91              SHIFT04:
  12+ 5C91 08           	EX AF, AF'
  13+ 5C92 7E           	LD A, (HL) ; get mask
  14+ 5C93 D9           	EXX
  15+ 5C94 57           	LD D, A
  16+ 5C95 1E FF        	LD E, #FF
  17+ 5C97 37           	SCF
  18+ 5C98              .M1:
  19+ 5C98 18 FE        	JR .M1 ; this is self-modifying part
  20+ 5C9A CB 1A        	RR D
  21+ 5C9C CB 1B        	RR E
  22+ 5C9E CB 1A        	RR D
  23+ 5CA0 CB 1B        	RR E
  24+ 5CA2 CB 1A        	RR D
  25+ 5CA4 CB 1B        	RR E
  26+ 5CA6 CB 1A        	RR D
  27+ 5CA8 CB 1B        	RR E
  28+ 5CAA
  29+ 5CAA 46           	LD B, (HL) ; get data
  30+ 5CAB 0E 00        	LD C, 0
  31+ 5CAD              .M2:
  32+ 5CAD 18 FE        	JR .M2 ; also self-modifying part
  33+ 5CAF CB 38        	SRL B
  34+ 5CB1 CB 19        	RR C
  35+ 5CB3 CB 38        	SRL B
  36+ 5CB5 CB 19        	RR C
  37+ 5CB7 CB 38        	SRL B
  38+ 5CB9 CB 19        	RR C
  39+ 5CBB CB 38        	SRL B
  40+ 5CBD CB 19        	RR C
  41+ 5CBF
  42+ 5CBF D9           	EXX
  43+ 5CC0 1A           	LD A, (DE) ; background
  44+ 5CC1 D9           	EXX
  45+ 5CC2 A2           	AND D
  46+ 5CC3 B0           	OR B
  47+ 5CC4 D9           	EXX
  48+ 5CC5 12           	LD (DE), A
  49+ 5CC6
  50+ 5CC6 0A           	LD A, (BC)
  51+ 5CC7 D9           	EXX
  52+ 5CC8 A3           	AND E
  53+ 5CC9 B1           	OR C
  54+ 5CCA 23           	INC HL
  55+ 5CCB D9           	EXX
  56+ 5CCC 02           	LD (BC), A
  57+ 5CCD
  58+ 5CCD 23           	INC HL
  59+ 5CCE 13           	INC DE
  60+ 5CCF 03           	INC BC
  61+ 5CD0
  62+ 5CD0 08           	EX AF, AF'
  63+ 5CD1 3D           	DEC A
  64+ 5CD2 C2 91 5C     	JP NZ, SHIFT04
  65+ 5CD5 C9           	RET
  66+ 5CD6              ; *******************************************************************************************************
  67+ 5CD6
  68+ 5CD6              ; *******************************************************************************************************
  69+ 5CD6              ; function rotates mask and data of several characters and applies to background data
  70+ 5CD6              ; this handles x-shift from 5 to 8
  71+ 5CD6              ; contains self-modifying code that is set-up from external function
  72+ 5CD6              ; input HL=pointer to mask data
  73+ 5CD6              ; input HL'=pointer to character data
  74+ 5CD6              ; input DE=output buffer containing background data
  75+ 5CD6              ; input BC=DE+8
  76+ 5CD6              ; input A=number of characters to process
  77+ 5CD6              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
  78+ 5CD6              SHIFT58:
  79+ 5CD6 08           	EX AF, AF'
  80+ 5CD7 7E           	LD A, (HL) ; get mask
  81+ 5CD8 D9           	EXX
  82+ 5CD9 57           	LD D, A
  83+ 5CDA 1E FF        	LD E, #FF
  84+ 5CDC 37           	SCF
  85+ 5CDD              .M1:
  86+ 5CDD 18 FE        	JR .M1 ; this is self-modifying part
  87+ 5CDF CB 12        	RL D
  88+ 5CE1 CB 13        	RL E
  89+ 5CE3 CB 12        	RL D
  90+ 5CE5 CB 13        	RL E
  91+ 5CE7 CB 12        	RL D
  92+ 5CE9 CB 13        	RL E
  93+ 5CEB
  94+ 5CEB 46           	LD B, (HL)
  95+ 5CEC 0E 00        	LD C, 0
  96+ 5CEE              .M2:
  97+ 5CEE 18 FE        	JR .M2 ; also self-modifying part
  98+ 5CF0 CB 20        	SLA B
  99+ 5CF2 CB 11        	RL C
 100+ 5CF4 CB 20        	SLA B
 101+ 5CF6 CB 11        	RL C
 102+ 5CF8 CB 20        	SLA B
 103+ 5CFA CB 11        	RL C
 104+ 5CFC
 105+ 5CFC D9           	EXX
 106+ 5CFD 1A           	LD A, (DE) ; background
 107+ 5CFE D9           	EXX
 108+ 5CFF A3           	AND E
 109+ 5D00 B1           	OR C
 110+ 5D01 D9           	EXX
 111+ 5D02 12           	LD (DE), A
 112+ 5D03
 113+ 5D03 0A           	LD A, (BC)
 114+ 5D04 D9           	EXX
 115+ 5D05 A2           	AND D
 116+ 5D06 B0           	OR B
 117+ 5D07 23           	INC HL
 118+ 5D08 D9           	EXX
 119+ 5D09 02           	LD (BC), A
 120+ 5D0A
 121+ 5D0A 23           	INC HL
 122+ 5D0B 13           	INC DE
 123+ 5D0C 03           	INC BC
 124+ 5D0D
 125+ 5D0D 08           	EX AF, AF'
 126+ 5D0E 3D           	DEC A
 127+ 5D0F C2 D6 5C     	JP NZ, SHIFT58
 128+ 5D12 C9           	RET
 129+ 5D13              ; *******************************************************************************************************
 130+ 5D13
 131+ 5D13              ; *******************************************************************************************************
 132+ 5D13              ; routine that shifts one row of characters
 133+ 5D13              ; contains self-modifying code that is set-up from external function
 134+ 5D13              ; input HL=pointer to mask data
 135+ 5D13              ; input HL'=pointer to character data
 136+ 5D13              ; input DE=output buffer containing background data
 137+ 5D13              ; input A=number of characters to process
 138+ 5D13              ; input IX=pointer to structure describing input data
 139+ 5D13              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
 140+ 5D13              SHIFT_ROW:
 141+ 5D13 F5           	PUSH AF
 142+ 5D14 ED 53 AB 62  		LD (BLIT_TMP1), DE
 143+ 5D18 E5           		PUSH HL
 144+ 5D19 CD 5C 5D     			CALL .ADDYSHIFT
 145+ 5D1C E1           		POP HL
 146+ 5D1D ED 53 AD 62  		LD (BLIT_TMP2), DE ; DE+vertical shift
 147+ 5D21              .L1:
 148+ 5D21 3E 08        		LD A, 8
 149+ 5D23 DD 96 02     		SUB (IX+2) ; y shift
 150+ 5D26              .CALL1:
 151+ 5D26 CD 00 00     		CALL 0
 152+ 5D29 DD 7E 02     		LD A, (IX+2); y shift
 153+ 5D2C B7           		OR A
 154+ 5D2D 28 26        		JR Z, .DONE
 155+ 5D2F ED 5B AB 62  		LD DE, (BLIT_TMP1)
 156+ 5D33 E5           		PUSH HL
 157+ 5D34 CD 6A 5D     			CALL .DETONEXTROW
 158+ 5D37 E1           		POP HL
 159+ 5D38              .CALL2:
 160+ 5D38 CD 00 00     		CALL 0
 161+ 5D3B ED 5B AB 62  		LD DE, (BLIT_TMP1)
 162+ 5D3F E5           		PUSH HL
 163+ 5D40 CD 64 5D     			CALL .ADD8
 164+ 5D43 E1           		POP HL
 165+ 5D44 ED 53 AB 62  		LD (BLIT_TMP1), DE
 166+ 5D48 ED 5B AD 62  		LD DE, (BLIT_TMP2)
 167+ 5D4C E5           		PUSH HL
 168+ 5D4D CD 64 5D     			CALL .ADD8
 169+ 5D50 E1           		POP HL
 170+ 5D51 ED 53 AD 62  		LD (BLIT_TMP2), DE ; DE+vertical shift
 171+ 5D55              .DONE:
 172+ 5D55 F1           	POP AF
 173+ 5D56 3D           	DEC A
 174+ 5D57 C8           	RET Z
 175+ 5D58 F5           	PUSH AF
 176+ 5D59 C3 21 5D     	JP .L1
 177+ 5D5C              .ADDYSHIFT:
 178+ 5D5C EB           	EX DE, HL
 179+ 5D5D 16 00        	LD D, 0
 180+ 5D5F DD 5E 02     	LD E, (IX+2); y shift
 181+ 5D62 18 0C        	JR .MOVDEBC
 182+ 5D64              .ADD8:
 183+ 5D64 21 08 00     	LD HL, 8
 184+ 5D67 C3 70 5D     	JP .MOVDEBC
 185+ 5D6A              .DETONEXTROW:
 186+ 5D6A DD 6E 06     	LD L, (IX+6)
 187+ 5D6D DD 66 07     	LD H, (IX+7) ; bkg add to value
 188+ 5D70              .MOVDEBC:
 189+ 5D70 19           	ADD HL, DE
 190+ 5D71 54           	LD D, H
 191+ 5D72 5D           	LD E, L
 192+ 5D73 01 08 00     	LD BC, 8
 193+ 5D76 09           	ADD HL, BC
 194+ 5D77 44           	LD B, H
 195+ 5D78 4D           	LD C, L
 196+ 5D79 C9           	RET
 197+ 5D7A              ; *******************************************************************************************************
 198+ 5D7A
 199+ 5D7A              ; *******************************************************************************************************
 200+ 5D7A              ; function rotates mask and character data and applies it to background
 201+ 5D7A              ; input IX=pointer to structure describing input data
 202+ 5D7A              ; +0  DW horizontal shift count 0-7 (low byte used)
 203+ 5D7A              ; +2  DW vertical shift count 0-7 (low byte used)
 204+ 5D7A              ; +4  DW background data start;
 205+ 5D7A              ; +6  DW background add to value to next row of background data
 206+ 5D7A              ; +8  DW mask data start;
 207+ 5D7A              ; +10  DW character data start;
 208+ 5D7A              ; +12 DW character&mask add to value to next row of data
 209+ 5D7A              ; +14 DW columns (low byte used)
 210+ 5D7A              ; +16 DW rows (low byte used)
 211+ 5D7A              SHIFT_MERGE_CHARACTER:
 212+ 5D7A DD 7E 00     	LD A, (IX) ; shift
 213+ 5D7D FE 05        	CP 5
 214+ 5D7F 38 25        	JR C, .RIGHT
 215+ 5D81              	; shifts 5-7, use rotate towards left 1-3
 216+ 5D81 21 D6 5C     	LD HL, SHIFT58
 217+ 5D84 22 27 5D     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
 218+ 5D87 22 39 5D     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
 219+ 5D8A D6 05        	SUB 5
 220+ 5D8C 28 0D        	JR Z, .L1
 221+ 5D8E 87           	ADD A, A
 222+ 5D8F 87           	ADD A, A
 223+ 5D90 67           	LD H, A
 224+ 5D91 2E 18        	LD L, #18 ; JR opcode
 225+ 5D93 22 DD 5C     	LD (SHIFT58.M1), HL
 226+ 5D96 22 EE 5C     	LD (SHIFT58.M2), HL
 227+ 5D99 18 32        	JR .DO
 228+ 5D9B              .L1:
 229+ 5D9B 21 00 00     	LD HL, 0 ; 2xNOP opcode
 230+ 5D9E 22 DD 5C     	LD (SHIFT58.M1), HL
 231+ 5DA1 22 EE 5C     	LD (SHIFT58.M2), HL
 232+ 5DA4 18 27        	JR .DO
 233+ 5DA6              .RIGHT:
 234+ 5DA6              	; shifts 0-4, rotate towards right
 235+ 5DA6 21 91 5C     	LD HL, SHIFT04
 236+ 5DA9 22 27 5D     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
 237+ 5DAC 22 39 5D     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
 238+ 5DAF FE 04        	CP 4
 239+ 5DB1 28 11        	JR Z, .R1
 240+ 5DB3 D6 04        	SUB 4
 241+ 5DB5 ED 44        	NEG
 242+ 5DB7 87           	ADD A, A
 243+ 5DB8 87           	ADD A, A
 244+ 5DB9 67           	LD H, A
 245+ 5DBA 2E 18        	LD L, #18 ; JR opcode
 246+ 5DBC 22 98 5C     	LD (SHIFT04.M1), HL
 247+ 5DBF 22 AD 5C     	LD (SHIFT04.M2), HL
 248+ 5DC2 18 09        	JR .DO
 249+ 5DC4              .R1:
 250+ 5DC4 21 00 00     	LD HL, 0 ; 2xNOP opcode
 251+ 5DC7 22 98 5C     	LD (SHIFT04.M1), HL
 252+ 5DCA 22 AD 5C     	LD (SHIFT04.M2), HL
 253+ 5DCD              .DO:
 254+ 5DCD DD 46 10     	LD B, (IX+16) ; rows
 255+ 5DD0 DD 6E 08     	LD L, (IX+8)
 256+ 5DD3 DD 66 09     	LD H, (IX+9) ; mask data
 257+ 5DD6 DD 5E 04     	LD E, (IX+4)
 258+ 5DD9 DD 56 05     	LD D, (IX+5) ; background data
 259+ 5DDC D9           	EXX
 260+ 5DDD DD 6E 0A     	LD L, (IX+10)
 261+ 5DE0 DD 66 0B     	LD H, (IX+11) ; character data
 262+ 5DE3 D9           	EXX
 263+ 5DE4              .LOOP:
 264+ 5DE4 C5           	PUSH BC
 265+ 5DE5 E5           		PUSH HL
 266+ 5DE6 D5           			PUSH DE
 267+ 5DE7 D9           				EXX
 268+ 5DE8 E5           				PUSH HL
 269+ 5DE9 D9           					EXX
 270+ 5DEA DD 7E 0E     					LD A, (IX+14) ; columns
 271+ 5DED              .CALL:
 272+ 5DED CD 13 5D     					CALL SHIFT_ROW
 273+ 5DF0 E1           				POP HL
 274+ 5DF1 DD 5E 0C     				LD E, (IX+12)
 275+ 5DF4 DD 56 0D     				LD D, (IX+13) ; char data to next row
 276+ 5DF7 19           				ADD HL, DE
 277+ 5DF8 D9           				EXX
 278+ 5DF9 E1           			POP HL
 279+ 5DFA DD 5E 06     			LD E, (IX+6)
 280+ 5DFD DD 56 07     			LD D, (IX+7) ; background to next row
 281+ 5E00 19           			ADD HL, DE
 282+ 5E01 EB           			EX DE, HL
 283+ 5E02 E1           		POP HL
 284+ 5E03 DD 4E 0C     		LD C, (IX+12)
 285+ 5E06 DD 46 0D     		LD B, (IX+13) ; char data to next row
 286+ 5E09 09           		ADD HL, BC
 287+ 5E0A C1           	POP BC
 288+ 5E0B 10 D7        	DJNZ .LOOP
 289+ 5E0D C9           	RET
 290+ 5E0E              ; *******************************************************************************************************
 291+ 5E0E
 292+ 5E0E               IFNDEF CMDS_WITH_PARAMETERS
 293+ 5E0E ~            ; *******************************************************************************************************
 294+ 5E0E ~            ; function to handle CALL BLIT basic extension
 295+ 5E0E ~            ; rotates 1-bit character drawing horizontally with mask and character data and
 296+ 5E0E ~            ; fuses with background data and applies vertical shift too
 297+ 5E0E ~            ; BLIT ( INT request_data_ptr )
 298+ 5E0E ~            ; request_data_ptr described in SHIFT_MERGE_CHARACTER
 299+ 5E0E ~            ; will put ram in page 0 also, page 1 is already there
 300+ 5E0E ~            BLIT:
 301+ 5E0E ~            	; opening (
 302+ 5E0E ~            	CALL CHKCHAR
 303+ 5E0E ~            	DB '('
 304+ 5E0E ~            	; get pointer to request struct
 305+ 5E0E ~            	LD IX, FRMQNT
 306+ 5E0E ~            	CALL CALBAS
 307+ 5E0E ~            	PUSH DE
 308+ 5E0E ~            	; ending )
 309+ 5E0E ~            	CALL CHKCHAR
 310+ 5E0E ~            	DB ')'
 311+ 5E0E ~
 312+ 5E0E ~            	POP IX ; pointer to request struct
 313+ 5E0E ~
 314+ 5E0E ~            	PUSH HL ; save position in BASIC buffer
 315+ 5E0E ~
 316+ 5E0E ~            	LD IY, .RET
 317+ 5E0E ~            	JP ENABLE_PAGE0
 318+ 5E0E ~            .RET:
 319+ 5E0E ~            	EI
 320+ 5E0E ~            	CALL SHIFT_MERGE_CHARACTER
 321+ 5E0E ~
 322+ 5E0E ~                POP DE
 323+ 5E0E ~                POP BC
 324+ 5E0E ~                CALL RESTORE_PAGE_INFO
 325+ 5E0E ~
 326+ 5E0E ~            	POP HL
 327+ 5E0E ~            	RET
 328+ 5E0E ~            ; *******************************************************************************************************
 329+ 5E0E               ENDIF
 330+ 5E0E
 331+ 5E0E               IFDEF CMDS_WITH_PARAMETERS
 332+ 5E0E              ; *******************************************************************************************************
 333+ 5E0E              ; function to handle CALL BLIT basic extension
 334+ 5E0E              ; rotates 1-bit character drawing horizontally with mask and character data and
 335+ 5E0E              ; fuses with background data and applies vertical shift too
 336+ 5E0E              ; in form without pointers
 337+ 5E0E              ; BLIT ( INT x,
 338+ 5E0E              ;		 INT y,
 339+ 5E0E              ;		 INT char_data_pointer,
 340+ 5E0E              ;		 INT mask_data_pointer,
 341+ 5E0E              ;		 INT width (in characters),
 342+ 5E0E              ;		 INT height (in characters),
 343+ 5E0E              ;		 INT background_pointer (top left),
 344+ 5E0E              ;		 INT background_width (in characters),
 345+ 5E0E              ;		 INT background_height (in characters))
 346+ 5E0E              ; will put ram in page 0 also, page 1 is already there
 347+ 5E0E              BLIT:
 348+ 5E0E              	; opening (
 349+ 5E0E CD BD 65     	CALL CHKCHAR
 350+ 5E11 28           	DB '('
 351+ 5E12              	; get x coordinate
 352+ 5E12 DD 21 2F 54  	LD IX, FRMQNT
 353+ 5E16 CD 59 01     	CALL CALBAS
 354+ 5E19 7B           	LD A, E
 355+ 5E1A E6 07        	AND 7
 356+ 5E1C 32 AF 62     	LD (BLIT_STRUCT+0), A
 357+ 5E1F CD FD 5E     	CALL .DAdiv8
 358+ 5E22 32 AB 62     	LD (BLIT_TMP+0),A
 359+ 5E25              	; comma
 360+ 5E25 CD BD 65     	CALL CHKCHAR
 361+ 5E28 2C           	DB ','
 362+ 5E29              	; get y coordinate
 363+ 5E29 DD 21 2F 54  	LD IX, FRMQNT
 364+ 5E2D CD 59 01     	CALL CALBAS
 365+ 5E30 7B           	LD A, E
 366+ 5E31 E6 07        	AND 7
 367+ 5E33 32 B1 62     	LD (BLIT_STRUCT+2), A
 368+ 5E36 CD FD 5E     	CALL .DAdiv8
 369+ 5E39 32 AC 62     	LD (BLIT_TMP+1),A
 370+ 5E3C              	; comma
 371+ 5E3C CD BD 65     	CALL CHKCHAR
 372+ 5E3F 2C           	DB ','
 373+ 5E40              	; get char data pointer
 374+ 5E40 DD 21 2F 54  	LD IX, FRMQNT
 375+ 5E44 CD 59 01     	CALL CALBAS
 376+ 5E47 ED 53 B9 62  	LD (BLIT_STRUCT+10), DE
 377+ 5E4B              	; comma
 378+ 5E4B CD BD 65     	CALL CHKCHAR
 379+ 5E4E 2C           	DB ','
 380+ 5E4F              	; get mask data pointer
 381+ 5E4F DD 21 2F 54  	LD IX, FRMQNT
 382+ 5E53 CD 59 01     	CALL CALBAS
 383+ 5E56 ED 53 B7 62  	LD (BLIT_STRUCT+8), DE
 384+ 5E5A              	; comma
 385+ 5E5A CD BD 65     	CALL CHKCHAR
 386+ 5E5D 2C           	DB ','
 387+ 5E5E              	; get width
 388+ 5E5E DD 21 2F 54  	LD IX, FRMQNT
 389+ 5E62 CD 59 01     	CALL CALBAS
 390+ 5E65 7B           	LD A, E
 391+ 5E66 32 BD 62     	LD (BLIT_STRUCT+14), A
 392+ 5E69              	; comma
 393+ 5E69 CD BD 65     	CALL CHKCHAR
 394+ 5E6C 2C           	DB ','
 395+ 5E6D              	; get height
 396+ 5E6D DD 21 2F 54  	LD IX, FRMQNT
 397+ 5E71 CD 59 01     	CALL CALBAS
 398+ 5E74 7B           	LD A, E
 399+ 5E75 32 BF 62     	LD (BLIT_STRUCT+16), A
 400+ 5E78              	; comma
 401+ 5E78 CD BD 65     	CALL CHKCHAR
 402+ 5E7B 2C           	DB ','
 403+ 5E7C              	; get background pointer
 404+ 5E7C DD 21 2F 54  	LD IX, FRMQNT
 405+ 5E80 CD 59 01     	CALL CALBAS
 406+ 5E83 ED 53 B3 62  	LD (BLIT_STRUCT+4), DE
 407+ 5E87              	; comma
 408+ 5E87 CD BD 65     	CALL CHKCHAR
 409+ 5E8A 2C           	DB ','
 410+ 5E8B              	; get background width
 411+ 5E8B DD 21 2F 54  	LD IX, FRMQNT
 412+ 5E8F CD 59 01     	CALL CALBAS
 413+ 5E92 7B           	LD A, E
 414+ 5E93 32 AD 62     	LD (BLIT_TMP+2), A
 415+ 5E96              	; comma
 416+ 5E96 CD BD 65     	CALL CHKCHAR
 417+ 5E99 2C           	DB ','
 418+ 5E9A              	; get background height
 419+ 5E9A DD 21 2F 54  	LD IX, FRMQNT
 420+ 5E9E CD 59 01     	CALL CALBAS
 421+ 5EA1 7B           	LD A, E
 422+ 5EA2 32 AE 62     	LD (BLIT_TMP+3), A
 423+ 5EA5              	; ending )
 424+ 5EA5 CD BD 65     	CALL CHKCHAR
 425+ 5EA8 29           	DB ')'
 426+ 5EA9
 427+ 5EA9 E5           	PUSH HL ; save position in BASIC buffer
 428+ 5EAA
 429+ 5EAA              	; calculate char&mask add to value
 430+ 5EAA 26 00        	LD H, 0
 431+ 5EAC 3A BD 62     	LD A, (BLIT_STRUCT+14)
 432+ 5EAF 6F           	LD L, A
 433+ 5EB0 CD AB 64     	CALL HLx8
 434+ 5EB3 22 BB 62     	LD (BLIT_STRUCT+12), HL
 435+ 5EB6              	; calculate background add to value
 436+ 5EB6 26 00        	LD H, 0
 437+ 5EB8 3A AD 62     	LD A, (BLIT_TMP+2)
 438+ 5EBB 6F           	LD L, A
 439+ 5EBC CD AB 64     	CALL HLx8
 440+ 5EBF 22 B5 62     	LD (BLIT_STRUCT+6), HL
 441+ 5EC2              	; calculate pointer to background location
 442+ 5EC2 21 00 00     	LD HL, 0
 443+ 5EC5 3A AC 62     	LD A,(BLIT_TMP+1)
 444+ 5EC8 B7           	OR A
 445+ 5EC9 28 08        	JR Z, .L1
 446+ 5ECB 47           	LD B,A
 447+ 5ECC ED 5B B5 62  	LD DE,(BLIT_STRUCT+6)
 448+ 5ED0              .L0:
 449+ 5ED0 19           	ADD HL, DE
 450+ 5ED1 10 FD        	DJNZ .L0
 451+ 5ED3              .L1:
 452+ 5ED3 EB           	EX DE,HL
 453+ 5ED4 26 00        	LD H,0
 454+ 5ED6 3A AB 62     	LD A,(BLIT_TMP+0)
 455+ 5ED9 6F           	LD L,A
 456+ 5EDA CD AB 64     	CALL HLx8
 457+ 5EDD 19           	ADD HL,DE
 458+ 5EDE ED 5B B3 62  	LD DE,(BLIT_STRUCT+4)
 459+ 5EE2 19           	ADD HL,DE
 460+ 5EE3 22 B3 62     	LD (BLIT_STRUCT+4),HL
 461+ 5EE6
 462+ 5EE6 F3           	DI
 463+ 5EE7 FD 21 EE 5E  	LD IY, .RET
 464+ 5EEB C3 6F 65     	JP ENABLE_PAGE0
 465+ 5EEE              .RET:
 466+ 5EEE FB           	EI
 467+ 5EEF DD 21 AF 62  	LD IX, BLIT_STRUCT
 468+ 5EF3 CD 7A 5D     	CALL SHIFT_MERGE_CHARACTER
 469+ 5EF6
 470+ 5EF6 D1               POP DE
 471+ 5EF7 C1               POP BC
 472+ 5EF8 CD E6 64         CALL RESTORE_PAGE_INFO
 473+ 5EFB
 474+ 5EFB E1           	POP HL
 475+ 5EFC C9           	RET
 476+ 5EFD              .DAdiv8:
 477+ 5EFD 7B           	LD A,E
 478+ 5EFE CB 2A        	SRA D
 479+ 5F00 CB 1F            RR  A
 480+ 5F02 CB 2A            SRA D
 481+ 5F04 CB 1F            RR  A
 482+ 5F06 CB 2A            SRA D
 483+ 5F08 CB 1F            RR  A
 484+ 5F0A C9           	RET
 485+ 5F0B              ; *******************************************************************************************************
 486+ 5F0B               ENDIF
# file closed: asm\BLIT.asm
 148  5F0B               ENDIF
 149  5F0B
 150  5F0B               IF (TILE_CMDS == 1)
 151  5F0B               INCLUDE "TILE.asm"
# file opened: asm\TILE.asm
   1+ 5F0B              ; *******************************************************************************************************
   2+ 5F0B              ; generic function to implement tiling
   3+ 5F0B              ; should be modified to call appropriate function for memory or vram
   4+ 5F0B              ; input IX=pointer to following structure
   5+ 5F0B              ; +00 tile_data_ptr
   6+ 5F0B              ; +02 tile_rows
   7+ 5F0B              ; +04 tile_columns
   8+ 5F0B              ; +06 destination_address
   9+ 5F0B              ; +08 dest_to_next_row_add_to_value
  10+ 5F0B              ; +10 num_horizontal_tiles
  11+ 5F0B              ; +12 num_vertical_tiles
  12+ 5F0B              ; modifies AF, BC, DE, HL
  13+ 5F0B              TILE:
  14+ 5F0B DD 6E 06     	LD L, (IX+6)
  15+ 5F0E DD 66 07     	LD H, (IX+7) ; destination address
  16+ 5F11 22 AB 62     	LD (TILETMP1), HL
  17+ 5F14 DD 46 0C     	LD B, (IX+12) ; vertical tile number
  18+ 5F17              .L1:
  19+ 5F17 C5           	PUSH BC
  20+ 5F18 DD 6E 00     		LD L, (IX+0)
  21+ 5F1B DD 66 01     		LD H, (IX+1) ; tile address
  22+ 5F1E 22 AD 62     		LD (TILETMP2), HL
  23+ 5F21 DD 46 02     		LD B, (IX+2) ; tile rows
  24+ 5F24              .L2:
  25+ 5F24 C5           		PUSH BC
  26+ 5F25 CD 00 00     .CALL1:		CALL 0
  27+ 5F28 DD 46 0A     			LD B, (IX+10) ; horizontal tile num
  28+ 5F2B              .L3:
  29+ 5F2B C5           			PUSH BC
  30+ 5F2C 2A AD 62     				LD HL, (TILETMP2)
  31+ 5F2F DD 46 04     				LD B, (IX+4) ; tile columns
  32+ 5F32              .L4:
  33+ 5F32 C5           				PUSH BC
  34+ 5F33              .CALL2:
  35+ 5F33 CD 00 00     					CALL 0
  36+ 5F36 C1           				POP BC
  37+ 5F37 10 F9        				DJNZ .L4
  38+ 5F39 C1           			POP BC
  39+ 5F3A 10 EF        			DJNZ .L3
  40+ 5F3C 22 AD 62     			LD (TILETMP2), HL
  41+ 5F3F 2A AB 62     			LD HL, (TILETMP1)
  42+ 5F42 DD 5E 08     			LD E, (IX+8)
  43+ 5F45 DD 56 09     			LD D, (IX+9) ; add to value for dest next row
  44+ 5F48 19           			ADD HL, DE
  45+ 5F49 22 AB 62     			LD (TILETMP1), HL
  46+ 5F4C C1           		POP BC
  47+ 5F4D 10 D5        		DJNZ .L2
  48+ 5F4F C1           	POP BC
  49+ 5F50 10 C5        	DJNZ .L1
  50+ 5F52 C9           	RET
  51+ 5F53              ; *******************************************************************************************************
  52+ 5F53
  53+ 5F53               IFNDEF CMDS_WITH_PARAMETERS
  54+ 5F53 ~            ; *******************************************************************************************************
  55+ 5F53 ~            ; function to handle CALL TILERAM basic extension
  56+ 5F53 ~            ; fills memory with tiles
  57+ 5F53 ~            ; TILERAM ( INT request_data_ptr )
  58+ 5F53 ~            ; request_data_ptr described in TILE
  59+ 5F53 ~            ; will put ram in page 0 also, page 1 is already there
  60+ 5F53 ~            TILERAM:
  61+ 5F53 ~            	; opening (
  62+ 5F53 ~            	CALL CHKCHAR
  63+ 5F53 ~            	DB '('
  64+ 5F53 ~            	; get pointer to request struct
  65+ 5F53 ~            	LD IX, FRMQNT
  66+ 5F53 ~            	CALL CALBAS
  67+ 5F53 ~            	PUSH DE
  68+ 5F53 ~            	; ending )
  69+ 5F53 ~            	CALL CHKCHAR
  70+ 5F53 ~            	DB ')'
  71+ 5F53 ~
  72+ 5F53 ~            	POP IX ; pointer to request struct
  73+ 5F53 ~
  74+ 5F53 ~            	PUSH HL ; save position in BASIC buffer
  75+ 5F53 ~            	DI
  76+ 5F53 ~            	LD IY, .RET
  77+ 5F53 ~            	JP ENABLE_PAGE0
  78+ 5F53 ~            .RET:
  79+ 5F53 ~            	EI
  80+ 5F53 ~            	; set RAM functions to call
  81+ 5F53 ~            	LD HL, .TILECOPY
  82+ 5F53 ~            	LD (TILE.CALL2+1), HL
  83+ 5F53 ~            	LD HL, .SETDESTROW
  84+ 5F53 ~            	LD (TILE.CALL1+1), HL
  85+ 5F53 ~            	LD A,1
  86+ 5F53 ~            	LD (VRAM_UPDATE_IN_PROGRESS),A
  87+ 5F53 ~            	CALL TILE
  88+ 5F53 ~            	XOR A
  89+ 5F53 ~            	LD (VRAM_UPDATE_IN_PROGRESS),A
  90+ 5F53 ~
  91+ 5F53 ~                POP DE
  92+ 5F53 ~                POP BC
  93+ 5F53 ~                CALL RESTORE_PAGE_INFO
  94+ 5F53 ~
  95+ 5F53 ~            	POP HL
  96+ 5F53 ~            	RET
  97+ 5F53 ~            .TILECOPY:
  98+ 5F53 ~            	.8 LDI
  99+ 5F53 ~            	RET
 100+ 5F53 ~            .SETDESTROW:
 101+ 5F53 ~            	LD DE, (TILETMP1)
 102+ 5F53 ~            	RET
 103+ 5F53 ~            ; *******************************************************************************************************
 104+ 5F53               ENDIF
 105+ 5F53
 106+ 5F53               IFDEF CMDS_WITH_PARAMETERS
 107+ 5F53              ; *******************************************************************************************************
 108+ 5F53              ; function to handle CALL TILERAM basic extension
 109+ 5F53              ; fills memory with tiles
 110+ 5F53              ; TILERAM ( INT tile_data_pointer,
 111+ 5F53              ;			INT tile_columns,
 112+ 5F53              ;			INT tile_rows,
 113+ 5F53              ;			INT destination_pointer,
 114+ 5F53              ;			INT destination_columns,
 115+ 5F53              ;			INT destination_rows,
 116+ 5F53              ;			INT destination_begin_column,
 117+ 5F53              ;			INT destination_begin_row,
 118+ 5F53              ;			INT number_of_tiles_horizontally,
 119+ 5F53              ;			INT	number_of_tiles_vertically )
 120+ 5F53              ; will put ram in page 0 also, page 1 is already there
 121+ 5F53              TILERAM:
 122+ 5F53              	; opening (
 123+ 5F53 CD BD 65     	CALL CHKCHAR
 124+ 5F56 28           	DB '('
 125+ 5F57              	; get tile data pointer coordinate
 126+ 5F57 DD 21 2F 54  	LD IX, FRMQNT
 127+ 5F5B CD 59 01     	CALL CALBAS
 128+ 5F5E ED 53 AF 62  	LD (BLIT_STRUCT+0), DE
 129+ 5F62              	; comma
 130+ 5F62 CD BD 65     	CALL CHKCHAR
 131+ 5F65 2C           	DB ','
 132+ 5F66              	; get tile columns
 133+ 5F66 DD 21 2F 54  	LD IX, FRMQNT
 134+ 5F6A CD 59 01     	CALL CALBAS
 135+ 5F6D ED 53 B3 62  	LD (BLIT_STRUCT+4), DE
 136+ 5F71              	; comma
 137+ 5F71 CD BD 65     	CALL CHKCHAR
 138+ 5F74 2C           	DB ','
 139+ 5F75              	; get tile columns
 140+ 5F75 DD 21 2F 54  	LD IX, FRMQNT
 141+ 5F79 CD 59 01     	CALL CALBAS
 142+ 5F7C ED 53 B1 62  	LD (BLIT_STRUCT+2), DE
 143+ 5F80              	; comma
 144+ 5F80 CD BD 65     	CALL CHKCHAR
 145+ 5F83 2C           	DB ','
 146+ 5F84              	; get destintion pointer
 147+ 5F84 DD 21 2F 54  	LD IX, FRMQNT
 148+ 5F88 CD 59 01     	CALL CALBAS
 149+ 5F8B ED 53 B5 62  	LD (BLIT_STRUCT+6), DE
 150+ 5F8F              	; comma
 151+ 5F8F CD BD 65     	CALL CHKCHAR
 152+ 5F92 2C           	DB ','
 153+ 5F93              	; get destination columns
 154+ 5F93 DD 21 2F 54  	LD IX, FRMQNT
 155+ 5F97 CD 59 01     	CALL CALBAS
 156+ 5F9A 7B           	LD A, E
 157+ 5F9B 32 AB 62     	LD (BLIT_TMP+0), A
 158+ 5F9E              	; comma
 159+ 5F9E CD BD 65     	CALL CHKCHAR
 160+ 5FA1 2C           	DB ','
 161+ 5FA2              	; get destination rows
 162+ 5FA2 DD 21 2F 54  	LD IX, FRMQNT
 163+ 5FA6 CD 59 01     	CALL CALBAS
 164+ 5FA9 7B           	LD A, E
 165+ 5FAA 32 AC 62     	LD (BLIT_TMP+1), A
 166+ 5FAD              	; comma
 167+ 5FAD CD BD 65     	CALL CHKCHAR
 168+ 5FB0 2C           	DB ','
 169+ 5FB1              	; get destination begin column
 170+ 5FB1 DD 21 2F 54  	LD IX, FRMQNT
 171+ 5FB5 CD 59 01     	CALL CALBAS
 172+ 5FB8 7B           	LD A, E
 173+ 5FB9 32 AD 62     	LD (BLIT_TMP+2), A
 174+ 5FBC              	; comma
 175+ 5FBC CD BD 65     	CALL CHKCHAR
 176+ 5FBF 2C           	DB ','
 177+ 5FC0              	; get destination begin row
 178+ 5FC0 DD 21 2F 54  	LD IX, FRMQNT
 179+ 5FC4 CD 59 01     	CALL CALBAS
 180+ 5FC7 7B           	LD A, E
 181+ 5FC8 32 AE 62     	LD (BLIT_TMP+3), A
 182+ 5FCB              	; comma
 183+ 5FCB CD BD 65     	CALL CHKCHAR
 184+ 5FCE 2C           	DB ','
 185+ 5FCF              	; get number of tiles horizontally
 186+ 5FCF DD 21 2F 54  	LD IX, FRMQNT
 187+ 5FD3 CD 59 01     	CALL CALBAS
 188+ 5FD6 ED 53 B9 62  	LD (BLIT_STRUCT+10), DE
 189+ 5FDA              	; comma
 190+ 5FDA CD BD 65     	CALL CHKCHAR
 191+ 5FDD 2C           	DB ','
 192+ 5FDE              	; get number of tiles vertically
 193+ 5FDE DD 21 2F 54  	LD IX, FRMQNT
 194+ 5FE2 CD 59 01     	CALL CALBAS
 195+ 5FE5 ED 53 BB 62  	LD (BLIT_STRUCT+12), DE
 196+ 5FE9              	; ending )
 197+ 5FE9 CD BD 65     	CALL CHKCHAR
 198+ 5FEC 29           	DB ')'
 199+ 5FED
 200+ 5FED E5           	PUSH HL ; save position in BASIC buffer
 201+ 5FEE
 202+ 5FEE              	; calculate destination add to value
 203+ 5FEE 26 00        	LD H, 0
 204+ 5FF0 3A AB 62     	LD A, (BLIT_TMP+0)
 205+ 5FF3 6F           	LD L, A
 206+ 5FF4 CD AB 64     	CALL HLx8
 207+ 5FF7 22 B7 62     	LD (BLIT_STRUCT+8), HL
 208+ 5FFA              	; calculate pointer to background location
 209+ 5FFA 21 00 00     	LD HL, 0
 210+ 5FFD 3A AE 62     	LD A,(BLIT_TMP+3)
 211+ 6000 B7           	OR A
 212+ 6001 28 08        	JR Z, .L1
 213+ 6003 47           	LD B,A
 214+ 6004 ED 5B B7 62  	LD DE,(BLIT_STRUCT+8)
 215+ 6008              .L0:
 216+ 6008 19           	ADD HL, DE
 217+ 6009 10 FD        	DJNZ .L0
 218+ 600B              .L1:
 219+ 600B EB           	EX DE,HL
 220+ 600C 26 00        	LD H,0
 221+ 600E 3A AD 62     	LD A,(BLIT_TMP+2)
 222+ 6011 6F           	LD L,A
 223+ 6012 CD AB 64     	CALL HLx8
 224+ 6015 19           	ADD HL,DE
 225+ 6016 ED 5B B5 62  	LD DE,(BLIT_STRUCT+6)
 226+ 601A 19           	ADD HL,DE
 227+ 601B 22 B5 62     	LD (BLIT_STRUCT+6),HL
 228+ 601E F3           	DI
 229+ 601F FD 21 26 60  	LD IY, .RET
 230+ 6023 C3 6F 65     	JP ENABLE_PAGE0
 231+ 6026              .RET:
 232+ 6026 FB           	EI
 233+ 6027              	; set RAM functions to call
 234+ 6027 21 41 60     	LD HL, .TILECOPY
 235+ 602A 22 34 5F     	LD (TILE.CALL2+1), HL
 236+ 602D 21 52 60     	LD HL, .SETDESTROW
 237+ 6030 22 26 5F     	LD (TILE.CALL1+1), HL
 238+ 6033 DD 21 AF 62  	LD IX,BLIT_STRUCT
 239+ 6037 CD 0B 5F     	CALL TILE
 240+ 603A
 241+ 603A D1               POP DE
 242+ 603B C1               POP BC
 243+ 603C CD E6 64         CALL RESTORE_PAGE_INFO
 244+ 603F
 245+ 603F E1           	POP HL
 246+ 6040 C9           	RET
 247+ 6041              .TILECOPY:
 248+ 6041 ED A0       > LDI
 248+ 6043 ED A0       > LDI
 248+ 6045 ED A0       > LDI
 248+ 6047 ED A0       > LDI
 248+ 6049 ED A0       > LDI
 248+ 604B ED A0       > LDI
 248+ 604D ED A0       > LDI
 248+ 604F ED A0       > LDI
 249+ 6051 C9           	RET
 250+ 6052              .SETDESTROW:
 251+ 6052 ED 5B AB 62  	LD DE, (TILETMP1)
 252+ 6056 C9           	RET
 253+ 6057              ; *******************************************************************************************************
 254+ 6057               ENDIF
 255+ 6057
 256+ 6057               IFDEF CMDS_WITH_PARAMETERS
 257+ 6057              ; *******************************************************************************************************
 258+ 6057              ; function to handle CALL TILEVRM basic extension
 259+ 6057              ; fills vram with tiles
 260+ 6057              ; TILEVRM ( INT tile_data_pointer,
 261+ 6057              ;			INT tile_columns,
 262+ 6057              ;			INT tile_rows,
 263+ 6057              ;			INT destination_begin_column,
 264+ 6057              ;			INT destination_begin_row,
 265+ 6057              ;			INT number_of_tiles_horizontally,
 266+ 6057              ;			INT	number_of_tiles_vertically )
 267+ 6057              ; will put ram in page 0 also, page 1 is already there
 268+ 6057              ; for destination uses address of SCREEN 2 pattern buffer and 32x24 size
 269+ 6057              TILEVRM:
 270+ 6057              	; opening (
 271+ 6057 CD BD 65     	CALL CHKCHAR
 272+ 605A 28           	DB '('
 273+ 605B              	; get tile data pointer coordinate
 274+ 605B DD 21 2F 54  	LD IX, FRMQNT
 275+ 605F CD 59 01     	CALL CALBAS
 276+ 6062 ED 53 AF 62  	LD (BLIT_STRUCT+0), DE
 277+ 6066              	; comma
 278+ 6066 CD BD 65     	CALL CHKCHAR
 279+ 6069 2C           	DB ','
 280+ 606A              	; get tile columns
 281+ 606A DD 21 2F 54  	LD IX, FRMQNT
 282+ 606E CD 59 01     	CALL CALBAS
 283+ 6071 ED 53 B3 62  	LD (BLIT_STRUCT+4), DE
 284+ 6075              	; comma
 285+ 6075 CD BD 65     	CALL CHKCHAR
 286+ 6078 2C           	DB ','
 287+ 6079              	; get tile columns
 288+ 6079 DD 21 2F 54  	LD IX, FRMQNT
 289+ 607D CD 59 01     	CALL CALBAS
 290+ 6080 ED 53 B1 62  	LD (BLIT_STRUCT+2), DE
 291+ 6084              	; comma
 292+ 6084 CD BD 65     	CALL CHKCHAR
 293+ 6087 2C           	DB ','
 294+ 6088              	; get destination begin column
 295+ 6088 DD 21 2F 54  	LD IX, FRMQNT
 296+ 608C CD 59 01     	CALL CALBAS
 297+ 608F 7B           	LD A, E
 298+ 6090 32 AD 62     	LD (BLIT_TMP+2), A
 299+ 6093              	; comma
 300+ 6093 CD BD 65     	CALL CHKCHAR
 301+ 6096 2C           	DB ','
 302+ 6097              	; get destination begin row
 303+ 6097 DD 21 2F 54  	LD IX, FRMQNT
 304+ 609B CD 59 01     	CALL CALBAS
 305+ 609E 7B           	LD A, E
 306+ 609F 32 AE 62     	LD (BLIT_TMP+3), A
 307+ 60A2              	; comma
 308+ 60A2 CD BD 65     	CALL CHKCHAR
 309+ 60A5 2C           	DB ','
 310+ 60A6              	; get number of tiles horizontally
 311+ 60A6 DD 21 2F 54  	LD IX, FRMQNT
 312+ 60AA CD 59 01     	CALL CALBAS
 313+ 60AD ED 53 B9 62  	LD (BLIT_STRUCT+10), DE
 314+ 60B1              	; comma
 315+ 60B1 CD BD 65     	CALL CHKCHAR
 316+ 60B4 2C           	DB ','
 317+ 60B5              	; get number of tiles vertically
 318+ 60B5 DD 21 2F 54  	LD IX, FRMQNT
 319+ 60B9 CD 59 01     	CALL CALBAS
 320+ 60BC ED 53 BB 62  	LD (BLIT_STRUCT+12), DE
 321+ 60C0              	; ending )
 322+ 60C0 CD BD 65     	CALL CHKCHAR
 323+ 60C3 29           	DB ')'
 324+ 60C4
 325+ 60C4 E5           	PUSH HL ; save position in BASIC buffer
 326+ 60C5
 327+ 60C5              	; calculate destination add to value
 328+ 60C5 21 00 01     	LD HL, 256
 329+ 60C8 22 B7 62     	LD (BLIT_STRUCT+8), HL
 330+ 60CB              	; calculate pointer to background location
 331+ 60CB 3A AE 62     	LD A,(BLIT_TMP+3)
 332+ 60CE 67           	LD H,A
 333+ 60CF 2E 00        	LD L,0
 334+ 60D1 EB           	EX DE,HL
 335+ 60D2 26 00        	LD H,0
 336+ 60D4 3A AD 62     	LD A,(BLIT_TMP+2)
 337+ 60D7 6F           	LD L,A
 338+ 60D8 CD AB 64     	CALL HLx8
 339+ 60DB 19           	ADD HL,DE
 340+ 60DC ED 5B CB F3  	LD DE,(GRPCGP)
 341+ 60E0 19           	ADD HL,DE
 342+ 60E1 22 B5 62     	LD (BLIT_STRUCT+6),HL
 343+ 60E4 F3           	DI
 344+ 60E5 FD 21 EC 60  	LD IY, .RET
 345+ 60E9 C3 6F 65     	JP ENABLE_PAGE0
 346+ 60EC              .RET:
 347+ 60EC FB           	EI
 348+ 60ED              	; set RAM functions to call
 349+ 60ED 21 07 61     	LD HL, .TILECOPY
 350+ 60F0 22 34 5F     	LD (TILE.CALL2+1), HL
 351+ 60F3 21 0D 61     	LD HL, .SETDESTROW
 352+ 60F6 22 26 5F     	LD (TILE.CALL1+1), HL
 353+ 60F9 DD 21 AF 62  	LD IX,BLIT_STRUCT
 354+ 60FD CD 0B 5F     	CALL TILE
 355+ 6100
 356+ 6100 D1               POP DE
 357+ 6101 C1               POP BC
 358+ 6102 CD E6 64         CALL RESTORE_PAGE_INFO
 359+ 6105
 360+ 6105 E1           	POP HL
 361+ 6106 C9           	RET
 362+ 6107              .TILECOPY:
 363+ 6107 01 98 08     	LD BC, #0898
 364+ 610A C3 A3 64     	JP BBYTECOPY_NO_C
 365+ 610D              .SETDESTROW:
 366+ 610D 2A AB 62     	LD HL, (TILETMP1)
 367+ 6110 F3           	DI
 368+ 6111 CD 96 64     	CALL SETWRT_LOCAL
 369+ 6114 FB           	EI
 370+ 6115 C9           	RET
 371+ 6116              ; *******************************************************************************************************
 372+ 6116               ENDIF
 373+ 6116
 374+ 6116               IFNDEF CMDS_WITH_PARAMETERS
 375+ 6116 ~            ; *******************************************************************************************************
 376+ 6116 ~            ; function to handle CALL TILEVRM basic extension
 377+ 6116 ~            ; fills vram with tiles
 378+ 6116 ~            ; TILEVRM ( INT request_data_ptr )
 379+ 6116 ~            ; request_data_ptr described in TILE
 380+ 6116 ~            ; will put ram in page 0 also, page 1 is already there
 381+ 6116 ~            TILEVRM:
 382+ 6116 ~            	; opening (
 383+ 6116 ~            	CALL CHKCHAR
 384+ 6116 ~            	DB '('
 385+ 6116 ~            	; get pointer to request struct
 386+ 6116 ~            	LD IX, FRMQNT
 387+ 6116 ~            	CALL CALBAS
 388+ 6116 ~            	PUSH DE
 389+ 6116 ~            	; ending )
 390+ 6116 ~            	CALL CHKCHAR
 391+ 6116 ~            	DB ')'
 392+ 6116 ~
 393+ 6116 ~            	POP IX ; pointer to request struct
 394+ 6116 ~
 395+ 6116 ~            	PUSH HL ; save position in BASIC buffer
 396+ 6116 ~            	DI
 397+ 6116 ~            	LD IY, .RET
 398+ 6116 ~            	JP ENABLE_PAGE0
 399+ 6116 ~            .RET:
 400+ 6116 ~            	EI
 401+ 6116 ~            	; set RAM functions to call
 402+ 6116 ~            	LD HL, .TILECOPY
 403+ 6116 ~            	LD (TILE.CALL2+1), HL
 404+ 6116 ~            	LD HL, .SETDESTROW
 405+ 6116 ~            	LD (TILE.CALL1+1), HL
 406+ 6116 ~            	CALL TILE
 407+ 6116 ~
 408+ 6116 ~                POP DE
 409+ 6116 ~                POP BC
 410+ 6116 ~                CALL RESTORE_PAGE_INFO
 411+ 6116 ~
 412+ 6116 ~            	POP HL
 413+ 6116 ~            	RET
 414+ 6116 ~            .TILECOPY:
 415+ 6116 ~            	LD BC, #0898
 416+ 6116 ~            	JP BBYTECOPY_NO_C
 417+ 6116 ~            .SETDESTROW:
 418+ 6116 ~            	LD HL, (TILETMP1)
 419+ 6116 ~            	DI
 420+ 6116 ~            	CALL SETWRT_LOCAL
 421+ 6116 ~            	EI
 422+ 6116 ~            	RET
 423+ 6116 ~            ; *******************************************************************************************************
 424+ 6116               ENDIF
# file closed: asm\TILE.asm
 152  6116               ENDIF
 153  6116
 154  6116               IF (COLL_CMD == 1)
 155  6116               INCLUDE "COLLISION.asm"
# file opened: asm\COLLISION.asm
   1+ 6116              ; generic collision checking routines
   2+ 6116              ; in BASIC we use rectangle structure array DIM R%(7,n) of the format
   3+ 6116              ; R%(0,n) is active flag, <>0 active / 0 skipped in checks
   4+ 6116              ; R%(1,n) is either upper left x coordinate or sprite id (0-31) depending on R(7,n)
   5+ 6116              ; R%(2,n) is either upper left y coordinate or unused depending on R(7,n)
   6+ 6116              ; R%(3,n) x offset where rectangle begins
   7+ 6116              ; R%(4,n) y offset where rectangle begins
   8+ 6116              ; R%(5,n) is width
   9+ 6116              ; R%(6,n) is height
  10+ 6116              ; R%(7,0) is type, 0=generic where R%(1,0) contains x coordinate
  11+ 6116              ;                  <>0 sprite where R%(1,0) contains sprite id
  12+ 6116              ; for type sprite, upper left coordinates are taken from sprite attribute array
  13+ 6116
  14+ 6116              ; ************************************************************************************************
  15+ 6116              ; quick test if HL<=DE<=HL+BC
  16+ 6116              ; input BC=width, DE=x, HL=min
  17+ 6116              ; if not true flag C set
  18+ 6116              ; modifies AF
  19+ 6116              GENERIC_INNER_CHECK:
  20+ 6116 E5               PUSH HL
  21+ 6117 D5               PUSH DE
  22+ 6118 EB               EX DE,HL
  23+ 6119 A7               AND A
  24+ 611A ED 52            SBC HL, DE
  25+ 611C FA 2A 61         JP M, .GENERIC_INNER_CHECK_NOT
  26+ 611F A7               AND A
  27+ 6120 ED 42            SBC HL, BC
  28+ 6122 28 03            JR Z, .L2
  29+ 6124 F2 2A 61         JP P, .GENERIC_INNER_CHECK_NOT
  30+ 6127              .L2:
  31+ 6127 A7               AND A
  32+ 6128 18 01            JR .EXIT
  33+ 612A              .GENERIC_INNER_CHECK_NOT:
  34+ 612A 37               SCF
  35+ 612B              .EXIT:
  36+ 612B D1               POP DE
  37+ 612C E1               POP HL
  38+ 612D C9               RET
  39+ 612E              ; ************************************************************************************************
  40+ 612E
  41+ 612E              ; ************************************************************************************************
  42+ 612E              ; function to check if rectangles are overlapping
  43+ 612E              ; input IX=IY=pointer to struct
  44+ 612E              ;  +00 active flag
  45+ 612E              ;  +02 x coordinate
  46+ 612E              ;  +04 y coordinate
  47+ 612E              ;  +06 x offset where rectangle begins
  48+ 612E              ;  +08 y offset where rectangle begins
  49+ 612E              ;  +10 width
  50+ 612E              ;  +12 height
  51+ 612E              ; where IY is used to read +2 and +4, and IX to read +6, +8, +10 and +12
  52+ 612E              ; this is a hack to allow location being taken from sprite attributes table
  53+ 612E              ; input BLIT_STRUCT data
  54+ 612E              ;  +00 x coordinate
  55+ 612E              ;  +02 y coordinate
  56+ 612E              ;  +04 width
  57+ 612E              ;  +06 height
  58+ 612E              ; returns CF=1 if not overlapping, CF=0 if overlapping
  59+ 612E              RECTANGLE_OVERLAP_CHECK:
  60+ 612E                  ; first check which rectangle is higher
  61+ 612E DD 6E 0C         LD L,(IX+12)
  62+ 6131 DD 66 0D         LD H,(IX+13)
  63+ 6134 ED 5B B5 62      LD DE,(BLIT_STRUCT+6)
  64+ 6138 A7               AND A
  65+ 6139 ED 52            SBC HL,DE
  66+ 613B FD 6E 04         LD L,(IY+4)
  67+ 613E FD 66 05         LD H,(IY+5)
  68+ 6141 DD 5E 08         LD E,(IX+8)
  69+ 6144 DD 56 09         LD D,(IX+9)
  70+ 6147 FA 67 61         JP M,.L1
  71+ 614A                  ; equally high or IX defined one higher
  72+ 614A                  ; check upper boundary
  73+ 614A 19               ADD HL,DE
  74+ 614B ED 5B B1 62      LD DE,(BLIT_STRUCT+2)
  75+ 614F DD 4E 0C         LD C,(IX+12)
  76+ 6152 DD 46 0D         LD B,(IX+13)
  77+ 6155 CD 16 61         CALL GENERIC_INNER_CHECK
  78+ 6158 30 29            JR NC,.INSIDE
  79+ 615A                  ; check lower boundary
  80+ 615A E5               PUSH HL
  81+ 615B 2A B5 62         LD HL,(BLIT_STRUCT+6)
  82+ 615E 19               ADD HL,DE
  83+ 615F EB               EX DE,HL
  84+ 6160 E1               POP HL
  85+ 6161 CD 16 61         CALL GENERIC_INNER_CHECK
  86+ 6164 30 1D            JR NC,.INSIDE
  87+ 6166 C9               RET ; not overlapping
  88+ 6167              .L1:
  89+ 6167                  ; rectangle defined in BLIT_STRUCT is higher
  90+ 6167 19               ADD HL,DE
  91+ 6168 EB               EX DE,HL
  92+ 6169 2A B1 62         LD HL,(BLIT_STRUCT+2)
  93+ 616C ED 4B B5 62      LD BC,(BLIT_STRUCT+6)
  94+ 6170 CD 16 61         CALL GENERIC_INNER_CHECK
  95+ 6173 30 0E            JR NC,.INSIDE
  96+ 6175 E5               PUSH HL
  97+ 6176 DD 6E 0C         LD L,(IX+12)
  98+ 6179 DD 66 0D         LD H,(IX+13)
  99+ 617C 19               ADD HL,DE
 100+ 617D EB               EX DE,HL
 101+ 617E E1               POP HL
 102+ 617F CD 16 61         CALL GENERIC_INNER_CHECK
 103+ 6182 D8               RET C
 104+ 6183              .INSIDE:
 105+ 6183                  ; check x coordinate
 106+ 6183                  ; first check which rectangle is wider
 107+ 6183 DD 6E 0A         LD L,(IX+10)
 108+ 6186 DD 66 0B         LD H,(IX+11)
 109+ 6189 ED 5B B3 62      LD DE,(BLIT_STRUCT+4)
 110+ 618D A7               AND A
 111+ 618E ED 52            SBC HL,DE
 112+ 6190 FD 6E 02         LD L,(IY+2)
 113+ 6193 FD 66 03         LD H,(IY+3)
 114+ 6196 DD 5E 06         LD E,(IX+6)
 115+ 6199 DD 56 07         LD D,(IX+7)
 116+ 619C FA B8 61         JP M,.L2
 117+ 619F                  ; equally wide or IX defined one wider
 118+ 619F                  ; check left boundary
 119+ 619F 19               ADD HL,DE
 120+ 61A0 ED 5B AF 62      LD DE,(BLIT_STRUCT+0)
 121+ 61A4 DD 4E 0A         LD C,(IX+10)
 122+ 61A7 DD 46 0B         LD B,(IX+11)
 123+ 61AA CD 16 61         CALL GENERIC_INNER_CHECK
 124+ 61AD D0               RET NC ; overlap
 125+ 61AE                  ; check right boundary
 126+ 61AE E5               PUSH HL
 127+ 61AF 2A B3 62         LD HL,(BLIT_STRUCT+4)
 128+ 61B2 19               ADD HL,DE
 129+ 61B3 EB               EX DE,HL
 130+ 61B4 E1               POP HL
 131+ 61B5 C3 16 61         JP GENERIC_INNER_CHECK ; CF and result set by fn call
 132+ 61B8              .L2:
 133+ 61B8                  ; rectangle defined in BLIT_STRUCT is higher
 134+ 61B8 19               ADD HL,DE
 135+ 61B9 EB               EX DE,HL
 136+ 61BA 2A AF 62         LD HL,(BLIT_STRUCT+0)
 137+ 61BD ED 4B B3 62      LD BC,(BLIT_STRUCT+4)
 138+ 61C1 CD 16 61         CALL GENERIC_INNER_CHECK
 139+ 61C4 D0               RET NC ; overlap
 140+ 61C5 E5               PUSH HL
 141+ 61C6 DD 6E 0A         LD L,(IX+10)
 142+ 61C9 DD 66 0B         LD H,(IX+11)
 143+ 61CC 19               ADD HL,DE
 144+ 61CD EB               EX DE,HL
 145+ 61CE E1               POP HL
 146+ 61CF C3 16 61         JP GENERIC_INNER_CHECK
 147+ 61D2              ; ************************************************************************************************
 148+ 61D2
 149+ 61D2              ; ************************************************************************************************
 150+ 61D2              ; function tries to find rectangle overlap and returns an index if found
 151+ 61D2              ; input BLIT_STRUCT data
 152+ 61D2              ;  +00 x coordinate
 153+ 61D2              ;  +02 y coordinate
 154+ 61D2              ;  +04 width
 155+ 61D2              ;  +06 height
 156+ 61D2              ;  +08 number of items in a list, described under RECTANGLE_OVERLAP_CHECK
 157+ 61D2              ;  +09 pointer to first element of R%(7,n)
 158+ 61D2              ;  +11 pointer to INT result variable
 159+ 61D2              ; returns CF=1 if not overlapping
 160+ 61D2              ; returns A=list index and CF=0 if overlapping
 161+ 61D2              FIND_OVERLAP:
 162+ 61D2 3A B7 62         LD A,(BLIT_STRUCT+8)
 163+ 61D5 47               LD B,A
 164+ 61D6 DD 2A B8 62      LD IX,(BLIT_STRUCT+9)
 165+ 61DA              .L1:
 166+ 61DA C5               PUSH BC
 167+ 61DB                  ; check active flag
 168+ 61DB DD 7E 00         LD A,(IX)
 169+ 61DE DD B6 01         OR (IX+1)
 170+ 61E1 28 18            JR Z,.NEXT
 171+ 61E3                  ; check type
 172+ 61E3 DD 7E 0E         LD A,(IX+14)
 173+ 61E6 DD B6 0F         OR (IX+15)
 174+ 61E9 20 1A            JR NZ,.L2
 175+ 61EB DD E5            PUSH IX
 176+ 61ED FD E1            POP IY
 177+ 61EF              .L3:
 178+ 61EF CD 2E 61         CALL RECTANGLE_OVERLAP_CHECK
 179+ 61F2 38 07            JR C,.NEXT
 180+ 61F4                  ; found
 181+ 61F4 C1               POP BC
 182+ 61F5 3A B7 62         LD A,(BLIT_STRUCT+8)
 183+ 61F8 90               SUB B
 184+ 61F9 A7               AND A
 185+ 61FA C9               RET
 186+ 61FB              .NEXT:
 187+ 61FB 11 10 00         LD DE,16
 188+ 61FE DD 19            ADD IX,DE
 189+ 6200 C1               POP BC
 190+ 6201 10 D7            DJNZ .L1
 191+ 6203 37               SCF
 192+ 6204 C9               RET
 193+ 6205              .L2:
 194+ 6205                  ; sprite, need to build a temporary data struct since x and y values are inversed
 195+ 6205                  ; at BLIT_STRUCT+13
 196+ 6205 DD 7E 02         LD A,(IX+2) ; sprite ID
 197+ 6208 CD 85 4D         CALL GETnthSPRATTR
 198+ 620B FD 21 BA 62      LD IY,BLIT_STRUCT+11
 199+ 620F 7E               LD A,(HL)
 200+ 6210 FD 77 04         LD (IY+4),A
 201+ 6213 23               INC HL
 202+ 6214 7E               LD A,(HL)
 203+ 6215 FD 77 05         LD (IY+5),A
 204+ 6218 23               INC HL
 205+ 6219 7E               LD A,(HL)
 206+ 621A FD 77 02         LD (IY+2),A
 207+ 621D 23               INC HL
 208+ 621E 7E               LD A,(HL)
 209+ 621F FD 77 03         LD (IY+3),A
 210+ 6222 18 CB            JR .L3
 211+ 6224              ; ************************************************************************************************
 212+ 6224
 213+ 6224              ; ************************************************************************************************
 214+ 6224              ; function to handle CALL COLL basic extension
 215+ 6224              ; checks for collision between player and other rectangles
 216+ 6224              ; COLL ( INT result variable,
 217+ 6224              ;	     INT player x value,
 218+ 6224              ;	     INT player y value,
 219+ 6224              ;	     INT player width,
 220+ 6224              ;	     INT player height,
 221+ 6224              ;	     INT number of items in a list,
 222+ 6224              ;		 INT[6][n] rectangle struct )
 223+ 6224              ; will fill result variable with index or -1 if no collision
 224+ 6224              ; rectangle struct described under RECTANGLE_OVERLAP_CHECK
 225+ 6224              COLL:
 226+ 6224              	; opening (
 227+ 6224 CD BD 65     	CALL CHKCHAR
 228+ 6227 28           	DB '('
 229+ 6228              	; get address of result variable
 230+ 6228 DD 21 A4 5E  	LD IX, PTRGET
 231+ 622C CD 59 01     	CALL CALBAS
 232+ 622F ED 53 BA 62  	LD (BLIT_STRUCT+11),DE
 233+ 6233              	; comma
 234+ 6233 CD BD 65     	CALL CHKCHAR
 235+ 6236 2C           	DB ','
 236+ 6237              	; get x
 237+ 6237 DD 21 2F 54  	LD IX, FRMQNT
 238+ 623B CD 59 01     	CALL CALBAS
 239+ 623E ED 53 AF 62  	LD (BLIT_STRUCT+0),DE
 240+ 6242              	; comma
 241+ 6242 CD BD 65     	CALL CHKCHAR
 242+ 6245 2C           	DB ','
 243+ 6246              	; get y
 244+ 6246 DD 21 2F 54  	LD IX, FRMQNT
 245+ 624A CD 59 01     	CALL CALBAS
 246+ 624D ED 53 B1 62  	LD (BLIT_STRUCT+2),DE
 247+ 6251              	; comma
 248+ 6251 CD BD 65     	CALL CHKCHAR
 249+ 6254 2C           	DB ','
 250+ 6255              	; get width
 251+ 6255 DD 21 2F 54  	LD IX, FRMQNT
 252+ 6259 CD 59 01     	CALL CALBAS
 253+ 625C ED 53 B3 62  	LD (BLIT_STRUCT+4),DE
 254+ 6260              	; comma
 255+ 6260 CD BD 65     	CALL CHKCHAR
 256+ 6263 2C           	DB ','
 257+ 6264              	; get height
 258+ 6264 DD 21 2F 54  	LD IX, FRMQNT
 259+ 6268 CD 59 01     	CALL CALBAS
 260+ 626B ED 53 B5 62  	LD (BLIT_STRUCT+6),DE
 261+ 626F              	; comma
 262+ 626F CD BD 65     	CALL CHKCHAR
 263+ 6272 2C           	DB ','
 264+ 6273              	; get number of items in a list
 265+ 6273 DD 21 1C 52  	LD IX, GETBYT
 266+ 6277 CD 59 01     	CALL CALBAS
 267+ 627A 32 B7 62     	LD (BLIT_STRUCT+8),A
 268+ 627D              	; comma
 269+ 627D CD BD 65     	CALL CHKCHAR
 270+ 6280 2C           	DB ','
 271+ 6281              	; get address of rectangle structure array DIM R%(7,n)
 272+ 6281 3A B7 62     	LD A,(BLIT_STRUCT+8)
 273+ 6284 5F               LD E,A
 274+ 6285 3E 02            LD A,2
 275+ 6287 47           	LD B,A
 276+ 6288 16 07        	LD D,7
 277+ 628A CD EA 65     	CALL GET_BASIC_ARRAY_DATA_POINTER
 278+ 628D ED 43 B8 62  	LD (BLIT_STRUCT+9),BC
 279+ 6291              	; ending )
 280+ 6291 CD BD 65     	CALL CHKCHAR
 281+ 6294 29           	DB ')'
 282+ 6295
 283+ 6295 E5               PUSH HL
 284+ 6296 CD D2 61         CALL FIND_OVERLAP
 285+ 6299 2A BA 62         LD HL,(BLIT_STRUCT+11)
 286+ 629C 38 06            JR C,.NOTFOUND
 287+ 629E 77               LD (HL),A
 288+ 629F 23               INC HL
 289+ 62A0 36 00            LD (HL),0
 290+ 62A2 E1               POP HL
 291+ 62A3 C9               RET
 292+ 62A4              .NOTFOUND:
 293+ 62A4 36 FF            LD (HL),#FF
 294+ 62A6 23               INC HL
 295+ 62A7 36 FF            LD (HL),#FF
 296+ 62A9 E1               POP HL
 297+ 62AA C9               RET
 298+ 62AB              ; ************************************************************************************************
 299+ 62AB
# file closed: asm\COLLISION.asm
 156  62AB               ENDIF
 157  62AB
 158  62AB              ; temp variables for BLIT, TILE functions
 159  62AB               IF (BLIT_CMDS + TILE_CMDS + BOX_CMDS + SPRITE_CMDS + ANIM_CMDS + COLL_CMD > 0)
 160  62AB              BLIT_TMP:
 161  62AB              TILETMP1:
 162  62AB              BLIT_TMP1:
 163  62AB 00 00         DW 0
 164  62AD              TILETMP2:
 165  62AD              BLIT_TMP2:
 166  62AD 00 00         DW 0
 167  62AF                IFDEF CMDS_WITH_PARAMETERS
 168  62AF              BLIT_STRUCT:
 169  62AF 00 00 00...   DS 17
 170  62B3                ENDIF
 171  62B3               ENDIF
 172  62C0
 173  62C0               IF (VRAM_CMDS + TILE_CMDS + BOX_CMDS + SPRITE_CMDS + ANIM_CMDS > 0)
 174  62C0              VRAM_UPDATE_IN_PROGRESS:
 175  62C0 00            DB 0
 176  62C1               ENDIF
 177  62C1
 178  62C1              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 179  62C1              ; per starting letter, if no commands with this letter, NULL value
 180  62C1              CMDS:
 181  62C1               IF (ANIM_CMDS == 1)
 182  62C1 00 64        	DW CMDS_A ;
 183  62C3               ELSE
 184  62C3 ~                DW 0 ; A
 185  62C3               ENDIF
 186  62C3               IF (BLIT_CMDS + BOX_CMDS > 0)
 187  62C3 CB 63            DW CMDS_B ; B
 188  62C5               ELSE
 189  62C5 ~            	DW 0
 190  62C5               ENDIF
 191  62C5               IF (COLL_CMD == 1)
 192  62C5 8E 64        	DW CMDS_C ;
 193  62C7               ELSE
 194  62C7 ~                DW 0 ; C
 195  62C7               ENDIF
 196  62C7 00 00            DW 0 ; D
 197  62C9 00 00            DW 0 ; E
 198  62CB               IF (VRAM_CMDS + RAM_CMDS > 0)
 199  62CB 42 63            DW CMDS_F; F
 200  62CD               ELSE
 201  62CD ~            	DW 0
 202  62CD               ENDIF
 203  62CD               IF (GENCAL_CMD > 0)
 204  62CD 55 63            DW CMDS_G; G
 205  62CF               ELSE
 206  62CF ~            	DW 0
 207  62CF               ENDIF
 208  62CF 00 00            DW 0 ; H
 209  62D1 00 00            DW 0 ; I
 210  62D3 00 00            DW 0 ; J
 211  62D5 00 00            DW 0 ; K
 212  62D7 00 00            DW 0 ; L
 213  62D9               IF (VRAM_CMDS + RAM_CMDS + ANIM_CMDS > 0)
 214  62D9 F5 62            DW CMDS_M ; M
 215  62DB               ELSE
 216  62DB ~            	DW 0
 217  62DB               ENDIF
 218  62DB 00 00            DW 0 ; N
 219  62DD 00 00            DW 0 ; O
 220  62DF 00 00            DW 0 ; P
 221  62E1 00 00            DW 0 ; Q
 222  62E3 00 00            DW 0 ; R
 223  62E5               IF (SOUND_CMDS + SPRITE_CMDS > 0)
 224  62E5 69 63            DW CMDS_S ; S
 225  62E7               ELSE
 226  62E7 ~            	DW 0
 227  62E7               ENDIF
 228  62E7               IF (TILE_CMDS > 0)
 229  62E7 EB 63            DW CMDS_T ; T
 230  62E9               ELSE
 231  62E9 ~            	DW 0
 232  62E9               ENDIF
 233  62E9 00 00            DW 0 ; U
 234  62EB               IF (VRAM_CMDS > 0)
 235  62EB 5F 63            DW CMDS_V ; V
 236  62ED               ELSE
 237  62ED ~            	DW 0
 238  62ED               ENDIF
 239  62ED 00 00            DW 0 ; W
 240  62EF 00 00            DW 0 ; X
 241  62F1 00 00            DW 0 ; Y
 242  62F3 00 00            DW 0 ; Z
 243  62F5
 244  62F5              CMDS_M:
 245  62F5               IF (VRAM_CMDS == 1)
 246  62F5 4D 45 4D 56      DB "MEMVRM", 0
 246  62F9 52 4D 00
 247  62FC 5B 5A            DW MEMVRM
 248  62FE               ENDIF
 249  62FE               IF (RAM_CMDS == 1)
 250  62FE 4D 45 4D 43  	DB "MEMCPY", 0
 250  6302 50 59 00
 251  6305 90 58        	DW MEMCPY
 252  6307               ENDIF
 253  6307               IF (ANIM_CMDS == 1)
 254  6307 4D 41 58 41  	DB "MAXANIMITEMS",0
 254  630B 4E 49 4D 49
 254  630F 54 45 4D 53
 254  6313 00
 255  6314 1A 50        	DW MAXANIMITEMS
 256  6316 4D 41 58 41  	DB "MAXANIMDEFS",0
 256  631A 4E 49 4D 44
 256  631E 45 46 53 00
 257  6322 A0 51        	DW MAXANIMDEFS
 258  6324 4D 41 58 41  	DB "MAXANIMSPRS",0
 258  6328 4E 49 4D 53
 258  632C 50 52 53 00
 259  6330 36 52        	DW MAXANIMSPRS
 260  6332 4D 41 58 41     DB "MAXAUTOSGAMS",0
 260  6336 55 54 4F 53
 260  633A 47 41 4D 53
 260  633E 00
 261  633F 7E 53           DW MAXAUTOSGAMS
 262  6341               ENDIF
 263  6341               IF (VRAM_CMDS + RAM_CMDS + ANIM_CMDS > 0)
 264  6341 00           	DB 0
 265  6342               ENDIF
 266  6342              CMDS_F:
 267  6342               IF (VRAM_CMDS == 1)
 268  6342 46 49 4C 56      DB "FILVRM", 0
 268  6346 52 4D 00
 269  6349 0C 5A            DW FILVRM
 270  634B               ENDIF
 271  634B               IF (RAM_CMDS == 1)
 272  634B 46 49 4C 52      DB "FILRAM", 0
 272  634F 41 4D 00
 273  6352 D4 58            DW FILRAM
 274  6354               ENDIF
 275  6354               IF (VRAM_CMDS + RAM_CMDS > 0)
 276  6354 00               DB 0
 277  6355               ENDIF
 278  6355              CMDS_G:
 279  6355               IF (GENCAL_CMD == 1)
 280  6355 47 45 4E 43      DB "GENCAL", 0
 280  6359 41 4C 00
 281  635C 3B 5B            DW GENCAL
 282  635E               ENDIF
 283  635E               IF (GENCAL_CMD > 0)
 284  635E 00           	DB	0
 285  635F               ENDIF
 286  635F              CMDS_V:
 287  635F               IF (VRAM_CMDS == 1)
 288  635F 56 52 4D 4D  	DB "VRMMEM", 0
 288  6363 45 4D 00
 289  6366 D9 5A        	DW VRMMEM
 290  6368               ENDIF
 291  6368               IF (VRAM_CMDS > 0)
 292  6368 00           	DB 0
 293  6369               ENDIF
 294  6369              CMDS_S:
 295  6369               IF (SPRITE_CMDS + ANIM_CMDS > 0)
 296  6369 53 47 41 4D      DB "SGAM",0
 296  636D 00
 297  636E FB 56            DW SGAM
 298  6370               ENDIF
 299  6370               IF (SPRITE_CMDS == 1)
 300  6370 53 50 52 53   	DB "SPRSET", 0
 300  6374 45 54 00
 301  6377 A2 4E        	DW SPRSET
 302  6379 53 50 52 47  	DB "SPRGRPMOV", 0
 302  637D 52 50 4D 4F
 302  6381 56 00
 303  6383 55 4F        	DW SPRGRPMOV
 304  6385               ENDIF
 305  6385               IF (SOUND_CMDS == 1)
 306  6385 53 4E 44 53  	DB "SNDSFX", 0
 306  6389 46 58 00
 307  638C B2 59        	DW SNDSFX
 308  638E 53 4E 44 50  	DB "SNDPLYON", 0
 308  6392 4C 59 4F 4E
 308  6396 00
 309  6397 7C 59        	DW SNDPLYON
 310  6399 53 4E 44 50  	DB "SNDPLYOFF", 0
 310  639D 4C 59 4F 46
 310  63A1 46 00
 311  63A3 8F 59        	DW SNDPLYOFF
 312  63A5 53 4E 44 50  	DB "SNDPLYINI", 0
 312  63A9 4C 59 49 4E
 312  63AD 49 00
 313  63AF 32 59        	DW SNDPLYINIT
 314  63B1               ENDIF
 315  63B1               IF (SPRITE_CMDS == 1)
 316  63B1 53 50 52 45  	DB "SPRENABLE", 0
 316  63B5 4E 41 42 4C
 316  63B9 45 00
 317  63BB 5D 4E        	DW SPRENABLE
 318  63BD 53 50 52 44  	DB "SPRDISABLE", 0
 318  63C1 49 53 41 42
 318  63C5 4C 45 00
 319  63C8 9D 4E        	DW SPRDISABLE
 320  63CA               ENDIF
 321  63CA               IF (SOUND_CMDS + SPRITE_CMDS + ANIM_CMDS > 0)
 322  63CA 00           	DB 0
 323  63CB               ENDIF
 324  63CB              CMDS_B:
 325  63CB               IF (BLIT_CMDS == 1)
 326  63CB 42 4C 49 54  	DB "BLIT", 0
 326  63CF 00
 327  63D0 0E 5E        	DW BLIT
 328  63D2               ENDIF
 329  63D2               IF (BOX_CMDS == 1)
 330  63D2 42 4F 58 4D  	DB "BOXMEMCPY", 0
 330  63D6 45 4D 43 50
 330  63DA 59 00
 331  63DC CA 5B        	DW BOXMEMCPY
 332  63DE 42 4F 58 4D  	DB "BOXMEMVRM", 0
 332  63E2 45 4D 56 52
 332  63E6 4D 00
 333  63E8 60 5C        	DW BOXMEMVRM
 334  63EA               ENDIF
 335  63EA               IF (BLIT_CMDS + BOX_CMDS > 0)
 336  63EA 00           	DB 0
 337  63EB               ENDIF
 338  63EB              CMDS_T:
 339  63EB               IF (TILE_CMDS == 1)
 340  63EB 54 49 4C 45  	DB "TILERAM", 0
 340  63EF 52 41 4D 00
 341  63F3 53 5F        	DW TILERAM
 342  63F5 54 49 4C 45  	DB "TILEVRM", 0
 342  63F9 56 52 4D 00
 343  63FD 57 60        	DW TILEVRM
 344  63FF               ENDIF
 345  63FF               IF (TILE_CMDS > 0)
 346  63FF 00           	DB 0
 347  6400               ENDIF
 348  6400              CMDS_A:
 349  6400               IF (ANIM_CMDS == 1)
 350  6400 41 4E 49 4D     DB "ANIMSTEP",0
 350  6404 53 54 45 50
 350  6408 00
 351  6409 4F 55           DW ANIMSTEP
 352  640B 41 4E 49 4D  	DB "ANIMSTART",0
 352  640F 53 54 41 52
 352  6413 54 00
 353  6415 54 55        	DW ANIMSTART
 354  6417 41 4E 49 4D  	DB "ANIMSTOP",0
 354  641B 53 54 4F 50
 354  641F 00
 355  6420 59 55        	DW ANIMSTOP
 356  6422 41 4E 49 4D  	DB "ANIMITEMPAT",0
 356  6426 49 54 45 4D
 356  642A 50 41 54 00
 357  642E EB 50        	DW ANIMITEMPAT
 358  6430 41 4E 49 4D  	DB "ANIMITEMPTR",0
 358  6434 49 54 45 4D
 358  6438 50 54 52 00
 359  643C 4C 51        	DW ANIMITEMPTR_CMD
 360  643E 41 4E 49 4D  	DB "ANIMDEF",0
 360  6442 44 45 46 00
 361  6446 E3 51        	DW ANIMDEF
 362  6448 41 4E 49 4D  	DB "ANIMSPRITE",0
 362  644C 53 50 52 49
 362  6450 54 45 00
 363  6453 8D 52        	DW ANIMSPRITE
 364  6455 41 4E 49 4D     DB "ANIMCHAR",0
 364  6459 43 48 41 52
 364  645D 00
 365  645E 05 53           DW ANIMCHAR
 366  6460 41 55 54 4F     DB "AUTOSGAMDEF",0
 366  6464 53 47 41 4D
 366  6468 44 45 46 00
 367  646C D9 53           DW AUTOSGAMDEF
 368  646E 41 55 54 4F     DB "AUTOSGAMSTART",0
 368  6472 53 47 41 4D
 368  6476 53 54 41 52
 368  647A 54 00
 369  647C 10 55           DW AUTOSGAMSTART
 370  647E 41 55 54 4F     DB "AUTOSGAMSTOP",0
 370  6482 53 47 41 4D
 370  6486 53 54 4F 50
 370  648A 00
 371  648B 4C 55           DW AUTOSGAMSTOP
 372  648D 00           	DB 0
 373  648E               ENDIF
 374  648E              CMDS_C:
 375  648E               IF (COLL_CMD == 1)
 376  648E 43 4F 4C 4C      DB "COLL", 0
 376  6492 00
 377  6493 24 62            DW COLL
 378  6495               ENDIF
 379  6495               IF (COLL_CMD > 0)
 380  6495 00           	DB	0
 381  6496               ENDIF
 382  6496
 383  6496               IF (VRAM_CMDS + TILE_CMDS + SPRITE_CMDS > 0)
 384  6496              ; ****************************************************************************************************
 385  6496              ; function sets VRAM address
 386  6496              ; input HL=address
 387  6496              ; modifies AF
 388  6496              SETWRT_LOCAL:
 389  6496 7D           	LD	A, L
 390  6497 D3 99        	OUT	(099H), A
 391  6499 7C           	LD	A, H
 392  649A E6 3F        	AND	03FH
 393  649C F6 40        	OR	040H
 394  649E D3 99        	OUT	(099H), A
 395  64A0 C9           	RET
 396  64A1              ; ****************************************************************************************************
 397  64A1               ENDIF
 398  64A1
 399  64A1               IF (VRAM_CMDS + TILE_CMDS > 0)
 400  64A1              ; ****************************************************************************************************
 401  64A1              ; function copies data from RAM to VRAM
 402  64A1              ; input HL=address in RAM
 403  64A1              ; input B=count
 404  64A1              ; modifies AF, BC, HL
 405  64A1              BBYTECOPY:
 406  64A1 0E 98        	LD C,#98
 407  64A3              BBYTECOPY_NO_C:
 408  64A3 ED A3        	OUTI
 409  64A5 C2 A3 64     	JP	NZ, BBYTECOPY_NO_C
 410  64A8 C9           	RET
 411  64A9              ; ****************************************************************************************************
 412  64A9               ENDIF
 413  64A9
 414  64A9              ; ****************************************************************************************************
 415  64A9              ; function multiplies HL by 32
 416  64A9              HLx32:
 417  64A9 29           	ADD HL,HL
 418  64AA              ; ****************************************************************************************************
 419  64AA              ; function multiplies HL by 16
 420  64AA              HLx16:
 421  64AA 29           	ADD HL,HL
 422  64AB              ; ****************************************************************************************************
 423  64AB              ; function multiplies HL by 8
 424  64AB              HLx8:
 425  64AB 29          > ADD HL, HL
 425  64AC 29          > ADD HL, HL
 425  64AD 29          > ADD HL, HL
 426  64AE C9           	RET
 427  64AF              ; ****************************************************************************************************
 428  64AF
 429  64AF              ; ****************************************************************************************************
 430  64AF              ; function gets slot and subslot data for specific page
 431  64AF              ; input A=page (0, 1 or 2)
 432  64AF              ; output B = 0A8H register value
 433  64AF              ; output D = 0 is no subslots, 1 if yes
 434  64AF              ; output C = 0A8H value when page 3 slot equals to requested page slot
 435  64AF              ; output E = subslot value if present
 436  64AF              ; modifies AF, BC, DE, HL
 437  64AF              GET_PAGE_INFO:
 438  64AF 6F               LD L, A
 439  64B0 C6 C1            ADD A, low (EXPTBL)
 440  64B2 32 BC 64         LD (GET_PAGE_INFO_L1+1), A
 441  64B5 DB A8            IN A, (0A8H)
 442  64B7 47               LD B, A
 443  64B8 E6 3F            AND 03FH
 444  64BA 4F               LD C, A
 445  64BB              GET_PAGE_INFO_L1:
 446  64BB 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 447  64BE E6 80            AND 080H
 448  64C0 28 1B            JR Z, GET_PAGE_INFO_L2
 449  64C2                  ; expanded
 450  64C2 2D               DEC L
 451  64C3 FA E2 64         JP M, GET_PAGE_INFO_L3
 452  64C6 2D               DEC L
 453  64C7 FA E0 64         JP M, GET_PAGE_INFO_L4
 454  64CA                  ; page 2
 455  64CA 07               RLCA
 456  64CB 07               RLCA
 457  64CC              GET_PAGE_INFO_L5:
 458  64CC E6 C0            AND 0C0H
 459  64CE B1               OR C
 460  64CF D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 461  64D1 4F               LD C, A
 462  64D2 3A FF FF         LD A, (0FFFFH)
 463  64D5 2F               CPL
 464  64D6 5F               LD E, A
 465  64D7 16 01            LD D, 1
 466  64D9 78               LD A, B ; return stack
 467  64DA D3 A8            OUT (0A8H), A
 468  64DC C9               RET
 469  64DD              GET_PAGE_INFO_L2:
 470  64DD                  ; not expanded
 471  64DD 16 00            LD D, 0
 472  64DF C9               RET
 473  64E0              GET_PAGE_INFO_L4:
 474  64E0                  ; page 1
 475  64E0 0F               RRCA
 476  64E1 0F               RRCA
 477  64E2              GET_PAGE_INFO_L3:
 478  64E2                  ; page 0
 479  64E2 0F               RRCA
 480  64E3 0F               RRCA
 481  64E4 18 E6            JR GET_PAGE_INFO_L5
 482  64E6              ; ****************************************************************************************************
 483  64E6
 484  64E6              ; ****************************************************************************************************
 485  64E6              ; function returns original slot and subslot info
 486  64E6              ; input B = 0A8H register value
 487  64E6              ; input D = 0 is no subslots, 1 if yes
 488  64E6              ; input C = 0A8H value when page 3 slot equals to requested page slot
 489  64E6              ; input E = subslot value if present
 490  64E6              ; modifies AF, disables interrupts
 491  64E6              RESTORE_PAGE_INFO:
 492  64E6 7A              LD A, D
 493  64E7 B7              OR A
 494  64E8 28 08           JR Z, RESTORE_PAGE_INFO_L1
 495  64EA 79              LD A, C
 496  64EB F3           	DI
 497  64EC D3 A8           OUT (0A8H), A
 498  64EE 7B              LD A, E
 499  64EF 32 FF FF        LD (0FFFFH), A
 500  64F2              RESTORE_PAGE_INFO_L1:
 501  64F2 78              LD A, B
 502  64F3 D3 A8           OUT (0A8H), A
 503  64F5 C9              RET
 504  64F6              ; ****************************************************************************************************
 505  64F6
 506  64F6              ; *******************************************************************************************************
 507  64F6              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 508  64F6              ; INPUT:  A = SLOT ID: EXXXSSPP
 509  64F6              ; E = EXPANDED FLAG
 510  64F6              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 511  64F6              ; PP = PRIMARY SLOT NUMBER
 512  64F6              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 513  64F6              ; CHANGES: AF, BC, DE
 514  64F6
 515  64F6              LOCAL_ENASLT:
 516  64F6 CD 16 65         CALL L0353
 517  64F9 FA 03 65         JP M, L0340
 518  64FC DB A8            IN A, (0A8H)
 519  64FE A1               AND C
 520  64FF B0               OR B
 521  6500 D3 A8            OUT (0A8H), A
 522  6502 C9               RET
 523  6503              L0340:
 524  6503 E5               PUSH HL
 525  6504 CD 3B 65         CALL L0378
 526  6507 4F               LD C, A
 527  6508 06 00            LD B, 0
 528  650A 7D               LD A, L
 529  650B A4               AND H
 530  650C B2               OR D
 531  650D 21 C5 FC         LD HL, 0FCC5H
 532  6510 09               ADD HL, BC
 533  6511 77               LD (HL), A
 534  6512 E1               POP HL
 535  6513 79               LD A, C
 536  6514 18 E0            JR LOCAL_ENASLT
 537  6516              L0353:
 538  6516 F3               DI
 539  6517 F5               PUSH AF
 540  6518 7C               LD A, H
 541  6519 07               RLCA
 542  651A 07               RLCA
 543  651B E6 03            AND 3
 544  651D 5F               LD E, A
 545  651E 3E C0            LD A, 0C0H
 546  6520              L035D:
 547  6520 07               RLCA
 548  6521 07               RLCA
 549  6522 1D               DEC E
 550  6523 F2 20 65         JP P, L035D
 551  6526 5F               LD E, A
 552  6527 2F               CPL
 553  6528 4F               LD C, A
 554  6529 F1               POP AF
 555  652A F5               PUSH AF
 556  652B E6 03            AND 3
 557  652D 3C               INC A
 558  652E 47               LD B, A
 559  652F 3E AB            LD A, 0ABH
 560  6531              L036E:
 561  6531 C6 55            ADD A, 055H
 562  6533 10 FC            DJNZ L036E
 563  6535 57               LD D, A
 564  6536 A3               AND E
 565  6537 47               LD B, A
 566  6538 F1               POP AF
 567  6539 A7               AND A
 568  653A C9               RET
 569  653B              L0378:
 570  653B F5               PUSH AF
 571  653C 7A               LD A, D
 572  653D E6 C0            AND 0C0H
 573  653F 4F               LD C, A
 574  6540 F1               POP AF
 575  6541 F5               PUSH AF
 576  6542 57               LD D, A
 577  6543 DB A8            IN A, (0A8H)
 578  6545 47               LD B, A
 579  6546 E6 3F            AND 03FH
 580  6548 B1               OR C
 581  6549 D3 A8            OUT (0A8H), A
 582  654B 7A               LD A, D
 583  654C 0F               RRCA
 584  654D 0F               RRCA
 585  654E E6 03            AND 3
 586  6550 57               LD D, A
 587  6551 3E AB            LD A, 0ABH
 588  6553              L0390:
 589  6553 C6 55            ADD A, 055H
 590  6555 15               DEC D
 591  6556 F2 53 65         JP P, L0390
 592  6559 A3               AND E
 593  655A 57               LD D, A
 594  655B 7B               LD A, E
 595  655C 2F               CPL
 596  655D 67               LD H, A
 597  655E 3A FF FF         LD A, (0FFFFH)
 598  6561 2F               CPL
 599  6562 6F               LD L, A
 600  6563 A4               AND H
 601  6564 B2               OR D
 602  6565 32 FF FF         LD (0FFFFH), A
 603  6568 78               LD A, B
 604  6569 D3 A8            OUT (0A8H), A
 605  656B F1               POP AF
 606  656C E6 03            AND 3
 607  656E C9               RET
 608  656F              ; *******************************************************************************************************
 609  656F
 610  656F              ; *******************************************************************************************************
 611  656F              ; some common code to activate page 0 and place values needed to restore original page on stack
 612  656F              ; input IY=return address
 613  656F              ENABLE_PAGE0:
 614  656F AF              XOR A
 615  6570 CD AF 64        CALL GET_PAGE_INFO
 616  6573 C5              PUSH BC
 617  6574 D5              PUSH DE
 618  6575 3A 41 F3        LD A, (RAMAD0)
 619  6578 26 00           LD H, 0
 620  657A CD F6 64        CALL LOCAL_ENASLT
 621  657D FD E9        	JP (IY)
 622  657F              ; *******************************************************************************************************
 623  657F
 624  657F              ; General BASIC CALL-instruction handler
 625  657F              CALLHAND:
 626  657F FB              EI
 627  6580 E5           	PUSH HL
 628  6581 21 C1 62     	LD	HL, CMDS ; pointer table based on starting letter
 629  6584 3A 89 FD        LD A, (PROCNM)
 630  6587 D6 41           SUB 'A'
 631  6589 87              ADD A, A
 632  658A 16 00           LD D, 0
 633  658C 5F              LD E, A
 634  658D 19              ADD HL, DE
 635  658E 5E              LD E, (HL)
 636  658F 23              INC HL
 637  6590 56              LD D, (HL)
 638  6591 7A              LD A, D
 639  6592 B3              OR E
 640  6593 28 23           JR Z, .CMDNOTRECOGNIZED
 641  6595 EB              EX DE, HL
 642  6596              .CHKCMD:
 643  6596 11 89 FD     	LD	DE, PROCNM
 644  6599              .LOOP:
 645  6599 1A              LD	A,(DE)
 646  659A BE           	CP	(HL)
 647  659B 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 648  659D 13           	INC	DE
 649  659E 23           	INC	HL
 650  659F A7           	AND	A
 651  65A0 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 652  65A2 5E           	LD	E,(HL)
 653  65A3 23           	INC	HL
 654  65A4 56           	LD	D,(HL)
 655  65A5 E1           	POP	HL		; routine address
 656  65A6 CD C7 65     	CALL	GETPREVCHAR
 657  65A9 CD BB 65     	CALL	.CALLDE		; Call routine
 658  65AC A7           	AND	A
 659  65AD C9           	RET
 660  65AE
 661  65AE              .TONEXTCMD:
 662  65AE 0E FF        	LD	C,0FFH
 663  65B0 AF           	XOR	A
 664  65B1 ED B1        	CPIR			; Skip to end of instruction name
 665  65B3 23           	INC	HL
 666  65B4 23           	INC	HL		; Skip address
 667  65B5 BE           	CP	(HL)
 668  65B6 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 669  65B8              .CMDNOTRECOGNIZED:
 670  65B8 E1           	POP	HL
 671  65B9 37              SCF
 672  65BA C9           	RET
 673  65BB
 674  65BB              .CALLDE:
 675  65BB D5           	PUSH	DE
 676  65BC C9           	RET
 677  65BD
 678  65BD              ;---------------------------
 679  65BD
 680  65BD              ;GETSTRPNT:
 681  65BD              ; OUT:
 682  65BD              ; HL = String Address
 683  65BD              ; B  = Lenght
 684  65BD              ;        LD      HL,(USR)
 685  65BD              ;        LD      B,(HL)
 686  65BD              ;        INC     HL
 687  65BD              ;        LD      E,(HL)
 688  65BD              ;        INC     HL
 689  65BD              ;        LD      D,(HL)
 690  65BD              ;        EX      DE,HL
 691  65BD              ;        RET
 692  65BD
 693  65BD              ;EVALTXTPARAM:
 694  65BD              ;	CALL	CHKCHAR
 695  65BD              ;	DEFB	"("             ; Check for (
 696  65BD              ;	LD	IX,FRMEVL
 697  65BD              ;	CALL	CALBAS		; Evaluate expression
 698  65BD              ;       LD      A,(VALTYP)
 699  65BD              ;        CP      3               ; Text type?
 700  65BD              ;        JP      NZ,TYPE_MISMATCH
 701  65BD              ;        PUSH	HL
 702  65BD              ;        LD	IX,FRESTR         ; Free the temporary string
 703  65BD              ;        CALL	CALBAS
 704  65BD              ;        POP	HL
 705  65BD              ;	CALL	CHKCHAR
 706  65BD              ;	DEFB	")"             ; Check for )
 707  65BD              ;        RET
 708  65BD
 709  65BD
 710  65BD              CHKCHAR:
 711  65BD CD C7 65     	CALL	GETPREVCHAR	; Get previous basic char
 712  65C0 E3           	EX	(SP),HL
 713  65C1 BE           	CP	(HL) 	        ; Check if good char
 714  65C2 20 1D        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 715  65C4 23           	INC	HL
 716  65C5 E3           	EX	(SP),HL
 717  65C6 23           	INC	HL		; Get next basic char
 718  65C7
 719  65C7              GETPREVCHAR:
 720  65C7 2B           	DEC HL
 721  65C8 DD 21 66 46  	LD	IX,CHRGTR
 722  65CC CD 59 01     	CALL CALBAS
 723  65CF FB              EI
 724  65D0 C9              RET
 725  65D1
 726  65D1
 727  65D1              TYPE_MISMATCH:
 728  65D1 1E 0D            LD E, 13 ; Type mismatch
 729  65D3 18 0E            JR THROW_ERROR
 730  65D5              SUBSCRIPT_OUT_OF_RANGE:
 731  65D5 1E 09            LD E,9 ; subscript out of range
 732  65D7 18 0A        	JR THROW_ERROR
 733  65D9              OVERFLOW:
 734  65D9 1E 06        	LD E,6
 735  65DB 18 06        	JR THROW_ERROR
 736  65DD              ILLEGAL_FUNCTION:
 737  65DD 1E 05            LD E, 5 ; illegal function call
 738  65DF 18 02            JR THROW_ERROR
 739  65E1              SYNTAX_ERROR:
 740  65E1 1E 02            LD E, 2 ; Syntax error
 741  65E3              THROW_ERROR:
 742  65E3 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 743  65E7 C3 59 01     	JP	CALBAS
 744  65EA
 745  65EA              ;---------------------------
 746  65EA
 747  65EA              ; *******************************************************************************************************
 748  65EA              ; helper function to get pointer to BASIC array data
 749  65EA              ; input A=data type (2=INT,4=SINGLE,8=DOUBLE)
 750  65EA              ; input B=dimensions (1 or 2)
 751  65EA              ; input D=minimal first dimension
 752  65EA              ; input E=minimal second dimension, if applicable
 753  65EA              ; returns BC=pointer to first data element
 754  65EA              ; throws BASIC error if invalid type
 755  65EA              GET_BASIC_ARRAY_DATA_POINTER:
 756  65EA D5           	PUSH DE
 757  65EB C5           	PUSH BC
 758  65EC F5           	PUSH AF
 759  65ED 3E 01           LD A,1
 760  65EF 32 A5 F6        LD (SUBFLG),A ; search for arrays only
 761  65F2 DD 21 A4 5E  	LD IX, PTRGET
 762  65F6 CD 59 01     	CALL CALBAS
 763  65F9 AF              XOR A
 764  65FA 32 A5 F6        LD (SUBFLG),A ; if not reset will cause syntax errors
 765  65FD 3A 63 F6     	LD A,(VALTYP)
 766  6600 D1           	POP DE ; required type
 767  6601 BA           	CP D
 768  6602 C2 D1 65     	JP NZ,TYPE_MISMATCH
 769  6605 0A           	LD A,(BC)
 770  6606 03           	INC BC
 771  6607 D1           	POP DE ; required number of dimensions
 772  6608 BA           	CP D
 773  6609 C2 D1 65     	JP NZ,TYPE_MISMATCH
 774  660C D1           	POP DE ; required minimal array dimensions
 775  660D 3D           	DEC A
 776  660E 28 07        	JR Z,.ONE_DIMENSION
 777  6610              	; 2-dimension array
 778  6610 0A           	LD A,(BC)
 779  6611 03          > INC BC
 779  6612 03          > INC BC
 780  6613 BB           	CP E
 781  6614 DA D5 65     	JP C,SUBSCRIPT_OUT_OF_RANGE
 782  6617              .ONE_DIMENSION:
 783  6617 0A           	LD A,(BC)
 784  6618 03          > INC BC
 784  6619 03          > INC BC
 785  661A BA           	CP D
 786  661B DA D5 65     	JP C,SUBSCRIPT_OUT_OF_RANGE
 787  661E C9           	RET
 788  661F              ; *******************************************************************************************************
 789  661F
 790  661F              EXT_END:
 791  661F
# file closed: asm\main.asm
