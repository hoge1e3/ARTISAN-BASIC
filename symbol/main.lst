# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; INCLUDE "system_variables.inc"
   4  4000              ; INCLUDE "system_hooks.inc"
   5  4000              ; INCLUDE "bios_calls.inc"
   6  4000
   7  4000              CHPUT   EQU     #A2
   8  4000              CALBAS	EQU		#159
   9  4000              ERRHAND EQU     #406F
  10  4000              FRMEVL  EQU     #4C64
  11  4000              FRESTR	EQU		#67D0
  12  4000              ; FRMQNT = formula quantificator
  13  4000              ; input HL=pointer to current program expression
  14  4000              ; output HL=next address
  15  4000              ; output DE=integer datum
  16  4000              FRMQNT	EQU		#542F
  17  4000              ; GETBYT = get byte parameter
  18  4000              ; input HL=pointer to current program expression
  19  4000              ; output HL=next address
  20  4000              ; output A=E=byte read
  21  4000              GETBYT	EQU		#521C
  22  4000              CHRGTR  EQU     #4666
  23  4000              SYNCHR	EQU		#558C
  24  4000              VALTYP  EQU     #F663
  25  4000              USR     EQU     #F7F8
  26  4000              PROCNM	EQU		#FD89
  27  4000              BIOS_FILVRM  EQU     #56
  28  4000              CLIKSW	EQU		#F3DB
  29  4000              ATRBAS	EQU		#F928
  30  4000
  31  4000              RAMAD0	EQU	0F341h	; Main-RAM Slot (00000h~03FFFh)
  32  4000              RAMAD1	EQU	0F342h	; Main-RAM Slot (04000h~07FFFh)
  33  4000              RAMAD2	EQU	0F343h	; Main-RAM Slot (08000h~0BFFFh)
  34  4000              RAMAD3	EQU	0F344h	; Main-RAM Slot (0C000h~0FFFFh)
  35  4000              EXPTBL	EQU #FCC1
  36  4000              SCRMOD	EQU #FCAF ; current screen mode
  37  4000
  38  4000              ; BASIC error codes
  39  4000              ;01 NEXT without FOR
  40  4000              ;02 Syntax error
  41  4000              ;03 RETURN without GOSUB
  42  4000              ;04 Out of DATA
  43  4000              ;05 Illegal function call
  44  4000              ;06 Overflow
  45  4000              ;07 Out of memory
  46  4000              ;08 Undefined line number
  47  4000              ;09 Subscript out of range
  48  4000              ;10 Redimensioned array
  49  4000              ;11 Division by zero
  50  4000              ;12 Illegal direct
  51  4000              ;13 Type mismatch
  52  4000              ;14 Out of string space
  53  4000              ;15 String too long
  54  4000              ;16 String formula too complex
  55  4000              ;17 Can't CONTINUE
  56  4000              ;18 Undefined user function
  57  4000              ;19 Device I/O error
  58  4000              ;20 Verify error
  59  4000              ;21 No RESUME
  60  4000              ;22 RESUME without error
  61  4000              ;23 Unprintable error
  62  4000              ;24 Missing operand
  63  4000              ;25 Line buffer overflow
  64  4000              ;50 FIELD overflow
  65  4000              ;51 Internal error
  66  4000              ;52 Bad file number
  67  4000              ;53 File not found
  68  4000              ;54 File already open
  69  4000              ;55 Input past end
  70  4000              ;56 Bad file name
  71  4000              ;57 Direct statement in file
  72  4000              ;58 Sequential I/O only
  73  4000              ;59 File not OPEN
  74  4000
  75  4000
  76  4000               ; simulate cartridge with BASIC extension
  77  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  77  4004 8D 4F 00 00
  77  4008 00 00 00 00
  77  400C 00 00 00 00
  78  4010
  79  4010              ; this location #400A stores last location used by basic extension
  80  4010              ; free memory after that point
  81  4010 2D 58         DW EXT_END
  82  4012
  83  4012              ; binary included AKG player compiled at #4012
  84  4012               INCBIN "bin/AKG.bin"
  85  4CEE               INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CEE              MAIN_PLAYER_START EQU 04012H
   2+ 4CEE              PLY_AKG_START EQU 04012H
   3+ 4CEE              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401BH
   4+ 4CEE              PLY_AKG_INITSOUNDEFFECTS EQU 0401BH
   5+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 0401FH
   6+ 4CEE              PLY_AKG_PLAYSOUNDEFFECT EQU 0401FH
   7+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04020H
   8+ 4CEE              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04020H
   9+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04047H
  10+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04047H
  11+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04055H
  12+ 4CEE              PLY_AKG_PSES_PLAY EQU 0408EH
  13+ 4CEE              PLY_AKG_PSES_READFIRSTBYTE EQU 04097H
  14+ 4CEE              PLY_AKG_PSES_S_ENDORLOOP EQU 040AFH
  15+ 4CEE              PLY_AKG_PSES_S_LOOP EQU 040BAH
  16+ 4CEE              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C0H
  17+ 4CEE              PLY_AKG_PSES_NOTREACHED EQU 040D3H
  18+ 4CEE              PLY_AKG_PSES_HARDWAREONLY EQU 040D7H
  19+ 4CEE              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040DEH
  20+ 4CEE              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F0H
  21+ 4CEE              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FAH
  22+ 4CEE              PLY_AKG_PSES_H_AFTERRETRIG EQU 04104H
  23+ 4CEE              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 04118H
  24+ 4CEE              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411DH
  25+ 4CEE              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04125H
  26+ 4CEE              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04130H
  27+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413CH
  28+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 0413EH
  29+ 4CEE              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04144H
  30+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 04148H
  31+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 04148H
  32+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414AH
  33+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414AH
  34+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414AH
  35+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414BH
  36+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414CH
  37+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04150H
  38+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04150H
  39+ 4CEE              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04150H
  40+ 4CEE              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 04158H
  41+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04160H
  42+ 4CEE              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04160H
  43+ 4CEE              PLY_AKG_INIT EQU 04160H
  44+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04160H
  45+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 0418EH
  46+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A2H
  47+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B4H
  48+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D3H
  49+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E0H
  50+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL EQU 041E6H
  51+ 4CEE              PLY_AKG_INITTABLE0 EQU 041E9H
  52+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041E9H
  53+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04203H
  54+ 4CEE              PLY_AKG_INITTABLE0_END EQU 04203H
  55+ 4CEE              PLY_AKG_INITTABLE1 EQU 04203H
  56+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04203H
  57+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04207H
  58+ 4CEE              PLY_AKG_INITTABLE1_END EQU 04207H
  59+ 4CEE              PLY_AKG_INITTABLEORA EQU 04207H
  60+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04207H
  61+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 0421FH
  62+ 4CEE              PLY_AKG_INITTABLEORA_END EQU 0421FH
  63+ 4CEE              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 0421FH
  64+ 4CEE              PLY_AKG_STOP EQU 0421FH
  65+ 4CEE              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04231H
  66+ 4CEE              PLY_AKG_PLAY EQU 04231H
  67+ 4CEE              PLY_AKG_TICKDECREASINGCOUNTER EQU 04239H
  68+ 4CEE              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 0423FH
  69+ 4CEE              PLY_AKG_READLINKER EQU 04244H
  70+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04244H
  71+ 4CEE              PLY_AKG_READLINKER_PTLINKER EQU 04244H
  72+ 4CEE              PLY_AKG_READLINKER_NOLOOP EQU 0424FH
  73+ 4CEE              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 04288H
  74+ 4CEE              PLY_AKG_READLINE EQU 0428BH
  75+ 4CEE              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428BH
  76+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04291H
  77+ 4CEE              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04291H
  78+ 4CEE              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 0429EH
  79+ 4CEE              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A2H
  80+ 4CEE              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A5H
  81+ 4CEE              PLY_AKG_SPEEDTRACK_END EQU 042A8H
  82+ 4CEE              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042A8H
  83+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042AEH
  84+ 4CEE              PLY_AKG_EVENTTRACK_PTTRACK EQU 042AEH
  85+ 4CEE              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BBH
  86+ 4CEE              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042BFH
  87+ 4CEE              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C2H
  88+ 4CEE              PLY_AKG_EVENTTRACK_END EQU 042C5H
  89+ 4CEE              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C5H
  90+ 4CEE              PLY_AKG_CHANNEL1_READTRACK EQU 042D1H
  91+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D1H
  92+ 4CEE              PLY_AKG_CHANNEL1_PTTRACK EQU 042D1H
  93+ 4CEE              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042ECH
  94+ 4CEE              PLY_AKG_CHANNEL1_WAIT EQU 042F7H
  95+ 4CEE              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 042FEH
  96+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 042FEH
  97+ 4CEE              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 042FEH
  98+ 4CEE              PLY_AKG_CHANNEL1_NOTE EQU 04307H
  99+ 4CEE              PLY_AKG_BASENOTEINDEX EQU 04307H
 100+ 4CEE              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 04309H
 101+ 4CEE              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 04309H
 102+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 04319H
 103+ 4CEE              PLY_AKG_INSTRUMENTSTABLE EQU 04319H
 104+ 4CEE              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432BH
 105+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433BH
 106+ 4CEE              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04363H
 107+ 4CEE              PLY_AKG_CHANNEL1_READCELLEND EQU 04366H
 108+ 4CEE              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04366H
 109+ 4CEE              PLY_AKG_CHANNEL2_READTRACK EQU 04372H
 110+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04372H
 111+ 4CEE              PLY_AKG_CHANNEL2_PTTRACK EQU 04372H
 112+ 4CEE              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438DH
 113+ 4CEE              PLY_AKG_CHANNEL2_WAIT EQU 04398H
 114+ 4CEE              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 0439FH
 115+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 0439FH
 116+ 4CEE              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 0439FH
 117+ 4CEE              PLY_AKG_CHANNEL2_NOTE EQU 043A8H
 118+ 4CEE              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043ADH
 119+ 4CEE              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043ADH
 120+ 4CEE              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043CFH
 121+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043DFH
 122+ 4CEE              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04407H
 123+ 4CEE              PLY_AKG_CHANNEL2_READCELLEND EQU 0440AH
 124+ 4CEE              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440AH
 125+ 4CEE              PLY_AKG_CHANNEL3_READTRACK EQU 04416H
 126+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04416H
 127+ 4CEE              PLY_AKG_CHANNEL3_PTTRACK EQU 04416H
 128+ 4CEE              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04431H
 129+ 4CEE              PLY_AKG_CHANNEL3_WAIT EQU 0443CH
 130+ 4CEE              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04443H
 131+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04443H
 132+ 4CEE              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04443H
 133+ 4CEE              PLY_AKG_CHANNEL3_NOTE EQU 0444CH
 134+ 4CEE              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04451H
 135+ 4CEE              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04451H
 136+ 4CEE              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04473H
 137+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04483H
 138+ 4CEE              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ABH
 139+ 4CEE              PLY_AKG_CHANNEL3_READCELLEND EQU 044AEH
 140+ 4CEE              PLY_AKG_CURRENTSPEED EQU 044AEH
 141+ 4CEE              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B0H
 142+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B3H
 143+ 4CEE              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B3H
 144+ 4CEE              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B6H
 145+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044B9H
 146+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044B9H
 147+ 4CEE              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C5H
 148+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CCH
 149+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044CFH
 150+ 4CEE              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D5H
 151+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044D8H
 152+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044D8H
 153+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E6H
 154+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EBH
 155+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F6H
 156+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044F9H
 157+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044F9H
 158+ 4CEE              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FCH
 159+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 044FFH
 160+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE EQU 044FFH
 161+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 04508H
 162+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04512H
 163+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04515H
 164+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04515H
 165+ 4CEE              PLY_AKG_CHANNEL1_PITCH EQU 04515H
 166+ 4CEE              PLY_AKG_CHANNEL1_ISPITCH EQU 04518H
 167+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451DH
 168+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451DH
 169+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04521H
 170+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04523H
 171+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04525H
 172+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452CH
 173+ 4CEE              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452DH
 174+ 4CEE              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04530H
 175+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04530H
 176+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454CH
 177+ 4CEE              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454CH
 178+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 04559H
 179+ 4CEE              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455DH
 180+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456DH
 181+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456DH
 182+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 0456EH
 183+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 0456FH
 184+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04571H
 185+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04571H
 186+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04571H
 187+ 4CEE              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04572H
 188+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04573H
 189+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04575H
 190+ 4CEE              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04575H
 191+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04575H
 192+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04575H
 193+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04575H
 194+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_END EQU 04578H
 195+ 4CEE              PLY_AKG_CHANNEL1_PITCH_END EQU 0457AH
 196+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04582H
 197+ 4CEE              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04582H
 198+ 4CEE              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04585H
 199+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 04588H
 200+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 04588H
 201+ 4CEE              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04594H
 202+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459BH
 203+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 0459EH
 204+ 4CEE              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A4H
 205+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A7H
 206+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A7H
 207+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B5H
 208+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BAH
 209+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C5H
 210+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045C8H
 211+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045C8H
 212+ 4CEE              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CBH
 213+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045CEH
 214+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045CEH
 215+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D7H
 216+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E1H
 217+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E4H
 218+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E4H
 219+ 4CEE              PLY_AKG_CHANNEL2_PITCH EQU 045E4H
 220+ 4CEE              PLY_AKG_CHANNEL2_ISPITCH EQU 045E7H
 221+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045ECH
 222+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045ECH
 223+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F0H
 224+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F2H
 225+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F4H
 226+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FBH
 227+ 4CEE              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FCH
 228+ 4CEE              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 045FFH
 229+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 045FFH
 230+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461BH
 231+ 4CEE              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461BH
 232+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 04628H
 233+ 4CEE              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462CH
 234+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463CH
 235+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463CH
 236+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463DH
 237+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 0463EH
 238+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04640H
 239+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04640H
 240+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04640H
 241+ 4CEE              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04641H
 242+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04642H
 243+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04644H
 244+ 4CEE              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04644H
 245+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04644H
 246+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04644H
 247+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04644H
 248+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_END EQU 04647H
 249+ 4CEE              PLY_AKG_CHANNEL2_PITCH_END EQU 04649H
 250+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04651H
 251+ 4CEE              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04651H
 252+ 4CEE              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04654H
 253+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04657H
 254+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04657H
 255+ 4CEE              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04663H
 256+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466AH
 257+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466DH
 258+ 4CEE              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04673H
 259+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04676H
 260+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04676H
 261+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04684H
 262+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 04689H
 263+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04694H
 264+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04697H
 265+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04697H
 266+ 4CEE              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469AH
 267+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469DH
 268+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469DH
 269+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A6H
 270+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B0H
 271+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B3H
 272+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B3H
 273+ 4CEE              PLY_AKG_CHANNEL3_PITCH EQU 046B3H
 274+ 4CEE              PLY_AKG_CHANNEL3_ISPITCH EQU 046B6H
 275+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BBH
 276+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BBH
 277+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046BFH
 278+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C1H
 279+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C3H
 280+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CAH
 281+ 4CEE              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CBH
 282+ 4CEE              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046CEH
 283+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046CEH
 284+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046EAH
 285+ 4CEE              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046EAH
 286+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F7H
 287+ 4CEE              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FBH
 288+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470BH
 289+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470BH
 290+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470CH
 291+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470DH
 292+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 0470FH
 293+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 0470FH
 294+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 0470FH
 295+ 4CEE              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04710H
 296+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04711H
 297+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04713H
 298+ 4CEE              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04713H
 299+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04713H
 300+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04713H
 301+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04713H
 302+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_END EQU 04716H
 303+ 4CEE              PLY_AKG_CHANNEL3_PITCH_END EQU 04718H
 304+ 4CEE              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04724H
 305+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04724H
 306+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04724H
 307+ 4CEE              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04727H
 308+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 04729H
 309+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 0472FH
 310+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04732H
 311+ 4CEE              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04732H
 312+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04735H
 313+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 0473EH
 314+ 4CEE              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04746H
 315+ 4CEE              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04753H
 316+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04753H
 317+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04753H
 318+ 4CEE              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04756H
 319+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 04758H
 320+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 0475EH
 321+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04761H
 322+ 4CEE              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04761H
 323+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04764H
 324+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476DH
 325+ 4CEE              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04775H
 326+ 4CEE              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04783H
 327+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04783H
 328+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04783H
 329+ 4CEE              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04786H
 330+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 04788H
 331+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 0478EH
 332+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04791H
 333+ 4CEE              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04791H
 334+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04794H
 335+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479DH
 336+ 4CEE              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A5H
 337+ 4CEE              PLY_AKG_SENDPSGREGISTERS EQU 047B4H
 338+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BCH
 339+ 4CEE              PLY_AKG_PSGREG01_INSTR EQU 047BCH
 340+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CCH
 341+ 4CEE              PLY_AKG_PSGREG23_INSTR EQU 047CCH
 342+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DDH
 343+ 4CEE              PLY_AKG_PSGREG45_INSTR EQU 047DDH
 344+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047EEH
 345+ 4CEE              PLY_AKG_PSGREG6_8_INSTR EQU 047EEH
 346+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 047FFH
 347+ 4CEE              PLY_AKG_PSGREG9_10_INSTR EQU 047FFH
 348+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04810H
 349+ 4CEE              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04810H
 350+ 4CEE              PLY_AKG_PSGREG13_OLDVALUE EQU 04825H
 351+ 4CEE              PLY_AKG_RETRIG EQU 04827H
 352+ 4CEE              PLY_AKG_PSGREG13_INSTR EQU 04829H
 353+ 4CEE              PLY_AKG_PSGREG13_END EQU 04838H
 354+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 04838H
 355+ 4CEE              PLY_AKG_SAVESP EQU 04838H
 356+ 4CEE              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483CH
 357+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTS EQU 04844H
 358+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04851H
 359+ 4CEE              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04851H
 360+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTS EQU 04859H
 361+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04866H
 362+ 4CEE              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04866H
 363+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTS EQU 0486EH
 364+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 04879H
 365+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS EQU 04879H
 366+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 04888H
 367+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 04888H
 368+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 0488FH
 369+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 0489FH
 370+ 4CEE              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 0489FH
 371+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A6H
 372+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A6H
 373+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048A9H
 374+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B2H
 375+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B2H
 376+ 4CEE              PLY_AKG_READINSTRUMENTCELL EQU 048B8H
 377+ 4CEE              PLY_AKG_NOSOFTNOHARD EQU 048C5H
 378+ 4CEE              PLY_AKG_NSNH_NONOISE EQU 048DAH
 379+ 4CEE              PLY_AKG_SOFT EQU 048DDH
 380+ 4CEE              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E4H
 381+ 4CEE              PLY_AKG_S_NOTSIMPLE EQU 048ECH
 382+ 4CEE              PLY_AKG_S_AFTERSIMPLETEST EQU 048EFH
 383+ 4CEE              PLY_AKG_HARDTOSOFT EQU 048FCH
 384+ 4CEE              PLY_AKG_HS_JUMPRATIO EQU 04907H
 385+ 4CEE              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04934H
 386+ 4CEE              PLY_AKG_ENDWITHOUTLOOP EQU 04936H
 387+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04936H
 388+ 4CEE              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04936H
 389+ 4CEE              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 0493EH
 390+ 4CEE              PLY_AKG_SH_JUMPRATIO EQU 0494BH
 391+ 4CEE              PLY_AKG_SH_JUMPRATIOEND EQU 0496CH
 392+ 4CEE              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497BH
 393+ 4CEE              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04981H
 394+ 4CEE              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499BH
 395+ 4CEE              PLY_AKG_H_RETRIGEND EQU 049ADH
 396+ 4CEE              PLY_AKG_H_AFTERRETRIG EQU 049AEH
 397+ 4CEE              PLY_AKG_ENDWITHLOOP EQU 049C0H
 398+ 4CEE              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C7H
 399+ 4CEE              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DDH
 400+ 4CEE              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EBH
 401+ 4CEE              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FBH
 402+ 4CEE              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A09H
 403+ 4CEE              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A18H
 404+ 4CEE              PLY_AKG_SHOHS_RETRIGEND EQU 04A27H
 405+ 4CEE              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A28H
 406+ 4CEE              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3AH
 407+ 4CEE              PLY_AKG_EFFECTTABLE EQU 04A48H
 408+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A48H
 409+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6CH
 410+ 4CEE              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6CH
 411+ 4CEE              PLY_AKG_EFFECT_RESET EQU 04A6FH
 412+ 4CEE              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A71H
 413+ 4CEE              PLY_AKG_EFFECT_VOLUME EQU 04A8CH
 414+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A98H
 415+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04A9EH
 416+ 4CEE              PLY_AKG_ARPEGGIOSTABLE EQU 04A9EH
 417+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC5H
 418+ 4CEE              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACCH
 419+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD2H
 420+ 4CEE              PLY_AKG_PITCHESTABLE EQU 04AD2H
 421+ 4CEE              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AF9H
 422+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B00H
 423+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B11H
 424+ 4CEE              PLY_AKG_EFFECT_PITCHDOWN EQU 04B18H
 425+ 4CEE              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B28H
 426+ 4CEE              PLY_AKG_EFFECT_PITCHUP EQU 04B3DH
 427+ 4CEE              PLY_AKG_EFFECT_PITCHSTOP EQU 04B4FH
 428+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B56H
 429+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B80H
 430+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B80H
 431+ 4CEE              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B99H
 432+ 4CEE              PLY_AKG_EFFECT_GLIDESPEED EQU 04B99H
 433+ 4CEE              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BABH
 434+ 4CEE              PLY_AKG_EFFECT_LEGATO EQU 04BC1H
 435+ 4CEE              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD5H
 436+ 4CEE              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDDH
 437+ 4CEE              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE5H
 438+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEDH
 439+ 4CEE              PLY_AKG_EVENT EQU 04BEDH
 440+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BEEH
 441+ 4CEE              PLY_AKG_PERIODTABLE EQU 04BEEH
 442+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BEEH
 443+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CEEH
 444+ 4CEE              PLY_AKG_PERIODTABLE_END EQU 04CEEH
 445+ 4CEE              PLY_AKG_END EQU 04CEEH
 446+ 4CEE              MAIN_PLAYER_END EQU 04CEEH
 447+ 4CEE              TESTEREND EQU 04CEEH
 448+ 4CEE
# file closed: ./symbol/AKG.sym
  86  4CEE
  87  4CEE              ORIG.HTIMI:
  88  4CEE 00 00 00 00  	DB 0, 0, 0, 0, 0
  88  4CF2 00
  89  4CF3               EXPORT ORIG.HTIMI
  90  4CF3
  91  4CF3              MUSIC_INIT_STATUS:
  92  4CF3 00            DB 0
  93  4CF4              SFX_INIT_STATUS:
  94  4CF4 00            DB 0
  95  4CF5              SOUND_ENABLED:
  96  4CF5 00            DB 0
  97  4CF6
  98  4CF6              SPRATR_INIT_STATUS:
  99  4CF6 00            DB 0
 100  4CF7              SPRATR_UPDATE_FLAG:
 101  4CF7 00 00         DW 0
 102  4CF9              SPRATR_DATA:
 103  4CF9 00 00         DW 0
 104  4CFB
 105  4CFB              ; to temporarily store stack pointer
 106  4CFB              TMPSP:
 107  4CFB 00 00         DW 0
 108  4CFD              ; to support sprite flicker
 109  4CFD              FLICKER:
 110  4CFD 00            DB 0
 111  4CFE
 112  4CFE              ; temp variables for BLIT, TILE functions
 113  4CFE              TILETMP1:
 114  4CFE              BLIT_TMP1:
 115  4CFE 00 00         DW 0
 116  4D00              TILETMP2:
 117  4D00              BLIT_TMP2:
 118  4D00 00 00         DW 0
 119  4D02
 120  4D02              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 121  4D02              ; per starting letter, if no commands with this letter, NULL value
 122  4D02              CMDS:
 123  4D02 00 00            DW 0 ; A
 124  4D04 D2 4D            DW CMDS_B ; B
 125  4D06 00 00            DW 0 ; C
 126  4D08 00 00            DW 0 ; D
 127  4D0A 00 00            DW 0 ; E
 128  4D0C 5D 4D            DW CMDS_F; F
 129  4D0E 70 4D            DW CMDS_G; G
 130  4D10 00 00            DW 0 ; H
 131  4D12 00 00            DW 0 ; I
 132  4D14 00 00            DW 0 ; J
 133  4D16 00 00            DW 0 ; K
 134  4D18 40 4D            DW CMDS_L ; L
 135  4D1A 4A 4D            DW CMDS_M ; M
 136  4D1C 00 00            DW 0 ; N
 137  4D1E 00 00            DW 0 ; O
 138  4D20 00 00            DW 0 ; P
 139  4D22 00 00            DW 0 ; Q
 140  4D24 00 00            DW 0 ; R
 141  4D26 84 4D            DW CMDS_S ; S
 142  4D28 F2 4D            DW CMDS_T ; T
 143  4D2A 36 4D            DW CMDS_U ; U
 144  4D2C 7A 4D            DW CMDS_V ; V
 145  4D2E 00 00            DW 0 ; W
 146  4D30 00 00            DW 0 ; X
 147  4D32 00 00            DW 0 ; Y
 148  4D34 00 00            DW 0 ; Z
 149  4D36
 150  4D36              CMDS_U:
 151  4D36 55 50 52 49  	DEFB	"UPRINT",0      ; Print upper case string
 151  4D3A 4E 54 00
 152  4D3D CA 4F        	DEFW	UPRINT
 153  4D3F 00               DB 0
 154  4D40              CMDS_L:
 155  4D40 4C 50 52 49  	DEFB	"LPRINT",0      ; Print lower case string
 155  4D44 4E 54 00
 156  4D47 E7 4F        	DEFW	LPRINT
 157  4D49 00               DB 0
 158  4D4A              CMDS_M:
 159  4D4A 4D 45 4D 56      DB "MEMVRM", 0
 159  4D4E 52 4D 00
 160  4D51 8F 51            DW MEMVRM
 161  4D53 4D 45 4D 43  	DB "MEMCPY", 0
 161  4D57 50 59 00
 162  4D5A 4E 50        	DW MEMCPY
 163  4D5C 00           	DB 0
 164  4D5D              CMDS_F:
 165  4D5D 46 49 4C 56      DB "FILVRM", 0
 165  4D61 52 4D 00
 166  4D64 91 50            DW FILVRM
 167  4D66 46 49 4C 52      DB "FILRAM", 0
 167  4D6A 41 4D 00
 168  4D6D D8 50            DW FILRAM
 169  4D6F 00               DB 0
 170  4D70              CMDS_G:
 171  4D70 47 45 4E 43      DB "GENCAL", 0
 171  4D74 41 4C 00
 172  4D77 36 51            DW GENCAL
 173  4D79 00           	DB	0
 174  4D7A              CMDS_V:
 175  4D7A 56 52 4D 4D  	DB "VRMMEM", 0
 175  4D7E 45 4D 00
 176  4D81 08 52        	DW VRMMEM
 177  4D83 00           	DB 0
 178  4D84              CMDS_S:
 179  4D84 53 50 52 53  	DB "SPRSET", 0
 179  4D88 45 54 00
 180  4D8B D8 53        	DW SPRSET
 181  4D8D 53 50 52 47  	DB "SPRGRPMOV", 0
 181  4D91 52 50 4D 4F
 181  4D95 56 00
 182  4D97 96 54        	DW SPRGRPMOV
 183  4D99 53 4E 44 53  	DB "SNDSFX", 0
 183  4D9D 46 58 00
 184  4DA0 40 53        	DW SNDSFX
 185  4DA2 53 4E 44 50  	DB "SNDPLYON", 0
 185  4DA6 4C 59 4F 4E
 185  4DAA 00
 186  4DAB 0A 53        	DW SNDPLYON
 187  4DAD 53 4E 44 50  	DB "SNDPLYOFF", 0
 187  4DB1 4C 59 4F 46
 187  4DB5 46 00
 188  4DB7 1D 53        	DW SNDPLYOFF
 189  4DB9 53 4E 44 50  	DB "SNDPLYINI", 0
 189  4DBD 4C 59 49 4E
 189  4DC1 49 00
 190  4DC3 C0 52        	DW SNDPLYINIT
 191  4DC5 53 50 52 41  	DB "SPRATRINI", 0
 191  4DC9 54 52 49 4E
 191  4DCD 49 00
 192  4DCF 9A 53        	DW SPRATRINI
 193  4DD1 00           	DB 0
 194  4DD2              CMDS_B:
 195  4DD2 42 4C 49 54  	DB "BLIT", 0
 195  4DD6 00
 196  4DD7 90 56        	DW BLIT
 197  4DD9 42 4F 58 4D  	DB "BOXMEMCPY", 0
 197  4DDD 45 4D 43 50
 197  4DE1 59 00
 198  4DE3 B4 57        	DW BOXMEMCPY
 199  4DE5 42 4F 58 4D  	DB "BOXMEMVRM", 0
 199  4DE9 45 4D 56 52
 199  4DED 4D 00
 200  4DEF E8 57        	DW BOXMEMVRM
 201  4DF1 00           	DB 0
 202  4DF2              CMDS_T:
 203  4DF2 54 49 4C 45  	DB "TILERAM", 0
 203  4DF6 52 41 4D 00
 204  4DFA FD 56        	DW TILERAM
 205  4DFC 54 49 4C 45  	DB "TILEVRM", 0
 205  4E00 56 52 4D 00
 206  4E04 44 57        	DW TILEVRM
 207  4E06 00           	DB 0
 208  4E07
 209  4E07              ; ****************************************************************************************************
 210  4E07              ; function sets VRAM address
 211  4E07              ; input HL=address
 212  4E07              ; modifies AF
 213  4E07              SETWRT_LOCAL:
 214  4E07 7D           	LD	A, L
 215  4E08 D3 99        	OUT	(099H), A
 216  4E0A 7C           	LD	A, H
 217  4E0B E6 3F        	AND	03FH
 218  4E0D F6 40        	OR	040H
 219  4E0F D3 99        	OUT	(099H), A
 220  4E11 C9           	RET
 221  4E12              ; ****************************************************************************************************
 222  4E12
 223  4E12              ; ****************************************************************************************************
 224  4E12              ; function gets slot and subslot data for specific page
 225  4E12              ; input A=page (0, 1 or 2)
 226  4E12              ; output B = 0A8H register value
 227  4E12              ; output D = 0 is no subslots, 1 if yes
 228  4E12              ; output C = 0A8H value when page 3 slot equals to requested page slot
 229  4E12              ; output E = subslot value if present
 230  4E12              ; modifies AF, BC, DE, HL
 231  4E12              GET_PAGE_INFO:
 232  4E12 6F               LD L, A
 233  4E13 C6 C1            ADD A, low (EXPTBL)
 234  4E15 32 1F 4E         LD (GET_PAGE_INFO_L1+1), A
 235  4E18 DB A8            IN A, (0A8H)
 236  4E1A 47               LD B, A
 237  4E1B E6 3F            AND 03FH
 238  4E1D 4F               LD C, A
 239  4E1E              GET_PAGE_INFO_L1:
 240  4E1E 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 241  4E21 E6 80            AND 080H
 242  4E23 28 1B            JR Z, GET_PAGE_INFO_L2
 243  4E25                  ; expanded
 244  4E25 2D               DEC L
 245  4E26 FA 45 4E         JP M, GET_PAGE_INFO_L3
 246  4E29 2D               DEC L
 247  4E2A FA 43 4E         JP M, GET_PAGE_INFO_L4
 248  4E2D                  ; page 2
 249  4E2D 07               RLCA
 250  4E2E 07               RLCA
 251  4E2F              GET_PAGE_INFO_L5:
 252  4E2F E6 C0            AND 0C0H
 253  4E31 B1               OR C
 254  4E32 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 255  4E34 4F               LD C, A
 256  4E35 3A FF FF         LD A, (0FFFFH)
 257  4E38 2F               CPL
 258  4E39 5F               LD E, A
 259  4E3A 16 01            LD D, 1
 260  4E3C 78               LD A, B ; return stack
 261  4E3D D3 A8            OUT (0A8H), A
 262  4E3F C9               RET
 263  4E40              GET_PAGE_INFO_L2:
 264  4E40                  ; not expanded
 265  4E40 16 00            LD D, 0
 266  4E42 C9               RET
 267  4E43              GET_PAGE_INFO_L4:
 268  4E43                  ; page 1
 269  4E43 0F               RRCA
 270  4E44 0F               RRCA
 271  4E45              GET_PAGE_INFO_L3:
 272  4E45                  ; page 0
 273  4E45 0F               RRCA
 274  4E46 0F               RRCA
 275  4E47 18 E6            JR GET_PAGE_INFO_L5
 276  4E49              ; ****************************************************************************************************
 277  4E49
 278  4E49              ; ****************************************************************************************************
 279  4E49              ; function returns original slot and subslot info
 280  4E49              ; input B = 0A8H register value
 281  4E49              ; input D = 0 is no subslots, 1 if yes
 282  4E49              ; input C = 0A8H value when page 3 slot equals to requested page slot
 283  4E49              ; input E = subslot value if present
 284  4E49              ; modifies AF, disables interrupts
 285  4E49              RESTORE_PAGE_INFO:
 286  4E49 7A               LD A, D
 287  4E4A B7               OR A
 288  4E4B 28 08            JR Z, RESTORE_PAGE_INFO_L1
 289  4E4D 79               LD A, C
 290  4E4E F3           	DI
 291  4E4F D3 A8            OUT (0A8H), A
 292  4E51 7B               LD A, E
 293  4E52 32 FF FF         LD (0FFFFH), A
 294  4E55              RESTORE_PAGE_INFO_L1:
 295  4E55 78               LD A, B
 296  4E56 D3 A8            OUT (0A8H), A
 297  4E58 C9               RET
 298  4E59              ; ****************************************************************************************************
 299  4E59
 300  4E59              ; *******************************************************************************************************
 301  4E59              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 302  4E59              ; INPUT:  A = SLOT ID: EXXXSSPP
 303  4E59              ; E = EXPANDED FLAG
 304  4E59              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 305  4E59              ; PP = PRIMARY SLOT NUMBER
 306  4E59              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 307  4E59              ; CHANGES: AF, BC, DE
 308  4E59
 309  4E59              LOCAL_ENASLT:
 310  4E59 CD 79 4E         CALL L0353
 311  4E5C FA 66 4E         JP M, L0340
 312  4E5F DB A8            IN A, (0A8H)
 313  4E61 A1               AND C
 314  4E62 B0               OR B
 315  4E63 D3 A8            OUT (0A8H), A
 316  4E65 C9               RET
 317  4E66              L0340:
 318  4E66 E5               PUSH HL
 319  4E67 CD 9E 4E         CALL L0378
 320  4E6A 4F               LD C, A
 321  4E6B 06 00            LD B, 0
 322  4E6D 7D               LD A, L
 323  4E6E A4               AND H
 324  4E6F B2               OR D
 325  4E70 21 C5 FC         LD HL, 0FCC5H
 326  4E73 09               ADD HL, BC
 327  4E74 77               LD (HL), A
 328  4E75 E1               POP HL
 329  4E76 79               LD A, C
 330  4E77 18 E0            JR LOCAL_ENASLT
 331  4E79              L0353:
 332  4E79 F3               DI
 333  4E7A F5               PUSH AF
 334  4E7B 7C               LD A, H
 335  4E7C 07               RLCA
 336  4E7D 07               RLCA
 337  4E7E E6 03            AND 3
 338  4E80 5F               LD E, A
 339  4E81 3E C0            LD A, 0C0H
 340  4E83              L035D:
 341  4E83 07               RLCA
 342  4E84 07               RLCA
 343  4E85 1D               DEC E
 344  4E86 F2 83 4E         JP P, L035D
 345  4E89 5F               LD E, A
 346  4E8A 2F               CPL
 347  4E8B 4F               LD C, A
 348  4E8C F1               POP AF
 349  4E8D F5               PUSH AF
 350  4E8E E6 03            AND 3
 351  4E90 3C               INC A
 352  4E91 47               LD B, A
 353  4E92 3E AB            LD A, 0ABH
 354  4E94              L036E:
 355  4E94 C6 55            ADD A, 055H
 356  4E96 10 FC            DJNZ L036E
 357  4E98 57               LD D, A
 358  4E99 A3               AND E
 359  4E9A 47               LD B, A
 360  4E9B F1               POP AF
 361  4E9C A7               AND A
 362  4E9D C9               RET
 363  4E9E              L0378:
 364  4E9E F5               PUSH AF
 365  4E9F 7A               LD A, D
 366  4EA0 E6 C0            AND 0C0H
 367  4EA2 4F               LD C, A
 368  4EA3 F1               POP AF
 369  4EA4 F5               PUSH AF
 370  4EA5 57               LD D, A
 371  4EA6 DB A8            IN A, (0A8H)
 372  4EA8 47               LD B, A
 373  4EA9 E6 3F            AND 03FH
 374  4EAB B1               OR C
 375  4EAC D3 A8            OUT (0A8H), A
 376  4EAE 7A               LD A, D
 377  4EAF 0F               RRCA
 378  4EB0 0F               RRCA
 379  4EB1 E6 03            AND 3
 380  4EB3 57               LD D, A
 381  4EB4 3E AB            LD A, 0ABH
 382  4EB6              L0390:
 383  4EB6 C6 55            ADD A, 055H
 384  4EB8 15               DEC D
 385  4EB9 F2 B6 4E         JP P, L0390
 386  4EBC A3               AND E
 387  4EBD 57               LD D, A
 388  4EBE 7B               LD A, E
 389  4EBF 2F               CPL
 390  4EC0 67               LD H, A
 391  4EC1 3A FF FF         LD A, (0FFFFH)
 392  4EC4 2F               CPL
 393  4EC5 6F               LD L, A
 394  4EC6 A4               AND H
 395  4EC7 B2               OR D
 396  4EC8 32 FF FF         LD (0FFFFH), A
 397  4ECB 78               LD A, B
 398  4ECC D3 A8            OUT (0A8H), A
 399  4ECE F1               POP AF
 400  4ECF E6 03            AND 3
 401  4ED1 C9               RET
 402  4ED2              ; *******************************************************************************************************
 403  4ED2
 404  4ED2              ; *******************************************************************************************************
 405  4ED2              ; some common code to activate page 0 and place values needed to restore original page on stack
 406  4ED2              ; input IY=return address
 407  4ED2              ENABLE_PAGE0:
 408  4ED2 AF               XOR A
 409  4ED3 CD 12 4E         CALL GET_PAGE_INFO
 410  4ED6 C5               PUSH BC
 411  4ED7 D5               PUSH DE
 412  4ED8 3A 41 F3         LD A, (RAMAD0)
 413  4EDB 26 00            LD H, 0
 414  4EDD CD 59 4E         CALL LOCAL_ENASLT
 415  4EE0 FD E9        	JP (IY)
 416  4EE2              ; *******************************************************************************************************
 417  4EE2
 418  4EE2              ; *******************************************************************************************************
 419  4EE2              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
 420  4EE2              ; struct {
 421  4EE2              ; DW y
 422  4EE2              ; DW x
 423  4EE2              ; DW pattern (0-31)
 424  4EE2              ; DW color
 425  4EE2              ; } [32]
 426  4EE2              ; will hide sprites whose location is outside of visible area
 427  4EE2              ; works in screen 1 and 2
 428  4EE2              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
 429  4EE2              ; modifies AF, AF', BC, DE, HL
 430  4EE2              SPRATR_UPDATE:
 431  4EE2              	; check if initialized
 432  4EE2 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
 433  4EE5 B7           	OR A
 434  4EE6 C8           	RET Z
 435  4EE7              	; check if update requested
 436  4EE7 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 437  4EEA 7E           	LD A, (HL)
 438  4EEB B7           	OR A
 439  4EEC C8           	RET Z
 440  4EED              	; check screen mode
 441  4EED 3A AF FC     	LD A, (SCRMOD)
 442  4EF0 3D           	DEC A
 443  4EF1 28 02        	JR Z, .L0 ; screen 1
 444  4EF3 3D           	DEC A
 445  4EF4 C0           	RET NZ ; not screen 2
 446  4EF5              .L0:
 447  4EF5 06 20        	LD B, 32 ; sprite number
 448  4EF7 0E 98        	LD C, #98 ; register for vpd data output
 449  4EF9              	; set VDP address
 450  4EF9 2A 28 F9     	LD HL, (ATRBAS)
 451  4EFC 3A FD 4C     	LD A, (FLICKER)
 452  4EFF 5F           	LD E, A
 453  4F00 08           	EX AF, AF'
 454  4F01 7B           	LD A, E
 455  4F02 87           	ADD A, A
 456  4F03 87           	ADD A, A
 457  4F04 16 00        	LD D, 0
 458  4F06 5F           	LD E, A
 459  4F07 19           	ADD HL, DE
 460  4F08 CD 07 4E     	CALL SETWRT_LOCAL
 461  4F0B ED 73 FB 4C  	LD (TMPSP), SP
 462  4F0F ED 7B F9 4C  	LD SP, (SPRATR_DATA)
 463  4F13
 464  4F13              .LOOP:
 465  4F13 E1           	POP HL
 466  4F14 24           	INC H
 467  4F15 28 0D        	JR Z, .L1 ; negative number above -256
 468  4F17 25           	DEC H
 469  4F18 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
 470  4F1A 7D           	LD A, L
 471  4F1B FE C0        	CP 192
 472  4F1D 30 10        	JR NC, .OUT3
 473  4F1F 3D           	DEC A ; due to VDP rule that top of screen is -1
 474  4F20 57           	LD D, A
 475  4F21 C3 3F 4F     	JP .X
 476  4F24              .L1:
 477  4F24 7D           	LD A, L
 478  4F25 C6 10        	ADD 16
 479  4F27 FA 2F 4F     	JP M, .OUT3 ; below -16
 480  4F2A 2D           	DEC L ; due to VDP rule that top of screen is -1
 481  4F2B 55           	LD D, L
 482  4F2C C3 3F 4F     	JP .X
 483  4F2F              .OUT3:
 484  4F2F E1           	POP HL ; skip x value
 485  4F30              .OUT2:
 486  4F30 E1           	POP HL ; skip pattern
 487  4F31 E1           	POP HL ; skip color
 488  4F32 3E D1        	LD A, #D1
 489  4F34 D3 98        	OUT (#98), A ; sprite hidden
 490  4F36 D3 98        	OUT (#98), A ; value unimportant
 491  4F38 D3 98        	OUT (#98), A ; value unimportant
 492  4F3A D3 98        	OUT (#98), A ; value unimportant
 493  4F3C C3 63 4F     	JP .NEXT
 494  4F3F              .X:
 495  4F3F E1           	POP HL
 496  4F40 24           	INC H
 497  4F41 28 08        	JR Z, .L2
 498  4F43 25           	DEC H
 499  4F44 20 EA        	JR NZ, .OUT2
 500  4F46 1E 00        	LD E, 0 ; EC bit
 501  4F48 C3 54 4F     	JP .XY
 502  4F4B              .L2:
 503  4F4B 7D           	LD A, L
 504  4F4C C6 20        	ADD 32
 505  4F4E FA 30 4F     	JP M, .OUT2
 506  4F51 6F           	LD L, A
 507  4F52 1E 80        	LD E, #80
 508  4F54              .XY:
 509  4F54 ED 51        	OUT (C), D
 510  4F56 ED 69        	OUT (C), L
 511  4F58 E1           	POP HL ; pattern
 512  4F59 7D           	LD A, L
 513  4F5A 87           	ADD A, A
 514  4F5B 87           	ADD A, A ; needs to go at 4x
 515  4F5C D3 98        	OUT (#98), A
 516  4F5E E1           	POP HL ; color
 517  4F5F 7D           	LD A, L
 518  4F60 B3           	OR E
 519  4F61 D3 98        	OUT (#98), A
 520  4F63              .NEXT:
 521  4F63 08           	EX AF, AF'
 522  4F64 3C           	INC A
 523  4F65 E6 1F        	AND 31
 524  4F67 C2 7B 4F     	JP NZ, .NEXT2
 525  4F6A 08           	EX AF, AF'
 526  4F6B 2A 28 F9     	LD HL, (ATRBAS)
 527  4F6E              	; CALL SETWRT_LOCAL not allowed as SP modified
 528  4F6E 7D           	LD	A, L
 529  4F6F D3 99        	OUT	(099H), A
 530  4F71 7C           	LD	A, H
 531  4F72 E6 3F        	AND	03FH
 532  4F74 F6 40        	OR	040H
 533  4F76 D3 99        	OUT	(099H), A
 534  4F78 C3 7C 4F     	JP .NEXT3
 535  4F7B              .NEXT2:
 536  4F7B 08           	EX AF, AF'
 537  4F7C              .NEXT3:
 538  4F7C 10 95        	DJNZ .LOOP
 539  4F7E 08           	EX AF, AF'
 540  4F7F 3C           	INC A
 541  4F80 32 FD 4C     	LD (FLICKER), A
 542  4F83
 543  4F83 ED 7B FB 4C  	LD SP, (TMPSP)
 544  4F87 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 545  4F8A 36 00        	LD (HL), 0 ; zero out update flag
 546  4F8C C9           	RET
 547  4F8D              ; *******************************************************************************************************
 548  4F8D
 549  4F8D              ; General BASIC CALL-instruction handler
 550  4F8D              CALLHAND:
 551  4F8D E5           	PUSH HL
 552  4F8E 21 02 4D     	LD	HL, CMDS ; pointer table based on starting letter
 553  4F91 3A 89 FD         LD A, (PROCNM)
 554  4F94 D6 41            SUB 'A'
 555  4F96 87               ADD A, A
 556  4F97 16 00            LD D, 0
 557  4F99 5F               LD E, A
 558  4F9A 19               ADD HL, DE
 559  4F9B 5E               LD E, (HL)
 560  4F9C 23               INC HL
 561  4F9D 56               LD D, (HL)
 562  4F9E 7A               LD A, D
 563  4F9F B3               OR E
 564  4FA0 28 24            JR Z, .CMDNOTRECOGNIZED
 565  4FA2 EB               EX DE, HL
 566  4FA3              .CHKCMD:
 567  4FA3 11 89 FD     	LD	DE, PROCNM
 568  4FA6 1A           .LOOP:	LD	A,(DE)
 569  4FA7 BE           	CP	(HL)
 570  4FA8 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 571  4FAA 13           	INC	DE
 572  4FAB 23           	INC	HL
 573  4FAC A7           	AND	A
 574  4FAD 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 575  4FAF 5E           	LD	E,(HL)
 576  4FB0 23           	INC	HL
 577  4FB1 56           	LD	D,(HL)
 578  4FB2 E1           	POP	HL		; routine address
 579  4FB3 CD 39 50     	CALL	GETPREVCHAR
 580  4FB6 CD C8 4F     	CALL	.CALLDE		; Call routine
 581  4FB9 A7           	AND	A
 582  4FBA C9           	RET
 583  4FBB
 584  4FBB              .TONEXTCMD:
 585  4FBB 0E FF        	LD	C,0FFH
 586  4FBD AF           	XOR	A
 587  4FBE ED B1        	CPIR			; Skip to end of instruction name
 588  4FC0 23           	INC	HL
 589  4FC1 23           	INC	HL		; Skip address
 590  4FC2 BE           	CP	(HL)
 591  4FC3 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 592  4FC5 E1           	POP	HL
 593  4FC6              .CMDNOTRECOGNIZED:
 594  4FC6 37               SCF
 595  4FC7 C9           	RET
 596  4FC8
 597  4FC8              .CALLDE:
 598  4FC8 D5           	PUSH	DE
 599  4FC9 C9           	RET
 600  4FCA
 601  4FCA              ;---------------------------
 602  4FCA
 603  4FCA              ;---------------------------
 604  4FCA              UPRINT:
 605  4FCA CD 0E 50     	CALL	EVALTXTPARAM	; Evaluate text parameter
 606  4FCD E5           	PUSH	HL
 607  4FCE CD 04 50             CALL    GETSTRPNT
 608  4FD1              .LOOP
 609  4FD1 7E                   LD      A,(HL)
 610  4FD2 CD DE 4F             CALL    .UCASE
 611  4FD5 CD A2 00             CALL    CHPUT  ;Print
 612  4FD8 23                   INC     HL
 613  4FD9 10 F6                DJNZ    .LOOP
 614  4FDB
 615  4FDB E1           	POP	HL
 616  4FDC B7           	OR      A
 617  4FDD C9           	RET
 618  4FDE
 619  4FDE              .UCASE:
 620  4FDE FE 61                CP      "a"
 621  4FE0 D8                   RET     C
 622  4FE1 FE 7B                CP      "z"+1
 623  4FE3 D0                   RET     NC
 624  4FE4 E6 DF                AND     %11011111
 625  4FE6 C9                   RET
 626  4FE7              ;---------------------------
 627  4FE7              LPRINT:
 628  4FE7 CD 0E 50     	CALL	EVALTXTPARAM	; Evaluate text parameter
 629  4FEA E5           	PUSH	HL
 630  4FEB CD 04 50             CALL    GETSTRPNT
 631  4FEE              .LOOP
 632  4FEE 7E                   LD      A,(HL)
 633  4FEF CD FB 4F             CALL    .LCASE
 634  4FF2 CD A2 00             CALL    CHPUT  ;Print
 635  4FF5 23                   INC     HL
 636  4FF6 10 F6                DJNZ    .LOOP
 637  4FF8
 638  4FF8 E1           	POP	HL
 639  4FF9 B7           	OR      A
 640  4FFA C9           	RET
 641  4FFB
 642  4FFB              .LCASE:
 643  4FFB FE 41                CP      "A"
 644  4FFD D8                   RET     C
 645  4FFE FE 5B                CP      "Z"+1
 646  5000 D0                   RET     NC
 647  5001 F6 20                OR      %00100000
 648  5003 C9                   RET
 649  5004              ;---------------------------
 650  5004
 651  5004              GETSTRPNT:
 652  5004              ; OUT:
 653  5004              ; HL = String Address
 654  5004              ; B  = Lenght
 655  5004
 656  5004 2A F8 F7             LD      HL,(USR)
 657  5007 46                   LD      B,(HL)
 658  5008 23                   INC     HL
 659  5009 5E                   LD      E,(HL)
 660  500A 23                   INC     HL
 661  500B 56                   LD      D,(HL)
 662  500C EB                   EX      DE,HL
 663  500D C9                   RET
 664  500E
 665  500E              EVALTXTPARAM:
 666  500E CD 2F 50     	CALL	CHKCHAR
 667  5011 28           	DEFB	"("             ; Check for (
 668  5012 DD 21 64 4C  	LD	IX,FRMEVL
 669  5016 CD 59 01     	CALL	CALBAS		; Evaluate expression
 670  5019 3A 63 F6             LD      A,(VALTYP)
 671  501C FE 03                CP      3               ; Text type?
 672  501E C2 41 50             JP      NZ,TYPE_MISMATCH
 673  5021 E5                   PUSH	HL
 674  5022 DD 21 D0 67          LD	IX,FRESTR         ; Free the temporary string
 675  5026 CD 59 01             CALL	CALBAS
 676  5029 E1                   POP	HL
 677  502A CD 2F 50     	CALL	CHKCHAR
 678  502D 29           	DEFB	")"             ; Check for )
 679  502E C9                   RET
 680  502F
 681  502F
 682  502F              CHKCHAR:
 683  502F CD 39 50     	CALL	GETPREVCHAR	; Get previous basic char
 684  5032 E3           	EX	(SP),HL
 685  5033 BE           	CP	(HL) 	        ; Check if good char
 686  5034 20 0F        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 687  5036 23           	INC	HL
 688  5037 E3           	EX	(SP),HL
 689  5038 23           	INC	HL		; Get next basic char
 690  5039
 691  5039              GETPREVCHAR:
 692  5039 2B           	DEC	HL
 693  503A DD 21 66 46  	LD	IX,CHRGTR
 694  503E C3 59 01     	JP      CALBAS
 695  5041
 696  5041
 697  5041              TYPE_MISMATCH:
 698  5041 1E 0D            LD E, 13 ; Type mismatch
 699  5043 18 02            JR THROW_ERROR
 700  5045
 701  5045              SYNTAX_ERROR:
 702  5045 1E 02            LD E, 2 ; Syntax error
 703  5047              THROW_ERROR:
 704  5047 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 705  504B C3 59 01     	JP	CALBAS
 706  504E
 707  504E              ;---------------------------
 708  504E
 709  504E              ; *******************************************************************************************************
 710  504E              ; function to handle CALL MEMCPY basic extension
 711  504E              ; _MEMCPY ( INT source,
 712  504E              ;			INT destination,
 713  504E              ;			INT count,
 714  504E              ; will put ram in page 0 also, page 1 is already there
 715  504E              MEMCPY:
 716  504E              	; opening (
 717  504E CD 2F 50     	CALL CHKCHAR
 718  5051 28           	DB '('
 719  5052              	; get source address
 720  5052 DD 21 2F 54  	LD IX, FRMQNT
 721  5056 CD 59 01     	CALL CALBAS
 722  5059 D5           	PUSH DE
 723  505A              	; comma
 724  505A CD 2F 50     	CALL CHKCHAR
 725  505D 2C           	DB ','
 726  505E              	; get destination address
 727  505E DD 21 2F 54  	LD IX, FRMQNT
 728  5062 CD 59 01     	CALL CALBAS
 729  5065 D5           	PUSH DE
 730  5066              	; comma
 731  5066 CD 2F 50     	CALL CHKCHAR
 732  5069 2C           	DB ','
 733  506A              	; get length
 734  506A DD 21 2F 54  	LD IX, FRMQNT
 735  506E CD 59 01     	CALL CALBAS
 736  5071 D5           	PUSH DE
 737  5072              	; ending )
 738  5072 CD 2F 50     	CALL CHKCHAR
 739  5075 29           	DB ')'
 740  5076
 741  5076              	; save position
 742  5076 E5           	PUSH HL
 743  5077 DD E1        	POP IX
 744  5079
 745  5079 C1           	POP BC ; count
 746  507A D1           	POP DE ; destination
 747  507B E1           	POP HL ; source
 748  507C D9           	EXX
 749  507D              	; enable page 0
 750  507D FD 21 84 50  	LD IY, .RET
 751  5081 C3 D2 4E     	JP ENABLE_PAGE0
 752  5084              .RET:
 753  5084 FB           	EI
 754  5085 D9           	EXX
 755  5086 ED B0        	LDIR
 756  5088 D1               POP DE
 757  5089 C1               POP BC
 758  508A CD 49 4E         CALL RESTORE_PAGE_INFO
 759  508D DD E5        	PUSH IX
 760  508F E1           	POP HL
 761  5090 C9           	RET
 762  5091              ; *******************************************************************************************************
 763  5091
 764  5091              ; *******************************************************************************************************
 765  5091              ; function to handle CALL FILVRM basic extension
 766  5091              ; FILVRM ( INT offset,
 767  5091              ;		   INT count,
 768  5091              ;		   BYTE value,
 769  5091              ;		   BYTE wait_vsync) >0 = true
 770  5091              ; wait_vsync will issue HALT before copying
 771  5091              FILVRM:
 772  5091              	; opening (
 773  5091 CD 2F 50     	CALL CHKCHAR
 774  5094 28           	DB '('
 775  5095              	; get offset address
 776  5095 DD 21 2F 54  	LD IX, FRMQNT
 777  5099 CD 59 01     	CALL CALBAS
 778  509C D5           	PUSH DE
 779  509D              	; comma
 780  509D CD 2F 50     	CALL CHKCHAR
 781  50A0 2C           	DB ','
 782  50A1              	; get count
 783  50A1 DD 21 2F 54  	LD IX, FRMQNT
 784  50A5 CD 59 01     	CALL CALBAS
 785  50A8 D5           	PUSH DE
 786  50A9              	; comma
 787  50A9 CD 2F 50     	CALL CHKCHAR
 788  50AC 2C           	DB ','
 789  50AD              	; get value
 790  50AD DD 21 1C 52  	LD IX, GETBYT
 791  50B1 CD 59 01     	CALL CALBAS
 792  50B4 F5           	PUSH AF
 793  50B5              	; comma
 794  50B5 CD 2F 50     	CALL CHKCHAR
 795  50B8 2C           	DB ','
 796  50B9              	; get vsync wait
 797  50B9 DD 21 1C 52  	LD IX, GETBYT
 798  50BD CD 59 01     	CALL CALBAS
 799  50C0 F5           	PUSH AF
 800  50C1              	; ending )
 801  50C1 CD 2F 50     	CALL CHKCHAR
 802  50C4 29           	DB ')'
 803  50C5
 804  50C5 FB               EI
 805  50C6              	; save position
 806  50C6 E5           	PUSH HL
 807  50C7 DD E1        	POP IX
 808  50C9
 809  50C9              	; syntax ok
 810  50C9              	; wait for vsync if needed
 811  50C9 F1           	POP AF
 812  50CA B7           	OR A
 813  50CB 28 01        	JR Z, .L1
 814  50CD 76           	HALT
 815  50CE
 816  50CE              .L1:
 817  50CE F1               POP AF ; value
 818  50CF C1               POP BC ; count
 819  50D0 E1               POP HL ; offset
 820  50D1 CD 56 00         CALL BIOS_FILVRM
 821  50D4
 822  50D4              .L3:
 823  50D4 DD E5        	PUSH IX
 824  50D6 E1           	POP HL
 825  50D7 C9           	RET
 826  50D8              ; *******************************************************************************************************
 827  50D8
 828  50D8              ; *******************************************************************************************************
 829  50D8              ; function to handle CALL FILRAM basic extension
 830  50D8              ; FILRAM ( INT start address,
 831  50D8              ;		   INT count,
 832  50D8              ;		   BYTE value,
 833  50D8              ; will put ram in page 0 also, page 1 is already there
 834  50D8              FILRAM:
 835  50D8              	; opening (
 836  50D8 CD 2F 50     	CALL CHKCHAR
 837  50DB 28           	DB '('
 838  50DC              	; get start address
 839  50DC DD 21 2F 54  	LD IX, FRMQNT
 840  50E0 CD 59 01     	CALL CALBAS
 841  50E3 D5           	PUSH DE
 842  50E4              	; comma
 843  50E4 CD 2F 50     	CALL CHKCHAR
 844  50E7 2C           	DB ','
 845  50E8              	; get count
 846  50E8 DD 21 2F 54  	LD IX, FRMQNT
 847  50EC CD 59 01     	CALL CALBAS
 848  50EF D5           	PUSH DE
 849  50F0              	; comma
 850  50F0 CD 2F 50     	CALL CHKCHAR
 851  50F3 2C           	DB ','
 852  50F4              	; get value
 853  50F4 DD 21 1C 52  	LD IX, GETBYT
 854  50F8 CD 59 01     	CALL CALBAS
 855  50FB F5           	PUSH AF
 856  50FC              	; ending )
 857  50FC CD 2F 50     	CALL CHKCHAR
 858  50FF 29           	DB ')'
 859  5100
 860  5100              	; save position
 861  5100 E5           	PUSH HL
 862  5101 DD E1        	POP IX
 863  5103
 864  5103 D1           	POP DE ; actually AF
 865  5104 C1           	POP BC ; count
 866  5105 E1           	POP HL ; start address
 867  5106 78           	LD A, B
 868  5107 B7           	OR A
 869  5108 20 0A        	JR NZ, .L1 ; >=256 bytes to fill
 870  510A B1           	OR C
 871  510B 28 19        	JR Z, .EXIT ; 0 bytes to fill, skip
 872  510D 79           	LD A, C
 873  510E 3D           	DEC A
 874  510F 20 03        	JR NZ, .L1 ; ; >1 byte to fill
 875  5111              	; one byte to fill
 876  5111 72           	LD (HL), D
 877  5112 18 12        	JR .EXIT
 878  5114              .L1:
 879  5114 D9           	EXX
 880  5115              	; enable page 0
 881  5115 FD 21 1C 51  	LD IY, .RET
 882  5119 C3 D2 4E     	JP ENABLE_PAGE0
 883  511C              .RET:
 884  511C FB           	EI
 885  511D D9           	EXX
 886  511E CD 2A 51     	CALL .FILLVALUE
 887  5121 D1               POP DE
 888  5122 C1               POP BC
 889  5123 CD 49 4E         CALL RESTORE_PAGE_INFO
 890  5126              .EXIT:
 891  5126 DD E5        	PUSH IX
 892  5128 E1           	POP HL
 893  5129 C9           	RET
 894  512A
 895  512A              .FILLVALUE:
 896  512A 72               LD (HL), D
 897  512B 54               LD D, H
 898  512C 5D               LD E, L
 899  512D 13               INC DE
 900  512E 0B               DEC BC
 901  512F ED B0            LDIR
 902  5131 C9               RET
 903  5132              ; *******************************************************************************************************
 904  5132
 905  5132              ; *******************************************************************************************************
 906  5132              ; function to handle CALL GENCAL basic extension
 907  5132              ; GENCAL ( INT fn_addr, = address of the function to call
 908  5132              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 909  5132              ; output values of reristers will also be stored at reg_list_ptr
 910  5132              GENCAL_VAR_SP:
 911  5132 00 00            DW 0
 912  5134              GENCAL_VAR_SP2:
 913  5134 00 00            DW 0
 914  5136              GENCAL:
 915  5136              	; opening (
 916  5136 CD 2F 50     	CALL CHKCHAR
 917  5139 28           	DB '('
 918  513A              	; get function address
 919  513A DD 21 2F 54  	LD IX, FRMQNT
 920  513E CD 59 01     	CALL CALBAS
 921  5141 D5           	PUSH DE
 922  5142              	; comma
 923  5142 CD 2F 50     	CALL CHKCHAR
 924  5145 2C           	DB ','
 925  5146              	; get pointer to register list
 926  5146 DD 21 2F 54  	LD IX, FRMQNT
 927  514A CD 59 01     	CALL CALBAS
 928  514D D5           	PUSH DE
 929  514E              	; ending )
 930  514E CD 2F 50     	CALL CHKCHAR
 931  5151 29           	DB ')'
 932  5152
 933  5152              	; save BASIC token position
 934  5152 E5           	PUSH HL
 935  5153 D9               EXX
 936  5154 E1           	POP HL ; HL'=next basic token
 937  5155 D9               EXX
 938  5156
 939  5156 E1               POP HL ; get pointer to register values
 940  5157 ED 73 32 51      LD (GENCAL_VAR_SP), SP
 941  515B F3               DI
 942  515C F9               LD SP, HL
 943  515D F1               POP AF
 944  515E C1               POP BC
 945  515F D1               POP DE
 946  5160 E1               POP HL
 947  5161 DD E1            POP IX
 948  5163 FD E1            POP IY
 949  5165 D9               EXX
 950  5166 ED 73 34 51      LD (GENCAL_VAR_SP2), SP
 951  516A ED 7B 32 51      LD SP, (GENCAL_VAR_SP)
 952  516E FB               EI
 953  516F D1               POP DE ; get function to call
 954  5170 E5               PUSH HL
 955  5171 CD 8C 51         CALL .EXXDECALL
 956  5174 F3               DI
 957  5175 ED 73 32 51      LD (GENCAL_VAR_SP), SP
 958  5179 ED 7B 34 51      LD SP, (GENCAL_VAR_SP2)
 959  517D FD E5            PUSH IY
 960  517F DD E5            PUSH IX
 961  5181 E5               PUSH HL
 962  5182 D5               PUSH DE
 963  5183 C5               PUSH BC
 964  5184 F5               PUSH AF
 965  5185 ED 7B 32 51      LD SP, (GENCAL_VAR_SP)
 966  5189 FB               EI
 967  518A E1               POP HL
 968  518B C9           	RET
 969  518C
 970  518C              .EXXDECALL:
 971  518C D5               PUSH DE
 972  518D D9               EXX
 973  518E C9               RET
 974  518F              ; *******************************************************************************************************
 975  518F
 976  518F              ; *******************************************************************************************************
 977  518F              ; function to handle CALL MEMVRM basic extension
 978  518F              ; copies from RAM to VRAM
 979  518F              ; _MEMVRM ( INT source,
 980  518F              ;			INT destination,
 981  518F              ;			INT count,
 982  518F              ;			BYTE wait_vsync) >0 = treu
 983  518F              ; will put ram in page 0 also, page 1 is already there
 984  518F              ; wait_vsync will issue HALT before copying
 985  518F              MEMVRM:
 986  518F              	; opening (
 987  518F CD 2F 50     	CALL CHKCHAR
 988  5192 28           	DB '('
 989  5193              	; get source address
 990  5193 DD 21 2F 54  	LD IX, FRMQNT
 991  5197 CD 59 01     	CALL CALBAS
 992  519A D5           	PUSH DE
 993  519B              	; comma
 994  519B CD 2F 50     	CALL CHKCHAR
 995  519E 2C           	DB ','
 996  519F              	; get destination address
 997  519F DD 21 2F 54  	LD IX, FRMQNT
 998  51A3 CD 59 01     	CALL CALBAS
 999  51A6 D5           	PUSH DE
1000  51A7              	; comma
1001  51A7 CD 2F 50     	CALL CHKCHAR
1002  51AA 2C           	DB ','
1003  51AB              	; get length
1004  51AB DD 21 2F 54  	LD IX, FRMQNT
1005  51AF CD 59 01     	CALL CALBAS
1006  51B2 D5           	PUSH DE
1007  51B3              	; comma
1008  51B3 CD 2F 50     	CALL CHKCHAR
1009  51B6 2C           	DB ','
1010  51B7              	; get vsync wait
1011  51B7 DD 21 1C 52  	LD IX, GETBYT
1012  51BB CD 59 01     	CALL CALBAS
1013  51BE F5           	PUSH AF
1014  51BF              	; ending )
1015  51BF CD 2F 50     	CALL CHKCHAR
1016  51C2 29           	DB ')'
1017  51C3
1018  51C3                  ; save position in BASIC text
1019  51C3 E5           	PUSH HL
1020  51C4 DD E1        	POP IX
1021  51C6
1022  51C6 F1           	POP AF ; wait vsync
1023  51C7 B7           	OR A
1024  51C8 28 03        	JR Z, .L1
1025  51CA FB               EI
1026  51CB 76           	HALT
1027  51CC F3           	DI
1028  51CD              .L1:
1029  51CD              	; pop LDIR parameters and store away for later
1030  51CD C1           	POP BC ; count
1031  51CE D1           	POP DE ; vram destination
1032  51CF E1           	POP HL ; ram source
1033  51D0 D9           	EXX
1034  51D1 FD 21 D8 51   	LD IY, .RET
1035  51D5 C3 D2 4E     	JP ENABLE_PAGE0
1036  51D8              .RET:
1037  51D8 FB           	EI
1038  51D9 D9           	EXX
1039  51DA CD E6 51     	CALL .LDIRVM
1040  51DD D1               POP DE
1041  51DE C1               POP BC
1042  51DF CD 49 4E         CALL RESTORE_PAGE_INFO
1043  51E2 DD E5        	PUSH IX
1044  51E4 E1           	POP HL
1045  51E5 C9           	RET
1046  51E6
1047  51E6              .LDIRVM:
1048  51E6 EB           	EX DE, HL
1049  51E7 CD 07 4E     	CALL SETWRT_LOCAL
1050  51EA EB           	EX DE, HL
1051  51EB 78           	LD A, B
1052  51EC B7           	OR A
1053  51ED 28 0D        	JR Z, .L3
1054  51EF C5           	PUSH BC
1055  51F0 0E 98        	LD C, #98
1056  51F2              .L2:
1057  51F2 50           	LD D, B
1058  51F3 06 00        	LD B, 0
1059  51F5 CD 02 52     	CALL .BBYTECOPY
1060  51F8 42           	LD B, D
1061  51F9 10 F7        	DJNZ .L2
1062  51FB C1           	POP BC
1063  51FC              .L3:
1064  51FC 79           	LD A, C
1065  51FD B7           	OR A
1066  51FE C8           	RET Z
1067  51FF 41           	LD B, C
1068  5200 0E 98        	LD C, #98
1069  5202              .BBYTECOPY:
1070  5202 ED A3        	OUTI
1071  5204 C2 02 52     	JP	NZ, .BBYTECOPY
1072  5207 C9           	RET
1073  5208              ; *******************************************************************************************************
1074  5208
1075  5208              ; *******************************************************************************************************
1076  5208              ; function to handle CALL VRMMEM basic extension
1077  5208              ; copies from RAM to VRAM
1078  5208              ; _VRMMEM ( INT source,
1079  5208              ;			INT destination,
1080  5208              ;			INT count
1081  5208              ; will put ram in page 0 also, page 1 is already there
1082  5208              VRMMEM:
1083  5208              	; opening (
1084  5208 CD 2F 50     	CALL CHKCHAR
1085  520B 28           	DB '('
1086  520C              	; get source address
1087  520C DD 21 2F 54  	LD IX, FRMQNT
1088  5210 CD 59 01     	CALL CALBAS
1089  5213 D5           	PUSH DE
1090  5214              	; comma
1091  5214 CD 2F 50     	CALL CHKCHAR
1092  5217 2C           	DB ','
1093  5218              	; get destination address
1094  5218 DD 21 2F 54  	LD IX, FRMQNT
1095  521C CD 59 01     	CALL CALBAS
1096  521F D5           	PUSH DE
1097  5220              	; comma
1098  5220 CD 2F 50     	CALL CHKCHAR
1099  5223 2C           	DB ','
1100  5224              	; get length
1101  5224 DD 21 2F 54  	LD IX, FRMQNT
1102  5228 CD 59 01     	CALL CALBAS
1103  522B D5           	PUSH DE
1104  522C              	; ending )
1105  522C CD 2F 50     	CALL CHKCHAR
1106  522F 29           	DB ')'
1107  5230
1108  5230                  ; save position in BASIC text
1109  5230 E5           	PUSH HL
1110  5231 DD E1        	POP IX
1111  5233
1112  5233 C1           	POP BC ; count
1113  5234 D1           	POP DE ; destination
1114  5235 E1           	POP HL ; source
1115  5236 D9           	EXX
1116  5237 FD 21 3E 52  	LD IY, .RET
1117  523B C3 D2 4E     	JP ENABLE_PAGE0
1118  523E              .RET:
1119  523E FB           	EI
1120  523F D9           	EXX
1121  5240 CD 4C 52     	CALL .LDIRMV
1122  5243 D1               POP DE
1123  5244 C1               POP BC
1124  5245 CD 49 4E         CALL RESTORE_PAGE_INFO
1125  5248 DD E5        	PUSH IX
1126  524A E1           	POP HL
1127  524B C9           	RET
1128  524C
1129  524C              .LDIRMV:
1130  524C CD 07 4E     	CALL SETWRT_LOCAL
1131  524F              .L4:
1132  524F DB 98            IN A, (#98)
1133  5251 12           	LD (DE), A
1134  5252 13               INC DE
1135  5253 0B               DEC BC
1136  5254 79               LD A, C
1137  5255 B0               OR B
1138  5256 C2 4F 52         JP NZ, .L4
1139  5259 C9               RET
1140  525A              ; *******************************************************************************************************
1141  525A
1142  525A              ; *******************************************************************************************************
1143  525A              ; H.TIMI function
1144  525A              MBGE_HTIMI:
1145  525A               EXPORT MBGE_HTIMI
1146  525A F5           	PUSH AF
1147  525B
1148  525B CD E2 4E     	CALL SPRATR_UPDATE
1149  525E
1150  525E 3A F5 4C     	LD A, (SOUND_ENABLED)
1151  5261 B7           	OR A
1152  5262 28 2A        	JR Z, .EXIT
1153  5264
1154  5264              	; enable page 2
1155  5264 3E 02            LD A, 2
1156  5266 CD 12 4E         CALL GET_PAGE_INFO
1157  5269 C5               PUSH BC
1158  526A D5               PUSH DE
1159  526B 3A 43 F3         LD A, (RAMAD2)
1160  526E 26 80            LD H, 080H
1161  5270 CD 59 4E         CALL LOCAL_ENASLT
1162  5273              	; enable page 0
1163  5273 AF               XOR A
1164  5274 CD 12 4E         CALL GET_PAGE_INFO
1165  5277 C5               PUSH BC
1166  5278 D5               PUSH DE
1167  5279 3A 41 F3         LD A, (RAMAD0)
1168  527C 26 00            LD H, 0
1169  527E CD 59 4E         CALL LOCAL_ENASLT
1170  5281
1171  5281 CD 31 42     	CALL PLY_AKG_PLAY
1172  5284
1173  5284              	; restore page 0
1174  5284 D1               POP DE
1175  5285 C1               POP BC
1176  5286 CD 49 4E         CALL RESTORE_PAGE_INFO
1177  5289              	; restore page 2
1178  5289 D1               POP DE
1179  528A C1               POP BC
1180  528B CD 49 4E         CALL RESTORE_PAGE_INFO
1181  528E
1182  528E              .EXIT:
1183  528E F1           	POP AF
1184  528F C3 EE 4C     	JP ORIG.HTIMI
1185  5292              ; *******************************************************************************************************
1186  5292
1187  5292              ; *******************************************************************************************************
1188  5292              ; interrupt handler when page 0 enabled
1189  5292              VBLANK:
1190  5292              	EXPORT VBLANK
1191  5292
1192  5292 F5               PUSH AF
1193  5293              	; is VDP originator ?
1194  5293 DB 99        	IN	A, (099H)
1195  5295 A7           	AND	A
1196  5296 F2 BC 52     	JP P, .EXIT
1197  5299 3A F5 4C     	LD A, (SOUND_ENABLED)
1198  529C B7           	OR A
1199  529D 28 1D        	JR Z, .EXIT
1200  529F
1201  529F C5               PUSH BC
1202  52A0 D5               PUSH DE
1203  52A1 E5               PUSH HL
1204  52A2 08               EX AF, AF'
1205  52A3 D9               EXX
1206  52A4 F5               PUSH AF
1207  52A5 C5               PUSH BC
1208  52A6 D5               PUSH DE
1209  52A7 E5               PUSH HL
1210  52A8 DD E5            PUSH IX
1211  52AA FD E5            PUSH IY
1212  52AC
1213  52AC CD 31 42     	CALL PLY_AKG_PLAY
1214  52AF
1215  52AF FD E1            POP IY
1216  52B1 DD E1            POP IX
1217  52B3 E1               POP HL
1218  52B4 D1               POP DE
1219  52B5 C1               POP BC
1220  52B6 F1               POP AF
1221  52B7 08               EX AF, AF'
1222  52B8 D9               EXX
1223  52B9 E1               POP HL
1224  52BA D1               POP DE
1225  52BB C1               POP BC
1226  52BC              .EXIT:
1227  52BC F1           	POP AF
1228  52BD FB           	EI
1229  52BE ED 4D        	RETI
1230  52C0              ; *******************************************************************************************************
1231  52C0
1232  52C0              ; *******************************************************************************************************
1233  52C0              ; function to handle CALL SNDPLYINIT basic extension
1234  52C0              ; initializes sound player
1235  52C0              ; _SNDPLYINIT ( INT music_offset,
1236  52C0              ;				INT sfx_offset, can be -1 if no SFX
1237  52C0              ; will put ram in page 0 also, page 1 is already there
1238  52C0              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1239  52C0              SNDPLYINIT:
1240  52C0              	; opening (
1241  52C0 CD 2F 50     	CALL CHKCHAR
1242  52C3 28           	DB '('
1243  52C4              	; get music address
1244  52C4 DD 21 2F 54  	LD IX, FRMQNT
1245  52C8 CD 59 01     	CALL CALBAS
1246  52CB D5           	PUSH DE
1247  52CC              	; comma
1248  52CC CD 2F 50     	CALL CHKCHAR
1249  52CF 2C           	DB ','
1250  52D0              	; get sfx address
1251  52D0 DD 21 2F 54  	LD IX, FRMQNT
1252  52D4 CD 59 01     	CALL CALBAS
1253  52D7 D5           	PUSH DE
1254  52D8              	; ending )
1255  52D8 CD 2F 50     	CALL CHKCHAR
1256  52DB 29           	DB ')'
1257  52DC
1258  52DC                  ; save position in BASIC text
1259  52DC 44           	LD B, H
1260  52DD 4D           	LD C, L
1261  52DE
1262  52DE              	; pop LDIR parameters and store away for later
1263  52DE D1           	POP DE ; sfx address
1264  52DF E1           	POP HL ; music address
1265  52E0 C5           	PUSH BC ; basic text location
1266  52E1 D9           	EXX
1267  52E2 FD 21 E9 52  	LD IY, .RET
1268  52E6 C3 D2 4E     	JP ENABLE_PAGE0
1269  52E9              .RET:
1270  52E9 D9           	EXX
1271  52EA
1272  52EA D5           	PUSH DE
1273  52EB AF           	XOR A
1274  52EC              	; HL = music location
1275  52EC CD 60 41     	CALL PLY_AKG_INIT
1276  52EF 3E 01        	LD A, 1
1277  52F1 32 F3 4C     	LD (MUSIC_INIT_STATUS), A
1278  52F4
1279  52F4 E1           	POP HL ; SFX
1280  52F5              	; check if SFX address -1
1281  52F5 23           	INC HL
1282  52F6 7D           	LD A, L
1283  52F7 B4           	OR H
1284  52F8 28 09        	JR Z,.L1
1285  52FA 2B           	DEC HL
1286  52FB CD 1B 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1287  52FE 3E 01        	LD A, 1
1288  5300 32 F4 4C     	LD (SFX_INIT_STATUS), A
1289  5303              .L1:
1290  5303 D1               POP DE
1291  5304 C1               POP BC
1292  5305 CD 49 4E         CALL RESTORE_PAGE_INFO
1293  5308
1294  5308 E1           	POP HL
1295  5309 C9           	RET
1296  530A              ; *******************************************************************************************************
1297  530A
1298  530A              ; *******************************************************************************************************
1299  530A              ; function to handle CALL SNDPLYON basic extension
1300  530A              ; enables sound player
1301  530A              ; _SNDPLYON
1302  530A              ; sets SOUND_ENABLED variable to 1 if init call was done
1303  530A              ; if not throws out of data error
1304  530A              SNDPLYON:
1305  530A 3A F3 4C     	LD A, (MUSIC_INIT_STATUS)
1306  530D B7           	OR A
1307  530E 20 05        	JR NZ, .L1
1308  5310              	; player not initialized, throw error
1309  5310 1E 04        	LD E, 04 ; Out of DATA
1310  5312 C3 47 50     	JP THROW_ERROR
1311  5315              .L1:
1312  5315 32 F5 4C     	LD (SOUND_ENABLED), A
1313  5318              	; disable key click
1314  5318 AF           	XOR A
1315  5319 32 DB F3     	LD (CLIKSW), A
1316  531C C9           	RET
1317  531D              ; *******************************************************************************************************
1318  531D
1319  531D              ; *******************************************************************************************************
1320  531D              ; function to handle CALL SNDPLYOFF basic extension
1321  531D              ; disables sound player
1322  531D              ; _SNDPLYOFF
1323  531D              ; sets SOUND_ENABLED variable to 0
1324  531D              ; calls AKG to stop music and SFX on all channels if initialized
1325  531D              SNDPLYOFF:
1326  531D 3A F5 4C     	LD A, (SOUND_ENABLED)
1327  5320 B7           	OR A
1328  5321 C8           	RET Z ; already stopped
1329  5322 AF           	XOR A
1330  5323 32 F5 4C     	LD (SOUND_ENABLED), A
1331  5326 E5           	PUSH HL
1332  5327 CD 1F 42     	CALL PLY_AKG_STOP
1333  532A 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1334  532D B7           	OR A
1335  532E 28 0E        	JR Z, .EXIT ; SFX not in use
1336  5330 AF           	XOR A
1337  5331 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1338  5334 3E 01        	LD A, 1
1339  5336 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1340  5339 3E 02        	LD A, 2
1341  533B CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1342  533E              .EXIT:
1343  533E E1           	POP HL
1344  533F C9           	RET
1345  5340              ; *******************************************************************************************************
1346  5340
1347  5340              ; *******************************************************************************************************
1348  5340              ; function to handle CALL SNDSFX basic extension
1349  5340              ; plays a sound effect
1350  5340              ; _SNDSFX ( BYTE sfx_number, >0
1351  5340              ;			BYTE channel, = 0,1 or 2
1352  5340              ;			BYTE inverted_volume = 0-16, 0 being full volume
1353  5340              ; will put ram in page 0 also, page 1 is already there
1354  5340              ; if sound off throws illegal function call
1355  5340              ; if sfx not initialized, throws out of data
1356  5340              SNDSFX:
1357  5340              	; opening (
1358  5340 CD 2F 50     	CALL CHKCHAR
1359  5343 28           	DB '('
1360  5344              	; get sfx_number
1361  5344 DD 21 1C 52  	LD IX, GETBYT
1362  5348 CD 59 01     	CALL CALBAS
1363  534B D5           	PUSH DE
1364  534C              	; comma
1365  534C CD 2F 50     	CALL CHKCHAR
1366  534F 2C           	DB ','
1367  5350              	; get sfx address
1368  5350 DD 21 1C 52  	LD IX, GETBYT
1369  5354 CD 59 01     	CALL CALBAS
1370  5357 D5           	PUSH DE
1371  5358              	; comma
1372  5358 CD 2F 50     	CALL CHKCHAR
1373  535B 2C           	DB ','
1374  535C              	; get inverted volume
1375  535C DD 21 1C 52  	LD IX, GETBYT
1376  5360 CD 59 01     	CALL CALBAS
1377  5363 D5           	PUSH DE
1378  5364              	; ending )
1379  5364 CD 2F 50     	CALL CHKCHAR
1380  5367 29           	DB ')'
1381  5368
1382  5368 3A F5 4C     	LD A, (SOUND_ENABLED)
1383  536B B7           	OR A
1384  536C 20 05        	JR NZ, .L1
1385  536E              	; sound disabled, throw illegal function call
1386  536E 1E 05        	LD E, 5
1387  5370 C3 47 50     	JP THROW_ERROR
1388  5373              .L1:
1389  5373 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1390  5376 B7           	OR A
1391  5377 20 05        	JR NZ, .L2
1392  5379              	; sfx data not initialized, throw out of data
1393  5379 1E 04        	LD E, 4
1394  537B C3 47 50     	JP THROW_ERROR
1395  537E              .L2:
1396  537E              	; pop  parameters and store away for later
1397  537E D1           	POP DE ; inverted volume
1398  537F 43           	LD B, E
1399  5380 D1           	POP DE ; channel
1400  5381 4B           	LD C, E
1401  5382 D1           	POP DE
1402  5383 7B           	LD A, E
1403  5384 08           	EX AF, AF'
1404  5385 E5           	PUSH HL ; basic text location
1405  5386 D9           	EXX
1406  5387 FD 21 8E 53  	LD IY, .RET
1407  538B C3 D2 4E     	JP ENABLE_PAGE0
1408  538E              .RET:
1409  538E D9           	EXX
1410  538F 08           	EX AF, AF'
1411  5390 CD 1F 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1412  5393
1413  5393 D1               POP DE
1414  5394 C1               POP BC
1415  5395 CD 49 4E         CALL RESTORE_PAGE_INFO
1416  5398
1417  5398 E1           	POP HL
1418  5399 C9           	RET
1419  539A              ; *******************************************************************************************************
1420  539A
1421  539A              ; *******************************************************************************************************
1422  539A              ; function to handle CALL SPRATRINI basic extension
1423  539A              ; initializes sprites handler
1424  539A              ; _SPRATRINI ( INT sprites_attributes_data,
1425  539A              ;			   INT update_variable_location )
1426  539A              ; expects both locations to be in range #8000+ or throws an error
1427  539A              ; since these should be BASIC variables
1428  539A              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA
1429  539A              SPRATRINI:
1430  539A              	; opening (
1431  539A CD 2F 50     	CALL CHKCHAR
1432  539D 28           	DB '('
1433  539E              	; get address of sprite attribute table DIM SA%(3,31)
1434  539E DD 21 2F 54  	LD IX, FRMQNT
1435  53A2 CD 59 01     	CALL CALBAS
1436  53A5 D5           	PUSH DE
1437  53A6              	; comma
1438  53A6 CD 2F 50     	CALL CHKCHAR
1439  53A9 2C           	DB ','
1440  53AA              	; get update variable location SU%
1441  53AA DD 21 2F 54  	LD IX, FRMQNT
1442  53AE CD 59 01     	CALL CALBAS
1443  53B1 D5           	PUSH DE
1444  53B2              	; ending )
1445  53B2 CD 2F 50     	CALL CHKCHAR
1446  53B5 29           	DB ')'
1447  53B6
1448  53B6 D1           	POP DE ; update variable location
1449  53B7 CB 7A        	BIT 7, D ; is address >= &h8000
1450  53B9 20 05        	JR NZ, .L1
1451  53BB 1E 05        	LD E, 5 ; illegal function call
1452  53BD C3 47 50     	JP THROW_ERROR
1453  53C0              .L1:
1454  53C0 ED 53 F7 4C  	LD (SPRATR_UPDATE_FLAG), DE
1455  53C4 D1           	POP DE ; address of sprite attribute table
1456  53C5 CB 7A        	BIT 7, D ; is address >= &h8000
1457  53C7 20 05        	JR NZ, .L2
1458  53C9 1E 05        	LD E, 5 ; illegal function call
1459  53CB C3 47 50     	JP THROW_ERROR
1460  53CE              .L2:
1461  53CE ED 53 F9 4C  	LD (SPRATR_DATA), DE
1462  53D2 3E 01        	LD A, 1
1463  53D4 32 F6 4C     	LD (SPRATR_INIT_STATUS), A
1464  53D7 C9           	RET
1465  53D8              ; *******************************************************************************************************
1466  53D8
1467  53D8              ; *******************************************************************************************************
1468  53D8              ; function to handle CALL SPRSET basic extension
1469  53D8              ; sets position, and optionally pattern and color of sprite
1470  53D8              ; _SPRSET ( BYTE sprite_num , valid 0-31
1471  53D8              ;			INT x,
1472  53D8              ;			INT y,
1473  53D8              ;			INT pattern, valid 0-31, otherwise ignored
1474  53D8              ;			INT color, valid 0-15, otherwise ignored
1475  53D8              SPRSET:
1476  53D8 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1477  53DB B7           	OR A
1478  53DC 20 05        	JR NZ, .L1
1479  53DE 1E 05        	LD E, 5 ; illegal function call
1480  53E0 C3 47 50     	JP THROW_ERROR
1481  53E3              .L1:
1482  53E3              	; opening (
1483  53E3 CD 2F 50     	CALL CHKCHAR
1484  53E6 28           	DB '('
1485  53E7              	; get sprite number
1486  53E7 DD 21 1C 52  	LD IX, GETBYT
1487  53EB CD 59 01     	CALL CALBAS
1488  53EE F5           	PUSH AF
1489  53EF              	; comma
1490  53EF CD 2F 50     	CALL CHKCHAR
1491  53F2 2C           	DB ','
1492  53F3              	; get x
1493  53F3 DD 21 2F 54  	LD IX, FRMQNT
1494  53F7 CD 59 01     	CALL CALBAS
1495  53FA D5           	PUSH DE
1496  53FB              	; comma
1497  53FB CD 2F 50     	CALL CHKCHAR
1498  53FE 2C           	DB ','
1499  53FF              	; get y
1500  53FF DD 21 2F 54  	LD IX, FRMQNT
1501  5403 CD 59 01     	CALL CALBAS
1502  5406 D5           	PUSH DE
1503  5407              	; comma
1504  5407 CD 2F 50     	CALL CHKCHAR
1505  540A 2C           	DB ','
1506  540B              	; get pattern
1507  540B DD 21 2F 54  	LD IX, FRMQNT
1508  540F CD 59 01     	CALL CALBAS
1509  5412 D5           	PUSH DE
1510  5413              	; comma
1511  5413 CD 2F 50     	CALL CHKCHAR
1512  5416 2C           	DB ','
1513  5417              	; get color
1514  5417 DD 21 2F 54  	LD IX, FRMQNT
1515  541B CD 59 01     	CALL CALBAS
1516  541E D5           	PUSH DE
1517  541F              	; ending )
1518  541F CD 2F 50     	CALL CHKCHAR
1519  5422 29           	DB ')'
1520  5423
1521  5423                  ; save position in BASIC text
1522  5423 E5           	PUSH HL
1523  5424 DD E1        	POP IX
1524  5426
1525  5426 C1           	POP BC ; color
1526  5427 D1           	POP DE ; pattern
1527  5428 D9           	EXX
1528  5429 C1           	POP BC ; y
1529  542A D1           	POP DE ; x
1530  542B F1           	POP AF ; sprite number
1531  542C FE 20        	CP 32
1532  542E 38 05        	JR C, .L2
1533  5430 1E 05        	LD E, 5 ; illegal function call
1534  5432 C3 47 50     	JP THROW_ERROR
1535  5435              .L2:
1536  5435              	; find location in sprite attributes table
1537  5435 87          > ADD A, A
1537  5436 87          > ADD A, A
1537  5437 87          > ADD A, A
1538  5438 D5           	PUSH DE
1539  5439 16 00        	LD D, 0
1540  543B 5F           	LD E, A
1541  543C 2A F9 4C     	LD HL, (SPRATR_DATA)
1542  543F 19           	ADD HL, DE
1543  5440 D1           	POP DE
1544  5441              	; set y
1545  5441 71           	LD (HL), C
1546  5442 23           	INC HL
1547  5443 70           	LD (HL), B
1548  5444 23           	INC HL
1549  5445              	; set x
1550  5445 73           	LD (HL), E
1551  5446 23           	INC HL
1552  5447 72           	LD (HL), D
1553  5448 23           	INC HL
1554  5449 E5           	PUSH HL
1555  544A D9           	EXX
1556  544B E1           	POP HL
1557  544C              	; check if 0<=pattern<32
1558  544C 7A           	LD A, D
1559  544D B7           	OR A
1560  544E 20 0B        	JR NZ, .L3
1561  5450 7D           	LD A, L
1562  5451 FE 20        	CP 32
1563  5453 30 06        	JR NC, .L3
1564  5455              	; set pattern
1565  5455 73           	LD (HL), E
1566  5456 23           	INC HL
1567  5457 72           	LD (HL), D
1568  5458 23           	INC HL
1569  5459 18 02        	JR .L4
1570  545B              .L3:
1571  545B              	; skip pattern
1572  545B 23          > INC HL
1572  545C 23          > INC HL
1573  545D              .L4:
1574  545D              	; check if 0<=color<16
1575  545D 78           	LD A, B
1576  545E B7           	OR A
1577  545F 20 08        	JR NZ, .L5
1578  5461 79           	LD A, C
1579  5462 FE 10        	CP 16
1580  5464 30 03        	JR NC, .L5
1581  5466              	; set color
1582  5466 71           	LD (HL), C
1583  5467 23           	INC HL
1584  5468 70           	LD (HL), B
1585  5469
1586  5469              .L5:
1587  5469 DD E5        	PUSH IX
1588  546B E1           	POP HL
1589  546C C9           	RET
1590  546D              ; *******************************************************************************************************
1591  546D
1592  546D              ; *******************************************************************************************************
1593  546D              ; function sets sprite location based on initial coordinates and offset provided
1594  546D              ; input A=sprite number in SPRATR_DATA , 0-31
1595  546D              ; input DE=initial x
1596  546D              ; input BC=initial y
1597  546D              ; input IY=location where delta y,x are located
1598  546D              ; modifies AF, HL, IX
1599  546D              SPRSET_DELTA_POS:
1600  546D 87          > ADD A, A
1600  546E 87          > ADD A, A
1600  546F 87          > ADD A, A
1601  5470 D5           	PUSH DE
1602  5471 16 00        	LD D, 0
1603  5473 5F           	LD E, A
1604  5474 DD 2A F9 4C  	LD IX, (SPRATR_DATA)
1605  5478 DD 19        	ADD IX, DE
1606  547A D1           	POP DE
1607  547B              	; IX=sprite's y location
1608  547B FD 6E 00     	LD L, (IY)
1609  547E FD 66 01     	LD H, (IY+1)
1610  5481 09           	ADD HL, BC
1611  5482 DD 75 00     	LD (IX), L
1612  5485 DD 74 01     	LD (IX+1), H
1613  5488 FD 6E 02     	LD L, (IY+2)
1614  548B FD 66 03     	LD H, (IY+3)
1615  548E 19           	ADD HL, DE
1616  548F DD 75 02     	LD (IX+2), L
1617  5492 DD 74 03     	LD (IX+3), H
1618  5495 C9           	RET
1619  5496              ; *******************************************************************************************************
1620  5496
1621  5496              ; *******************************************************************************************************
1622  5496              ; function to handle CALL SPRGRPMOV basic extension
1623  5496              ; sets position of a group of sprites described with
1624  5496              ; { int sprite_num, int delta_y, int delta_x } [count]
1625  5496              ; _SPRGRPMOV ( INT x,
1626  5496              ;			   INT y,
1627  5496              ;			   INT data_ptr,
1628  5496              ;			   BYTE count,
1629  5496              ; will put ram in page 0 also, page 1 is already there
1630  5496              SPRGRPMOV:
1631  5496 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1632  5499 B7           	OR A
1633  549A 20 05        	JR NZ, .L1
1634  549C 1E 05        	LD E, 5 ; illegal function call
1635  549E C3 47 50     	JP THROW_ERROR
1636  54A1              .L1:
1637  54A1              	; opening (
1638  54A1 CD 2F 50     	CALL CHKCHAR
1639  54A4 28           	DB '('
1640  54A5              	; get x
1641  54A5 DD 21 2F 54  	LD IX, FRMQNT
1642  54A9 CD 59 01     	CALL CALBAS
1643  54AC D5           	PUSH DE
1644  54AD              	; comma
1645  54AD CD 2F 50     	CALL CHKCHAR
1646  54B0 2C           	DB ','
1647  54B1              	; get y
1648  54B1 DD 21 2F 54  	LD IX, FRMQNT
1649  54B5 CD 59 01     	CALL CALBAS
1650  54B8 D5           	PUSH DE
1651  54B9              	; comma
1652  54B9 CD 2F 50     	CALL CHKCHAR
1653  54BC 2C           	DB ','
1654  54BD              	; get data pointer
1655  54BD DD 21 2F 54  	LD IX, FRMQNT
1656  54C1 CD 59 01     	CALL CALBAS
1657  54C4 D5           	PUSH DE
1658  54C5              	; comma
1659  54C5 CD 2F 50     	CALL CHKCHAR
1660  54C8 2C           	DB ','
1661  54C9              	; get count
1662  54C9 DD 21 1C 52  	LD IX, GETBYT
1663  54CD CD 59 01     	CALL CALBAS
1664  54D0 F5           	PUSH AF
1665  54D1              	; ending )
1666  54D1 CD 2F 50     	CALL CHKCHAR
1667  54D4 29           	DB ')'
1668  54D5
1669  54D5 E5           	PUSH HL
1670  54D6 DD E1        	POP IX
1671  54D8
1672  54D8 C1           	POP BC ; count
1673  54D9 E1           	POP HL ; data pointer
1674  54DA D9           	EXX
1675  54DB C1           	POP BC ; y
1676  54DC D1           	POP DE ; x
1677  54DD D9           	EXX
1678  54DE
1679  54DE DD E5        	PUSH IX ; save position in BASIC buffer
1680  54E0
1681  54E0 C5           	PUSH BC
1682  54E1 E5           	PUSH HL
1683  54E2 AF               XOR A
1684  54E3 CD 12 4E         CALL GET_PAGE_INFO
1685  54E6 D9           	EXX
1686  54E7 E1           	POP HL
1687  54E8 F1           	POP AF
1688  54E9 D9           	EXX
1689  54EA C5               PUSH BC
1690  54EB D5               PUSH DE
1691  54EC D9           	EXX
1692  54ED F5           	PUSH AF
1693  54EE E5           	PUSH HL
1694  54EF D9           	EXX
1695  54F0 3A 41 F3         LD A, (RAMAD0)
1696  54F3 26 00            LD H, 0
1697  54F5 CD 59 4E         CALL LOCAL_ENASLT
1698  54F8 FB           	EI
1699  54F9 E1           	POP HL
1700  54FA C1           	POP BC
1701  54FB CD 05 55     	CALL .UPDATE_LOC
1702  54FE D1               POP DE
1703  54FF C1               POP BC
1704  5500 CD 49 4E         CALL RESTORE_PAGE_INFO
1705  5503 E1           	POP HL
1706  5504 C9           	RET
1707  5505
1708  5505              .UPDATE_LOC:
1709  5505              .L4:
1710  5505 7E           	LD A, (HL)
1711  5506 23           	INC HL
1712  5507 23           	INC HL
1713  5508 E5           	PUSH HL
1714  5509 FD E1        	POP IY
1715  550B D9           	EXX
1716  550C CD 6D 54     	CALL SPRSET_DELTA_POS
1717  550F D9           	EXX
1718  5510 23          > INC HL
1718  5511 23          > INC HL
1718  5512 23          > INC HL
1718  5513 23          > INC HL
1719  5514 10 EF        	DJNZ .L4
1720  5516 C9           	RET
1721  5517              ; *******************************************************************************************************
1722  5517
1723  5517              ; *******************************************************************************************************
1724  5517              ; function rotates mask and data of several characters and applies to background data
1725  5517              ; this handles x-shift from 0 to 4
1726  5517              ; contains self-modifying code that is set-up from external function
1727  5517              ; input HL=pointer to mask data
1728  5517              ; input HL'=pointer to character data
1729  5517              ; input DE=output buffer containing background data
1730  5517              ; input BC=DE+8
1731  5517              ; input A=number of characters to process
1732  5517              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1733  5517              SHIFT04:
1734  5517 08           	EX AF, AF'
1735  5518 7E           	LD A, (HL) ; get mask
1736  5519 D9           	EXX
1737  551A 57           	LD D, A
1738  551B 1E FF        	LD E, #FF
1739  551D 37           	SCF
1740  551E              .M1:
1741  551E 18 FE        	JR .M1 ; this is self-modifying part
1742  5520 CB 1A        	RR D
1743  5522 CB 1B        	RR E
1744  5524 CB 1A        	RR D
1745  5526 CB 1B        	RR E
1746  5528 CB 1A        	RR D
1747  552A CB 1B        	RR E
1748  552C CB 1A        	RR D
1749  552E CB 1B        	RR E
1750  5530
1751  5530 46           	LD B, (HL)
1752  5531 0E 00        	LD C, 0
1753  5533              .M2:
1754  5533 18 FE        	JR .M2 ; also self-modifying part
1755  5535 CB 38        	SRL B
1756  5537 CB 19        	RR C
1757  5539 CB 38        	SRL B
1758  553B CB 19        	RR C
1759  553D CB 38        	SRL B
1760  553F CB 19        	RR C
1761  5541 CB 38        	SRL B
1762  5543 CB 19        	RR C
1763  5545
1764  5545 D9           	EXX
1765  5546 1A           	LD A, (DE) ; background
1766  5547 D9           	EXX
1767  5548 A2           	AND D
1768  5549 B0           	OR B
1769  554A D9           	EXX
1770  554B 12           	LD (DE), A
1771  554C
1772  554C 0A           	LD A, (BC)
1773  554D D9           	EXX
1774  554E A3           	AND E
1775  554F B1           	OR C
1776  5550 23           	INC HL
1777  5551 D9           	EXX
1778  5552 02           	LD (BC), A
1779  5553
1780  5553 23           	INC HL
1781  5554 13           	INC DE
1782  5555 03           	INC BC
1783  5556
1784  5556 08           	EX AF, AF'
1785  5557 3D           	DEC A
1786  5558 C2 17 55     	JP NZ, SHIFT04
1787  555B C9           	RET
1788  555C              ; *******************************************************************************************************
1789  555C
1790  555C              ; *******************************************************************************************************
1791  555C              ; function rotates mask and data of several characters and applies to background data
1792  555C              ; this handles x-shift from 5 to 8
1793  555C              ; contains self-modifying code that is set-up from external function
1794  555C              ; input HL=pointer to mask data
1795  555C              ; input HL'=pointer to character data
1796  555C              ; input DE=output buffer containing background data
1797  555C              ; input BC=DE+8
1798  555C              ; input A=number of characters to process
1799  555C              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1800  555C              SHIFT58:
1801  555C 08           	EX AF, AF'
1802  555D 7E           	LD A, (HL) ; get mask
1803  555E D9           	EXX
1804  555F 57           	LD D, A
1805  5560 1E FF        	LD E, #FF
1806  5562 37           	SCF
1807  5563              .M1:
1808  5563 18 FE        	JR .M1 ; this is self-modifying part
1809  5565 CB 12        	RL D
1810  5567 CB 13        	RL E
1811  5569 CB 12        	RL D
1812  556B CB 13        	RL E
1813  556D CB 12        	RL D
1814  556F CB 13        	RL E
1815  5571
1816  5571 46           	LD B, (HL)
1817  5572 0E 00        	LD C, 0
1818  5574              .M2:
1819  5574 18 FE        	JR .M2 ; also self-modifying part
1820  5576 CB 20        	SLA B
1821  5578 CB 11        	RL C
1822  557A CB 20        	SLA B
1823  557C CB 11        	RL C
1824  557E CB 20        	SLA B
1825  5580 CB 11        	RL C
1826  5582
1827  5582 D9           	EXX
1828  5583 1A           	LD A, (DE) ; background
1829  5584 D9           	EXX
1830  5585 A3           	AND E
1831  5586 B1           	OR C
1832  5587 D9           	EXX
1833  5588 12           	LD (DE), A
1834  5589
1835  5589 0A           	LD A, (BC)
1836  558A D9           	EXX
1837  558B A2           	AND D
1838  558C B0           	OR B
1839  558D 23           	INC HL
1840  558E D9           	EXX
1841  558F 02           	LD (BC), A
1842  5590
1843  5590 23           	INC HL
1844  5591 13           	INC DE
1845  5592 03           	INC BC
1846  5593
1847  5593 08           	EX AF, AF'
1848  5594 3D           	DEC A
1849  5595 C2 5C 55     	JP NZ, SHIFT58
1850  5598 C9           	RET
1851  5599              ; *******************************************************************************************************
1852  5599
1853  5599              ; *******************************************************************************************************
1854  5599              ; routine that shifts one row of characters
1855  5599              ; contains self-modifying code that is set-up from external function
1856  5599              ; input HL=pointer to mask data
1857  5599              ; input HL'=pointer to character data
1858  5599              ; input DE=output buffer containing background data
1859  5599              ; input A=number of characters to process
1860  5599              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1861  5599              SHIFT_ROW:
1862  5599 F5           	PUSH AF
1863  559A ED 53 FE 4C  		LD (BLIT_TMP1), DE
1864  559E E5           		PUSH HL
1865  559F CD DE 55     			CALL .ADDYSHIFT
1866  55A2 E1           		POP HL
1867  55A3 ED 53 00 4D  		LD (BLIT_TMP2), DE ; DE+vertical shift
1868  55A7              .L1:
1869  55A7 3E 08        		LD A, 8
1870  55A9 DD 96 02     		SUB (IX+2) ; y shift
1871  55AC              .CALL1:
1872  55AC CD 00 00     		CALL 0
1873  55AF DD 7E 02     		LD A, (IX+2); y shift
1874  55B2 B7           		OR A
1875  55B3 28 22        		JR Z, .DONE
1876  55B5 ED 5B FE 4C  		LD DE, (BLIT_TMP1)
1877  55B9 E5           		PUSH HL
1878  55BA CD EC 55     			CALL .DETONEXTROW
1879  55BD E1           		POP HL
1880  55BE              .CALL2:
1881  55BE CD 00 00     		CALL 0
1882  55C1 ED 5B FE 4C  		LD DE, (BLIT_TMP1)
1883  55C5 E5           		PUSH HL
1884  55C6 CD E6 55     			CALL .ADD8
1885  55C9 E1           		POP HL
1886  55CA ED 53 FE 4C  		LD (BLIT_TMP1), DE
1887  55CE ED 5B 00 4D  		LD DE, (BLIT_TMP2)
1888  55D2 E5           		PUSH HL
1889  55D3 CD E6 55     			CALL .ADD8
1890  55D6 E1           		POP HL
1891  55D7              .DONE:
1892  55D7 F1           	POP AF
1893  55D8 3D           	DEC A
1894  55D9 C8           	RET Z
1895  55DA F5           	PUSH AF
1896  55DB C3 A7 55     	JP .L1
1897  55DE              .ADDYSHIFT:
1898  55DE EB           	EX DE, HL
1899  55DF 16 00        	LD D, 0
1900  55E1 DD 5E 02     	LD E, (IX+2); y shift
1901  55E4 18 0C        	JR .MOVDEBC
1902  55E6              .ADD8:
1903  55E6 21 08 00     	LD HL, 8
1904  55E9 C3 F2 55     	JP .MOVDEBC
1905  55EC              .DETONEXTROW:
1906  55EC DD 6E 06     	LD L, (IX+6)
1907  55EF DD 66 07     	LD H, (IX+7) ; bkg add to value
1908  55F2              .MOVDEBC:
1909  55F2 19           	ADD HL, DE
1910  55F3 54           	LD D, H
1911  55F4 5D           	LD E, L
1912  55F5 01 08 00     	LD BC, 8
1913  55F8 09           	ADD HL, BC
1914  55F9 44           	LD B, H
1915  55FA 4D           	LD C, L
1916  55FB C9           	RET
1917  55FC              ; *******************************************************************************************************
1918  55FC
1919  55FC              ; *******************************************************************************************************
1920  55FC              ; function rotates mask and character data and applies it to background
1921  55FC              ; input IX=pointer to structure describing input data
1922  55FC              ; +0  DW horizontal shift count 0-7
1923  55FC              ; +2  DW vertical shift count 0-7
1924  55FC              ; +4  DW background data start;
1925  55FC              ; +6  DW background add to value to next row of background data
1926  55FC              ; +8  DW mask data start;
1927  55FC              ; +10  DW character data start;
1928  55FC              ; +12 DW character&mask add to value to next row of data
1929  55FC              ; +14 DW columns (low byte used)
1930  55FC              ; +16 DW rows (low byte used)
1931  55FC              SHIFT_MERGE_CHARACTER:
1932  55FC DD 7E 00     	LD A, (IX) ; shift
1933  55FF FE 05        	CP 5
1934  5601 38 25        	JR C, .RIGHT
1935  5603              	; shifts 5-7, use rotate towards left 1-3
1936  5603 21 5C 55     	LD HL, SHIFT58
1937  5606 22 AD 55     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1938  5609 22 BF 55     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1939  560C D6 05        	SUB 5
1940  560E 28 0D        	JR Z, .L1
1941  5610 87           	ADD A, A
1942  5611 87           	ADD A, A
1943  5612 67           	LD H, A
1944  5613 2E 18        	LD L, #18 ; JR opcode
1945  5615 22 63 55     	LD (SHIFT58.M1), HL
1946  5618 22 74 55     	LD (SHIFT58.M2), HL
1947  561B 18 32        	JR .DO
1948  561D              .L1:
1949  561D 21 00 00     	LD HL, 0 ; 2xNOP opcode
1950  5620 22 63 55     	LD (SHIFT58.M1), HL
1951  5623 22 74 55     	LD (SHIFT58.M2), HL
1952  5626 18 27        	JR .DO
1953  5628              .RIGHT:
1954  5628              	; shifts 0-4, rotate towards right
1955  5628 21 17 55     	LD HL, SHIFT04
1956  562B 22 AD 55     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1957  562E 22 BF 55     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1958  5631 FE 04        	CP 4
1959  5633 28 11        	JR Z, .R1
1960  5635 D6 04        	SUB 4
1961  5637 ED 44        	NEG
1962  5639 87           	ADD A, A
1963  563A 87           	ADD A, A
1964  563B 67           	LD H, A
1965  563C 2E 18        	LD L, #18 ; JR opcode
1966  563E 22 1E 55     	LD (SHIFT04.M1), HL
1967  5641 22 33 55     	LD (SHIFT04.M2), HL
1968  5644 18 09        	JR .DO
1969  5646              .R1:
1970  5646 21 00 00     	LD HL, 0 ; 2xNOP opcode
1971  5649 22 1E 55     	LD (SHIFT04.M1), HL
1972  564C 22 33 55     	LD (SHIFT04.M2), HL
1973  564F              .DO:
1974  564F DD 46 10     	LD B, (IX+16) ; rows
1975  5652 DD 6E 08     	LD L, (IX+8)
1976  5655 DD 66 09     	LD H, (IX+9) ; mask data
1977  5658 DD 5E 04     	LD E, (IX+4)
1978  565B DD 56 05     	LD D, (IX+5) ; background data
1979  565E D9           	EXX
1980  565F DD 6E 0A     	LD L, (IX+10)
1981  5662 DD 66 0B     	LD H, (IX+11) ; character data
1982  5665 D9           	EXX
1983  5666              .LOOP:
1984  5666 C5           	PUSH BC
1985  5667 E5           		PUSH HL
1986  5668 D5           			PUSH DE
1987  5669 D9           				EXX
1988  566A E5           				PUSH HL
1989  566B D9           					EXX
1990  566C DD 7E 0E     					LD A, (IX+14) ; columns
1991  566F              .CALL:
1992  566F CD 99 55     					CALL SHIFT_ROW
1993  5672 E1           				POP HL
1994  5673 DD 5E 0C     				LD E, (IX+12)
1995  5676 DD 56 0D     				LD D, (IX+13) ; char data to next row
1996  5679 19           				ADD HL, DE
1997  567A D9           				EXX
1998  567B E1           			POP HL
1999  567C DD 5E 06     			LD E, (IX+6)
2000  567F DD 56 07     			LD D, (IX+7) ; background to next row
2001  5682 19           			ADD HL, DE
2002  5683 EB           			EX DE, HL
2003  5684 E1           		POP HL
2004  5685 DD 4E 0C     		LD C, (IX+12)
2005  5688 DD 46 0D     		LD B, (IX+13) ; char data to next row
2006  568B 09           		ADD HL, BC
2007  568C C1           	POP BC
2008  568D 10 D7        	DJNZ .LOOP
2009  568F C9           	RET
2010  5690              ; *******************************************************************************************************
2011  5690
2012  5690              ; *******************************************************************************************************
2013  5690              ; function to handle CALL BLIT basic extension
2014  5690              ; rotates 1-bit character drawing horizontally with mask and character data and
2015  5690              ; fuses with background data and applies vertical shift too
2016  5690              ; BLIT ( INT request_data_ptr )
2017  5690              ; request_data_ptr described in SHIFT_MERGE_CHARACTER
2018  5690              ; will put ram in page 0 also, page 1 is already there
2019  5690              BLIT:
2020  5690              	; opening (
2021  5690 CD 2F 50     	CALL CHKCHAR
2022  5693 28           	DB '('
2023  5694              	; get pointer to request struct
2024  5694 DD 21 2F 54  	LD IX, FRMQNT
2025  5698 CD 59 01     	CALL CALBAS
2026  569B D5           	PUSH DE
2027  569C              	; ending )
2028  569C CD 2F 50     	CALL CHKCHAR
2029  569F 29           	DB ')'
2030  56A0
2031  56A0 DD E1        	POP IX ; pointer to request struct
2032  56A2
2033  56A2 E5           	PUSH HL ; save position in BASIC buffer
2034  56A3
2035  56A3 FD 21 AA 56  	LD IY, .RET
2036  56A7 C3 D2 4E     	JP ENABLE_PAGE0
2037  56AA              .RET:
2038  56AA FB           	EI
2039  56AB CD FC 55     	CALL SHIFT_MERGE_CHARACTER
2040  56AE
2041  56AE D1               POP DE
2042  56AF C1               POP BC
2043  56B0 CD 49 4E         CALL RESTORE_PAGE_INFO
2044  56B3
2045  56B3 E1           	POP HL
2046  56B4 C9           	RET
2047  56B5              ; *******************************************************************************************************
2048  56B5
2049  56B5              ; *******************************************************************************************************
2050  56B5              ; generic function to implement tiling
2051  56B5              ; should be modified to call appropriate function for memory or vram
2052  56B5              ; input IX=pointer to following structure
2053  56B5              ; +00 tile_data_ptr
2054  56B5              ; +02 tile_rows
2055  56B5              ; +04 tile_columns
2056  56B5              ; +06 destination_address
2057  56B5              ; +08 dest_to_next_row_add_to_value
2058  56B5              ; +10 num_horizontal_tiles
2059  56B5              ; +12 num_vertical_tiles
2060  56B5              ; modifies AF, BC, DE, HL
2061  56B5              TILE:
2062  56B5 DD 6E 06     	LD L, (IX+6)
2063  56B8 DD 66 07     	LD H, (IX+7) ; destination address
2064  56BB 22 FE 4C     	LD (TILETMP1), HL
2065  56BE DD 46 0C     	LD B, (IX+12) ; vertical tile number
2066  56C1              .L1:
2067  56C1 C5           	PUSH BC
2068  56C2 DD 6E 00     		LD L, (IX+0)
2069  56C5 DD 66 01     		LD H, (IX+1) ; tile address
2070  56C8 22 00 4D     		LD (TILETMP2), HL
2071  56CB DD 46 02     		LD B, (IX+2) ; tile rows
2072  56CE              .L2:
2073  56CE C5           		PUSH BC
2074  56CF              .CALL1:
2075  56CF CD 00 00     			CALL 0
2076  56D2 DD 46 0A     			LD B, (IX+10) ; horizontal tile num
2077  56D5              .L3:
2078  56D5 C5           			PUSH BC
2079  56D6 2A 00 4D     				LD HL, (TILETMP2)
2080  56D9 DD 46 04     				LD B, (IX+4) ; tile columns
2081  56DC              .L4:
2082  56DC C5           				PUSH BC
2083  56DD              .CALL2:
2084  56DD CD 00 00     					CALL 0
2085  56E0 C1           				POP BC
2086  56E1 10 F9        				DJNZ .L4
2087  56E3 C1           			POP BC
2088  56E4 10 EF        			DJNZ .L3
2089  56E6 22 00 4D     			LD (TILETMP2), HL
2090  56E9 2A FE 4C     			LD HL, (TILETMP1)
2091  56EC DD 5E 08     			LD E, (IX+8)
2092  56EF DD 56 09     			LD D, (IX+9) ; add to value for dest next row
2093  56F2 19           			ADD HL, DE
2094  56F3 22 FE 4C     			LD (TILETMP1), HL
2095  56F6 C1           		POP BC
2096  56F7 10 D5        		DJNZ .L2
2097  56F9 C1           	POP BC
2098  56FA 10 C5        	DJNZ .L1
2099  56FC C9           	RET
2100  56FD              ; *******************************************************************************************************
2101  56FD
2102  56FD              ; *******************************************************************************************************
2103  56FD              ; function to handle CALL TILERAM basic extension
2104  56FD              ; fills memory with tiles
2105  56FD              ; fuses with background data and applies vertical shift too
2106  56FD              ; TILERAM ( INT request_data_ptr )
2107  56FD              ; request_data_ptr described in TILE
2108  56FD              ; will put ram in page 0 also, page 1 is already there
2109  56FD              TILERAM:
2110  56FD              	; opening (
2111  56FD CD 2F 50     	CALL CHKCHAR
2112  5700 28           	DB '('
2113  5701              	; get pointer to request struct
2114  5701 DD 21 2F 54  	LD IX, FRMQNT
2115  5705 CD 59 01     	CALL CALBAS
2116  5708 D5           	PUSH DE
2117  5709              	; ending )
2118  5709 CD 2F 50     	CALL CHKCHAR
2119  570C 29           	DB ')'
2120  570D
2121  570D DD E1        	POP IX ; pointer to request struct
2122  570F
2123  570F E5           	PUSH HL ; save position in BASIC buffer
2124  5710
2125  5710 FD 21 17 57  	LD IY, .RET
2126  5714 C3 D2 4E     	JP ENABLE_PAGE0
2127  5717              .RET:
2128  5717 FB           	EI
2129  5718              	; set RAM functions to call
2130  5718 21 2E 57     	LD HL, .TILECOPY
2131  571B 22 DE 56     	LD (TILE.CALL2+1), HL
2132  571E 21 3F 57     	LD HL, .SETDESTROW
2133  5721 22 D0 56     	LD (TILE.CALL1+1), HL
2134  5724 CD B5 56     	CALL TILE
2135  5727
2136  5727 D1               POP DE
2137  5728 C1               POP BC
2138  5729 CD 49 4E         CALL RESTORE_PAGE_INFO
2139  572C
2140  572C E1           	POP HL
2141  572D C9           	RET
2142  572E              .TILECOPY:
2143  572E ED A0       > LDI
2143  5730 ED A0       > LDI
2143  5732 ED A0       > LDI
2143  5734 ED A0       > LDI
2143  5736 ED A0       > LDI
2143  5738 ED A0       > LDI
2143  573A ED A0       > LDI
2143  573C ED A0       > LDI
2144  573E C9           	RET
2145  573F              .SETDESTROW:
2146  573F ED 5B FE 4C  	LD DE, (TILETMP1)
2147  5743 C9           	RET
2148  5744              ; *******************************************************************************************************
2149  5744
2150  5744              ; *******************************************************************************************************
2151  5744              ; function to handle CALL TILEVRM basic extension
2152  5744              ; fills vram with tiles
2153  5744              ; fuses with background data and applies vertical shift too
2154  5744              ; TILEVRM ( INT request_data_ptr )
2155  5744              ; request_data_ptr described in TILE
2156  5744              ; will put ram in page 0 also, page 1 is already there
2157  5744              TILEVRM:
2158  5744              	; opening (
2159  5744 CD 2F 50     	CALL CHKCHAR
2160  5747 28           	DB '('
2161  5748              	; get pointer to request struct
2162  5748 DD 21 2F 54  	LD IX, FRMQNT
2163  574C CD 59 01     	CALL CALBAS
2164  574F D5           	PUSH DE
2165  5750              	; ending )
2166  5750 CD 2F 50     	CALL CHKCHAR
2167  5753 29           	DB ')'
2168  5754
2169  5754 DD E1        	POP IX ; pointer to request struct
2170  5756
2171  5756 E5           	PUSH HL ; save position in BASIC buffer
2172  5757
2173  5757 FD 21 5E 57  	LD IY, .RET
2174  575B C3 D2 4E     	JP ENABLE_PAGE0
2175  575E              .RET:
2176  575E FB           	EI
2177  575F              	; set RAM functions to call
2178  575F 21 75 57     	LD HL, .TILECOPY
2179  5762 22 DE 56     	LD (TILE.CALL2+1), HL
2180  5765 21 7B 57     	LD HL, .SETDESTROW
2181  5768 22 D0 56     	LD (TILE.CALL1+1), HL
2182  576B CD B5 56     	CALL TILE
2183  576E
2184  576E D1               POP DE
2185  576F C1               POP BC
2186  5770 CD 49 4E         CALL RESTORE_PAGE_INFO
2187  5773
2188  5773 E1           	POP HL
2189  5774 C9           	RET
2190  5775              .TILECOPY:
2191  5775 01 98 08     	LD BC, #0898
2192  5778 C3 02 52     	JP MEMVRM.BBYTECOPY
2193  577B              .SETDESTROW:
2194  577B 2A FE 4C     	LD HL, (TILETMP1)
2195  577E C3 07 4E     	JP SETWRT_LOCAL
2196  5781              ; *******************************************************************************************************
2197  5781
2198  5781              ; *******************************************************************************************************
2199  5781              ; generic function to implement rectangle data copy
2200  5781              ; should be modified to call appropriate function for memory or vram
2201  5781              ; input IX=pointer to following structure
2202  5781              ; +00 source data pointer
2203  5781              ; +02 num bytes in a row
2204  5781              ; +04 number of rows
2205  5781              ; +06 source add-to value till next row
2206  5781              ; +08 destination address
2207  5781              ; +10 destination add-to value till next row
2208  5781              ; modifies AF, BC, DE, HL
2209  5781              RECTANGLE_COPY:
2210  5781 DD 6E 00     	LD L, (IX+0)
2211  5784 DD 66 01     	LD H, (IX+1) ; source address
2212  5787 DD 5E 08     	LD E, (IX+8)
2213  578A DD 56 09     	LD D, (IX+9) ; destination
2214  578D DD 46 04     	LD B, (IX+4) ; row number
2215  5790              .L1:
2216  5790 C5           	PUSH BC
2217  5791 E5           		PUSH HL
2218  5792 D5           			PUSH DE
2219  5793 DD 4E 02     				LD C, (IX+2)
2220  5796 DD 46 03     				LD B, (IX+3) ; num bytes in a row
2221  5799              .CALL1:
2222  5799 CD 00 00     				CALL 0 ; set destination address from DE
2223  579C              .CALL2:
2224  579C CD 00 00     				CALL 0 ; copy data fn
2225  579F E1           			POP HL
2226  57A0 DD 4E 0A     			LD C, (IX+10)
2227  57A3 DD 46 0B     			LD B, (IX+11) ; destination add-to
2228  57A6 09           			ADD HL, BC
2229  57A7 EB           			EX DE, HL
2230  57A8 E1           		POP HL
2231  57A9 DD 4E 06     		LD C, (IX+6)
2232  57AC DD 46 07     		LD B, (IX+7) ; src add-to
2233  57AF 09           		ADD HL, BC
2234  57B0 C1           	POP BC
2235  57B1 10 DD        	DJNZ .L1
2236  57B3 C9           	RET
2237  57B4              ; *******************************************************************************************************
2238  57B4
2239  57B4              ; *******************************************************************************************************
2240  57B4              ; function to handle CALL BOXMEMCPY basic extension
2241  57B4              ; copies data with window like boundaries to ram
2242  57B4              ; BOXMEMCPY ( INT request_data_ptr )
2243  57B4              ; request_data_ptr described in RECTANGLE_COPY
2244  57B4              ; will put ram in page 0 also, page 1 is already there
2245  57B4              BOXMEMCPY:
2246  57B4              	; opening (
2247  57B4 CD 2F 50     	CALL CHKCHAR
2248  57B7 28           	DB '('
2249  57B8              	; get pointer to request struct
2250  57B8 DD 21 2F 54  	LD IX, FRMQNT
2251  57BC CD 59 01     	CALL CALBAS
2252  57BF D5           	PUSH DE
2253  57C0              	; ending )
2254  57C0 CD 2F 50     	CALL CHKCHAR
2255  57C3 29           	DB ')'
2256  57C4
2257  57C4 DD E1        	POP IX ; pointer to request struct
2258  57C6
2259  57C6 E5           	PUSH HL ; save position in BASIC buffer
2260  57C7
2261  57C7 FD 21 CE 57  	LD IY, .RET
2262  57CB C3 D2 4E     	JP ENABLE_PAGE0
2263  57CE              .RET:
2264  57CE FB           	EI
2265  57CF              	; set RAM functions to call
2266  57CF 21 00 00     	LD HL, 0
2267  57D2 22 99 57     	LD (RECTANGLE_COPY.CALL1), HL ; NOP NOP
2268  57D5 22 9B 57     	LD (RECTANGLE_COPY.CALL1+2), HL ; NOP NOP
2269  57D8 21 ED B0     	LD HL, #B0ED ; LDIR
2270  57DB 22 9D 57     	LD (RECTANGLE_COPY.CALL1+4), HL
2271  57DE CD 81 57     	CALL RECTANGLE_COPY
2272  57E1
2273  57E1 D1               POP DE
2274  57E2 C1               POP BC
2275  57E3 CD 49 4E         CALL RESTORE_PAGE_INFO
2276  57E6
2277  57E6 E1           	POP HL
2278  57E7 C9           	RET
2279  57E8              ; *******************************************************************************************************
2280  57E8
2281  57E8              ; *******************************************************************************************************
2282  57E8              ; function to handle CALL BOXMEMVRM basic extension
2283  57E8              ; copies data with window like boundaries to ram
2284  57E8              ; BOXMEMVRM ( INT request_data_ptr )
2285  57E8              ; request_data_ptr described in RECTANGLE_COPY
2286  57E8              ; will put ram in page 0 also, page 1 is already there
2287  57E8              BOXMEMVRM:
2288  57E8              	; opening (
2289  57E8 CD 2F 50     	CALL CHKCHAR
2290  57EB 28           	DB '('
2291  57EC              	; get pointer to request struct
2292  57EC DD 21 2F 54  	LD IX, FRMQNT
2293  57F0 CD 59 01     	CALL CALBAS
2294  57F3 D5           	PUSH DE
2295  57F4              	; ending )
2296  57F4 CD 2F 50     	CALL CHKCHAR
2297  57F7 29           	DB ')'
2298  57F8
2299  57F8 DD E1        	POP IX ; pointer to request struct
2300  57FA
2301  57FA E5           	PUSH HL ; save position in BASIC buffer
2302  57FB
2303  57FB FD 21 02 58  	LD IY, .RET
2304  57FF C3 D2 4E     	JP ENABLE_PAGE0
2305  5802              .RET:
2306  5802 FB           	EI
2307  5803              	; set RAM functions to call
2308  5803 21 21 58     	LD HL, .SETDEST
2309  5806 22 9A 57     	LD (RECTANGLE_COPY.CALL1+1), HL
2310  5809 21 27 58     	LD HL, .COPYDATA
2311  580C 22 9D 57     	LD (RECTANGLE_COPY.CALL2+1), HL
2312  580F 3E CD        	LD A, #CD ; CALL
2313  5811 32 99 57     	LD (RECTANGLE_COPY.CALL1), A
2314  5814 32 9C 57     	LD (RECTANGLE_COPY.CALL2), A
2315  5817 CD 81 57     	CALL RECTANGLE_COPY
2316  581A
2317  581A D1               POP DE
2318  581B C1               POP BC
2319  581C CD 49 4E         CALL RESTORE_PAGE_INFO
2320  581F
2321  581F E1           	POP HL
2322  5820 C9           	RET
2323  5821              .SETDEST:
2324  5821 EB           	EX DE, HL
2325  5822 CD 07 4E     	CALL SETWRT_LOCAL
2326  5825 EB           	EX DE, HL
2327  5826 C9           	RET
2328  5827              .COPYDATA:
2329  5827 41           	LD B, C
2330  5828 0E 98        	LD C, #98
2331  582A C3 02 52     	JP MEMVRM.BBYTECOPY
2332  582D              ; *******************************************************************************************************
2333  582D
2334  582D              EXT_END:
2335  582D
# file closed: asm\main.asm
