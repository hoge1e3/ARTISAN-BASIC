# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; INCLUDE "system_variables.inc"
   4  4000              ; INCLUDE "system_hooks.inc"
   5  4000              ; INCLUDE "bios_calls.inc"
   6  4000
   7  4000              CHPUT   EQU     #A2
   8  4000              CALBAS	EQU		#159
   9  4000              ERRHAND EQU     #406F
  10  4000              FRMEVL  EQU     #4C64
  11  4000              FRESTR	EQU		#67D0
  12  4000              ; FRMQNT = formula quantificator
  13  4000              ; input HL=pointer to current program expression
  14  4000              ; output HL=next address
  15  4000              ; output DE=integer datum
  16  4000              FRMQNT	EQU		#542F
  17  4000              ; GETBYT = get byte parameter
  18  4000              ; input HL=pointer to current program expression
  19  4000              ; output HL=next address
  20  4000              ; output A=E=byte read
  21  4000              GETBYT	EQU		#521C
  22  4000              CHRGTR  EQU     #4666
  23  4000              SYNCHR	EQU		#558C
  24  4000              VALTYP  EQU     #F663
  25  4000              USR     EQU     #F7F8
  26  4000              PROCNM	EQU		#FD89
  27  4000              BIOS_FILVRM  EQU     #56
  28  4000              CLIKSW	EQU		#F3DB
  29  4000              ATRBAS	EQU		#F928
  30  4000
  31  4000              RAMAD0	EQU	0F341h	; Main-RAM Slot (00000h~03FFFh)
  32  4000              RAMAD1	EQU	0F342h	; Main-RAM Slot (04000h~07FFFh)
  33  4000              RAMAD2	EQU	0F343h	; Main-RAM Slot (08000h~0BFFFh)
  34  4000              RAMAD3	EQU	0F344h	; Main-RAM Slot (0C000h~0FFFFh)
  35  4000              EXPTBL	EQU #FCC1
  36  4000              SCRMOD	EQU #FCAF ; current screen mode
  37  4000
  38  4000              ; BASIC error codes
  39  4000              ;01 NEXT without FOR
  40  4000              ;02 Syntax error
  41  4000              ;03 RETURN without GOSUB
  42  4000              ;04 Out of DATA
  43  4000              ;05 Illegal function call
  44  4000              ;06 Overflow
  45  4000              ;07 Out of memory
  46  4000              ;08 Undefined line number
  47  4000              ;09 Subscript out of range
  48  4000              ;10 Redimensioned array
  49  4000              ;11 Division by zero
  50  4000              ;12 Illegal direct
  51  4000              ;13 Type mismatch
  52  4000              ;14 Out of string space
  53  4000              ;15 String too long
  54  4000              ;16 String formula too complex
  55  4000              ;17 Can't CONTINUE
  56  4000              ;18 Undefined user function
  57  4000              ;19 Device I/O error
  58  4000              ;20 Verify error
  59  4000              ;21 No RESUME
  60  4000              ;22 RESUME without error
  61  4000              ;23 Unprintable error
  62  4000              ;24 Missing operand
  63  4000              ;25 Line buffer overflow
  64  4000              ;50 FIELD overflow
  65  4000              ;51 Internal error
  66  4000              ;52 Bad file number
  67  4000              ;53 File not found
  68  4000              ;54 File already open
  69  4000              ;55 Input past end
  70  4000              ;56 Bad file name
  71  4000              ;57 Direct statement in file
  72  4000              ;58 Sequential I/O only
  73  4000              ;59 File not OPEN
  74  4000
  75  4000
  76  4000               ; simulate cartridge with BASIC extension
  77  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  77  4004 5C 4F 00 00
  77  4008 00 00 00 00
  77  400C 00 00 00 00
  78  4010
  79  4010              ; this location #400A stores last location used by basic extension
  80  4010              ; free memory after that point
  81  4010 CD 56         DW EXT_END
  82  4012
  83  4012              ; binary included AKG player compiled at #4012
  84  4012               INCBIN "bin/AKG.bin"
  85  4CEE               INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CEE              MAIN_PLAYER_START EQU 04012H
   2+ 4CEE              PLY_AKG_START EQU 04012H
   3+ 4CEE              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401BH
   4+ 4CEE              PLY_AKG_INITSOUNDEFFECTS EQU 0401BH
   5+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 0401FH
   6+ 4CEE              PLY_AKG_PLAYSOUNDEFFECT EQU 0401FH
   7+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04020H
   8+ 4CEE              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04020H
   9+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04047H
  10+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04047H
  11+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04055H
  12+ 4CEE              PLY_AKG_PSES_PLAY EQU 0408EH
  13+ 4CEE              PLY_AKG_PSES_READFIRSTBYTE EQU 04097H
  14+ 4CEE              PLY_AKG_PSES_S_ENDORLOOP EQU 040AFH
  15+ 4CEE              PLY_AKG_PSES_S_LOOP EQU 040BAH
  16+ 4CEE              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C0H
  17+ 4CEE              PLY_AKG_PSES_NOTREACHED EQU 040D3H
  18+ 4CEE              PLY_AKG_PSES_HARDWAREONLY EQU 040D7H
  19+ 4CEE              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040DEH
  20+ 4CEE              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F0H
  21+ 4CEE              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FAH
  22+ 4CEE              PLY_AKG_PSES_H_AFTERRETRIG EQU 04104H
  23+ 4CEE              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 04118H
  24+ 4CEE              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411DH
  25+ 4CEE              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04125H
  26+ 4CEE              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04130H
  27+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413CH
  28+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 0413EH
  29+ 4CEE              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04144H
  30+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 04148H
  31+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 04148H
  32+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414AH
  33+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414AH
  34+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414AH
  35+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414BH
  36+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414CH
  37+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04150H
  38+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04150H
  39+ 4CEE              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04150H
  40+ 4CEE              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 04158H
  41+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04160H
  42+ 4CEE              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04160H
  43+ 4CEE              PLY_AKG_INIT EQU 04160H
  44+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04160H
  45+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 0418EH
  46+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A2H
  47+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B4H
  48+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D3H
  49+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E0H
  50+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL EQU 041E6H
  51+ 4CEE              PLY_AKG_INITTABLE0 EQU 041E9H
  52+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041E9H
  53+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04203H
  54+ 4CEE              PLY_AKG_INITTABLE0_END EQU 04203H
  55+ 4CEE              PLY_AKG_INITTABLE1 EQU 04203H
  56+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04203H
  57+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04207H
  58+ 4CEE              PLY_AKG_INITTABLE1_END EQU 04207H
  59+ 4CEE              PLY_AKG_INITTABLEORA EQU 04207H
  60+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04207H
  61+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 0421FH
  62+ 4CEE              PLY_AKG_INITTABLEORA_END EQU 0421FH
  63+ 4CEE              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 0421FH
  64+ 4CEE              PLY_AKG_STOP EQU 0421FH
  65+ 4CEE              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04231H
  66+ 4CEE              PLY_AKG_PLAY EQU 04231H
  67+ 4CEE              PLY_AKG_TICKDECREASINGCOUNTER EQU 04239H
  68+ 4CEE              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 0423FH
  69+ 4CEE              PLY_AKG_READLINKER EQU 04244H
  70+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04244H
  71+ 4CEE              PLY_AKG_READLINKER_PTLINKER EQU 04244H
  72+ 4CEE              PLY_AKG_READLINKER_NOLOOP EQU 0424FH
  73+ 4CEE              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 04288H
  74+ 4CEE              PLY_AKG_READLINE EQU 0428BH
  75+ 4CEE              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428BH
  76+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04291H
  77+ 4CEE              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04291H
  78+ 4CEE              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 0429EH
  79+ 4CEE              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A2H
  80+ 4CEE              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A5H
  81+ 4CEE              PLY_AKG_SPEEDTRACK_END EQU 042A8H
  82+ 4CEE              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042A8H
  83+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042AEH
  84+ 4CEE              PLY_AKG_EVENTTRACK_PTTRACK EQU 042AEH
  85+ 4CEE              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BBH
  86+ 4CEE              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042BFH
  87+ 4CEE              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C2H
  88+ 4CEE              PLY_AKG_EVENTTRACK_END EQU 042C5H
  89+ 4CEE              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C5H
  90+ 4CEE              PLY_AKG_CHANNEL1_READTRACK EQU 042D1H
  91+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D1H
  92+ 4CEE              PLY_AKG_CHANNEL1_PTTRACK EQU 042D1H
  93+ 4CEE              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042ECH
  94+ 4CEE              PLY_AKG_CHANNEL1_WAIT EQU 042F7H
  95+ 4CEE              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 042FEH
  96+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 042FEH
  97+ 4CEE              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 042FEH
  98+ 4CEE              PLY_AKG_CHANNEL1_NOTE EQU 04307H
  99+ 4CEE              PLY_AKG_BASENOTEINDEX EQU 04307H
 100+ 4CEE              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 04309H
 101+ 4CEE              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 04309H
 102+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 04319H
 103+ 4CEE              PLY_AKG_INSTRUMENTSTABLE EQU 04319H
 104+ 4CEE              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432BH
 105+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433BH
 106+ 4CEE              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04363H
 107+ 4CEE              PLY_AKG_CHANNEL1_READCELLEND EQU 04366H
 108+ 4CEE              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04366H
 109+ 4CEE              PLY_AKG_CHANNEL2_READTRACK EQU 04372H
 110+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04372H
 111+ 4CEE              PLY_AKG_CHANNEL2_PTTRACK EQU 04372H
 112+ 4CEE              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438DH
 113+ 4CEE              PLY_AKG_CHANNEL2_WAIT EQU 04398H
 114+ 4CEE              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 0439FH
 115+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 0439FH
 116+ 4CEE              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 0439FH
 117+ 4CEE              PLY_AKG_CHANNEL2_NOTE EQU 043A8H
 118+ 4CEE              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043ADH
 119+ 4CEE              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043ADH
 120+ 4CEE              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043CFH
 121+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043DFH
 122+ 4CEE              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04407H
 123+ 4CEE              PLY_AKG_CHANNEL2_READCELLEND EQU 0440AH
 124+ 4CEE              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440AH
 125+ 4CEE              PLY_AKG_CHANNEL3_READTRACK EQU 04416H
 126+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04416H
 127+ 4CEE              PLY_AKG_CHANNEL3_PTTRACK EQU 04416H
 128+ 4CEE              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04431H
 129+ 4CEE              PLY_AKG_CHANNEL3_WAIT EQU 0443CH
 130+ 4CEE              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04443H
 131+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04443H
 132+ 4CEE              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04443H
 133+ 4CEE              PLY_AKG_CHANNEL3_NOTE EQU 0444CH
 134+ 4CEE              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04451H
 135+ 4CEE              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04451H
 136+ 4CEE              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04473H
 137+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04483H
 138+ 4CEE              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ABH
 139+ 4CEE              PLY_AKG_CHANNEL3_READCELLEND EQU 044AEH
 140+ 4CEE              PLY_AKG_CURRENTSPEED EQU 044AEH
 141+ 4CEE              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B0H
 142+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B3H
 143+ 4CEE              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B3H
 144+ 4CEE              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B6H
 145+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044B9H
 146+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044B9H
 147+ 4CEE              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C5H
 148+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CCH
 149+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044CFH
 150+ 4CEE              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D5H
 151+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044D8H
 152+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044D8H
 153+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E6H
 154+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EBH
 155+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F6H
 156+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044F9H
 157+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044F9H
 158+ 4CEE              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FCH
 159+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 044FFH
 160+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE EQU 044FFH
 161+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 04508H
 162+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04512H
 163+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04515H
 164+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04515H
 165+ 4CEE              PLY_AKG_CHANNEL1_PITCH EQU 04515H
 166+ 4CEE              PLY_AKG_CHANNEL1_ISPITCH EQU 04518H
 167+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451DH
 168+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451DH
 169+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04521H
 170+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04523H
 171+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04525H
 172+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452CH
 173+ 4CEE              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452DH
 174+ 4CEE              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04530H
 175+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04530H
 176+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454CH
 177+ 4CEE              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454CH
 178+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 04559H
 179+ 4CEE              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455DH
 180+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456DH
 181+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456DH
 182+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 0456EH
 183+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 0456FH
 184+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04571H
 185+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04571H
 186+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04571H
 187+ 4CEE              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04572H
 188+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04573H
 189+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04575H
 190+ 4CEE              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04575H
 191+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04575H
 192+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04575H
 193+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04575H
 194+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_END EQU 04578H
 195+ 4CEE              PLY_AKG_CHANNEL1_PITCH_END EQU 0457AH
 196+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04582H
 197+ 4CEE              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04582H
 198+ 4CEE              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04585H
 199+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 04588H
 200+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 04588H
 201+ 4CEE              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04594H
 202+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459BH
 203+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 0459EH
 204+ 4CEE              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A4H
 205+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A7H
 206+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A7H
 207+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B5H
 208+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BAH
 209+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C5H
 210+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045C8H
 211+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045C8H
 212+ 4CEE              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CBH
 213+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045CEH
 214+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045CEH
 215+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D7H
 216+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E1H
 217+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E4H
 218+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E4H
 219+ 4CEE              PLY_AKG_CHANNEL2_PITCH EQU 045E4H
 220+ 4CEE              PLY_AKG_CHANNEL2_ISPITCH EQU 045E7H
 221+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045ECH
 222+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045ECH
 223+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F0H
 224+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F2H
 225+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F4H
 226+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FBH
 227+ 4CEE              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FCH
 228+ 4CEE              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 045FFH
 229+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 045FFH
 230+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461BH
 231+ 4CEE              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461BH
 232+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 04628H
 233+ 4CEE              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462CH
 234+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463CH
 235+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463CH
 236+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463DH
 237+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 0463EH
 238+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04640H
 239+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04640H
 240+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04640H
 241+ 4CEE              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04641H
 242+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04642H
 243+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04644H
 244+ 4CEE              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04644H
 245+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04644H
 246+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04644H
 247+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04644H
 248+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_END EQU 04647H
 249+ 4CEE              PLY_AKG_CHANNEL2_PITCH_END EQU 04649H
 250+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04651H
 251+ 4CEE              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04651H
 252+ 4CEE              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04654H
 253+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04657H
 254+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04657H
 255+ 4CEE              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04663H
 256+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466AH
 257+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466DH
 258+ 4CEE              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04673H
 259+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04676H
 260+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04676H
 261+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04684H
 262+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 04689H
 263+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04694H
 264+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04697H
 265+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04697H
 266+ 4CEE              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469AH
 267+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469DH
 268+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469DH
 269+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A6H
 270+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B0H
 271+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B3H
 272+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B3H
 273+ 4CEE              PLY_AKG_CHANNEL3_PITCH EQU 046B3H
 274+ 4CEE              PLY_AKG_CHANNEL3_ISPITCH EQU 046B6H
 275+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BBH
 276+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BBH
 277+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046BFH
 278+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C1H
 279+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C3H
 280+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CAH
 281+ 4CEE              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CBH
 282+ 4CEE              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046CEH
 283+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046CEH
 284+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046EAH
 285+ 4CEE              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046EAH
 286+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F7H
 287+ 4CEE              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FBH
 288+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470BH
 289+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470BH
 290+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470CH
 291+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470DH
 292+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 0470FH
 293+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 0470FH
 294+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 0470FH
 295+ 4CEE              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04710H
 296+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04711H
 297+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04713H
 298+ 4CEE              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04713H
 299+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04713H
 300+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04713H
 301+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04713H
 302+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_END EQU 04716H
 303+ 4CEE              PLY_AKG_CHANNEL3_PITCH_END EQU 04718H
 304+ 4CEE              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04724H
 305+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04724H
 306+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04724H
 307+ 4CEE              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04727H
 308+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 04729H
 309+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 0472FH
 310+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04732H
 311+ 4CEE              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04732H
 312+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04735H
 313+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 0473EH
 314+ 4CEE              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04746H
 315+ 4CEE              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04753H
 316+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04753H
 317+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04753H
 318+ 4CEE              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04756H
 319+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 04758H
 320+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 0475EH
 321+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04761H
 322+ 4CEE              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04761H
 323+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04764H
 324+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476DH
 325+ 4CEE              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04775H
 326+ 4CEE              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04783H
 327+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04783H
 328+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04783H
 329+ 4CEE              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04786H
 330+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 04788H
 331+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 0478EH
 332+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04791H
 333+ 4CEE              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04791H
 334+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04794H
 335+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479DH
 336+ 4CEE              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A5H
 337+ 4CEE              PLY_AKG_SENDPSGREGISTERS EQU 047B4H
 338+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BCH
 339+ 4CEE              PLY_AKG_PSGREG01_INSTR EQU 047BCH
 340+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CCH
 341+ 4CEE              PLY_AKG_PSGREG23_INSTR EQU 047CCH
 342+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DDH
 343+ 4CEE              PLY_AKG_PSGREG45_INSTR EQU 047DDH
 344+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047EEH
 345+ 4CEE              PLY_AKG_PSGREG6_8_INSTR EQU 047EEH
 346+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 047FFH
 347+ 4CEE              PLY_AKG_PSGREG9_10_INSTR EQU 047FFH
 348+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04810H
 349+ 4CEE              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04810H
 350+ 4CEE              PLY_AKG_PSGREG13_OLDVALUE EQU 04825H
 351+ 4CEE              PLY_AKG_RETRIG EQU 04827H
 352+ 4CEE              PLY_AKG_PSGREG13_INSTR EQU 04829H
 353+ 4CEE              PLY_AKG_PSGREG13_END EQU 04838H
 354+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 04838H
 355+ 4CEE              PLY_AKG_SAVESP EQU 04838H
 356+ 4CEE              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483CH
 357+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTS EQU 04844H
 358+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04851H
 359+ 4CEE              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04851H
 360+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTS EQU 04859H
 361+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04866H
 362+ 4CEE              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04866H
 363+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTS EQU 0486EH
 364+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 04879H
 365+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS EQU 04879H
 366+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 04888H
 367+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 04888H
 368+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 0488FH
 369+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 0489FH
 370+ 4CEE              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 0489FH
 371+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A6H
 372+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A6H
 373+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048A9H
 374+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B2H
 375+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B2H
 376+ 4CEE              PLY_AKG_READINSTRUMENTCELL EQU 048B8H
 377+ 4CEE              PLY_AKG_NOSOFTNOHARD EQU 048C5H
 378+ 4CEE              PLY_AKG_NSNH_NONOISE EQU 048DAH
 379+ 4CEE              PLY_AKG_SOFT EQU 048DDH
 380+ 4CEE              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E4H
 381+ 4CEE              PLY_AKG_S_NOTSIMPLE EQU 048ECH
 382+ 4CEE              PLY_AKG_S_AFTERSIMPLETEST EQU 048EFH
 383+ 4CEE              PLY_AKG_HARDTOSOFT EQU 048FCH
 384+ 4CEE              PLY_AKG_HS_JUMPRATIO EQU 04907H
 385+ 4CEE              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04934H
 386+ 4CEE              PLY_AKG_ENDWITHOUTLOOP EQU 04936H
 387+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04936H
 388+ 4CEE              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04936H
 389+ 4CEE              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 0493EH
 390+ 4CEE              PLY_AKG_SH_JUMPRATIO EQU 0494BH
 391+ 4CEE              PLY_AKG_SH_JUMPRATIOEND EQU 0496CH
 392+ 4CEE              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497BH
 393+ 4CEE              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04981H
 394+ 4CEE              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499BH
 395+ 4CEE              PLY_AKG_H_RETRIGEND EQU 049ADH
 396+ 4CEE              PLY_AKG_H_AFTERRETRIG EQU 049AEH
 397+ 4CEE              PLY_AKG_ENDWITHLOOP EQU 049C0H
 398+ 4CEE              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C7H
 399+ 4CEE              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DDH
 400+ 4CEE              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EBH
 401+ 4CEE              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FBH
 402+ 4CEE              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A09H
 403+ 4CEE              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A18H
 404+ 4CEE              PLY_AKG_SHOHS_RETRIGEND EQU 04A27H
 405+ 4CEE              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A28H
 406+ 4CEE              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3AH
 407+ 4CEE              PLY_AKG_EFFECTTABLE EQU 04A48H
 408+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A48H
 409+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6CH
 410+ 4CEE              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6CH
 411+ 4CEE              PLY_AKG_EFFECT_RESET EQU 04A6FH
 412+ 4CEE              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A71H
 413+ 4CEE              PLY_AKG_EFFECT_VOLUME EQU 04A8CH
 414+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A98H
 415+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04A9EH
 416+ 4CEE              PLY_AKG_ARPEGGIOSTABLE EQU 04A9EH
 417+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC5H
 418+ 4CEE              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACCH
 419+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD2H
 420+ 4CEE              PLY_AKG_PITCHESTABLE EQU 04AD2H
 421+ 4CEE              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AF9H
 422+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B00H
 423+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B11H
 424+ 4CEE              PLY_AKG_EFFECT_PITCHDOWN EQU 04B18H
 425+ 4CEE              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B28H
 426+ 4CEE              PLY_AKG_EFFECT_PITCHUP EQU 04B3DH
 427+ 4CEE              PLY_AKG_EFFECT_PITCHSTOP EQU 04B4FH
 428+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B56H
 429+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B80H
 430+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B80H
 431+ 4CEE              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B99H
 432+ 4CEE              PLY_AKG_EFFECT_GLIDESPEED EQU 04B99H
 433+ 4CEE              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BABH
 434+ 4CEE              PLY_AKG_EFFECT_LEGATO EQU 04BC1H
 435+ 4CEE              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD5H
 436+ 4CEE              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDDH
 437+ 4CEE              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE5H
 438+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEDH
 439+ 4CEE              PLY_AKG_EVENT EQU 04BEDH
 440+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BEEH
 441+ 4CEE              PLY_AKG_PERIODTABLE EQU 04BEEH
 442+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BEEH
 443+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CEEH
 444+ 4CEE              PLY_AKG_PERIODTABLE_END EQU 04CEEH
 445+ 4CEE              PLY_AKG_END EQU 04CEEH
 446+ 4CEE              MAIN_PLAYER_END EQU 04CEEH
 447+ 4CEE              TESTEREND EQU 04CEEH
 448+ 4CEE
# file closed: ./symbol/AKG.sym
  86  4CEE
  87  4CEE              ORIG.HTIMI:
  88  4CEE 00 00 00 00  	DB 0, 0, 0, 0, 0
  88  4CF2 00
  89  4CF3               EXPORT ORIG.HTIMI
  90  4CF3
  91  4CF3              MUSIC_INIT_STATUS:
  92  4CF3 00            DB 0
  93  4CF4              SFX_INIT_STATUS:
  94  4CF4 00            DB 0
  95  4CF5              SOUND_ENABLED:
  96  4CF5 00            DB 0
  97  4CF6
  98  4CF6              SPRATR_INIT_STATUS:
  99  4CF6 00            DB 0
 100  4CF7              SPRATR_UPDATE_FLAG:
 101  4CF7 00 00         DW 0
 102  4CF9              SPRATR_DATA:
 103  4CF9 00 00         DW 0
 104  4CFB
 105  4CFB              ; to temporarily store stack pointer
 106  4CFB              TMPSP:
 107  4CFB 00 00         DW 0
 108  4CFD              ; to support sprite flicker
 109  4CFD              FLICKER:
 110  4CFD 00            DB 0
 111  4CFE
 112  4CFE              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 113  4CFE              ; per starting letter, if no commands with this letter, NULL value
 114  4CFE              CMDS:
 115  4CFE 00 00            DW 0 ; A
 116  4D00 00 00            DW 0 ; B
 117  4D02 00 00            DW 0 ; C
 118  4D04 00 00            DW 0 ; D
 119  4D06 00 00            DW 0 ; E
 120  4D08 59 4D            DW CMDS_F; F
 121  4D0A 6C 4D            DW CMDS_G; G
 122  4D0C CE 4D            DW CMDS_H; H
 123  4D0E 00 00            DW 0 ; I
 124  4D10 00 00            DW 0 ; J
 125  4D12 00 00            DW 0 ; K
 126  4D14 3C 4D            DW CMDS_L ; L
 127  4D16 46 4D            DW CMDS_M ; M
 128  4D18 00 00            DW 0 ; N
 129  4D1A 00 00            DW 0 ; O
 130  4D1C 00 00            DW 0 ; P
 131  4D1E 00 00            DW 0 ; Q
 132  4D20 00 00            DW 0 ; R
 133  4D22 80 4D            DW CMDS_S ; S
 134  4D24 00 00            DW 0 ; T
 135  4D26 32 4D            DW CMDS_U ; U
 136  4D28 76 4D            DW CMDS_V ; V
 137  4D2A 00 00            DW 0 ; W
 138  4D2C 00 00            DW 0 ; X
 139  4D2E 00 00            DW 0 ; Y
 140  4D30 00 00            DW 0 ; Z
 141  4D32
 142  4D32              CMDS_U:
 143  4D32 55 50 52 49  	DEFB	"UPRINT",0      ; Print upper case string
 143  4D36 4E 54 00
 144  4D39 99 4F        	DEFW	UPRINT
 145  4D3B 00               DB 0
 146  4D3C              CMDS_L:
 147  4D3C 4C 50 52 49  	DEFB	"LPRINT",0      ; Print lower case string
 147  4D40 4E 54 00
 148  4D43 B6 4F        	DEFW	LPRINT
 149  4D45 00               DB 0
 150  4D46              CMDS_M:
 151  4D46 4D 45 4D 56      DB "MEMVRM", 0
 151  4D4A 52 4D 00
 152  4D4D AB 51            DW MEMVRM
 153  4D4F 4D 45 4D 43  	DB "MEMCPY", 0
 153  4D53 50 59 00
 154  4D56 1D 50        	DW MEMCPY
 155  4D58 00           	DB 0
 156  4D59              CMDS_F:
 157  4D59 46 49 4C 56      DB "FILVRM", 0
 157  4D5D 52 4D 00
 158  4D60 8D 50            DW FILVRM
 159  4D62 46 49 4C 52      DB "FILRAM", 0
 159  4D66 41 4D 00
 160  4D69 D4 50            DW FILRAM
 161  4D6B 00               DB 0
 162  4D6C              CMDS_G:
 163  4D6C 47 45 4E 43      DB "GENCAL", 0
 163  4D70 41 4C 00
 164  4D73 52 51            DW GENCAL
 165  4D75 00           	DB	0
 166  4D76              CMDS_V:
 167  4D76 56 52 4D 4D  	DB "VRMMEM", 0
 167  4D7A 45 4D 00
 168  4D7D 2D 52        	DW VRMMEM
 169  4D7F 00           	DB 0
 170  4D80              CMDS_S:
 171  4D80 53 50 52 53  	DB "SPRSET", 0
 171  4D84 45 54 00
 172  4D87 0B 54        	DW SPRSET
 173  4D89 53 50 52 47  	DB "SPRGRPMOV", 0
 173  4D8D 52 50 4D 4F
 173  4D91 56 00
 174  4D93 C9 54        	DW SPRGRPMOV
 175  4D95 53 4E 44 53  	DB "SNDSFX", 0
 175  4D99 46 58 00
 176  4D9C 6C 53        	DW SNDSFX
 177  4D9E 53 4E 44 50  	DB "SNDPLYON", 0
 177  4DA2 4C 59 4F 4E
 177  4DA6 00
 178  4DA7 36 53        	DW SNDPLYON
 179  4DA9 53 4E 44 50  	DB "SNDPLYOFF", 0
 179  4DAD 4C 59 4F 46
 179  4DB1 46 00
 180  4DB3 49 53        	DW SNDPLYOFF
 181  4DB5 53 4E 44 50  	DB "SNDPLYINI", 0
 181  4DB9 4C 59 49 4E
 181  4DBD 49 00
 182  4DBF E5 52        	DW SNDPLYINIT
 183  4DC1 53 50 52 41  	DB "SPRATRINI", 0
 183  4DC5 54 52 49 4E
 183  4DC9 49 00
 184  4DCB CD 53        	DW SPRATRINI
 185  4DCD 00           	DB 0
 186  4DCE              CMDS_H:
 187  4DCE 48 42 4C 49  	DB "HBLIT", 0
 187  4DD2 54 00
 188  4DD4 93 56        	DW HBLIT
 189  4DD6 00           	DB 0
 190  4DD7
 191  4DD7              ; ****************************************************************************************************
 192  4DD7              ; function sets VRAM address
 193  4DD7              ; input HL=address
 194  4DD7              ; modifies AF
 195  4DD7              SETWRT_LOCAL:
 196  4DD7 7D           	LD	A, L
 197  4DD8 D3 99        	OUT	(099H), A
 198  4DDA 7C           	LD	A, H
 199  4DDB E6 3F        	AND	03FH
 200  4DDD F6 40        	OR	040H
 201  4DDF D3 99        	OUT	(099H), A
 202  4DE1 C9           	RET
 203  4DE2              ; ****************************************************************************************************
 204  4DE2
 205  4DE2              ; ****************************************************************************************************
 206  4DE2              ; function gets slot and subslot data for specific page
 207  4DE2              ; input A=page (0, 1 or 2)
 208  4DE2              ; output B = 0A8H register value
 209  4DE2              ; output D = 0 is no subslots, 1 if yes
 210  4DE2              ; output C = 0A8H value when page 3 slot equals to requested page slot
 211  4DE2              ; output E = subslot value if present
 212  4DE2              ; modifies AF, BC, DE, HL
 213  4DE2              GET_PAGE_INFO:
 214  4DE2 6F               LD L, A
 215  4DE3 C6 C1            ADD A, low (EXPTBL)
 216  4DE5 32 EF 4D         LD (GET_PAGE_INFO_L1+1), A
 217  4DE8 DB A8            IN A, (0A8H)
 218  4DEA 47               LD B, A
 219  4DEB E6 3F            AND 03FH
 220  4DED 4F               LD C, A
 221  4DEE              GET_PAGE_INFO_L1:
 222  4DEE 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 223  4DF1 E6 80            AND 080H
 224  4DF3 28 1B            JR Z, GET_PAGE_INFO_L2
 225  4DF5                  ; expanded
 226  4DF5 2D               DEC L
 227  4DF6 FA 15 4E         JP M, GET_PAGE_INFO_L3
 228  4DF9 2D               DEC L
 229  4DFA FA 13 4E         JP M, GET_PAGE_INFO_L4
 230  4DFD                  ; page 2
 231  4DFD 07               RLCA
 232  4DFE 07               RLCA
 233  4DFF              GET_PAGE_INFO_L5:
 234  4DFF E6 C0            AND 0C0H
 235  4E01 B1               OR C
 236  4E02 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 237  4E04 4F               LD C, A
 238  4E05 3A FF FF         LD A, (0FFFFH)
 239  4E08 2F               CPL
 240  4E09 5F               LD E, A
 241  4E0A 16 01            LD D, 1
 242  4E0C 78               LD A, B ; return stack
 243  4E0D D3 A8            OUT (0A8H), A
 244  4E0F C9               RET
 245  4E10              GET_PAGE_INFO_L2:
 246  4E10                  ; not expanded
 247  4E10 16 00            LD D, 0
 248  4E12 C9               RET
 249  4E13              GET_PAGE_INFO_L4:
 250  4E13                  ; page 1
 251  4E13 0F               RRCA
 252  4E14 0F               RRCA
 253  4E15              GET_PAGE_INFO_L3:
 254  4E15                  ; page 0
 255  4E15 0F               RRCA
 256  4E16 0F               RRCA
 257  4E17 18 E6            JR GET_PAGE_INFO_L5
 258  4E19              ; ****************************************************************************************************
 259  4E19
 260  4E19              ; ****************************************************************************************************
 261  4E19              ; function returns original slot and subslot info
 262  4E19              ; input B = 0A8H register value
 263  4E19              ; input D = 0 is no subslots, 1 if yes
 264  4E19              ; input C = 0A8H value when page 3 slot equals to requested page slot
 265  4E19              ; input E = subslot value if present
 266  4E19              ; modifies AF
 267  4E19              RESTORE_PAGE_INFO:
 268  4E19 7A               LD A, D
 269  4E1A B7               OR A
 270  4E1B 28 07            JR Z, RESTORE_PAGE_INFO_L1
 271  4E1D 79               LD A, C
 272  4E1E D3 A8            OUT (0A8H), A
 273  4E20 7B               LD A, E
 274  4E21 32 FF FF         LD (0FFFFH), A
 275  4E24              RESTORE_PAGE_INFO_L1:
 276  4E24 78               LD A, B
 277  4E25 D3 A8            OUT (0A8H), A
 278  4E27 C9               RET
 279  4E28              ; ****************************************************************************************************
 280  4E28
 281  4E28              ; *******************************************************************************************************
 282  4E28              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 283  4E28              ; INPUT:  A = SLOT ID: EXXXSSPP
 284  4E28              ; E = EXPANDED FLAG
 285  4E28              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 286  4E28              ; PP = PRIMARY SLOT NUMBER
 287  4E28              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 288  4E28              ; CHANGES: AF, BC, DE
 289  4E28
 290  4E28              LOCAL_ENASLT:
 291  4E28 CD 48 4E         CALL L0353
 292  4E2B FA 35 4E         JP M, L0340
 293  4E2E DB A8            IN A, (0A8H)
 294  4E30 A1               AND C
 295  4E31 B0               OR B
 296  4E32 D3 A8            OUT (0A8H), A
 297  4E34 C9               RET
 298  4E35              L0340:
 299  4E35 E5               PUSH HL
 300  4E36 CD 6D 4E         CALL L0378
 301  4E39 4F               LD C, A
 302  4E3A 06 00            LD B, 0
 303  4E3C 7D               LD A, L
 304  4E3D A4               AND H
 305  4E3E B2               OR D
 306  4E3F 21 C5 FC         LD HL, 0FCC5H
 307  4E42 09               ADD HL, BC
 308  4E43 77               LD (HL), A
 309  4E44 E1               POP HL
 310  4E45 79               LD A, C
 311  4E46 18 E0            JR LOCAL_ENASLT
 312  4E48              L0353:
 313  4E48 F3               DI
 314  4E49 F5               PUSH AF
 315  4E4A 7C               LD A, H
 316  4E4B 07               RLCA
 317  4E4C 07               RLCA
 318  4E4D E6 03            AND 3
 319  4E4F 5F               LD E, A
 320  4E50 3E C0            LD A, 0C0H
 321  4E52              L035D:
 322  4E52 07               RLCA
 323  4E53 07               RLCA
 324  4E54 1D               DEC E
 325  4E55 F2 52 4E         JP P, L035D
 326  4E58 5F               LD E, A
 327  4E59 2F               CPL
 328  4E5A 4F               LD C, A
 329  4E5B F1               POP AF
 330  4E5C F5               PUSH AF
 331  4E5D E6 03            AND 3
 332  4E5F 3C               INC A
 333  4E60 47               LD B, A
 334  4E61 3E AB            LD A, 0ABH
 335  4E63              L036E:
 336  4E63 C6 55            ADD A, 055H
 337  4E65 10 FC            DJNZ L036E
 338  4E67 57               LD D, A
 339  4E68 A3               AND E
 340  4E69 47               LD B, A
 341  4E6A F1               POP AF
 342  4E6B A7               AND A
 343  4E6C C9               RET
 344  4E6D              L0378:
 345  4E6D F5               PUSH AF
 346  4E6E 7A               LD A, D
 347  4E6F E6 C0            AND 0C0H
 348  4E71 4F               LD C, A
 349  4E72 F1               POP AF
 350  4E73 F5               PUSH AF
 351  4E74 57               LD D, A
 352  4E75 DB A8            IN A, (0A8H)
 353  4E77 47               LD B, A
 354  4E78 E6 3F            AND 03FH
 355  4E7A B1               OR C
 356  4E7B D3 A8            OUT (0A8H), A
 357  4E7D 7A               LD A, D
 358  4E7E 0F               RRCA
 359  4E7F 0F               RRCA
 360  4E80 E6 03            AND 3
 361  4E82 57               LD D, A
 362  4E83 3E AB            LD A, 0ABH
 363  4E85              L0390:
 364  4E85 C6 55            ADD A, 055H
 365  4E87 15               DEC D
 366  4E88 F2 85 4E         JP P, L0390
 367  4E8B A3               AND E
 368  4E8C 57               LD D, A
 369  4E8D 7B               LD A, E
 370  4E8E 2F               CPL
 371  4E8F 67               LD H, A
 372  4E90 3A FF FF         LD A, (0FFFFH)
 373  4E93 2F               CPL
 374  4E94 6F               LD L, A
 375  4E95 A4               AND H
 376  4E96 B2               OR D
 377  4E97 32 FF FF         LD (0FFFFH), A
 378  4E9A 78               LD A, B
 379  4E9B D3 A8            OUT (0A8H), A
 380  4E9D F1               POP AF
 381  4E9E E6 03            AND 3
 382  4EA0 C9               RET
 383  4EA1              ; *******************************************************************************************************
 384  4EA1
 385  4EA1              ; *******************************************************************************************************
 386  4EA1              ; some common code to activate page 0 and place values needed to restore original page on stack
 387  4EA1              ; input IY=return address
 388  4EA1              ENABLE_PAGE0:
 389  4EA1 AF               XOR A
 390  4EA2 CD E2 4D         CALL GET_PAGE_INFO
 391  4EA5 C5               PUSH BC
 392  4EA6 D5               PUSH DE
 393  4EA7 3A 41 F3         LD A, (RAMAD0)
 394  4EAA 26 00            LD H, 0
 395  4EAC CD 28 4E         CALL LOCAL_ENASLT
 396  4EAF FD E9        	JP (IY)
 397  4EB1              ; *******************************************************************************************************
 398  4EB1
 399  4EB1              ; *******************************************************************************************************
 400  4EB1              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
 401  4EB1              ; struct {
 402  4EB1              ; DW y
 403  4EB1              ; DW x
 404  4EB1              ; DW pattern (0-31)
 405  4EB1              ; DW color
 406  4EB1              ; } [32]
 407  4EB1              ; will hide sprites whose location is outside of visible area
 408  4EB1              ; works in screen 1 and 2
 409  4EB1              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
 410  4EB1              ; modifies AF, AF', BC, DE, HL
 411  4EB1              SPRATR_UPDATE:
 412  4EB1              	; check if initialized
 413  4EB1 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
 414  4EB4 B7           	OR A
 415  4EB5 C8           	RET Z
 416  4EB6              	; check if update requested
 417  4EB6 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 418  4EB9 7E           	LD A, (HL)
 419  4EBA B7           	OR A
 420  4EBB C8           	RET Z
 421  4EBC              	; check screen mode
 422  4EBC 3A AF FC     	LD A, (SCRMOD)
 423  4EBF 3D           	DEC A
 424  4EC0 28 02        	JR Z, .L0 ; screen 1
 425  4EC2 3D           	DEC A
 426  4EC3 C0           	RET NZ ; not screen 2
 427  4EC4              .L0:
 428  4EC4 06 20        	LD B, 32 ; sprite number
 429  4EC6 0E 98        	LD C, #98 ; register for vpd data output
 430  4EC8              	; set VDP address
 431  4EC8 2A 28 F9     	LD HL, (ATRBAS)
 432  4ECB 3A FD 4C     	LD A, (FLICKER)
 433  4ECE 5F           	LD E, A
 434  4ECF 08           	EX AF, AF'
 435  4ED0 7B           	LD A, E
 436  4ED1 87           	ADD A, A
 437  4ED2 87           	ADD A, A
 438  4ED3 16 00        	LD D, 0
 439  4ED5 5F           	LD E, A
 440  4ED6 19           	ADD HL, DE
 441  4ED7 CD D7 4D     	CALL SETWRT_LOCAL
 442  4EDA ED 73 FB 4C  	LD (TMPSP), SP
 443  4EDE ED 7B F9 4C  	LD SP, (SPRATR_DATA)
 444  4EE2
 445  4EE2              .LOOP:
 446  4EE2 E1           	POP HL
 447  4EE3 24           	INC H
 448  4EE4 28 0D        	JR Z, .L1 ; negative number above -256
 449  4EE6 25           	DEC H
 450  4EE7 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
 451  4EE9 7D           	LD A, L
 452  4EEA FE C0        	CP 192
 453  4EEC 30 10        	JR NC, .OUT3
 454  4EEE 3D           	DEC A ; due to VDP rule that top of screen is -1
 455  4EEF 57           	LD D, A
 456  4EF0 C3 0E 4F     	JP .X
 457  4EF3              .L1:
 458  4EF3 7D           	LD A, L
 459  4EF4 C6 10        	ADD 16
 460  4EF6 FA FE 4E     	JP M, .OUT3 ; below -16
 461  4EF9 2D           	DEC L ; due to VDP rule that top of screen is -1
 462  4EFA 55           	LD D, L
 463  4EFB C3 0E 4F     	JP .X
 464  4EFE              .OUT3:
 465  4EFE E1           	POP HL ; skip x value
 466  4EFF              .OUT2:
 467  4EFF E1           	POP HL ; skip pattern
 468  4F00 E1           	POP HL ; skip color
 469  4F01 3E D1        	LD A, #D1
 470  4F03 D3 98        	OUT (#98), A ; sprite hidden
 471  4F05 D3 98        	OUT (#98), A ; value unimportant
 472  4F07 D3 98        	OUT (#98), A ; value unimportant
 473  4F09 D3 98        	OUT (#98), A ; value unimportant
 474  4F0B C3 32 4F     	JP .NEXT
 475  4F0E              .X:
 476  4F0E E1           	POP HL
 477  4F0F 24           	INC H
 478  4F10 28 08        	JR Z, .L2
 479  4F12 25           	DEC H
 480  4F13 20 EA        	JR NZ, .OUT2
 481  4F15 1E 00        	LD E, 0 ; EC bit
 482  4F17 C3 23 4F     	JP .XY
 483  4F1A              .L2:
 484  4F1A 7D           	LD A, L
 485  4F1B C6 20        	ADD 32
 486  4F1D FA FF 4E     	JP M, .OUT2
 487  4F20 6F           	LD L, A
 488  4F21 1E 80        	LD E, #80
 489  4F23              .XY:
 490  4F23 ED 51        	OUT (C), D
 491  4F25 ED 69        	OUT (C), L
 492  4F27 E1           	POP HL ; pattern
 493  4F28 7D           	LD A, L
 494  4F29 87           	ADD A, A
 495  4F2A 87           	ADD A, A ; needs to go at 4x
 496  4F2B D3 98        	OUT (#98), A
 497  4F2D E1           	POP HL ; color
 498  4F2E 7D           	LD A, L
 499  4F2F B3           	OR E
 500  4F30 D3 98        	OUT (#98), A
 501  4F32              .NEXT:
 502  4F32 08           	EX AF, AF'
 503  4F33 3C           	INC A
 504  4F34 E6 1F        	AND 31
 505  4F36 C2 4A 4F     	JP NZ, .NEXT2
 506  4F39 08           	EX AF, AF'
 507  4F3A 2A 28 F9     	LD HL, (ATRBAS)
 508  4F3D              	; CALL SETWRT_LOCAL not allowed as SP modified
 509  4F3D 7D           	LD	A, L
 510  4F3E D3 99        	OUT	(099H), A
 511  4F40 7C           	LD	A, H
 512  4F41 E6 3F        	AND	03FH
 513  4F43 F6 40        	OR	040H
 514  4F45 D3 99        	OUT	(099H), A
 515  4F47 C3 4B 4F     	JP .NEXT3
 516  4F4A              .NEXT2:
 517  4F4A 08           	EX AF, AF'
 518  4F4B              .NEXT3:
 519  4F4B 10 95        	DJNZ .LOOP
 520  4F4D 08           	EX AF, AF'
 521  4F4E 3C           	INC A
 522  4F4F 32 FD 4C     	LD (FLICKER), A
 523  4F52
 524  4F52 ED 7B FB 4C  	LD SP, (TMPSP)
 525  4F56 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 526  4F59 36 00        	LD (HL), 0 ; zero out update flag
 527  4F5B C9           	RET
 528  4F5C              ; *******************************************************************************************************
 529  4F5C
 530  4F5C              ; General BASIC CALL-instruction handler
 531  4F5C              CALLHAND:
 532  4F5C E5           	PUSH HL
 533  4F5D 21 FE 4C     	LD	HL, CMDS ; pointer table based on starting letter
 534  4F60 3A 89 FD         LD A, (PROCNM)
 535  4F63 D6 41            SUB 'A'
 536  4F65 87               ADD A, A
 537  4F66 16 00            LD D, 0
 538  4F68 5F               LD E, A
 539  4F69 19               ADD HL, DE
 540  4F6A 5E               LD E, (HL)
 541  4F6B 23               INC HL
 542  4F6C 56               LD D, (HL)
 543  4F6D 7A               LD A, D
 544  4F6E B3               OR E
 545  4F6F 28 24            JR Z, .CMDNOTRECOGNIZED
 546  4F71 EB               EX DE, HL
 547  4F72              .CHKCMD:
 548  4F72 11 89 FD     	LD	DE, PROCNM
 549  4F75 1A           .LOOP:	LD	A,(DE)
 550  4F76 BE           	CP	(HL)
 551  4F77 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 552  4F79 13           	INC	DE
 553  4F7A 23           	INC	HL
 554  4F7B A7           	AND	A
 555  4F7C 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 556  4F7E 5E           	LD	E,(HL)
 557  4F7F 23           	INC	HL
 558  4F80 56           	LD	D,(HL)
 559  4F81 E1           	POP	HL		; routine address
 560  4F82 CD 08 50     	CALL	GETPREVCHAR
 561  4F85 CD 97 4F     	CALL	.CALLDE		; Call routine
 562  4F88 A7           	AND	A
 563  4F89 C9           	RET
 564  4F8A
 565  4F8A              .TONEXTCMD:
 566  4F8A 0E FF        	LD	C,0FFH
 567  4F8C AF           	XOR	A
 568  4F8D ED B1        	CPIR			; Skip to end of instruction name
 569  4F8F 23           	INC	HL
 570  4F90 23           	INC	HL		; Skip address
 571  4F91 BE           	CP	(HL)
 572  4F92 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 573  4F94 E1           	POP	HL
 574  4F95              .CMDNOTRECOGNIZED:
 575  4F95 37               SCF
 576  4F96 C9           	RET
 577  4F97
 578  4F97              .CALLDE:
 579  4F97 D5           	PUSH	DE
 580  4F98 C9           	RET
 581  4F99
 582  4F99              ;---------------------------
 583  4F99
 584  4F99              ;---------------------------
 585  4F99              UPRINT:
 586  4F99 CD DD 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 587  4F9C E5           	PUSH	HL
 588  4F9D CD D3 4F             CALL    GETSTRPNT
 589  4FA0              .LOOP
 590  4FA0 7E                   LD      A,(HL)
 591  4FA1 CD AD 4F             CALL    .UCASE
 592  4FA4 CD A2 00             CALL    CHPUT  ;Print
 593  4FA7 23                   INC     HL
 594  4FA8 10 F6                DJNZ    .LOOP
 595  4FAA
 596  4FAA E1           	POP	HL
 597  4FAB B7           	OR      A
 598  4FAC C9           	RET
 599  4FAD
 600  4FAD              .UCASE:
 601  4FAD FE 61                CP      "a"
 602  4FAF D8                   RET     C
 603  4FB0 FE 7B                CP      "z"+1
 604  4FB2 D0                   RET     NC
 605  4FB3 E6 DF                AND     %11011111
 606  4FB5 C9                   RET
 607  4FB6              ;---------------------------
 608  4FB6              LPRINT:
 609  4FB6 CD DD 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 610  4FB9 E5           	PUSH	HL
 611  4FBA CD D3 4F             CALL    GETSTRPNT
 612  4FBD              .LOOP
 613  4FBD 7E                   LD      A,(HL)
 614  4FBE CD CA 4F             CALL    .LCASE
 615  4FC1 CD A2 00             CALL    CHPUT  ;Print
 616  4FC4 23                   INC     HL
 617  4FC5 10 F6                DJNZ    .LOOP
 618  4FC7
 619  4FC7 E1           	POP	HL
 620  4FC8 B7           	OR      A
 621  4FC9 C9           	RET
 622  4FCA
 623  4FCA              .LCASE:
 624  4FCA FE 41                CP      "A"
 625  4FCC D8                   RET     C
 626  4FCD FE 5B                CP      "Z"+1
 627  4FCF D0                   RET     NC
 628  4FD0 F6 20                OR      %00100000
 629  4FD2 C9                   RET
 630  4FD3              ;---------------------------
 631  4FD3
 632  4FD3              GETSTRPNT:
 633  4FD3              ; OUT:
 634  4FD3              ; HL = String Address
 635  4FD3              ; B  = Lenght
 636  4FD3
 637  4FD3 2A F8 F7             LD      HL,(USR)
 638  4FD6 46                   LD      B,(HL)
 639  4FD7 23                   INC     HL
 640  4FD8 5E                   LD      E,(HL)
 641  4FD9 23                   INC     HL
 642  4FDA 56                   LD      D,(HL)
 643  4FDB EB                   EX      DE,HL
 644  4FDC C9                   RET
 645  4FDD
 646  4FDD              EVALTXTPARAM:
 647  4FDD CD FE 4F     	CALL	CHKCHAR
 648  4FE0 28           	DEFB	"("             ; Check for (
 649  4FE1 DD 21 64 4C  	LD	IX,FRMEVL
 650  4FE5 CD 59 01     	CALL	CALBAS		; Evaluate expression
 651  4FE8 3A 63 F6             LD      A,(VALTYP)
 652  4FEB FE 03                CP      3               ; Text type?
 653  4FED C2 10 50             JP      NZ,TYPE_MISMATCH
 654  4FF0 E5                   PUSH	HL
 655  4FF1 DD 21 D0 67          LD	IX,FRESTR         ; Free the temporary string
 656  4FF5 CD 59 01             CALL	CALBAS
 657  4FF8 E1                   POP	HL
 658  4FF9 CD FE 4F     	CALL	CHKCHAR
 659  4FFC 29           	DEFB	")"             ; Check for )
 660  4FFD C9                   RET
 661  4FFE
 662  4FFE
 663  4FFE              CHKCHAR:
 664  4FFE CD 08 50     	CALL	GETPREVCHAR	; Get previous basic char
 665  5001 E3           	EX	(SP),HL
 666  5002 BE           	CP	(HL) 	        ; Check if good char
 667  5003 20 0F        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 668  5005 23           	INC	HL
 669  5006 E3           	EX	(SP),HL
 670  5007 23           	INC	HL		; Get next basic char
 671  5008
 672  5008              GETPREVCHAR:
 673  5008 2B           	DEC	HL
 674  5009 DD 21 66 46  	LD	IX,CHRGTR
 675  500D C3 59 01     	JP      CALBAS
 676  5010
 677  5010
 678  5010              TYPE_MISMATCH:
 679  5010 1E 0D            LD E, 13 ; Type mismatch
 680  5012 18 02            JR THROW_ERROR
 681  5014
 682  5014              SYNTAX_ERROR:
 683  5014 1E 02            LD E, 2 ; Syntax error
 684  5016              THROW_ERROR:
 685  5016 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 686  501A C3 59 01     	JP	CALBAS
 687  501D
 688  501D              ;---------------------------
 689  501D
 690  501D              ; *******************************************************************************************************
 691  501D              ; function to handle CALL MEMCPY basic extension
 692  501D              ; _MEMCPY ( INT source,
 693  501D              ;			INT destination,
 694  501D              ;			INT count,
 695  501D              ;			BYTE enable_ram, >0 = true
 696  501D              ;			BYTE wait_vsync) >0 = treu
 697  501D              ; enable_ram will put ram in page 0 also, page 1 is already there
 698  501D              ; wait_vsync will issue HALT before copying
 699  501D              MEMCPY:
 700  501D              	; opening (
 701  501D CD FE 4F     	CALL CHKCHAR
 702  5020 28           	DB '('
 703  5021              	; get source address
 704  5021 DD 21 2F 54  	LD IX, FRMQNT
 705  5025 CD 59 01     	CALL CALBAS
 706  5028 D5           	PUSH DE
 707  5029              	; comma
 708  5029 CD FE 4F     	CALL CHKCHAR
 709  502C 2C           	DB ','
 710  502D              	; get destination address
 711  502D DD 21 2F 54  	LD IX, FRMQNT
 712  5031 CD 59 01     	CALL CALBAS
 713  5034 D5           	PUSH DE
 714  5035              	; comma
 715  5035 CD FE 4F     	CALL CHKCHAR
 716  5038 2C           	DB ','
 717  5039              	; get length
 718  5039 DD 21 2F 54  	LD IX, FRMQNT
 719  503D CD 59 01     	CALL CALBAS
 720  5040 D5           	PUSH DE
 721  5041              	; comma
 722  5041 CD FE 4F     	CALL CHKCHAR
 723  5044 2C           	DB ','
 724  5045              	; get ROM/RAM
 725  5045 DD 21 1C 52  	LD IX, GETBYT
 726  5049 CD 59 01     	CALL CALBAS
 727  504C F5           	PUSH AF
 728  504D              	; comma
 729  504D CD FE 4F     	CALL CHKCHAR
 730  5050 2C           	DB ','
 731  5051              	; get vsync wait
 732  5051 DD 21 1C 52  	LD IX, GETBYT
 733  5055 CD 59 01     	CALL CALBAS
 734  5058 F5           	PUSH AF
 735  5059              	; ending )
 736  5059 CD FE 4F     	CALL CHKCHAR
 737  505C 29           	DB ')'
 738  505D
 739  505D FB               EI
 740  505E              	; save position
 741  505E E5           	PUSH HL
 742  505F DD E1        	POP IX
 743  5061
 744  5061              	; syntax ok
 745  5061              	; wait for vsync if needed
 746  5061 F1           	POP AF
 747  5062 B7           	OR A
 748  5063 28 01        	JR Z, .L1
 749  5065 76           	HALT
 750  5066
 751  5066              .L1:
 752  5066              	; enable RAM in page 0 if needed
 753  5066 F1           	POP AF
 754  5067 B7           	OR A
 755  5068              	; pop LDIR parameters and store away for later
 756  5068 C1           	POP BC
 757  5069 D1           	POP DE
 758  506A E1           	POP HL
 759  506B 28 1A        	JR Z, .L2
 760  506D D9           	EXX
 761  506E AF               XOR A
 762  506F CD E2 4D         CALL GET_PAGE_INFO
 763  5072 C5               PUSH BC
 764  5073 D5               PUSH DE
 765  5074 3A 41 F3         LD A, (RAMAD0)
 766  5077 26 00            LD H, 0
 767  5079 F3           	DI
 768  507A CD 28 4E         CALL LOCAL_ENASLT
 769  507D D9           	EXX
 770  507E ED B0        	LDIR
 771  5080 D1               POP DE
 772  5081 C1               POP BC
 773  5082 CD 19 4E         CALL RESTORE_PAGE_INFO
 774  5085 18 02        	JR .L3
 775  5087
 776  5087              .L2:
 777  5087 ED B0        	LDIR
 778  5089
 779  5089              .L3:
 780  5089 DD E5        	PUSH IX
 781  508B E1           	POP HL
 782  508C C9           	RET
 783  508D              ; *******************************************************************************************************
 784  508D
 785  508D              ; *******************************************************************************************************
 786  508D              ; function to handle CALL FILVRM basic extension
 787  508D              ; FILVRM ( INT offset,
 788  508D              ;		   INT count,
 789  508D              ;		   BYTE value,
 790  508D              ;		   BYTE wait_vsync) >0 = true
 791  508D              ; wait_vsync will issue HALT before copying
 792  508D              FILVRM:
 793  508D              	; opening (
 794  508D CD FE 4F     	CALL CHKCHAR
 795  5090 28           	DB '('
 796  5091              	; get offset address
 797  5091 DD 21 2F 54  	LD IX, FRMQNT
 798  5095 CD 59 01     	CALL CALBAS
 799  5098 D5           	PUSH DE
 800  5099              	; comma
 801  5099 CD FE 4F     	CALL CHKCHAR
 802  509C 2C           	DB ','
 803  509D              	; get count
 804  509D DD 21 2F 54  	LD IX, FRMQNT
 805  50A1 CD 59 01     	CALL CALBAS
 806  50A4 D5           	PUSH DE
 807  50A5              	; comma
 808  50A5 CD FE 4F     	CALL CHKCHAR
 809  50A8 2C           	DB ','
 810  50A9              	; get value
 811  50A9 DD 21 1C 52  	LD IX, GETBYT
 812  50AD CD 59 01     	CALL CALBAS
 813  50B0 F5           	PUSH AF
 814  50B1              	; comma
 815  50B1 CD FE 4F     	CALL CHKCHAR
 816  50B4 2C           	DB ','
 817  50B5              	; get vsync wait
 818  50B5 DD 21 1C 52  	LD IX, GETBYT
 819  50B9 CD 59 01     	CALL CALBAS
 820  50BC F5           	PUSH AF
 821  50BD              	; ending )
 822  50BD CD FE 4F     	CALL CHKCHAR
 823  50C0 29           	DB ')'
 824  50C1
 825  50C1 FB               EI
 826  50C2              	; save position
 827  50C2 E5           	PUSH HL
 828  50C3 DD E1        	POP IX
 829  50C5
 830  50C5              	; syntax ok
 831  50C5              	; wait for vsync if needed
 832  50C5 F1           	POP AF
 833  50C6 B7           	OR A
 834  50C7 28 01        	JR Z, .L1
 835  50C9 76           	HALT
 836  50CA
 837  50CA              .L1:
 838  50CA F1               POP AF ; value
 839  50CB C1               POP BC ; count
 840  50CC E1               POP HL ; offset
 841  50CD CD 56 00         CALL BIOS_FILVRM
 842  50D0
 843  50D0              .L3:
 844  50D0 DD E5        	PUSH IX
 845  50D2 E1           	POP HL
 846  50D3 C9           	RET
 847  50D4              ; *******************************************************************************************************
 848  50D4
 849  50D4              ; *******************************************************************************************************
 850  50D4              ; function to handle CALL FILRAM basic extension
 851  50D4              ; FILRAM ( INT start address,
 852  50D4              ;		   INT count,
 853  50D4              ;		   BYTE value,
 854  50D4              ;	   	   BYTE enable_ram, >0 = true
 855  50D4              ;		   BYTE wait_vsync) >0 = true
 856  50D4              ; enable_ram will put ram in page 0 also, page 1 is already there
 857  50D4              ; wait_vsync will issue HALT before copying
 858  50D4              FILRAM:
 859  50D4              	; opening (
 860  50D4 CD FE 4F     	CALL CHKCHAR
 861  50D7 28           	DB '('
 862  50D8              	; get start address
 863  50D8 DD 21 2F 54  	LD IX, FRMQNT
 864  50DC CD 59 01     	CALL CALBAS
 865  50DF D5           	PUSH DE
 866  50E0              	; comma
 867  50E0 CD FE 4F     	CALL CHKCHAR
 868  50E3 2C           	DB ','
 869  50E4              	; get count
 870  50E4 DD 21 2F 54  	LD IX, FRMQNT
 871  50E8 CD 59 01     	CALL CALBAS
 872  50EB D5           	PUSH DE
 873  50EC              	; comma
 874  50EC CD FE 4F     	CALL CHKCHAR
 875  50EF 2C           	DB ','
 876  50F0              	; get value
 877  50F0 DD 21 1C 52  	LD IX, GETBYT
 878  50F4 CD 59 01     	CALL CALBAS
 879  50F7 F5           	PUSH AF
 880  50F8              	; comma
 881  50F8 CD FE 4F     	CALL CHKCHAR
 882  50FB 2C           	DB ','
 883  50FC              	; get ROM/RAM
 884  50FC DD 21 1C 52  	LD IX, GETBYT
 885  5100 CD 59 01     	CALL CALBAS
 886  5103 F5           	PUSH AF
 887  5104              	; comma
 888  5104 CD FE 4F     	CALL CHKCHAR
 889  5107 2C           	DB ','
 890  5108              	; get vsync wait
 891  5108 DD 21 1C 52  	LD IX, GETBYT
 892  510C CD 59 01     	CALL CALBAS
 893  510F F5           	PUSH AF
 894  5110              	; ending )
 895  5110 CD FE 4F     	CALL CHKCHAR
 896  5113 29           	DB ')'
 897  5114
 898  5114 FB               EI
 899  5115              	; save position
 900  5115 E5           	PUSH HL
 901  5116 DD E1        	POP IX
 902  5118
 903  5118              	; syntax ok
 904  5118              	; wait for vsync if needed
 905  5118 F1           	POP AF
 906  5119 B7           	OR A
 907  511A 28 01        	JR Z, .L1
 908  511C 76           	HALT
 909  511D
 910  511D              .L1:
 911  511D              	; enable RAM in page 0 if needed
 912  511D F1           	POP AF
 913  511E B7           	OR A
 914  511F              	; pop LDIR parameters and store away for later
 915  511F D1           	POP DE ; actually AF
 916  5120 C1           	POP BC ; count
 917  5121 E1           	POP HL ; start address
 918  5122 28 1B        	JR Z, .L2
 919  5124 D9           	EXX
 920  5125 AF               XOR A
 921  5126 CD E2 4D         CALL GET_PAGE_INFO
 922  5129 C5               PUSH BC
 923  512A D5               PUSH DE
 924  512B 3A 41 F3         LD A, (RAMAD0)
 925  512E 26 00            LD H, 0
 926  5130 F3           	DI
 927  5131 CD 28 4E         CALL LOCAL_ENASLT
 928  5134 D9           	EXX
 929  5135 CD 46 51     	CALL .FILLVALUE
 930  5138 D1               POP DE
 931  5139 C1               POP BC
 932  513A CD 19 4E         CALL RESTORE_PAGE_INFO
 933  513D 18 03        	JR .L3
 934  513F
 935  513F              .L2:
 936  513F CD 46 51     	CALL .FILLVALUE
 937  5142
 938  5142              .L3:
 939  5142 DD E5        	PUSH IX
 940  5144 E1           	POP HL
 941  5145 C9           	RET
 942  5146
 943  5146              .FILLVALUE:
 944  5146 72               LD (HL), D
 945  5147 54               LD D, H
 946  5148 5D               LD E, L
 947  5149 13               INC DE
 948  514A 0B               DEC BC
 949  514B ED B0            LDIR
 950  514D C9               RET
 951  514E              ; *******************************************************************************************************
 952  514E
 953  514E              ; *******************************************************************************************************
 954  514E              ; function to handle CALL GENCAL basic extension
 955  514E              ; GENCAL ( INT fn_addr, = address of the function to call
 956  514E              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 957  514E              ; output values of reristers will also be stored at reg_list_ptr
 958  514E              GENCAL_VAR_SP:
 959  514E 00 00            DW 0
 960  5150              GENCAL_VAR_SP2:
 961  5150 00 00            DW 0
 962  5152              GENCAL:
 963  5152              	; opening (
 964  5152 CD FE 4F     	CALL CHKCHAR
 965  5155 28           	DB '('
 966  5156              	; get function address
 967  5156 DD 21 2F 54  	LD IX, FRMQNT
 968  515A CD 59 01     	CALL CALBAS
 969  515D D5           	PUSH DE
 970  515E              	; comma
 971  515E CD FE 4F     	CALL CHKCHAR
 972  5161 2C           	DB ','
 973  5162              	; get pointer to register list
 974  5162 DD 21 2F 54  	LD IX, FRMQNT
 975  5166 CD 59 01     	CALL CALBAS
 976  5169 D5           	PUSH DE
 977  516A              	; ending )
 978  516A CD FE 4F     	CALL CHKCHAR
 979  516D 29           	DB ')'
 980  516E
 981  516E              	; save BASIC token position
 982  516E E5           	PUSH HL
 983  516F D9               EXX
 984  5170 E1           	POP HL ; HL'=next basic token
 985  5171 D9               EXX
 986  5172
 987  5172 E1               POP HL ; get pointer to register values
 988  5173 ED 73 4E 51      LD (GENCAL_VAR_SP), SP
 989  5177 F3               DI
 990  5178 F9               LD SP, HL
 991  5179 F1               POP AF
 992  517A C1               POP BC
 993  517B D1               POP DE
 994  517C E1               POP HL
 995  517D DD E1            POP IX
 996  517F FD E1            POP IY
 997  5181 D9               EXX
 998  5182 ED 73 50 51      LD (GENCAL_VAR_SP2), SP
 999  5186 ED 7B 4E 51      LD SP, (GENCAL_VAR_SP)
1000  518A FB               EI
1001  518B D1               POP DE ; get function to call
1002  518C E5               PUSH HL
1003  518D CD A8 51         CALL .EXXDECALL
1004  5190 F3               DI
1005  5191 ED 73 4E 51      LD (GENCAL_VAR_SP), SP
1006  5195 ED 7B 50 51      LD SP, (GENCAL_VAR_SP2)
1007  5199 FD E5            PUSH IY
1008  519B DD E5            PUSH IX
1009  519D E5               PUSH HL
1010  519E D5               PUSH DE
1011  519F C5               PUSH BC
1012  51A0 F5               PUSH AF
1013  51A1 ED 7B 4E 51      LD SP, (GENCAL_VAR_SP)
1014  51A5 FB               EI
1015  51A6 E1               POP HL
1016  51A7 C9           	RET
1017  51A8
1018  51A8              .EXXDECALL:
1019  51A8 D5               PUSH DE
1020  51A9 D9               EXX
1021  51AA C9               RET
1022  51AB              ; *******************************************************************************************************
1023  51AB
1024  51AB              ; *******************************************************************************************************
1025  51AB              ; function to handle CALL MEMVRM basic extension
1026  51AB              ; copies from RAM to VRAM
1027  51AB              ; _MEMVRM ( INT source,
1028  51AB              ;			INT destination,
1029  51AB              ;			INT count,
1030  51AB              ;			BYTE enable_ram, >0 = true
1031  51AB              ;			BYTE wait_vsync) >0 = treu
1032  51AB              ; enable_ram will put ram in page 0 also, page 1 is already there
1033  51AB              ; wait_vsync will issue HALT before copying
1034  51AB              MEMVRM:
1035  51AB              	; opening (
1036  51AB CD FE 4F     	CALL CHKCHAR
1037  51AE 28           	DB '('
1038  51AF              	; get source address
1039  51AF DD 21 2F 54  	LD IX, FRMQNT
1040  51B3 CD 59 01     	CALL CALBAS
1041  51B6 D5           	PUSH DE
1042  51B7              	; comma
1043  51B7 CD FE 4F     	CALL CHKCHAR
1044  51BA 2C           	DB ','
1045  51BB              	; get destination address
1046  51BB DD 21 2F 54  	LD IX, FRMQNT
1047  51BF CD 59 01     	CALL CALBAS
1048  51C2 D5           	PUSH DE
1049  51C3              	; comma
1050  51C3 CD FE 4F     	CALL CHKCHAR
1051  51C6 2C           	DB ','
1052  51C7              	; get length
1053  51C7 DD 21 2F 54  	LD IX, FRMQNT
1054  51CB CD 59 01     	CALL CALBAS
1055  51CE D5           	PUSH DE
1056  51CF              	; comma
1057  51CF CD FE 4F     	CALL CHKCHAR
1058  51D2 2C           	DB ','
1059  51D3              	; get ROM/RAM
1060  51D3 DD 21 1C 52  	LD IX, GETBYT
1061  51D7 CD 59 01     	CALL CALBAS
1062  51DA F5           	PUSH AF
1063  51DB              	; comma
1064  51DB CD FE 4F     	CALL CHKCHAR
1065  51DE 2C           	DB ','
1066  51DF              	; get vsync wait
1067  51DF DD 21 1C 52  	LD IX, GETBYT
1068  51E3 CD 59 01     	CALL CALBAS
1069  51E6 F5           	PUSH AF
1070  51E7              	; ending )
1071  51E7 CD FE 4F     	CALL CHKCHAR
1072  51EA 29           	DB ')'
1073  51EB
1074  51EB                  ; save position in BASIC text
1075  51EB E5           	PUSH HL
1076  51EC DD E1        	POP IX
1077  51EE
1078  51EE              	; syntax ok
1079  51EE              	; wait for vsync if needed
1080  51EE F1           	POP AF
1081  51EF B7           	OR A
1082  51F0 28 03        	JR Z, .L1
1083  51F2 FB               EI
1084  51F3 76           	HALT
1085  51F4 F3               DI ; since interrupt can modify vram address
1086  51F5
1087  51F5              .L1:
1088  51F5              	; enable RAM in page 0 if needed
1089  51F5 F1           	POP AF
1090  51F6 B7           	OR A
1091  51F7              	; pop LDIR parameters and store away for later
1092  51F7 C1           	POP BC
1093  51F8 D1           	POP DE
1094  51F9 E1           	POP HL
1095  51FA 28 1A        	JR Z, .L2
1096  51FC D9           	EXX
1097  51FD AF               XOR A
1098  51FE CD E2 4D         CALL GET_PAGE_INFO
1099  5201 C5               PUSH BC
1100  5202 D5               PUSH DE
1101  5203 3A 41 F3         LD A, (RAMAD0)
1102  5206 26 00            LD H, 0
1103  5208 CD 28 4E         CALL LOCAL_ENASLT
1104  520B D9           	EXX
1105  520C CD 1D 52     	CALL .LDIRVM
1106  520F D1               POP DE
1107  5210 C1               POP BC
1108  5211 CD 19 4E         CALL RESTORE_PAGE_INFO
1109  5214 18 03        	JR .L3
1110  5216
1111  5216              .L2:
1112  5216 CD 1D 52     	CALL .LDIRVM
1113  5219
1114  5219              .L3:
1115  5219 DD E5        	PUSH IX
1116  521B E1           	POP HL
1117  521C C9           	RET
1118  521D
1119  521D              .LDIRVM:
1120  521D EB           	EX DE, HL
1121  521E CD D7 4D     	CALL SETWRT_LOCAL
1122  5221 EB           	EX DE, HL
1123  5222
1124  5222              .L4:
1125  5222 7E               LD A, (HL)
1126  5223 D3 98            OUT (#98), A
1127  5225 23               INC HL
1128  5226 0B               DEC BC
1129  5227 79               LD A, C
1130  5228 B0               OR B
1131  5229 C2 22 52         JP NZ, .L4
1132  522C C9               RET
1133  522D              ; *******************************************************************************************************
1134  522D
1135  522D              ; *******************************************************************************************************
1136  522D              ; function to handle CALL VRMMEM basic extension
1137  522D              ; copies from RAM to VRAM
1138  522D              ; _VRMMEM ( INT source,
1139  522D              ;			INT destination,
1140  522D              ;			INT count,
1141  522D              ;			BYTE enable_ram, >0 = true
1142  522D              ;			BYTE wait_vsync) >0 = true
1143  522D              ; enable_ram will put ram in page 0 also, page 1 is already there
1144  522D              ; wait_vsync will issue HALT before copying
1145  522D              VRMMEM:
1146  522D              	; opening (
1147  522D CD FE 4F     	CALL CHKCHAR
1148  5230 28           	DB '('
1149  5231              	; get source address
1150  5231 DD 21 2F 54  	LD IX, FRMQNT
1151  5235 CD 59 01     	CALL CALBAS
1152  5238 D5           	PUSH DE
1153  5239              	; comma
1154  5239 CD FE 4F     	CALL CHKCHAR
1155  523C 2C           	DB ','
1156  523D              	; get destination address
1157  523D DD 21 2F 54  	LD IX, FRMQNT
1158  5241 CD 59 01     	CALL CALBAS
1159  5244 D5           	PUSH DE
1160  5245              	; comma
1161  5245 CD FE 4F     	CALL CHKCHAR
1162  5248 2C           	DB ','
1163  5249              	; get length
1164  5249 DD 21 2F 54  	LD IX, FRMQNT
1165  524D CD 59 01     	CALL CALBAS
1166  5250 D5           	PUSH DE
1167  5251              	; comma
1168  5251 CD FE 4F     	CALL CHKCHAR
1169  5254 2C           	DB ','
1170  5255              	; get ROM/RAM
1171  5255 DD 21 1C 52  	LD IX, GETBYT
1172  5259 CD 59 01     	CALL CALBAS
1173  525C F5           	PUSH AF
1174  525D              	; comma
1175  525D CD FE 4F     	CALL CHKCHAR
1176  5260 2C           	DB ','
1177  5261              	; get vsync wait
1178  5261 DD 21 1C 52  	LD IX, GETBYT
1179  5265 CD 59 01     	CALL CALBAS
1180  5268 F5           	PUSH AF
1181  5269              	; ending )
1182  5269 CD FE 4F     	CALL CHKCHAR
1183  526C 29           	DB ')'
1184  526D
1185  526D                  ; save position in BASIC text
1186  526D E5           	PUSH HL
1187  526E DD E1        	POP IX
1188  5270
1189  5270              	; syntax ok
1190  5270              	; wait for vsync if needed
1191  5270 F1           	POP AF
1192  5271 B7           	OR A
1193  5272 28 03        	JR Z, .L1
1194  5274 FB               EI
1195  5275 76           	HALT
1196  5276 F3               DI ; since interrupt can modify vram address
1197  5277
1198  5277              .L1:
1199  5277              	; enable RAM in page 0 if needed
1200  5277 F1           	POP AF
1201  5278 B7           	OR A
1202  5279              	; pop LDIR parameters and store away for later
1203  5279 C1           	POP BC
1204  527A D1           	POP DE
1205  527B E1           	POP HL
1206  527C 28 1A        	JR Z, .L2
1207  527E D9           	EXX
1208  527F AF               XOR A
1209  5280 CD E2 4D         CALL GET_PAGE_INFO
1210  5283 C5               PUSH BC
1211  5284 D5               PUSH DE
1212  5285 3A 41 F3         LD A, (RAMAD0)
1213  5288 26 00            LD H, 0
1214  528A CD 28 4E         CALL LOCAL_ENASLT
1215  528D D9           	EXX
1216  528E CD 9F 52     	CALL .LDIRMV
1217  5291 D1               POP DE
1218  5292 C1               POP BC
1219  5293 CD 19 4E         CALL RESTORE_PAGE_INFO
1220  5296 18 03        	JR .L3
1221  5298
1222  5298              .L2:
1223  5298 CD 9F 52     	CALL .LDIRMV
1224  529B
1225  529B              .L3:
1226  529B DD E5        	PUSH IX
1227  529D E1           	POP HL
1228  529E C9           	RET
1229  529F
1230  529F              .LDIRMV:
1231  529F CD D7 4D     	CALL SETWRT_LOCAL
1232  52A2              .L4:
1233  52A2 DB 98            IN A, (#98)
1234  52A4 12           	LD (DE), A
1235  52A5 13               INC DE
1236  52A6 0B               DEC BC
1237  52A7 79               LD A, C
1238  52A8 B0               OR B
1239  52A9 C2 A2 52         JP NZ, .L4
1240  52AC C9               RET
1241  52AD              ; *******************************************************************************************************
1242  52AD
1243  52AD              ; *******************************************************************************************************
1244  52AD              ; H.TIMI function
1245  52AD              MBGE_HTIMI:
1246  52AD               EXPORT MBGE_HTIMI
1247  52AD F5           	PUSH AF
1248  52AE
1249  52AE CD B1 4E     	CALL SPRATR_UPDATE
1250  52B1
1251  52B1 3A F5 4C     	LD A, (SOUND_ENABLED)
1252  52B4 B7           	OR A
1253  52B5 28 2A        	JR Z, .EXIT
1254  52B7
1255  52B7              	; enable page 2
1256  52B7 3E 02            LD A, 2
1257  52B9 CD E2 4D         CALL GET_PAGE_INFO
1258  52BC C5               PUSH BC
1259  52BD D5               PUSH DE
1260  52BE 3A 43 F3         LD A, (RAMAD2)
1261  52C1 26 80            LD H, 080H
1262  52C3 CD 28 4E         CALL LOCAL_ENASLT
1263  52C6              	; enable page 0
1264  52C6 AF               XOR A
1265  52C7 CD E2 4D         CALL GET_PAGE_INFO
1266  52CA C5               PUSH BC
1267  52CB D5               PUSH DE
1268  52CC 3A 41 F3         LD A, (RAMAD0)
1269  52CF 26 00            LD H, 0
1270  52D1 CD 28 4E         CALL LOCAL_ENASLT
1271  52D4
1272  52D4 CD 31 42     	CALL PLY_AKG_PLAY
1273  52D7
1274  52D7              	; restore page 0
1275  52D7 D1               POP DE
1276  52D8 C1               POP BC
1277  52D9 CD 19 4E         CALL RESTORE_PAGE_INFO
1278  52DC              	; restore page 2
1279  52DC D1               POP DE
1280  52DD C1               POP BC
1281  52DE CD 19 4E         CALL RESTORE_PAGE_INFO
1282  52E1
1283  52E1              .EXIT:
1284  52E1 F1           	POP AF
1285  52E2 C3 EE 4C     	JP ORIG.HTIMI
1286  52E5              ; *******************************************************************************************************
1287  52E5
1288  52E5              ; *******************************************************************************************************
1289  52E5              ; function to handle CALL SNDPLYINIT basic extension
1290  52E5              ; initializes sound player
1291  52E5              ; _SNDPLYINIT ( INT music_offset,
1292  52E5              ;				INT sfx_offset, can be -1 if no SFX
1293  52E5              ; will put ram in page 0 also, page 1 is already there
1294  52E5              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1295  52E5              SNDPLYINIT:
1296  52E5              	; opening (
1297  52E5 CD FE 4F     	CALL CHKCHAR
1298  52E8 28           	DB '('
1299  52E9              	; get music address
1300  52E9 DD 21 2F 54  	LD IX, FRMQNT
1301  52ED CD 59 01     	CALL CALBAS
1302  52F0 D5           	PUSH DE
1303  52F1              	; comma
1304  52F1 CD FE 4F     	CALL CHKCHAR
1305  52F4 2C           	DB ','
1306  52F5              	; get sfx address
1307  52F5 DD 21 2F 54  	LD IX, FRMQNT
1308  52F9 CD 59 01     	CALL CALBAS
1309  52FC D5           	PUSH DE
1310  52FD              	; ending )
1311  52FD CD FE 4F     	CALL CHKCHAR
1312  5300 29           	DB ')'
1313  5301
1314  5301                  ; save position in BASIC text
1315  5301 44           	LD B, H
1316  5302 4D           	LD C, L
1317  5303
1318  5303              	; pop LDIR parameters and store away for later
1319  5303 D1           	POP DE ; sfx address
1320  5304 E1           	POP HL ; music address
1321  5305 C5           	PUSH BC ; basic text location
1322  5306 D9           	EXX
1323  5307 AF               XOR A
1324  5308 CD E2 4D         CALL GET_PAGE_INFO
1325  530B C5               PUSH BC
1326  530C D5               PUSH DE
1327  530D 3A 41 F3         LD A, (RAMAD0)
1328  5310 26 00            LD H, 0
1329  5312 CD 28 4E         CALL LOCAL_ENASLT
1330  5315 D9           	EXX
1331  5316
1332  5316 D5           	PUSH DE
1333  5317 AF           	XOR A
1334  5318              	; HL = music location
1335  5318 CD 60 41     	CALL PLY_AKG_INIT
1336  531B 3E 01        	LD A, 1
1337  531D 32 F3 4C     	LD (MUSIC_INIT_STATUS), A
1338  5320
1339  5320 E1           	POP HL
1340  5321 23           	INC HL
1341  5322 7D           	LD A, L
1342  5323 B4           	OR H
1343  5324 28 09        	JR Z,.L1
1344  5326 2B           	DEC HL
1345  5327 CD 1B 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1346  532A 3E 01        	LD A, 1
1347  532C 32 F4 4C     	LD (SFX_INIT_STATUS), A
1348  532F              .L1:
1349  532F D1               POP DE
1350  5330 C1               POP BC
1351  5331 CD 19 4E         CALL RESTORE_PAGE_INFO
1352  5334
1353  5334 E1           	POP HL
1354  5335 C9           	RET
1355  5336              ; *******************************************************************************************************
1356  5336
1357  5336              ; *******************************************************************************************************
1358  5336              ; function to handle CALL SNDPLYON basic extension
1359  5336              ; enables sound player
1360  5336              ; _SNDPLYON
1361  5336              ; sets SOUND_ENABLED variable to 1 if init call was done
1362  5336              ; if not throws out of data error
1363  5336              SNDPLYON:
1364  5336 3A F3 4C     	LD A, (MUSIC_INIT_STATUS)
1365  5339 B7           	OR A
1366  533A 20 05        	JR NZ, .L1
1367  533C              	; player not initialized, throw error
1368  533C 1E 04        	LD E, 04 ; Out of DATA
1369  533E C3 16 50     	JP THROW_ERROR
1370  5341              .L1:
1371  5341 32 F5 4C     	LD (SOUND_ENABLED), A
1372  5344              	; disable key click
1373  5344 AF           	XOR A
1374  5345 32 DB F3     	LD (CLIKSW), A
1375  5348 C9           	RET
1376  5349              ; *******************************************************************************************************
1377  5349
1378  5349              ; *******************************************************************************************************
1379  5349              ; function to handle CALL SNDPLYOFF basic extension
1380  5349              ; disables sound player
1381  5349              ; _SNDPLYOFF
1382  5349              ; sets SOUND_ENABLED variable to 0
1383  5349              ; calls AKG to stop music and SFX on all channels if initialized
1384  5349              SNDPLYOFF:
1385  5349 3A F5 4C     	LD A, (SOUND_ENABLED)
1386  534C B7           	OR A
1387  534D C8           	RET Z ; already stopped
1388  534E AF           	XOR A
1389  534F 32 F5 4C     	LD (SOUND_ENABLED), A
1390  5352 E5           	PUSH HL
1391  5353 CD 1F 42     	CALL PLY_AKG_STOP
1392  5356 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1393  5359 B7           	OR A
1394  535A 28 0E        	JR Z, .EXIT ; SFX not in use
1395  535C AF           	XOR A
1396  535D CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1397  5360 3E 01        	LD A, 1
1398  5362 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1399  5365 3E 02        	LD A, 2
1400  5367 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1401  536A              .EXIT:
1402  536A E1           	POP HL
1403  536B C9           	RET
1404  536C              ; *******************************************************************************************************
1405  536C
1406  536C              ; *******************************************************************************************************
1407  536C              ; function to handle CALL SNDSFX basic extension
1408  536C              ; plays a sound effect
1409  536C              ; _SNDSFX ( BYTE sfx_number, >0
1410  536C              ;			BYTE channel, = 0,1 or 2
1411  536C              ;			BYTE inverted_volume = 0-16, 0 being full volume
1412  536C              ; will put ram in page 0 also, page 1 is already there
1413  536C              ; if sound off throws illegal function call
1414  536C              ; if sfx not initialized, throws out of data
1415  536C              SNDSFX:
1416  536C              	; opening (
1417  536C CD FE 4F     	CALL CHKCHAR
1418  536F 28           	DB '('
1419  5370              	; get sfx_number
1420  5370 DD 21 1C 52  	LD IX, GETBYT
1421  5374 CD 59 01     	CALL CALBAS
1422  5377 D5           	PUSH DE
1423  5378              	; comma
1424  5378 CD FE 4F     	CALL CHKCHAR
1425  537B 2C           	DB ','
1426  537C              	; get sfx address
1427  537C DD 21 1C 52  	LD IX, GETBYT
1428  5380 CD 59 01     	CALL CALBAS
1429  5383 D5           	PUSH DE
1430  5384              	; comma
1431  5384 CD FE 4F     	CALL CHKCHAR
1432  5387 2C           	DB ','
1433  5388              	; get inverted volume
1434  5388 DD 21 1C 52  	LD IX, GETBYT
1435  538C CD 59 01     	CALL CALBAS
1436  538F D5           	PUSH DE
1437  5390              	; ending )
1438  5390 CD FE 4F     	CALL CHKCHAR
1439  5393 29           	DB ')'
1440  5394
1441  5394 3A F5 4C     	LD A, (SOUND_ENABLED)
1442  5397 B7           	OR A
1443  5398 20 05        	JR NZ, .L1
1444  539A              	; sound disabled, throw illegal function call
1445  539A 1E 05        	LD E, 5
1446  539C C3 16 50     	JP THROW_ERROR
1447  539F              .L1:
1448  539F 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1449  53A2 B7           	OR A
1450  53A3 20 05        	JR NZ, .L2
1451  53A5              	; sfx data not initialized, throw out of data
1452  53A5 1E 04        	LD E, 4
1453  53A7 C3 16 50     	JP THROW_ERROR
1454  53AA              .L2:
1455  53AA              	; pop  parameters and store away for later
1456  53AA D1           	POP DE ; inverted volume
1457  53AB 43           	LD B, E
1458  53AC D1           	POP DE ; channel
1459  53AD 4B           	LD C, E
1460  53AE D1           	POP DE
1461  53AF 7B           	LD A, E
1462  53B0 08           	EX AF, AF'
1463  53B1 E5           	PUSH HL ; basic text location
1464  53B2 D9           	EXX
1465  53B3 AF               XOR A
1466  53B4 CD E2 4D         CALL GET_PAGE_INFO
1467  53B7 C5               PUSH BC
1468  53B8 D5               PUSH DE
1469  53B9 3A 41 F3         LD A, (RAMAD0)
1470  53BC 26 00            LD H, 0
1471  53BE CD 28 4E         CALL LOCAL_ENASLT
1472  53C1 D9           	EXX
1473  53C2 08           	EX AF, AF'
1474  53C3 CD 1F 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1475  53C6
1476  53C6 D1               POP DE
1477  53C7 C1               POP BC
1478  53C8 CD 19 4E         CALL RESTORE_PAGE_INFO
1479  53CB
1480  53CB E1           	POP HL
1481  53CC C9           	RET
1482  53CD              ; *******************************************************************************************************
1483  53CD
1484  53CD              ; *******************************************************************************************************
1485  53CD              ; function to handle CALL SPRATRINI basic extension
1486  53CD              ; initializes sprites handler
1487  53CD              ; _SPRATRINI ( INT sprites_attributes_data,
1488  53CD              ;			   INT update_variable_location )
1489  53CD              ; expects both locations to be in range #8000+ or throws an error
1490  53CD              ; since these should be BASIC variables
1491  53CD              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA
1492  53CD              SPRATRINI:
1493  53CD              	; opening (
1494  53CD CD FE 4F     	CALL CHKCHAR
1495  53D0 28           	DB '('
1496  53D1              	; get address of sprite attribute table DIM SA%(3,31)
1497  53D1 DD 21 2F 54  	LD IX, FRMQNT
1498  53D5 CD 59 01     	CALL CALBAS
1499  53D8 D5           	PUSH DE
1500  53D9              	; comma
1501  53D9 CD FE 4F     	CALL CHKCHAR
1502  53DC 2C           	DB ','
1503  53DD              	; get update variable location SU%
1504  53DD DD 21 2F 54  	LD IX, FRMQNT
1505  53E1 CD 59 01     	CALL CALBAS
1506  53E4 D5           	PUSH DE
1507  53E5              	; ending )
1508  53E5 CD FE 4F     	CALL CHKCHAR
1509  53E8 29           	DB ')'
1510  53E9
1511  53E9 D1           	POP DE ; update variable location
1512  53EA CB 7A        	BIT 7, D ; is address >= &h8000
1513  53EC 20 05        	JR NZ, .L1
1514  53EE 1E 05        	LD E, 5 ; illegal function call
1515  53F0 C3 16 50     	JP THROW_ERROR
1516  53F3              .L1:
1517  53F3 ED 53 F7 4C  	LD (SPRATR_UPDATE_FLAG), DE
1518  53F7 D1           	POP DE ; address of sprite attribute table
1519  53F8 CB 7A        	BIT 7, D ; is address >= &h8000
1520  53FA 20 05        	JR NZ, .L2
1521  53FC 1E 05        	LD E, 5 ; illegal function call
1522  53FE C3 16 50     	JP THROW_ERROR
1523  5401              .L2:
1524  5401 ED 53 F9 4C  	LD (SPRATR_DATA), DE
1525  5405 3E 01        	LD A, 1
1526  5407 32 F6 4C     	LD (SPRATR_INIT_STATUS), A
1527  540A C9           	RET
1528  540B              ; *******************************************************************************************************
1529  540B
1530  540B              ; *******************************************************************************************************
1531  540B              ; function to handle CALL SPRSET basic extension
1532  540B              ; sets position, and optionally pattern and color of sprite
1533  540B              ; _SPRSET ( BYTE sprite_num , valid 0-31
1534  540B              ;			INT x,
1535  540B              ;			INT y,
1536  540B              ;			INT pattern, valid 0-31, otherwise ignored
1537  540B              ;			INT color, valid 0-15, otherwise ignored
1538  540B              SPRSET:
1539  540B 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1540  540E B7           	OR A
1541  540F 20 05        	JR NZ, .L1
1542  5411 1E 05        	LD E, 5 ; illegal function call
1543  5413 C3 16 50     	JP THROW_ERROR
1544  5416              .L1:
1545  5416              	; opening (
1546  5416 CD FE 4F     	CALL CHKCHAR
1547  5419 28           	DB '('
1548  541A              	; get sprite number
1549  541A DD 21 1C 52  	LD IX, GETBYT
1550  541E CD 59 01     	CALL CALBAS
1551  5421 F5           	PUSH AF
1552  5422              	; comma
1553  5422 CD FE 4F     	CALL CHKCHAR
1554  5425 2C           	DB ','
1555  5426              	; get x
1556  5426 DD 21 2F 54  	LD IX, FRMQNT
1557  542A CD 59 01     	CALL CALBAS
1558  542D D5           	PUSH DE
1559  542E              	; comma
1560  542E CD FE 4F     	CALL CHKCHAR
1561  5431 2C           	DB ','
1562  5432              	; get y
1563  5432 DD 21 2F 54  	LD IX, FRMQNT
1564  5436 CD 59 01     	CALL CALBAS
1565  5439 D5           	PUSH DE
1566  543A              	; comma
1567  543A CD FE 4F     	CALL CHKCHAR
1568  543D 2C           	DB ','
1569  543E              	; get pattern
1570  543E DD 21 2F 54  	LD IX, FRMQNT
1571  5442 CD 59 01     	CALL CALBAS
1572  5445 D5           	PUSH DE
1573  5446              	; comma
1574  5446 CD FE 4F     	CALL CHKCHAR
1575  5449 2C           	DB ','
1576  544A              	; get color
1577  544A DD 21 2F 54  	LD IX, FRMQNT
1578  544E CD 59 01     	CALL CALBAS
1579  5451 D5           	PUSH DE
1580  5452              	; ending )
1581  5452 CD FE 4F     	CALL CHKCHAR
1582  5455 29           	DB ')'
1583  5456
1584  5456                  ; save position in BASIC text
1585  5456 E5           	PUSH HL
1586  5457 DD E1        	POP IX
1587  5459
1588  5459 C1           	POP BC ; color
1589  545A D1           	POP DE ; pattern
1590  545B D9           	EXX
1591  545C C1           	POP BC ; y
1592  545D D1           	POP DE ; x
1593  545E F1           	POP AF ; sprite number
1594  545F FE 20        	CP 32
1595  5461 38 05        	JR C, .L2
1596  5463 1E 05        	LD E, 5 ; illegal function call
1597  5465 C3 16 50     	JP THROW_ERROR
1598  5468              .L2:
1599  5468              	; find location in sprite attributes table
1600  5468 87          > ADD A, A
1600  5469 87          > ADD A, A
1600  546A 87          > ADD A, A
1601  546B D5           	PUSH DE
1602  546C 16 00        	LD D, 0
1603  546E 5F           	LD E, A
1604  546F 2A F9 4C     	LD HL, (SPRATR_DATA)
1605  5472 19           	ADD HL, DE
1606  5473 D1           	POP DE
1607  5474              	; set y
1608  5474 71           	LD (HL), C
1609  5475 23           	INC HL
1610  5476 70           	LD (HL), B
1611  5477 23           	INC HL
1612  5478              	; set x
1613  5478 73           	LD (HL), E
1614  5479 23           	INC HL
1615  547A 72           	LD (HL), D
1616  547B 23           	INC HL
1617  547C E5           	PUSH HL
1618  547D D9           	EXX
1619  547E E1           	POP HL
1620  547F              	; check if 0<=pattern<32
1621  547F 7A           	LD A, D
1622  5480 B7           	OR A
1623  5481 20 0B        	JR NZ, .L3
1624  5483 7D           	LD A, L
1625  5484 FE 20        	CP 32
1626  5486 30 06        	JR NC, .L3
1627  5488              	; set pattern
1628  5488 73           	LD (HL), E
1629  5489 23           	INC HL
1630  548A 72           	LD (HL), D
1631  548B 23           	INC HL
1632  548C 18 02        	JR .L4
1633  548E              .L3:
1634  548E              	; skip pattern
1635  548E 23          > INC HL
1635  548F 23          > INC HL
1636  5490              .L4:
1637  5490              	; check if 0<=color<16
1638  5490 78           	LD A, B
1639  5491 B7           	OR A
1640  5492 20 08        	JR NZ, .L5
1641  5494 79           	LD A, C
1642  5495 FE 10        	CP 16
1643  5497 30 03        	JR NC, .L5
1644  5499              	; set color
1645  5499 71           	LD (HL), C
1646  549A 23           	INC HL
1647  549B 70           	LD (HL), B
1648  549C
1649  549C              .L5:
1650  549C DD E5        	PUSH IX
1651  549E E1           	POP HL
1652  549F C9           	RET
1653  54A0              ; *******************************************************************************************************
1654  54A0
1655  54A0              ; *******************************************************************************************************
1656  54A0              ; function sets sprite location based on initial coordinates and offset provided
1657  54A0              ; input A=sprite number in SPRATR_DATA , 0-31
1658  54A0              ; input DE=initial x
1659  54A0              ; input BC=initial y
1660  54A0              ; input IY=location where delta y,x are located
1661  54A0              ; modifies AF, HL, IX
1662  54A0              SPRSET_DELTA_POS:
1663  54A0 87          > ADD A, A
1663  54A1 87          > ADD A, A
1663  54A2 87          > ADD A, A
1664  54A3 D5           	PUSH DE
1665  54A4 16 00        	LD D, 0
1666  54A6 5F           	LD E, A
1667  54A7 DD 2A F9 4C  	LD IX, (SPRATR_DATA)
1668  54AB DD 19        	ADD IX, DE
1669  54AD D1           	POP DE
1670  54AE              	; IX=sprite's y location
1671  54AE FD 6E 00     	LD L, (IY)
1672  54B1 FD 66 01     	LD H, (IY+1)
1673  54B4 09           	ADD HL, BC
1674  54B5 DD 75 00     	LD (IX), L
1675  54B8 DD 74 01     	LD (IX+1), H
1676  54BB FD 6E 02     	LD L, (IY+2)
1677  54BE FD 66 03     	LD H, (IY+3)
1678  54C1 19           	ADD HL, DE
1679  54C2 DD 75 02     	LD (IX+2), L
1680  54C5 DD 74 03     	LD (IX+3), H
1681  54C8 C9           	RET
1682  54C9              ; *******************************************************************************************************
1683  54C9
1684  54C9              ; *******************************************************************************************************
1685  54C9              ; function to handle CALL SPRGRPMOV basic extension
1686  54C9              ; sets position of a group of sprites described with
1687  54C9              ; { int sprite_num, int delta_y, int delta_x } [count]
1688  54C9              ; _SPRGRPMOV ( INT x,
1689  54C9              ;			   INT y,
1690  54C9              ;			   INT data_ptr,
1691  54C9              ;			   BYTE count,
1692  54C9              ;			   BYTE enable_ram) >0 = true
1693  54C9              ; enable_ram will put ram in page 0 also, page 1 is already there
1694  54C9              SPRGRPMOV:
1695  54C9 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1696  54CC B7           	OR A
1697  54CD 20 05        	JR NZ, .L1
1698  54CF 1E 05        	LD E, 5 ; illegal function call
1699  54D1 C3 16 50     	JP THROW_ERROR
1700  54D4              .L1:
1701  54D4              	; opening (
1702  54D4 CD FE 4F     	CALL CHKCHAR
1703  54D7 28           	DB '('
1704  54D8              	; get x
1705  54D8 DD 21 2F 54  	LD IX, FRMQNT
1706  54DC CD 59 01     	CALL CALBAS
1707  54DF D5           	PUSH DE
1708  54E0              	; comma
1709  54E0 CD FE 4F     	CALL CHKCHAR
1710  54E3 2C           	DB ','
1711  54E4              	; get y
1712  54E4 DD 21 2F 54  	LD IX, FRMQNT
1713  54E8 CD 59 01     	CALL CALBAS
1714  54EB D5           	PUSH DE
1715  54EC              	; comma
1716  54EC CD FE 4F     	CALL CHKCHAR
1717  54EF 2C           	DB ','
1718  54F0              	; get data pointer
1719  54F0 DD 21 2F 54  	LD IX, FRMQNT
1720  54F4 CD 59 01     	CALL CALBAS
1721  54F7 D5           	PUSH DE
1722  54F8              	; comma
1723  54F8 CD FE 4F     	CALL CHKCHAR
1724  54FB 2C           	DB ','
1725  54FC              	; get count
1726  54FC DD 21 1C 52  	LD IX, GETBYT
1727  5500 CD 59 01     	CALL CALBAS
1728  5503 F5           	PUSH AF
1729  5504              	; comma
1730  5504 CD FE 4F     	CALL CHKCHAR
1731  5507 2C           	DB ','
1732  5508              	; get enable RAM
1733  5508 DD 21 1C 52  	LD IX, GETBYT
1734  550C CD 59 01     	CALL CALBAS
1735  550F F5           	PUSH AF
1736  5510              	; ending )
1737  5510 CD FE 4F     	CALL CHKCHAR
1738  5513 29           	DB ')'
1739  5514
1740  5514 E5           	PUSH HL
1741  5515 DD E1        	POP IX
1742  5517
1743  5517 F1           	POP AF ; enable RAM
1744  5518 B7           	OR A
1745  5519 C1           	POP BC ; count
1746  551A E1           	POP HL ; data pointer
1747  551B D9           	EXX
1748  551C C1           	POP BC ; y
1749  551D D1           	POP DE ; x
1750  551E D9           	EXX
1751  551F
1752  551F DD E5        	PUSH IX ; save position in BASIC buffer
1753  5521
1754  5521 28 24        	JR Z, .L2
1755  5523 C5           	PUSH BC
1756  5524 E5           	PUSH HL
1757  5525 AF               XOR A
1758  5526 CD E2 4D         CALL GET_PAGE_INFO
1759  5529 D9           	EXX
1760  552A E1           	POP HL
1761  552B F1           	POP AF
1762  552C D9           	EXX
1763  552D C5               PUSH BC
1764  552E D5               PUSH DE
1765  552F D9           	EXX
1766  5530 F5           	PUSH AF
1767  5531 E5           	PUSH HL
1768  5532 D9           	EXX
1769  5533 3A 41 F3         LD A, (RAMAD0)
1770  5536 26 00            LD H, 0
1771  5538 CD 28 4E         CALL LOCAL_ENASLT
1772  553B E1           	POP HL
1773  553C C1           	POP BC
1774  553D CD 4D 55     	CALL .UPDATE_LOC
1775  5540 D1               POP DE
1776  5541 C1               POP BC
1777  5542 CD 19 4E         CALL RESTORE_PAGE_INFO
1778  5545 18 04        	JR .L3
1779  5547
1780  5547              .L2:
1781  5547 FB           	EI
1782  5548 CD 4D 55     	CALL .UPDATE_LOC
1783  554B
1784  554B              .L3:
1785  554B E1           	POP HL
1786  554C C9           	RET
1787  554D
1788  554D              .UPDATE_LOC:
1789  554D              .L4:
1790  554D 7E           	LD A, (HL)
1791  554E 23           	INC HL
1792  554F 23           	INC HL
1793  5550 E5           	PUSH HL
1794  5551 FD E1        	POP IY
1795  5553 D9           	EXX
1796  5554 CD A0 54     	CALL SPRSET_DELTA_POS
1797  5557 D9           	EXX
1798  5558 23          > INC HL
1798  5559 23          > INC HL
1798  555A 23          > INC HL
1798  555B 23          > INC HL
1799  555C 10 EF        	DJNZ .L4
1800  555E C9           	RET
1801  555F              ; *******************************************************************************************************
1802  555F
1803  555F              ; *******************************************************************************************************
1804  555F              ; function rotates mask and data of several characters and applies to background data
1805  555F              ; this handles x-shift from 0 to 4
1806  555F              ; contains self-modifying code that is set-up from external function
1807  555F              ; input HL=pointer to mask data
1808  555F              ; input HL'=pointer to character data
1809  555F              ; input DE=output buffer containing background data
1810  555F              ; input A=number of characters to process
1811  555F              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1812  555F              SHIFT04:
1813  555F E5           	PUSH HL
1814  5560 62           	LD H, D
1815  5561 6B           	LD L, E
1816  5562 01 08 00     	LD BC, 8
1817  5565 09           	ADD HL, BC
1818  5566 44           	LD B, H
1819  5567 4D           	LD C, L
1820  5568 E1           	POP HL
1821  5569              .L0:
1822  5569 F5           	PUSH AF
1823  556A 3E 08        	LD A, 8
1824  556C              .L1:
1825  556C 08           	EX AF, AF'
1826  556D 7E           	LD A, (HL) ; get mask
1827  556E D9           	EXX
1828  556F 57           	LD D, A
1829  5570 1E FF        	LD E, #FF
1830  5572 37           	SCF
1831  5573              .M1:
1832  5573 18 FE        	JR .M1 ; this is self-modifying part
1833  5575 CB 1A        	RR D
1834  5577 CB 1B        	RR E
1835  5579 CB 1A        	RR D
1836  557B CB 1B        	RR E
1837  557D CB 1A        	RR D
1838  557F CB 1B        	RR E
1839  5581 CB 1A        	RR D
1840  5583 CB 1B        	RR E
1841  5585
1842  5585 46           	LD B, (HL)
1843  5586 0E 00        	LD C, 0
1844  5588              .M2:
1845  5588 18 FE        	JR .M2 ; also self-modifying part
1846  558A CB 38        	SRL B
1847  558C CB 19        	RR C
1848  558E CB 38        	SRL B
1849  5590 CB 19        	RR C
1850  5592 CB 38        	SRL B
1851  5594 CB 19        	RR C
1852  5596 CB 38        	SRL B
1853  5598 CB 19        	RR C
1854  559A
1855  559A D9           	EXX
1856  559B 1A           	LD A, (DE) ; background
1857  559C D9           	EXX
1858  559D A2           	AND D
1859  559E B0           	OR B
1860  559F D9           	EXX
1861  55A0 12           	LD (DE), A
1862  55A1
1863  55A1 0A           	LD A, (BC)
1864  55A2 D9           	EXX
1865  55A3 A3           	AND E
1866  55A4 B1           	OR C
1867  55A5 23           	INC HL
1868  55A6 D9           	EXX
1869  55A7 02           	LD (BC), A
1870  55A8
1871  55A8 23           	INC HL
1872  55A9 13           	INC DE
1873  55AA 03           	INC BC
1874  55AB
1875  55AB 08           	EX AF, AF'
1876  55AC 3D           	DEC A
1877  55AD C2 6C 55     	JP NZ, .L1
1878  55B0 F1           	POP AF
1879  55B1 3D           	DEC A
1880  55B2 C2 69 55     	JP NZ, .L0
1881  55B5 C9           	RET
1882  55B6              ; *******************************************************************************************************
1883  55B6
1884  55B6              ; *******************************************************************************************************
1885  55B6              ; function rotates mask and data of several characters and applies to background data
1886  55B6              ; this handles x-shift from 5 to 8
1887  55B6              ; contains self-modifying code that is set-up from external function
1888  55B6              ; input HL=pointer to mask data
1889  55B6              ; input HL'=pointer to character data
1890  55B6              ; input DE=output buffer containing background data
1891  55B6              ; input A=number of characters to process
1892  55B6              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1893  55B6              SHIFT58:
1894  55B6 E5           	PUSH HL
1895  55B7 62           	LD H, D
1896  55B8 6B           	LD L, E
1897  55B9 01 08 00     	LD BC, 8
1898  55BC 09           	ADD HL, BC
1899  55BD 44           	LD B, H
1900  55BE 4D           	LD C, L
1901  55BF E1           	POP HL
1902  55C0              .L0:
1903  55C0 F5           	PUSH AF
1904  55C1 3E 08        	LD A, 8
1905  55C3              .L1:
1906  55C3 08           	EX AF, AF'
1907  55C4 7E           	LD A, (HL) ; get mask
1908  55C5 D9           	EXX
1909  55C6 57           	LD D, A
1910  55C7 1E FF        	LD E, #FF
1911  55C9 37           	SCF
1912  55CA              .M1:
1913  55CA 18 FE        	JR .M1 ; this is self-modifying part
1914  55CC CB 12        	RL D
1915  55CE CB 13        	RL E
1916  55D0 CB 12        	RL D
1917  55D2 CB 13        	RL E
1918  55D4 CB 12        	RL D
1919  55D6 CB 13        	RL E
1920  55D8
1921  55D8 46           	LD B, (HL)
1922  55D9 0E 00        	LD C, 0
1923  55DB              .M2:
1924  55DB 18 FE        	JR .M2 ; also self-modifying part
1925  55DD CB 20        	SLA B
1926  55DF CB 11        	RL C
1927  55E1 CB 20        	SLA B
1928  55E3 CB 11        	RL C
1929  55E5 CB 20        	SLA B
1930  55E7 CB 11        	RL C
1931  55E9
1932  55E9 D9           	EXX
1933  55EA 1A           	LD A, (DE) ; background
1934  55EB D9           	EXX
1935  55EC A3           	AND E
1936  55ED B1           	OR C
1937  55EE D9           	EXX
1938  55EF 12           	LD (DE), A
1939  55F0
1940  55F0 0A           	LD A, (BC)
1941  55F1 D9           	EXX
1942  55F2 A2           	AND D
1943  55F3 B0           	OR B
1944  55F4 23           	INC HL
1945  55F5 D9           	EXX
1946  55F6 02           	LD (BC), A
1947  55F7
1948  55F7 23           	INC HL
1949  55F8 13           	INC DE
1950  55F9 03           	INC BC
1951  55FA
1952  55FA 08           	EX AF, AF'
1953  55FB 3D           	DEC A
1954  55FC C2 C3 55     	JP NZ, .L1
1955  55FF F1           	POP AF
1956  5600 3D           	DEC A
1957  5601 C2 C0 55     	JP NZ, .L0
1958  5604 C9           	RET
1959  5605              ; *******************************************************************************************************
1960  5605
1961  5605              ; *******************************************************************************************************
1962  5605              ; function rotates mask and character data and applies it to background
1963  5605              ; input A=x shift (0-7)
1964  5605              ; input IX=pointer to structure describing input data
1965  5605              ; +0  DW shift count 0-7
1966  5605              ; +2  DW background data start;
1967  5605              ; +4  DW background add to value to next row of background data
1968  5605              ; +6  DW mask data start;
1969  5605              ; +8  DW character data start;
1970  5605              ; +10 DW character&mask add to value to next row of data
1971  5605              ; +12 DW columns (low byte used)
1972  5605              ; +14 DW rows (low byte used)
1973  5605              SHIFT_MERGE_CHARACTER:
1974  5605 DD 7E 00     	LD A, (IX) ; shift
1975  5608 FE 05        	CP 5
1976  560A 38 22        	JR C, .RIGHT
1977  560C              	; shifts 5-7, use rotate towards left 1-3
1978  560C 21 B6 55     	LD HL, SHIFT58
1979  560F 22 73 56     	LD (.CALL+1), HL ; modify fn used
1980  5612 D6 05        	SUB 5
1981  5614 28 0D        	JR Z, .L1
1982  5616 87           	ADD A, A
1983  5617 87           	ADD A, A
1984  5618 67           	LD H, A
1985  5619 2E 18        	LD L, #18 ; JR opcode
1986  561B 22 CA 55     	LD (SHIFT58.M1), HL
1987  561E 22 DB 55     	LD (SHIFT58.M2), HL
1988  5621 18 2F        	JR .DO
1989  5623              .L1:
1990  5623 21 00 00     	LD HL, 0 ; 2xNOP opcode
1991  5626 22 CA 55     	LD (SHIFT58.M1), HL
1992  5629 22 DB 55     	LD (SHIFT58.M2), HL
1993  562C 18 24        	JR .DO
1994  562E              .RIGHT:
1995  562E              	; shifts 0-4, rotate towards right
1996  562E 21 5F 55     	LD HL, SHIFT04
1997  5631 22 73 56     	LD (.CALL+1), HL ; modify fn used
1998  5634 FE 04        	CP 4
1999  5636 28 11        	JR Z, .R1
2000  5638 D6 04        	SUB 4
2001  563A ED 44        	NEG
2002  563C 87           	ADD A, A
2003  563D 87           	ADD A, A
2004  563E 67           	LD H, A
2005  563F 2E 18        	LD L, #18 ; JR opcode
2006  5641 22 73 55     	LD (SHIFT04.M1), HL
2007  5644 22 88 55     	LD (SHIFT04.M2), HL
2008  5647 18 09        	JR .DO
2009  5649              .R1:
2010  5649 21 00 00     	LD HL, 0 ; 2xNOP opcode
2011  564C 22 73 55     	LD (SHIFT04.M1), HL
2012  564F 22 88 55     	LD (SHIFT04.M2), HL
2013  5652              .DO:
2014  5652 DD 46 0E     	LD B, (IX+14) ; rows
2015  5655 DD 6E 06     	LD L, (IX+6)
2016  5658 DD 66 07     	LD H, (IX+7) ; mask data
2017  565B DD 5E 02     	LD E, (IX+2)
2018  565E DD 56 03     	LD D, (IX+3) ; background data
2019  5661 D9           	EXX
2020  5662 DD 6E 08     	LD L, (IX+8)
2021  5665 DD 66 09     	LD H, (IX+9) ; character data
2022  5668 D9           	EXX
2023  5669              .LOOP:
2024  5669 C5           	PUSH BC
2025  566A E5           	PUSH HL
2026  566B D5           	PUSH DE
2027  566C D9           	EXX
2028  566D E5           	PUSH HL
2029  566E D9           	EXX
2030  566F DD 7E 0C     	LD A, (IX+12) ; columns
2031  5672              .CALL:
2032  5672 CD 00 00     	CALL 0
2033  5675 E1           	POP HL
2034  5676 DD 5E 0A     	LD E, (IX+10)
2035  5679 DD 56 0B     	LD D, (IX+11) ; char data to next row
2036  567C 19           	ADD HL, DE
2037  567D D9           	EXX
2038  567E E1           	POP HL
2039  567F DD 5E 04     	LD E, (IX+4)
2040  5682 DD 56 05     	LD D, (IX+5) ; background to next row
2041  5685 19           	ADD HL, DE
2042  5686 EB           	EX DE, HL
2043  5687 E1           	POP HL
2044  5688 DD 4E 0A     	LD C, (IX+10)
2045  568B DD 46 0B     	LD B, (IX+11) ; char data to next row
2046  568E 09           	ADD HL, BC
2047  568F C1           	POP BC
2048  5690 10 D7        	DJNZ .LOOP
2049  5692 C9           	RET
2050  5693              ; *******************************************************************************************************
2051  5693
2052  5693              ; *******************************************************************************************************
2053  5693              ; function to handle CALL HBLIT basic extension
2054  5693              ; rotates 1-bit character drawing horizontally with mask and character data and
2055  5693              ; fuses with background data
2056  5693              ; HBLIT ( INT request_data_ptr,
2057  5693              ;	      BYTE enable_ram) >0 = true
2058  5693              ; request_data_ptr described in SHIFT_MERGE_CHARACTER
2059  5693              ; enable_ram will put ram in page 0 also, page 1 is already there
2060  5693              HBLIT:
2061  5693              	; opening (
2062  5693 CD FE 4F     	CALL CHKCHAR
2063  5696 28           	DB '('
2064  5697              	; get pointer to request struct
2065  5697 DD 21 2F 54  	LD IX, FRMQNT
2066  569B CD 59 01     	CALL CALBAS
2067  569E D5           	PUSH DE
2068  569F              	; comma
2069  569F CD FE 4F     	CALL CHKCHAR
2070  56A2 2C           	DB ','
2071  56A3              	; get enable RAM
2072  56A3 DD 21 1C 52  	LD IX, GETBYT
2073  56A7 CD 59 01     	CALL CALBAS
2074  56AA F5           	PUSH AF
2075  56AB              	; ending )
2076  56AB CD FE 4F     	CALL CHKCHAR
2077  56AE 29           	DB ')'
2078  56AF
2079  56AF F1           	POP AF ; enable RAM
2080  56B0 B7           	OR A
2081  56B1 DD E1        	POP IX ; pointer to request struct
2082  56B3
2083  56B3 E5           	PUSH HL ; save position in BASIC buffer
2084  56B4 28 11        	JR Z, .L2
2085  56B6
2086  56B6 FD 21 BD 56  	LD IY, .RET
2087  56BA C3 A1 4E     	JP ENABLE_PAGE0
2088  56BD              .RET:
2089  56BD CD 05 56     	CALL SHIFT_MERGE_CHARACTER
2090  56C0
2091  56C0 D1               POP DE
2092  56C1 C1               POP BC
2093  56C2 CD 19 4E         CALL RESTORE_PAGE_INFO
2094  56C5 18 04        	JR .L3
2095  56C7
2096  56C7              .L2:
2097  56C7 FB           	EI
2098  56C8 CD 05 56     	CALL SHIFT_MERGE_CHARACTER
2099  56CB
2100  56CB              .L3:
2101  56CB E1           	POP HL
2102  56CC C9           	RET
2103  56CD              ; *******************************************************************************************************
2104  56CD
2105  56CD
2106  56CD              EXT_END:
2107  56CD
# file closed: asm\main.asm
