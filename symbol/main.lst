# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; INCLUDE "system_variables.inc"
   4  4000              ; INCLUDE "system_hooks.inc"
   5  4000              ; INCLUDE "bios_calls.inc"
   6  4000
   7  4000              CHPUT   EQU     #A2
   8  4000              CALBAS	EQU		#159
   9  4000              ERRHAND EQU     #406F
  10  4000              FRMEVL  EQU     #4C64
  11  4000              FRESTR	EQU		#67D0
  12  4000              ; FRMQNT = formula quantificator
  13  4000              ; input HL=pointer to current program expression
  14  4000              ; output HL=next address
  15  4000              ; output DE=integer datum
  16  4000              FRMQNT	EQU		#542F
  17  4000              ; GETBYT = get byte parameter
  18  4000              ; input HL=pointer to current program expression
  19  4000              ; output HL=next address
  20  4000              ; output A=E=byte read
  21  4000              GETBYT	EQU		#521C
  22  4000              CHRGTR  EQU     #4666
  23  4000              SYNCHR	EQU		#558C
  24  4000              VALTYP  EQU     #F663
  25  4000              USR     EQU     #F7F8
  26  4000              PROCNM	EQU		#FD89
  27  4000              BIOS_FILVRM  EQU     #56
  28  4000              CLIKSW	EQU		#F3DB
  29  4000              ATRBAS	EQU		#F928
  30  4000
  31  4000              RAMAD0	EQU	0F341h	; Main-RAM Slot (00000h~03FFFh)
  32  4000              RAMAD1	EQU	0F342h	; Main-RAM Slot (04000h~07FFFh)
  33  4000              RAMAD2	EQU	0F343h	; Main-RAM Slot (08000h~0BFFFh)
  34  4000              RAMAD3	EQU	0F344h	; Main-RAM Slot (0C000h~0FFFFh)
  35  4000              EXPTBL	EQU #FCC1
  36  4000              SCRMOD	EQU #FCAF ; current screen mode
  37  4000
  38  4000              ; BASIC error codes
  39  4000              ;01 NEXT without FOR
  40  4000              ;02 Syntax error
  41  4000              ;03 RETURN without GOSUB
  42  4000              ;04 Out of DATA
  43  4000              ;05 Illegal function call
  44  4000              ;06 Overflow
  45  4000              ;07 Out of memory
  46  4000              ;08 Undefined line number
  47  4000              ;09 Subscript out of range
  48  4000              ;10 Redimensioned array
  49  4000              ;11 Division by zero
  50  4000              ;12 Illegal direct
  51  4000              ;13 Type mismatch
  52  4000              ;14 Out of string space
  53  4000              ;15 String too long
  54  4000              ;16 String formula too complex
  55  4000              ;17 Can't CONTINUE
  56  4000              ;18 Undefined user function
  57  4000              ;19 Device I/O error
  58  4000              ;20 Verify error
  59  4000              ;21 No RESUME
  60  4000              ;22 RESUME without error
  61  4000              ;23 Unprintable error
  62  4000              ;24 Missing operand
  63  4000              ;25 Line buffer overflow
  64  4000              ;50 FIELD overflow
  65  4000              ;51 Internal error
  66  4000              ;52 Bad file number
  67  4000              ;53 File not found
  68  4000              ;54 File already open
  69  4000              ;55 Input past end
  70  4000              ;56 Bad file name
  71  4000              ;57 Direct statement in file
  72  4000              ;58 Sequential I/O only
  73  4000              ;59 File not OPEN
  74  4000
  75  4000
  76  4000               ; simulate cartridge with BASIC extension
  77  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  77  4004 2E 4F 00 00
  77  4008 00 00 00 00
  77  400C 00 00 00 00
  78  4010
  79  4010              ; this location #400A stores last location used by basic extension
  80  4010              ; free memory after that point
  81  4010 DD 53         DW EXT_END
  82  4012
  83  4012              ; binary included AKG player compiled at #4012
  84  4012               INCBIN "bin/AKG.bin"
  85  4CEE               INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CEE              MAIN_PLAYER_START EQU 04012H
   2+ 4CEE              PLY_AKG_START EQU 04012H
   3+ 4CEE              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401BH
   4+ 4CEE              PLY_AKG_INITSOUNDEFFECTS EQU 0401BH
   5+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 0401FH
   6+ 4CEE              PLY_AKG_PLAYSOUNDEFFECT EQU 0401FH
   7+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04020H
   8+ 4CEE              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04020H
   9+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04047H
  10+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04047H
  11+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04055H
  12+ 4CEE              PLY_AKG_PSES_PLAY EQU 0408EH
  13+ 4CEE              PLY_AKG_PSES_READFIRSTBYTE EQU 04097H
  14+ 4CEE              PLY_AKG_PSES_S_ENDORLOOP EQU 040AFH
  15+ 4CEE              PLY_AKG_PSES_S_LOOP EQU 040BAH
  16+ 4CEE              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C0H
  17+ 4CEE              PLY_AKG_PSES_NOTREACHED EQU 040D3H
  18+ 4CEE              PLY_AKG_PSES_HARDWAREONLY EQU 040D7H
  19+ 4CEE              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040DEH
  20+ 4CEE              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F0H
  21+ 4CEE              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FAH
  22+ 4CEE              PLY_AKG_PSES_H_AFTERRETRIG EQU 04104H
  23+ 4CEE              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 04118H
  24+ 4CEE              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411DH
  25+ 4CEE              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04125H
  26+ 4CEE              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04130H
  27+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413CH
  28+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 0413EH
  29+ 4CEE              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04144H
  30+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 04148H
  31+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 04148H
  32+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414AH
  33+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414AH
  34+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414AH
  35+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414BH
  36+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414CH
  37+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04150H
  38+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04150H
  39+ 4CEE              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04150H
  40+ 4CEE              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 04158H
  41+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04160H
  42+ 4CEE              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04160H
  43+ 4CEE              PLY_AKG_INIT EQU 04160H
  44+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04160H
  45+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 0418EH
  46+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A2H
  47+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B4H
  48+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D3H
  49+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E0H
  50+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL EQU 041E6H
  51+ 4CEE              PLY_AKG_INITTABLE0 EQU 041E9H
  52+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041E9H
  53+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04203H
  54+ 4CEE              PLY_AKG_INITTABLE0_END EQU 04203H
  55+ 4CEE              PLY_AKG_INITTABLE1 EQU 04203H
  56+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04203H
  57+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04207H
  58+ 4CEE              PLY_AKG_INITTABLE1_END EQU 04207H
  59+ 4CEE              PLY_AKG_INITTABLEORA EQU 04207H
  60+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04207H
  61+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 0421FH
  62+ 4CEE              PLY_AKG_INITTABLEORA_END EQU 0421FH
  63+ 4CEE              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 0421FH
  64+ 4CEE              PLY_AKG_STOP EQU 0421FH
  65+ 4CEE              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04231H
  66+ 4CEE              PLY_AKG_PLAY EQU 04231H
  67+ 4CEE              PLY_AKG_TICKDECREASINGCOUNTER EQU 04239H
  68+ 4CEE              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 0423FH
  69+ 4CEE              PLY_AKG_READLINKER EQU 04244H
  70+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04244H
  71+ 4CEE              PLY_AKG_READLINKER_PTLINKER EQU 04244H
  72+ 4CEE              PLY_AKG_READLINKER_NOLOOP EQU 0424FH
  73+ 4CEE              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 04288H
  74+ 4CEE              PLY_AKG_READLINE EQU 0428BH
  75+ 4CEE              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428BH
  76+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04291H
  77+ 4CEE              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04291H
  78+ 4CEE              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 0429EH
  79+ 4CEE              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A2H
  80+ 4CEE              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A5H
  81+ 4CEE              PLY_AKG_SPEEDTRACK_END EQU 042A8H
  82+ 4CEE              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042A8H
  83+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042AEH
  84+ 4CEE              PLY_AKG_EVENTTRACK_PTTRACK EQU 042AEH
  85+ 4CEE              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BBH
  86+ 4CEE              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042BFH
  87+ 4CEE              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C2H
  88+ 4CEE              PLY_AKG_EVENTTRACK_END EQU 042C5H
  89+ 4CEE              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C5H
  90+ 4CEE              PLY_AKG_CHANNEL1_READTRACK EQU 042D1H
  91+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D1H
  92+ 4CEE              PLY_AKG_CHANNEL1_PTTRACK EQU 042D1H
  93+ 4CEE              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042ECH
  94+ 4CEE              PLY_AKG_CHANNEL1_WAIT EQU 042F7H
  95+ 4CEE              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 042FEH
  96+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 042FEH
  97+ 4CEE              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 042FEH
  98+ 4CEE              PLY_AKG_CHANNEL1_NOTE EQU 04307H
  99+ 4CEE              PLY_AKG_BASENOTEINDEX EQU 04307H
 100+ 4CEE              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 04309H
 101+ 4CEE              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 04309H
 102+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 04319H
 103+ 4CEE              PLY_AKG_INSTRUMENTSTABLE EQU 04319H
 104+ 4CEE              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432BH
 105+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433BH
 106+ 4CEE              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04363H
 107+ 4CEE              PLY_AKG_CHANNEL1_READCELLEND EQU 04366H
 108+ 4CEE              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04366H
 109+ 4CEE              PLY_AKG_CHANNEL2_READTRACK EQU 04372H
 110+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04372H
 111+ 4CEE              PLY_AKG_CHANNEL2_PTTRACK EQU 04372H
 112+ 4CEE              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438DH
 113+ 4CEE              PLY_AKG_CHANNEL2_WAIT EQU 04398H
 114+ 4CEE              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 0439FH
 115+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 0439FH
 116+ 4CEE              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 0439FH
 117+ 4CEE              PLY_AKG_CHANNEL2_NOTE EQU 043A8H
 118+ 4CEE              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043ADH
 119+ 4CEE              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043ADH
 120+ 4CEE              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043CFH
 121+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043DFH
 122+ 4CEE              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04407H
 123+ 4CEE              PLY_AKG_CHANNEL2_READCELLEND EQU 0440AH
 124+ 4CEE              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440AH
 125+ 4CEE              PLY_AKG_CHANNEL3_READTRACK EQU 04416H
 126+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04416H
 127+ 4CEE              PLY_AKG_CHANNEL3_PTTRACK EQU 04416H
 128+ 4CEE              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04431H
 129+ 4CEE              PLY_AKG_CHANNEL3_WAIT EQU 0443CH
 130+ 4CEE              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04443H
 131+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04443H
 132+ 4CEE              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04443H
 133+ 4CEE              PLY_AKG_CHANNEL3_NOTE EQU 0444CH
 134+ 4CEE              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04451H
 135+ 4CEE              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04451H
 136+ 4CEE              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04473H
 137+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04483H
 138+ 4CEE              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ABH
 139+ 4CEE              PLY_AKG_CHANNEL3_READCELLEND EQU 044AEH
 140+ 4CEE              PLY_AKG_CURRENTSPEED EQU 044AEH
 141+ 4CEE              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B0H
 142+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B3H
 143+ 4CEE              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B3H
 144+ 4CEE              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B6H
 145+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044B9H
 146+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044B9H
 147+ 4CEE              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C5H
 148+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CCH
 149+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044CFH
 150+ 4CEE              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D5H
 151+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044D8H
 152+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044D8H
 153+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E6H
 154+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EBH
 155+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F6H
 156+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044F9H
 157+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044F9H
 158+ 4CEE              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FCH
 159+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 044FFH
 160+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE EQU 044FFH
 161+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 04508H
 162+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04512H
 163+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04515H
 164+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04515H
 165+ 4CEE              PLY_AKG_CHANNEL1_PITCH EQU 04515H
 166+ 4CEE              PLY_AKG_CHANNEL1_ISPITCH EQU 04518H
 167+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451DH
 168+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451DH
 169+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04521H
 170+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04523H
 171+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04525H
 172+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452CH
 173+ 4CEE              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452DH
 174+ 4CEE              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04530H
 175+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04530H
 176+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454CH
 177+ 4CEE              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454CH
 178+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 04559H
 179+ 4CEE              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455DH
 180+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456DH
 181+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456DH
 182+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 0456EH
 183+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 0456FH
 184+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04571H
 185+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04571H
 186+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04571H
 187+ 4CEE              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04572H
 188+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04573H
 189+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04575H
 190+ 4CEE              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04575H
 191+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04575H
 192+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04575H
 193+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04575H
 194+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_END EQU 04578H
 195+ 4CEE              PLY_AKG_CHANNEL1_PITCH_END EQU 0457AH
 196+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04582H
 197+ 4CEE              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04582H
 198+ 4CEE              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04585H
 199+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 04588H
 200+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 04588H
 201+ 4CEE              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04594H
 202+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459BH
 203+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 0459EH
 204+ 4CEE              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A4H
 205+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A7H
 206+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A7H
 207+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B5H
 208+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BAH
 209+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C5H
 210+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045C8H
 211+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045C8H
 212+ 4CEE              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CBH
 213+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045CEH
 214+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045CEH
 215+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D7H
 216+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E1H
 217+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E4H
 218+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E4H
 219+ 4CEE              PLY_AKG_CHANNEL2_PITCH EQU 045E4H
 220+ 4CEE              PLY_AKG_CHANNEL2_ISPITCH EQU 045E7H
 221+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045ECH
 222+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045ECH
 223+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F0H
 224+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F2H
 225+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F4H
 226+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FBH
 227+ 4CEE              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FCH
 228+ 4CEE              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 045FFH
 229+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 045FFH
 230+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461BH
 231+ 4CEE              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461BH
 232+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 04628H
 233+ 4CEE              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462CH
 234+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463CH
 235+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463CH
 236+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463DH
 237+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 0463EH
 238+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04640H
 239+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04640H
 240+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04640H
 241+ 4CEE              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04641H
 242+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04642H
 243+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04644H
 244+ 4CEE              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04644H
 245+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04644H
 246+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04644H
 247+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04644H
 248+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_END EQU 04647H
 249+ 4CEE              PLY_AKG_CHANNEL2_PITCH_END EQU 04649H
 250+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04651H
 251+ 4CEE              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04651H
 252+ 4CEE              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04654H
 253+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04657H
 254+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04657H
 255+ 4CEE              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04663H
 256+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466AH
 257+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466DH
 258+ 4CEE              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04673H
 259+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04676H
 260+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04676H
 261+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04684H
 262+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 04689H
 263+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04694H
 264+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04697H
 265+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04697H
 266+ 4CEE              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469AH
 267+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469DH
 268+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469DH
 269+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A6H
 270+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B0H
 271+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B3H
 272+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B3H
 273+ 4CEE              PLY_AKG_CHANNEL3_PITCH EQU 046B3H
 274+ 4CEE              PLY_AKG_CHANNEL3_ISPITCH EQU 046B6H
 275+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BBH
 276+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BBH
 277+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046BFH
 278+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C1H
 279+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C3H
 280+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CAH
 281+ 4CEE              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CBH
 282+ 4CEE              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046CEH
 283+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046CEH
 284+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046EAH
 285+ 4CEE              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046EAH
 286+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F7H
 287+ 4CEE              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FBH
 288+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470BH
 289+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470BH
 290+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470CH
 291+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470DH
 292+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 0470FH
 293+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 0470FH
 294+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 0470FH
 295+ 4CEE              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04710H
 296+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04711H
 297+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04713H
 298+ 4CEE              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04713H
 299+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04713H
 300+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04713H
 301+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04713H
 302+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_END EQU 04716H
 303+ 4CEE              PLY_AKG_CHANNEL3_PITCH_END EQU 04718H
 304+ 4CEE              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04724H
 305+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04724H
 306+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04724H
 307+ 4CEE              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04727H
 308+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 04729H
 309+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 0472FH
 310+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04732H
 311+ 4CEE              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04732H
 312+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04735H
 313+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 0473EH
 314+ 4CEE              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04746H
 315+ 4CEE              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04753H
 316+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04753H
 317+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04753H
 318+ 4CEE              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04756H
 319+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 04758H
 320+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 0475EH
 321+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04761H
 322+ 4CEE              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04761H
 323+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04764H
 324+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476DH
 325+ 4CEE              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04775H
 326+ 4CEE              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04783H
 327+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04783H
 328+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04783H
 329+ 4CEE              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04786H
 330+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 04788H
 331+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 0478EH
 332+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04791H
 333+ 4CEE              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04791H
 334+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04794H
 335+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479DH
 336+ 4CEE              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A5H
 337+ 4CEE              PLY_AKG_SENDPSGREGISTERS EQU 047B4H
 338+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BCH
 339+ 4CEE              PLY_AKG_PSGREG01_INSTR EQU 047BCH
 340+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CCH
 341+ 4CEE              PLY_AKG_PSGREG23_INSTR EQU 047CCH
 342+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DDH
 343+ 4CEE              PLY_AKG_PSGREG45_INSTR EQU 047DDH
 344+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047EEH
 345+ 4CEE              PLY_AKG_PSGREG6_8_INSTR EQU 047EEH
 346+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 047FFH
 347+ 4CEE              PLY_AKG_PSGREG9_10_INSTR EQU 047FFH
 348+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04810H
 349+ 4CEE              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04810H
 350+ 4CEE              PLY_AKG_PSGREG13_OLDVALUE EQU 04825H
 351+ 4CEE              PLY_AKG_RETRIG EQU 04827H
 352+ 4CEE              PLY_AKG_PSGREG13_INSTR EQU 04829H
 353+ 4CEE              PLY_AKG_PSGREG13_END EQU 04838H
 354+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 04838H
 355+ 4CEE              PLY_AKG_SAVESP EQU 04838H
 356+ 4CEE              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483CH
 357+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTS EQU 04844H
 358+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04851H
 359+ 4CEE              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04851H
 360+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTS EQU 04859H
 361+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04866H
 362+ 4CEE              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04866H
 363+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTS EQU 0486EH
 364+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 04879H
 365+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS EQU 04879H
 366+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 04888H
 367+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 04888H
 368+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 0488FH
 369+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 0489FH
 370+ 4CEE              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 0489FH
 371+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A6H
 372+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A6H
 373+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048A9H
 374+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B2H
 375+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B2H
 376+ 4CEE              PLY_AKG_READINSTRUMENTCELL EQU 048B8H
 377+ 4CEE              PLY_AKG_NOSOFTNOHARD EQU 048C5H
 378+ 4CEE              PLY_AKG_NSNH_NONOISE EQU 048DAH
 379+ 4CEE              PLY_AKG_SOFT EQU 048DDH
 380+ 4CEE              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E4H
 381+ 4CEE              PLY_AKG_S_NOTSIMPLE EQU 048ECH
 382+ 4CEE              PLY_AKG_S_AFTERSIMPLETEST EQU 048EFH
 383+ 4CEE              PLY_AKG_HARDTOSOFT EQU 048FCH
 384+ 4CEE              PLY_AKG_HS_JUMPRATIO EQU 04907H
 385+ 4CEE              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04934H
 386+ 4CEE              PLY_AKG_ENDWITHOUTLOOP EQU 04936H
 387+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04936H
 388+ 4CEE              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04936H
 389+ 4CEE              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 0493EH
 390+ 4CEE              PLY_AKG_SH_JUMPRATIO EQU 0494BH
 391+ 4CEE              PLY_AKG_SH_JUMPRATIOEND EQU 0496CH
 392+ 4CEE              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497BH
 393+ 4CEE              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04981H
 394+ 4CEE              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499BH
 395+ 4CEE              PLY_AKG_H_RETRIGEND EQU 049ADH
 396+ 4CEE              PLY_AKG_H_AFTERRETRIG EQU 049AEH
 397+ 4CEE              PLY_AKG_ENDWITHLOOP EQU 049C0H
 398+ 4CEE              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C7H
 399+ 4CEE              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DDH
 400+ 4CEE              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EBH
 401+ 4CEE              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FBH
 402+ 4CEE              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A09H
 403+ 4CEE              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A18H
 404+ 4CEE              PLY_AKG_SHOHS_RETRIGEND EQU 04A27H
 405+ 4CEE              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A28H
 406+ 4CEE              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3AH
 407+ 4CEE              PLY_AKG_EFFECTTABLE EQU 04A48H
 408+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A48H
 409+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6CH
 410+ 4CEE              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6CH
 411+ 4CEE              PLY_AKG_EFFECT_RESET EQU 04A6FH
 412+ 4CEE              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A71H
 413+ 4CEE              PLY_AKG_EFFECT_VOLUME EQU 04A8CH
 414+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A98H
 415+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04A9EH
 416+ 4CEE              PLY_AKG_ARPEGGIOSTABLE EQU 04A9EH
 417+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC5H
 418+ 4CEE              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACCH
 419+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD2H
 420+ 4CEE              PLY_AKG_PITCHESTABLE EQU 04AD2H
 421+ 4CEE              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AF9H
 422+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B00H
 423+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B11H
 424+ 4CEE              PLY_AKG_EFFECT_PITCHDOWN EQU 04B18H
 425+ 4CEE              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B28H
 426+ 4CEE              PLY_AKG_EFFECT_PITCHUP EQU 04B3DH
 427+ 4CEE              PLY_AKG_EFFECT_PITCHSTOP EQU 04B4FH
 428+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B56H
 429+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B80H
 430+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B80H
 431+ 4CEE              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B99H
 432+ 4CEE              PLY_AKG_EFFECT_GLIDESPEED EQU 04B99H
 433+ 4CEE              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BABH
 434+ 4CEE              PLY_AKG_EFFECT_LEGATO EQU 04BC1H
 435+ 4CEE              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD5H
 436+ 4CEE              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDDH
 437+ 4CEE              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE5H
 438+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEDH
 439+ 4CEE              PLY_AKG_EVENT EQU 04BEDH
 440+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BEEH
 441+ 4CEE              PLY_AKG_PERIODTABLE EQU 04BEEH
 442+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BEEH
 443+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CEEH
 444+ 4CEE              PLY_AKG_PERIODTABLE_END EQU 04CEEH
 445+ 4CEE              PLY_AKG_END EQU 04CEEH
 446+ 4CEE              MAIN_PLAYER_END EQU 04CEEH
 447+ 4CEE              TESTEREND EQU 04CEEH
 448+ 4CEE
# file closed: ./symbol/AKG.sym
  86  4CEE
  87  4CEE              ORIG.HTIMI:
  88  4CEE 00 00 00 00  	DB 0, 0, 0, 0, 0
  88  4CF2 00
  89  4CF3               EXPORT ORIG.HTIMI
  90  4CF3
  91  4CF3              MUSIC_INIT_STATUS:
  92  4CF3 00            DB 0
  93  4CF4              SFX_INIT_STATUS:
  94  4CF4 00            DB 0
  95  4CF5              SOUND_ENABLED:
  96  4CF5 00            DB 0
  97  4CF6
  98  4CF6              SPRATR_INIT_STATUS:
  99  4CF6 00            DB 0
 100  4CF7              SPRATR_UPDATE_FLAG:
 101  4CF7 00 00         DW 0
 102  4CF9              SPRATR_DATA:
 103  4CF9 00 00         DW 0
 104  4CFB
 105  4CFB              ; to temporarily store stack pointer
 106  4CFB              TMPSP:
 107  4CFB 00 00         DW 0
 108  4CFD              ; to support sprite flicker
 109  4CFD              FLICKER:
 110  4CFD 00            DB 0
 111  4CFE
 112  4CFE              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 113  4CFE              ; per starting letter, if no commands with this letter, NULL value
 114  4CFE              CMDS:
 115  4CFE 00 00            DW 0 ; A
 116  4D00 00 00            DW 0 ; B
 117  4D02 00 00            DW 0 ; C
 118  4D04 00 00            DW 0 ; D
 119  4D06 00 00            DW 0 ; E
 120  4D08 59 4D            DW CMDS_F; F
 121  4D0A 6C 4D            DW CMDS_G; G
 122  4D0C 00 00            DW 0 ; H
 123  4D0E 00 00            DW 0 ; I
 124  4D10 00 00            DW 0 ; J
 125  4D12 00 00            DW 0 ; K
 126  4D14 3C 4D            DW CMDS_L ; L
 127  4D16 46 4D            DW CMDS_M ; M
 128  4D18 00 00            DW 0 ; N
 129  4D1A 00 00            DW 0 ; O
 130  4D1C 00 00            DW 0 ; P
 131  4D1E 00 00            DW 0 ; Q
 132  4D20 00 00            DW 0 ; R
 133  4D22 80 4D            DW CMDS_S ; S
 134  4D24 00 00            DW 0 ; T
 135  4D26 32 4D            DW CMDS_U ; U
 136  4D28 76 4D            DW CMDS_V ; V
 137  4D2A 00 00            DW 0 ; W
 138  4D2C 00 00            DW 0 ; X
 139  4D2E 00 00            DW 0 ; Y
 140  4D30 00 00            DW 0 ; Z
 141  4D32
 142  4D32              CMDS_U:
 143  4D32 55 50 52 49  	DEFB	"UPRINT",0      ; Print upper case string
 143  4D36 4E 54 00
 144  4D39 6B 4F        	DEFW	UPRINT
 145  4D3B 00               DB 0
 146  4D3C              CMDS_L:
 147  4D3C 4C 50 52 49  	DEFB	"LPRINT",0      ; Print lower case string
 147  4D40 4E 54 00
 148  4D43 88 4F        	DEFW	LPRINT
 149  4D45 00               DB 0
 150  4D46              CMDS_M:
 151  4D46 4D 45 4D 56      DB "MEMVRM", 0
 151  4D4A 52 4D 00
 152  4D4D 7D 51            DW MEMVRM
 153  4D4F 4D 45 4D 43  	DB "MEMCPY", 0
 153  4D53 50 59 00
 154  4D56 EF 4F        	DW MEMCPY
 155  4D58 00               DB 0
 156  4D59              CMDS_F:
 157  4D59 46 49 4C 56      DB "FILVRM", 0
 157  4D5D 52 4D 00
 158  4D60 5F 50            DW FILVRM
 159  4D62 46 49 4C 52      DB "FILRAM", 0
 159  4D66 41 4D 00
 160  4D69 A6 50            DW FILRAM
 161  4D6B 00               DB 0
 162  4D6C              CMDS_G:
 163  4D6C 47 45 4E 43      DB "GENCAL", 0
 163  4D70 41 4C 00
 164  4D73 24 51            DW GENCAL
 165  4D75 00           	DB	0
 166  4D76              CMDS_V:
 167  4D76 56 52 4D 4D  	DB "VRMMEM", 0
 167  4D7A 45 4D 00
 168  4D7D FF 51        	DW VRMMEM
 169  4D7F 00           	DB 0
 170  4D80              CMDS_S:
 171  4D80 53 4E 44 53  	DB "SNDSFX", 0
 171  4D84 46 58 00
 172  4D87 3E 53        	DW SNDSFX
 173  4D89 53 4E 44 50  	DB "SNDPLYON", 0
 173  4D8D 4C 59 4F 4E
 173  4D91 00
 174  4D92 08 53        	DW SNDPLYON
 175  4D94 53 4E 44 50  	DB "SNDPLYOFF", 0
 175  4D98 4C 59 4F 46
 175  4D9C 46 00
 176  4D9E 1B 53        	DW SNDPLYOFF
 177  4DA0 53 4E 44 50  	DB "SNDPLYINI", 0
 177  4DA4 4C 59 49 4E
 177  4DA8 49 00
 178  4DAA B7 52        	DW SNDPLYINIT
 179  4DAC 53 50 52 41  	DB "SPRATRINI", 0
 179  4DB0 54 52 49 4E
 179  4DB4 49 00
 180  4DB6 9F 53        	DW SPRATRINI
 181  4DB8 00           	DB 0
 182  4DB9
 183  4DB9              ; ****************************************************************************************************
 184  4DB9              ; function sets VRAM address
 185  4DB9              ; input HL=address
 186  4DB9              ; modifies AF
 187  4DB9              SETWRT_LOCAL:
 188  4DB9 7D           	LD	A, L
 189  4DBA D3 99        	OUT	(099H), A
 190  4DBC 7C           	LD	A, H
 191  4DBD E6 3F        	AND	03FH
 192  4DBF F6 40        	OR	040H
 193  4DC1 D3 99        	OUT	(099H), A
 194  4DC3 C9           	RET
 195  4DC4              ; ****************************************************************************************************
 196  4DC4
 197  4DC4              ; ****************************************************************************************************
 198  4DC4              ; function gets slot and subslot data for specific page
 199  4DC4              ; input A=page (0, 1 or 2)
 200  4DC4              ; output B = 0A8H register value
 201  4DC4              ; output D = 0 is no subslots, 1 if yes
 202  4DC4              ; output C = 0A8H value when page 3 slot equals to requested page slot
 203  4DC4              ; output E = subslot value if present
 204  4DC4              ; modifies AF, BC, DE, HL
 205  4DC4              GET_PAGE_INFO:
 206  4DC4 6F               LD L, A
 207  4DC5 C6 C1            ADD A, low (EXPTBL)
 208  4DC7 32 D1 4D         LD (GET_PAGE_INFO_L1+1), A
 209  4DCA DB A8            IN A, (0A8H)
 210  4DCC 47               LD B, A
 211  4DCD E6 3F            AND 03FH
 212  4DCF 4F               LD C, A
 213  4DD0              GET_PAGE_INFO_L1:
 214  4DD0 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 215  4DD3 E6 80            AND 080H
 216  4DD5 28 1B            JR Z, GET_PAGE_INFO_L2
 217  4DD7                  ; expanded
 218  4DD7 2D               DEC L
 219  4DD8 FA F7 4D         JP M, GET_PAGE_INFO_L3
 220  4DDB 2D               DEC L
 221  4DDC FA F5 4D         JP M, GET_PAGE_INFO_L4
 222  4DDF                  ; page 2
 223  4DDF 07               RLCA
 224  4DE0 07               RLCA
 225  4DE1              GET_PAGE_INFO_L5:
 226  4DE1 E6 C0            AND 0C0H
 227  4DE3 B1               OR C
 228  4DE4 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 229  4DE6 4F               LD C, A
 230  4DE7 3A FF FF         LD A, (0FFFFH)
 231  4DEA 2F               CPL
 232  4DEB 5F               LD E, A
 233  4DEC 16 01            LD D, 1
 234  4DEE 78               LD A, B ; return stack
 235  4DEF D3 A8            OUT (0A8H), A
 236  4DF1 C9               RET
 237  4DF2              GET_PAGE_INFO_L2:
 238  4DF2                  ; not expanded
 239  4DF2 16 00            LD D, 0
 240  4DF4 C9               RET
 241  4DF5              GET_PAGE_INFO_L4:
 242  4DF5                  ; page 1
 243  4DF5 0F               RRCA
 244  4DF6 0F               RRCA
 245  4DF7              GET_PAGE_INFO_L3:
 246  4DF7                  ; page 0
 247  4DF7 0F               RRCA
 248  4DF8 0F               RRCA
 249  4DF9 18 E6            JR GET_PAGE_INFO_L5
 250  4DFB              ; ****************************************************************************************************
 251  4DFB
 252  4DFB              ; ****************************************************************************************************
 253  4DFB              ; function returns original slot and subslot info
 254  4DFB              ; input B = 0A8H register value
 255  4DFB              ; input D = 0 is no subslots, 1 if yes
 256  4DFB              ; input C = 0A8H value when page 3 slot equals to requested page slot
 257  4DFB              ; input E = subslot value if present
 258  4DFB              ; modifies AF
 259  4DFB              RESTORE_PAGE_INFO:
 260  4DFB 7A               LD A, D
 261  4DFC B7               OR A
 262  4DFD 28 07            JR Z, RESTORE_PAGE_INFO_L1
 263  4DFF 79               LD A, C
 264  4E00 D3 A8            OUT (0A8H), A
 265  4E02 7B               LD A, E
 266  4E03 32 FF FF         LD (0FFFFH), A
 267  4E06              RESTORE_PAGE_INFO_L1:
 268  4E06 78               LD A, B
 269  4E07 D3 A8            OUT (0A8H), A
 270  4E09 C9               RET
 271  4E0A              ; ****************************************************************************************************
 272  4E0A
 273  4E0A              ; *******************************************************************************************************
 274  4E0A              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 275  4E0A              ; INPUT:  A = SLOT ID: EXXXSSPP
 276  4E0A              ; E = EXPANDED FLAG
 277  4E0A              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 278  4E0A              ; PP = PRIMARY SLOT NUMBER
 279  4E0A              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 280  4E0A              ; CHANGES: AF, BC, DE
 281  4E0A
 282  4E0A              LOCAL_ENASLT:
 283  4E0A CD 2A 4E         CALL L0353
 284  4E0D FA 17 4E         JP M, L0340
 285  4E10 DB A8            IN A, (0A8H)
 286  4E12 A1               AND C
 287  4E13 B0               OR B
 288  4E14 D3 A8            OUT (0A8H), A
 289  4E16 C9               RET
 290  4E17              L0340:
 291  4E17 E5               PUSH HL
 292  4E18 CD 4F 4E         CALL L0378
 293  4E1B 4F               LD C, A
 294  4E1C 06 00            LD B, 0
 295  4E1E 7D               LD A, L
 296  4E1F A4               AND H
 297  4E20 B2               OR D
 298  4E21 21 C5 FC         LD HL, 0FCC5H
 299  4E24 09               ADD HL, BC
 300  4E25 77               LD (HL), A
 301  4E26 E1               POP HL
 302  4E27 79               LD A, C
 303  4E28 18 E0            JR LOCAL_ENASLT
 304  4E2A              L0353:
 305  4E2A F3               DI
 306  4E2B F5               PUSH AF
 307  4E2C 7C               LD A, H
 308  4E2D 07               RLCA
 309  4E2E 07               RLCA
 310  4E2F E6 03            AND 3
 311  4E31 5F               LD E, A
 312  4E32 3E C0            LD A, 0C0H
 313  4E34              L035D:
 314  4E34 07               RLCA
 315  4E35 07               RLCA
 316  4E36 1D               DEC E
 317  4E37 F2 34 4E         JP P, L035D
 318  4E3A 5F               LD E, A
 319  4E3B 2F               CPL
 320  4E3C 4F               LD C, A
 321  4E3D F1               POP AF
 322  4E3E F5               PUSH AF
 323  4E3F E6 03            AND 3
 324  4E41 3C               INC A
 325  4E42 47               LD B, A
 326  4E43 3E AB            LD A, 0ABH
 327  4E45              L036E:
 328  4E45 C6 55            ADD A, 055H
 329  4E47 10 FC            DJNZ L036E
 330  4E49 57               LD D, A
 331  4E4A A3               AND E
 332  4E4B 47               LD B, A
 333  4E4C F1               POP AF
 334  4E4D A7               AND A
 335  4E4E C9               RET
 336  4E4F              L0378:
 337  4E4F F5               PUSH AF
 338  4E50 7A               LD A, D
 339  4E51 E6 C0            AND 0C0H
 340  4E53 4F               LD C, A
 341  4E54 F1               POP AF
 342  4E55 F5               PUSH AF
 343  4E56 57               LD D, A
 344  4E57 DB A8            IN A, (0A8H)
 345  4E59 47               LD B, A
 346  4E5A E6 3F            AND 03FH
 347  4E5C B1               OR C
 348  4E5D D3 A8            OUT (0A8H), A
 349  4E5F 7A               LD A, D
 350  4E60 0F               RRCA
 351  4E61 0F               RRCA
 352  4E62 E6 03            AND 3
 353  4E64 57               LD D, A
 354  4E65 3E AB            LD A, 0ABH
 355  4E67              L0390:
 356  4E67 C6 55            ADD A, 055H
 357  4E69 15               DEC D
 358  4E6A F2 67 4E         JP P, L0390
 359  4E6D A3               AND E
 360  4E6E 57               LD D, A
 361  4E6F 7B               LD A, E
 362  4E70 2F               CPL
 363  4E71 67               LD H, A
 364  4E72 3A FF FF         LD A, (0FFFFH)
 365  4E75 2F               CPL
 366  4E76 6F               LD L, A
 367  4E77 A4               AND H
 368  4E78 B2               OR D
 369  4E79 32 FF FF         LD (0FFFFH), A
 370  4E7C 78               LD A, B
 371  4E7D D3 A8            OUT (0A8H), A
 372  4E7F F1               POP AF
 373  4E80 E6 03            AND 3
 374  4E82 C9               RET
 375  4E83              ; *******************************************************************************************************
 376  4E83
 377  4E83              ; *******************************************************************************************************
 378  4E83              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
 379  4E83              ; struct {
 380  4E83              ; DW y
 381  4E83              ; DW x
 382  4E83              ; DW pattern (0-31)
 383  4E83              ; DW color
 384  4E83              ; } [32]
 385  4E83              ; will hide sprites whose location is outside of visible area
 386  4E83              ; works in screen 1 and 2
 387  4E83              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
 388  4E83              ; modifies AF, AF', BC, DE, HL
 389  4E83              SPRATR_UPDATE:
 390  4E83              	; check if initialized
 391  4E83 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
 392  4E86 B7           	OR A
 393  4E87 C8           	RET Z
 394  4E88              	; check if update requested
 395  4E88 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 396  4E8B 7E           	LD A, (HL)
 397  4E8C B7           	OR A
 398  4E8D C8           	RET Z
 399  4E8E              	; check screen mode
 400  4E8E 3A AF FC     	LD A, (SCRMOD)
 401  4E91 3D           	DEC A
 402  4E92 28 02        	JR Z, .L0 ; screen 1
 403  4E94 3D           	DEC A
 404  4E95 C0           	RET NZ ; not screen 2
 405  4E96              .L0:
 406  4E96 06 20        	LD B, 32 ; sprite number
 407  4E98 0E 98        	LD C, #98 ; register for vpd data output
 408  4E9A              	; set VDP address
 409  4E9A 2A 28 F9     	LD HL, (ATRBAS)
 410  4E9D 3A FD 4C     	LD A, (FLICKER)
 411  4EA0 5F           	LD E, A
 412  4EA1 08           	EX AF, AF'
 413  4EA2 7B           	LD A, E
 414  4EA3 87           	ADD A, A
 415  4EA4 87           	ADD A, A
 416  4EA5 16 00        	LD D, 0
 417  4EA7 5F           	LD E, A
 418  4EA8 19           	ADD HL, DE
 419  4EA9 CD B9 4D     	CALL SETWRT_LOCAL
 420  4EAC ED 73 FB 4C  	LD (TMPSP), SP
 421  4EB0 ED 7B F9 4C  	LD SP, (SPRATR_DATA)
 422  4EB4
 423  4EB4              .LOOP:
 424  4EB4 E1           	POP HL
 425  4EB5 24           	INC H
 426  4EB6 28 0D        	JR Z, .L1 ; negative number above -256
 427  4EB8 25           	DEC H
 428  4EB9 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
 429  4EBB 7D           	LD A, L
 430  4EBC FE C0        	CP 192
 431  4EBE 30 10        	JR NC, .OUT3
 432  4EC0 3D           	DEC A ; due to VDP rule that top of screen is -1
 433  4EC1 57           	LD D, A
 434  4EC2 C3 E0 4E     	JP .X
 435  4EC5              .L1:
 436  4EC5 7D           	LD A, L
 437  4EC6 C6 10        	ADD 16
 438  4EC8 FA D0 4E     	JP M, .OUT3 ; below -16
 439  4ECB 2D           	DEC L ; due to VDP rule that top of screen is -1
 440  4ECC 55           	LD D, L
 441  4ECD C3 E0 4E     	JP .X
 442  4ED0              .OUT3:
 443  4ED0 E1           	POP HL ; skip x value
 444  4ED1              .OUT2:
 445  4ED1 E1           	POP HL ; skip pattern
 446  4ED2 E1           	POP HL ; skip color
 447  4ED3 3E D1        	LD A, #D1
 448  4ED5 D3 98        	OUT (#98), A ; sprite hidden
 449  4ED7 D3 98        	OUT (#98), A ; value unimportant
 450  4ED9 D3 98        	OUT (#98), A ; value unimportant
 451  4EDB D3 98        	OUT (#98), A ; value unimportant
 452  4EDD C3 04 4F     	JP .NEXT
 453  4EE0              .X:
 454  4EE0 E1           	POP HL
 455  4EE1 24           	INC H
 456  4EE2 28 08        	JR Z, .L2
 457  4EE4 25           	DEC H
 458  4EE5 20 EA        	JR NZ, .OUT2
 459  4EE7 1E 00        	LD E, 0 ; EC bit
 460  4EE9 C3 F5 4E     	JP .XY
 461  4EEC              .L2:
 462  4EEC 7D           	LD A, L
 463  4EED C6 20        	ADD 32
 464  4EEF FA D1 4E     	JP M, .OUT2
 465  4EF2 6F           	LD L, A
 466  4EF3 1E 80        	LD E, #80
 467  4EF5              .XY:
 468  4EF5 ED 51        	OUT (C), D
 469  4EF7 ED 69        	OUT (C), L
 470  4EF9 E1           	POP HL ; pattern
 471  4EFA 7D           	LD A, L
 472  4EFB 87           	ADD A, A
 473  4EFC 87           	ADD A, A ; needs to go at 4x
 474  4EFD D3 98        	OUT (#98), A
 475  4EFF E1           	POP HL ; color
 476  4F00 7D           	LD A, L
 477  4F01 B3           	OR E
 478  4F02 D3 98        	OUT (#98), A
 479  4F04              .NEXT:
 480  4F04 08           	EX AF, AF'
 481  4F05 3C           	INC A
 482  4F06 E6 1F        	AND 31
 483  4F08 C2 1C 4F     	JP NZ, .NEXT2
 484  4F0B 08           	EX AF, AF'
 485  4F0C 2A 28 F9     	LD HL, (ATRBAS)
 486  4F0F              	; CALL SETWRT_LOCAL not allowed as SP modified
 487  4F0F 7D           	LD	A, L
 488  4F10 D3 99        	OUT	(099H), A
 489  4F12 7C           	LD	A, H
 490  4F13 E6 3F        	AND	03FH
 491  4F15 F6 40        	OR	040H
 492  4F17 D3 99        	OUT	(099H), A
 493  4F19 C3 1D 4F     	JP .NEXT3
 494  4F1C              .NEXT2:
 495  4F1C 08           	EX AF, AF'
 496  4F1D              .NEXT3:
 497  4F1D 10 95        	DJNZ .LOOP
 498  4F1F 08           	EX AF, AF'
 499  4F20 3C           	INC A
 500  4F21 32 FD 4C     	LD (FLICKER), A
 501  4F24
 502  4F24 ED 7B FB 4C  	LD SP, (TMPSP)
 503  4F28 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 504  4F2B 36 00        	LD (HL), 0 ; zero out update flag
 505  4F2D C9           	RET
 506  4F2E              ; *******************************************************************************************************
 507  4F2E
 508  4F2E              ; General BASIC CALL-instruction handler
 509  4F2E              CALLHAND:
 510  4F2E E5           	PUSH HL
 511  4F2F 21 FE 4C     	LD	HL, CMDS ; pointer table based on starting letter
 512  4F32 3A 89 FD         LD A, (PROCNM)
 513  4F35 D6 41            SUB 'A'
 514  4F37 87               ADD A, A
 515  4F38 16 00            LD D, 0
 516  4F3A 5F               LD E, A
 517  4F3B 19               ADD HL, DE
 518  4F3C 5E               LD E, (HL)
 519  4F3D 23               INC HL
 520  4F3E 56               LD D, (HL)
 521  4F3F 7A               LD A, D
 522  4F40 B3               OR E
 523  4F41 28 24            JR Z, .CMDNOTRECOGNIZED
 524  4F43 EB               EX DE, HL
 525  4F44              .CHKCMD:
 526  4F44 11 89 FD     	LD	DE, PROCNM
 527  4F47 1A           .LOOP:	LD	A,(DE)
 528  4F48 BE           	CP	(HL)
 529  4F49 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 530  4F4B 13           	INC	DE
 531  4F4C 23           	INC	HL
 532  4F4D A7           	AND	A
 533  4F4E 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 534  4F50 5E           	LD	E,(HL)
 535  4F51 23           	INC	HL
 536  4F52 56           	LD	D,(HL)
 537  4F53 E1           	POP	HL		; routine address
 538  4F54 CD DA 4F     	CALL	GETPREVCHAR
 539  4F57 CD 69 4F     	CALL	.CALLDE		; Call routine
 540  4F5A A7           	AND	A
 541  4F5B C9           	RET
 542  4F5C
 543  4F5C              .TONEXTCMD:
 544  4F5C 0E FF        	LD	C,0FFH
 545  4F5E AF           	XOR	A
 546  4F5F ED B1        	CPIR			; Skip to end of instruction name
 547  4F61 23           	INC	HL
 548  4F62 23           	INC	HL		; Skip address
 549  4F63 BE           	CP	(HL)
 550  4F64 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 551  4F66 E1           	POP	HL
 552  4F67              .CMDNOTRECOGNIZED:
 553  4F67 37               SCF
 554  4F68 C9           	RET
 555  4F69
 556  4F69              .CALLDE:
 557  4F69 D5           	PUSH	DE
 558  4F6A C9           	RET
 559  4F6B
 560  4F6B              ;---------------------------
 561  4F6B
 562  4F6B              ;---------------------------
 563  4F6B              UPRINT:
 564  4F6B CD AF 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 565  4F6E E5           	PUSH	HL
 566  4F6F CD A5 4F             CALL    GETSTRPNT
 567  4F72              .LOOP
 568  4F72 7E                   LD      A,(HL)
 569  4F73 CD 7F 4F             CALL    .UCASE
 570  4F76 CD A2 00             CALL    CHPUT  ;Print
 571  4F79 23                   INC     HL
 572  4F7A 10 F6                DJNZ    .LOOP
 573  4F7C
 574  4F7C E1           	POP	HL
 575  4F7D B7           	OR      A
 576  4F7E C9           	RET
 577  4F7F
 578  4F7F              .UCASE:
 579  4F7F FE 61                CP      "a"
 580  4F81 D8                   RET     C
 581  4F82 FE 7B                CP      "z"+1
 582  4F84 D0                   RET     NC
 583  4F85 E6 DF                AND     %11011111
 584  4F87 C9                   RET
 585  4F88              ;---------------------------
 586  4F88              LPRINT:
 587  4F88 CD AF 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 588  4F8B E5           	PUSH	HL
 589  4F8C CD A5 4F             CALL    GETSTRPNT
 590  4F8F              .LOOP
 591  4F8F 7E                   LD      A,(HL)
 592  4F90 CD 9C 4F             CALL    .LCASE
 593  4F93 CD A2 00             CALL    CHPUT  ;Print
 594  4F96 23                   INC     HL
 595  4F97 10 F6                DJNZ    .LOOP
 596  4F99
 597  4F99 E1           	POP	HL
 598  4F9A B7           	OR      A
 599  4F9B C9           	RET
 600  4F9C
 601  4F9C              .LCASE:
 602  4F9C FE 41                CP      "A"
 603  4F9E D8                   RET     C
 604  4F9F FE 5B                CP      "Z"+1
 605  4FA1 D0                   RET     NC
 606  4FA2 F6 20                OR      %00100000
 607  4FA4 C9                   RET
 608  4FA5              ;---------------------------
 609  4FA5
 610  4FA5              GETSTRPNT:
 611  4FA5              ; OUT:
 612  4FA5              ; HL = String Address
 613  4FA5              ; B  = Lenght
 614  4FA5
 615  4FA5 2A F8 F7             LD      HL,(USR)
 616  4FA8 46                   LD      B,(HL)
 617  4FA9 23                   INC     HL
 618  4FAA 5E                   LD      E,(HL)
 619  4FAB 23                   INC     HL
 620  4FAC 56                   LD      D,(HL)
 621  4FAD EB                   EX      DE,HL
 622  4FAE C9                   RET
 623  4FAF
 624  4FAF              EVALTXTPARAM:
 625  4FAF CD D0 4F     	CALL	CHKCHAR
 626  4FB2 28           	DEFB	"("             ; Check for (
 627  4FB3 DD 21 64 4C  	LD	IX,FRMEVL
 628  4FB7 CD 59 01     	CALL	CALBAS		; Evaluate expression
 629  4FBA 3A 63 F6             LD      A,(VALTYP)
 630  4FBD FE 03                CP      3               ; Text type?
 631  4FBF C2 E2 4F             JP      NZ,TYPE_MISMATCH
 632  4FC2 E5                   PUSH	HL
 633  4FC3 DD 21 D0 67          LD	IX,FRESTR         ; Free the temporary string
 634  4FC7 CD 59 01             CALL	CALBAS
 635  4FCA E1                   POP	HL
 636  4FCB CD D0 4F     	CALL	CHKCHAR
 637  4FCE 29           	DEFB	")"             ; Check for )
 638  4FCF C9                   RET
 639  4FD0
 640  4FD0
 641  4FD0              CHKCHAR:
 642  4FD0 CD DA 4F     	CALL	GETPREVCHAR	; Get previous basic char
 643  4FD3 E3           	EX	(SP),HL
 644  4FD4 BE           	CP	(HL) 	        ; Check if good char
 645  4FD5 20 0F        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 646  4FD7 23           	INC	HL
 647  4FD8 E3           	EX	(SP),HL
 648  4FD9 23           	INC	HL		; Get next basic char
 649  4FDA
 650  4FDA              GETPREVCHAR:
 651  4FDA 2B           	DEC	HL
 652  4FDB DD 21 66 46  	LD	IX,CHRGTR
 653  4FDF C3 59 01     	JP      CALBAS
 654  4FE2
 655  4FE2
 656  4FE2              TYPE_MISMATCH:
 657  4FE2 1E 0D            LD E, 13 ; Type mismatch
 658  4FE4 18 02            JR THROW_ERROR
 659  4FE6
 660  4FE6              SYNTAX_ERROR:
 661  4FE6 1E 02            LD E, 2 ; Syntax error
 662  4FE8              THROW_ERROR:
 663  4FE8 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 664  4FEC C3 59 01     	JP	CALBAS
 665  4FEF
 666  4FEF              ;---------------------------
 667  4FEF
 668  4FEF              ; *******************************************************************************************************
 669  4FEF              ; function to handle CALL MEMCPY basic extension
 670  4FEF              ; _MEMCPY ( INT source,
 671  4FEF              ;			INT destination,
 672  4FEF              ;			INT count,
 673  4FEF              ;			BYTE enable_ram, >0 = true
 674  4FEF              ;			BYTE wait_vsync) >0 = treu
 675  4FEF              ; enable_ram will put ram in page 0 also, page 1 is already there
 676  4FEF              ; wait_vsync will issue HALT before copying
 677  4FEF              MEMCPY:
 678  4FEF              	; opening (
 679  4FEF CD D0 4F     	CALL CHKCHAR
 680  4FF2 28           	DB '('
 681  4FF3              	; get source address
 682  4FF3 DD 21 2F 54  	LD IX, FRMQNT
 683  4FF7 CD 59 01     	CALL CALBAS
 684  4FFA D5           	PUSH DE
 685  4FFB              	; comma
 686  4FFB CD D0 4F     	CALL CHKCHAR
 687  4FFE 2C           	DB ','
 688  4FFF              	; get destination address
 689  4FFF DD 21 2F 54  	LD IX, FRMQNT
 690  5003 CD 59 01     	CALL CALBAS
 691  5006 D5           	PUSH DE
 692  5007              	; comma
 693  5007 CD D0 4F     	CALL CHKCHAR
 694  500A 2C           	DB ','
 695  500B              	; get length
 696  500B DD 21 2F 54  	LD IX, FRMQNT
 697  500F CD 59 01     	CALL CALBAS
 698  5012 D5           	PUSH DE
 699  5013              	; comma
 700  5013 CD D0 4F     	CALL CHKCHAR
 701  5016 2C           	DB ','
 702  5017              	; get ROM/RAM
 703  5017 DD 21 1C 52  	LD IX, GETBYT
 704  501B CD 59 01     	CALL CALBAS
 705  501E F5           	PUSH AF
 706  501F              	; comma
 707  501F CD D0 4F     	CALL CHKCHAR
 708  5022 2C           	DB ','
 709  5023              	; get vsync wait
 710  5023 DD 21 1C 52  	LD IX, GETBYT
 711  5027 CD 59 01     	CALL CALBAS
 712  502A F5           	PUSH AF
 713  502B              	; ending )
 714  502B CD D0 4F     	CALL CHKCHAR
 715  502E 29           	DB ')'
 716  502F
 717  502F FB               EI
 718  5030              	; save position
 719  5030 E5           	PUSH HL
 720  5031 DD E1        	POP IX
 721  5033
 722  5033              	; syntax ok
 723  5033              	; wait for vsync if needed
 724  5033 F1           	POP AF
 725  5034 B7           	OR A
 726  5035 28 01        	JR Z, .L1
 727  5037 76           	HALT
 728  5038
 729  5038              .L1:
 730  5038              	; enable RAM in page 0 if needed
 731  5038 F1           	POP AF
 732  5039 B7           	OR A
 733  503A              	; pop LDIR parameters and store away for later
 734  503A C1           	POP BC
 735  503B D1           	POP DE
 736  503C E1           	POP HL
 737  503D 28 1A        	JR Z, .L2
 738  503F D9           	EXX
 739  5040 AF               XOR A
 740  5041 CD C4 4D         CALL GET_PAGE_INFO
 741  5044 C5               PUSH BC
 742  5045 D5               PUSH DE
 743  5046 3A 41 F3         LD A, (RAMAD0)
 744  5049 26 00            LD H, 0
 745  504B F3           	DI
 746  504C CD 0A 4E         CALL LOCAL_ENASLT
 747  504F D9           	EXX
 748  5050 ED B0        	LDIR
 749  5052 D1               POP DE
 750  5053 C1               POP BC
 751  5054 CD FB 4D         CALL RESTORE_PAGE_INFO
 752  5057 18 02        	JR .L3
 753  5059
 754  5059              .L2:
 755  5059 ED B0        	LDIR
 756  505B
 757  505B              .L3:
 758  505B DD E5        	PUSH IX
 759  505D E1           	POP HL
 760  505E C9           	RET
 761  505F              ; *******************************************************************************************************
 762  505F
 763  505F              ; *******************************************************************************************************
 764  505F              ; function to handle CALL FILVRM basic extension
 765  505F              ; FILVRM ( INT offset,
 766  505F              ;		   INT count,
 767  505F              ;		   BYTE value,
 768  505F              ;		   BYTE wait_vsync) >0 = true
 769  505F              ; wait_vsync will issue HALT before copying
 770  505F              FILVRM:
 771  505F              	; opening (
 772  505F CD D0 4F     	CALL CHKCHAR
 773  5062 28           	DB '('
 774  5063              	; get offset address
 775  5063 DD 21 2F 54  	LD IX, FRMQNT
 776  5067 CD 59 01     	CALL CALBAS
 777  506A D5           	PUSH DE
 778  506B              	; comma
 779  506B CD D0 4F     	CALL CHKCHAR
 780  506E 2C           	DB ','
 781  506F              	; get count
 782  506F DD 21 2F 54  	LD IX, FRMQNT
 783  5073 CD 59 01     	CALL CALBAS
 784  5076 D5           	PUSH DE
 785  5077              	; comma
 786  5077 CD D0 4F     	CALL CHKCHAR
 787  507A 2C           	DB ','
 788  507B              	; get value
 789  507B DD 21 1C 52  	LD IX, GETBYT
 790  507F CD 59 01     	CALL CALBAS
 791  5082 F5           	PUSH AF
 792  5083              	; comma
 793  5083 CD D0 4F     	CALL CHKCHAR
 794  5086 2C           	DB ','
 795  5087              	; get vsync wait
 796  5087 DD 21 1C 52  	LD IX, GETBYT
 797  508B CD 59 01     	CALL CALBAS
 798  508E F5           	PUSH AF
 799  508F              	; ending )
 800  508F CD D0 4F     	CALL CHKCHAR
 801  5092 29           	DB ')'
 802  5093
 803  5093 FB               EI
 804  5094              	; save position
 805  5094 E5           	PUSH HL
 806  5095 DD E1        	POP IX
 807  5097
 808  5097              	; syntax ok
 809  5097              	; wait for vsync if needed
 810  5097 F1           	POP AF
 811  5098 B7           	OR A
 812  5099 28 01        	JR Z, .L1
 813  509B 76           	HALT
 814  509C
 815  509C              .L1:
 816  509C F1               POP AF ; value
 817  509D C1               POP BC ; count
 818  509E E1               POP HL ; offset
 819  509F CD 56 00         CALL BIOS_FILVRM
 820  50A2
 821  50A2              .L3:
 822  50A2 DD E5        	PUSH IX
 823  50A4 E1           	POP HL
 824  50A5 C9           	RET
 825  50A6              ; *******************************************************************************************************
 826  50A6
 827  50A6              ; *******************************************************************************************************
 828  50A6              ; function to handle CALL FILRAM basic extension
 829  50A6              ; FILRAM ( INT start address,
 830  50A6              ;		   INT count,
 831  50A6              ;		   BYTE value,
 832  50A6              ;	   	   BYTE enable_ram, >0 = true
 833  50A6              ;		   BYTE wait_vsync) >0 = true
 834  50A6              ; enable_ram will put ram in page 0 also, page 1 is already there
 835  50A6              ; wait_vsync will issue HALT before copying
 836  50A6              FILRAM:
 837  50A6              	; opening (
 838  50A6 CD D0 4F     	CALL CHKCHAR
 839  50A9 28           	DB '('
 840  50AA              	; get start address
 841  50AA DD 21 2F 54  	LD IX, FRMQNT
 842  50AE CD 59 01     	CALL CALBAS
 843  50B1 D5           	PUSH DE
 844  50B2              	; comma
 845  50B2 CD D0 4F     	CALL CHKCHAR
 846  50B5 2C           	DB ','
 847  50B6              	; get count
 848  50B6 DD 21 2F 54  	LD IX, FRMQNT
 849  50BA CD 59 01     	CALL CALBAS
 850  50BD D5           	PUSH DE
 851  50BE              	; comma
 852  50BE CD D0 4F     	CALL CHKCHAR
 853  50C1 2C           	DB ','
 854  50C2              	; get value
 855  50C2 DD 21 1C 52  	LD IX, GETBYT
 856  50C6 CD 59 01     	CALL CALBAS
 857  50C9 F5           	PUSH AF
 858  50CA              	; comma
 859  50CA CD D0 4F     	CALL CHKCHAR
 860  50CD 2C           	DB ','
 861  50CE              	; get ROM/RAM
 862  50CE DD 21 1C 52  	LD IX, GETBYT
 863  50D2 CD 59 01     	CALL CALBAS
 864  50D5 F5           	PUSH AF
 865  50D6              	; comma
 866  50D6 CD D0 4F     	CALL CHKCHAR
 867  50D9 2C           	DB ','
 868  50DA              	; get vsync wait
 869  50DA DD 21 1C 52  	LD IX, GETBYT
 870  50DE CD 59 01     	CALL CALBAS
 871  50E1 F5           	PUSH AF
 872  50E2              	; ending )
 873  50E2 CD D0 4F     	CALL CHKCHAR
 874  50E5 29           	DB ')'
 875  50E6
 876  50E6 FB               EI
 877  50E7              	; save position
 878  50E7 E5           	PUSH HL
 879  50E8 DD E1        	POP IX
 880  50EA
 881  50EA              	; syntax ok
 882  50EA              	; wait for vsync if needed
 883  50EA F1           	POP AF
 884  50EB B7           	OR A
 885  50EC 28 01        	JR Z, .L1
 886  50EE 76           	HALT
 887  50EF
 888  50EF              .L1:
 889  50EF              	; enable RAM in page 0 if needed
 890  50EF F1           	POP AF
 891  50F0 B7           	OR A
 892  50F1              	; pop LDIR parameters and store away for later
 893  50F1 D1           	POP DE ; actually AF
 894  50F2 C1           	POP BC ; count
 895  50F3 E1           	POP HL ; start address
 896  50F4 28 1B        	JR Z, .L2
 897  50F6 D9           	EXX
 898  50F7 AF               XOR A
 899  50F8 CD C4 4D         CALL GET_PAGE_INFO
 900  50FB C5               PUSH BC
 901  50FC D5               PUSH DE
 902  50FD 3A 41 F3         LD A, (RAMAD0)
 903  5100 26 00            LD H, 0
 904  5102 F3           	DI
 905  5103 CD 0A 4E         CALL LOCAL_ENASLT
 906  5106 D9           	EXX
 907  5107 CD 18 51     	CALL .FILLVALUE
 908  510A D1               POP DE
 909  510B C1               POP BC
 910  510C CD FB 4D         CALL RESTORE_PAGE_INFO
 911  510F 18 03        	JR .L3
 912  5111
 913  5111              .L2:
 914  5111 CD 18 51     	CALL .FILLVALUE
 915  5114
 916  5114              .L3:
 917  5114 DD E5        	PUSH IX
 918  5116 E1           	POP HL
 919  5117 C9           	RET
 920  5118
 921  5118              .FILLVALUE:
 922  5118 72               LD (HL), D
 923  5119 54               LD D, H
 924  511A 5D               LD E, L
 925  511B 13               INC DE
 926  511C 0B               DEC BC
 927  511D ED B0            LDIR
 928  511F C9               RET
 929  5120              ; *******************************************************************************************************
 930  5120
 931  5120              ; *******************************************************************************************************
 932  5120              ; function to handle CALL GENCAL basic extension
 933  5120              ; GENCAL ( INT fn_addr, = address of the function to call
 934  5120              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 935  5120              ; output values of reristers will also be stored at reg_list_ptr
 936  5120              GENCAL_VAR_SP:
 937  5120 00 00            DW 0
 938  5122              GENCAL_VAR_SP2:
 939  5122 00 00            DW 0
 940  5124              GENCAL:
 941  5124              	; opening (
 942  5124 CD D0 4F     	CALL CHKCHAR
 943  5127 28           	DB '('
 944  5128              	; get function address
 945  5128 DD 21 2F 54  	LD IX, FRMQNT
 946  512C CD 59 01     	CALL CALBAS
 947  512F D5           	PUSH DE
 948  5130              	; comma
 949  5130 CD D0 4F     	CALL CHKCHAR
 950  5133 2C           	DB ','
 951  5134              	; get pointer to register list
 952  5134 DD 21 2F 54  	LD IX, FRMQNT
 953  5138 CD 59 01     	CALL CALBAS
 954  513B D5           	PUSH DE
 955  513C              	; ending )
 956  513C CD D0 4F     	CALL CHKCHAR
 957  513F 29           	DB ')'
 958  5140
 959  5140              	; save BASIC token position
 960  5140 E5           	PUSH HL
 961  5141 D9               EXX
 962  5142 E1           	POP HL ; HL'=next basic token
 963  5143 D9               EXX
 964  5144
 965  5144 E1               POP HL ; get pointer to register values
 966  5145 ED 73 20 51      LD (GENCAL_VAR_SP), SP
 967  5149 F3               DI
 968  514A F9               LD SP, HL
 969  514B F1               POP AF
 970  514C C1               POP BC
 971  514D D1               POP DE
 972  514E E1               POP HL
 973  514F DD E1            POP IX
 974  5151 FD E1            POP IY
 975  5153 D9               EXX
 976  5154 ED 73 22 51      LD (GENCAL_VAR_SP2), SP
 977  5158 ED 7B 20 51      LD SP, (GENCAL_VAR_SP)
 978  515C FB               EI
 979  515D D1               POP DE ; get function to call
 980  515E E5               PUSH HL
 981  515F CD 7A 51         CALL .EXXDECALL
 982  5162 F3               DI
 983  5163 ED 73 20 51      LD (GENCAL_VAR_SP), SP
 984  5167 ED 7B 22 51      LD SP, (GENCAL_VAR_SP2)
 985  516B FD E5            PUSH IY
 986  516D DD E5            PUSH IX
 987  516F E5               PUSH HL
 988  5170 D5               PUSH DE
 989  5171 C5               PUSH BC
 990  5172 F5               PUSH AF
 991  5173 ED 7B 20 51      LD SP, (GENCAL_VAR_SP)
 992  5177 FB               EI
 993  5178 E1               POP HL
 994  5179 C9           	RET
 995  517A
 996  517A              .EXXDECALL:
 997  517A D5               PUSH DE
 998  517B D9               EXX
 999  517C C9               RET
1000  517D              ; *******************************************************************************************************
1001  517D
1002  517D              ; *******************************************************************************************************
1003  517D              ; function to handle CALL MEMVRM basic extension
1004  517D              ; copies from RAM to VRAM
1005  517D              ; _MEMVRM ( INT source,
1006  517D              ;			INT destination,
1007  517D              ;			INT count,
1008  517D              ;			BYTE enable_ram, >0 = true
1009  517D              ;			BYTE wait_vsync) >0 = treu
1010  517D              ; enable_ram will put ram in page 0 also, page 1 is already there
1011  517D              ; wait_vsync will issue HALT before copying
1012  517D              MEMVRM:
1013  517D              	; opening (
1014  517D CD D0 4F     	CALL CHKCHAR
1015  5180 28           	DB '('
1016  5181              	; get source address
1017  5181 DD 21 2F 54  	LD IX, FRMQNT
1018  5185 CD 59 01     	CALL CALBAS
1019  5188 D5           	PUSH DE
1020  5189              	; comma
1021  5189 CD D0 4F     	CALL CHKCHAR
1022  518C 2C           	DB ','
1023  518D              	; get destination address
1024  518D DD 21 2F 54  	LD IX, FRMQNT
1025  5191 CD 59 01     	CALL CALBAS
1026  5194 D5           	PUSH DE
1027  5195              	; comma
1028  5195 CD D0 4F     	CALL CHKCHAR
1029  5198 2C           	DB ','
1030  5199              	; get length
1031  5199 DD 21 2F 54  	LD IX, FRMQNT
1032  519D CD 59 01     	CALL CALBAS
1033  51A0 D5           	PUSH DE
1034  51A1              	; comma
1035  51A1 CD D0 4F     	CALL CHKCHAR
1036  51A4 2C           	DB ','
1037  51A5              	; get ROM/RAM
1038  51A5 DD 21 1C 52  	LD IX, GETBYT
1039  51A9 CD 59 01     	CALL CALBAS
1040  51AC F5           	PUSH AF
1041  51AD              	; comma
1042  51AD CD D0 4F     	CALL CHKCHAR
1043  51B0 2C           	DB ','
1044  51B1              	; get vsync wait
1045  51B1 DD 21 1C 52  	LD IX, GETBYT
1046  51B5 CD 59 01     	CALL CALBAS
1047  51B8 F5           	PUSH AF
1048  51B9              	; ending )
1049  51B9 CD D0 4F     	CALL CHKCHAR
1050  51BC 29           	DB ')'
1051  51BD
1052  51BD                  ; save position in BASIC text
1053  51BD E5           	PUSH HL
1054  51BE DD E1        	POP IX
1055  51C0
1056  51C0              	; syntax ok
1057  51C0              	; wait for vsync if needed
1058  51C0 F1           	POP AF
1059  51C1 B7           	OR A
1060  51C2 28 03        	JR Z, .L1
1061  51C4 FB               EI
1062  51C5 76           	HALT
1063  51C6 F3               DI ; since interrupt can modify vram address
1064  51C7
1065  51C7              .L1:
1066  51C7              	; enable RAM in page 0 if needed
1067  51C7 F1           	POP AF
1068  51C8 B7           	OR A
1069  51C9              	; pop LDIR parameters and store away for later
1070  51C9 C1           	POP BC
1071  51CA D1           	POP DE
1072  51CB E1           	POP HL
1073  51CC 28 1A        	JR Z, .L2
1074  51CE D9           	EXX
1075  51CF AF               XOR A
1076  51D0 CD C4 4D         CALL GET_PAGE_INFO
1077  51D3 C5               PUSH BC
1078  51D4 D5               PUSH DE
1079  51D5 3A 41 F3         LD A, (RAMAD0)
1080  51D8 26 00            LD H, 0
1081  51DA CD 0A 4E         CALL LOCAL_ENASLT
1082  51DD D9           	EXX
1083  51DE CD EF 51     	CALL .LDIRVM
1084  51E1 D1               POP DE
1085  51E2 C1               POP BC
1086  51E3 CD FB 4D         CALL RESTORE_PAGE_INFO
1087  51E6 18 03        	JR .L3
1088  51E8
1089  51E8              .L2:
1090  51E8 CD EF 51     	CALL .LDIRVM
1091  51EB
1092  51EB              .L3:
1093  51EB DD E5        	PUSH IX
1094  51ED E1           	POP HL
1095  51EE C9           	RET
1096  51EF
1097  51EF              .LDIRVM:
1098  51EF EB           	EX DE, HL
1099  51F0 CD B9 4D     	CALL SETWRT_LOCAL
1100  51F3 EB           	EX DE, HL
1101  51F4
1102  51F4              .L4:
1103  51F4 7E               LD A, (HL)
1104  51F5 D3 98            OUT (#98), A
1105  51F7 23               INC HL
1106  51F8 0B               DEC BC
1107  51F9 79               LD A, C
1108  51FA B0               OR B
1109  51FB C2 F4 51         JP NZ, .L4
1110  51FE C9               RET
1111  51FF              ; *******************************************************************************************************
1112  51FF
1113  51FF              ; *******************************************************************************************************
1114  51FF              ; function to handle CALL VRMMEM basic extension
1115  51FF              ; copies from RAM to VRAM
1116  51FF              ; _VRMMEM ( INT source,
1117  51FF              ;			INT destination,
1118  51FF              ;			INT count,
1119  51FF              ;			BYTE enable_ram, >0 = true
1120  51FF              ;			BYTE wait_vsync) >0 = true
1121  51FF              ; enable_ram will put ram in page 0 also, page 1 is already there
1122  51FF              ; wait_vsync will issue HALT before copying
1123  51FF              VRMMEM:
1124  51FF              	; opening (
1125  51FF CD D0 4F     	CALL CHKCHAR
1126  5202 28           	DB '('
1127  5203              	; get source address
1128  5203 DD 21 2F 54  	LD IX, FRMQNT
1129  5207 CD 59 01     	CALL CALBAS
1130  520A D5           	PUSH DE
1131  520B              	; comma
1132  520B CD D0 4F     	CALL CHKCHAR
1133  520E 2C           	DB ','
1134  520F              	; get destination address
1135  520F DD 21 2F 54  	LD IX, FRMQNT
1136  5213 CD 59 01     	CALL CALBAS
1137  5216 D5           	PUSH DE
1138  5217              	; comma
1139  5217 CD D0 4F     	CALL CHKCHAR
1140  521A 2C           	DB ','
1141  521B              	; get length
1142  521B DD 21 2F 54  	LD IX, FRMQNT
1143  521F CD 59 01     	CALL CALBAS
1144  5222 D5           	PUSH DE
1145  5223              	; comma
1146  5223 CD D0 4F     	CALL CHKCHAR
1147  5226 2C           	DB ','
1148  5227              	; get ROM/RAM
1149  5227 DD 21 1C 52  	LD IX, GETBYT
1150  522B CD 59 01     	CALL CALBAS
1151  522E F5           	PUSH AF
1152  522F              	; comma
1153  522F CD D0 4F     	CALL CHKCHAR
1154  5232 2C           	DB ','
1155  5233              	; get vsync wait
1156  5233 DD 21 1C 52  	LD IX, GETBYT
1157  5237 CD 59 01     	CALL CALBAS
1158  523A F5           	PUSH AF
1159  523B              	; ending )
1160  523B CD D0 4F     	CALL CHKCHAR
1161  523E 29           	DB ')'
1162  523F
1163  523F                  ; save position in BASIC text
1164  523F E5           	PUSH HL
1165  5240 DD E1        	POP IX
1166  5242
1167  5242              	; syntax ok
1168  5242              	; wait for vsync if needed
1169  5242 F1           	POP AF
1170  5243 B7           	OR A
1171  5244 28 03        	JR Z, .L1
1172  5246 FB               EI
1173  5247 76           	HALT
1174  5248 F3               DI ; since interrupt can modify vram address
1175  5249
1176  5249              .L1:
1177  5249              	; enable RAM in page 0 if needed
1178  5249 F1           	POP AF
1179  524A B7           	OR A
1180  524B              	; pop LDIR parameters and store away for later
1181  524B C1           	POP BC
1182  524C D1           	POP DE
1183  524D E1           	POP HL
1184  524E 28 1A        	JR Z, .L2
1185  5250 D9           	EXX
1186  5251 AF               XOR A
1187  5252 CD C4 4D         CALL GET_PAGE_INFO
1188  5255 C5               PUSH BC
1189  5256 D5               PUSH DE
1190  5257 3A 41 F3         LD A, (RAMAD0)
1191  525A 26 00            LD H, 0
1192  525C CD 0A 4E         CALL LOCAL_ENASLT
1193  525F D9           	EXX
1194  5260 CD 71 52     	CALL .LDIRMV
1195  5263 D1               POP DE
1196  5264 C1               POP BC
1197  5265 CD FB 4D         CALL RESTORE_PAGE_INFO
1198  5268 18 03        	JR .L3
1199  526A
1200  526A              .L2:
1201  526A CD 71 52     	CALL .LDIRMV
1202  526D
1203  526D              .L3:
1204  526D DD E5        	PUSH IX
1205  526F E1           	POP HL
1206  5270 C9           	RET
1207  5271
1208  5271              .LDIRMV:
1209  5271 CD B9 4D     	CALL SETWRT_LOCAL
1210  5274              .L4:
1211  5274 DB 98            IN A, (#98)
1212  5276 12           	LD (DE), A
1213  5277 13               INC DE
1214  5278 0B               DEC BC
1215  5279 79               LD A, C
1216  527A B0               OR B
1217  527B C2 74 52         JP NZ, .L4
1218  527E C9               RET
1219  527F              ; *******************************************************************************************************
1220  527F
1221  527F              ; *******************************************************************************************************
1222  527F              ; H.TIMI function
1223  527F              MBGE_HTIMI:
1224  527F               EXPORT MBGE_HTIMI
1225  527F F5           	PUSH AF
1226  5280
1227  5280 CD 83 4E     	CALL SPRATR_UPDATE
1228  5283
1229  5283 3A F5 4C     	LD A, (SOUND_ENABLED)
1230  5286 B7           	OR A
1231  5287 28 2A        	JR Z, .EXIT
1232  5289
1233  5289              	; enable page 2
1234  5289 3E 02            LD A, 2
1235  528B CD C4 4D         CALL GET_PAGE_INFO
1236  528E C5               PUSH BC
1237  528F D5               PUSH DE
1238  5290 3A 43 F3         LD A, (RAMAD2)
1239  5293 26 80            LD H, 080H
1240  5295 CD 0A 4E         CALL LOCAL_ENASLT
1241  5298              	; enable page 0
1242  5298 AF               XOR A
1243  5299 CD C4 4D         CALL GET_PAGE_INFO
1244  529C C5               PUSH BC
1245  529D D5               PUSH DE
1246  529E 3A 41 F3         LD A, (RAMAD0)
1247  52A1 26 00            LD H, 0
1248  52A3 CD 0A 4E         CALL LOCAL_ENASLT
1249  52A6
1250  52A6 CD 31 42     	CALL PLY_AKG_PLAY
1251  52A9
1252  52A9              	; restore page 0
1253  52A9 D1               POP DE
1254  52AA C1               POP BC
1255  52AB CD FB 4D         CALL RESTORE_PAGE_INFO
1256  52AE              	; restore page 2
1257  52AE D1               POP DE
1258  52AF C1               POP BC
1259  52B0 CD FB 4D         CALL RESTORE_PAGE_INFO
1260  52B3
1261  52B3              .EXIT:
1262  52B3 F1           	POP AF
1263  52B4 C3 EE 4C     	JP ORIG.HTIMI
1264  52B7              ; *******************************************************************************************************
1265  52B7
1266  52B7              ; *******************************************************************************************************
1267  52B7              ; function to handle CALL SNDPLYINIT basic extension
1268  52B7              ; initializes sound player
1269  52B7              ; _SNDPLYINIT ( INT music_offset,
1270  52B7              ;				INT sfx_offset, can be -1 if no SFX
1271  52B7              ; will put ram in page 0 also, page 1 is already there
1272  52B7              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1273  52B7              SNDPLYINIT:
1274  52B7              	; opening (
1275  52B7 CD D0 4F     	CALL CHKCHAR
1276  52BA 28           	DB '('
1277  52BB              	; get music address
1278  52BB DD 21 2F 54  	LD IX, FRMQNT
1279  52BF CD 59 01     	CALL CALBAS
1280  52C2 D5           	PUSH DE
1281  52C3              	; comma
1282  52C3 CD D0 4F     	CALL CHKCHAR
1283  52C6 2C           	DB ','
1284  52C7              	; get sfx address
1285  52C7 DD 21 2F 54  	LD IX, FRMQNT
1286  52CB CD 59 01     	CALL CALBAS
1287  52CE D5           	PUSH DE
1288  52CF              	; ending )
1289  52CF CD D0 4F     	CALL CHKCHAR
1290  52D2 29           	DB ')'
1291  52D3
1292  52D3                  ; save position in BASIC text
1293  52D3 44           	LD B, H
1294  52D4 4D           	LD C, L
1295  52D5
1296  52D5              	; pop LDIR parameters and store away for later
1297  52D5 D1           	POP DE ; sfx address
1298  52D6 E1           	POP HL ; music address
1299  52D7 C5           	PUSH BC ; basic text location
1300  52D8 D9           	EXX
1301  52D9 AF               XOR A
1302  52DA CD C4 4D         CALL GET_PAGE_INFO
1303  52DD C5               PUSH BC
1304  52DE D5               PUSH DE
1305  52DF 3A 41 F3         LD A, (RAMAD0)
1306  52E2 26 00            LD H, 0
1307  52E4 CD 0A 4E         CALL LOCAL_ENASLT
1308  52E7 D9           	EXX
1309  52E8
1310  52E8 D5           	PUSH DE
1311  52E9 AF           	XOR A
1312  52EA              	; HL = music location
1313  52EA CD 60 41     	CALL PLY_AKG_INIT
1314  52ED 3E 01        	LD A, 1
1315  52EF 32 F3 4C     	LD (MUSIC_INIT_STATUS), A
1316  52F2
1317  52F2 E1           	POP HL
1318  52F3 23           	INC HL
1319  52F4 7D           	LD A, L
1320  52F5 B4           	OR H
1321  52F6 28 09        	JR Z,.L1
1322  52F8 2B           	DEC HL
1323  52F9 CD 1B 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1324  52FC 3E 01        	LD A, 1
1325  52FE 32 F4 4C     	LD (SFX_INIT_STATUS), A
1326  5301              .L1:
1327  5301 D1               POP DE
1328  5302 C1               POP BC
1329  5303 CD FB 4D         CALL RESTORE_PAGE_INFO
1330  5306
1331  5306 E1           	POP HL
1332  5307 C9           	RET
1333  5308              ; *******************************************************************************************************
1334  5308
1335  5308              ; *******************************************************************************************************
1336  5308              ; function to handle CALL SNDPLYON basic extension
1337  5308              ; enables sound player
1338  5308              ; _SNDPLYON
1339  5308              ; sets SOUND_ENABLED variable to 1 if init call was done
1340  5308              ; if not throws out of data error
1341  5308              SNDPLYON:
1342  5308 3A F3 4C     	LD A, (MUSIC_INIT_STATUS)
1343  530B B7           	OR A
1344  530C 20 05        	JR NZ, .L1
1345  530E              	; player not initialized, throw error
1346  530E 1E 04        	LD E, 04 ; Out of DATA
1347  5310 C3 E8 4F     	JP THROW_ERROR
1348  5313              .L1:
1349  5313 32 F5 4C     	LD (SOUND_ENABLED), A
1350  5316              	; disable key click
1351  5316 AF           	XOR A
1352  5317 32 DB F3     	LD (CLIKSW), A
1353  531A C9           	RET
1354  531B              ; *******************************************************************************************************
1355  531B
1356  531B              ; *******************************************************************************************************
1357  531B              ; function to handle CALL SNDPLYOFF basic extension
1358  531B              ; disables sound player
1359  531B              ; _SNDPLYOFF
1360  531B              ; sets SOUND_ENABLED variable to 0
1361  531B              ; calls AKG to stop music and SFX on all channels if initialized
1362  531B              SNDPLYOFF:
1363  531B 3A F5 4C     	LD A, (SOUND_ENABLED)
1364  531E B7           	OR A
1365  531F C8           	RET Z ; already stopped
1366  5320 AF           	XOR A
1367  5321 32 F5 4C     	LD (SOUND_ENABLED), A
1368  5324 E5           	PUSH HL
1369  5325 CD 1F 42     	CALL PLY_AKG_STOP
1370  5328 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1371  532B B7           	OR A
1372  532C 28 0E        	JR Z, .EXIT ; SFX not in use
1373  532E AF           	XOR A
1374  532F CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1375  5332 3E 01        	LD A, 1
1376  5334 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1377  5337 3E 02        	LD A, 2
1378  5339 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1379  533C              .EXIT:
1380  533C E1           	POP HL
1381  533D C9           	RET
1382  533E              ; *******************************************************************************************************
1383  533E
1384  533E              ; *******************************************************************************************************
1385  533E              ; function to handle CALL SNDSFX basic extension
1386  533E              ; plays a sound effect
1387  533E              ; _SNDSFX ( BYTE sfx_number, >0
1388  533E              ;			BYTE channel, = 0,1 or 2
1389  533E              ;			BYTE inverted_volume = 0-16, 0 being full volume
1390  533E              ; will put ram in page 0 also, page 1 is already there
1391  533E              ; if sound off throws illegal function call
1392  533E              ; if sfx not initialized, throws out of data
1393  533E              SNDSFX:
1394  533E              	; opening (
1395  533E CD D0 4F     	CALL CHKCHAR
1396  5341 28           	DB '('
1397  5342              	; get sfx_number
1398  5342 DD 21 1C 52  	LD IX, GETBYT
1399  5346 CD 59 01     	CALL CALBAS
1400  5349 D5           	PUSH DE
1401  534A              	; comma
1402  534A CD D0 4F     	CALL CHKCHAR
1403  534D 2C           	DB ','
1404  534E              	; get sfx address
1405  534E DD 21 1C 52  	LD IX, GETBYT
1406  5352 CD 59 01     	CALL CALBAS
1407  5355 D5           	PUSH DE
1408  5356              	; comma
1409  5356 CD D0 4F     	CALL CHKCHAR
1410  5359 2C           	DB ','
1411  535A              	; get inverted volume
1412  535A DD 21 1C 52  	LD IX, GETBYT
1413  535E CD 59 01     	CALL CALBAS
1414  5361 D5           	PUSH DE
1415  5362              	; ending )
1416  5362 CD D0 4F     	CALL CHKCHAR
1417  5365 29           	DB ')'
1418  5366
1419  5366 3A F5 4C     	LD A, (SOUND_ENABLED)
1420  5369 B7           	OR A
1421  536A 20 05        	JR NZ, .L1
1422  536C              	; sound disabled, throw illegal function call
1423  536C 1E 05        	LD E, 5
1424  536E C3 E8 4F     	JP THROW_ERROR
1425  5371              .L1:
1426  5371 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1427  5374 B7           	OR A
1428  5375 20 05        	JR NZ, .L2
1429  5377              	; sfx data not initialized, throw out of data
1430  5377 1E 04        	LD E, 4
1431  5379 C3 E8 4F     	JP THROW_ERROR
1432  537C              .L2:
1433  537C              	; pop  parameters and store away for later
1434  537C D1           	POP DE ; inverted volume
1435  537D 43           	LD B, E
1436  537E D1           	POP DE ; channel
1437  537F 4B           	LD C, E
1438  5380 D1           	POP DE
1439  5381 7B           	LD A, E
1440  5382 08           	EX AF, AF'
1441  5383 E5           	PUSH HL ; basic text location
1442  5384 D9           	EXX
1443  5385 AF               XOR A
1444  5386 CD C4 4D         CALL GET_PAGE_INFO
1445  5389 C5               PUSH BC
1446  538A D5               PUSH DE
1447  538B 3A 41 F3         LD A, (RAMAD0)
1448  538E 26 00            LD H, 0
1449  5390 CD 0A 4E         CALL LOCAL_ENASLT
1450  5393 D9           	EXX
1451  5394 08           	EX AF, AF'
1452  5395 CD 1F 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1453  5398
1454  5398 D1               POP DE
1455  5399 C1               POP BC
1456  539A CD FB 4D         CALL RESTORE_PAGE_INFO
1457  539D
1458  539D E1           	POP HL
1459  539E C9           	RET
1460  539F              ; *******************************************************************************************************
1461  539F
1462  539F              ; *******************************************************************************************************
1463  539F              ; function to handle CALL SPRATRINI basic extension
1464  539F              ; initializes sprites handler
1465  539F              ; _SPRATRINI ( INT sprites_attributes_data,
1466  539F              ;			   INT update_variable_location )
1467  539F              ; expects both locations to be in range #8000+ or throws an error
1468  539F              ; since these should be BASIC variables
1469  539F              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA
1470  539F              SPRATRINI:
1471  539F              	; opening (
1472  539F CD D0 4F     	CALL CHKCHAR
1473  53A2 28           	DB '('
1474  53A3              	; get address of sprite attribute table DIM SA%(3,31)
1475  53A3 DD 21 2F 54  	LD IX, FRMQNT
1476  53A7 CD 59 01     	CALL CALBAS
1477  53AA D5           	PUSH DE
1478  53AB              	; comma
1479  53AB CD D0 4F     	CALL CHKCHAR
1480  53AE 2C           	DB ','
1481  53AF              	; get update variable location SU%
1482  53AF DD 21 2F 54  	LD IX, FRMQNT
1483  53B3 CD 59 01     	CALL CALBAS
1484  53B6 D5           	PUSH DE
1485  53B7              	; ending )
1486  53B7 CD D0 4F     	CALL CHKCHAR
1487  53BA 29           	DB ')'
1488  53BB
1489  53BB D1           	POP DE ; update variable location
1490  53BC CB 7A        	BIT 7, D ; is address >= &h8000
1491  53BE 20 05        	JR NZ, .L1
1492  53C0 1E 05        	LD E, 5 ; illegal function call
1493  53C2 C3 E8 4F     	JP THROW_ERROR
1494  53C5              .L1:
1495  53C5 ED 53 F7 4C  	LD (SPRATR_UPDATE_FLAG), DE
1496  53C9 D1           	POP DE ; address of sprite attribute table
1497  53CA CB 7A        	BIT 7, D ; is address >= &h8000
1498  53CC 20 05        	JR NZ, .L2
1499  53CE 1E 05        	LD E, 5 ; illegal function call
1500  53D0 C3 E8 4F     	JP THROW_ERROR
1501  53D3              .L2:
1502  53D3 ED 53 F9 4C  	LD (SPRATR_DATA), DE
1503  53D7 3E 01        	LD A, 1
1504  53D9 32 F6 4C     	LD (SPRATR_INIT_STATUS), A
1505  53DC C9           	RET
1506  53DD              ; *******************************************************************************************************
1507  53DD
1508  53DD              EXT_END:
1509  53DD
# file closed: asm\main.asm
