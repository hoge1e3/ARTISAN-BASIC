# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; DEFINE EXCLUDE_SOUND_PLAYER
   4  4000              ; DEFINE EXCLUDE_RAM_CMDS
   5  4000              ; DEFINE EXCLUDE_VRAM_CMDS
   6  4000              ; DEFINE EXCLUDE_BLIT_CMDS
   7  4000              ; DEFINE EXCLUDE_SPRITE_CMDS
   8  4000              ; DEFINE EXCLUDE_GENCAL
   9  4000
  10  4000              CHPUT   EQU     #A2
  11  4000              CALBAS	EQU		#159
  12  4000              ERRHAND EQU     #406F
  13  4000              FRMEVL  EQU     #4C64
  14  4000              FRESTR	EQU		#67D0
  15  4000              ; FRMQNT = formula quantificator
  16  4000              ; input HL=pointer to current program expression
  17  4000              ; output HL=next address
  18  4000              ; output DE=integer datum
  19  4000              FRMQNT	EQU		#542F
  20  4000              ; GETBYT = get byte parameter
  21  4000              ; input HL=pointer to current program expression
  22  4000              ; output HL=next address
  23  4000              ; output A=E=byte read
  24  4000              GETBYT	EQU		#521C
  25  4000              CHRGTR  EQU     #4666
  26  4000              SYNCHR	EQU		#558C
  27  4000              VALTYP  EQU     #F663
  28  4000              USR     EQU     #F7F8
  29  4000              PROCNM	EQU		#FD89
  30  4000              BIOS_FILVRM  EQU     #56
  31  4000              CLIKSW	EQU		#F3DB
  32  4000              ATRBAS	EQU		#F928
  33  4000
  34  4000              RAMAD0	EQU	0F341h	; Main-RAM Slot (00000h~03FFFh)
  35  4000              RAMAD1	EQU	0F342h	; Main-RAM Slot (04000h~07FFFh)
  36  4000              RAMAD2	EQU	0F343h	; Main-RAM Slot (08000h~0BFFFh)
  37  4000              RAMAD3	EQU	0F344h	; Main-RAM Slot (0C000h~0FFFFh)
  38  4000              EXPTBL	EQU #FCC1
  39  4000              SCRMOD	EQU #FCAF ; current screen mode
  40  4000
  41  4000              ; BASIC error codes
  42  4000              ;01 NEXT without FOR
  43  4000              ;02 Syntax error
  44  4000              ;03 RETURN without GOSUB
  45  4000              ;04 Out of DATA
  46  4000              ;05 Illegal function call
  47  4000              ;06 Overflow
  48  4000              ;07 Out of memory
  49  4000              ;08 Undefined line number
  50  4000              ;09 Subscript out of range
  51  4000              ;10 Redimensioned array
  52  4000              ;11 Division by zero
  53  4000              ;12 Illegal direct
  54  4000              ;13 Type mismatch
  55  4000              ;14 Out of string space
  56  4000              ;15 String too long
  57  4000              ;16 String formula too complex
  58  4000              ;17 Can't CONTINUE
  59  4000              ;18 Undefined user function
  60  4000              ;19 Device I/O error
  61  4000              ;20 Verify error
  62  4000              ;21 No RESUME
  63  4000              ;22 RESUME without error
  64  4000              ;23 Unprintable error
  65  4000              ;24 Missing operand
  66  4000              ;25 Line buffer overflow
  67  4000              ;50 FIELD overflow
  68  4000              ;51 Internal error
  69  4000              ;52 Bad file number
  70  4000              ;53 File not found
  71  4000              ;54 File already open
  72  4000              ;55 Input past end
  73  4000              ;56 Bad file name
  74  4000              ;57 Direct statement in file
  75  4000              ;58 Sequential I/O only
  76  4000              ;59 File not OPEN
  77  4000
  78  4000
  79  4000               ; simulate cartridge with BASIC extension
  80  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  80  4004 80 4F 00 00
  80  4008 00 00 00 00
  80  400C 00 00 00 00
  81  4010
  82  4010              ; this location #400A stores last location used by basic extension
  83  4010              ; free memory after that point
  84  4010 02 58         DW EXT_END
  85  4012
  86  4012              ; binary included AKG player compiled at #4012
  87  4012               IFNDEF EXCLUDE_SOUND_PLAYER
  88  4012              	INCBIN "bin/AKG.bin"
  89  4CEE              	INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CEE              MAIN_PLAYER_START EQU 04012H
   2+ 4CEE              PLY_AKG_START EQU 04012H
   3+ 4CEE              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401BH
   4+ 4CEE              PLY_AKG_INITSOUNDEFFECTS EQU 0401BH
   5+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 0401FH
   6+ 4CEE              PLY_AKG_PLAYSOUNDEFFECT EQU 0401FH
   7+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04020H
   8+ 4CEE              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04020H
   9+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04047H
  10+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04047H
  11+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04055H
  12+ 4CEE              PLY_AKG_PSES_PLAY EQU 0408EH
  13+ 4CEE              PLY_AKG_PSES_READFIRSTBYTE EQU 04097H
  14+ 4CEE              PLY_AKG_PSES_S_ENDORLOOP EQU 040AFH
  15+ 4CEE              PLY_AKG_PSES_S_LOOP EQU 040BAH
  16+ 4CEE              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C0H
  17+ 4CEE              PLY_AKG_PSES_NOTREACHED EQU 040D3H
  18+ 4CEE              PLY_AKG_PSES_HARDWAREONLY EQU 040D7H
  19+ 4CEE              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040DEH
  20+ 4CEE              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F0H
  21+ 4CEE              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FAH
  22+ 4CEE              PLY_AKG_PSES_H_AFTERRETRIG EQU 04104H
  23+ 4CEE              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 04118H
  24+ 4CEE              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411DH
  25+ 4CEE              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04125H
  26+ 4CEE              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04130H
  27+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413CH
  28+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 0413EH
  29+ 4CEE              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04144H
  30+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 04148H
  31+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 04148H
  32+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414AH
  33+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414AH
  34+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414AH
  35+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414BH
  36+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414CH
  37+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04150H
  38+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04150H
  39+ 4CEE              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04150H
  40+ 4CEE              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 04158H
  41+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04160H
  42+ 4CEE              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04160H
  43+ 4CEE              PLY_AKG_INIT EQU 04160H
  44+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04160H
  45+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 0418EH
  46+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A2H
  47+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B4H
  48+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D3H
  49+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E0H
  50+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL EQU 041E6H
  51+ 4CEE              PLY_AKG_INITTABLE0 EQU 041E9H
  52+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041E9H
  53+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04203H
  54+ 4CEE              PLY_AKG_INITTABLE0_END EQU 04203H
  55+ 4CEE              PLY_AKG_INITTABLE1 EQU 04203H
  56+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04203H
  57+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04207H
  58+ 4CEE              PLY_AKG_INITTABLE1_END EQU 04207H
  59+ 4CEE              PLY_AKG_INITTABLEORA EQU 04207H
  60+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04207H
  61+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 0421FH
  62+ 4CEE              PLY_AKG_INITTABLEORA_END EQU 0421FH
  63+ 4CEE              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 0421FH
  64+ 4CEE              PLY_AKG_STOP EQU 0421FH
  65+ 4CEE              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04231H
  66+ 4CEE              PLY_AKG_PLAY EQU 04231H
  67+ 4CEE              PLY_AKG_TICKDECREASINGCOUNTER EQU 04239H
  68+ 4CEE              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 0423FH
  69+ 4CEE              PLY_AKG_READLINKER EQU 04244H
  70+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04244H
  71+ 4CEE              PLY_AKG_READLINKER_PTLINKER EQU 04244H
  72+ 4CEE              PLY_AKG_READLINKER_NOLOOP EQU 0424FH
  73+ 4CEE              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 04288H
  74+ 4CEE              PLY_AKG_READLINE EQU 0428BH
  75+ 4CEE              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428BH
  76+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04291H
  77+ 4CEE              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04291H
  78+ 4CEE              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 0429EH
  79+ 4CEE              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A2H
  80+ 4CEE              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A5H
  81+ 4CEE              PLY_AKG_SPEEDTRACK_END EQU 042A8H
  82+ 4CEE              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042A8H
  83+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042AEH
  84+ 4CEE              PLY_AKG_EVENTTRACK_PTTRACK EQU 042AEH
  85+ 4CEE              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BBH
  86+ 4CEE              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042BFH
  87+ 4CEE              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C2H
  88+ 4CEE              PLY_AKG_EVENTTRACK_END EQU 042C5H
  89+ 4CEE              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C5H
  90+ 4CEE              PLY_AKG_CHANNEL1_READTRACK EQU 042D1H
  91+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D1H
  92+ 4CEE              PLY_AKG_CHANNEL1_PTTRACK EQU 042D1H
  93+ 4CEE              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042ECH
  94+ 4CEE              PLY_AKG_CHANNEL1_WAIT EQU 042F7H
  95+ 4CEE              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 042FEH
  96+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 042FEH
  97+ 4CEE              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 042FEH
  98+ 4CEE              PLY_AKG_CHANNEL1_NOTE EQU 04307H
  99+ 4CEE              PLY_AKG_BASENOTEINDEX EQU 04307H
 100+ 4CEE              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 04309H
 101+ 4CEE              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 04309H
 102+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 04319H
 103+ 4CEE              PLY_AKG_INSTRUMENTSTABLE EQU 04319H
 104+ 4CEE              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432BH
 105+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433BH
 106+ 4CEE              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04363H
 107+ 4CEE              PLY_AKG_CHANNEL1_READCELLEND EQU 04366H
 108+ 4CEE              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04366H
 109+ 4CEE              PLY_AKG_CHANNEL2_READTRACK EQU 04372H
 110+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04372H
 111+ 4CEE              PLY_AKG_CHANNEL2_PTTRACK EQU 04372H
 112+ 4CEE              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438DH
 113+ 4CEE              PLY_AKG_CHANNEL2_WAIT EQU 04398H
 114+ 4CEE              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 0439FH
 115+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 0439FH
 116+ 4CEE              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 0439FH
 117+ 4CEE              PLY_AKG_CHANNEL2_NOTE EQU 043A8H
 118+ 4CEE              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043ADH
 119+ 4CEE              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043ADH
 120+ 4CEE              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043CFH
 121+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043DFH
 122+ 4CEE              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04407H
 123+ 4CEE              PLY_AKG_CHANNEL2_READCELLEND EQU 0440AH
 124+ 4CEE              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440AH
 125+ 4CEE              PLY_AKG_CHANNEL3_READTRACK EQU 04416H
 126+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04416H
 127+ 4CEE              PLY_AKG_CHANNEL3_PTTRACK EQU 04416H
 128+ 4CEE              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04431H
 129+ 4CEE              PLY_AKG_CHANNEL3_WAIT EQU 0443CH
 130+ 4CEE              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04443H
 131+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04443H
 132+ 4CEE              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04443H
 133+ 4CEE              PLY_AKG_CHANNEL3_NOTE EQU 0444CH
 134+ 4CEE              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04451H
 135+ 4CEE              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04451H
 136+ 4CEE              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04473H
 137+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04483H
 138+ 4CEE              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ABH
 139+ 4CEE              PLY_AKG_CHANNEL3_READCELLEND EQU 044AEH
 140+ 4CEE              PLY_AKG_CURRENTSPEED EQU 044AEH
 141+ 4CEE              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B0H
 142+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B3H
 143+ 4CEE              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B3H
 144+ 4CEE              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B6H
 145+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044B9H
 146+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044B9H
 147+ 4CEE              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C5H
 148+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CCH
 149+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044CFH
 150+ 4CEE              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D5H
 151+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044D8H
 152+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044D8H
 153+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E6H
 154+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EBH
 155+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F6H
 156+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044F9H
 157+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044F9H
 158+ 4CEE              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FCH
 159+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 044FFH
 160+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE EQU 044FFH
 161+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 04508H
 162+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04512H
 163+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04515H
 164+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04515H
 165+ 4CEE              PLY_AKG_CHANNEL1_PITCH EQU 04515H
 166+ 4CEE              PLY_AKG_CHANNEL1_ISPITCH EQU 04518H
 167+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451DH
 168+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451DH
 169+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04521H
 170+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04523H
 171+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04525H
 172+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452CH
 173+ 4CEE              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452DH
 174+ 4CEE              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04530H
 175+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04530H
 176+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454CH
 177+ 4CEE              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454CH
 178+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 04559H
 179+ 4CEE              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455DH
 180+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456DH
 181+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456DH
 182+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 0456EH
 183+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 0456FH
 184+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04571H
 185+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04571H
 186+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04571H
 187+ 4CEE              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04572H
 188+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04573H
 189+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04575H
 190+ 4CEE              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04575H
 191+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04575H
 192+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04575H
 193+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04575H
 194+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_END EQU 04578H
 195+ 4CEE              PLY_AKG_CHANNEL1_PITCH_END EQU 0457AH
 196+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04582H
 197+ 4CEE              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04582H
 198+ 4CEE              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04585H
 199+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 04588H
 200+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 04588H
 201+ 4CEE              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04594H
 202+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459BH
 203+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 0459EH
 204+ 4CEE              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A4H
 205+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A7H
 206+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A7H
 207+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B5H
 208+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BAH
 209+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C5H
 210+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045C8H
 211+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045C8H
 212+ 4CEE              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CBH
 213+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045CEH
 214+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045CEH
 215+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D7H
 216+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E1H
 217+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E4H
 218+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E4H
 219+ 4CEE              PLY_AKG_CHANNEL2_PITCH EQU 045E4H
 220+ 4CEE              PLY_AKG_CHANNEL2_ISPITCH EQU 045E7H
 221+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045ECH
 222+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045ECH
 223+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F0H
 224+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F2H
 225+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F4H
 226+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FBH
 227+ 4CEE              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FCH
 228+ 4CEE              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 045FFH
 229+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 045FFH
 230+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461BH
 231+ 4CEE              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461BH
 232+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 04628H
 233+ 4CEE              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462CH
 234+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463CH
 235+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463CH
 236+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463DH
 237+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 0463EH
 238+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04640H
 239+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04640H
 240+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04640H
 241+ 4CEE              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04641H
 242+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04642H
 243+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04644H
 244+ 4CEE              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04644H
 245+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04644H
 246+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04644H
 247+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04644H
 248+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_END EQU 04647H
 249+ 4CEE              PLY_AKG_CHANNEL2_PITCH_END EQU 04649H
 250+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04651H
 251+ 4CEE              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04651H
 252+ 4CEE              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04654H
 253+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04657H
 254+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04657H
 255+ 4CEE              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04663H
 256+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466AH
 257+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466DH
 258+ 4CEE              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04673H
 259+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04676H
 260+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04676H
 261+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04684H
 262+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 04689H
 263+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04694H
 264+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04697H
 265+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04697H
 266+ 4CEE              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469AH
 267+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469DH
 268+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469DH
 269+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A6H
 270+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B0H
 271+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B3H
 272+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B3H
 273+ 4CEE              PLY_AKG_CHANNEL3_PITCH EQU 046B3H
 274+ 4CEE              PLY_AKG_CHANNEL3_ISPITCH EQU 046B6H
 275+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BBH
 276+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BBH
 277+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046BFH
 278+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C1H
 279+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C3H
 280+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CAH
 281+ 4CEE              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CBH
 282+ 4CEE              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046CEH
 283+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046CEH
 284+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046EAH
 285+ 4CEE              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046EAH
 286+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F7H
 287+ 4CEE              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FBH
 288+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470BH
 289+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470BH
 290+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470CH
 291+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470DH
 292+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 0470FH
 293+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 0470FH
 294+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 0470FH
 295+ 4CEE              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04710H
 296+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04711H
 297+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04713H
 298+ 4CEE              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04713H
 299+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04713H
 300+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04713H
 301+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04713H
 302+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_END EQU 04716H
 303+ 4CEE              PLY_AKG_CHANNEL3_PITCH_END EQU 04718H
 304+ 4CEE              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04724H
 305+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04724H
 306+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04724H
 307+ 4CEE              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04727H
 308+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 04729H
 309+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 0472FH
 310+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04732H
 311+ 4CEE              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04732H
 312+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04735H
 313+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 0473EH
 314+ 4CEE              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04746H
 315+ 4CEE              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04753H
 316+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04753H
 317+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04753H
 318+ 4CEE              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04756H
 319+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 04758H
 320+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 0475EH
 321+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04761H
 322+ 4CEE              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04761H
 323+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04764H
 324+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476DH
 325+ 4CEE              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04775H
 326+ 4CEE              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04783H
 327+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04783H
 328+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04783H
 329+ 4CEE              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04786H
 330+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 04788H
 331+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 0478EH
 332+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04791H
 333+ 4CEE              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04791H
 334+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04794H
 335+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479DH
 336+ 4CEE              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A5H
 337+ 4CEE              PLY_AKG_SENDPSGREGISTERS EQU 047B4H
 338+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BCH
 339+ 4CEE              PLY_AKG_PSGREG01_INSTR EQU 047BCH
 340+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CCH
 341+ 4CEE              PLY_AKG_PSGREG23_INSTR EQU 047CCH
 342+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DDH
 343+ 4CEE              PLY_AKG_PSGREG45_INSTR EQU 047DDH
 344+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047EEH
 345+ 4CEE              PLY_AKG_PSGREG6_8_INSTR EQU 047EEH
 346+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 047FFH
 347+ 4CEE              PLY_AKG_PSGREG9_10_INSTR EQU 047FFH
 348+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04810H
 349+ 4CEE              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04810H
 350+ 4CEE              PLY_AKG_PSGREG13_OLDVALUE EQU 04825H
 351+ 4CEE              PLY_AKG_RETRIG EQU 04827H
 352+ 4CEE              PLY_AKG_PSGREG13_INSTR EQU 04829H
 353+ 4CEE              PLY_AKG_PSGREG13_END EQU 04838H
 354+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 04838H
 355+ 4CEE              PLY_AKG_SAVESP EQU 04838H
 356+ 4CEE              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483CH
 357+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTS EQU 04844H
 358+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04851H
 359+ 4CEE              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04851H
 360+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTS EQU 04859H
 361+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04866H
 362+ 4CEE              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04866H
 363+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTS EQU 0486EH
 364+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 04879H
 365+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS EQU 04879H
 366+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 04888H
 367+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 04888H
 368+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 0488FH
 369+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 0489FH
 370+ 4CEE              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 0489FH
 371+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A6H
 372+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A6H
 373+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048A9H
 374+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B2H
 375+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B2H
 376+ 4CEE              PLY_AKG_READINSTRUMENTCELL EQU 048B8H
 377+ 4CEE              PLY_AKG_NOSOFTNOHARD EQU 048C5H
 378+ 4CEE              PLY_AKG_NSNH_NONOISE EQU 048DAH
 379+ 4CEE              PLY_AKG_SOFT EQU 048DDH
 380+ 4CEE              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E4H
 381+ 4CEE              PLY_AKG_S_NOTSIMPLE EQU 048ECH
 382+ 4CEE              PLY_AKG_S_AFTERSIMPLETEST EQU 048EFH
 383+ 4CEE              PLY_AKG_HARDTOSOFT EQU 048FCH
 384+ 4CEE              PLY_AKG_HS_JUMPRATIO EQU 04907H
 385+ 4CEE              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04934H
 386+ 4CEE              PLY_AKG_ENDWITHOUTLOOP EQU 04936H
 387+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04936H
 388+ 4CEE              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04936H
 389+ 4CEE              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 0493EH
 390+ 4CEE              PLY_AKG_SH_JUMPRATIO EQU 0494BH
 391+ 4CEE              PLY_AKG_SH_JUMPRATIOEND EQU 0496CH
 392+ 4CEE              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497BH
 393+ 4CEE              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04981H
 394+ 4CEE              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499BH
 395+ 4CEE              PLY_AKG_H_RETRIGEND EQU 049ADH
 396+ 4CEE              PLY_AKG_H_AFTERRETRIG EQU 049AEH
 397+ 4CEE              PLY_AKG_ENDWITHLOOP EQU 049C0H
 398+ 4CEE              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C7H
 399+ 4CEE              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DDH
 400+ 4CEE              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EBH
 401+ 4CEE              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FBH
 402+ 4CEE              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A09H
 403+ 4CEE              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A18H
 404+ 4CEE              PLY_AKG_SHOHS_RETRIGEND EQU 04A27H
 405+ 4CEE              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A28H
 406+ 4CEE              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3AH
 407+ 4CEE              PLY_AKG_EFFECTTABLE EQU 04A48H
 408+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A48H
 409+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6CH
 410+ 4CEE              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6CH
 411+ 4CEE              PLY_AKG_EFFECT_RESET EQU 04A6FH
 412+ 4CEE              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A71H
 413+ 4CEE              PLY_AKG_EFFECT_VOLUME EQU 04A8CH
 414+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A98H
 415+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04A9EH
 416+ 4CEE              PLY_AKG_ARPEGGIOSTABLE EQU 04A9EH
 417+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC5H
 418+ 4CEE              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACCH
 419+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD2H
 420+ 4CEE              PLY_AKG_PITCHESTABLE EQU 04AD2H
 421+ 4CEE              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AF9H
 422+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B00H
 423+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B11H
 424+ 4CEE              PLY_AKG_EFFECT_PITCHDOWN EQU 04B18H
 425+ 4CEE              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B28H
 426+ 4CEE              PLY_AKG_EFFECT_PITCHUP EQU 04B3DH
 427+ 4CEE              PLY_AKG_EFFECT_PITCHSTOP EQU 04B4FH
 428+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B56H
 429+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B80H
 430+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B80H
 431+ 4CEE              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B99H
 432+ 4CEE              PLY_AKG_EFFECT_GLIDESPEED EQU 04B99H
 433+ 4CEE              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BABH
 434+ 4CEE              PLY_AKG_EFFECT_LEGATO EQU 04BC1H
 435+ 4CEE              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD5H
 436+ 4CEE              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDDH
 437+ 4CEE              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE5H
 438+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEDH
 439+ 4CEE              PLY_AKG_EVENT EQU 04BEDH
 440+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BEEH
 441+ 4CEE              PLY_AKG_PERIODTABLE EQU 04BEEH
 442+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BEEH
 443+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CEEH
 444+ 4CEE              PLY_AKG_PERIODTABLE_END EQU 04CEEH
 445+ 4CEE              PLY_AKG_END EQU 04CEEH
 446+ 4CEE              MAIN_PLAYER_END EQU 04CEEH
 447+ 4CEE              TESTEREND EQU 04CEEH
 448+ 4CEE
# file closed: ./symbol/AKG.sym
  90  4CEE               ENDIF
  91  4CEE
  92  4CEE              ORIG.HTIMI:
  93  4CEE 00 00 00 00  	DB 0, 0, 0, 0, 0
  93  4CF2 00
  94  4CF3               EXPORT ORIG.HTIMI
  95  4CF3
  96  4CF3               IFNDEF EXCLUDE_SOUND_PLAYER
  97  4CF3              MUSIC_INIT_STATUS:
  98  4CF3 00            DB 0
  99  4CF4              SFX_INIT_STATUS:
 100  4CF4 00            DB 0
 101  4CF5              SOUND_ENABLED:
 102  4CF5 00            DB 0
 103  4CF6               ENDIF
 104  4CF6
 105  4CF6               IFNDEF EXCLUDE_SPRITE_CMDS
 106  4CF6              SPRATR_INIT_STATUS:
 107  4CF6 00            DB 0
 108  4CF7              SPRATR_UPDATE_FLAG:
 109  4CF7 00 00         DW 0
 110  4CF9              SPRATR_DATA:
 111  4CF9 00 00         DW 0
 112  4CFB              SPRFLICKER_ENABLED:
 113  4CFB 00            DB 0
 114  4CFC              ; to support sprite flicker
 115  4CFC              FLICKER:
 116  4CFC 00            DB 0
 117  4CFD               ENDIF
 118  4CFD
 119  4CFD              ; to temporarily store stack pointer
 120  4CFD              TMPSP:
 121  4CFD 00 00         DW 0
 122  4CFF
 123  4CFF              ; temp variables for BLIT, TILE functions
 124  4CFF               IFNDEF EXCLUDE_BLIT_CMDS
 125  4CFF              TILETMP1:
 126  4CFF              BLIT_TMP1:
 127  4CFF 00 00         DW 0
 128  4D01              TILETMP2:
 129  4D01              BLIT_TMP2:
 130  4D01 00 00         DW 0
 131  4D03               ENDIF
 132  4D03
 133  4D03              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 134  4D03              ; per starting letter, if no commands with this letter, NULL value
 135  4D03              CMDS:
 136  4D03 00 00            DW 0 ; A
 137  4D05 BF 4D            DW CMDS_B ; B
 138  4D07 00 00            DW 0 ; C
 139  4D09 00 00            DW 0 ; D
 140  4D0B 00 00            DW 0 ; E
 141  4D0D 4A 4D            DW CMDS_F; F
 142  4D0F 5D 4D            DW CMDS_G; G
 143  4D11 00 00            DW 0 ; H
 144  4D13 00 00            DW 0 ; I
 145  4D15 00 00            DW 0 ; J
 146  4D17 00 00            DW 0 ; K
 147  4D19 00 00            DW 0 ; L
 148  4D1B 37 4D            DW CMDS_M ; M
 149  4D1D 00 00            DW 0 ; N
 150  4D1F 00 00            DW 0 ; O
 151  4D21 00 00            DW 0 ; P
 152  4D23 00 00            DW 0 ; Q
 153  4D25 00 00            DW 0 ; R
 154  4D27 71 4D            DW CMDS_S ; S
 155  4D29 DF 4D            DW CMDS_T ; T
 156  4D2B 00 00            DW 0 ; U
 157  4D2D 67 4D            DW CMDS_V ; V
 158  4D2F 00 00            DW 0 ; W
 159  4D31 00 00            DW 0 ; X
 160  4D33 00 00            DW 0 ; Y
 161  4D35 00 00            DW 0 ; Z
 162  4D37
 163  4D37              CMDS_M:
 164  4D37               IFNDEF EXCLUDE_VRAM_CMDS
 165  4D37 4D 45 4D 56      DB "MEMVRM", 0
 165  4D3B 52 4D 00
 166  4D3E 48 51            DW MEMVRM
 167  4D40               ENDIF
 168  4D40               IFNDEF EXCLUDE_RAM_CMDS
 169  4D40 4D 45 4D 43  	DB "MEMCPY", 0
 169  4D44 50 59 00
 170  4D47 07 50        	DW MEMCPY
 171  4D49               ENDIF
 172  4D49 00           	DB 0
 173  4D4A              CMDS_F:
 174  4D4A               IFNDEF EXCLUDE_VRAM_CMDS
 175  4D4A 46 49 4C 56      DB "FILVRM", 0
 175  4D4E 52 4D 00
 176  4D51 4A 50            DW FILVRM
 177  4D53               ENDIF
 178  4D53               IFNDEF EXCLUDE_RAM_CMDS
 179  4D53 46 49 4C 52      DB "FILRAM", 0
 179  4D57 41 4D 00
 180  4D5A 91 50            DW FILRAM
 181  4D5C               ENDIF
 182  4D5C 00               DB 0
 183  4D5D              CMDS_G:
 184  4D5D               IFNDEF EXCLUDE_GENCAL
 185  4D5D 47 45 4E 43      DB "GENCAL", 0
 185  4D61 41 4C 00
 186  4D64 EF 50            DW GENCAL
 187  4D66               ENDIF
 188  4D66 00           	DB	0
 189  4D67              CMDS_V:
 190  4D67               IFNDEF EXCLUDE_VRAM_CMDS
 191  4D67 56 52 4D 4D  	DB "VRMMEM", 0
 191  4D6B 45 4D 00
 192  4D6E C1 51        	DW VRMMEM
 193  4D70               ENDIF
 194  4D70 00           	DB 0
 195  4D71              CMDS_S:
 196  4D71               IFNDEF EXCLUDE_SPRITE_CMDS
 197  4D71 53 50 52 53  	DB "SPRSET", 0
 197  4D75 45 54 00
 198  4D78 A9 53        	DW SPRSET
 199  4D7A 53 50 52 47  	DB "SPRGRPMOV", 0
 199  4D7E 52 50 4D 4F
 199  4D82 56 00
 200  4D84 67 54        	DW SPRGRPMOV
 201  4D86               ENDIF
 202  4D86               IFNDEF EXCLUDE_SOUND_PLAYER
 203  4D86 53 4E 44 53  	DB "SNDSFX", 0
 203  4D8A 46 58 00
 204  4D8D FF 52        	DW SNDSFX
 205  4D8F 53 4E 44 50  	DB "SNDPLYON", 0
 205  4D93 4C 59 4F 4E
 205  4D97 00
 206  4D98 C9 52        	DW SNDPLYON
 207  4D9A 53 4E 44 50  	DB "SNDPLYOFF", 0
 207  4D9E 4C 59 4F 46
 207  4DA2 46 00
 208  4DA4 DC 52        	DW SNDPLYOFF
 209  4DA6 53 4E 44 50  	DB "SNDPLYINI", 0
 209  4DAA 4C 59 49 4E
 209  4DAE 49 00
 210  4DB0 7F 52        	DW SNDPLYINIT
 211  4DB2               ENDIF
 212  4DB2               IFNDEF EXCLUDE_SPRITE_CMDS
 213  4DB2 53 50 52 41  	DB "SPRATRINI", 0
 213  4DB6 54 52 49 4E
 213  4DBA 49 00
 214  4DBC 59 53        	DW SPRATRINI
 215  4DBE               ENDIF
 216  4DBE 00           	DB 0
 217  4DBF              CMDS_B:
 218  4DBF               IFNDEF EXCLUDE_BLIT_CMDS
 219  4DBF 42 4C 49 54  	DB "BLIT", 0
 219  4DC3 00
 220  4DC4 65 56        	DW BLIT
 221  4DC6 42 4F 58 4D  	DB "BOXMEMCPY", 0
 221  4DCA 45 4D 43 50
 221  4DCE 59 00
 222  4DD0 89 57        	DW BOXMEMCPY
 223  4DD2 42 4F 58 4D  	DB "BOXMEMVRM", 0
 223  4DD6 45 4D 56 52
 223  4DDA 4D 00
 224  4DDC BD 57        	DW BOXMEMVRM
 225  4DDE               ENDIF
 226  4DDE 00           	DB 0
 227  4DDF              CMDS_T:
 228  4DDF               IFNDEF EXCLUDE_BLIT_CMDS
 229  4DDF 54 49 4C 45  	DB "TILERAM", 0
 229  4DE3 52 41 4D 00
 230  4DE7 D2 56        	DW TILERAM
 231  4DE9 54 49 4C 45  	DB "TILEVRM", 0
 231  4DED 56 52 4D 00
 232  4DF1 19 57        	DW TILEVRM
 233  4DF3               ENDIF
 234  4DF3 00           	DB 0
 235  4DF4
 236  4DF4              ; ****************************************************************************************************
 237  4DF4              ; function sets VRAM address
 238  4DF4              ; input HL=address
 239  4DF4              ; modifies AF
 240  4DF4              SETWRT_LOCAL:
 241  4DF4 7D           	LD	A, L
 242  4DF5 D3 99        	OUT	(099H), A
 243  4DF7 7C           	LD	A, H
 244  4DF8 E6 3F        	AND	03FH
 245  4DFA F6 40        	OR	040H
 246  4DFC D3 99        	OUT	(099H), A
 247  4DFE C9           	RET
 248  4DFF              ; ****************************************************************************************************
 249  4DFF
 250  4DFF              ; ****************************************************************************************************
 251  4DFF              ; function gets slot and subslot data for specific page
 252  4DFF              ; input A=page (0, 1 or 2)
 253  4DFF              ; output B = 0A8H register value
 254  4DFF              ; output D = 0 is no subslots, 1 if yes
 255  4DFF              ; output C = 0A8H value when page 3 slot equals to requested page slot
 256  4DFF              ; output E = subslot value if present
 257  4DFF              ; modifies AF, BC, DE, HL
 258  4DFF              GET_PAGE_INFO:
 259  4DFF 6F               LD L, A
 260  4E00 C6 C1            ADD A, low (EXPTBL)
 261  4E02 32 0C 4E         LD (GET_PAGE_INFO_L1+1), A
 262  4E05 DB A8            IN A, (0A8H)
 263  4E07 47               LD B, A
 264  4E08 E6 3F            AND 03FH
 265  4E0A 4F               LD C, A
 266  4E0B              GET_PAGE_INFO_L1:
 267  4E0B 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 268  4E0E E6 80            AND 080H
 269  4E10 28 1B            JR Z, GET_PAGE_INFO_L2
 270  4E12                  ; expanded
 271  4E12 2D               DEC L
 272  4E13 FA 32 4E         JP M, GET_PAGE_INFO_L3
 273  4E16 2D               DEC L
 274  4E17 FA 30 4E         JP M, GET_PAGE_INFO_L4
 275  4E1A                  ; page 2
 276  4E1A 07               RLCA
 277  4E1B 07               RLCA
 278  4E1C              GET_PAGE_INFO_L5:
 279  4E1C E6 C0            AND 0C0H
 280  4E1E B1               OR C
 281  4E1F D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 282  4E21 4F               LD C, A
 283  4E22 3A FF FF         LD A, (0FFFFH)
 284  4E25 2F               CPL
 285  4E26 5F               LD E, A
 286  4E27 16 01            LD D, 1
 287  4E29 78               LD A, B ; return stack
 288  4E2A D3 A8            OUT (0A8H), A
 289  4E2C C9               RET
 290  4E2D              GET_PAGE_INFO_L2:
 291  4E2D                  ; not expanded
 292  4E2D 16 00            LD D, 0
 293  4E2F C9               RET
 294  4E30              GET_PAGE_INFO_L4:
 295  4E30                  ; page 1
 296  4E30 0F               RRCA
 297  4E31 0F               RRCA
 298  4E32              GET_PAGE_INFO_L3:
 299  4E32                  ; page 0
 300  4E32 0F               RRCA
 301  4E33 0F               RRCA
 302  4E34 18 E6            JR GET_PAGE_INFO_L5
 303  4E36              ; ****************************************************************************************************
 304  4E36
 305  4E36              ; ****************************************************************************************************
 306  4E36              ; function returns original slot and subslot info
 307  4E36              ; input B = 0A8H register value
 308  4E36              ; input D = 0 is no subslots, 1 if yes
 309  4E36              ; input C = 0A8H value when page 3 slot equals to requested page slot
 310  4E36              ; input E = subslot value if present
 311  4E36              ; modifies AF, disables interrupts
 312  4E36              RESTORE_PAGE_INFO:
 313  4E36 7A               LD A, D
 314  4E37 B7               OR A
 315  4E38 28 08            JR Z, RESTORE_PAGE_INFO_L1
 316  4E3A 79               LD A, C
 317  4E3B F3           	DI
 318  4E3C D3 A8            OUT (0A8H), A
 319  4E3E 7B               LD A, E
 320  4E3F 32 FF FF         LD (0FFFFH), A
 321  4E42              RESTORE_PAGE_INFO_L1:
 322  4E42 78               LD A, B
 323  4E43 D3 A8            OUT (0A8H), A
 324  4E45 C9               RET
 325  4E46              ; ****************************************************************************************************
 326  4E46
 327  4E46              ; *******************************************************************************************************
 328  4E46              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 329  4E46              ; INPUT:  A = SLOT ID: EXXXSSPP
 330  4E46              ; E = EXPANDED FLAG
 331  4E46              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 332  4E46              ; PP = PRIMARY SLOT NUMBER
 333  4E46              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 334  4E46              ; CHANGES: AF, BC, DE
 335  4E46
 336  4E46              LOCAL_ENASLT:
 337  4E46 CD 66 4E         CALL L0353
 338  4E49 FA 53 4E         JP M, L0340
 339  4E4C DB A8            IN A, (0A8H)
 340  4E4E A1               AND C
 341  4E4F B0               OR B
 342  4E50 D3 A8            OUT (0A8H), A
 343  4E52 C9               RET
 344  4E53              L0340:
 345  4E53 E5               PUSH HL
 346  4E54 CD 8B 4E         CALL L0378
 347  4E57 4F               LD C, A
 348  4E58 06 00            LD B, 0
 349  4E5A 7D               LD A, L
 350  4E5B A4               AND H
 351  4E5C B2               OR D
 352  4E5D 21 C5 FC         LD HL, 0FCC5H
 353  4E60 09               ADD HL, BC
 354  4E61 77               LD (HL), A
 355  4E62 E1               POP HL
 356  4E63 79               LD A, C
 357  4E64 18 E0            JR LOCAL_ENASLT
 358  4E66              L0353:
 359  4E66 F3               DI
 360  4E67 F5               PUSH AF
 361  4E68 7C               LD A, H
 362  4E69 07               RLCA
 363  4E6A 07               RLCA
 364  4E6B E6 03            AND 3
 365  4E6D 5F               LD E, A
 366  4E6E 3E C0            LD A, 0C0H
 367  4E70              L035D:
 368  4E70 07               RLCA
 369  4E71 07               RLCA
 370  4E72 1D               DEC E
 371  4E73 F2 70 4E         JP P, L035D
 372  4E76 5F               LD E, A
 373  4E77 2F               CPL
 374  4E78 4F               LD C, A
 375  4E79 F1               POP AF
 376  4E7A F5               PUSH AF
 377  4E7B E6 03            AND 3
 378  4E7D 3C               INC A
 379  4E7E 47               LD B, A
 380  4E7F 3E AB            LD A, 0ABH
 381  4E81              L036E:
 382  4E81 C6 55            ADD A, 055H
 383  4E83 10 FC            DJNZ L036E
 384  4E85 57               LD D, A
 385  4E86 A3               AND E
 386  4E87 47               LD B, A
 387  4E88 F1               POP AF
 388  4E89 A7               AND A
 389  4E8A C9               RET
 390  4E8B              L0378:
 391  4E8B F5               PUSH AF
 392  4E8C 7A               LD A, D
 393  4E8D E6 C0            AND 0C0H
 394  4E8F 4F               LD C, A
 395  4E90 F1               POP AF
 396  4E91 F5               PUSH AF
 397  4E92 57               LD D, A
 398  4E93 DB A8            IN A, (0A8H)
 399  4E95 47               LD B, A
 400  4E96 E6 3F            AND 03FH
 401  4E98 B1               OR C
 402  4E99 D3 A8            OUT (0A8H), A
 403  4E9B 7A               LD A, D
 404  4E9C 0F               RRCA
 405  4E9D 0F               RRCA
 406  4E9E E6 03            AND 3
 407  4EA0 57               LD D, A
 408  4EA1 3E AB            LD A, 0ABH
 409  4EA3              L0390:
 410  4EA3 C6 55            ADD A, 055H
 411  4EA5 15               DEC D
 412  4EA6 F2 A3 4E         JP P, L0390
 413  4EA9 A3               AND E
 414  4EAA 57               LD D, A
 415  4EAB 7B               LD A, E
 416  4EAC 2F               CPL
 417  4EAD 67               LD H, A
 418  4EAE 3A FF FF         LD A, (0FFFFH)
 419  4EB1 2F               CPL
 420  4EB2 6F               LD L, A
 421  4EB3 A4               AND H
 422  4EB4 B2               OR D
 423  4EB5 32 FF FF         LD (0FFFFH), A
 424  4EB8 78               LD A, B
 425  4EB9 D3 A8            OUT (0A8H), A
 426  4EBB F1               POP AF
 427  4EBC E6 03            AND 3
 428  4EBE C9               RET
 429  4EBF              ; *******************************************************************************************************
 430  4EBF
 431  4EBF              ; *******************************************************************************************************
 432  4EBF              ; some common code to activate page 0 and place values needed to restore original page on stack
 433  4EBF              ; input IY=return address
 434  4EBF              ENABLE_PAGE0:
 435  4EBF AF               XOR A
 436  4EC0 CD FF 4D         CALL GET_PAGE_INFO
 437  4EC3 C5               PUSH BC
 438  4EC4 D5               PUSH DE
 439  4EC5 3A 41 F3         LD A, (RAMAD0)
 440  4EC8 26 00            LD H, 0
 441  4ECA CD 46 4E         CALL LOCAL_ENASLT
 442  4ECD FD E9        	JP (IY)
 443  4ECF              ; *******************************************************************************************************
 444  4ECF
 445  4ECF               IFNDEF EXCLUDE_SPRITE_CMDS
 446  4ECF              ; *******************************************************************************************************
 447  4ECF              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
 448  4ECF              ; struct {
 449  4ECF              ; DW y
 450  4ECF              ; DW x
 451  4ECF              ; DW pattern (0-31)
 452  4ECF              ; DW color
 453  4ECF              ; } [32]
 454  4ECF              ; will hide sprites whose location is outside of visible area
 455  4ECF              ; works in screen 1 and 2
 456  4ECF              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
 457  4ECF              ; modifies AF, AF', BC, DE, HL
 458  4ECF              SPRATR_UPDATE:
 459  4ECF              	; check if initialized
 460  4ECF 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
 461  4ED2 B7           	OR A
 462  4ED3 C8           	RET Z
 463  4ED4              	; check if update requested
 464  4ED4 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 465  4ED7 7E           	LD A, (HL)
 466  4ED8 B7           	OR A
 467  4ED9 C8           	RET Z
 468  4EDA              	; check screen mode
 469  4EDA 3A AF FC     	LD A, (SCRMOD)
 470  4EDD 3D           	DEC A
 471  4EDE 28 02        	JR Z, .L0 ; screen 1
 472  4EE0 3D           	DEC A
 473  4EE1 C0           	RET NZ ; not screen 2
 474  4EE2              .L0:
 475  4EE2 06 20        	LD B, 32 ; sprite number
 476  4EE4 0E 98        	LD C, #98 ; register for vdp data output
 477  4EE6              	; set VDP address
 478  4EE6 2A 28 F9     	LD HL, (ATRBAS)
 479  4EE9 3A FB 4C     	LD A, (SPRFLICKER_ENABLED)
 480  4EEC B7           	OR A
 481  4EED 28 03        	JR Z, .L3
 482  4EEF 3A FC 4C     	LD A, (FLICKER)
 483  4EF2              .L3:
 484  4EF2 5F           	LD E, A
 485  4EF3 08           	EX AF, AF'
 486  4EF4 7B           	LD A, E
 487  4EF5 87           	ADD A, A
 488  4EF6 87           	ADD A, A
 489  4EF7 16 00        	LD D, 0
 490  4EF9 5F           	LD E, A
 491  4EFA 19           	ADD HL, DE
 492  4EFB CD F4 4D     	CALL SETWRT_LOCAL
 493  4EFE ED 73 FD 4C  	LD (TMPSP), SP
 494  4F02 ED 7B F9 4C  	LD SP, (SPRATR_DATA)
 495  4F06
 496  4F06              .LOOP:
 497  4F06 E1           	POP HL
 498  4F07 24           	INC H
 499  4F08 28 0D        	JR Z, .L1 ; negative number above -256
 500  4F0A 25           	DEC H
 501  4F0B 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
 502  4F0D 7D           	LD A, L
 503  4F0E FE C0        	CP 192
 504  4F10 30 10        	JR NC, .OUT3
 505  4F12 3D           	DEC A ; due to VDP rule that top of screen is -1
 506  4F13 57           	LD D, A
 507  4F14 C3 32 4F     	JP .X
 508  4F17              .L1:
 509  4F17 7D           	LD A, L
 510  4F18 C6 10        	ADD 16
 511  4F1A FA 22 4F     	JP M, .OUT3 ; below -16
 512  4F1D 2D           	DEC L ; due to VDP rule that top of screen is -1
 513  4F1E 55           	LD D, L
 514  4F1F C3 32 4F     	JP .X
 515  4F22              .OUT3:
 516  4F22 E1           	POP HL ; skip x value
 517  4F23              .OUT2:
 518  4F23 E1           	POP HL ; skip pattern
 519  4F24 E1           	POP HL ; skip color
 520  4F25 3E D1        	LD A, #D1
 521  4F27 D3 98        	OUT (#98), A ; sprite hidden
 522  4F29 D3 98        	OUT (#98), A ; value unimportant
 523  4F2B D3 98        	OUT (#98), A ; value unimportant
 524  4F2D D3 98        	OUT (#98), A ; value unimportant
 525  4F2F C3 56 4F     	JP .NEXT
 526  4F32              .X:
 527  4F32 E1           	POP HL
 528  4F33 24           	INC H
 529  4F34 28 08        	JR Z, .L2
 530  4F36 25           	DEC H
 531  4F37 20 EA        	JR NZ, .OUT2
 532  4F39 1E 00        	LD E, 0 ; EC bit
 533  4F3B C3 47 4F     	JP .XY
 534  4F3E              .L2:
 535  4F3E 7D           	LD A, L
 536  4F3F C6 20        	ADD 32
 537  4F41 FA 23 4F     	JP M, .OUT2
 538  4F44 6F           	LD L, A
 539  4F45 1E 80        	LD E, #80
 540  4F47              .XY:
 541  4F47 ED 51        	OUT (C), D
 542  4F49 ED 69        	OUT (C), L
 543  4F4B E1           	POP HL ; pattern
 544  4F4C 7D           	LD A, L
 545  4F4D 87           	ADD A, A
 546  4F4E 87           	ADD A, A ; needs to go at 4x
 547  4F4F D3 98        	OUT (#98), A
 548  4F51 E1           	POP HL ; color
 549  4F52 7D           	LD A, L
 550  4F53 B3           	OR E
 551  4F54 D3 98        	OUT (#98), A
 552  4F56              .NEXT:
 553  4F56 08           	EX AF, AF'
 554  4F57 3C           	INC A
 555  4F58 E6 1F        	AND 31
 556  4F5A C2 6E 4F     	JP NZ, .NEXT2
 557  4F5D 08           	EX AF, AF'
 558  4F5E 2A 28 F9     	LD HL, (ATRBAS)
 559  4F61              	; CALL SETWRT_LOCAL not allowed as SP modified
 560  4F61 7D           	LD	A, L
 561  4F62 D3 99        	OUT	(099H), A
 562  4F64 7C           	LD	A, H
 563  4F65 E6 3F        	AND	03FH
 564  4F67 F6 40        	OR	040H
 565  4F69 D3 99        	OUT	(099H), A
 566  4F6B C3 6F 4F     	JP .NEXT3
 567  4F6E              .NEXT2:
 568  4F6E 08           	EX AF, AF'
 569  4F6F              .NEXT3:
 570  4F6F 10 95        	DJNZ .LOOP
 571  4F71 08           	EX AF, AF'
 572  4F72 3C           	INC A
 573  4F73 32 FC 4C     	LD (FLICKER), A
 574  4F76
 575  4F76 ED 7B FD 4C  	LD SP, (TMPSP)
 576  4F7A 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 577  4F7D 36 00        	LD (HL), 0 ; zero out update flag
 578  4F7F C9           	RET
 579  4F80              ; *******************************************************************************************************
 580  4F80               ENDIF
 581  4F80
 582  4F80              ; General BASIC CALL-instruction handler
 583  4F80              CALLHAND:
 584  4F80 E5           	PUSH HL
 585  4F81 21 03 4D     	LD	HL, CMDS ; pointer table based on starting letter
 586  4F84 3A 89 FD         LD A, (PROCNM)
 587  4F87 D6 41            SUB 'A'
 588  4F89 87               ADD A, A
 589  4F8A 16 00            LD D, 0
 590  4F8C 5F               LD E, A
 591  4F8D 19               ADD HL, DE
 592  4F8E 5E               LD E, (HL)
 593  4F8F 23               INC HL
 594  4F90 56               LD D, (HL)
 595  4F91 7A               LD A, D
 596  4F92 B3               OR E
 597  4F93 28 24            JR Z, .CMDNOTRECOGNIZED
 598  4F95 EB               EX DE, HL
 599  4F96              .CHKCMD:
 600  4F96 11 89 FD     	LD	DE, PROCNM
 601  4F99 1A           .LOOP:	LD	A,(DE)
 602  4F9A BE           	CP	(HL)
 603  4F9B 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 604  4F9D 13           	INC	DE
 605  4F9E 23           	INC	HL
 606  4F9F A7           	AND	A
 607  4FA0 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 608  4FA2 5E           	LD	E,(HL)
 609  4FA3 23           	INC	HL
 610  4FA4 56           	LD	D,(HL)
 611  4FA5 E1           	POP	HL		; routine address
 612  4FA6 CD F2 4F     	CALL	GETPREVCHAR
 613  4FA9 CD BB 4F     	CALL	.CALLDE		; Call routine
 614  4FAC A7           	AND	A
 615  4FAD C9           	RET
 616  4FAE
 617  4FAE              .TONEXTCMD:
 618  4FAE 0E FF        	LD	C,0FFH
 619  4FB0 AF           	XOR	A
 620  4FB1 ED B1        	CPIR			; Skip to end of instruction name
 621  4FB3 23           	INC	HL
 622  4FB4 23           	INC	HL		; Skip address
 623  4FB5 BE           	CP	(HL)
 624  4FB6 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 625  4FB8 E1           	POP	HL
 626  4FB9              .CMDNOTRECOGNIZED:
 627  4FB9 37               SCF
 628  4FBA C9           	RET
 629  4FBB
 630  4FBB              .CALLDE:
 631  4FBB D5           	PUSH	DE
 632  4FBC C9           	RET
 633  4FBD
 634  4FBD              ;---------------------------
 635  4FBD
 636  4FBD              GETSTRPNT:
 637  4FBD              ; OUT:
 638  4FBD              ; HL = String Address
 639  4FBD              ; B  = Lenght
 640  4FBD
 641  4FBD 2A F8 F7             LD      HL,(USR)
 642  4FC0 46                   LD      B,(HL)
 643  4FC1 23                   INC     HL
 644  4FC2 5E                   LD      E,(HL)
 645  4FC3 23                   INC     HL
 646  4FC4 56                   LD      D,(HL)
 647  4FC5 EB                   EX      DE,HL
 648  4FC6 C9                   RET
 649  4FC7
 650  4FC7              EVALTXTPARAM:
 651  4FC7 CD E8 4F     	CALL	CHKCHAR
 652  4FCA 28           	DEFB	"("             ; Check for (
 653  4FCB DD 21 64 4C  	LD	IX,FRMEVL
 654  4FCF CD 59 01     	CALL	CALBAS		; Evaluate expression
 655  4FD2 3A 63 F6             LD      A,(VALTYP)
 656  4FD5 FE 03                CP      3               ; Text type?
 657  4FD7 C2 FA 4F             JP      NZ,TYPE_MISMATCH
 658  4FDA E5                   PUSH	HL
 659  4FDB DD 21 D0 67          LD	IX,FRESTR         ; Free the temporary string
 660  4FDF CD 59 01             CALL	CALBAS
 661  4FE2 E1                   POP	HL
 662  4FE3 CD E8 4F     	CALL	CHKCHAR
 663  4FE6 29           	DEFB	")"             ; Check for )
 664  4FE7 C9                   RET
 665  4FE8
 666  4FE8
 667  4FE8              CHKCHAR:
 668  4FE8 CD F2 4F     	CALL	GETPREVCHAR	; Get previous basic char
 669  4FEB E3           	EX	(SP),HL
 670  4FEC BE           	CP	(HL) 	        ; Check if good char
 671  4FED 20 0F        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 672  4FEF 23           	INC	HL
 673  4FF0 E3           	EX	(SP),HL
 674  4FF1 23           	INC	HL		; Get next basic char
 675  4FF2
 676  4FF2              GETPREVCHAR:
 677  4FF2 2B           	DEC	HL
 678  4FF3 DD 21 66 46  	LD	IX,CHRGTR
 679  4FF7 C3 59 01     	JP      CALBAS
 680  4FFA
 681  4FFA
 682  4FFA              TYPE_MISMATCH:
 683  4FFA 1E 0D            LD E, 13 ; Type mismatch
 684  4FFC 18 02            JR THROW_ERROR
 685  4FFE
 686  4FFE              SYNTAX_ERROR:
 687  4FFE 1E 02            LD E, 2 ; Syntax error
 688  5000              THROW_ERROR:
 689  5000 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 690  5004 C3 59 01     	JP	CALBAS
 691  5007
 692  5007              ;---------------------------
 693  5007
 694  5007               IFNDEF EXCLUDE_RAM_CMDS
 695  5007              ; *******************************************************************************************************
 696  5007              ; function to handle CALL MEMCPY basic extension
 697  5007              ; _MEMCPY ( INT source,
 698  5007              ;			INT destination,
 699  5007              ;			INT count,
 700  5007              ; will put ram in page 0 also, page 1 is already there
 701  5007              MEMCPY:
 702  5007              	; opening (
 703  5007 CD E8 4F     	CALL CHKCHAR
 704  500A 28           	DB '('
 705  500B              	; get source address
 706  500B DD 21 2F 54  	LD IX, FRMQNT
 707  500F CD 59 01     	CALL CALBAS
 708  5012 D5           	PUSH DE
 709  5013              	; comma
 710  5013 CD E8 4F     	CALL CHKCHAR
 711  5016 2C           	DB ','
 712  5017              	; get destination address
 713  5017 DD 21 2F 54  	LD IX, FRMQNT
 714  501B CD 59 01     	CALL CALBAS
 715  501E D5           	PUSH DE
 716  501F              	; comma
 717  501F CD E8 4F     	CALL CHKCHAR
 718  5022 2C           	DB ','
 719  5023              	; get length
 720  5023 DD 21 2F 54  	LD IX, FRMQNT
 721  5027 CD 59 01     	CALL CALBAS
 722  502A D5           	PUSH DE
 723  502B              	; ending )
 724  502B CD E8 4F     	CALL CHKCHAR
 725  502E 29           	DB ')'
 726  502F
 727  502F              	; save position
 728  502F E5           	PUSH HL
 729  5030 DD E1        	POP IX
 730  5032
 731  5032 C1           	POP BC ; count
 732  5033 D1           	POP DE ; destination
 733  5034 E1           	POP HL ; source
 734  5035 D9           	EXX
 735  5036              	; enable page 0
 736  5036 FD 21 3D 50  	LD IY, .RET
 737  503A C3 BF 4E     	JP ENABLE_PAGE0
 738  503D              .RET:
 739  503D FB           	EI
 740  503E D9           	EXX
 741  503F ED B0        	LDIR
 742  5041 D1               POP DE
 743  5042 C1               POP BC
 744  5043 CD 36 4E         CALL RESTORE_PAGE_INFO
 745  5046 DD E5        	PUSH IX
 746  5048 E1           	POP HL
 747  5049 C9           	RET
 748  504A              ; *******************************************************************************************************
 749  504A               ENDIF
 750  504A               IFNDEF EXCLUDE_VRAM_CMDS
 751  504A              ; *******************************************************************************************************
 752  504A              ; function to handle CALL FILVRM basic extension
 753  504A              ; FILVRM ( INT offset,
 754  504A              ;		   INT count,
 755  504A              ;		   BYTE value,
 756  504A              ;		   BYTE wait_vsync) >0 = true
 757  504A              ; wait_vsync will issue HALT before copying
 758  504A              FILVRM:
 759  504A              	; opening (
 760  504A CD E8 4F     	CALL CHKCHAR
 761  504D 28           	DB '('
 762  504E              	; get offset address
 763  504E DD 21 2F 54  	LD IX, FRMQNT
 764  5052 CD 59 01     	CALL CALBAS
 765  5055 D5           	PUSH DE
 766  5056              	; comma
 767  5056 CD E8 4F     	CALL CHKCHAR
 768  5059 2C           	DB ','
 769  505A              	; get count
 770  505A DD 21 2F 54  	LD IX, FRMQNT
 771  505E CD 59 01     	CALL CALBAS
 772  5061 D5           	PUSH DE
 773  5062              	; comma
 774  5062 CD E8 4F     	CALL CHKCHAR
 775  5065 2C           	DB ','
 776  5066              	; get value
 777  5066 DD 21 1C 52  	LD IX, GETBYT
 778  506A CD 59 01     	CALL CALBAS
 779  506D F5           	PUSH AF
 780  506E              	; comma
 781  506E CD E8 4F     	CALL CHKCHAR
 782  5071 2C           	DB ','
 783  5072              	; get vsync wait
 784  5072 DD 21 1C 52  	LD IX, GETBYT
 785  5076 CD 59 01     	CALL CALBAS
 786  5079 F5           	PUSH AF
 787  507A              	; ending )
 788  507A CD E8 4F     	CALL CHKCHAR
 789  507D 29           	DB ')'
 790  507E
 791  507E FB               EI
 792  507F              	; save position
 793  507F E5           	PUSH HL
 794  5080 DD E1        	POP IX
 795  5082
 796  5082              	; syntax ok
 797  5082              	; wait for vsync if needed
 798  5082 F1           	POP AF
 799  5083 B7           	OR A
 800  5084 28 01        	JR Z, .L1
 801  5086 76           	HALT
 802  5087
 803  5087              .L1:
 804  5087 F1               POP AF ; value
 805  5088 C1               POP BC ; count
 806  5089 E1               POP HL ; offset
 807  508A CD 56 00         CALL BIOS_FILVRM
 808  508D
 809  508D              .L3:
 810  508D DD E5        	PUSH IX
 811  508F E1           	POP HL
 812  5090 C9           	RET
 813  5091              ; *******************************************************************************************************
 814  5091               ENDIF
 815  5091
 816  5091               IFNDEF EXCLUDE_RAM_CMDS
 817  5091              ; *******************************************************************************************************
 818  5091              ; function to handle CALL FILRAM basic extension
 819  5091              ; FILRAM ( INT start address,
 820  5091              ;		   INT count,
 821  5091              ;		   BYTE value,
 822  5091              ; will put ram in page 0 also, page 1 is already there
 823  5091              FILRAM:
 824  5091              	; opening (
 825  5091 CD E8 4F     	CALL CHKCHAR
 826  5094 28           	DB '('
 827  5095              	; get start address
 828  5095 DD 21 2F 54  	LD IX, FRMQNT
 829  5099 CD 59 01     	CALL CALBAS
 830  509C D5           	PUSH DE
 831  509D              	; comma
 832  509D CD E8 4F     	CALL CHKCHAR
 833  50A0 2C           	DB ','
 834  50A1              	; get count
 835  50A1 DD 21 2F 54  	LD IX, FRMQNT
 836  50A5 CD 59 01     	CALL CALBAS
 837  50A8 D5           	PUSH DE
 838  50A9              	; comma
 839  50A9 CD E8 4F     	CALL CHKCHAR
 840  50AC 2C           	DB ','
 841  50AD              	; get value
 842  50AD DD 21 1C 52  	LD IX, GETBYT
 843  50B1 CD 59 01     	CALL CALBAS
 844  50B4 F5           	PUSH AF
 845  50B5              	; ending )
 846  50B5 CD E8 4F     	CALL CHKCHAR
 847  50B8 29           	DB ')'
 848  50B9
 849  50B9              	; save position
 850  50B9 E5           	PUSH HL
 851  50BA DD E1        	POP IX
 852  50BC
 853  50BC D1           	POP DE ; actually AF
 854  50BD C1           	POP BC ; count
 855  50BE E1           	POP HL ; start address
 856  50BF 78           	LD A, B
 857  50C0 B7           	OR A
 858  50C1 20 0A        	JR NZ, .L1 ; >=256 bytes to fill
 859  50C3 B1           	OR C
 860  50C4 28 19        	JR Z, .EXIT ; 0 bytes to fill, skip
 861  50C6 79           	LD A, C
 862  50C7 3D           	DEC A
 863  50C8 20 03        	JR NZ, .L1 ; ; >1 byte to fill
 864  50CA              	; one byte to fill
 865  50CA 72           	LD (HL), D
 866  50CB 18 12        	JR .EXIT
 867  50CD              .L1:
 868  50CD D9           	EXX
 869  50CE              	; enable page 0
 870  50CE FD 21 D5 50  	LD IY, .RET
 871  50D2 C3 BF 4E     	JP ENABLE_PAGE0
 872  50D5              .RET:
 873  50D5 FB           	EI
 874  50D6 D9           	EXX
 875  50D7 CD E3 50     	CALL .FILLVALUE
 876  50DA D1               POP DE
 877  50DB C1               POP BC
 878  50DC CD 36 4E         CALL RESTORE_PAGE_INFO
 879  50DF              .EXIT:
 880  50DF DD E5        	PUSH IX
 881  50E1 E1           	POP HL
 882  50E2 C9           	RET
 883  50E3
 884  50E3              .FILLVALUE:
 885  50E3 72               LD (HL), D
 886  50E4 54               LD D, H
 887  50E5 5D               LD E, L
 888  50E6 13               INC DE
 889  50E7 0B               DEC BC
 890  50E8 ED B0            LDIR
 891  50EA C9               RET
 892  50EB              ; *******************************************************************************************************
 893  50EB               ENDIF
 894  50EB
 895  50EB               IFNDEF EXCLUDE_GENCAL
 896  50EB              ; *******************************************************************************************************
 897  50EB              ; function to handle CALL GENCAL basic extension
 898  50EB              ; GENCAL ( INT fn_addr, = address of the function to call
 899  50EB              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 900  50EB              ; output values of reristers will also be stored at reg_list_ptr
 901  50EB              GENCAL_VAR_SP:
 902  50EB 00 00            DW 0
 903  50ED              GENCAL_VAR_SP2:
 904  50ED 00 00            DW 0
 905  50EF              GENCAL:
 906  50EF              	; opening (
 907  50EF CD E8 4F     	CALL CHKCHAR
 908  50F2 28           	DB '('
 909  50F3              	; get function address
 910  50F3 DD 21 2F 54  	LD IX, FRMQNT
 911  50F7 CD 59 01     	CALL CALBAS
 912  50FA D5           	PUSH DE
 913  50FB              	; comma
 914  50FB CD E8 4F     	CALL CHKCHAR
 915  50FE 2C           	DB ','
 916  50FF              	; get pointer to register list
 917  50FF DD 21 2F 54  	LD IX, FRMQNT
 918  5103 CD 59 01     	CALL CALBAS
 919  5106 D5           	PUSH DE
 920  5107              	; ending )
 921  5107 CD E8 4F     	CALL CHKCHAR
 922  510A 29           	DB ')'
 923  510B
 924  510B              	; save BASIC token position
 925  510B E5           	PUSH HL
 926  510C D9               EXX
 927  510D E1           	POP HL ; HL'=next basic token
 928  510E D9               EXX
 929  510F
 930  510F E1               POP HL ; get pointer to register values
 931  5110 ED 73 EB 50      LD (GENCAL_VAR_SP), SP
 932  5114 F3               DI
 933  5115 F9               LD SP, HL
 934  5116 F1               POP AF
 935  5117 C1               POP BC
 936  5118 D1               POP DE
 937  5119 E1               POP HL
 938  511A DD E1            POP IX
 939  511C FD E1            POP IY
 940  511E D9               EXX
 941  511F ED 73 ED 50      LD (GENCAL_VAR_SP2), SP
 942  5123 ED 7B EB 50      LD SP, (GENCAL_VAR_SP)
 943  5127 FB               EI
 944  5128 D1               POP DE ; get function to call
 945  5129 E5               PUSH HL
 946  512A CD 45 51         CALL .EXXDECALL
 947  512D F3               DI
 948  512E ED 73 EB 50      LD (GENCAL_VAR_SP), SP
 949  5132 ED 7B ED 50      LD SP, (GENCAL_VAR_SP2)
 950  5136 FD E5            PUSH IY
 951  5138 DD E5            PUSH IX
 952  513A E5               PUSH HL
 953  513B D5               PUSH DE
 954  513C C5               PUSH BC
 955  513D F5               PUSH AF
 956  513E ED 7B EB 50      LD SP, (GENCAL_VAR_SP)
 957  5142 FB               EI
 958  5143 E1               POP HL
 959  5144 C9           	RET
 960  5145
 961  5145              .EXXDECALL:
 962  5145 D5               PUSH DE
 963  5146 D9               EXX
 964  5147 C9               RET
 965  5148              ; *******************************************************************************************************
 966  5148               ENDIF
 967  5148
 968  5148               IFNDEF EXCLUDE_VRAM_CMDS
 969  5148              ; *******************************************************************************************************
 970  5148              ; function to handle CALL MEMVRM basic extension
 971  5148              ; copies from RAM to VRAM
 972  5148              ; _MEMVRM ( INT source,
 973  5148              ;			INT destination,
 974  5148              ;			INT count,
 975  5148              ;			BYTE wait_vsync) >0 = true
 976  5148              ; will put ram in page 0 also, page 1 is already there
 977  5148              ; wait_vsync will issue HALT before copying
 978  5148              MEMVRM:
 979  5148              	; opening (
 980  5148 CD E8 4F     	CALL CHKCHAR
 981  514B 28           	DB '('
 982  514C              	; get source address
 983  514C DD 21 2F 54  	LD IX, FRMQNT
 984  5150 CD 59 01     	CALL CALBAS
 985  5153 D5           	PUSH DE
 986  5154              	; comma
 987  5154 CD E8 4F     	CALL CHKCHAR
 988  5157 2C           	DB ','
 989  5158              	; get destination address
 990  5158 DD 21 2F 54  	LD IX, FRMQNT
 991  515C CD 59 01     	CALL CALBAS
 992  515F D5           	PUSH DE
 993  5160              	; comma
 994  5160 CD E8 4F     	CALL CHKCHAR
 995  5163 2C           	DB ','
 996  5164              	; get length
 997  5164 DD 21 2F 54  	LD IX, FRMQNT
 998  5168 CD 59 01     	CALL CALBAS
 999  516B D5           	PUSH DE
1000  516C              	; comma
1001  516C CD E8 4F     	CALL CHKCHAR
1002  516F 2C           	DB ','
1003  5170              	; get vsync wait
1004  5170 DD 21 1C 52  	LD IX, GETBYT
1005  5174 CD 59 01     	CALL CALBAS
1006  5177 F5           	PUSH AF
1007  5178              	; ending )
1008  5178 CD E8 4F     	CALL CHKCHAR
1009  517B 29           	DB ')'
1010  517C
1011  517C                  ; save position in BASIC text
1012  517C E5           	PUSH HL
1013  517D DD E1        	POP IX
1014  517F
1015  517F F1           	POP AF ; wait vsync
1016  5180 B7           	OR A
1017  5181 28 03        	JR Z, .L1
1018  5183 FB               EI
1019  5184 76           	HALT
1020  5185 F3           	DI
1021  5186              .L1:
1022  5186              	; pop LDIR parameters and store away for later
1023  5186 C1           	POP BC ; count
1024  5187 D1           	POP DE ; vram destination
1025  5188 E1           	POP HL ; ram source
1026  5189 D9           	EXX
1027  518A FD 21 91 51   	LD IY, .RET
1028  518E C3 BF 4E     	JP ENABLE_PAGE0
1029  5191              .RET:
1030  5191 FB           	EI
1031  5192 D9           	EXX
1032  5193 CD 9F 51     	CALL .LDIRVM
1033  5196 D1               POP DE
1034  5197 C1               POP BC
1035  5198 CD 36 4E         CALL RESTORE_PAGE_INFO
1036  519B DD E5        	PUSH IX
1037  519D E1           	POP HL
1038  519E C9           	RET
1039  519F
1040  519F              .LDIRVM:
1041  519F EB           	EX DE, HL
1042  51A0 CD F4 4D     	CALL SETWRT_LOCAL
1043  51A3 EB           	EX DE, HL
1044  51A4 78           	LD A, B
1045  51A5 B7           	OR A
1046  51A6 28 0D        	JR Z, .L3
1047  51A8 C5           	PUSH BC
1048  51A9 0E 98        	LD C, #98
1049  51AB              .L2:
1050  51AB 50           	LD D, B
1051  51AC 06 00        	LD B, 0
1052  51AE CD BB 51     	CALL .BBYTECOPY
1053  51B1 42           	LD B, D
1054  51B2 10 F7        	DJNZ .L2
1055  51B4 C1           	POP BC
1056  51B5              .L3:
1057  51B5 79           	LD A, C
1058  51B6 B7           	OR A
1059  51B7 C8           	RET Z
1060  51B8 41           	LD B, C
1061  51B9 0E 98        	LD C, #98
1062  51BB              .BBYTECOPY:
1063  51BB ED A3        	OUTI
1064  51BD C2 BB 51     	JP	NZ, .BBYTECOPY
1065  51C0 C9           	RET
1066  51C1              ; *******************************************************************************************************
1067  51C1               ENDIF
1068  51C1
1069  51C1               IFNDEF EXCLUDE_VRAM_CMDS
1070  51C1              ; *******************************************************************************************************
1071  51C1              ; function to handle CALL VRMMEM basic extension
1072  51C1              ; copies from RAM to VRAM
1073  51C1              ; _VRMMEM ( INT source,
1074  51C1              ;			INT destination,
1075  51C1              ;			INT count
1076  51C1              ; will put ram in page 0 also, page 1 is already there
1077  51C1              VRMMEM:
1078  51C1              	; opening (
1079  51C1 CD E8 4F     	CALL CHKCHAR
1080  51C4 28           	DB '('
1081  51C5              	; get source address
1082  51C5 DD 21 2F 54  	LD IX, FRMQNT
1083  51C9 CD 59 01     	CALL CALBAS
1084  51CC D5           	PUSH DE
1085  51CD              	; comma
1086  51CD CD E8 4F     	CALL CHKCHAR
1087  51D0 2C           	DB ','
1088  51D1              	; get destination address
1089  51D1 DD 21 2F 54  	LD IX, FRMQNT
1090  51D5 CD 59 01     	CALL CALBAS
1091  51D8 D5           	PUSH DE
1092  51D9              	; comma
1093  51D9 CD E8 4F     	CALL CHKCHAR
1094  51DC 2C           	DB ','
1095  51DD              	; get length
1096  51DD DD 21 2F 54  	LD IX, FRMQNT
1097  51E1 CD 59 01     	CALL CALBAS
1098  51E4 D5           	PUSH DE
1099  51E5              	; ending )
1100  51E5 CD E8 4F     	CALL CHKCHAR
1101  51E8 29           	DB ')'
1102  51E9
1103  51E9                  ; save position in BASIC text
1104  51E9 E5           	PUSH HL
1105  51EA DD E1        	POP IX
1106  51EC
1107  51EC C1           	POP BC ; count
1108  51ED D1           	POP DE ; destination
1109  51EE E1           	POP HL ; source
1110  51EF D9           	EXX
1111  51F0 FD 21 F7 51  	LD IY, .RET
1112  51F4 C3 BF 4E     	JP ENABLE_PAGE0
1113  51F7              .RET:
1114  51F7 FB           	EI
1115  51F8 D9           	EXX
1116  51F9 CD 05 52     	CALL .LDIRMV
1117  51FC D1               POP DE
1118  51FD C1               POP BC
1119  51FE CD 36 4E         CALL RESTORE_PAGE_INFO
1120  5201 DD E5        	PUSH IX
1121  5203 E1           	POP HL
1122  5204 C9           	RET
1123  5205
1124  5205              .LDIRMV:
1125  5205              	; set VRAM address *exactly* as in ROM, otherwise corruption
1126  5205 7D           	LD	A, L
1127  5206 F3           	DI
1128  5207 D3 99        	OUT	(099H), A
1129  5209 7C           	LD	A, H
1130  520A E6 3F        	AND	03FH
1131  520C D3 99        	OUT	(099H), A
1132  520E FB           	EI
1133  520F              	;EX (SP), HL
1134  520F              	;EX (SP), HL
1135  520F              	;NOP
1136  520F              	;NOP
1137  520F              .L4:
1138  520F DB 98            IN A, (#98)
1139  5211 12           	LD (DE), A
1140  5212 13               INC DE
1141  5213 0B               DEC BC
1142  5214 79               LD A, C
1143  5215 B0               OR B
1144  5216 20 F7            JR NZ, .L4
1145  5218 C9               RET
1146  5219              ; *******************************************************************************************************
1147  5219               ENDIF
1148  5219
1149  5219              ; *******************************************************************************************************
1150  5219              ; H.TIMI function
1151  5219              MBGE_HTIMI:
1152  5219               EXPORT MBGE_HTIMI
1153  5219 F5           	PUSH AF
1154  521A
1155  521A               IFNDEF EXCLUDE_SPRITE_CMDS
1156  521A CD CF 4E     	CALL SPRATR_UPDATE
1157  521D               ENDIF
1158  521D
1159  521D               IFNDEF EXCLUDE_SOUND_PLAYER
1160  521D 3A F5 4C     	LD A, (SOUND_ENABLED)
1161  5220 B7           	OR A
1162  5221 28 2A        	JR Z, .EXIT
1163  5223
1164  5223              	; enable page 2
1165  5223 3E 02            LD A, 2
1166  5225 CD FF 4D         CALL GET_PAGE_INFO
1167  5228 C5               PUSH BC
1168  5229 D5               PUSH DE
1169  522A 3A 43 F3         LD A, (RAMAD2)
1170  522D 26 80            LD H, 080H
1171  522F CD 46 4E         CALL LOCAL_ENASLT
1172  5232              	; enable page 0
1173  5232 AF               XOR A
1174  5233 CD FF 4D         CALL GET_PAGE_INFO
1175  5236 C5               PUSH BC
1176  5237 D5               PUSH DE
1177  5238 3A 41 F3         LD A, (RAMAD0)
1178  523B 26 00            LD H, 0
1179  523D CD 46 4E         CALL LOCAL_ENASLT
1180  5240
1181  5240 CD 31 42     	CALL PLY_AKG_PLAY
1182  5243
1183  5243              	; restore page 0
1184  5243 D1               POP DE
1185  5244 C1               POP BC
1186  5245 CD 36 4E         CALL RESTORE_PAGE_INFO
1187  5248              	; restore page 2
1188  5248 D1               POP DE
1189  5249 C1               POP BC
1190  524A CD 36 4E         CALL RESTORE_PAGE_INFO
1191  524D               ENDIF
1192  524D
1193  524D              .EXIT:
1194  524D F1           	POP AF
1195  524E C3 EE 4C     	JP ORIG.HTIMI
1196  5251              ; *******************************************************************************************************
1197  5251
1198  5251              ; *******************************************************************************************************
1199  5251              ; interrupt handler when page 0 enabled
1200  5251              VBLANK:
1201  5251              	EXPORT VBLANK
1202  5251
1203  5251 F5               PUSH AF
1204  5252              	; is VDP originator ?
1205  5252 DB 99        	IN	A, (099H)
1206  5254 A7           	AND	A
1207  5255 F2 7B 52     	JP P, .EXIT
1208  5258
1209  5258               IFNDEF EXCLUDE_SOUND_PLAYER
1210  5258 3A F5 4C     	LD A, (SOUND_ENABLED)
1211  525B B7           	OR A
1212  525C 28 1D        	JR Z, .EXIT
1213  525E
1214  525E C5               PUSH BC
1215  525F D5               PUSH DE
1216  5260 E5               PUSH HL
1217  5261 08               EX AF, AF'
1218  5262 D9               EXX
1219  5263 F5               PUSH AF
1220  5264 C5               PUSH BC
1221  5265 D5               PUSH DE
1222  5266 E5               PUSH HL
1223  5267 DD E5            PUSH IX
1224  5269 FD E5            PUSH IY
1225  526B
1226  526B CD 31 42     	CALL PLY_AKG_PLAY
1227  526E
1228  526E FD E1            POP IY
1229  5270 DD E1            POP IX
1230  5272 E1               POP HL
1231  5273 D1               POP DE
1232  5274 C1               POP BC
1233  5275 F1               POP AF
1234  5276 08               EX AF, AF'
1235  5277 D9               EXX
1236  5278 E1               POP HL
1237  5279 D1               POP DE
1238  527A C1               POP BC
1239  527B               ENDIF
1240  527B
1241  527B              .EXIT:
1242  527B F1           	POP AF
1243  527C FB           	EI
1244  527D ED 4D        	RETI
1245  527F              ; *******************************************************************************************************
1246  527F
1247  527F               IFNDEF EXCLUDE_SOUND_PLAYER
1248  527F              ; *******************************************************************************************************
1249  527F              ; function to handle CALL SNDPLYINIT basic extension
1250  527F              ; initializes sound player
1251  527F              ; _SNDPLYINIT ( INT music_offset,
1252  527F              ;				INT sfx_offset, can be -1 if no SFX
1253  527F              ; will put ram in page 0 also, page 1 is already there
1254  527F              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1255  527F              SNDPLYINIT:
1256  527F              	; opening (
1257  527F CD E8 4F     	CALL CHKCHAR
1258  5282 28           	DB '('
1259  5283              	; get music address
1260  5283 DD 21 2F 54  	LD IX, FRMQNT
1261  5287 CD 59 01     	CALL CALBAS
1262  528A D5           	PUSH DE
1263  528B              	; comma
1264  528B CD E8 4F     	CALL CHKCHAR
1265  528E 2C           	DB ','
1266  528F              	; get sfx address
1267  528F DD 21 2F 54  	LD IX, FRMQNT
1268  5293 CD 59 01     	CALL CALBAS
1269  5296 D5           	PUSH DE
1270  5297              	; ending )
1271  5297 CD E8 4F     	CALL CHKCHAR
1272  529A 29           	DB ')'
1273  529B
1274  529B                  ; save position in BASIC text
1275  529B 44           	LD B, H
1276  529C 4D           	LD C, L
1277  529D
1278  529D              	; pop LDIR parameters and store away for later
1279  529D D1           	POP DE ; sfx address
1280  529E E1           	POP HL ; music address
1281  529F C5           	PUSH BC ; basic text location
1282  52A0 D9           	EXX
1283  52A1 FD 21 A8 52  	LD IY, .RET
1284  52A5 C3 BF 4E     	JP ENABLE_PAGE0
1285  52A8              .RET:
1286  52A8 D9           	EXX
1287  52A9
1288  52A9 D5           	PUSH DE
1289  52AA AF           	XOR A
1290  52AB              	; HL = music location
1291  52AB CD 60 41     	CALL PLY_AKG_INIT
1292  52AE 3E 01        	LD A, 1
1293  52B0 32 F3 4C     	LD (MUSIC_INIT_STATUS), A
1294  52B3
1295  52B3 E1           	POP HL ; SFX
1296  52B4              	; check if SFX address -1
1297  52B4 23           	INC HL
1298  52B5 7D           	LD A, L
1299  52B6 B4           	OR H
1300  52B7 28 09        	JR Z,.L1
1301  52B9 2B           	DEC HL
1302  52BA CD 1B 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1303  52BD 3E 01        	LD A, 1
1304  52BF 32 F4 4C     	LD (SFX_INIT_STATUS), A
1305  52C2              .L1:
1306  52C2 D1               POP DE
1307  52C3 C1               POP BC
1308  52C4 CD 36 4E         CALL RESTORE_PAGE_INFO
1309  52C7
1310  52C7 E1           	POP HL
1311  52C8 C9           	RET
1312  52C9              ; *******************************************************************************************************
1313  52C9
1314  52C9              ; *******************************************************************************************************
1315  52C9              ; function to handle CALL SNDPLYON basic extension
1316  52C9              ; enables sound player
1317  52C9              ; _SNDPLYON
1318  52C9              ; sets SOUND_ENABLED variable to 1 if init call was done
1319  52C9              ; if not throws out of data error
1320  52C9              SNDPLYON:
1321  52C9 3A F3 4C     	LD A, (MUSIC_INIT_STATUS)
1322  52CC B7           	OR A
1323  52CD 20 05        	JR NZ, .L1
1324  52CF              	; player not initialized, throw error
1325  52CF 1E 04        	LD E, 04 ; Out of DATA
1326  52D1 C3 00 50     	JP THROW_ERROR
1327  52D4              .L1:
1328  52D4 32 F5 4C     	LD (SOUND_ENABLED), A
1329  52D7              	; disable key click
1330  52D7 AF           	XOR A
1331  52D8 32 DB F3     	LD (CLIKSW), A
1332  52DB C9           	RET
1333  52DC              ; *******************************************************************************************************
1334  52DC
1335  52DC              ; *******************************************************************************************************
1336  52DC              ; function to handle CALL SNDPLYOFF basic extension
1337  52DC              ; disables sound player
1338  52DC              ; _SNDPLYOFF
1339  52DC              ; sets SOUND_ENABLED variable to 0
1340  52DC              ; calls AKG to stop music and SFX on all channels if initialized
1341  52DC              SNDPLYOFF:
1342  52DC 3A F5 4C     	LD A, (SOUND_ENABLED)
1343  52DF B7           	OR A
1344  52E0 C8           	RET Z ; already stopped
1345  52E1 AF           	XOR A
1346  52E2 32 F5 4C     	LD (SOUND_ENABLED), A
1347  52E5 E5           	PUSH HL
1348  52E6 CD 1F 42     	CALL PLY_AKG_STOP
1349  52E9 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1350  52EC B7           	OR A
1351  52ED 28 0E        	JR Z, .EXIT ; SFX not in use
1352  52EF AF           	XOR A
1353  52F0 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1354  52F3 3E 01        	LD A, 1
1355  52F5 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1356  52F8 3E 02        	LD A, 2
1357  52FA CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1358  52FD              .EXIT:
1359  52FD E1           	POP HL
1360  52FE C9           	RET
1361  52FF              ; *******************************************************************************************************
1362  52FF
1363  52FF              ; *******************************************************************************************************
1364  52FF              ; function to handle CALL SNDSFX basic extension
1365  52FF              ; plays a sound effect
1366  52FF              ; _SNDSFX ( BYTE sfx_number, >0
1367  52FF              ;			BYTE channel, = 0,1 or 2
1368  52FF              ;			BYTE inverted_volume = 0-16, 0 being full volume
1369  52FF              ; will put ram in page 0 also, page 1 is already there
1370  52FF              ; if sound off throws illegal function call
1371  52FF              ; if sfx not initialized, throws out of data
1372  52FF              SNDSFX:
1373  52FF              	; opening (
1374  52FF CD E8 4F     	CALL CHKCHAR
1375  5302 28           	DB '('
1376  5303              	; get sfx_number
1377  5303 DD 21 1C 52  	LD IX, GETBYT
1378  5307 CD 59 01     	CALL CALBAS
1379  530A D5           	PUSH DE
1380  530B              	; comma
1381  530B CD E8 4F     	CALL CHKCHAR
1382  530E 2C           	DB ','
1383  530F              	; get sfx address
1384  530F DD 21 1C 52  	LD IX, GETBYT
1385  5313 CD 59 01     	CALL CALBAS
1386  5316 D5           	PUSH DE
1387  5317              	; comma
1388  5317 CD E8 4F     	CALL CHKCHAR
1389  531A 2C           	DB ','
1390  531B              	; get inverted volume
1391  531B DD 21 1C 52  	LD IX, GETBYT
1392  531F CD 59 01     	CALL CALBAS
1393  5322 D5           	PUSH DE
1394  5323              	; ending )
1395  5323 CD E8 4F     	CALL CHKCHAR
1396  5326 29           	DB ')'
1397  5327
1398  5327 3A F5 4C     	LD A, (SOUND_ENABLED)
1399  532A B7           	OR A
1400  532B 20 05        	JR NZ, .L1
1401  532D              	; sound disabled, throw illegal function call
1402  532D 1E 05        	LD E, 5
1403  532F C3 00 50     	JP THROW_ERROR
1404  5332              .L1:
1405  5332 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1406  5335 B7           	OR A
1407  5336 20 05        	JR NZ, .L2
1408  5338              	; sfx data not initialized, throw out of data
1409  5338 1E 04        	LD E, 4
1410  533A C3 00 50     	JP THROW_ERROR
1411  533D              .L2:
1412  533D              	; pop  parameters and store away for later
1413  533D D1           	POP DE ; inverted volume
1414  533E 43           	LD B, E
1415  533F D1           	POP DE ; channel
1416  5340 4B           	LD C, E
1417  5341 D1           	POP DE
1418  5342 7B           	LD A, E
1419  5343 08           	EX AF, AF'
1420  5344 E5           	PUSH HL ; basic text location
1421  5345 D9           	EXX
1422  5346 FD 21 4D 53  	LD IY, .RET
1423  534A C3 BF 4E     	JP ENABLE_PAGE0
1424  534D              .RET:
1425  534D D9           	EXX
1426  534E 08           	EX AF, AF'
1427  534F CD 1F 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1428  5352
1429  5352 D1               POP DE
1430  5353 C1               POP BC
1431  5354 CD 36 4E         CALL RESTORE_PAGE_INFO
1432  5357
1433  5357 E1           	POP HL
1434  5358 C9           	RET
1435  5359              ; *******************************************************************************************************
1436  5359               ENDIF
1437  5359
1438  5359               IFNDEF EXCLUDE_SPRITE_CMDS
1439  5359              ; *******************************************************************************************************
1440  5359              ; function to handle CALL SPRATRINI basic extension
1441  5359              ; initializes sprites handler
1442  5359              ; _SPRATRINI ( INT sprites_attributes_data,
1443  5359              ;			   INT update_variable_location,
1444  5359              ;			   INT sprite_flicker_enabled )
1445  5359              ; expects both locations to be in range #8000+ or throws an error
1446  5359              ; since these should be BASIC variables
1447  5359              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA and SPRFLICKER_ENABLED
1448  5359              SPRATRINI:
1449  5359              	; opening (
1450  5359 CD E8 4F     	CALL CHKCHAR
1451  535C 28           	DB '('
1452  535D              	; get address of sprite attribute table DIM SA%(3,31)
1453  535D DD 21 2F 54  	LD IX, FRMQNT
1454  5361 CD 59 01     	CALL CALBAS
1455  5364 D5           	PUSH DE
1456  5365              	; comma
1457  5365 CD E8 4F     	CALL CHKCHAR
1458  5368 2C           	DB ','
1459  5369              	; get address of sprite attribute table DIM SA%(3,31)
1460  5369 DD 21 2F 54  	LD IX, FRMQNT
1461  536D CD 59 01     	CALL CALBAS
1462  5370 D5           	PUSH DE
1463  5371              	; comma
1464  5371 CD E8 4F     	CALL CHKCHAR
1465  5374 2C           	DB ','
1466  5375              	; get flicker enabled flag
1467  5375 DD 21 2F 54  	LD IX, FRMQNT
1468  5379 CD 59 01     	CALL CALBAS
1469  537C D5           	PUSH DE
1470  537D              	; ending )
1471  537D CD E8 4F     	CALL CHKCHAR
1472  5380 29           	DB ')'
1473  5381
1474  5381 D1           	POP DE ; get flicker flag
1475  5382 7A           	LD A, D
1476  5383 B3           	OR E
1477  5384 32 FB 4C     	LD (SPRFLICKER_ENABLED), A
1478  5387
1479  5387 D1           	POP DE ; update variable location
1480  5388 CB 7A        	BIT 7, D ; is address >= &h8000
1481  538A 20 05        	JR NZ, .L1
1482  538C 1E 05        	LD E, 5 ; illegal function call
1483  538E C3 00 50     	JP THROW_ERROR
1484  5391              .L1:
1485  5391 ED 53 F7 4C  	LD (SPRATR_UPDATE_FLAG), DE
1486  5395 D1           	POP DE ; address of sprite attribute table
1487  5396 CB 7A        	BIT 7, D ; is address >= &h8000
1488  5398 20 05        	JR NZ, .L2
1489  539A 1E 05        	LD E, 5 ; illegal function call
1490  539C C3 00 50     	JP THROW_ERROR
1491  539F              .L2:
1492  539F ED 53 F9 4C  	LD (SPRATR_DATA), DE
1493  53A3 3E 01        	LD A, 1
1494  53A5 32 F6 4C     	LD (SPRATR_INIT_STATUS), A
1495  53A8 C9           	RET
1496  53A9              ; *******************************************************************************************************
1497  53A9
1498  53A9              ; *******************************************************************************************************
1499  53A9              ; function to handle CALL SPRSET basic extension
1500  53A9              ; sets position, and optionally pattern and color of sprite
1501  53A9              ; _SPRSET ( BYTE sprite_num , valid 0-31
1502  53A9              ;			INT x,
1503  53A9              ;			INT y,
1504  53A9              ;			INT pattern, valid 0-31, otherwise ignored
1505  53A9              ;			INT color, valid 0-15, otherwise ignored
1506  53A9              SPRSET:
1507  53A9 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1508  53AC B7           	OR A
1509  53AD 20 05        	JR NZ, .L1
1510  53AF 1E 05        	LD E, 5 ; illegal function call
1511  53B1 C3 00 50     	JP THROW_ERROR
1512  53B4              .L1:
1513  53B4              	; opening (
1514  53B4 CD E8 4F     	CALL CHKCHAR
1515  53B7 28           	DB '('
1516  53B8              	; get sprite number
1517  53B8 DD 21 1C 52  	LD IX, GETBYT
1518  53BC CD 59 01     	CALL CALBAS
1519  53BF F5           	PUSH AF
1520  53C0              	; comma
1521  53C0 CD E8 4F     	CALL CHKCHAR
1522  53C3 2C           	DB ','
1523  53C4              	; get x
1524  53C4 DD 21 2F 54  	LD IX, FRMQNT
1525  53C8 CD 59 01     	CALL CALBAS
1526  53CB D5           	PUSH DE
1527  53CC              	; comma
1528  53CC CD E8 4F     	CALL CHKCHAR
1529  53CF 2C           	DB ','
1530  53D0              	; get y
1531  53D0 DD 21 2F 54  	LD IX, FRMQNT
1532  53D4 CD 59 01     	CALL CALBAS
1533  53D7 D5           	PUSH DE
1534  53D8              	; comma
1535  53D8 CD E8 4F     	CALL CHKCHAR
1536  53DB 2C           	DB ','
1537  53DC              	; get pattern
1538  53DC DD 21 2F 54  	LD IX, FRMQNT
1539  53E0 CD 59 01     	CALL CALBAS
1540  53E3 D5           	PUSH DE
1541  53E4              	; comma
1542  53E4 CD E8 4F     	CALL CHKCHAR
1543  53E7 2C           	DB ','
1544  53E8              	; get color
1545  53E8 DD 21 2F 54  	LD IX, FRMQNT
1546  53EC CD 59 01     	CALL CALBAS
1547  53EF D5           	PUSH DE
1548  53F0              	; ending )
1549  53F0 CD E8 4F     	CALL CHKCHAR
1550  53F3 29           	DB ')'
1551  53F4
1552  53F4                  ; save position in BASIC text
1553  53F4 E5           	PUSH HL
1554  53F5 DD E1        	POP IX
1555  53F7
1556  53F7 C1           	POP BC ; color
1557  53F8 D1           	POP DE ; pattern
1558  53F9 D9           	EXX
1559  53FA C1           	POP BC ; y
1560  53FB D1           	POP DE ; x
1561  53FC F1           	POP AF ; sprite number
1562  53FD FE 20        	CP 32
1563  53FF 38 05        	JR C, .L2
1564  5401 1E 05        	LD E, 5 ; illegal function call
1565  5403 C3 00 50     	JP THROW_ERROR
1566  5406              .L2:
1567  5406              	; find location in sprite attributes table
1568  5406 87          > ADD A, A
1568  5407 87          > ADD A, A
1568  5408 87          > ADD A, A
1569  5409 D5           	PUSH DE
1570  540A 16 00        	LD D, 0
1571  540C 5F           	LD E, A
1572  540D 2A F9 4C     	LD HL, (SPRATR_DATA)
1573  5410 19           	ADD HL, DE
1574  5411 D1           	POP DE
1575  5412              	; set y
1576  5412 71           	LD (HL), C
1577  5413 23           	INC HL
1578  5414 70           	LD (HL), B
1579  5415 23           	INC HL
1580  5416              	; set x
1581  5416 73           	LD (HL), E
1582  5417 23           	INC HL
1583  5418 72           	LD (HL), D
1584  5419 23           	INC HL
1585  541A E5           	PUSH HL
1586  541B D9           	EXX
1587  541C E1           	POP HL
1588  541D              	; check if 0<=pattern<32
1589  541D 7A           	LD A, D
1590  541E B7           	OR A
1591  541F 20 0B        	JR NZ, .L3
1592  5421 7D           	LD A, L
1593  5422 FE 20        	CP 32
1594  5424 30 06        	JR NC, .L3
1595  5426              	; set pattern
1596  5426 73           	LD (HL), E
1597  5427 23           	INC HL
1598  5428 72           	LD (HL), D
1599  5429 23           	INC HL
1600  542A 18 02        	JR .L4
1601  542C              .L3:
1602  542C              	; skip pattern
1603  542C 23          > INC HL
1603  542D 23          > INC HL
1604  542E              .L4:
1605  542E              	; check if 0<=color<16
1606  542E 78           	LD A, B
1607  542F B7           	OR A
1608  5430 20 08        	JR NZ, .L5
1609  5432 79           	LD A, C
1610  5433 FE 10        	CP 16
1611  5435 30 03        	JR NC, .L5
1612  5437              	; set color
1613  5437 71           	LD (HL), C
1614  5438 23           	INC HL
1615  5439 70           	LD (HL), B
1616  543A
1617  543A              .L5:
1618  543A DD E5        	PUSH IX
1619  543C E1           	POP HL
1620  543D C9           	RET
1621  543E              ; *******************************************************************************************************
1622  543E
1623  543E              ; *******************************************************************************************************
1624  543E              ; function sets sprite location based on initial coordinates and offset provided
1625  543E              ; input A=sprite number in SPRATR_DATA , 0-31
1626  543E              ; input DE=initial x
1627  543E              ; input BC=initial y
1628  543E              ; input IY=location where delta y,x are located
1629  543E              ; modifies AF, HL, IX
1630  543E              SPRSET_DELTA_POS:
1631  543E 87          > ADD A, A
1631  543F 87          > ADD A, A
1631  5440 87          > ADD A, A
1632  5441 D5           	PUSH DE
1633  5442 16 00        	LD D, 0
1634  5444 5F           	LD E, A
1635  5445 DD 2A F9 4C  	LD IX, (SPRATR_DATA)
1636  5449 DD 19        	ADD IX, DE
1637  544B D1           	POP DE
1638  544C              	; IX=sprite's y location
1639  544C FD 6E 00     	LD L, (IY)
1640  544F FD 66 01     	LD H, (IY+1)
1641  5452 09           	ADD HL, BC
1642  5453 DD 75 00     	LD (IX), L
1643  5456 DD 74 01     	LD (IX+1), H
1644  5459 FD 6E 02     	LD L, (IY+2)
1645  545C FD 66 03     	LD H, (IY+3)
1646  545F 19           	ADD HL, DE
1647  5460 DD 75 02     	LD (IX+2), L
1648  5463 DD 74 03     	LD (IX+3), H
1649  5466 C9           	RET
1650  5467              ; *******************************************************************************************************
1651  5467
1652  5467              ; *******************************************************************************************************
1653  5467              ; function to handle CALL SPRGRPMOV basic extension
1654  5467              ; sets position of a group of sprites described with
1655  5467              ; { int sprite_num, int delta_y, int delta_x } [count]
1656  5467              ; _SPRGRPMOV ( INT x,
1657  5467              ;			   INT y,
1658  5467              ;			   INT data_ptr,
1659  5467              ;			   BYTE count,
1660  5467              ; will put ram in page 0 also, page 1 is already there
1661  5467              SPRGRPMOV:
1662  5467 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1663  546A B7           	OR A
1664  546B 20 05        	JR NZ, .L1
1665  546D 1E 05        	LD E, 5 ; illegal function call
1666  546F C3 00 50     	JP THROW_ERROR
1667  5472              .L1:
1668  5472              	; opening (
1669  5472 CD E8 4F     	CALL CHKCHAR
1670  5475 28           	DB '('
1671  5476              	; get x
1672  5476 DD 21 2F 54  	LD IX, FRMQNT
1673  547A CD 59 01     	CALL CALBAS
1674  547D D5           	PUSH DE
1675  547E              	; comma
1676  547E CD E8 4F     	CALL CHKCHAR
1677  5481 2C           	DB ','
1678  5482              	; get y
1679  5482 DD 21 2F 54  	LD IX, FRMQNT
1680  5486 CD 59 01     	CALL CALBAS
1681  5489 D5           	PUSH DE
1682  548A              	; comma
1683  548A CD E8 4F     	CALL CHKCHAR
1684  548D 2C           	DB ','
1685  548E              	; get data pointer
1686  548E DD 21 2F 54  	LD IX, FRMQNT
1687  5492 CD 59 01     	CALL CALBAS
1688  5495 D5           	PUSH DE
1689  5496              	; comma
1690  5496 CD E8 4F     	CALL CHKCHAR
1691  5499 2C           	DB ','
1692  549A              	; get count
1693  549A DD 21 1C 52  	LD IX, GETBYT
1694  549E CD 59 01     	CALL CALBAS
1695  54A1 F5           	PUSH AF
1696  54A2              	; ending )
1697  54A2 CD E8 4F     	CALL CHKCHAR
1698  54A5 29           	DB ')'
1699  54A6
1700  54A6 E5           	PUSH HL
1701  54A7 DD E1        	POP IX
1702  54A9
1703  54A9 C1           	POP BC ; count
1704  54AA E1           	POP HL ; data pointer
1705  54AB D9           	EXX
1706  54AC C1           	POP BC ; y
1707  54AD D1           	POP DE ; x
1708  54AE D9           	EXX
1709  54AF
1710  54AF DD E5        	PUSH IX ; save position in BASIC buffer
1711  54B1
1712  54B1 C5           	PUSH BC
1713  54B2 E5           	PUSH HL
1714  54B3 AF               XOR A
1715  54B4 CD FF 4D         CALL GET_PAGE_INFO
1716  54B7 D9           	EXX
1717  54B8 E1           	POP HL
1718  54B9 F1           	POP AF
1719  54BA D9           	EXX
1720  54BB C5               PUSH BC
1721  54BC D5               PUSH DE
1722  54BD D9           	EXX
1723  54BE F5           	PUSH AF
1724  54BF E5           	PUSH HL
1725  54C0 D9           	EXX
1726  54C1 3A 41 F3         LD A, (RAMAD0)
1727  54C4 26 00            LD H, 0
1728  54C6 CD 46 4E         CALL LOCAL_ENASLT
1729  54C9 FB           	EI
1730  54CA E1           	POP HL
1731  54CB C1           	POP BC
1732  54CC CD D6 54     	CALL .UPDATE_LOC
1733  54CF D1               POP DE
1734  54D0 C1               POP BC
1735  54D1 CD 36 4E         CALL RESTORE_PAGE_INFO
1736  54D4 E1           	POP HL
1737  54D5 C9           	RET
1738  54D6
1739  54D6              .UPDATE_LOC:
1740  54D6              .L4:
1741  54D6 7E           	LD A, (HL)
1742  54D7 23           	INC HL
1743  54D8 23           	INC HL
1744  54D9 E5           	PUSH HL
1745  54DA FD E1        	POP IY
1746  54DC D9           	EXX
1747  54DD CD 3E 54     	CALL SPRSET_DELTA_POS
1748  54E0 D9           	EXX
1749  54E1 23          > INC HL
1749  54E2 23          > INC HL
1749  54E3 23          > INC HL
1749  54E4 23          > INC HL
1750  54E5 10 EF        	DJNZ .L4
1751  54E7 C9           	RET
1752  54E8              ; *******************************************************************************************************
1753  54E8               ENDIF
1754  54E8
1755  54E8               IFNDEF EXCLUDE_BLIT_CMDS
1756  54E8              ; *******************************************************************************************************
1757  54E8              ; function rotates mask and data of several characters and applies to background data
1758  54E8              ; this handles x-shift from 0 to 4
1759  54E8              ; contains self-modifying code that is set-up from external function
1760  54E8              ; input HL=pointer to mask data
1761  54E8              ; input HL'=pointer to character data
1762  54E8              ; input DE=output buffer containing background data
1763  54E8              ; input BC=DE+8
1764  54E8              ; input A=number of characters to process
1765  54E8              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1766  54E8              SHIFT04:
1767  54E8 08           	EX AF, AF'
1768  54E9 7E           	LD A, (HL) ; get mask
1769  54EA D9           	EXX
1770  54EB 57           	LD D, A
1771  54EC 1E FF        	LD E, #FF
1772  54EE 37           	SCF
1773  54EF              .M1:
1774  54EF 18 FE        	JR .M1 ; this is self-modifying part
1775  54F1 CB 1A        	RR D
1776  54F3 CB 1B        	RR E
1777  54F5 CB 1A        	RR D
1778  54F7 CB 1B        	RR E
1779  54F9 CB 1A        	RR D
1780  54FB CB 1B        	RR E
1781  54FD CB 1A        	RR D
1782  54FF CB 1B        	RR E
1783  5501
1784  5501 46           	LD B, (HL) ; get data
1785  5502 0E 00        	LD C, 0
1786  5504              .M2:
1787  5504 18 FE        	JR .M2 ; also self-modifying part
1788  5506 CB 38        	SRL B
1789  5508 CB 19        	RR C
1790  550A CB 38        	SRL B
1791  550C CB 19        	RR C
1792  550E CB 38        	SRL B
1793  5510 CB 19        	RR C
1794  5512 CB 38        	SRL B
1795  5514 CB 19        	RR C
1796  5516
1797  5516 D9           	EXX
1798  5517 1A           	LD A, (DE) ; background
1799  5518 D9           	EXX
1800  5519 A2           	AND D
1801  551A B0           	OR B
1802  551B D9           	EXX
1803  551C 12           	LD (DE), A
1804  551D
1805  551D 0A           	LD A, (BC)
1806  551E D9           	EXX
1807  551F A3           	AND E
1808  5520 B1           	OR C
1809  5521 23           	INC HL
1810  5522 D9           	EXX
1811  5523 02           	LD (BC), A
1812  5524
1813  5524 23           	INC HL
1814  5525 13           	INC DE
1815  5526 03           	INC BC
1816  5527
1817  5527 08           	EX AF, AF'
1818  5528 3D           	DEC A
1819  5529 C2 E8 54     	JP NZ, SHIFT04
1820  552C C9           	RET
1821  552D              ; *******************************************************************************************************
1822  552D
1823  552D              ; *******************************************************************************************************
1824  552D              ; function rotates mask and data of several characters and applies to background data
1825  552D              ; this handles x-shift from 5 to 8
1826  552D              ; contains self-modifying code that is set-up from external function
1827  552D              ; input HL=pointer to mask data
1828  552D              ; input HL'=pointer to character data
1829  552D              ; input DE=output buffer containing background data
1830  552D              ; input BC=DE+8
1831  552D              ; input A=number of characters to process
1832  552D              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1833  552D              SHIFT58:
1834  552D 08           	EX AF, AF'
1835  552E 7E           	LD A, (HL) ; get mask
1836  552F D9           	EXX
1837  5530 57           	LD D, A
1838  5531 1E FF        	LD E, #FF
1839  5533 37           	SCF
1840  5534              .M1:
1841  5534 18 FE        	JR .M1 ; this is self-modifying part
1842  5536 CB 12        	RL D
1843  5538 CB 13        	RL E
1844  553A CB 12        	RL D
1845  553C CB 13        	RL E
1846  553E CB 12        	RL D
1847  5540 CB 13        	RL E
1848  5542
1849  5542 46           	LD B, (HL)
1850  5543 0E 00        	LD C, 0
1851  5545              .M2:
1852  5545 18 FE        	JR .M2 ; also self-modifying part
1853  5547 CB 20        	SLA B
1854  5549 CB 11        	RL C
1855  554B CB 20        	SLA B
1856  554D CB 11        	RL C
1857  554F CB 20        	SLA B
1858  5551 CB 11        	RL C
1859  5553
1860  5553 D9           	EXX
1861  5554 1A           	LD A, (DE) ; background
1862  5555 D9           	EXX
1863  5556 A3           	AND E
1864  5557 B1           	OR C
1865  5558 D9           	EXX
1866  5559 12           	LD (DE), A
1867  555A
1868  555A 0A           	LD A, (BC)
1869  555B D9           	EXX
1870  555C A2           	AND D
1871  555D B0           	OR B
1872  555E 23           	INC HL
1873  555F D9           	EXX
1874  5560 02           	LD (BC), A
1875  5561
1876  5561 23           	INC HL
1877  5562 13           	INC DE
1878  5563 03           	INC BC
1879  5564
1880  5564 08           	EX AF, AF'
1881  5565 3D           	DEC A
1882  5566 C2 2D 55     	JP NZ, SHIFT58
1883  5569 C9           	RET
1884  556A              ; *******************************************************************************************************
1885  556A
1886  556A              ; *******************************************************************************************************
1887  556A              ; routine that shifts one row of characters
1888  556A              ; contains self-modifying code that is set-up from external function
1889  556A              ; input HL=pointer to mask data
1890  556A              ; input HL'=pointer to character data
1891  556A              ; input DE=output buffer containing background data
1892  556A              ; input A=number of characters to process
1893  556A              ; input IX=pointer to structure describing input data
1894  556A              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1895  556A              SHIFT_ROW:
1896  556A F5           	PUSH AF
1897  556B ED 53 FF 4C  		LD (BLIT_TMP1), DE
1898  556F E5           		PUSH HL
1899  5570 CD B3 55     			CALL .ADDYSHIFT
1900  5573 E1           		POP HL
1901  5574 ED 53 01 4D  		LD (BLIT_TMP2), DE ; DE+vertical shift
1902  5578              .L1:
1903  5578 3E 08        		LD A, 8
1904  557A DD 96 02     		SUB (IX+2) ; y shift
1905  557D              .CALL1:
1906  557D CD 00 00     		CALL 0
1907  5580 DD 7E 02     		LD A, (IX+2); y shift
1908  5583 B7           		OR A
1909  5584 28 26        		JR Z, .DONE
1910  5586 ED 5B FF 4C  		LD DE, (BLIT_TMP1)
1911  558A E5           		PUSH HL
1912  558B CD C1 55     			CALL .DETONEXTROW
1913  558E E1           		POP HL
1914  558F              .CALL2:
1915  558F CD 00 00     		CALL 0
1916  5592 ED 5B FF 4C  		LD DE, (BLIT_TMP1)
1917  5596 E5           		PUSH HL
1918  5597 CD BB 55     			CALL .ADD8
1919  559A E1           		POP HL
1920  559B ED 53 FF 4C  		LD (BLIT_TMP1), DE
1921  559F ED 5B 01 4D  		LD DE, (BLIT_TMP2)
1922  55A3 E5           		PUSH HL
1923  55A4 CD BB 55     			CALL .ADD8
1924  55A7 E1           		POP HL
1925  55A8 ED 53 01 4D  		LD (BLIT_TMP2), DE ; DE+vertical shift
1926  55AC              .DONE:
1927  55AC F1           	POP AF
1928  55AD 3D           	DEC A
1929  55AE C8           	RET Z
1930  55AF F5           	PUSH AF
1931  55B0 C3 78 55     	JP .L1
1932  55B3              .ADDYSHIFT:
1933  55B3 EB           	EX DE, HL
1934  55B4 16 00        	LD D, 0
1935  55B6 DD 5E 02     	LD E, (IX+2); y shift
1936  55B9 18 0C        	JR .MOVDEBC
1937  55BB              .ADD8:
1938  55BB 21 08 00     	LD HL, 8
1939  55BE C3 C7 55     	JP .MOVDEBC
1940  55C1              .DETONEXTROW:
1941  55C1 DD 6E 06     	LD L, (IX+6)
1942  55C4 DD 66 07     	LD H, (IX+7) ; bkg add to value
1943  55C7              .MOVDEBC:
1944  55C7 19           	ADD HL, DE
1945  55C8 54           	LD D, H
1946  55C9 5D           	LD E, L
1947  55CA 01 08 00     	LD BC, 8
1948  55CD 09           	ADD HL, BC
1949  55CE 44           	LD B, H
1950  55CF 4D           	LD C, L
1951  55D0 C9           	RET
1952  55D1              ; *******************************************************************************************************
1953  55D1
1954  55D1              ; *******************************************************************************************************
1955  55D1              ; function rotates mask and character data and applies it to background
1956  55D1              ; input IX=pointer to structure describing input data
1957  55D1              ; +0  DW horizontal shift count 0-7
1958  55D1              ; +2  DW vertical shift count 0-7
1959  55D1              ; +4  DW background data start;
1960  55D1              ; +6  DW background add to value to next row of background data
1961  55D1              ; +8  DW mask data start;
1962  55D1              ; +10  DW character data start;
1963  55D1              ; +12 DW character&mask add to value to next row of data
1964  55D1              ; +14 DW columns (low byte used)
1965  55D1              ; +16 DW rows (low byte used)
1966  55D1              SHIFT_MERGE_CHARACTER:
1967  55D1 DD 7E 00     	LD A, (IX) ; shift
1968  55D4 FE 05        	CP 5
1969  55D6 38 25        	JR C, .RIGHT
1970  55D8              	; shifts 5-7, use rotate towards left 1-3
1971  55D8 21 2D 55     	LD HL, SHIFT58
1972  55DB 22 7E 55     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1973  55DE 22 90 55     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1974  55E1 D6 05        	SUB 5
1975  55E3 28 0D        	JR Z, .L1
1976  55E5 87           	ADD A, A
1977  55E6 87           	ADD A, A
1978  55E7 67           	LD H, A
1979  55E8 2E 18        	LD L, #18 ; JR opcode
1980  55EA 22 34 55     	LD (SHIFT58.M1), HL
1981  55ED 22 45 55     	LD (SHIFT58.M2), HL
1982  55F0 18 32        	JR .DO
1983  55F2              .L1:
1984  55F2 21 00 00     	LD HL, 0 ; 2xNOP opcode
1985  55F5 22 34 55     	LD (SHIFT58.M1), HL
1986  55F8 22 45 55     	LD (SHIFT58.M2), HL
1987  55FB 18 27        	JR .DO
1988  55FD              .RIGHT:
1989  55FD              	; shifts 0-4, rotate towards right
1990  55FD 21 E8 54     	LD HL, SHIFT04
1991  5600 22 7E 55     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1992  5603 22 90 55     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1993  5606 FE 04        	CP 4
1994  5608 28 11        	JR Z, .R1
1995  560A D6 04        	SUB 4
1996  560C ED 44        	NEG
1997  560E 87           	ADD A, A
1998  560F 87           	ADD A, A
1999  5610 67           	LD H, A
2000  5611 2E 18        	LD L, #18 ; JR opcode
2001  5613 22 EF 54     	LD (SHIFT04.M1), HL
2002  5616 22 04 55     	LD (SHIFT04.M2), HL
2003  5619 18 09        	JR .DO
2004  561B              .R1:
2005  561B 21 00 00     	LD HL, 0 ; 2xNOP opcode
2006  561E 22 EF 54     	LD (SHIFT04.M1), HL
2007  5621 22 04 55     	LD (SHIFT04.M2), HL
2008  5624              .DO:
2009  5624 DD 46 10     	LD B, (IX+16) ; rows
2010  5627 DD 6E 08     	LD L, (IX+8)
2011  562A DD 66 09     	LD H, (IX+9) ; mask data
2012  562D DD 5E 04     	LD E, (IX+4)
2013  5630 DD 56 05     	LD D, (IX+5) ; background data
2014  5633 D9           	EXX
2015  5634 DD 6E 0A     	LD L, (IX+10)
2016  5637 DD 66 0B     	LD H, (IX+11) ; character data
2017  563A D9           	EXX
2018  563B              .LOOP:
2019  563B C5           	PUSH BC
2020  563C E5           		PUSH HL
2021  563D D5           			PUSH DE
2022  563E D9           				EXX
2023  563F E5           				PUSH HL
2024  5640 D9           					EXX
2025  5641 DD 7E 0E     					LD A, (IX+14) ; columns
2026  5644              .CALL:
2027  5644 CD 6A 55     					CALL SHIFT_ROW
2028  5647 E1           				POP HL
2029  5648 DD 5E 0C     				LD E, (IX+12)
2030  564B DD 56 0D     				LD D, (IX+13) ; char data to next row
2031  564E 19           				ADD HL, DE
2032  564F D9           				EXX
2033  5650 E1           			POP HL
2034  5651 DD 5E 06     			LD E, (IX+6)
2035  5654 DD 56 07     			LD D, (IX+7) ; background to next row
2036  5657 19           			ADD HL, DE
2037  5658 EB           			EX DE, HL
2038  5659 E1           		POP HL
2039  565A DD 4E 0C     		LD C, (IX+12)
2040  565D DD 46 0D     		LD B, (IX+13) ; char data to next row
2041  5660 09           		ADD HL, BC
2042  5661 C1           	POP BC
2043  5662 10 D7        	DJNZ .LOOP
2044  5664 C9           	RET
2045  5665              ; *******************************************************************************************************
2046  5665
2047  5665              ; *******************************************************************************************************
2048  5665              ; function to handle CALL BLIT basic extension
2049  5665              ; rotates 1-bit character drawing horizontally with mask and character data and
2050  5665              ; fuses with background data and applies vertical shift too
2051  5665              ; BLIT ( INT request_data_ptr )
2052  5665              ; request_data_ptr described in SHIFT_MERGE_CHARACTER
2053  5665              ; will put ram in page 0 also, page 1 is already there
2054  5665              BLIT:
2055  5665              	; opening (
2056  5665 CD E8 4F     	CALL CHKCHAR
2057  5668 28           	DB '('
2058  5669              	; get pointer to request struct
2059  5669 DD 21 2F 54  	LD IX, FRMQNT
2060  566D CD 59 01     	CALL CALBAS
2061  5670 D5           	PUSH DE
2062  5671              	; ending )
2063  5671 CD E8 4F     	CALL CHKCHAR
2064  5674 29           	DB ')'
2065  5675
2066  5675 DD E1        	POP IX ; pointer to request struct
2067  5677
2068  5677 E5           	PUSH HL ; save position in BASIC buffer
2069  5678
2070  5678 FD 21 7F 56  	LD IY, .RET
2071  567C C3 BF 4E     	JP ENABLE_PAGE0
2072  567F              .RET:
2073  567F FB           	EI
2074  5680 CD D1 55     	CALL SHIFT_MERGE_CHARACTER
2075  5683
2076  5683 D1               POP DE
2077  5684 C1               POP BC
2078  5685 CD 36 4E         CALL RESTORE_PAGE_INFO
2079  5688
2080  5688 E1           	POP HL
2081  5689 C9           	RET
2082  568A              ; *******************************************************************************************************
2083  568A
2084  568A              ; *******************************************************************************************************
2085  568A              ; generic function to implement tiling
2086  568A              ; should be modified to call appropriate function for memory or vram
2087  568A              ; input IX=pointer to following structure
2088  568A              ; +00 tile_data_ptr
2089  568A              ; +02 tile_rows
2090  568A              ; +04 tile_columns
2091  568A              ; +06 destination_address
2092  568A              ; +08 dest_to_next_row_add_to_value
2093  568A              ; +10 num_horizontal_tiles
2094  568A              ; +12 num_vertical_tiles
2095  568A              ; modifies AF, BC, DE, HL
2096  568A              TILE:
2097  568A DD 6E 06     	LD L, (IX+6)
2098  568D DD 66 07     	LD H, (IX+7) ; destination address
2099  5690 22 FF 4C     	LD (TILETMP1), HL
2100  5693 DD 46 0C     	LD B, (IX+12) ; vertical tile number
2101  5696              .L1:
2102  5696 C5           	PUSH BC
2103  5697 DD 6E 00     		LD L, (IX+0)
2104  569A DD 66 01     		LD H, (IX+1) ; tile address
2105  569D 22 01 4D     		LD (TILETMP2), HL
2106  56A0 DD 46 02     		LD B, (IX+2) ; tile rows
2107  56A3              .L2:
2108  56A3 C5           		PUSH BC
2109  56A4              .CALL1:
2110  56A4 CD 00 00     			CALL 0
2111  56A7 DD 46 0A     			LD B, (IX+10) ; horizontal tile num
2112  56AA              .L3:
2113  56AA C5           			PUSH BC
2114  56AB 2A 01 4D     				LD HL, (TILETMP2)
2115  56AE DD 46 04     				LD B, (IX+4) ; tile columns
2116  56B1              .L4:
2117  56B1 C5           				PUSH BC
2118  56B2              .CALL2:
2119  56B2 CD 00 00     					CALL 0
2120  56B5 C1           				POP BC
2121  56B6 10 F9        				DJNZ .L4
2122  56B8 C1           			POP BC
2123  56B9 10 EF        			DJNZ .L3
2124  56BB 22 01 4D     			LD (TILETMP2), HL
2125  56BE 2A FF 4C     			LD HL, (TILETMP1)
2126  56C1 DD 5E 08     			LD E, (IX+8)
2127  56C4 DD 56 09     			LD D, (IX+9) ; add to value for dest next row
2128  56C7 19           			ADD HL, DE
2129  56C8 22 FF 4C     			LD (TILETMP1), HL
2130  56CB C1           		POP BC
2131  56CC 10 D5        		DJNZ .L2
2132  56CE C1           	POP BC
2133  56CF 10 C5        	DJNZ .L1
2134  56D1 C9           	RET
2135  56D2              ; *******************************************************************************************************
2136  56D2
2137  56D2              ; *******************************************************************************************************
2138  56D2              ; function to handle CALL TILERAM basic extension
2139  56D2              ; fills memory with tiles
2140  56D2              ; fuses with background data and applies vertical shift too
2141  56D2              ; TILERAM ( INT request_data_ptr )
2142  56D2              ; request_data_ptr described in TILE
2143  56D2              ; will put ram in page 0 also, page 1 is already there
2144  56D2              TILERAM:
2145  56D2              	; opening (
2146  56D2 CD E8 4F     	CALL CHKCHAR
2147  56D5 28           	DB '('
2148  56D6              	; get pointer to request struct
2149  56D6 DD 21 2F 54  	LD IX, FRMQNT
2150  56DA CD 59 01     	CALL CALBAS
2151  56DD D5           	PUSH DE
2152  56DE              	; ending )
2153  56DE CD E8 4F     	CALL CHKCHAR
2154  56E1 29           	DB ')'
2155  56E2
2156  56E2 DD E1        	POP IX ; pointer to request struct
2157  56E4
2158  56E4 E5           	PUSH HL ; save position in BASIC buffer
2159  56E5
2160  56E5 FD 21 EC 56  	LD IY, .RET
2161  56E9 C3 BF 4E     	JP ENABLE_PAGE0
2162  56EC              .RET:
2163  56EC FB           	EI
2164  56ED              	; set RAM functions to call
2165  56ED 21 03 57     	LD HL, .TILECOPY
2166  56F0 22 B3 56     	LD (TILE.CALL2+1), HL
2167  56F3 21 14 57     	LD HL, .SETDESTROW
2168  56F6 22 A5 56     	LD (TILE.CALL1+1), HL
2169  56F9 CD 8A 56     	CALL TILE
2170  56FC
2171  56FC D1               POP DE
2172  56FD C1               POP BC
2173  56FE CD 36 4E         CALL RESTORE_PAGE_INFO
2174  5701
2175  5701 E1           	POP HL
2176  5702 C9           	RET
2177  5703              .TILECOPY:
2178  5703 ED A0       > LDI
2178  5705 ED A0       > LDI
2178  5707 ED A0       > LDI
2178  5709 ED A0       > LDI
2178  570B ED A0       > LDI
2178  570D ED A0       > LDI
2178  570F ED A0       > LDI
2178  5711 ED A0       > LDI
2179  5713 C9           	RET
2180  5714              .SETDESTROW:
2181  5714 ED 5B FF 4C  	LD DE, (TILETMP1)
2182  5718 C9           	RET
2183  5719              ; *******************************************************************************************************
2184  5719
2185  5719              ; *******************************************************************************************************
2186  5719              ; function to handle CALL TILEVRM basic extension
2187  5719              ; fills vram with tiles
2188  5719              ; fuses with background data and applies vertical shift too
2189  5719              ; TILEVRM ( INT request_data_ptr )
2190  5719              ; request_data_ptr described in TILE
2191  5719              ; will put ram in page 0 also, page 1 is already there
2192  5719              TILEVRM:
2193  5719              	; opening (
2194  5719 CD E8 4F     	CALL CHKCHAR
2195  571C 28           	DB '('
2196  571D              	; get pointer to request struct
2197  571D DD 21 2F 54  	LD IX, FRMQNT
2198  5721 CD 59 01     	CALL CALBAS
2199  5724 D5           	PUSH DE
2200  5725              	; ending )
2201  5725 CD E8 4F     	CALL CHKCHAR
2202  5728 29           	DB ')'
2203  5729
2204  5729 DD E1        	POP IX ; pointer to request struct
2205  572B
2206  572B E5           	PUSH HL ; save position in BASIC buffer
2207  572C
2208  572C FD 21 33 57  	LD IY, .RET
2209  5730 C3 BF 4E     	JP ENABLE_PAGE0
2210  5733              .RET:
2211  5733 FB           	EI
2212  5734              	; set RAM functions to call
2213  5734 21 4A 57     	LD HL, .TILECOPY
2214  5737 22 B3 56     	LD (TILE.CALL2+1), HL
2215  573A 21 50 57     	LD HL, .SETDESTROW
2216  573D 22 A5 56     	LD (TILE.CALL1+1), HL
2217  5740 CD 8A 56     	CALL TILE
2218  5743
2219  5743 D1               POP DE
2220  5744 C1               POP BC
2221  5745 CD 36 4E         CALL RESTORE_PAGE_INFO
2222  5748
2223  5748 E1           	POP HL
2224  5749 C9           	RET
2225  574A              .TILECOPY:
2226  574A 01 98 08     	LD BC, #0898
2227  574D               IFNDEF EXCLUDE_VRAM_CMDS
2228  574D C3 BB 51     	JP MEMVRM.BBYTECOPY
2229  5750               ELSE
2230  5750 ~            .BBYTECOPY:
2231  5750 ~            	OUTI
2232  5750 ~            	JP	NZ, .BBYTECOPY
2233  5750 ~            	RET
2234  5750               ENDIF
2235  5750              .SETDESTROW:
2236  5750 2A FF 4C     	LD HL, (TILETMP1)
2237  5753 C3 F4 4D     	JP SETWRT_LOCAL
2238  5756              ; *******************************************************************************************************
2239  5756
2240  5756              ; *******************************************************************************************************
2241  5756              ; generic function to implement rectangle data copy
2242  5756              ; should be modified to call appropriate function for memory or vram
2243  5756              ; input IX=pointer to following structure
2244  5756              ; +00 source data pointer
2245  5756              ; +02 num bytes in a row
2246  5756              ; +04 number of rows
2247  5756              ; +06 source add-to value till next row
2248  5756              ; +08 destination address
2249  5756              ; +10 destination add-to value till next row
2250  5756              ; modifies AF, BC, DE, HL
2251  5756              RECTANGLE_COPY:
2252  5756 DD 6E 00     	LD L, (IX+0)
2253  5759 DD 66 01     	LD H, (IX+1) ; source address
2254  575C DD 5E 08     	LD E, (IX+8)
2255  575F DD 56 09     	LD D, (IX+9) ; destination
2256  5762 DD 46 04     	LD B, (IX+4) ; row number
2257  5765              .L1:
2258  5765 C5           	PUSH BC
2259  5766 E5           		PUSH HL
2260  5767 D5           			PUSH DE
2261  5768 DD 4E 02     				LD C, (IX+2)
2262  576B DD 46 03     				LD B, (IX+3) ; num bytes in a row
2263  576E              .CALL1:
2264  576E CD 00 00     				CALL 0 ; set destination address from DE
2265  5771              .CALL2:
2266  5771 CD 00 00     				CALL 0 ; copy data fn
2267  5774 E1           			POP HL
2268  5775 DD 4E 0A     			LD C, (IX+10)
2269  5778 DD 46 0B     			LD B, (IX+11) ; destination add-to
2270  577B 09           			ADD HL, BC
2271  577C EB           			EX DE, HL
2272  577D E1           		POP HL
2273  577E DD 4E 06     		LD C, (IX+6)
2274  5781 DD 46 07     		LD B, (IX+7) ; src add-to
2275  5784 09           		ADD HL, BC
2276  5785 C1           	POP BC
2277  5786 10 DD        	DJNZ .L1
2278  5788 C9           	RET
2279  5789              ; *******************************************************************************************************
2280  5789
2281  5789              ; *******************************************************************************************************
2282  5789              ; function to handle CALL BOXMEMCPY basic extension
2283  5789              ; copies data with window like boundaries to ram
2284  5789              ; BOXMEMCPY ( INT request_data_ptr )
2285  5789              ; request_data_ptr described in RECTANGLE_COPY
2286  5789              ; will put ram in page 0 also, page 1 is already there
2287  5789              BOXMEMCPY:
2288  5789              	; opening (
2289  5789 CD E8 4F     	CALL CHKCHAR
2290  578C 28           	DB '('
2291  578D              	; get pointer to request struct
2292  578D DD 21 2F 54  	LD IX, FRMQNT
2293  5791 CD 59 01     	CALL CALBAS
2294  5794 D5           	PUSH DE
2295  5795              	; ending )
2296  5795 CD E8 4F     	CALL CHKCHAR
2297  5798 29           	DB ')'
2298  5799
2299  5799 DD E1        	POP IX ; pointer to request struct
2300  579B
2301  579B E5           	PUSH HL ; save position in BASIC buffer
2302  579C
2303  579C FD 21 A3 57  	LD IY, .RET
2304  57A0 C3 BF 4E     	JP ENABLE_PAGE0
2305  57A3              .RET:
2306  57A3 FB           	EI
2307  57A4              	; set RAM functions to call
2308  57A4 21 00 00     	LD HL, 0
2309  57A7 22 6E 57     	LD (RECTANGLE_COPY.CALL1), HL ; NOP NOP
2310  57AA 22 70 57     	LD (RECTANGLE_COPY.CALL1+2), HL ; NOP NOP
2311  57AD 21 ED B0     	LD HL, #B0ED ; LDIR
2312  57B0 22 72 57     	LD (RECTANGLE_COPY.CALL1+4), HL
2313  57B3 CD 56 57     	CALL RECTANGLE_COPY
2314  57B6
2315  57B6 D1               POP DE
2316  57B7 C1               POP BC
2317  57B8 CD 36 4E         CALL RESTORE_PAGE_INFO
2318  57BB
2319  57BB E1           	POP HL
2320  57BC C9           	RET
2321  57BD              ; *******************************************************************************************************
2322  57BD
2323  57BD              ; *******************************************************************************************************
2324  57BD              ; function to handle CALL BOXMEMVRM basic extension
2325  57BD              ; copies data with window like boundaries to ram
2326  57BD              ; BOXMEMVRM ( INT request_data_ptr )
2327  57BD              ; request_data_ptr described in RECTANGLE_COPY
2328  57BD              ; will put ram in page 0 also, page 1 is already there
2329  57BD              BOXMEMVRM:
2330  57BD              	; opening (
2331  57BD CD E8 4F     	CALL CHKCHAR
2332  57C0 28           	DB '('
2333  57C1              	; get pointer to request struct
2334  57C1 DD 21 2F 54  	LD IX, FRMQNT
2335  57C5 CD 59 01     	CALL CALBAS
2336  57C8 D5           	PUSH DE
2337  57C9              	; ending )
2338  57C9 CD E8 4F     	CALL CHKCHAR
2339  57CC 29           	DB ')'
2340  57CD
2341  57CD DD E1        	POP IX ; pointer to request struct
2342  57CF
2343  57CF E5           	PUSH HL ; save position in BASIC buffer
2344  57D0
2345  57D0 FD 21 D7 57  	LD IY, .RET
2346  57D4 C3 BF 4E     	JP ENABLE_PAGE0
2347  57D7              .RET:
2348  57D7 FB           	EI
2349  57D8              	; set RAM functions to call
2350  57D8 21 F6 57     	LD HL, .SETDEST
2351  57DB 22 6F 57     	LD (RECTANGLE_COPY.CALL1+1), HL
2352  57DE 21 FC 57     	LD HL, .COPYDATA
2353  57E1 22 72 57     	LD (RECTANGLE_COPY.CALL2+1), HL
2354  57E4 3E CD        	LD A, #CD ; CALL
2355  57E6 32 6E 57     	LD (RECTANGLE_COPY.CALL1), A
2356  57E9 32 71 57     	LD (RECTANGLE_COPY.CALL2), A
2357  57EC CD 56 57     	CALL RECTANGLE_COPY
2358  57EF
2359  57EF D1               POP DE
2360  57F0 C1               POP BC
2361  57F1 CD 36 4E         CALL RESTORE_PAGE_INFO
2362  57F4
2363  57F4 E1           	POP HL
2364  57F5 C9           	RET
2365  57F6              .SETDEST:
2366  57F6 EB           	EX DE, HL
2367  57F7 CD F4 4D     	CALL SETWRT_LOCAL
2368  57FA EB           	EX DE, HL
2369  57FB C9           	RET
2370  57FC              .COPYDATA:
2371  57FC 41           	LD B, C
2372  57FD 0E 98        	LD C, #98
2373  57FF               IFNDEF EXCLUDE_VRAM_CMDS
2374  57FF C3 BB 51     	JP MEMVRM.BBYTECOPY
2375  5802               ELSE
2376  5802 ~            	JP TILEVRM.BBYTECOPY
2377  5802               ENDIF
2378  5802              ; *******************************************************************************************************
2379  5802               ENDIF
2380  5802
2381  5802              EXT_END:
2382  5802
# file closed: asm\main.asm
