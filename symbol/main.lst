# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; INCLUDE "system_variables.inc"
   4  4000              ; INCLUDE "system_hooks.inc"
   5  4000              ; INCLUDE "bios_calls.inc"
   6  4000
   7  4000              CHPUT   EQU     #A2
   8  4000              CALBAS	EQU		#159
   9  4000              ERRHAND EQU     #406F
  10  4000              FRMEVL  EQU     #4C64
  11  4000              FRESTR	EQU		#67D0
  12  4000              ; FRMQNT = formula quantificator
  13  4000              ; input HL=pointer to current program expression
  14  4000              ; output HL=next address
  15  4000              ; output DE=integer datum
  16  4000              FRMQNT	EQU		#542F
  17  4000              ; GETBYT = get byte parameter
  18  4000              ; input HL=pointer to current program expression
  19  4000              ; output HL=next address
  20  4000              ; output A=E=byte read
  21  4000              GETBYT	EQU		#521C
  22  4000              CHRGTR  EQU     #4666
  23  4000              SYNCHR	EQU		#558C
  24  4000              VALTYP  EQU     #F663
  25  4000              USR     EQU     #F7F8
  26  4000              PROCNM	EQU		#FD89
  27  4000              BIOS_FILVRM  EQU     #56
  28  4000              CLIKSW	EQU		#F3DB
  29  4000
  30  4000              RAMAD0	EQU	0F341h	; Main-RAM Slot (00000h~03FFFh)
  31  4000              RAMAD1	EQU	0F342h	; Main-RAM Slot (04000h~07FFFh)
  32  4000              RAMAD2	EQU	0F343h	; Main-RAM Slot (08000h~0BFFFh)
  33  4000              RAMAD3	EQU	0F344h	; Main-RAM Slot (0C000h~0FFFFh)
  34  4000              EXPTBL	EQU #FCC1
  35  4000
  36  4000              ; BASIC error codes
  37  4000              ;01 NEXT without FOR
  38  4000              ;02 Syntax error
  39  4000              ;03 RETURN without GOSUB
  40  4000              ;04 Out of DATA
  41  4000              ;05 Illegal function call
  42  4000              ;06 Overflow
  43  4000              ;07 Out of memory
  44  4000              ;08 Undefined line number
  45  4000              ;09 Subscript out of range
  46  4000              ;10 Redimensioned array
  47  4000              ;11 Division by zero
  48  4000              ;12 Illegal direct
  49  4000              ;13 Type mismatch
  50  4000              ;14 Out of string space
  51  4000              ;15 String too long
  52  4000              ;16 String formula too complex
  53  4000              ;17 Can't CONTINUE
  54  4000              ;18 Undefined user function
  55  4000              ;19 Device I/O error
  56  4000              ;20 Verify error
  57  4000              ;21 No RESUME
  58  4000              ;22 RESUME without error
  59  4000              ;23 Unprintable error
  60  4000              ;24 Missing operand
  61  4000              ;25 Line buffer overflow
  62  4000              ;50 FIELD overflow
  63  4000              ;51 Internal error
  64  4000              ;52 Bad file number
  65  4000              ;53 File not found
  66  4000              ;54 File already open
  67  4000              ;55 Input past end
  68  4000              ;56 Bad file name
  69  4000              ;57 Direct statement in file
  70  4000              ;58 Sequential I/O only
  71  4000              ;59 File not OPEN
  72  4000
  73  4000
  74  4000               ; simulate cartridge with BASIC extension
  75  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  75  4004 4F 4E 00 00
  75  4008 00 00 00 00
  75  400C 00 00 00 00
  76  4010
  77  4010              ; this location #400A stores last location used by basic extension
  78  4010              ; free memory after that point
  79  4010 45 52         DW EXT_END
  80  4012
  81  4012              ; binary included AKG player compiled at #4012
  82  4012               INCBIN "bin/AKG.bin"
  83  4CEE               INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CEE              MAIN_PLAYER_START EQU 04012H
   2+ 4CEE              PLY_AKG_START EQU 04012H
   3+ 4CEE              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401BH
   4+ 4CEE              PLY_AKG_INITSOUNDEFFECTS EQU 0401BH
   5+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 0401FH
   6+ 4CEE              PLY_AKG_PLAYSOUNDEFFECT EQU 0401FH
   7+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04020H
   8+ 4CEE              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04020H
   9+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04047H
  10+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04047H
  11+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04055H
  12+ 4CEE              PLY_AKG_PSES_PLAY EQU 0408EH
  13+ 4CEE              PLY_AKG_PSES_READFIRSTBYTE EQU 04097H
  14+ 4CEE              PLY_AKG_PSES_S_ENDORLOOP EQU 040AFH
  15+ 4CEE              PLY_AKG_PSES_S_LOOP EQU 040BAH
  16+ 4CEE              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C0H
  17+ 4CEE              PLY_AKG_PSES_NOTREACHED EQU 040D3H
  18+ 4CEE              PLY_AKG_PSES_HARDWAREONLY EQU 040D7H
  19+ 4CEE              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040DEH
  20+ 4CEE              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F0H
  21+ 4CEE              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FAH
  22+ 4CEE              PLY_AKG_PSES_H_AFTERRETRIG EQU 04104H
  23+ 4CEE              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 04118H
  24+ 4CEE              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411DH
  25+ 4CEE              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04125H
  26+ 4CEE              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04130H
  27+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413CH
  28+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 0413EH
  29+ 4CEE              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04144H
  30+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 04148H
  31+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 04148H
  32+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414AH
  33+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414AH
  34+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414AH
  35+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414BH
  36+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414CH
  37+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04150H
  38+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04150H
  39+ 4CEE              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04150H
  40+ 4CEE              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 04158H
  41+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04160H
  42+ 4CEE              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04160H
  43+ 4CEE              PLY_AKG_INIT EQU 04160H
  44+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04160H
  45+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 0418EH
  46+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A2H
  47+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B4H
  48+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D3H
  49+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E0H
  50+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL EQU 041E6H
  51+ 4CEE              PLY_AKG_INITTABLE0 EQU 041E9H
  52+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041E9H
  53+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04203H
  54+ 4CEE              PLY_AKG_INITTABLE0_END EQU 04203H
  55+ 4CEE              PLY_AKG_INITTABLE1 EQU 04203H
  56+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04203H
  57+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04207H
  58+ 4CEE              PLY_AKG_INITTABLE1_END EQU 04207H
  59+ 4CEE              PLY_AKG_INITTABLEORA EQU 04207H
  60+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04207H
  61+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 0421FH
  62+ 4CEE              PLY_AKG_INITTABLEORA_END EQU 0421FH
  63+ 4CEE              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 0421FH
  64+ 4CEE              PLY_AKG_STOP EQU 0421FH
  65+ 4CEE              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04231H
  66+ 4CEE              PLY_AKG_PLAY EQU 04231H
  67+ 4CEE              PLY_AKG_TICKDECREASINGCOUNTER EQU 04239H
  68+ 4CEE              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 0423FH
  69+ 4CEE              PLY_AKG_READLINKER EQU 04244H
  70+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04244H
  71+ 4CEE              PLY_AKG_READLINKER_PTLINKER EQU 04244H
  72+ 4CEE              PLY_AKG_READLINKER_NOLOOP EQU 0424FH
  73+ 4CEE              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 04288H
  74+ 4CEE              PLY_AKG_READLINE EQU 0428BH
  75+ 4CEE              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428BH
  76+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04291H
  77+ 4CEE              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04291H
  78+ 4CEE              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 0429EH
  79+ 4CEE              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A2H
  80+ 4CEE              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A5H
  81+ 4CEE              PLY_AKG_SPEEDTRACK_END EQU 042A8H
  82+ 4CEE              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042A8H
  83+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042AEH
  84+ 4CEE              PLY_AKG_EVENTTRACK_PTTRACK EQU 042AEH
  85+ 4CEE              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BBH
  86+ 4CEE              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042BFH
  87+ 4CEE              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C2H
  88+ 4CEE              PLY_AKG_EVENTTRACK_END EQU 042C5H
  89+ 4CEE              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C5H
  90+ 4CEE              PLY_AKG_CHANNEL1_READTRACK EQU 042D1H
  91+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D1H
  92+ 4CEE              PLY_AKG_CHANNEL1_PTTRACK EQU 042D1H
  93+ 4CEE              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042ECH
  94+ 4CEE              PLY_AKG_CHANNEL1_WAIT EQU 042F7H
  95+ 4CEE              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 042FEH
  96+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 042FEH
  97+ 4CEE              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 042FEH
  98+ 4CEE              PLY_AKG_CHANNEL1_NOTE EQU 04307H
  99+ 4CEE              PLY_AKG_BASENOTEINDEX EQU 04307H
 100+ 4CEE              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 04309H
 101+ 4CEE              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 04309H
 102+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 04319H
 103+ 4CEE              PLY_AKG_INSTRUMENTSTABLE EQU 04319H
 104+ 4CEE              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432BH
 105+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433BH
 106+ 4CEE              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04363H
 107+ 4CEE              PLY_AKG_CHANNEL1_READCELLEND EQU 04366H
 108+ 4CEE              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04366H
 109+ 4CEE              PLY_AKG_CHANNEL2_READTRACK EQU 04372H
 110+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04372H
 111+ 4CEE              PLY_AKG_CHANNEL2_PTTRACK EQU 04372H
 112+ 4CEE              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438DH
 113+ 4CEE              PLY_AKG_CHANNEL2_WAIT EQU 04398H
 114+ 4CEE              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 0439FH
 115+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 0439FH
 116+ 4CEE              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 0439FH
 117+ 4CEE              PLY_AKG_CHANNEL2_NOTE EQU 043A8H
 118+ 4CEE              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043ADH
 119+ 4CEE              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043ADH
 120+ 4CEE              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043CFH
 121+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043DFH
 122+ 4CEE              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04407H
 123+ 4CEE              PLY_AKG_CHANNEL2_READCELLEND EQU 0440AH
 124+ 4CEE              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440AH
 125+ 4CEE              PLY_AKG_CHANNEL3_READTRACK EQU 04416H
 126+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04416H
 127+ 4CEE              PLY_AKG_CHANNEL3_PTTRACK EQU 04416H
 128+ 4CEE              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04431H
 129+ 4CEE              PLY_AKG_CHANNEL3_WAIT EQU 0443CH
 130+ 4CEE              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04443H
 131+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04443H
 132+ 4CEE              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04443H
 133+ 4CEE              PLY_AKG_CHANNEL3_NOTE EQU 0444CH
 134+ 4CEE              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04451H
 135+ 4CEE              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04451H
 136+ 4CEE              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04473H
 137+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04483H
 138+ 4CEE              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ABH
 139+ 4CEE              PLY_AKG_CHANNEL3_READCELLEND EQU 044AEH
 140+ 4CEE              PLY_AKG_CURRENTSPEED EQU 044AEH
 141+ 4CEE              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B0H
 142+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B3H
 143+ 4CEE              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B3H
 144+ 4CEE              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B6H
 145+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044B9H
 146+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044B9H
 147+ 4CEE              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C5H
 148+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CCH
 149+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044CFH
 150+ 4CEE              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D5H
 151+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044D8H
 152+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044D8H
 153+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E6H
 154+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EBH
 155+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F6H
 156+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044F9H
 157+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044F9H
 158+ 4CEE              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FCH
 159+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 044FFH
 160+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE EQU 044FFH
 161+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 04508H
 162+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04512H
 163+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04515H
 164+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04515H
 165+ 4CEE              PLY_AKG_CHANNEL1_PITCH EQU 04515H
 166+ 4CEE              PLY_AKG_CHANNEL1_ISPITCH EQU 04518H
 167+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451DH
 168+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451DH
 169+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04521H
 170+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04523H
 171+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04525H
 172+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452CH
 173+ 4CEE              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452DH
 174+ 4CEE              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04530H
 175+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04530H
 176+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454CH
 177+ 4CEE              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454CH
 178+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 04559H
 179+ 4CEE              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455DH
 180+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456DH
 181+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456DH
 182+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 0456EH
 183+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 0456FH
 184+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04571H
 185+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04571H
 186+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04571H
 187+ 4CEE              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04572H
 188+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04573H
 189+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04575H
 190+ 4CEE              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04575H
 191+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04575H
 192+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04575H
 193+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04575H
 194+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_END EQU 04578H
 195+ 4CEE              PLY_AKG_CHANNEL1_PITCH_END EQU 0457AH
 196+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04582H
 197+ 4CEE              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04582H
 198+ 4CEE              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04585H
 199+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 04588H
 200+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 04588H
 201+ 4CEE              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04594H
 202+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459BH
 203+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 0459EH
 204+ 4CEE              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A4H
 205+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A7H
 206+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A7H
 207+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B5H
 208+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BAH
 209+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C5H
 210+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045C8H
 211+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045C8H
 212+ 4CEE              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CBH
 213+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045CEH
 214+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045CEH
 215+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D7H
 216+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E1H
 217+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E4H
 218+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E4H
 219+ 4CEE              PLY_AKG_CHANNEL2_PITCH EQU 045E4H
 220+ 4CEE              PLY_AKG_CHANNEL2_ISPITCH EQU 045E7H
 221+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045ECH
 222+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045ECH
 223+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F0H
 224+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F2H
 225+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F4H
 226+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FBH
 227+ 4CEE              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FCH
 228+ 4CEE              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 045FFH
 229+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 045FFH
 230+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461BH
 231+ 4CEE              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461BH
 232+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 04628H
 233+ 4CEE              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462CH
 234+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463CH
 235+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463CH
 236+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463DH
 237+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 0463EH
 238+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04640H
 239+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04640H
 240+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04640H
 241+ 4CEE              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04641H
 242+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04642H
 243+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04644H
 244+ 4CEE              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04644H
 245+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04644H
 246+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04644H
 247+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04644H
 248+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_END EQU 04647H
 249+ 4CEE              PLY_AKG_CHANNEL2_PITCH_END EQU 04649H
 250+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04651H
 251+ 4CEE              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04651H
 252+ 4CEE              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04654H
 253+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04657H
 254+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04657H
 255+ 4CEE              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04663H
 256+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466AH
 257+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466DH
 258+ 4CEE              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04673H
 259+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04676H
 260+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04676H
 261+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04684H
 262+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 04689H
 263+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04694H
 264+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04697H
 265+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04697H
 266+ 4CEE              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469AH
 267+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469DH
 268+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469DH
 269+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A6H
 270+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B0H
 271+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B3H
 272+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B3H
 273+ 4CEE              PLY_AKG_CHANNEL3_PITCH EQU 046B3H
 274+ 4CEE              PLY_AKG_CHANNEL3_ISPITCH EQU 046B6H
 275+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BBH
 276+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BBH
 277+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046BFH
 278+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C1H
 279+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C3H
 280+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CAH
 281+ 4CEE              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CBH
 282+ 4CEE              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046CEH
 283+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046CEH
 284+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046EAH
 285+ 4CEE              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046EAH
 286+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F7H
 287+ 4CEE              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FBH
 288+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470BH
 289+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470BH
 290+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470CH
 291+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470DH
 292+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 0470FH
 293+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 0470FH
 294+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 0470FH
 295+ 4CEE              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04710H
 296+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04711H
 297+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04713H
 298+ 4CEE              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04713H
 299+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04713H
 300+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04713H
 301+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04713H
 302+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_END EQU 04716H
 303+ 4CEE              PLY_AKG_CHANNEL3_PITCH_END EQU 04718H
 304+ 4CEE              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04724H
 305+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04724H
 306+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04724H
 307+ 4CEE              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04727H
 308+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 04729H
 309+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 0472FH
 310+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04732H
 311+ 4CEE              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04732H
 312+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04735H
 313+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 0473EH
 314+ 4CEE              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04746H
 315+ 4CEE              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04753H
 316+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04753H
 317+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04753H
 318+ 4CEE              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04756H
 319+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 04758H
 320+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 0475EH
 321+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04761H
 322+ 4CEE              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04761H
 323+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04764H
 324+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476DH
 325+ 4CEE              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04775H
 326+ 4CEE              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04783H
 327+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04783H
 328+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04783H
 329+ 4CEE              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04786H
 330+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 04788H
 331+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 0478EH
 332+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04791H
 333+ 4CEE              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04791H
 334+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04794H
 335+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479DH
 336+ 4CEE              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A5H
 337+ 4CEE              PLY_AKG_SENDPSGREGISTERS EQU 047B4H
 338+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BCH
 339+ 4CEE              PLY_AKG_PSGREG01_INSTR EQU 047BCH
 340+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CCH
 341+ 4CEE              PLY_AKG_PSGREG23_INSTR EQU 047CCH
 342+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DDH
 343+ 4CEE              PLY_AKG_PSGREG45_INSTR EQU 047DDH
 344+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047EEH
 345+ 4CEE              PLY_AKG_PSGREG6_8_INSTR EQU 047EEH
 346+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 047FFH
 347+ 4CEE              PLY_AKG_PSGREG9_10_INSTR EQU 047FFH
 348+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04810H
 349+ 4CEE              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04810H
 350+ 4CEE              PLY_AKG_PSGREG13_OLDVALUE EQU 04825H
 351+ 4CEE              PLY_AKG_RETRIG EQU 04827H
 352+ 4CEE              PLY_AKG_PSGREG13_INSTR EQU 04829H
 353+ 4CEE              PLY_AKG_PSGREG13_END EQU 04838H
 354+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 04838H
 355+ 4CEE              PLY_AKG_SAVESP EQU 04838H
 356+ 4CEE              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483CH
 357+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTS EQU 04844H
 358+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04851H
 359+ 4CEE              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04851H
 360+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTS EQU 04859H
 361+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04866H
 362+ 4CEE              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04866H
 363+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTS EQU 0486EH
 364+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 04879H
 365+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS EQU 04879H
 366+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 04888H
 367+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 04888H
 368+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 0488FH
 369+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 0489FH
 370+ 4CEE              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 0489FH
 371+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A6H
 372+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A6H
 373+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048A9H
 374+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B2H
 375+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B2H
 376+ 4CEE              PLY_AKG_READINSTRUMENTCELL EQU 048B8H
 377+ 4CEE              PLY_AKG_NOSOFTNOHARD EQU 048C5H
 378+ 4CEE              PLY_AKG_NSNH_NONOISE EQU 048DAH
 379+ 4CEE              PLY_AKG_SOFT EQU 048DDH
 380+ 4CEE              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E4H
 381+ 4CEE              PLY_AKG_S_NOTSIMPLE EQU 048ECH
 382+ 4CEE              PLY_AKG_S_AFTERSIMPLETEST EQU 048EFH
 383+ 4CEE              PLY_AKG_HARDTOSOFT EQU 048FCH
 384+ 4CEE              PLY_AKG_HS_JUMPRATIO EQU 04907H
 385+ 4CEE              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04934H
 386+ 4CEE              PLY_AKG_ENDWITHOUTLOOP EQU 04936H
 387+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04936H
 388+ 4CEE              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04936H
 389+ 4CEE              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 0493EH
 390+ 4CEE              PLY_AKG_SH_JUMPRATIO EQU 0494BH
 391+ 4CEE              PLY_AKG_SH_JUMPRATIOEND EQU 0496CH
 392+ 4CEE              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497BH
 393+ 4CEE              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04981H
 394+ 4CEE              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499BH
 395+ 4CEE              PLY_AKG_H_RETRIGEND EQU 049ADH
 396+ 4CEE              PLY_AKG_H_AFTERRETRIG EQU 049AEH
 397+ 4CEE              PLY_AKG_ENDWITHLOOP EQU 049C0H
 398+ 4CEE              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C7H
 399+ 4CEE              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DDH
 400+ 4CEE              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EBH
 401+ 4CEE              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FBH
 402+ 4CEE              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A09H
 403+ 4CEE              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A18H
 404+ 4CEE              PLY_AKG_SHOHS_RETRIGEND EQU 04A27H
 405+ 4CEE              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A28H
 406+ 4CEE              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3AH
 407+ 4CEE              PLY_AKG_EFFECTTABLE EQU 04A48H
 408+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A48H
 409+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6CH
 410+ 4CEE              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6CH
 411+ 4CEE              PLY_AKG_EFFECT_RESET EQU 04A6FH
 412+ 4CEE              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A71H
 413+ 4CEE              PLY_AKG_EFFECT_VOLUME EQU 04A8CH
 414+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A98H
 415+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04A9EH
 416+ 4CEE              PLY_AKG_ARPEGGIOSTABLE EQU 04A9EH
 417+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC5H
 418+ 4CEE              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACCH
 419+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD2H
 420+ 4CEE              PLY_AKG_PITCHESTABLE EQU 04AD2H
 421+ 4CEE              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AF9H
 422+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B00H
 423+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B11H
 424+ 4CEE              PLY_AKG_EFFECT_PITCHDOWN EQU 04B18H
 425+ 4CEE              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B28H
 426+ 4CEE              PLY_AKG_EFFECT_PITCHUP EQU 04B3DH
 427+ 4CEE              PLY_AKG_EFFECT_PITCHSTOP EQU 04B4FH
 428+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B56H
 429+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B80H
 430+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B80H
 431+ 4CEE              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B99H
 432+ 4CEE              PLY_AKG_EFFECT_GLIDESPEED EQU 04B99H
 433+ 4CEE              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BABH
 434+ 4CEE              PLY_AKG_EFFECT_LEGATO EQU 04BC1H
 435+ 4CEE              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD5H
 436+ 4CEE              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDDH
 437+ 4CEE              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE5H
 438+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEDH
 439+ 4CEE              PLY_AKG_EVENT EQU 04BEDH
 440+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BEEH
 441+ 4CEE              PLY_AKG_PERIODTABLE EQU 04BEEH
 442+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BEEH
 443+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CEEH
 444+ 4CEE              PLY_AKG_PERIODTABLE_END EQU 04CEEH
 445+ 4CEE              PLY_AKG_END EQU 04CEEH
 446+ 4CEE              MAIN_PLAYER_END EQU 04CEEH
 447+ 4CEE              TESTEREND EQU 04CEEH
 448+ 4CEE
# file closed: ./symbol/AKG.sym
  84  4CEE
  85  4CEE              ORIG.HTIMI:
  86  4CEE 00 00 00 00  	DB 0, 0, 0, 0, 0
  86  4CF2 00
  87  4CF3               EXPORT ORIG.HTIMI
  88  4CF3
  89  4CF3              MUSIC_INIT_STATUS:
  90  4CF3 00            DB 0
  91  4CF4              SFX_INIT_STATUS:
  92  4CF4 00            DB 0
  93  4CF5              SOUND_ENABLED:
  94  4CF5 00            DB 0
  95  4CF6
  96  4CF6              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
  97  4CF6              ; per starting letter, if no commands with this letter, NULL value
  98  4CF6              CMDS:
  99  4CF6 00 00            DW 0 ; A
 100  4CF8 00 00            DW 0 ; B
 101  4CFA 00 00            DW 0 ; C
 102  4CFC 00 00            DW 0 ; D
 103  4CFE 00 00            DW 0 ; E
 104  4D00 51 4D            DW CMDS_F; F
 105  4D02 64 4D            DW CMDS_G; G
 106  4D04 00 00            DW 0 ; H
 107  4D06 00 00            DW 0 ; I
 108  4D08 00 00            DW 0 ; J
 109  4D0A 00 00            DW 0 ; K
 110  4D0C 34 4D            DW CMDS_L ; L
 111  4D0E 3E 4D            DW CMDS_M ; M
 112  4D10 00 00            DW 0 ; N
 113  4D12 00 00            DW 0 ; O
 114  4D14 00 00            DW 0 ; P
 115  4D16 00 00            DW 0 ; Q
 116  4D18 00 00            DW 0 ; R
 117  4D1A 78 4D            DW CMDS_S ; S
 118  4D1C 00 00            DW 0 ; T
 119  4D1E 2A 4D            DW CMDS_U ; U
 120  4D20 6E 4D            DW CMDS_V ; V
 121  4D22 00 00            DW 0 ; W
 122  4D24 00 00            DW 0 ; X
 123  4D26 00 00            DW 0 ; Y
 124  4D28 00 00            DW 0 ; Z
 125  4D2A
 126  4D2A              CMDS_U:
 127  4D2A 55 50 52 49  	DEFB	"UPRINT",0      ; Print upper case string
 127  4D2E 4E 54 00
 128  4D31 8C 4E        	DEFW	UPRINT
 129  4D33 00               DB 0
 130  4D34              CMDS_L:
 131  4D34 4C 50 52 49  	DEFB	"LPRINT",0      ; Print lower case string
 131  4D38 4E 54 00
 132  4D3B A9 4E        	DEFW	LPRINT
 133  4D3D 00               DB 0
 134  4D3E              CMDS_M:
 135  4D3E 4D 45 4D 56      DB "MEMVRM", 0
 135  4D42 52 4D 00
 136  4D45 9E 50            DW MEMVRM
 137  4D47 4D 45 4D 43  	DB "MEMCPY", 0
 137  4D4B 50 59 00
 138  4D4E 10 4F        	DW MEMCPY
 139  4D50 00               DB 0
 140  4D51              CMDS_F:
 141  4D51 46 49 4C 56      DB "FILVRM", 0
 141  4D55 52 4D 00
 142  4D58 80 4F            DW FILVRM
 143  4D5A 46 49 4C 52      DB "FILRAM", 0
 143  4D5E 41 4D 00
 144  4D61 C7 4F            DW FILRAM
 145  4D63 00               DB 0
 146  4D64              CMDS_G:
 147  4D64 47 45 4E 43      DB "GENCAL", 0
 147  4D68 41 4C 00
 148  4D6B 45 50            DW GENCAL
 149  4D6D 00           	DB	0
 150  4D6E              CMDS_V:
 151  4D6E 56 52 4D 4D  	DB "VRMMEM", 0
 151  4D72 45 4D 00
 152  4D75 25 51        	DW VRMMEM
 153  4D77 00           	DB 0
 154  4D78              CMDS_S:
 155  4D78 53 4E 44 50  	DB "SNDPLYINI", 0
 155  4D7C 4C 59 49 4E
 155  4D80 49 00
 156  4D82 E1 51        	DW SNDPLYINIT
 157  4D84 53 4E 44 50  	DB "SNDPLYON", 0
 157  4D88 4C 59 4F 4E
 157  4D8C 00
 158  4D8D 32 52        	DW SNDPLYON
 159  4D8F 00           	DB 0
 160  4D90
 161  4D90              ; ****************************************************************************************************
 162  4D90              ; function gets slot and subslot data for specific page
 163  4D90              ; input A=page (0, 1 or 2)
 164  4D90              ; output B = 0A8H register value
 165  4D90              ; output D = 0 is no subslots, 1 if yes
 166  4D90              ; output C = 0A8H value when page 3 slot equals to requested page slot
 167  4D90              ; output E = subslot value if present
 168  4D90              ; modifies AF, BC, DE, HL
 169  4D90              GET_PAGE_INFO:
 170  4D90 6F               LD L, A
 171  4D91 C6 C1            ADD A, low (EXPTBL)
 172  4D93 32 9D 4D         LD (GET_PAGE_INFO_L1+1), A
 173  4D96 DB A8            IN A, (0A8H)
 174  4D98 47               LD B, A
 175  4D99 E6 3F            AND 03FH
 176  4D9B 4F               LD C, A
 177  4D9C              GET_PAGE_INFO_L1:
 178  4D9C 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 179  4D9F E6 80            AND 080H
 180  4DA1 28 1B            JR Z, GET_PAGE_INFO_L2
 181  4DA3                  ; expanded
 182  4DA3 2D               DEC L
 183  4DA4 FA C3 4D         JP M, GET_PAGE_INFO_L3
 184  4DA7 2D               DEC L
 185  4DA8 FA C1 4D         JP M, GET_PAGE_INFO_L4
 186  4DAB                  ; page 2
 187  4DAB 07               RLCA
 188  4DAC 07               RLCA
 189  4DAD              GET_PAGE_INFO_L5:
 190  4DAD E6 C0            AND 0C0H
 191  4DAF B1               OR C
 192  4DB0 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 193  4DB2 4F               LD C, A
 194  4DB3 3A FF FF         LD A, (0FFFFH)
 195  4DB6 2F               CPL
 196  4DB7 5F               LD E, A
 197  4DB8 16 01            LD D, 1
 198  4DBA 78               LD A, B ; return stack
 199  4DBB D3 A8            OUT (0A8H), A
 200  4DBD C9               RET
 201  4DBE              GET_PAGE_INFO_L2:
 202  4DBE                  ; not expanded
 203  4DBE 16 00            LD D, 0
 204  4DC0 C9               RET
 205  4DC1              GET_PAGE_INFO_L4:
 206  4DC1                  ; page 1
 207  4DC1 0F               RRCA
 208  4DC2 0F               RRCA
 209  4DC3              GET_PAGE_INFO_L3:
 210  4DC3                  ; page 0
 211  4DC3 0F               RRCA
 212  4DC4 0F               RRCA
 213  4DC5 18 E6            JR GET_PAGE_INFO_L5
 214  4DC7              ; ****************************************************************************************************
 215  4DC7
 216  4DC7              ; ****************************************************************************************************
 217  4DC7              ; function returns original slot and subslot info
 218  4DC7              ; input B = 0A8H register value
 219  4DC7              ; input D = 0 is no subslots, 1 if yes
 220  4DC7              ; input C = 0A8H value when page 3 slot equals to requested page slot
 221  4DC7              ; input E = subslot value if present
 222  4DC7              ; modifies AF
 223  4DC7              RESTORE_PAGE_INFO:
 224  4DC7 7A               LD A, D
 225  4DC8 B7               OR A
 226  4DC9 28 07            JR Z, RESTORE_PAGE_INFO_L1
 227  4DCB 79               LD A, C
 228  4DCC D3 A8            OUT (0A8H), A
 229  4DCE 7B               LD A, E
 230  4DCF 32 FF FF         LD (0FFFFH), A
 231  4DD2              RESTORE_PAGE_INFO_L1:
 232  4DD2 78               LD A, B
 233  4DD3 D3 A8            OUT (0A8H), A
 234  4DD5 C9               RET
 235  4DD6              ; ****************************************************************************************************
 236  4DD6
 237  4DD6              ; *******************************************************************************************************
 238  4DD6              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 239  4DD6              ; INPUT:  A = SLOT ID: EXXXSSPP
 240  4DD6              ; E = EXPANDED FLAG
 241  4DD6              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 242  4DD6              ; PP = PRIMARY SLOT NUMBER
 243  4DD6              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 244  4DD6              ; CHANGES: AF, BC, DE
 245  4DD6
 246  4DD6              LOCAL_ENASLT:
 247  4DD6 CD F6 4D         CALL L0353
 248  4DD9 FA E3 4D         JP M, L0340
 249  4DDC DB A8            IN A, (0A8H)
 250  4DDE A1               AND C
 251  4DDF B0               OR B
 252  4DE0 D3 A8            OUT (0A8H), A
 253  4DE2 C9               RET
 254  4DE3              L0340:
 255  4DE3 E5               PUSH HL
 256  4DE4 CD 1B 4E         CALL L0378
 257  4DE7 4F               LD C, A
 258  4DE8 06 00            LD B, 0
 259  4DEA 7D               LD A, L
 260  4DEB A4               AND H
 261  4DEC B2               OR D
 262  4DED 21 C5 FC         LD HL, 0FCC5H
 263  4DF0 09               ADD HL, BC
 264  4DF1 77               LD (HL), A
 265  4DF2 E1               POP HL
 266  4DF3 79               LD A, C
 267  4DF4 18 E0            JR LOCAL_ENASLT
 268  4DF6              L0353:
 269  4DF6 F3               DI
 270  4DF7 F5               PUSH AF
 271  4DF8 7C               LD A, H
 272  4DF9 07               RLCA
 273  4DFA 07               RLCA
 274  4DFB E6 03            AND 3
 275  4DFD 5F               LD E, A
 276  4DFE 3E C0            LD A, 0C0H
 277  4E00              L035D:
 278  4E00 07               RLCA
 279  4E01 07               RLCA
 280  4E02 1D               DEC E
 281  4E03 F2 00 4E         JP P, L035D
 282  4E06 5F               LD E, A
 283  4E07 2F               CPL
 284  4E08 4F               LD C, A
 285  4E09 F1               POP AF
 286  4E0A F5               PUSH AF
 287  4E0B E6 03            AND 3
 288  4E0D 3C               INC A
 289  4E0E 47               LD B, A
 290  4E0F 3E AB            LD A, 0ABH
 291  4E11              L036E:
 292  4E11 C6 55            ADD A, 055H
 293  4E13 10 FC            DJNZ L036E
 294  4E15 57               LD D, A
 295  4E16 A3               AND E
 296  4E17 47               LD B, A
 297  4E18 F1               POP AF
 298  4E19 A7               AND A
 299  4E1A C9               RET
 300  4E1B              L0378:
 301  4E1B F5               PUSH AF
 302  4E1C 7A               LD A, D
 303  4E1D E6 C0            AND 0C0H
 304  4E1F 4F               LD C, A
 305  4E20 F1               POP AF
 306  4E21 F5               PUSH AF
 307  4E22 57               LD D, A
 308  4E23 DB A8            IN A, (0A8H)
 309  4E25 47               LD B, A
 310  4E26 E6 3F            AND 03FH
 311  4E28 B1               OR C
 312  4E29 D3 A8            OUT (0A8H), A
 313  4E2B 7A               LD A, D
 314  4E2C 0F               RRCA
 315  4E2D 0F               RRCA
 316  4E2E E6 03            AND 3
 317  4E30 57               LD D, A
 318  4E31 3E AB            LD A, 0ABH
 319  4E33              L0390:
 320  4E33 C6 55            ADD A, 055H
 321  4E35 15               DEC D
 322  4E36 F2 33 4E         JP P, L0390
 323  4E39 A3               AND E
 324  4E3A 57               LD D, A
 325  4E3B 7B               LD A, E
 326  4E3C 2F               CPL
 327  4E3D 67               LD H, A
 328  4E3E 3A FF FF         LD A, (0FFFFH)
 329  4E41 2F               CPL
 330  4E42 6F               LD L, A
 331  4E43 A4               AND H
 332  4E44 B2               OR D
 333  4E45 32 FF FF         LD (0FFFFH), A
 334  4E48 78               LD A, B
 335  4E49 D3 A8            OUT (0A8H), A
 336  4E4B F1               POP AF
 337  4E4C E6 03            AND 3
 338  4E4E C9               RET
 339  4E4F              ; *******************************************************************************************************
 340  4E4F
 341  4E4F
 342  4E4F              ; General BASIC CALL-instruction handler
 343  4E4F
 344  4E4F              CALLHAND:
 345  4E4F E5           	PUSH HL
 346  4E50 21 F6 4C     	LD	HL, CMDS ; pointer table based on starting letter
 347  4E53 3A 89 FD         LD A, (PROCNM)
 348  4E56 D6 41            SUB 'A'
 349  4E58 87               ADD A, A
 350  4E59 16 00            LD D, 0
 351  4E5B 5F               LD E, A
 352  4E5C 19               ADD HL, DE
 353  4E5D 5E               LD E, (HL)
 354  4E5E 23               INC HL
 355  4E5F 56               LD D, (HL)
 356  4E60 7A               LD A, D
 357  4E61 B3               OR E
 358  4E62 28 24            JR Z, .CMDNOTRECOGNIZED
 359  4E64 EB               EX DE, HL
 360  4E65              .CHKCMD:
 361  4E65 11 89 FD     	LD	DE, PROCNM
 362  4E68 1A           .LOOP:	LD	A,(DE)
 363  4E69 BE           	CP	(HL)
 364  4E6A 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 365  4E6C 13           	INC	DE
 366  4E6D 23           	INC	HL
 367  4E6E A7           	AND	A
 368  4E6F 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 369  4E71 5E           	LD	E,(HL)
 370  4E72 23           	INC	HL
 371  4E73 56           	LD	D,(HL)
 372  4E74 E1           	POP	HL		; routine address
 373  4E75 CD FB 4E     	CALL	GETPREVCHAR
 374  4E78 CD 8A 4E     	CALL	.CALLDE		; Call routine
 375  4E7B A7           	AND	A
 376  4E7C C9           	RET
 377  4E7D
 378  4E7D              .TONEXTCMD:
 379  4E7D 0E FF        	LD	C,0FFH
 380  4E7F AF           	XOR	A
 381  4E80 ED B1        	CPIR			; Skip to end of instruction name
 382  4E82 23           	INC	HL
 383  4E83 23           	INC	HL		; Skip address
 384  4E84 BE           	CP	(HL)
 385  4E85 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 386  4E87 E1           	POP	HL
 387  4E88              .CMDNOTRECOGNIZED:
 388  4E88 37               SCF
 389  4E89 C9           	RET
 390  4E8A
 391  4E8A              .CALLDE:
 392  4E8A D5           	PUSH	DE
 393  4E8B C9           	RET
 394  4E8C
 395  4E8C              ;---------------------------
 396  4E8C
 397  4E8C              ;---------------------------
 398  4E8C              UPRINT:
 399  4E8C CD D0 4E     	CALL	EVALTXTPARAM	; Evaluate text parameter
 400  4E8F E5           	PUSH	HL
 401  4E90 CD C6 4E             CALL    GETSTRPNT
 402  4E93              .LOOP
 403  4E93 7E                   LD      A,(HL)
 404  4E94 CD A0 4E             CALL    .UCASE
 405  4E97 CD A2 00             CALL    CHPUT  ;Print
 406  4E9A 23                   INC     HL
 407  4E9B 10 F6                DJNZ    .LOOP
 408  4E9D
 409  4E9D E1           	POP	HL
 410  4E9E B7           	OR      A
 411  4E9F C9           	RET
 412  4EA0
 413  4EA0              .UCASE:
 414  4EA0 FE 61                CP      "a"
 415  4EA2 D8                   RET     C
 416  4EA3 FE 7B                CP      "z"+1
 417  4EA5 D0                   RET     NC
 418  4EA6 E6 DF                AND     %11011111
 419  4EA8 C9                   RET
 420  4EA9              ;---------------------------
 421  4EA9              LPRINT:
 422  4EA9 CD D0 4E     	CALL	EVALTXTPARAM	; Evaluate text parameter
 423  4EAC E5           	PUSH	HL
 424  4EAD CD C6 4E             CALL    GETSTRPNT
 425  4EB0              .LOOP
 426  4EB0 7E                   LD      A,(HL)
 427  4EB1 CD BD 4E             CALL    .LCASE
 428  4EB4 CD A2 00             CALL    CHPUT  ;Print
 429  4EB7 23                   INC     HL
 430  4EB8 10 F6                DJNZ    .LOOP
 431  4EBA
 432  4EBA E1           	POP	HL
 433  4EBB B7           	OR      A
 434  4EBC C9           	RET
 435  4EBD
 436  4EBD              .LCASE:
 437  4EBD FE 41                CP      "A"
 438  4EBF D8                   RET     C
 439  4EC0 FE 5B                CP      "Z"+1
 440  4EC2 D0                   RET     NC
 441  4EC3 F6 20                OR      %00100000
 442  4EC5 C9                   RET
 443  4EC6              ;---------------------------
 444  4EC6
 445  4EC6              GETSTRPNT:
 446  4EC6              ; OUT:
 447  4EC6              ; HL = String Address
 448  4EC6              ; B  = Lenght
 449  4EC6
 450  4EC6 2A F8 F7             LD      HL,(USR)
 451  4EC9 46                   LD      B,(HL)
 452  4ECA 23                   INC     HL
 453  4ECB 5E                   LD      E,(HL)
 454  4ECC 23                   INC     HL
 455  4ECD 56                   LD      D,(HL)
 456  4ECE EB                   EX      DE,HL
 457  4ECF C9                   RET
 458  4ED0
 459  4ED0              EVALTXTPARAM:
 460  4ED0 CD F1 4E     	CALL	CHKCHAR
 461  4ED3 28           	DEFB	"("             ; Check for (
 462  4ED4 DD 21 64 4C  	LD	IX,FRMEVL
 463  4ED8 CD 59 01     	CALL	CALBAS		; Evaluate expression
 464  4EDB 3A 63 F6             LD      A,(VALTYP)
 465  4EDE FE 03                CP      3               ; Text type?
 466  4EE0 C2 03 4F             JP      NZ,TYPE_MISMATCH
 467  4EE3 E5                   PUSH	HL
 468  4EE4 DD 21 D0 67          LD	IX,FRESTR         ; Free the temporary string
 469  4EE8 CD 59 01             CALL	CALBAS
 470  4EEB E1                   POP	HL
 471  4EEC CD F1 4E     	CALL	CHKCHAR
 472  4EEF 29           	DEFB	")"             ; Check for )
 473  4EF0 C9                   RET
 474  4EF1
 475  4EF1
 476  4EF1              CHKCHAR:
 477  4EF1 CD FB 4E     	CALL	GETPREVCHAR	; Get previous basic char
 478  4EF4 E3           	EX	(SP),HL
 479  4EF5 BE           	CP	(HL) 	        ; Check if good char
 480  4EF6 20 0F        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 481  4EF8 23           	INC	HL
 482  4EF9 E3           	EX	(SP),HL
 483  4EFA 23           	INC	HL		; Get next basic char
 484  4EFB
 485  4EFB              GETPREVCHAR:
 486  4EFB 2B           	DEC	HL
 487  4EFC DD 21 66 46  	LD	IX,CHRGTR
 488  4F00 C3 59 01     	JP      CALBAS
 489  4F03
 490  4F03
 491  4F03              TYPE_MISMATCH:
 492  4F03 1E 0D            LD E, 13 ; Type mismatch
 493  4F05 18 02            JR THROW_ERROR
 494  4F07
 495  4F07              SYNTAX_ERROR:
 496  4F07 1E 02            LD E, 2 ; Syntax error
 497  4F09              THROW_ERROR:
 498  4F09 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 499  4F0D C3 59 01     	JP	CALBAS
 500  4F10
 501  4F10              ;---------------------------
 502  4F10
 503  4F10              ; *******************************************************************************************************
 504  4F10              ; function to handle CALL MEMCPY basic extension
 505  4F10              ; _MEMCPY ( INT source,
 506  4F10              ;			INT destination,
 507  4F10              ;			INT count,
 508  4F10              ;			BYTE enable_ram, >0 = true
 509  4F10              ;			BYTE wait_vsync) >0 = treu
 510  4F10              ; enable_ram will put ram in page 0 also, page 1 is already there
 511  4F10              ; wait_vsync will issue HALT before copying
 512  4F10              MEMCPY:
 513  4F10              	; opening (
 514  4F10 CD F1 4E     	CALL CHKCHAR
 515  4F13 28           	DB '('
 516  4F14              	; get source address
 517  4F14 DD 21 2F 54  	LD IX, FRMQNT
 518  4F18 CD 59 01     	CALL CALBAS
 519  4F1B D5           	PUSH DE
 520  4F1C              	; comma
 521  4F1C CD F1 4E     	CALL CHKCHAR
 522  4F1F 2C           	DB ','
 523  4F20              	; get destination address
 524  4F20 DD 21 2F 54  	LD IX, FRMQNT
 525  4F24 CD 59 01     	CALL CALBAS
 526  4F27 D5           	PUSH DE
 527  4F28              	; comma
 528  4F28 CD F1 4E     	CALL CHKCHAR
 529  4F2B 2C           	DB ','
 530  4F2C              	; get length
 531  4F2C DD 21 2F 54  	LD IX, FRMQNT
 532  4F30 CD 59 01     	CALL CALBAS
 533  4F33 D5           	PUSH DE
 534  4F34              	; comma
 535  4F34 CD F1 4E     	CALL CHKCHAR
 536  4F37 2C           	DB ','
 537  4F38              	; get ROM/RAM
 538  4F38 DD 21 1C 52  	LD IX, GETBYT
 539  4F3C CD 59 01     	CALL CALBAS
 540  4F3F F5           	PUSH AF
 541  4F40              	; comma
 542  4F40 CD F1 4E     	CALL CHKCHAR
 543  4F43 2C           	DB ','
 544  4F44              	; get vsync wait
 545  4F44 DD 21 1C 52  	LD IX, GETBYT
 546  4F48 CD 59 01     	CALL CALBAS
 547  4F4B F5           	PUSH AF
 548  4F4C              	; ending )
 549  4F4C CD F1 4E     	CALL CHKCHAR
 550  4F4F 29           	DB ')'
 551  4F50
 552  4F50 FB               EI
 553  4F51              	; save position
 554  4F51 E5           	PUSH HL
 555  4F52 DD E1        	POP IX
 556  4F54
 557  4F54              	; syntax ok
 558  4F54              	; wait for vsync if needed
 559  4F54 F1           	POP AF
 560  4F55 B7           	OR A
 561  4F56 28 01        	JR Z, .L1
 562  4F58 76           	HALT
 563  4F59
 564  4F59              .L1:
 565  4F59              	; enable RAM in page 0 if needed
 566  4F59 F1           	POP AF
 567  4F5A B7           	OR A
 568  4F5B              	; pop LDIR parameters and store away for later
 569  4F5B C1           	POP BC
 570  4F5C D1           	POP DE
 571  4F5D E1           	POP HL
 572  4F5E 28 1A        	JR Z, .L2
 573  4F60 D9           	EXX
 574  4F61 AF               XOR A
 575  4F62 CD 90 4D         CALL GET_PAGE_INFO
 576  4F65 C5               PUSH BC
 577  4F66 D5               PUSH DE
 578  4F67 3A 41 F3         LD A, (RAMAD0)
 579  4F6A 26 00            LD H, 0
 580  4F6C F3           	DI
 581  4F6D CD D6 4D         CALL LOCAL_ENASLT
 582  4F70 D9           	EXX
 583  4F71 ED B0        	LDIR
 584  4F73 D1               POP DE
 585  4F74 C1               POP BC
 586  4F75 CD C7 4D         CALL RESTORE_PAGE_INFO
 587  4F78 18 02        	JR .L3
 588  4F7A
 589  4F7A              .L2:
 590  4F7A ED B0        	LDIR
 591  4F7C
 592  4F7C              .L3:
 593  4F7C DD E5        	PUSH IX
 594  4F7E E1           	POP HL
 595  4F7F C9           	RET
 596  4F80              ; *******************************************************************************************************
 597  4F80
 598  4F80              ; *******************************************************************************************************
 599  4F80              ; function to handle CALL FILVRM basic extension
 600  4F80              ; FILVRM ( INT offset,
 601  4F80              ;		   INT count,
 602  4F80              ;		   BYTE value,
 603  4F80              ;		   BYTE wait_vsync) >0 = true
 604  4F80              ; wait_vsync will issue HALT before copying
 605  4F80              FILVRM:
 606  4F80              	; opening (
 607  4F80 CD F1 4E     	CALL CHKCHAR
 608  4F83 28           	DB '('
 609  4F84              	; get offset address
 610  4F84 DD 21 2F 54  	LD IX, FRMQNT
 611  4F88 CD 59 01     	CALL CALBAS
 612  4F8B D5           	PUSH DE
 613  4F8C              	; comma
 614  4F8C CD F1 4E     	CALL CHKCHAR
 615  4F8F 2C           	DB ','
 616  4F90              	; get count
 617  4F90 DD 21 2F 54  	LD IX, FRMQNT
 618  4F94 CD 59 01     	CALL CALBAS
 619  4F97 D5           	PUSH DE
 620  4F98              	; comma
 621  4F98 CD F1 4E     	CALL CHKCHAR
 622  4F9B 2C           	DB ','
 623  4F9C              	; get value
 624  4F9C DD 21 1C 52  	LD IX, GETBYT
 625  4FA0 CD 59 01     	CALL CALBAS
 626  4FA3 F5           	PUSH AF
 627  4FA4              	; comma
 628  4FA4 CD F1 4E     	CALL CHKCHAR
 629  4FA7 2C           	DB ','
 630  4FA8              	; get vsync wait
 631  4FA8 DD 21 1C 52  	LD IX, GETBYT
 632  4FAC CD 59 01     	CALL CALBAS
 633  4FAF F5           	PUSH AF
 634  4FB0              	; ending )
 635  4FB0 CD F1 4E     	CALL CHKCHAR
 636  4FB3 29           	DB ')'
 637  4FB4
 638  4FB4 FB               EI
 639  4FB5              	; save position
 640  4FB5 E5           	PUSH HL
 641  4FB6 DD E1        	POP IX
 642  4FB8
 643  4FB8              	; syntax ok
 644  4FB8              	; wait for vsync if needed
 645  4FB8 F1           	POP AF
 646  4FB9 B7           	OR A
 647  4FBA 28 01        	JR Z, .L1
 648  4FBC 76           	HALT
 649  4FBD
 650  4FBD              .L1:
 651  4FBD F1               POP AF ; value
 652  4FBE C1               POP BC ; count
 653  4FBF E1               POP HL ; offset
 654  4FC0 CD 56 00         CALL BIOS_FILVRM
 655  4FC3
 656  4FC3              .L3:
 657  4FC3 DD E5        	PUSH IX
 658  4FC5 E1           	POP HL
 659  4FC6 C9           	RET
 660  4FC7              ; *******************************************************************************************************
 661  4FC7
 662  4FC7              ; *******************************************************************************************************
 663  4FC7              ; function to handle CALL FILRAM basic extension
 664  4FC7              ; FILRAM ( INT start address,
 665  4FC7              ;		   INT count,
 666  4FC7              ;		   BYTE value,
 667  4FC7              ;	   	   BYTE enable_ram, >0 = true
 668  4FC7              ;		   BYTE wait_vsync) >0 = true
 669  4FC7              ; enable_ram will put ram in page 0 also, page 1 is already there
 670  4FC7              ; wait_vsync will issue HALT before copying
 671  4FC7              FILRAM:
 672  4FC7              	; opening (
 673  4FC7 CD F1 4E     	CALL CHKCHAR
 674  4FCA 28           	DB '('
 675  4FCB              	; get start address
 676  4FCB DD 21 2F 54  	LD IX, FRMQNT
 677  4FCF CD 59 01     	CALL CALBAS
 678  4FD2 D5           	PUSH DE
 679  4FD3              	; comma
 680  4FD3 CD F1 4E     	CALL CHKCHAR
 681  4FD6 2C           	DB ','
 682  4FD7              	; get count
 683  4FD7 DD 21 2F 54  	LD IX, FRMQNT
 684  4FDB CD 59 01     	CALL CALBAS
 685  4FDE D5           	PUSH DE
 686  4FDF              	; comma
 687  4FDF CD F1 4E     	CALL CHKCHAR
 688  4FE2 2C           	DB ','
 689  4FE3              	; get value
 690  4FE3 DD 21 1C 52  	LD IX, GETBYT
 691  4FE7 CD 59 01     	CALL CALBAS
 692  4FEA F5           	PUSH AF
 693  4FEB              	; comma
 694  4FEB CD F1 4E     	CALL CHKCHAR
 695  4FEE 2C           	DB ','
 696  4FEF              	; get ROM/RAM
 697  4FEF DD 21 1C 52  	LD IX, GETBYT
 698  4FF3 CD 59 01     	CALL CALBAS
 699  4FF6 F5           	PUSH AF
 700  4FF7              	; comma
 701  4FF7 CD F1 4E     	CALL CHKCHAR
 702  4FFA 2C           	DB ','
 703  4FFB              	; get vsync wait
 704  4FFB DD 21 1C 52  	LD IX, GETBYT
 705  4FFF CD 59 01     	CALL CALBAS
 706  5002 F5           	PUSH AF
 707  5003              	; ending )
 708  5003 CD F1 4E     	CALL CHKCHAR
 709  5006 29           	DB ')'
 710  5007
 711  5007 FB               EI
 712  5008              	; save position
 713  5008 E5           	PUSH HL
 714  5009 DD E1        	POP IX
 715  500B
 716  500B              	; syntax ok
 717  500B              	; wait for vsync if needed
 718  500B F1           	POP AF
 719  500C B7           	OR A
 720  500D 28 01        	JR Z, .L1
 721  500F 76           	HALT
 722  5010
 723  5010              .L1:
 724  5010              	; enable RAM in page 0 if needed
 725  5010 F1           	POP AF
 726  5011 B7           	OR A
 727  5012              	; pop LDIR parameters and store away for later
 728  5012 D1           	POP DE ; actually AF
 729  5013 C1           	POP BC ; count
 730  5014 E1           	POP HL ; start address
 731  5015 28 1B        	JR Z, .L2
 732  5017 D9           	EXX
 733  5018 AF               XOR A
 734  5019 CD 90 4D         CALL GET_PAGE_INFO
 735  501C C5               PUSH BC
 736  501D D5               PUSH DE
 737  501E 3A 41 F3         LD A, (RAMAD0)
 738  5021 26 00            LD H, 0
 739  5023 F3           	DI
 740  5024 CD D6 4D         CALL LOCAL_ENASLT
 741  5027 D9           	EXX
 742  5028 CD 39 50     	CALL .FILLVALUE
 743  502B D1               POP DE
 744  502C C1               POP BC
 745  502D CD C7 4D         CALL RESTORE_PAGE_INFO
 746  5030 18 03        	JR .L3
 747  5032
 748  5032              .L2:
 749  5032 CD 39 50     	CALL .FILLVALUE
 750  5035
 751  5035              .L3:
 752  5035 DD E5        	PUSH IX
 753  5037 E1           	POP HL
 754  5038 C9           	RET
 755  5039
 756  5039              .FILLVALUE:
 757  5039 72               LD (HL), D
 758  503A 54               LD D, H
 759  503B 5D               LD E, L
 760  503C 13               INC DE
 761  503D 0B               DEC BC
 762  503E ED B0            LDIR
 763  5040 C9               RET
 764  5041              ; *******************************************************************************************************
 765  5041
 766  5041              ; *******************************************************************************************************
 767  5041              ; function to handle CALL GENCAL basic extension
 768  5041              ; GENCAL ( INT fn_addr, = address of the function to call
 769  5041              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 770  5041              ; output values of reristers will also be stored at reg_list_ptr
 771  5041              GENCAL_VAR_SP:
 772  5041 00 00            DW 0
 773  5043              GENCAL_VAR_SP2:
 774  5043 00 00            DW 0
 775  5045              GENCAL:
 776  5045              	; opening (
 777  5045 CD F1 4E     	CALL CHKCHAR
 778  5048 28           	DB '('
 779  5049              	; get function address
 780  5049 DD 21 2F 54  	LD IX, FRMQNT
 781  504D CD 59 01     	CALL CALBAS
 782  5050 D5           	PUSH DE
 783  5051              	; comma
 784  5051 CD F1 4E     	CALL CHKCHAR
 785  5054 2C           	DB ','
 786  5055              	; get pointer to register list
 787  5055 DD 21 2F 54  	LD IX, FRMQNT
 788  5059 CD 59 01     	CALL CALBAS
 789  505C D5           	PUSH DE
 790  505D              	; ending )
 791  505D CD F1 4E     	CALL CHKCHAR
 792  5060 29           	DB ')'
 793  5061
 794  5061              	; save BASIC token position
 795  5061 E5           	PUSH HL
 796  5062 D9               EXX
 797  5063 E1           	POP HL ; HL'=next basic token
 798  5064 D9               EXX
 799  5065
 800  5065 E1               POP HL ; get pointer to register values
 801  5066 ED 73 41 50      LD (GENCAL_VAR_SP), SP
 802  506A F3               DI
 803  506B F9               LD SP, HL
 804  506C F1               POP AF
 805  506D C1               POP BC
 806  506E D1               POP DE
 807  506F E1               POP HL
 808  5070 DD E1            POP IX
 809  5072 FD E1            POP IY
 810  5074 D9               EXX
 811  5075 ED 73 43 50      LD (GENCAL_VAR_SP2), SP
 812  5079 ED 7B 41 50      LD SP, (GENCAL_VAR_SP)
 813  507D FB               EI
 814  507E D1               POP DE ; get function to call
 815  507F E5               PUSH HL
 816  5080 CD 9B 50         CALL .EXXDECALL
 817  5083 F3               DI
 818  5084 ED 73 41 50      LD (GENCAL_VAR_SP), SP
 819  5088 ED 7B 43 50      LD SP, (GENCAL_VAR_SP2)
 820  508C FD E5            PUSH IY
 821  508E DD E5            PUSH IX
 822  5090 E5               PUSH HL
 823  5091 D5               PUSH DE
 824  5092 C5               PUSH BC
 825  5093 F5               PUSH AF
 826  5094 ED 7B 41 50      LD SP, (GENCAL_VAR_SP)
 827  5098 FB               EI
 828  5099 E1               POP HL
 829  509A C9           	RET
 830  509B
 831  509B              .EXXDECALL:
 832  509B D5               PUSH DE
 833  509C D9               EXX
 834  509D C9               RET
 835  509E              ; *******************************************************************************************************
 836  509E
 837  509E              ; *******************************************************************************************************
 838  509E              ; function to handle CALL MEMVRM basic extension
 839  509E              ; copies from RAM to VRAM
 840  509E              ; _MEMVRM ( INT source,
 841  509E              ;			INT destination,
 842  509E              ;			INT count,
 843  509E              ;			BYTE enable_ram, >0 = true
 844  509E              ;			BYTE wait_vsync) >0 = treu
 845  509E              ; enable_ram will put ram in page 0 also, page 1 is already there
 846  509E              ; wait_vsync will issue HALT before copying
 847  509E              MEMVRM:
 848  509E              	; opening (
 849  509E CD F1 4E     	CALL CHKCHAR
 850  50A1 28           	DB '('
 851  50A2              	; get source address
 852  50A2 DD 21 2F 54  	LD IX, FRMQNT
 853  50A6 CD 59 01     	CALL CALBAS
 854  50A9 D5           	PUSH DE
 855  50AA              	; comma
 856  50AA CD F1 4E     	CALL CHKCHAR
 857  50AD 2C           	DB ','
 858  50AE              	; get destination address
 859  50AE DD 21 2F 54  	LD IX, FRMQNT
 860  50B2 CD 59 01     	CALL CALBAS
 861  50B5 D5           	PUSH DE
 862  50B6              	; comma
 863  50B6 CD F1 4E     	CALL CHKCHAR
 864  50B9 2C           	DB ','
 865  50BA              	; get length
 866  50BA DD 21 2F 54  	LD IX, FRMQNT
 867  50BE CD 59 01     	CALL CALBAS
 868  50C1 D5           	PUSH DE
 869  50C2              	; comma
 870  50C2 CD F1 4E     	CALL CHKCHAR
 871  50C5 2C           	DB ','
 872  50C6              	; get ROM/RAM
 873  50C6 DD 21 1C 52  	LD IX, GETBYT
 874  50CA CD 59 01     	CALL CALBAS
 875  50CD F5           	PUSH AF
 876  50CE              	; comma
 877  50CE CD F1 4E     	CALL CHKCHAR
 878  50D1 2C           	DB ','
 879  50D2              	; get vsync wait
 880  50D2 DD 21 1C 52  	LD IX, GETBYT
 881  50D6 CD 59 01     	CALL CALBAS
 882  50D9 F5           	PUSH AF
 883  50DA              	; ending )
 884  50DA CD F1 4E     	CALL CHKCHAR
 885  50DD 29           	DB ')'
 886  50DE
 887  50DE                  ; save position in BASIC text
 888  50DE E5           	PUSH HL
 889  50DF DD E1        	POP IX
 890  50E1
 891  50E1              	; syntax ok
 892  50E1              	; wait for vsync if needed
 893  50E1 F1           	POP AF
 894  50E2 B7           	OR A
 895  50E3 28 03        	JR Z, .L1
 896  50E5 FB               EI
 897  50E6 76           	HALT
 898  50E7 F3               DI ; since interrupt can modify vram address
 899  50E8
 900  50E8              .L1:
 901  50E8              	; enable RAM in page 0 if needed
 902  50E8 F1           	POP AF
 903  50E9 B7           	OR A
 904  50EA              	; pop LDIR parameters and store away for later
 905  50EA C1           	POP BC
 906  50EB D1           	POP DE
 907  50EC E1           	POP HL
 908  50ED 28 1A        	JR Z, .L2
 909  50EF D9           	EXX
 910  50F0 AF               XOR A
 911  50F1 CD 90 4D         CALL GET_PAGE_INFO
 912  50F4 C5               PUSH BC
 913  50F5 D5               PUSH DE
 914  50F6 3A 41 F3         LD A, (RAMAD0)
 915  50F9 26 00            LD H, 0
 916  50FB CD D6 4D         CALL LOCAL_ENASLT
 917  50FE D9           	EXX
 918  50FF CD 10 51     	CALL .LDIRVM
 919  5102 D1               POP DE
 920  5103 C1               POP BC
 921  5104 CD C7 4D         CALL RESTORE_PAGE_INFO
 922  5107 18 03        	JR .L3
 923  5109
 924  5109              .L2:
 925  5109 CD 10 51     	CALL .LDIRVM
 926  510C
 927  510C              .L3:
 928  510C DD E5        	PUSH IX
 929  510E E1           	POP HL
 930  510F C9           	RET
 931  5110
 932  5110              .LDIRVM:
 933  5110 7B           	LD	A, E
 934  5111 D3 99        	OUT	(099H), A
 935  5113 7A           	LD	A, D
 936  5114 E6 3F        	AND	03FH
 937  5116 F6 40        	OR	040H
 938  5118 D3 99        	OUT	(099H), A
 939  511A
 940  511A              .L4:
 941  511A 7E               LD A, (HL)
 942  511B D3 98            OUT (#98), A
 943  511D 23               INC HL
 944  511E 0B               DEC BC
 945  511F 79               LD A, C
 946  5120 B0               OR B
 947  5121 C2 1A 51         JP NZ, .L4
 948  5124 C9               RET
 949  5125              ; *******************************************************************************************************
 950  5125
 951  5125              ; *******************************************************************************************************
 952  5125              ; function to handle CALL VRMMEM basic extension
 953  5125              ; copies from RAM to VRAM
 954  5125              ; _VRMMEM ( INT source,
 955  5125              ;			INT destination,
 956  5125              ;			INT count,
 957  5125              ;			BYTE enable_ram, >0 = true
 958  5125              ;			BYTE wait_vsync) >0 = true
 959  5125              ; enable_ram will put ram in page 0 also, page 1 is already there
 960  5125              ; wait_vsync will issue HALT before copying
 961  5125              VRMMEM:
 962  5125              	; opening (
 963  5125 CD F1 4E     	CALL CHKCHAR
 964  5128 28           	DB '('
 965  5129              	; get source address
 966  5129 DD 21 2F 54  	LD IX, FRMQNT
 967  512D CD 59 01     	CALL CALBAS
 968  5130 D5           	PUSH DE
 969  5131              	; comma
 970  5131 CD F1 4E     	CALL CHKCHAR
 971  5134 2C           	DB ','
 972  5135              	; get destination address
 973  5135 DD 21 2F 54  	LD IX, FRMQNT
 974  5139 CD 59 01     	CALL CALBAS
 975  513C D5           	PUSH DE
 976  513D              	; comma
 977  513D CD F1 4E     	CALL CHKCHAR
 978  5140 2C           	DB ','
 979  5141              	; get length
 980  5141 DD 21 2F 54  	LD IX, FRMQNT
 981  5145 CD 59 01     	CALL CALBAS
 982  5148 D5           	PUSH DE
 983  5149              	; comma
 984  5149 CD F1 4E     	CALL CHKCHAR
 985  514C 2C           	DB ','
 986  514D              	; get ROM/RAM
 987  514D DD 21 1C 52  	LD IX, GETBYT
 988  5151 CD 59 01     	CALL CALBAS
 989  5154 F5           	PUSH AF
 990  5155              	; comma
 991  5155 CD F1 4E     	CALL CHKCHAR
 992  5158 2C           	DB ','
 993  5159              	; get vsync wait
 994  5159 DD 21 1C 52  	LD IX, GETBYT
 995  515D CD 59 01     	CALL CALBAS
 996  5160 F5           	PUSH AF
 997  5161              	; ending )
 998  5161 CD F1 4E     	CALL CHKCHAR
 999  5164 29           	DB ')'
1000  5165
1001  5165                  ; save position in BASIC text
1002  5165 E5           	PUSH HL
1003  5166 DD E1        	POP IX
1004  5168
1005  5168              	; syntax ok
1006  5168              	; wait for vsync if needed
1007  5168 F1           	POP AF
1008  5169 B7           	OR A
1009  516A 28 03        	JR Z, .L1
1010  516C FB               EI
1011  516D 76           	HALT
1012  516E F3               DI ; since interrupt can modify vram address
1013  516F
1014  516F              .L1:
1015  516F              	; enable RAM in page 0 if needed
1016  516F F1           	POP AF
1017  5170 B7           	OR A
1018  5171              	; pop LDIR parameters and store away for later
1019  5171 C1           	POP BC
1020  5172 D1           	POP DE
1021  5173 E1           	POP HL
1022  5174 28 1A        	JR Z, .L2
1023  5176 D9           	EXX
1024  5177 AF               XOR A
1025  5178 CD 90 4D         CALL GET_PAGE_INFO
1026  517B C5               PUSH BC
1027  517C D5               PUSH DE
1028  517D 3A 41 F3         LD A, (RAMAD0)
1029  5180 26 00            LD H, 0
1030  5182 CD D6 4D         CALL LOCAL_ENASLT
1031  5185 D9           	EXX
1032  5186 CD 97 51     	CALL .LDIRMV
1033  5189 D1               POP DE
1034  518A C1               POP BC
1035  518B CD C7 4D         CALL RESTORE_PAGE_INFO
1036  518E 18 03        	JR .L3
1037  5190
1038  5190              .L2:
1039  5190 CD 97 51     	CALL .LDIRMV
1040  5193
1041  5193              .L3:
1042  5193 DD E5        	PUSH IX
1043  5195 E1           	POP HL
1044  5196 C9           	RET
1045  5197
1046  5197              .LDIRMV:
1047  5197 7D           	LD	A, L
1048  5198 D3 99        	OUT	(099H), A
1049  519A 7C           	LD	A, H
1050  519B E6 3F        	AND	03FH
1051  519D F6 40        	OR	040H
1052  519F D3 99        	OUT	(099H), A
1053  51A1
1054  51A1              .L4:
1055  51A1 DB 98            IN A, (#98)
1056  51A3 12           	LD (DE), A
1057  51A4 13               INC DE
1058  51A5 0B               DEC BC
1059  51A6 79               LD A, C
1060  51A7 B0               OR B
1061  51A8 C2 A1 51         JP NZ, .L4
1062  51AB C9               RET
1063  51AC              ; *******************************************************************************************************
1064  51AC
1065  51AC              ; *******************************************************************************************************
1066  51AC              ; H.TIMI function
1067  51AC              MBGE_HTIMI:
1068  51AC               EXPORT MBGE_HTIMI
1069  51AC F5           	PUSH AF
1070  51AD 3A F5 4C     	LD A, (SOUND_ENABLED)
1071  51B0 B7           	OR A
1072  51B1 28 2A        	JR Z, .EXIT
1073  51B3
1074  51B3              	; enable page 2
1075  51B3 3E 02            LD A, 2
1076  51B5 CD 90 4D         CALL GET_PAGE_INFO
1077  51B8 C5               PUSH BC
1078  51B9 D5               PUSH DE
1079  51BA 3A 43 F3         LD A, (RAMAD2)
1080  51BD 26 80            LD H, 080H
1081  51BF CD D6 4D         CALL LOCAL_ENASLT
1082  51C2              	; enable page 0
1083  51C2 AF               XOR A
1084  51C3 CD 90 4D         CALL GET_PAGE_INFO
1085  51C6 C5               PUSH BC
1086  51C7 D5               PUSH DE
1087  51C8 3A 41 F3         LD A, (RAMAD0)
1088  51CB 26 00            LD H, 0
1089  51CD CD D6 4D         CALL LOCAL_ENASLT
1090  51D0
1091  51D0 CD 31 42     	CALL PLY_AKG_PLAY
1092  51D3
1093  51D3              	; restore page 0
1094  51D3 D1               POP DE
1095  51D4 C1               POP BC
1096  51D5 CD C7 4D         CALL RESTORE_PAGE_INFO
1097  51D8              	; restore page 2
1098  51D8 D1               POP DE
1099  51D9 C1               POP BC
1100  51DA CD C7 4D         CALL RESTORE_PAGE_INFO
1101  51DD
1102  51DD              .EXIT:
1103  51DD F1           	POP AF
1104  51DE C3 EE 4C     	JP ORIG.HTIMI
1105  51E1              ; *******************************************************************************************************
1106  51E1
1107  51E1              ; *******************************************************************************************************
1108  51E1              ; function to handle CALL SNDPLYINIT basic extension
1109  51E1              ; initializes sound player
1110  51E1              ; _SNDPLYINIT ( INT music_offset,
1111  51E1              ;				INT sfx_offset, can be -1 if no SFX
1112  51E1              ; will put ram in page 0 also, page 1 is already there
1113  51E1              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1114  51E1              SNDPLYINIT:
1115  51E1              	; opening (
1116  51E1 CD F1 4E     	CALL CHKCHAR
1117  51E4 28           	DB '('
1118  51E5              	; get music address
1119  51E5 DD 21 2F 54  	LD IX, FRMQNT
1120  51E9 CD 59 01     	CALL CALBAS
1121  51EC D5           	PUSH DE
1122  51ED              	; comma
1123  51ED CD F1 4E     	CALL CHKCHAR
1124  51F0 2C           	DB ','
1125  51F1              	; get sfx address
1126  51F1 DD 21 2F 54  	LD IX, FRMQNT
1127  51F5 CD 59 01     	CALL CALBAS
1128  51F8 D5           	PUSH DE
1129  51F9              	; ending )
1130  51F9 CD F1 4E     	CALL CHKCHAR
1131  51FC 29           	DB ')'
1132  51FD
1133  51FD                  ; save position in BASIC text
1134  51FD 44           	LD B, H
1135  51FE 4D           	LD C, L
1136  51FF
1137  51FF              	; pop LDIR parameters and store away for later
1138  51FF D1           	POP DE ; sfx address
1139  5200 E1           	POP HL ; music address
1140  5201 C5           	PUSH BC ; basic text location
1141  5202 D9           	EXX
1142  5203 AF               XOR A
1143  5204 CD 90 4D         CALL GET_PAGE_INFO
1144  5207 C5               PUSH BC
1145  5208 D5               PUSH DE
1146  5209 3A 41 F3         LD A, (RAMAD0)
1147  520C 26 00            LD H, 0
1148  520E CD D6 4D         CALL LOCAL_ENASLT
1149  5211 D9           	EXX
1150  5212
1151  5212 D5           	PUSH DE
1152  5213 AF           	XOR A
1153  5214              	; HL = music location
1154  5214 CD 60 41     	CALL PLY_AKG_INIT
1155  5217 3E 01        	LD A, 1
1156  5219 32 F3 4C     	LD (MUSIC_INIT_STATUS), A
1157  521C
1158  521C E1           	POP HL
1159  521D 23           	INC HL
1160  521E 7D           	LD A, L
1161  521F B4           	OR H
1162  5220 28 09        	JR Z,.L1
1163  5222 2B           	DEC HL
1164  5223 CD 1B 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1165  5226 3E 01        	LD A, 1
1166  5228 32 F4 4C     	LD (SFX_INIT_STATUS), A
1167  522B              .L1:
1168  522B D1               POP DE
1169  522C C1               POP BC
1170  522D CD C7 4D         CALL RESTORE_PAGE_INFO
1171  5230
1172  5230 E1           	POP HL
1173  5231 C9           	RET
1174  5232              ; *******************************************************************************************************
1175  5232
1176  5232              ; *******************************************************************************************************
1177  5232              ; function to handle CALL SNDPLYON basic extension
1178  5232              ; enables sound player
1179  5232              ; _SNDPLYON
1180  5232              ; sets SOUND_ENABLED variable to 1 if init call was done
1181  5232              ; if not throws out of data error
1182  5232              SNDPLYON:
1183  5232 3A F3 4C     	LD A, (MUSIC_INIT_STATUS)
1184  5235 B7           	OR A
1185  5236 20 05        	JR NZ, .L1
1186  5238              	; player not initialized, throw error
1187  5238 1E 04        	LD E, 04 ; Out of DATA
1188  523A C3 09 4F     	JP THROW_ERROR
1189  523D              .L1:
1190  523D 32 F5 4C     	LD (SOUND_ENABLED), A
1191  5240              	; disable key click
1192  5240 AF           	XOR A
1193  5241 32 DB F3     	LD (CLIKSW), A
1194  5244 C9           	RET
1195  5245              ; *******************************************************************************************************
1196  5245
1197  5245
1198  5245              EXT_END:
1199  5245
# file closed: asm\main.asm
