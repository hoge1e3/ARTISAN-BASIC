# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; INCLUDE "system_variables.inc"
   4  4000              ; INCLUDE "system_hooks.inc"
   5  4000              ; INCLUDE "bios_calls.inc"
   6  4000
   7  4000              CHPUT   EQU     #A2
   8  4000              CALBAS	EQU		#159
   9  4000              ERRHAND EQU     #406F
  10  4000              FRMEVL  EQU     #4C64
  11  4000              FRESTR	EQU		#67D0
  12  4000              ; FRMQNT = formula quantificator
  13  4000              ; input HL=pointer to current program expression
  14  4000              ; output HL=next address
  15  4000              ; output DE=integer datum
  16  4000              FRMQNT	EQU		#542F
  17  4000              ; GETBYT = get byte parameter
  18  4000              ; input HL=pointer to current program expression
  19  4000              ; output HL=next address
  20  4000              ; output A=E=byte read
  21  4000              GETBYT	EQU		#521C
  22  4000              CHRGTR  EQU     #4666
  23  4000              SYNCHR	EQU		#558C
  24  4000              VALTYP  EQU     #F663
  25  4000              USR     EQU     #F7F8
  26  4000              PROCNM	EQU		#FD89
  27  4000              BIOS_FILVRM  EQU     #56
  28  4000              CLIKSW	EQU		#F3DB
  29  4000              ATRBAS	EQU		#F928
  30  4000
  31  4000              RAMAD0	EQU	0F341h	; Main-RAM Slot (00000h~03FFFh)
  32  4000              RAMAD1	EQU	0F342h	; Main-RAM Slot (04000h~07FFFh)
  33  4000              RAMAD2	EQU	0F343h	; Main-RAM Slot (08000h~0BFFFh)
  34  4000              RAMAD3	EQU	0F344h	; Main-RAM Slot (0C000h~0FFFFh)
  35  4000              EXPTBL	EQU #FCC1
  36  4000              SCRMOD	EQU #FCAF ; current screen mode
  37  4000
  38  4000              ; BASIC error codes
  39  4000              ;01 NEXT without FOR
  40  4000              ;02 Syntax error
  41  4000              ;03 RETURN without GOSUB
  42  4000              ;04 Out of DATA
  43  4000              ;05 Illegal function call
  44  4000              ;06 Overflow
  45  4000              ;07 Out of memory
  46  4000              ;08 Undefined line number
  47  4000              ;09 Subscript out of range
  48  4000              ;10 Redimensioned array
  49  4000              ;11 Division by zero
  50  4000              ;12 Illegal direct
  51  4000              ;13 Type mismatch
  52  4000              ;14 Out of string space
  53  4000              ;15 String too long
  54  4000              ;16 String formula too complex
  55  4000              ;17 Can't CONTINUE
  56  4000              ;18 Undefined user function
  57  4000              ;19 Device I/O error
  58  4000              ;20 Verify error
  59  4000              ;21 No RESUME
  60  4000              ;22 RESUME without error
  61  4000              ;23 Unprintable error
  62  4000              ;24 Missing operand
  63  4000              ;25 Line buffer overflow
  64  4000              ;50 FIELD overflow
  65  4000              ;51 Internal error
  66  4000              ;52 Bad file number
  67  4000              ;53 File not found
  68  4000              ;54 File already open
  69  4000              ;55 Input past end
  70  4000              ;56 Bad file name
  71  4000              ;57 Direct statement in file
  72  4000              ;58 Sequential I/O only
  73  4000              ;59 File not OPEN
  74  4000
  75  4000
  76  4000               ; simulate cartridge with BASIC extension
  77  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  77  4004 5D 4F 00 00
  77  4008 00 00 00 00
  77  400C 00 00 00 00
  78  4010
  79  4010              ; this location #400A stores last location used by basic extension
  80  4010              ; free memory after that point
  81  4010 40 56         DW EXT_END
  82  4012
  83  4012              ; binary included AKG player compiled at #4012
  84  4012               INCBIN "bin/AKG.bin"
  85  4CEE               INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CEE              MAIN_PLAYER_START EQU 04012H
   2+ 4CEE              PLY_AKG_START EQU 04012H
   3+ 4CEE              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401BH
   4+ 4CEE              PLY_AKG_INITSOUNDEFFECTS EQU 0401BH
   5+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 0401FH
   6+ 4CEE              PLY_AKG_PLAYSOUNDEFFECT EQU 0401FH
   7+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04020H
   8+ 4CEE              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04020H
   9+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04047H
  10+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04047H
  11+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04055H
  12+ 4CEE              PLY_AKG_PSES_PLAY EQU 0408EH
  13+ 4CEE              PLY_AKG_PSES_READFIRSTBYTE EQU 04097H
  14+ 4CEE              PLY_AKG_PSES_S_ENDORLOOP EQU 040AFH
  15+ 4CEE              PLY_AKG_PSES_S_LOOP EQU 040BAH
  16+ 4CEE              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C0H
  17+ 4CEE              PLY_AKG_PSES_NOTREACHED EQU 040D3H
  18+ 4CEE              PLY_AKG_PSES_HARDWAREONLY EQU 040D7H
  19+ 4CEE              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040DEH
  20+ 4CEE              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F0H
  21+ 4CEE              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FAH
  22+ 4CEE              PLY_AKG_PSES_H_AFTERRETRIG EQU 04104H
  23+ 4CEE              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 04118H
  24+ 4CEE              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411DH
  25+ 4CEE              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04125H
  26+ 4CEE              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04130H
  27+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413CH
  28+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 0413EH
  29+ 4CEE              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04144H
  30+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 04148H
  31+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 04148H
  32+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414AH
  33+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414AH
  34+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414AH
  35+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414BH
  36+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414CH
  37+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04150H
  38+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04150H
  39+ 4CEE              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04150H
  40+ 4CEE              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 04158H
  41+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04160H
  42+ 4CEE              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04160H
  43+ 4CEE              PLY_AKG_INIT EQU 04160H
  44+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04160H
  45+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 0418EH
  46+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A2H
  47+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B4H
  48+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D3H
  49+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E0H
  50+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL EQU 041E6H
  51+ 4CEE              PLY_AKG_INITTABLE0 EQU 041E9H
  52+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041E9H
  53+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04203H
  54+ 4CEE              PLY_AKG_INITTABLE0_END EQU 04203H
  55+ 4CEE              PLY_AKG_INITTABLE1 EQU 04203H
  56+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04203H
  57+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04207H
  58+ 4CEE              PLY_AKG_INITTABLE1_END EQU 04207H
  59+ 4CEE              PLY_AKG_INITTABLEORA EQU 04207H
  60+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04207H
  61+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 0421FH
  62+ 4CEE              PLY_AKG_INITTABLEORA_END EQU 0421FH
  63+ 4CEE              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 0421FH
  64+ 4CEE              PLY_AKG_STOP EQU 0421FH
  65+ 4CEE              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04231H
  66+ 4CEE              PLY_AKG_PLAY EQU 04231H
  67+ 4CEE              PLY_AKG_TICKDECREASINGCOUNTER EQU 04239H
  68+ 4CEE              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 0423FH
  69+ 4CEE              PLY_AKG_READLINKER EQU 04244H
  70+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04244H
  71+ 4CEE              PLY_AKG_READLINKER_PTLINKER EQU 04244H
  72+ 4CEE              PLY_AKG_READLINKER_NOLOOP EQU 0424FH
  73+ 4CEE              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 04288H
  74+ 4CEE              PLY_AKG_READLINE EQU 0428BH
  75+ 4CEE              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428BH
  76+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04291H
  77+ 4CEE              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04291H
  78+ 4CEE              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 0429EH
  79+ 4CEE              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A2H
  80+ 4CEE              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A5H
  81+ 4CEE              PLY_AKG_SPEEDTRACK_END EQU 042A8H
  82+ 4CEE              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042A8H
  83+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042AEH
  84+ 4CEE              PLY_AKG_EVENTTRACK_PTTRACK EQU 042AEH
  85+ 4CEE              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BBH
  86+ 4CEE              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042BFH
  87+ 4CEE              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C2H
  88+ 4CEE              PLY_AKG_EVENTTRACK_END EQU 042C5H
  89+ 4CEE              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C5H
  90+ 4CEE              PLY_AKG_CHANNEL1_READTRACK EQU 042D1H
  91+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D1H
  92+ 4CEE              PLY_AKG_CHANNEL1_PTTRACK EQU 042D1H
  93+ 4CEE              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042ECH
  94+ 4CEE              PLY_AKG_CHANNEL1_WAIT EQU 042F7H
  95+ 4CEE              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 042FEH
  96+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 042FEH
  97+ 4CEE              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 042FEH
  98+ 4CEE              PLY_AKG_CHANNEL1_NOTE EQU 04307H
  99+ 4CEE              PLY_AKG_BASENOTEINDEX EQU 04307H
 100+ 4CEE              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 04309H
 101+ 4CEE              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 04309H
 102+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 04319H
 103+ 4CEE              PLY_AKG_INSTRUMENTSTABLE EQU 04319H
 104+ 4CEE              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432BH
 105+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433BH
 106+ 4CEE              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04363H
 107+ 4CEE              PLY_AKG_CHANNEL1_READCELLEND EQU 04366H
 108+ 4CEE              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04366H
 109+ 4CEE              PLY_AKG_CHANNEL2_READTRACK EQU 04372H
 110+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04372H
 111+ 4CEE              PLY_AKG_CHANNEL2_PTTRACK EQU 04372H
 112+ 4CEE              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438DH
 113+ 4CEE              PLY_AKG_CHANNEL2_WAIT EQU 04398H
 114+ 4CEE              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 0439FH
 115+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 0439FH
 116+ 4CEE              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 0439FH
 117+ 4CEE              PLY_AKG_CHANNEL2_NOTE EQU 043A8H
 118+ 4CEE              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043ADH
 119+ 4CEE              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043ADH
 120+ 4CEE              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043CFH
 121+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043DFH
 122+ 4CEE              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04407H
 123+ 4CEE              PLY_AKG_CHANNEL2_READCELLEND EQU 0440AH
 124+ 4CEE              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440AH
 125+ 4CEE              PLY_AKG_CHANNEL3_READTRACK EQU 04416H
 126+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04416H
 127+ 4CEE              PLY_AKG_CHANNEL3_PTTRACK EQU 04416H
 128+ 4CEE              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04431H
 129+ 4CEE              PLY_AKG_CHANNEL3_WAIT EQU 0443CH
 130+ 4CEE              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04443H
 131+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04443H
 132+ 4CEE              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04443H
 133+ 4CEE              PLY_AKG_CHANNEL3_NOTE EQU 0444CH
 134+ 4CEE              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04451H
 135+ 4CEE              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04451H
 136+ 4CEE              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04473H
 137+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04483H
 138+ 4CEE              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ABH
 139+ 4CEE              PLY_AKG_CHANNEL3_READCELLEND EQU 044AEH
 140+ 4CEE              PLY_AKG_CURRENTSPEED EQU 044AEH
 141+ 4CEE              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B0H
 142+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B3H
 143+ 4CEE              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B3H
 144+ 4CEE              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B6H
 145+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044B9H
 146+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044B9H
 147+ 4CEE              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C5H
 148+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CCH
 149+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044CFH
 150+ 4CEE              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D5H
 151+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044D8H
 152+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044D8H
 153+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E6H
 154+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EBH
 155+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F6H
 156+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044F9H
 157+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044F9H
 158+ 4CEE              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FCH
 159+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 044FFH
 160+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE EQU 044FFH
 161+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 04508H
 162+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04512H
 163+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04515H
 164+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04515H
 165+ 4CEE              PLY_AKG_CHANNEL1_PITCH EQU 04515H
 166+ 4CEE              PLY_AKG_CHANNEL1_ISPITCH EQU 04518H
 167+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451DH
 168+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451DH
 169+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04521H
 170+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04523H
 171+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04525H
 172+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452CH
 173+ 4CEE              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452DH
 174+ 4CEE              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04530H
 175+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04530H
 176+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454CH
 177+ 4CEE              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454CH
 178+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 04559H
 179+ 4CEE              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455DH
 180+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456DH
 181+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456DH
 182+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 0456EH
 183+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 0456FH
 184+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04571H
 185+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04571H
 186+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04571H
 187+ 4CEE              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04572H
 188+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04573H
 189+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04575H
 190+ 4CEE              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04575H
 191+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04575H
 192+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04575H
 193+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04575H
 194+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_END EQU 04578H
 195+ 4CEE              PLY_AKG_CHANNEL1_PITCH_END EQU 0457AH
 196+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04582H
 197+ 4CEE              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04582H
 198+ 4CEE              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04585H
 199+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 04588H
 200+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 04588H
 201+ 4CEE              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04594H
 202+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459BH
 203+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 0459EH
 204+ 4CEE              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A4H
 205+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A7H
 206+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A7H
 207+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B5H
 208+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BAH
 209+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C5H
 210+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045C8H
 211+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045C8H
 212+ 4CEE              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CBH
 213+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045CEH
 214+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045CEH
 215+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D7H
 216+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E1H
 217+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E4H
 218+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E4H
 219+ 4CEE              PLY_AKG_CHANNEL2_PITCH EQU 045E4H
 220+ 4CEE              PLY_AKG_CHANNEL2_ISPITCH EQU 045E7H
 221+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045ECH
 222+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045ECH
 223+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F0H
 224+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F2H
 225+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F4H
 226+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FBH
 227+ 4CEE              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FCH
 228+ 4CEE              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 045FFH
 229+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 045FFH
 230+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461BH
 231+ 4CEE              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461BH
 232+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 04628H
 233+ 4CEE              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462CH
 234+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463CH
 235+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463CH
 236+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463DH
 237+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 0463EH
 238+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04640H
 239+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04640H
 240+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04640H
 241+ 4CEE              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04641H
 242+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04642H
 243+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04644H
 244+ 4CEE              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04644H
 245+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04644H
 246+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04644H
 247+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04644H
 248+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_END EQU 04647H
 249+ 4CEE              PLY_AKG_CHANNEL2_PITCH_END EQU 04649H
 250+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04651H
 251+ 4CEE              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04651H
 252+ 4CEE              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04654H
 253+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04657H
 254+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04657H
 255+ 4CEE              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04663H
 256+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466AH
 257+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466DH
 258+ 4CEE              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04673H
 259+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04676H
 260+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04676H
 261+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04684H
 262+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 04689H
 263+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04694H
 264+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04697H
 265+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04697H
 266+ 4CEE              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469AH
 267+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469DH
 268+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469DH
 269+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A6H
 270+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B0H
 271+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B3H
 272+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B3H
 273+ 4CEE              PLY_AKG_CHANNEL3_PITCH EQU 046B3H
 274+ 4CEE              PLY_AKG_CHANNEL3_ISPITCH EQU 046B6H
 275+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BBH
 276+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BBH
 277+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046BFH
 278+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C1H
 279+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C3H
 280+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CAH
 281+ 4CEE              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CBH
 282+ 4CEE              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046CEH
 283+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046CEH
 284+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046EAH
 285+ 4CEE              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046EAH
 286+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F7H
 287+ 4CEE              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FBH
 288+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470BH
 289+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470BH
 290+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470CH
 291+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470DH
 292+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 0470FH
 293+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 0470FH
 294+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 0470FH
 295+ 4CEE              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04710H
 296+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04711H
 297+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04713H
 298+ 4CEE              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04713H
 299+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04713H
 300+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04713H
 301+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04713H
 302+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_END EQU 04716H
 303+ 4CEE              PLY_AKG_CHANNEL3_PITCH_END EQU 04718H
 304+ 4CEE              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04724H
 305+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04724H
 306+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04724H
 307+ 4CEE              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04727H
 308+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 04729H
 309+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 0472FH
 310+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04732H
 311+ 4CEE              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04732H
 312+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04735H
 313+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 0473EH
 314+ 4CEE              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04746H
 315+ 4CEE              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04753H
 316+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04753H
 317+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04753H
 318+ 4CEE              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04756H
 319+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 04758H
 320+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 0475EH
 321+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04761H
 322+ 4CEE              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04761H
 323+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04764H
 324+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476DH
 325+ 4CEE              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04775H
 326+ 4CEE              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04783H
 327+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04783H
 328+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04783H
 329+ 4CEE              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04786H
 330+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 04788H
 331+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 0478EH
 332+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04791H
 333+ 4CEE              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04791H
 334+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04794H
 335+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479DH
 336+ 4CEE              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A5H
 337+ 4CEE              PLY_AKG_SENDPSGREGISTERS EQU 047B4H
 338+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BCH
 339+ 4CEE              PLY_AKG_PSGREG01_INSTR EQU 047BCH
 340+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CCH
 341+ 4CEE              PLY_AKG_PSGREG23_INSTR EQU 047CCH
 342+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DDH
 343+ 4CEE              PLY_AKG_PSGREG45_INSTR EQU 047DDH
 344+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047EEH
 345+ 4CEE              PLY_AKG_PSGREG6_8_INSTR EQU 047EEH
 346+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 047FFH
 347+ 4CEE              PLY_AKG_PSGREG9_10_INSTR EQU 047FFH
 348+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04810H
 349+ 4CEE              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04810H
 350+ 4CEE              PLY_AKG_PSGREG13_OLDVALUE EQU 04825H
 351+ 4CEE              PLY_AKG_RETRIG EQU 04827H
 352+ 4CEE              PLY_AKG_PSGREG13_INSTR EQU 04829H
 353+ 4CEE              PLY_AKG_PSGREG13_END EQU 04838H
 354+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 04838H
 355+ 4CEE              PLY_AKG_SAVESP EQU 04838H
 356+ 4CEE              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483CH
 357+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTS EQU 04844H
 358+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04851H
 359+ 4CEE              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04851H
 360+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTS EQU 04859H
 361+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04866H
 362+ 4CEE              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04866H
 363+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTS EQU 0486EH
 364+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 04879H
 365+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS EQU 04879H
 366+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 04888H
 367+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 04888H
 368+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 0488FH
 369+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 0489FH
 370+ 4CEE              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 0489FH
 371+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A6H
 372+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A6H
 373+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048A9H
 374+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B2H
 375+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B2H
 376+ 4CEE              PLY_AKG_READINSTRUMENTCELL EQU 048B8H
 377+ 4CEE              PLY_AKG_NOSOFTNOHARD EQU 048C5H
 378+ 4CEE              PLY_AKG_NSNH_NONOISE EQU 048DAH
 379+ 4CEE              PLY_AKG_SOFT EQU 048DDH
 380+ 4CEE              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E4H
 381+ 4CEE              PLY_AKG_S_NOTSIMPLE EQU 048ECH
 382+ 4CEE              PLY_AKG_S_AFTERSIMPLETEST EQU 048EFH
 383+ 4CEE              PLY_AKG_HARDTOSOFT EQU 048FCH
 384+ 4CEE              PLY_AKG_HS_JUMPRATIO EQU 04907H
 385+ 4CEE              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04934H
 386+ 4CEE              PLY_AKG_ENDWITHOUTLOOP EQU 04936H
 387+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04936H
 388+ 4CEE              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04936H
 389+ 4CEE              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 0493EH
 390+ 4CEE              PLY_AKG_SH_JUMPRATIO EQU 0494BH
 391+ 4CEE              PLY_AKG_SH_JUMPRATIOEND EQU 0496CH
 392+ 4CEE              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497BH
 393+ 4CEE              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04981H
 394+ 4CEE              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499BH
 395+ 4CEE              PLY_AKG_H_RETRIGEND EQU 049ADH
 396+ 4CEE              PLY_AKG_H_AFTERRETRIG EQU 049AEH
 397+ 4CEE              PLY_AKG_ENDWITHLOOP EQU 049C0H
 398+ 4CEE              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C7H
 399+ 4CEE              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DDH
 400+ 4CEE              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EBH
 401+ 4CEE              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FBH
 402+ 4CEE              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A09H
 403+ 4CEE              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A18H
 404+ 4CEE              PLY_AKG_SHOHS_RETRIGEND EQU 04A27H
 405+ 4CEE              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A28H
 406+ 4CEE              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3AH
 407+ 4CEE              PLY_AKG_EFFECTTABLE EQU 04A48H
 408+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A48H
 409+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6CH
 410+ 4CEE              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6CH
 411+ 4CEE              PLY_AKG_EFFECT_RESET EQU 04A6FH
 412+ 4CEE              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A71H
 413+ 4CEE              PLY_AKG_EFFECT_VOLUME EQU 04A8CH
 414+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A98H
 415+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04A9EH
 416+ 4CEE              PLY_AKG_ARPEGGIOSTABLE EQU 04A9EH
 417+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC5H
 418+ 4CEE              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACCH
 419+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD2H
 420+ 4CEE              PLY_AKG_PITCHESTABLE EQU 04AD2H
 421+ 4CEE              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AF9H
 422+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B00H
 423+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B11H
 424+ 4CEE              PLY_AKG_EFFECT_PITCHDOWN EQU 04B18H
 425+ 4CEE              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B28H
 426+ 4CEE              PLY_AKG_EFFECT_PITCHUP EQU 04B3DH
 427+ 4CEE              PLY_AKG_EFFECT_PITCHSTOP EQU 04B4FH
 428+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B56H
 429+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B80H
 430+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B80H
 431+ 4CEE              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B99H
 432+ 4CEE              PLY_AKG_EFFECT_GLIDESPEED EQU 04B99H
 433+ 4CEE              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BABH
 434+ 4CEE              PLY_AKG_EFFECT_LEGATO EQU 04BC1H
 435+ 4CEE              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD5H
 436+ 4CEE              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDDH
 437+ 4CEE              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE5H
 438+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEDH
 439+ 4CEE              PLY_AKG_EVENT EQU 04BEDH
 440+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BEEH
 441+ 4CEE              PLY_AKG_PERIODTABLE EQU 04BEEH
 442+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BEEH
 443+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CEEH
 444+ 4CEE              PLY_AKG_PERIODTABLE_END EQU 04CEEH
 445+ 4CEE              PLY_AKG_END EQU 04CEEH
 446+ 4CEE              MAIN_PLAYER_END EQU 04CEEH
 447+ 4CEE              TESTEREND EQU 04CEEH
 448+ 4CEE
# file closed: ./symbol/AKG.sym
  86  4CEE
  87  4CEE              ORIG.HTIMI:
  88  4CEE 00 00 00 00  	DB 0, 0, 0, 0, 0
  88  4CF2 00
  89  4CF3               EXPORT ORIG.HTIMI
  90  4CF3
  91  4CF3              MUSIC_INIT_STATUS:
  92  4CF3 00            DB 0
  93  4CF4              SFX_INIT_STATUS:
  94  4CF4 00            DB 0
  95  4CF5              SOUND_ENABLED:
  96  4CF5 00            DB 0
  97  4CF6
  98  4CF6              SPRATR_INIT_STATUS:
  99  4CF6 00            DB 0
 100  4CF7              SPRATR_UPDATE_FLAG:
 101  4CF7 00 00         DW 0
 102  4CF9              SPRATR_DATA:
 103  4CF9 00 00         DW 0
 104  4CFB
 105  4CFB              ; to temporarily store stack pointer
 106  4CFB              TMPSP:
 107  4CFB 00 00         DW 0
 108  4CFD              ; to support sprite flicker
 109  4CFD              FLICKER:
 110  4CFD 00            DB 0
 111  4CFE
 112  4CFE              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 113  4CFE              ; per starting letter, if no commands with this letter, NULL value
 114  4CFE              CMDS:
 115  4CFE 00 00            DW 0 ; A
 116  4D00 00 00            DW 0 ; B
 117  4D02 00 00            DW 0 ; C
 118  4D04 00 00            DW 0 ; D
 119  4D06 00 00            DW 0 ; E
 120  4D08 59 4D            DW CMDS_F; F
 121  4D0A 6C 4D            DW CMDS_G; G
 122  4D0C CE 4D            DW CMDS_H; H
 123  4D0E 00 00            DW 0 ; I
 124  4D10 00 00            DW 0 ; J
 125  4D12 00 00            DW 0 ; K
 126  4D14 3C 4D            DW CMDS_L ; L
 127  4D16 46 4D            DW CMDS_M ; M
 128  4D18 00 00            DW 0 ; N
 129  4D1A 00 00            DW 0 ; O
 130  4D1C 00 00            DW 0 ; P
 131  4D1E 00 00            DW 0 ; Q
 132  4D20 00 00            DW 0 ; R
 133  4D22 80 4D            DW CMDS_S ; S
 134  4D24 00 00            DW 0 ; T
 135  4D26 32 4D            DW CMDS_U ; U
 136  4D28 76 4D            DW CMDS_V ; V
 137  4D2A 00 00            DW 0 ; W
 138  4D2C 00 00            DW 0 ; X
 139  4D2E 00 00            DW 0 ; Y
 140  4D30 00 00            DW 0 ; Z
 141  4D32
 142  4D32              CMDS_U:
 143  4D32 55 50 52 49  	DEFB	"UPRINT",0      ; Print upper case string
 143  4D36 4E 54 00
 144  4D39 9A 4F        	DEFW	UPRINT
 145  4D3B 00               DB 0
 146  4D3C              CMDS_L:
 147  4D3C 4C 50 52 49  	DEFB	"LPRINT",0      ; Print lower case string
 147  4D40 4E 54 00
 148  4D43 B7 4F        	DEFW	LPRINT
 149  4D45 00               DB 0
 150  4D46              CMDS_M:
 151  4D46 4D 45 4D 56      DB "MEMVRM", 0
 151  4D4A 52 4D 00
 152  4D4D 5F 51            DW MEMVRM
 153  4D4F 4D 45 4D 43  	DB "MEMCPY", 0
 153  4D53 50 59 00
 154  4D56 1E 50        	DW MEMCPY
 155  4D58 00           	DB 0
 156  4D59              CMDS_F:
 157  4D59 46 49 4C 56      DB "FILVRM", 0
 157  4D5D 52 4D 00
 158  4D60 61 50            DW FILVRM
 159  4D62 46 49 4C 52      DB "FILRAM", 0
 159  4D66 41 4D 00
 160  4D69 A8 50            DW FILRAM
 161  4D6B 00               DB 0
 162  4D6C              CMDS_G:
 163  4D6C 47 45 4E 43      DB "GENCAL", 0
 163  4D70 41 4C 00
 164  4D73 06 51            DW GENCAL
 165  4D75 00           	DB	0
 166  4D76              CMDS_V:
 167  4D76 56 52 4D 4D  	DB "VRMMEM", 0
 167  4D7A 45 4D 00
 168  4D7D D8 51        	DW VRMMEM
 169  4D7F 00           	DB 0
 170  4D80              CMDS_S:
 171  4D80 53 50 52 53  	DB "SPRSET", 0
 171  4D84 45 54 00
 172  4D87 A8 53        	DW SPRSET
 173  4D89 53 50 52 47  	DB "SPRGRPMOV", 0
 173  4D8D 52 50 4D 4F
 173  4D91 56 00
 174  4D93 66 54        	DW SPRGRPMOV
 175  4D95 53 4E 44 53  	DB "SNDSFX", 0
 175  4D99 46 58 00
 176  4D9C 10 53        	DW SNDSFX
 177  4D9E 53 4E 44 50  	DB "SNDPLYON", 0
 177  4DA2 4C 59 4F 4E
 177  4DA6 00
 178  4DA7 DA 52        	DW SNDPLYON
 179  4DA9 53 4E 44 50  	DB "SNDPLYOFF", 0
 179  4DAD 4C 59 4F 46
 179  4DB1 46 00
 180  4DB3 ED 52        	DW SNDPLYOFF
 181  4DB5 53 4E 44 50  	DB "SNDPLYINI", 0
 181  4DB9 4C 59 49 4E
 181  4DBD 49 00
 182  4DBF 90 52        	DW SNDPLYINIT
 183  4DC1 53 50 52 41  	DB "SPRATRINI", 0
 183  4DC5 54 52 49 4E
 183  4DC9 49 00
 184  4DCB 6A 53        	DW SPRATRINI
 185  4DCD 00           	DB 0
 186  4DCE              CMDS_H:
 187  4DCE 48 42 4C 49  	DB "HBLIT", 0
 187  4DD2 54 00
 188  4DD4 1B 56        	DW HBLIT
 189  4DD6 00           	DB 0
 190  4DD7
 191  4DD7              ; ****************************************************************************************************
 192  4DD7              ; function sets VRAM address
 193  4DD7              ; input HL=address
 194  4DD7              ; modifies AF
 195  4DD7              SETWRT_LOCAL:
 196  4DD7 7D           	LD	A, L
 197  4DD8 D3 99        	OUT	(099H), A
 198  4DDA 7C           	LD	A, H
 199  4DDB E6 3F        	AND	03FH
 200  4DDD F6 40        	OR	040H
 201  4DDF D3 99        	OUT	(099H), A
 202  4DE1 C9           	RET
 203  4DE2              ; ****************************************************************************************************
 204  4DE2
 205  4DE2              ; ****************************************************************************************************
 206  4DE2              ; function gets slot and subslot data for specific page
 207  4DE2              ; input A=page (0, 1 or 2)
 208  4DE2              ; output B = 0A8H register value
 209  4DE2              ; output D = 0 is no subslots, 1 if yes
 210  4DE2              ; output C = 0A8H value when page 3 slot equals to requested page slot
 211  4DE2              ; output E = subslot value if present
 212  4DE2              ; modifies AF, BC, DE, HL
 213  4DE2              GET_PAGE_INFO:
 214  4DE2 6F               LD L, A
 215  4DE3 C6 C1            ADD A, low (EXPTBL)
 216  4DE5 32 EF 4D         LD (GET_PAGE_INFO_L1+1), A
 217  4DE8 DB A8            IN A, (0A8H)
 218  4DEA 47               LD B, A
 219  4DEB E6 3F            AND 03FH
 220  4DED 4F               LD C, A
 221  4DEE              GET_PAGE_INFO_L1:
 222  4DEE 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 223  4DF1 E6 80            AND 080H
 224  4DF3 28 1B            JR Z, GET_PAGE_INFO_L2
 225  4DF5                  ; expanded
 226  4DF5 2D               DEC L
 227  4DF6 FA 15 4E         JP M, GET_PAGE_INFO_L3
 228  4DF9 2D               DEC L
 229  4DFA FA 13 4E         JP M, GET_PAGE_INFO_L4
 230  4DFD                  ; page 2
 231  4DFD 07               RLCA
 232  4DFE 07               RLCA
 233  4DFF              GET_PAGE_INFO_L5:
 234  4DFF E6 C0            AND 0C0H
 235  4E01 B1               OR C
 236  4E02 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 237  4E04 4F               LD C, A
 238  4E05 3A FF FF         LD A, (0FFFFH)
 239  4E08 2F               CPL
 240  4E09 5F               LD E, A
 241  4E0A 16 01            LD D, 1
 242  4E0C 78               LD A, B ; return stack
 243  4E0D D3 A8            OUT (0A8H), A
 244  4E0F C9               RET
 245  4E10              GET_PAGE_INFO_L2:
 246  4E10                  ; not expanded
 247  4E10 16 00            LD D, 0
 248  4E12 C9               RET
 249  4E13              GET_PAGE_INFO_L4:
 250  4E13                  ; page 1
 251  4E13 0F               RRCA
 252  4E14 0F               RRCA
 253  4E15              GET_PAGE_INFO_L3:
 254  4E15                  ; page 0
 255  4E15 0F               RRCA
 256  4E16 0F               RRCA
 257  4E17 18 E6            JR GET_PAGE_INFO_L5
 258  4E19              ; ****************************************************************************************************
 259  4E19
 260  4E19              ; ****************************************************************************************************
 261  4E19              ; function returns original slot and subslot info
 262  4E19              ; input B = 0A8H register value
 263  4E19              ; input D = 0 is no subslots, 1 if yes
 264  4E19              ; input C = 0A8H value when page 3 slot equals to requested page slot
 265  4E19              ; input E = subslot value if present
 266  4E19              ; modifies AF, disables interrupts
 267  4E19              RESTORE_PAGE_INFO:
 268  4E19 7A               LD A, D
 269  4E1A B7               OR A
 270  4E1B 28 08            JR Z, RESTORE_PAGE_INFO_L1
 271  4E1D 79               LD A, C
 272  4E1E F3           	DI
 273  4E1F D3 A8            OUT (0A8H), A
 274  4E21 7B               LD A, E
 275  4E22 32 FF FF         LD (0FFFFH), A
 276  4E25              RESTORE_PAGE_INFO_L1:
 277  4E25 78               LD A, B
 278  4E26 D3 A8            OUT (0A8H), A
 279  4E28 C9               RET
 280  4E29              ; ****************************************************************************************************
 281  4E29
 282  4E29              ; *******************************************************************************************************
 283  4E29              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 284  4E29              ; INPUT:  A = SLOT ID: EXXXSSPP
 285  4E29              ; E = EXPANDED FLAG
 286  4E29              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 287  4E29              ; PP = PRIMARY SLOT NUMBER
 288  4E29              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 289  4E29              ; CHANGES: AF, BC, DE
 290  4E29
 291  4E29              LOCAL_ENASLT:
 292  4E29 CD 49 4E         CALL L0353
 293  4E2C FA 36 4E         JP M, L0340
 294  4E2F DB A8            IN A, (0A8H)
 295  4E31 A1               AND C
 296  4E32 B0               OR B
 297  4E33 D3 A8            OUT (0A8H), A
 298  4E35 C9               RET
 299  4E36              L0340:
 300  4E36 E5               PUSH HL
 301  4E37 CD 6E 4E         CALL L0378
 302  4E3A 4F               LD C, A
 303  4E3B 06 00            LD B, 0
 304  4E3D 7D               LD A, L
 305  4E3E A4               AND H
 306  4E3F B2               OR D
 307  4E40 21 C5 FC         LD HL, 0FCC5H
 308  4E43 09               ADD HL, BC
 309  4E44 77               LD (HL), A
 310  4E45 E1               POP HL
 311  4E46 79               LD A, C
 312  4E47 18 E0            JR LOCAL_ENASLT
 313  4E49              L0353:
 314  4E49 F3               DI
 315  4E4A F5               PUSH AF
 316  4E4B 7C               LD A, H
 317  4E4C 07               RLCA
 318  4E4D 07               RLCA
 319  4E4E E6 03            AND 3
 320  4E50 5F               LD E, A
 321  4E51 3E C0            LD A, 0C0H
 322  4E53              L035D:
 323  4E53 07               RLCA
 324  4E54 07               RLCA
 325  4E55 1D               DEC E
 326  4E56 F2 53 4E         JP P, L035D
 327  4E59 5F               LD E, A
 328  4E5A 2F               CPL
 329  4E5B 4F               LD C, A
 330  4E5C F1               POP AF
 331  4E5D F5               PUSH AF
 332  4E5E E6 03            AND 3
 333  4E60 3C               INC A
 334  4E61 47               LD B, A
 335  4E62 3E AB            LD A, 0ABH
 336  4E64              L036E:
 337  4E64 C6 55            ADD A, 055H
 338  4E66 10 FC            DJNZ L036E
 339  4E68 57               LD D, A
 340  4E69 A3               AND E
 341  4E6A 47               LD B, A
 342  4E6B F1               POP AF
 343  4E6C A7               AND A
 344  4E6D C9               RET
 345  4E6E              L0378:
 346  4E6E F5               PUSH AF
 347  4E6F 7A               LD A, D
 348  4E70 E6 C0            AND 0C0H
 349  4E72 4F               LD C, A
 350  4E73 F1               POP AF
 351  4E74 F5               PUSH AF
 352  4E75 57               LD D, A
 353  4E76 DB A8            IN A, (0A8H)
 354  4E78 47               LD B, A
 355  4E79 E6 3F            AND 03FH
 356  4E7B B1               OR C
 357  4E7C D3 A8            OUT (0A8H), A
 358  4E7E 7A               LD A, D
 359  4E7F 0F               RRCA
 360  4E80 0F               RRCA
 361  4E81 E6 03            AND 3
 362  4E83 57               LD D, A
 363  4E84 3E AB            LD A, 0ABH
 364  4E86              L0390:
 365  4E86 C6 55            ADD A, 055H
 366  4E88 15               DEC D
 367  4E89 F2 86 4E         JP P, L0390
 368  4E8C A3               AND E
 369  4E8D 57               LD D, A
 370  4E8E 7B               LD A, E
 371  4E8F 2F               CPL
 372  4E90 67               LD H, A
 373  4E91 3A FF FF         LD A, (0FFFFH)
 374  4E94 2F               CPL
 375  4E95 6F               LD L, A
 376  4E96 A4               AND H
 377  4E97 B2               OR D
 378  4E98 32 FF FF         LD (0FFFFH), A
 379  4E9B 78               LD A, B
 380  4E9C D3 A8            OUT (0A8H), A
 381  4E9E F1               POP AF
 382  4E9F E6 03            AND 3
 383  4EA1 C9               RET
 384  4EA2              ; *******************************************************************************************************
 385  4EA2
 386  4EA2              ; *******************************************************************************************************
 387  4EA2              ; some common code to activate page 0 and place values needed to restore original page on stack
 388  4EA2              ; input IY=return address
 389  4EA2              ENABLE_PAGE0:
 390  4EA2 AF               XOR A
 391  4EA3 CD E2 4D         CALL GET_PAGE_INFO
 392  4EA6 C5               PUSH BC
 393  4EA7 D5               PUSH DE
 394  4EA8 3A 41 F3         LD A, (RAMAD0)
 395  4EAB 26 00            LD H, 0
 396  4EAD CD 29 4E         CALL LOCAL_ENASLT
 397  4EB0 FD E9        	JP (IY)
 398  4EB2              ; *******************************************************************************************************
 399  4EB2
 400  4EB2              ; *******************************************************************************************************
 401  4EB2              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
 402  4EB2              ; struct {
 403  4EB2              ; DW y
 404  4EB2              ; DW x
 405  4EB2              ; DW pattern (0-31)
 406  4EB2              ; DW color
 407  4EB2              ; } [32]
 408  4EB2              ; will hide sprites whose location is outside of visible area
 409  4EB2              ; works in screen 1 and 2
 410  4EB2              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
 411  4EB2              ; modifies AF, AF', BC, DE, HL
 412  4EB2              SPRATR_UPDATE:
 413  4EB2              	; check if initialized
 414  4EB2 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
 415  4EB5 B7           	OR A
 416  4EB6 C8           	RET Z
 417  4EB7              	; check if update requested
 418  4EB7 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 419  4EBA 7E           	LD A, (HL)
 420  4EBB B7           	OR A
 421  4EBC C8           	RET Z
 422  4EBD              	; check screen mode
 423  4EBD 3A AF FC     	LD A, (SCRMOD)
 424  4EC0 3D           	DEC A
 425  4EC1 28 02        	JR Z, .L0 ; screen 1
 426  4EC3 3D           	DEC A
 427  4EC4 C0           	RET NZ ; not screen 2
 428  4EC5              .L0:
 429  4EC5 06 20        	LD B, 32 ; sprite number
 430  4EC7 0E 98        	LD C, #98 ; register for vpd data output
 431  4EC9              	; set VDP address
 432  4EC9 2A 28 F9     	LD HL, (ATRBAS)
 433  4ECC 3A FD 4C     	LD A, (FLICKER)
 434  4ECF 5F           	LD E, A
 435  4ED0 08           	EX AF, AF'
 436  4ED1 7B           	LD A, E
 437  4ED2 87           	ADD A, A
 438  4ED3 87           	ADD A, A
 439  4ED4 16 00        	LD D, 0
 440  4ED6 5F           	LD E, A
 441  4ED7 19           	ADD HL, DE
 442  4ED8 CD D7 4D     	CALL SETWRT_LOCAL
 443  4EDB ED 73 FB 4C  	LD (TMPSP), SP
 444  4EDF ED 7B F9 4C  	LD SP, (SPRATR_DATA)
 445  4EE3
 446  4EE3              .LOOP:
 447  4EE3 E1           	POP HL
 448  4EE4 24           	INC H
 449  4EE5 28 0D        	JR Z, .L1 ; negative number above -256
 450  4EE7 25           	DEC H
 451  4EE8 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
 452  4EEA 7D           	LD A, L
 453  4EEB FE C0        	CP 192
 454  4EED 30 10        	JR NC, .OUT3
 455  4EEF 3D           	DEC A ; due to VDP rule that top of screen is -1
 456  4EF0 57           	LD D, A
 457  4EF1 C3 0F 4F     	JP .X
 458  4EF4              .L1:
 459  4EF4 7D           	LD A, L
 460  4EF5 C6 10        	ADD 16
 461  4EF7 FA FF 4E     	JP M, .OUT3 ; below -16
 462  4EFA 2D           	DEC L ; due to VDP rule that top of screen is -1
 463  4EFB 55           	LD D, L
 464  4EFC C3 0F 4F     	JP .X
 465  4EFF              .OUT3:
 466  4EFF E1           	POP HL ; skip x value
 467  4F00              .OUT2:
 468  4F00 E1           	POP HL ; skip pattern
 469  4F01 E1           	POP HL ; skip color
 470  4F02 3E D1        	LD A, #D1
 471  4F04 D3 98        	OUT (#98), A ; sprite hidden
 472  4F06 D3 98        	OUT (#98), A ; value unimportant
 473  4F08 D3 98        	OUT (#98), A ; value unimportant
 474  4F0A D3 98        	OUT (#98), A ; value unimportant
 475  4F0C C3 33 4F     	JP .NEXT
 476  4F0F              .X:
 477  4F0F E1           	POP HL
 478  4F10 24           	INC H
 479  4F11 28 08        	JR Z, .L2
 480  4F13 25           	DEC H
 481  4F14 20 EA        	JR NZ, .OUT2
 482  4F16 1E 00        	LD E, 0 ; EC bit
 483  4F18 C3 24 4F     	JP .XY
 484  4F1B              .L2:
 485  4F1B 7D           	LD A, L
 486  4F1C C6 20        	ADD 32
 487  4F1E FA 00 4F     	JP M, .OUT2
 488  4F21 6F           	LD L, A
 489  4F22 1E 80        	LD E, #80
 490  4F24              .XY:
 491  4F24 ED 51        	OUT (C), D
 492  4F26 ED 69        	OUT (C), L
 493  4F28 E1           	POP HL ; pattern
 494  4F29 7D           	LD A, L
 495  4F2A 87           	ADD A, A
 496  4F2B 87           	ADD A, A ; needs to go at 4x
 497  4F2C D3 98        	OUT (#98), A
 498  4F2E E1           	POP HL ; color
 499  4F2F 7D           	LD A, L
 500  4F30 B3           	OR E
 501  4F31 D3 98        	OUT (#98), A
 502  4F33              .NEXT:
 503  4F33 08           	EX AF, AF'
 504  4F34 3C           	INC A
 505  4F35 E6 1F        	AND 31
 506  4F37 C2 4B 4F     	JP NZ, .NEXT2
 507  4F3A 08           	EX AF, AF'
 508  4F3B 2A 28 F9     	LD HL, (ATRBAS)
 509  4F3E              	; CALL SETWRT_LOCAL not allowed as SP modified
 510  4F3E 7D           	LD	A, L
 511  4F3F D3 99        	OUT	(099H), A
 512  4F41 7C           	LD	A, H
 513  4F42 E6 3F        	AND	03FH
 514  4F44 F6 40        	OR	040H
 515  4F46 D3 99        	OUT	(099H), A
 516  4F48 C3 4C 4F     	JP .NEXT3
 517  4F4B              .NEXT2:
 518  4F4B 08           	EX AF, AF'
 519  4F4C              .NEXT3:
 520  4F4C 10 95        	DJNZ .LOOP
 521  4F4E 08           	EX AF, AF'
 522  4F4F 3C           	INC A
 523  4F50 32 FD 4C     	LD (FLICKER), A
 524  4F53
 525  4F53 ED 7B FB 4C  	LD SP, (TMPSP)
 526  4F57 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 527  4F5A 36 00        	LD (HL), 0 ; zero out update flag
 528  4F5C C9           	RET
 529  4F5D              ; *******************************************************************************************************
 530  4F5D
 531  4F5D              ; General BASIC CALL-instruction handler
 532  4F5D              CALLHAND:
 533  4F5D E5           	PUSH HL
 534  4F5E 21 FE 4C     	LD	HL, CMDS ; pointer table based on starting letter
 535  4F61 3A 89 FD         LD A, (PROCNM)
 536  4F64 D6 41            SUB 'A'
 537  4F66 87               ADD A, A
 538  4F67 16 00            LD D, 0
 539  4F69 5F               LD E, A
 540  4F6A 19               ADD HL, DE
 541  4F6B 5E               LD E, (HL)
 542  4F6C 23               INC HL
 543  4F6D 56               LD D, (HL)
 544  4F6E 7A               LD A, D
 545  4F6F B3               OR E
 546  4F70 28 24            JR Z, .CMDNOTRECOGNIZED
 547  4F72 EB               EX DE, HL
 548  4F73              .CHKCMD:
 549  4F73 11 89 FD     	LD	DE, PROCNM
 550  4F76 1A           .LOOP:	LD	A,(DE)
 551  4F77 BE           	CP	(HL)
 552  4F78 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 553  4F7A 13           	INC	DE
 554  4F7B 23           	INC	HL
 555  4F7C A7           	AND	A
 556  4F7D 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 557  4F7F 5E           	LD	E,(HL)
 558  4F80 23           	INC	HL
 559  4F81 56           	LD	D,(HL)
 560  4F82 E1           	POP	HL		; routine address
 561  4F83 CD 09 50     	CALL	GETPREVCHAR
 562  4F86 CD 98 4F     	CALL	.CALLDE		; Call routine
 563  4F89 A7           	AND	A
 564  4F8A C9           	RET
 565  4F8B
 566  4F8B              .TONEXTCMD:
 567  4F8B 0E FF        	LD	C,0FFH
 568  4F8D AF           	XOR	A
 569  4F8E ED B1        	CPIR			; Skip to end of instruction name
 570  4F90 23           	INC	HL
 571  4F91 23           	INC	HL		; Skip address
 572  4F92 BE           	CP	(HL)
 573  4F93 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 574  4F95 E1           	POP	HL
 575  4F96              .CMDNOTRECOGNIZED:
 576  4F96 37               SCF
 577  4F97 C9           	RET
 578  4F98
 579  4F98              .CALLDE:
 580  4F98 D5           	PUSH	DE
 581  4F99 C9           	RET
 582  4F9A
 583  4F9A              ;---------------------------
 584  4F9A
 585  4F9A              ;---------------------------
 586  4F9A              UPRINT:
 587  4F9A CD DE 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 588  4F9D E5           	PUSH	HL
 589  4F9E CD D4 4F             CALL    GETSTRPNT
 590  4FA1              .LOOP
 591  4FA1 7E                   LD      A,(HL)
 592  4FA2 CD AE 4F             CALL    .UCASE
 593  4FA5 CD A2 00             CALL    CHPUT  ;Print
 594  4FA8 23                   INC     HL
 595  4FA9 10 F6                DJNZ    .LOOP
 596  4FAB
 597  4FAB E1           	POP	HL
 598  4FAC B7           	OR      A
 599  4FAD C9           	RET
 600  4FAE
 601  4FAE              .UCASE:
 602  4FAE FE 61                CP      "a"
 603  4FB0 D8                   RET     C
 604  4FB1 FE 7B                CP      "z"+1
 605  4FB3 D0                   RET     NC
 606  4FB4 E6 DF                AND     %11011111
 607  4FB6 C9                   RET
 608  4FB7              ;---------------------------
 609  4FB7              LPRINT:
 610  4FB7 CD DE 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 611  4FBA E5           	PUSH	HL
 612  4FBB CD D4 4F             CALL    GETSTRPNT
 613  4FBE              .LOOP
 614  4FBE 7E                   LD      A,(HL)
 615  4FBF CD CB 4F             CALL    .LCASE
 616  4FC2 CD A2 00             CALL    CHPUT  ;Print
 617  4FC5 23                   INC     HL
 618  4FC6 10 F6                DJNZ    .LOOP
 619  4FC8
 620  4FC8 E1           	POP	HL
 621  4FC9 B7           	OR      A
 622  4FCA C9           	RET
 623  4FCB
 624  4FCB              .LCASE:
 625  4FCB FE 41                CP      "A"
 626  4FCD D8                   RET     C
 627  4FCE FE 5B                CP      "Z"+1
 628  4FD0 D0                   RET     NC
 629  4FD1 F6 20                OR      %00100000
 630  4FD3 C9                   RET
 631  4FD4              ;---------------------------
 632  4FD4
 633  4FD4              GETSTRPNT:
 634  4FD4              ; OUT:
 635  4FD4              ; HL = String Address
 636  4FD4              ; B  = Lenght
 637  4FD4
 638  4FD4 2A F8 F7             LD      HL,(USR)
 639  4FD7 46                   LD      B,(HL)
 640  4FD8 23                   INC     HL
 641  4FD9 5E                   LD      E,(HL)
 642  4FDA 23                   INC     HL
 643  4FDB 56                   LD      D,(HL)
 644  4FDC EB                   EX      DE,HL
 645  4FDD C9                   RET
 646  4FDE
 647  4FDE              EVALTXTPARAM:
 648  4FDE CD FF 4F     	CALL	CHKCHAR
 649  4FE1 28           	DEFB	"("             ; Check for (
 650  4FE2 DD 21 64 4C  	LD	IX,FRMEVL
 651  4FE6 CD 59 01     	CALL	CALBAS		; Evaluate expression
 652  4FE9 3A 63 F6             LD      A,(VALTYP)
 653  4FEC FE 03                CP      3               ; Text type?
 654  4FEE C2 11 50             JP      NZ,TYPE_MISMATCH
 655  4FF1 E5                   PUSH	HL
 656  4FF2 DD 21 D0 67          LD	IX,FRESTR         ; Free the temporary string
 657  4FF6 CD 59 01             CALL	CALBAS
 658  4FF9 E1                   POP	HL
 659  4FFA CD FF 4F     	CALL	CHKCHAR
 660  4FFD 29           	DEFB	")"             ; Check for )
 661  4FFE C9                   RET
 662  4FFF
 663  4FFF
 664  4FFF              CHKCHAR:
 665  4FFF CD 09 50     	CALL	GETPREVCHAR	; Get previous basic char
 666  5002 E3           	EX	(SP),HL
 667  5003 BE           	CP	(HL) 	        ; Check if good char
 668  5004 20 0F        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 669  5006 23           	INC	HL
 670  5007 E3           	EX	(SP),HL
 671  5008 23           	INC	HL		; Get next basic char
 672  5009
 673  5009              GETPREVCHAR:
 674  5009 2B           	DEC	HL
 675  500A DD 21 66 46  	LD	IX,CHRGTR
 676  500E C3 59 01     	JP      CALBAS
 677  5011
 678  5011
 679  5011              TYPE_MISMATCH:
 680  5011 1E 0D            LD E, 13 ; Type mismatch
 681  5013 18 02            JR THROW_ERROR
 682  5015
 683  5015              SYNTAX_ERROR:
 684  5015 1E 02            LD E, 2 ; Syntax error
 685  5017              THROW_ERROR:
 686  5017 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 687  501B C3 59 01     	JP	CALBAS
 688  501E
 689  501E              ;---------------------------
 690  501E
 691  501E              ; *******************************************************************************************************
 692  501E              ; function to handle CALL MEMCPY basic extension
 693  501E              ; _MEMCPY ( INT source,
 694  501E              ;			INT destination,
 695  501E              ;			INT count,
 696  501E              ; will put ram in page 0 also, page 1 is already there
 697  501E              MEMCPY:
 698  501E              	; opening (
 699  501E CD FF 4F     	CALL CHKCHAR
 700  5021 28           	DB '('
 701  5022              	; get source address
 702  5022 DD 21 2F 54  	LD IX, FRMQNT
 703  5026 CD 59 01     	CALL CALBAS
 704  5029 D5           	PUSH DE
 705  502A              	; comma
 706  502A CD FF 4F     	CALL CHKCHAR
 707  502D 2C           	DB ','
 708  502E              	; get destination address
 709  502E DD 21 2F 54  	LD IX, FRMQNT
 710  5032 CD 59 01     	CALL CALBAS
 711  5035 D5           	PUSH DE
 712  5036              	; comma
 713  5036 CD FF 4F     	CALL CHKCHAR
 714  5039 2C           	DB ','
 715  503A              	; get length
 716  503A DD 21 2F 54  	LD IX, FRMQNT
 717  503E CD 59 01     	CALL CALBAS
 718  5041 D5           	PUSH DE
 719  5042              	; ending )
 720  5042 CD FF 4F     	CALL CHKCHAR
 721  5045 29           	DB ')'
 722  5046
 723  5046              	; save position
 724  5046 E5           	PUSH HL
 725  5047 DD E1        	POP IX
 726  5049
 727  5049 C1           	POP BC ; count
 728  504A D1           	POP DE ; destination
 729  504B E1           	POP HL ; source
 730  504C D9           	EXX
 731  504D              	; enable page 0
 732  504D FD 21 54 50  	LD IY, .RET
 733  5051 C3 A2 4E     	JP ENABLE_PAGE0
 734  5054              .RET:
 735  5054 FB           	EI
 736  5055 D9           	EXX
 737  5056 ED B0        	LDIR
 738  5058 D1               POP DE
 739  5059 C1               POP BC
 740  505A CD 19 4E         CALL RESTORE_PAGE_INFO
 741  505D DD E5        	PUSH IX
 742  505F E1           	POP HL
 743  5060 C9           	RET
 744  5061              ; *******************************************************************************************************
 745  5061
 746  5061              ; *******************************************************************************************************
 747  5061              ; function to handle CALL FILVRM basic extension
 748  5061              ; FILVRM ( INT offset,
 749  5061              ;		   INT count,
 750  5061              ;		   BYTE value,
 751  5061              ;		   BYTE wait_vsync) >0 = true
 752  5061              ; wait_vsync will issue HALT before copying
 753  5061              FILVRM:
 754  5061              	; opening (
 755  5061 CD FF 4F     	CALL CHKCHAR
 756  5064 28           	DB '('
 757  5065              	; get offset address
 758  5065 DD 21 2F 54  	LD IX, FRMQNT
 759  5069 CD 59 01     	CALL CALBAS
 760  506C D5           	PUSH DE
 761  506D              	; comma
 762  506D CD FF 4F     	CALL CHKCHAR
 763  5070 2C           	DB ','
 764  5071              	; get count
 765  5071 DD 21 2F 54  	LD IX, FRMQNT
 766  5075 CD 59 01     	CALL CALBAS
 767  5078 D5           	PUSH DE
 768  5079              	; comma
 769  5079 CD FF 4F     	CALL CHKCHAR
 770  507C 2C           	DB ','
 771  507D              	; get value
 772  507D DD 21 1C 52  	LD IX, GETBYT
 773  5081 CD 59 01     	CALL CALBAS
 774  5084 F5           	PUSH AF
 775  5085              	; comma
 776  5085 CD FF 4F     	CALL CHKCHAR
 777  5088 2C           	DB ','
 778  5089              	; get vsync wait
 779  5089 DD 21 1C 52  	LD IX, GETBYT
 780  508D CD 59 01     	CALL CALBAS
 781  5090 F5           	PUSH AF
 782  5091              	; ending )
 783  5091 CD FF 4F     	CALL CHKCHAR
 784  5094 29           	DB ')'
 785  5095
 786  5095 FB               EI
 787  5096              	; save position
 788  5096 E5           	PUSH HL
 789  5097 DD E1        	POP IX
 790  5099
 791  5099              	; syntax ok
 792  5099              	; wait for vsync if needed
 793  5099 F1           	POP AF
 794  509A B7           	OR A
 795  509B 28 01        	JR Z, .L1
 796  509D 76           	HALT
 797  509E
 798  509E              .L1:
 799  509E F1               POP AF ; value
 800  509F C1               POP BC ; count
 801  50A0 E1               POP HL ; offset
 802  50A1 CD 56 00         CALL BIOS_FILVRM
 803  50A4
 804  50A4              .L3:
 805  50A4 DD E5        	PUSH IX
 806  50A6 E1           	POP HL
 807  50A7 C9           	RET
 808  50A8              ; *******************************************************************************************************
 809  50A8
 810  50A8              ; *******************************************************************************************************
 811  50A8              ; function to handle CALL FILRAM basic extension
 812  50A8              ; FILRAM ( INT start address,
 813  50A8              ;		   INT count,
 814  50A8              ;		   BYTE value,
 815  50A8              ; will put ram in page 0 also, page 1 is already there
 816  50A8              FILRAM:
 817  50A8              	; opening (
 818  50A8 CD FF 4F     	CALL CHKCHAR
 819  50AB 28           	DB '('
 820  50AC              	; get start address
 821  50AC DD 21 2F 54  	LD IX, FRMQNT
 822  50B0 CD 59 01     	CALL CALBAS
 823  50B3 D5           	PUSH DE
 824  50B4              	; comma
 825  50B4 CD FF 4F     	CALL CHKCHAR
 826  50B7 2C           	DB ','
 827  50B8              	; get count
 828  50B8 DD 21 2F 54  	LD IX, FRMQNT
 829  50BC CD 59 01     	CALL CALBAS
 830  50BF D5           	PUSH DE
 831  50C0              	; comma
 832  50C0 CD FF 4F     	CALL CHKCHAR
 833  50C3 2C           	DB ','
 834  50C4              	; get value
 835  50C4 DD 21 1C 52  	LD IX, GETBYT
 836  50C8 CD 59 01     	CALL CALBAS
 837  50CB F5           	PUSH AF
 838  50CC              	; ending )
 839  50CC CD FF 4F     	CALL CHKCHAR
 840  50CF 29           	DB ')'
 841  50D0
 842  50D0              	; save position
 843  50D0 E5           	PUSH HL
 844  50D1 DD E1        	POP IX
 845  50D3
 846  50D3 D1           	POP DE ; actually AF
 847  50D4 C1           	POP BC ; count
 848  50D5 E1           	POP HL ; start address
 849  50D6 78           	LD A, B
 850  50D7 B7           	OR A
 851  50D8 20 0A        	JR NZ, .L1 ; >=256 bytes to fill
 852  50DA B1           	OR C
 853  50DB 28 19        	JR Z, .EXIT ; 0 bytes to fill, skip
 854  50DD 79           	LD A, C
 855  50DE 3D           	DEC A
 856  50DF 20 03        	JR NZ, .L1 ; ; >1 byte to fill
 857  50E1              	; one byte to fill
 858  50E1 72           	LD (HL), D
 859  50E2 18 12        	JR .EXIT
 860  50E4              .L1:
 861  50E4 D9           	EXX
 862  50E5              	; enable page 0
 863  50E5 FD 21 EC 50  	LD IY, .RET
 864  50E9 C3 A2 4E     	JP ENABLE_PAGE0
 865  50EC              .RET:
 866  50EC FB           	EI
 867  50ED D9           	EXX
 868  50EE CD FA 50     	CALL .FILLVALUE
 869  50F1 D1               POP DE
 870  50F2 C1               POP BC
 871  50F3 CD 19 4E         CALL RESTORE_PAGE_INFO
 872  50F6              .EXIT:
 873  50F6 DD E5        	PUSH IX
 874  50F8 E1           	POP HL
 875  50F9 C9           	RET
 876  50FA
 877  50FA              .FILLVALUE:
 878  50FA 72               LD (HL), D
 879  50FB 54               LD D, H
 880  50FC 5D               LD E, L
 881  50FD 13               INC DE
 882  50FE 0B               DEC BC
 883  50FF ED B0            LDIR
 884  5101 C9               RET
 885  5102              ; *******************************************************************************************************
 886  5102
 887  5102              ; *******************************************************************************************************
 888  5102              ; function to handle CALL GENCAL basic extension
 889  5102              ; GENCAL ( INT fn_addr, = address of the function to call
 890  5102              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 891  5102              ; output values of reristers will also be stored at reg_list_ptr
 892  5102              GENCAL_VAR_SP:
 893  5102 00 00            DW 0
 894  5104              GENCAL_VAR_SP2:
 895  5104 00 00            DW 0
 896  5106              GENCAL:
 897  5106              	; opening (
 898  5106 CD FF 4F     	CALL CHKCHAR
 899  5109 28           	DB '('
 900  510A              	; get function address
 901  510A DD 21 2F 54  	LD IX, FRMQNT
 902  510E CD 59 01     	CALL CALBAS
 903  5111 D5           	PUSH DE
 904  5112              	; comma
 905  5112 CD FF 4F     	CALL CHKCHAR
 906  5115 2C           	DB ','
 907  5116              	; get pointer to register list
 908  5116 DD 21 2F 54  	LD IX, FRMQNT
 909  511A CD 59 01     	CALL CALBAS
 910  511D D5           	PUSH DE
 911  511E              	; ending )
 912  511E CD FF 4F     	CALL CHKCHAR
 913  5121 29           	DB ')'
 914  5122
 915  5122              	; save BASIC token position
 916  5122 E5           	PUSH HL
 917  5123 D9               EXX
 918  5124 E1           	POP HL ; HL'=next basic token
 919  5125 D9               EXX
 920  5126
 921  5126 E1               POP HL ; get pointer to register values
 922  5127 ED 73 02 51      LD (GENCAL_VAR_SP), SP
 923  512B F3               DI
 924  512C F9               LD SP, HL
 925  512D F1               POP AF
 926  512E C1               POP BC
 927  512F D1               POP DE
 928  5130 E1               POP HL
 929  5131 DD E1            POP IX
 930  5133 FD E1            POP IY
 931  5135 D9               EXX
 932  5136 ED 73 04 51      LD (GENCAL_VAR_SP2), SP
 933  513A ED 7B 02 51      LD SP, (GENCAL_VAR_SP)
 934  513E FB               EI
 935  513F D1               POP DE ; get function to call
 936  5140 E5               PUSH HL
 937  5141 CD 5C 51         CALL .EXXDECALL
 938  5144 F3               DI
 939  5145 ED 73 02 51      LD (GENCAL_VAR_SP), SP
 940  5149 ED 7B 04 51      LD SP, (GENCAL_VAR_SP2)
 941  514D FD E5            PUSH IY
 942  514F DD E5            PUSH IX
 943  5151 E5               PUSH HL
 944  5152 D5               PUSH DE
 945  5153 C5               PUSH BC
 946  5154 F5               PUSH AF
 947  5155 ED 7B 02 51      LD SP, (GENCAL_VAR_SP)
 948  5159 FB               EI
 949  515A E1               POP HL
 950  515B C9           	RET
 951  515C
 952  515C              .EXXDECALL:
 953  515C D5               PUSH DE
 954  515D D9               EXX
 955  515E C9               RET
 956  515F              ; *******************************************************************************************************
 957  515F
 958  515F              ; *******************************************************************************************************
 959  515F              ; function to handle CALL MEMVRM basic extension
 960  515F              ; copies from RAM to VRAM
 961  515F              ; _MEMVRM ( INT source,
 962  515F              ;			INT destination,
 963  515F              ;			INT count,
 964  515F              ;			BYTE wait_vsync) >0 = treu
 965  515F              ; will put ram in page 0 also, page 1 is already there
 966  515F              ; wait_vsync will issue HALT before copying
 967  515F              MEMVRM:
 968  515F              	; opening (
 969  515F CD FF 4F     	CALL CHKCHAR
 970  5162 28           	DB '('
 971  5163              	; get source address
 972  5163 DD 21 2F 54  	LD IX, FRMQNT
 973  5167 CD 59 01     	CALL CALBAS
 974  516A D5           	PUSH DE
 975  516B              	; comma
 976  516B CD FF 4F     	CALL CHKCHAR
 977  516E 2C           	DB ','
 978  516F              	; get destination address
 979  516F DD 21 2F 54  	LD IX, FRMQNT
 980  5173 CD 59 01     	CALL CALBAS
 981  5176 D5           	PUSH DE
 982  5177              	; comma
 983  5177 CD FF 4F     	CALL CHKCHAR
 984  517A 2C           	DB ','
 985  517B              	; get length
 986  517B DD 21 2F 54  	LD IX, FRMQNT
 987  517F CD 59 01     	CALL CALBAS
 988  5182 D5           	PUSH DE
 989  5183              	; comma
 990  5183 CD FF 4F     	CALL CHKCHAR
 991  5186 2C           	DB ','
 992  5187              	; get vsync wait
 993  5187 DD 21 1C 52  	LD IX, GETBYT
 994  518B CD 59 01     	CALL CALBAS
 995  518E F5           	PUSH AF
 996  518F              	; ending )
 997  518F CD FF 4F     	CALL CHKCHAR
 998  5192 29           	DB ')'
 999  5193
1000  5193                  ; save position in BASIC text
1001  5193 E5           	PUSH HL
1002  5194 DD E1        	POP IX
1003  5196
1004  5196 F1           	POP AF ; wait vsync
1005  5197 B7           	OR A
1006  5198 28 03        	JR Z, .L1
1007  519A FB               EI
1008  519B 76           	HALT
1009  519C F3           	DI
1010  519D              .L1:
1011  519D              	; pop LDIR parameters and store away for later
1012  519D C1           	POP BC ; count
1013  519E D1           	POP DE ; vram destination
1014  519F E1           	POP HL ; ram source
1015  51A0 D9           	EXX
1016  51A1 FD 21 A8 51   	LD IY, .RET
1017  51A5 C3 A2 4E     	JP ENABLE_PAGE0
1018  51A8              .RET:
1019  51A8 FB           	EI
1020  51A9 D9           	EXX
1021  51AA CD B6 51     	CALL .LDIRVM
1022  51AD D1               POP DE
1023  51AE C1               POP BC
1024  51AF CD 19 4E         CALL RESTORE_PAGE_INFO
1025  51B2 DD E5        	PUSH IX
1026  51B4 E1           	POP HL
1027  51B5 C9           	RET
1028  51B6
1029  51B6              .LDIRVM:
1030  51B6 EB           	EX DE, HL
1031  51B7 CD D7 4D     	CALL SETWRT_LOCAL
1032  51BA EB           	EX DE, HL
1033  51BB 78           	LD A, B
1034  51BC B7           	OR A
1035  51BD 28 0D        	JR Z, .L3
1036  51BF C5           	PUSH BC
1037  51C0 0E 98        	LD C, #98
1038  51C2              .L2:
1039  51C2 50           	LD D, B
1040  51C3 06 00        	LD B, 0
1041  51C5 CD D2 51     	CALL .BBYTECOPY
1042  51C8 42           	LD B, D
1043  51C9 10 F7        	DJNZ .L2
1044  51CB C1           	POP BC
1045  51CC              .L3:
1046  51CC 79           	LD A, C
1047  51CD B7           	OR A
1048  51CE C8           	RET Z
1049  51CF 41           	LD B, C
1050  51D0 0E 98        	LD C, #98
1051  51D2              .BBYTECOPY:
1052  51D2 ED A3        	OUTI
1053  51D4 C2 D2 51     	JP	NZ, .BBYTECOPY
1054  51D7 C9           	RET
1055  51D8              ; *******************************************************************************************************
1056  51D8
1057  51D8              ; *******************************************************************************************************
1058  51D8              ; function to handle CALL VRMMEM basic extension
1059  51D8              ; copies from RAM to VRAM
1060  51D8              ; _VRMMEM ( INT source,
1061  51D8              ;			INT destination,
1062  51D8              ;			INT count
1063  51D8              ; will put ram in page 0 also, page 1 is already there
1064  51D8              VRMMEM:
1065  51D8              	; opening (
1066  51D8 CD FF 4F     	CALL CHKCHAR
1067  51DB 28           	DB '('
1068  51DC              	; get source address
1069  51DC DD 21 2F 54  	LD IX, FRMQNT
1070  51E0 CD 59 01     	CALL CALBAS
1071  51E3 D5           	PUSH DE
1072  51E4              	; comma
1073  51E4 CD FF 4F     	CALL CHKCHAR
1074  51E7 2C           	DB ','
1075  51E8              	; get destination address
1076  51E8 DD 21 2F 54  	LD IX, FRMQNT
1077  51EC CD 59 01     	CALL CALBAS
1078  51EF D5           	PUSH DE
1079  51F0              	; comma
1080  51F0 CD FF 4F     	CALL CHKCHAR
1081  51F3 2C           	DB ','
1082  51F4              	; get length
1083  51F4 DD 21 2F 54  	LD IX, FRMQNT
1084  51F8 CD 59 01     	CALL CALBAS
1085  51FB D5           	PUSH DE
1086  51FC              	; ending )
1087  51FC CD FF 4F     	CALL CHKCHAR
1088  51FF 29           	DB ')'
1089  5200
1090  5200                  ; save position in BASIC text
1091  5200 E5           	PUSH HL
1092  5201 DD E1        	POP IX
1093  5203
1094  5203 C1           	POP BC ; count
1095  5204 D1           	POP DE ; destination
1096  5205 E1           	POP HL ; source
1097  5206 D9           	EXX
1098  5207 FD 21 0E 52  	LD IY, .RET
1099  520B C3 A2 4E     	JP ENABLE_PAGE0
1100  520E              .RET:
1101  520E FB           	EI
1102  520F D9           	EXX
1103  5210 CD 1C 52     	CALL .LDIRMV
1104  5213 D1               POP DE
1105  5214 C1               POP BC
1106  5215 CD 19 4E         CALL RESTORE_PAGE_INFO
1107  5218 DD E5        	PUSH IX
1108  521A E1           	POP HL
1109  521B C9           	RET
1110  521C
1111  521C              .LDIRMV:
1112  521C CD D7 4D     	CALL SETWRT_LOCAL
1113  521F              .L4:
1114  521F DB 98            IN A, (#98)
1115  5221 12           	LD (DE), A
1116  5222 13               INC DE
1117  5223 0B               DEC BC
1118  5224 79               LD A, C
1119  5225 B0               OR B
1120  5226 C2 1F 52         JP NZ, .L4
1121  5229 C9               RET
1122  522A              ; *******************************************************************************************************
1123  522A
1124  522A              ; *******************************************************************************************************
1125  522A              ; H.TIMI function
1126  522A              MBGE_HTIMI:
1127  522A               EXPORT MBGE_HTIMI
1128  522A F5           	PUSH AF
1129  522B
1130  522B CD B2 4E     	CALL SPRATR_UPDATE
1131  522E
1132  522E 3A F5 4C     	LD A, (SOUND_ENABLED)
1133  5231 B7           	OR A
1134  5232 28 2A        	JR Z, .EXIT
1135  5234
1136  5234              	; enable page 2
1137  5234 3E 02            LD A, 2
1138  5236 CD E2 4D         CALL GET_PAGE_INFO
1139  5239 C5               PUSH BC
1140  523A D5               PUSH DE
1141  523B 3A 43 F3         LD A, (RAMAD2)
1142  523E 26 80            LD H, 080H
1143  5240 CD 29 4E         CALL LOCAL_ENASLT
1144  5243              	; enable page 0
1145  5243 AF               XOR A
1146  5244 CD E2 4D         CALL GET_PAGE_INFO
1147  5247 C5               PUSH BC
1148  5248 D5               PUSH DE
1149  5249 3A 41 F3         LD A, (RAMAD0)
1150  524C 26 00            LD H, 0
1151  524E CD 29 4E         CALL LOCAL_ENASLT
1152  5251
1153  5251 CD 31 42     	CALL PLY_AKG_PLAY
1154  5254
1155  5254              	; restore page 0
1156  5254 D1               POP DE
1157  5255 C1               POP BC
1158  5256 CD 19 4E         CALL RESTORE_PAGE_INFO
1159  5259              	; restore page 2
1160  5259 D1               POP DE
1161  525A C1               POP BC
1162  525B CD 19 4E         CALL RESTORE_PAGE_INFO
1163  525E
1164  525E              .EXIT:
1165  525E F1           	POP AF
1166  525F C3 EE 4C     	JP ORIG.HTIMI
1167  5262              ; *******************************************************************************************************
1168  5262
1169  5262              ; *******************************************************************************************************
1170  5262              ; interrupt handler when page 0 enabled
1171  5262              VBLANK:
1172  5262              	EXPORT VBLANK
1173  5262
1174  5262 F5               PUSH AF
1175  5263              	; is VDP originator ?
1176  5263 DB 99        	IN	A, (099H)
1177  5265 A7           	AND	A
1178  5266 F2 8C 52     	JP P, .EXIT
1179  5269 3A F5 4C     	LD A, (SOUND_ENABLED)
1180  526C B7           	OR A
1181  526D 28 1D        	JR Z, .EXIT
1182  526F
1183  526F C5               PUSH BC
1184  5270 D5               PUSH DE
1185  5271 E5               PUSH HL
1186  5272 08               EX AF, AF'
1187  5273 D9               EXX
1188  5274 F5               PUSH AF
1189  5275 C5               PUSH BC
1190  5276 D5               PUSH DE
1191  5277 E5               PUSH HL
1192  5278 DD E5            PUSH IX
1193  527A FD E5            PUSH IY
1194  527C
1195  527C CD 31 42     	CALL PLY_AKG_PLAY
1196  527F
1197  527F FD E1            POP IY
1198  5281 DD E1            POP IX
1199  5283 E1               POP HL
1200  5284 D1               POP DE
1201  5285 C1               POP BC
1202  5286 F1               POP AF
1203  5287 08               EX AF, AF'
1204  5288 D9               EXX
1205  5289 E1               POP HL
1206  528A D1               POP DE
1207  528B C1               POP BC
1208  528C              .EXIT:
1209  528C F1           	POP AF
1210  528D FB           	EI
1211  528E ED 4D        	RETI
1212  5290              ; *******************************************************************************************************
1213  5290
1214  5290              ; *******************************************************************************************************
1215  5290              ; function to handle CALL SNDPLYINIT basic extension
1216  5290              ; initializes sound player
1217  5290              ; _SNDPLYINIT ( INT music_offset,
1218  5290              ;				INT sfx_offset, can be -1 if no SFX
1219  5290              ; will put ram in page 0 also, page 1 is already there
1220  5290              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1221  5290              SNDPLYINIT:
1222  5290              	; opening (
1223  5290 CD FF 4F     	CALL CHKCHAR
1224  5293 28           	DB '('
1225  5294              	; get music address
1226  5294 DD 21 2F 54  	LD IX, FRMQNT
1227  5298 CD 59 01     	CALL CALBAS
1228  529B D5           	PUSH DE
1229  529C              	; comma
1230  529C CD FF 4F     	CALL CHKCHAR
1231  529F 2C           	DB ','
1232  52A0              	; get sfx address
1233  52A0 DD 21 2F 54  	LD IX, FRMQNT
1234  52A4 CD 59 01     	CALL CALBAS
1235  52A7 D5           	PUSH DE
1236  52A8              	; ending )
1237  52A8 CD FF 4F     	CALL CHKCHAR
1238  52AB 29           	DB ')'
1239  52AC
1240  52AC                  ; save position in BASIC text
1241  52AC 44           	LD B, H
1242  52AD 4D           	LD C, L
1243  52AE
1244  52AE              	; pop LDIR parameters and store away for later
1245  52AE D1           	POP DE ; sfx address
1246  52AF E1           	POP HL ; music address
1247  52B0 C5           	PUSH BC ; basic text location
1248  52B1 D9           	EXX
1249  52B2 FD 21 B9 52  	LD IY, .RET
1250  52B6 C3 A2 4E     	JP ENABLE_PAGE0
1251  52B9              .RET:
1252  52B9 D9           	EXX
1253  52BA
1254  52BA D5           	PUSH DE
1255  52BB AF           	XOR A
1256  52BC              	; HL = music location
1257  52BC CD 60 41     	CALL PLY_AKG_INIT
1258  52BF 3E 01        	LD A, 1
1259  52C1 32 F3 4C     	LD (MUSIC_INIT_STATUS), A
1260  52C4
1261  52C4 E1           	POP HL ; SFX
1262  52C5              	; check if SFX address -1
1263  52C5 23           	INC HL
1264  52C6 7D           	LD A, L
1265  52C7 B4           	OR H
1266  52C8 28 09        	JR Z,.L1
1267  52CA 2B           	DEC HL
1268  52CB CD 1B 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1269  52CE 3E 01        	LD A, 1
1270  52D0 32 F4 4C     	LD (SFX_INIT_STATUS), A
1271  52D3              .L1:
1272  52D3 D1               POP DE
1273  52D4 C1               POP BC
1274  52D5 CD 19 4E         CALL RESTORE_PAGE_INFO
1275  52D8
1276  52D8 E1           	POP HL
1277  52D9 C9           	RET
1278  52DA              ; *******************************************************************************************************
1279  52DA
1280  52DA              ; *******************************************************************************************************
1281  52DA              ; function to handle CALL SNDPLYON basic extension
1282  52DA              ; enables sound player
1283  52DA              ; _SNDPLYON
1284  52DA              ; sets SOUND_ENABLED variable to 1 if init call was done
1285  52DA              ; if not throws out of data error
1286  52DA              SNDPLYON:
1287  52DA 3A F3 4C     	LD A, (MUSIC_INIT_STATUS)
1288  52DD B7           	OR A
1289  52DE 20 05        	JR NZ, .L1
1290  52E0              	; player not initialized, throw error
1291  52E0 1E 04        	LD E, 04 ; Out of DATA
1292  52E2 C3 17 50     	JP THROW_ERROR
1293  52E5              .L1:
1294  52E5 32 F5 4C     	LD (SOUND_ENABLED), A
1295  52E8              	; disable key click
1296  52E8 AF           	XOR A
1297  52E9 32 DB F3     	LD (CLIKSW), A
1298  52EC C9           	RET
1299  52ED              ; *******************************************************************************************************
1300  52ED
1301  52ED              ; *******************************************************************************************************
1302  52ED              ; function to handle CALL SNDPLYOFF basic extension
1303  52ED              ; disables sound player
1304  52ED              ; _SNDPLYOFF
1305  52ED              ; sets SOUND_ENABLED variable to 0
1306  52ED              ; calls AKG to stop music and SFX on all channels if initialized
1307  52ED              SNDPLYOFF:
1308  52ED 3A F5 4C     	LD A, (SOUND_ENABLED)
1309  52F0 B7           	OR A
1310  52F1 C8           	RET Z ; already stopped
1311  52F2 AF           	XOR A
1312  52F3 32 F5 4C     	LD (SOUND_ENABLED), A
1313  52F6 E5           	PUSH HL
1314  52F7 CD 1F 42     	CALL PLY_AKG_STOP
1315  52FA 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1316  52FD B7           	OR A
1317  52FE 28 0E        	JR Z, .EXIT ; SFX not in use
1318  5300 AF           	XOR A
1319  5301 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1320  5304 3E 01        	LD A, 1
1321  5306 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1322  5309 3E 02        	LD A, 2
1323  530B CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1324  530E              .EXIT:
1325  530E E1           	POP HL
1326  530F C9           	RET
1327  5310              ; *******************************************************************************************************
1328  5310
1329  5310              ; *******************************************************************************************************
1330  5310              ; function to handle CALL SNDSFX basic extension
1331  5310              ; plays a sound effect
1332  5310              ; _SNDSFX ( BYTE sfx_number, >0
1333  5310              ;			BYTE channel, = 0,1 or 2
1334  5310              ;			BYTE inverted_volume = 0-16, 0 being full volume
1335  5310              ; will put ram in page 0 also, page 1 is already there
1336  5310              ; if sound off throws illegal function call
1337  5310              ; if sfx not initialized, throws out of data
1338  5310              SNDSFX:
1339  5310              	; opening (
1340  5310 CD FF 4F     	CALL CHKCHAR
1341  5313 28           	DB '('
1342  5314              	; get sfx_number
1343  5314 DD 21 1C 52  	LD IX, GETBYT
1344  5318 CD 59 01     	CALL CALBAS
1345  531B D5           	PUSH DE
1346  531C              	; comma
1347  531C CD FF 4F     	CALL CHKCHAR
1348  531F 2C           	DB ','
1349  5320              	; get sfx address
1350  5320 DD 21 1C 52  	LD IX, GETBYT
1351  5324 CD 59 01     	CALL CALBAS
1352  5327 D5           	PUSH DE
1353  5328              	; comma
1354  5328 CD FF 4F     	CALL CHKCHAR
1355  532B 2C           	DB ','
1356  532C              	; get inverted volume
1357  532C DD 21 1C 52  	LD IX, GETBYT
1358  5330 CD 59 01     	CALL CALBAS
1359  5333 D5           	PUSH DE
1360  5334              	; ending )
1361  5334 CD FF 4F     	CALL CHKCHAR
1362  5337 29           	DB ')'
1363  5338
1364  5338 3A F5 4C     	LD A, (SOUND_ENABLED)
1365  533B B7           	OR A
1366  533C 20 05        	JR NZ, .L1
1367  533E              	; sound disabled, throw illegal function call
1368  533E 1E 05        	LD E, 5
1369  5340 C3 17 50     	JP THROW_ERROR
1370  5343              .L1:
1371  5343 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1372  5346 B7           	OR A
1373  5347 20 05        	JR NZ, .L2
1374  5349              	; sfx data not initialized, throw out of data
1375  5349 1E 04        	LD E, 4
1376  534B C3 17 50     	JP THROW_ERROR
1377  534E              .L2:
1378  534E              	; pop  parameters and store away for later
1379  534E D1           	POP DE ; inverted volume
1380  534F 43           	LD B, E
1381  5350 D1           	POP DE ; channel
1382  5351 4B           	LD C, E
1383  5352 D1           	POP DE
1384  5353 7B           	LD A, E
1385  5354 08           	EX AF, AF'
1386  5355 E5           	PUSH HL ; basic text location
1387  5356 D9           	EXX
1388  5357 FD 21 5E 53  	LD IY, .RET
1389  535B C3 A2 4E     	JP ENABLE_PAGE0
1390  535E              .RET:
1391  535E D9           	EXX
1392  535F 08           	EX AF, AF'
1393  5360 CD 1F 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1394  5363
1395  5363 D1               POP DE
1396  5364 C1               POP BC
1397  5365 CD 19 4E         CALL RESTORE_PAGE_INFO
1398  5368
1399  5368 E1           	POP HL
1400  5369 C9           	RET
1401  536A              ; *******************************************************************************************************
1402  536A
1403  536A              ; *******************************************************************************************************
1404  536A              ; function to handle CALL SPRATRINI basic extension
1405  536A              ; initializes sprites handler
1406  536A              ; _SPRATRINI ( INT sprites_attributes_data,
1407  536A              ;			   INT update_variable_location )
1408  536A              ; expects both locations to be in range #8000+ or throws an error
1409  536A              ; since these should be BASIC variables
1410  536A              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA
1411  536A              SPRATRINI:
1412  536A              	; opening (
1413  536A CD FF 4F     	CALL CHKCHAR
1414  536D 28           	DB '('
1415  536E              	; get address of sprite attribute table DIM SA%(3,31)
1416  536E DD 21 2F 54  	LD IX, FRMQNT
1417  5372 CD 59 01     	CALL CALBAS
1418  5375 D5           	PUSH DE
1419  5376              	; comma
1420  5376 CD FF 4F     	CALL CHKCHAR
1421  5379 2C           	DB ','
1422  537A              	; get update variable location SU%
1423  537A DD 21 2F 54  	LD IX, FRMQNT
1424  537E CD 59 01     	CALL CALBAS
1425  5381 D5           	PUSH DE
1426  5382              	; ending )
1427  5382 CD FF 4F     	CALL CHKCHAR
1428  5385 29           	DB ')'
1429  5386
1430  5386 D1           	POP DE ; update variable location
1431  5387 CB 7A        	BIT 7, D ; is address >= &h8000
1432  5389 20 05        	JR NZ, .L1
1433  538B 1E 05        	LD E, 5 ; illegal function call
1434  538D C3 17 50     	JP THROW_ERROR
1435  5390              .L1:
1436  5390 ED 53 F7 4C  	LD (SPRATR_UPDATE_FLAG), DE
1437  5394 D1           	POP DE ; address of sprite attribute table
1438  5395 CB 7A        	BIT 7, D ; is address >= &h8000
1439  5397 20 05        	JR NZ, .L2
1440  5399 1E 05        	LD E, 5 ; illegal function call
1441  539B C3 17 50     	JP THROW_ERROR
1442  539E              .L2:
1443  539E ED 53 F9 4C  	LD (SPRATR_DATA), DE
1444  53A2 3E 01        	LD A, 1
1445  53A4 32 F6 4C     	LD (SPRATR_INIT_STATUS), A
1446  53A7 C9           	RET
1447  53A8              ; *******************************************************************************************************
1448  53A8
1449  53A8              ; *******************************************************************************************************
1450  53A8              ; function to handle CALL SPRSET basic extension
1451  53A8              ; sets position, and optionally pattern and color of sprite
1452  53A8              ; _SPRSET ( BYTE sprite_num , valid 0-31
1453  53A8              ;			INT x,
1454  53A8              ;			INT y,
1455  53A8              ;			INT pattern, valid 0-31, otherwise ignored
1456  53A8              ;			INT color, valid 0-15, otherwise ignored
1457  53A8              SPRSET:
1458  53A8 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1459  53AB B7           	OR A
1460  53AC 20 05        	JR NZ, .L1
1461  53AE 1E 05        	LD E, 5 ; illegal function call
1462  53B0 C3 17 50     	JP THROW_ERROR
1463  53B3              .L1:
1464  53B3              	; opening (
1465  53B3 CD FF 4F     	CALL CHKCHAR
1466  53B6 28           	DB '('
1467  53B7              	; get sprite number
1468  53B7 DD 21 1C 52  	LD IX, GETBYT
1469  53BB CD 59 01     	CALL CALBAS
1470  53BE F5           	PUSH AF
1471  53BF              	; comma
1472  53BF CD FF 4F     	CALL CHKCHAR
1473  53C2 2C           	DB ','
1474  53C3              	; get x
1475  53C3 DD 21 2F 54  	LD IX, FRMQNT
1476  53C7 CD 59 01     	CALL CALBAS
1477  53CA D5           	PUSH DE
1478  53CB              	; comma
1479  53CB CD FF 4F     	CALL CHKCHAR
1480  53CE 2C           	DB ','
1481  53CF              	; get y
1482  53CF DD 21 2F 54  	LD IX, FRMQNT
1483  53D3 CD 59 01     	CALL CALBAS
1484  53D6 D5           	PUSH DE
1485  53D7              	; comma
1486  53D7 CD FF 4F     	CALL CHKCHAR
1487  53DA 2C           	DB ','
1488  53DB              	; get pattern
1489  53DB DD 21 2F 54  	LD IX, FRMQNT
1490  53DF CD 59 01     	CALL CALBAS
1491  53E2 D5           	PUSH DE
1492  53E3              	; comma
1493  53E3 CD FF 4F     	CALL CHKCHAR
1494  53E6 2C           	DB ','
1495  53E7              	; get color
1496  53E7 DD 21 2F 54  	LD IX, FRMQNT
1497  53EB CD 59 01     	CALL CALBAS
1498  53EE D5           	PUSH DE
1499  53EF              	; ending )
1500  53EF CD FF 4F     	CALL CHKCHAR
1501  53F2 29           	DB ')'
1502  53F3
1503  53F3                  ; save position in BASIC text
1504  53F3 E5           	PUSH HL
1505  53F4 DD E1        	POP IX
1506  53F6
1507  53F6 C1           	POP BC ; color
1508  53F7 D1           	POP DE ; pattern
1509  53F8 D9           	EXX
1510  53F9 C1           	POP BC ; y
1511  53FA D1           	POP DE ; x
1512  53FB F1           	POP AF ; sprite number
1513  53FC FE 20        	CP 32
1514  53FE 38 05        	JR C, .L2
1515  5400 1E 05        	LD E, 5 ; illegal function call
1516  5402 C3 17 50     	JP THROW_ERROR
1517  5405              .L2:
1518  5405              	; find location in sprite attributes table
1519  5405 87          > ADD A, A
1519  5406 87          > ADD A, A
1519  5407 87          > ADD A, A
1520  5408 D5           	PUSH DE
1521  5409 16 00        	LD D, 0
1522  540B 5F           	LD E, A
1523  540C 2A F9 4C     	LD HL, (SPRATR_DATA)
1524  540F 19           	ADD HL, DE
1525  5410 D1           	POP DE
1526  5411              	; set y
1527  5411 71           	LD (HL), C
1528  5412 23           	INC HL
1529  5413 70           	LD (HL), B
1530  5414 23           	INC HL
1531  5415              	; set x
1532  5415 73           	LD (HL), E
1533  5416 23           	INC HL
1534  5417 72           	LD (HL), D
1535  5418 23           	INC HL
1536  5419 E5           	PUSH HL
1537  541A D9           	EXX
1538  541B E1           	POP HL
1539  541C              	; check if 0<=pattern<32
1540  541C 7A           	LD A, D
1541  541D B7           	OR A
1542  541E 20 0B        	JR NZ, .L3
1543  5420 7D           	LD A, L
1544  5421 FE 20        	CP 32
1545  5423 30 06        	JR NC, .L3
1546  5425              	; set pattern
1547  5425 73           	LD (HL), E
1548  5426 23           	INC HL
1549  5427 72           	LD (HL), D
1550  5428 23           	INC HL
1551  5429 18 02        	JR .L4
1552  542B              .L3:
1553  542B              	; skip pattern
1554  542B 23          > INC HL
1554  542C 23          > INC HL
1555  542D              .L4:
1556  542D              	; check if 0<=color<16
1557  542D 78           	LD A, B
1558  542E B7           	OR A
1559  542F 20 08        	JR NZ, .L5
1560  5431 79           	LD A, C
1561  5432 FE 10        	CP 16
1562  5434 30 03        	JR NC, .L5
1563  5436              	; set color
1564  5436 71           	LD (HL), C
1565  5437 23           	INC HL
1566  5438 70           	LD (HL), B
1567  5439
1568  5439              .L5:
1569  5439 DD E5        	PUSH IX
1570  543B E1           	POP HL
1571  543C C9           	RET
1572  543D              ; *******************************************************************************************************
1573  543D
1574  543D              ; *******************************************************************************************************
1575  543D              ; function sets sprite location based on initial coordinates and offset provided
1576  543D              ; input A=sprite number in SPRATR_DATA , 0-31
1577  543D              ; input DE=initial x
1578  543D              ; input BC=initial y
1579  543D              ; input IY=location where delta y,x are located
1580  543D              ; modifies AF, HL, IX
1581  543D              SPRSET_DELTA_POS:
1582  543D 87          > ADD A, A
1582  543E 87          > ADD A, A
1582  543F 87          > ADD A, A
1583  5440 D5           	PUSH DE
1584  5441 16 00        	LD D, 0
1585  5443 5F           	LD E, A
1586  5444 DD 2A F9 4C  	LD IX, (SPRATR_DATA)
1587  5448 DD 19        	ADD IX, DE
1588  544A D1           	POP DE
1589  544B              	; IX=sprite's y location
1590  544B FD 6E 00     	LD L, (IY)
1591  544E FD 66 01     	LD H, (IY+1)
1592  5451 09           	ADD HL, BC
1593  5452 DD 75 00     	LD (IX), L
1594  5455 DD 74 01     	LD (IX+1), H
1595  5458 FD 6E 02     	LD L, (IY+2)
1596  545B FD 66 03     	LD H, (IY+3)
1597  545E 19           	ADD HL, DE
1598  545F DD 75 02     	LD (IX+2), L
1599  5462 DD 74 03     	LD (IX+3), H
1600  5465 C9           	RET
1601  5466              ; *******************************************************************************************************
1602  5466
1603  5466              ; *******************************************************************************************************
1604  5466              ; function to handle CALL SPRGRPMOV basic extension
1605  5466              ; sets position of a group of sprites described with
1606  5466              ; { int sprite_num, int delta_y, int delta_x } [count]
1607  5466              ; _SPRGRPMOV ( INT x,
1608  5466              ;			   INT y,
1609  5466              ;			   INT data_ptr,
1610  5466              ;			   BYTE count,
1611  5466              ; will put ram in page 0 also, page 1 is already there
1612  5466              SPRGRPMOV:
1613  5466 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1614  5469 B7           	OR A
1615  546A 20 05        	JR NZ, .L1
1616  546C 1E 05        	LD E, 5 ; illegal function call
1617  546E C3 17 50     	JP THROW_ERROR
1618  5471              .L1:
1619  5471              	; opening (
1620  5471 CD FF 4F     	CALL CHKCHAR
1621  5474 28           	DB '('
1622  5475              	; get x
1623  5475 DD 21 2F 54  	LD IX, FRMQNT
1624  5479 CD 59 01     	CALL CALBAS
1625  547C D5           	PUSH DE
1626  547D              	; comma
1627  547D CD FF 4F     	CALL CHKCHAR
1628  5480 2C           	DB ','
1629  5481              	; get y
1630  5481 DD 21 2F 54  	LD IX, FRMQNT
1631  5485 CD 59 01     	CALL CALBAS
1632  5488 D5           	PUSH DE
1633  5489              	; comma
1634  5489 CD FF 4F     	CALL CHKCHAR
1635  548C 2C           	DB ','
1636  548D              	; get data pointer
1637  548D DD 21 2F 54  	LD IX, FRMQNT
1638  5491 CD 59 01     	CALL CALBAS
1639  5494 D5           	PUSH DE
1640  5495              	; comma
1641  5495 CD FF 4F     	CALL CHKCHAR
1642  5498 2C           	DB ','
1643  5499              	; get count
1644  5499 DD 21 1C 52  	LD IX, GETBYT
1645  549D CD 59 01     	CALL CALBAS
1646  54A0 F5           	PUSH AF
1647  54A1              	; ending )
1648  54A1 CD FF 4F     	CALL CHKCHAR
1649  54A4 29           	DB ')'
1650  54A5
1651  54A5 E5           	PUSH HL
1652  54A6 DD E1        	POP IX
1653  54A8
1654  54A8 C1           	POP BC ; count
1655  54A9 E1           	POP HL ; data pointer
1656  54AA D9           	EXX
1657  54AB C1           	POP BC ; y
1658  54AC D1           	POP DE ; x
1659  54AD D9           	EXX
1660  54AE
1661  54AE DD E5        	PUSH IX ; save position in BASIC buffer
1662  54B0
1663  54B0 C5           	PUSH BC
1664  54B1 E5           	PUSH HL
1665  54B2 AF               XOR A
1666  54B3 CD E2 4D         CALL GET_PAGE_INFO
1667  54B6 D9           	EXX
1668  54B7 E1           	POP HL
1669  54B8 F1           	POP AF
1670  54B9 D9           	EXX
1671  54BA C5               PUSH BC
1672  54BB D5               PUSH DE
1673  54BC D9           	EXX
1674  54BD F5           	PUSH AF
1675  54BE E5           	PUSH HL
1676  54BF D9           	EXX
1677  54C0 3A 41 F3         LD A, (RAMAD0)
1678  54C3 26 00            LD H, 0
1679  54C5 CD 29 4E         CALL LOCAL_ENASLT
1680  54C8 FB           	EI
1681  54C9 E1           	POP HL
1682  54CA C1           	POP BC
1683  54CB CD D5 54     	CALL .UPDATE_LOC
1684  54CE D1               POP DE
1685  54CF C1               POP BC
1686  54D0 CD 19 4E         CALL RESTORE_PAGE_INFO
1687  54D3 E1           	POP HL
1688  54D4 C9           	RET
1689  54D5
1690  54D5              .UPDATE_LOC:
1691  54D5              .L4:
1692  54D5 7E           	LD A, (HL)
1693  54D6 23           	INC HL
1694  54D7 23           	INC HL
1695  54D8 E5           	PUSH HL
1696  54D9 FD E1        	POP IY
1697  54DB D9           	EXX
1698  54DC CD 3D 54     	CALL SPRSET_DELTA_POS
1699  54DF D9           	EXX
1700  54E0 23          > INC HL
1700  54E1 23          > INC HL
1700  54E2 23          > INC HL
1700  54E3 23          > INC HL
1701  54E4 10 EF        	DJNZ .L4
1702  54E6 C9           	RET
1703  54E7              ; *******************************************************************************************************
1704  54E7
1705  54E7              ; *******************************************************************************************************
1706  54E7              ; function rotates mask and data of several characters and applies to background data
1707  54E7              ; this handles x-shift from 0 to 4
1708  54E7              ; contains self-modifying code that is set-up from external function
1709  54E7              ; input HL=pointer to mask data
1710  54E7              ; input HL'=pointer to character data
1711  54E7              ; input DE=output buffer containing background data
1712  54E7              ; input A=number of characters to process
1713  54E7              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1714  54E7              SHIFT04:
1715  54E7 E5           	PUSH HL
1716  54E8 62           	LD H, D
1717  54E9 6B           	LD L, E
1718  54EA 01 08 00     	LD BC, 8
1719  54ED 09           	ADD HL, BC
1720  54EE 44           	LD B, H
1721  54EF 4D           	LD C, L
1722  54F0 E1           	POP HL
1723  54F1              .L0:
1724  54F1 F5           	PUSH AF
1725  54F2 3E 08        	LD A, 8
1726  54F4              .L1:
1727  54F4 08           	EX AF, AF'
1728  54F5 7E           	LD A, (HL) ; get mask
1729  54F6 D9           	EXX
1730  54F7 57           	LD D, A
1731  54F8 1E FF        	LD E, #FF
1732  54FA 37           	SCF
1733  54FB              .M1:
1734  54FB 18 FE        	JR .M1 ; this is self-modifying part
1735  54FD CB 1A        	RR D
1736  54FF CB 1B        	RR E
1737  5501 CB 1A        	RR D
1738  5503 CB 1B        	RR E
1739  5505 CB 1A        	RR D
1740  5507 CB 1B        	RR E
1741  5509 CB 1A        	RR D
1742  550B CB 1B        	RR E
1743  550D
1744  550D 46           	LD B, (HL)
1745  550E 0E 00        	LD C, 0
1746  5510              .M2:
1747  5510 18 FE        	JR .M2 ; also self-modifying part
1748  5512 CB 38        	SRL B
1749  5514 CB 19        	RR C
1750  5516 CB 38        	SRL B
1751  5518 CB 19        	RR C
1752  551A CB 38        	SRL B
1753  551C CB 19        	RR C
1754  551E CB 38        	SRL B
1755  5520 CB 19        	RR C
1756  5522
1757  5522 D9           	EXX
1758  5523 1A           	LD A, (DE) ; background
1759  5524 D9           	EXX
1760  5525 A2           	AND D
1761  5526 B0           	OR B
1762  5527 D9           	EXX
1763  5528 12           	LD (DE), A
1764  5529
1765  5529 0A           	LD A, (BC)
1766  552A D9           	EXX
1767  552B A3           	AND E
1768  552C B1           	OR C
1769  552D 23           	INC HL
1770  552E D9           	EXX
1771  552F 02           	LD (BC), A
1772  5530
1773  5530 23           	INC HL
1774  5531 13           	INC DE
1775  5532 03           	INC BC
1776  5533
1777  5533 08           	EX AF, AF'
1778  5534 3D           	DEC A
1779  5535 C2 F4 54     	JP NZ, .L1
1780  5538 F1           	POP AF
1781  5539 3D           	DEC A
1782  553A C2 F1 54     	JP NZ, .L0
1783  553D C9           	RET
1784  553E              ; *******************************************************************************************************
1785  553E
1786  553E              ; *******************************************************************************************************
1787  553E              ; function rotates mask and data of several characters and applies to background data
1788  553E              ; this handles x-shift from 5 to 8
1789  553E              ; contains self-modifying code that is set-up from external function
1790  553E              ; input HL=pointer to mask data
1791  553E              ; input HL'=pointer to character data
1792  553E              ; input DE=output buffer containing background data
1793  553E              ; input A=number of characters to process
1794  553E              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1795  553E              SHIFT58:
1796  553E E5           	PUSH HL
1797  553F 62           	LD H, D
1798  5540 6B           	LD L, E
1799  5541 01 08 00     	LD BC, 8
1800  5544 09           	ADD HL, BC
1801  5545 44           	LD B, H
1802  5546 4D           	LD C, L
1803  5547 E1           	POP HL
1804  5548              .L0:
1805  5548 F5           	PUSH AF
1806  5549 3E 08        	LD A, 8
1807  554B              .L1:
1808  554B 08           	EX AF, AF'
1809  554C 7E           	LD A, (HL) ; get mask
1810  554D D9           	EXX
1811  554E 57           	LD D, A
1812  554F 1E FF        	LD E, #FF
1813  5551 37           	SCF
1814  5552              .M1:
1815  5552 18 FE        	JR .M1 ; this is self-modifying part
1816  5554 CB 12        	RL D
1817  5556 CB 13        	RL E
1818  5558 CB 12        	RL D
1819  555A CB 13        	RL E
1820  555C CB 12        	RL D
1821  555E CB 13        	RL E
1822  5560
1823  5560 46           	LD B, (HL)
1824  5561 0E 00        	LD C, 0
1825  5563              .M2:
1826  5563 18 FE        	JR .M2 ; also self-modifying part
1827  5565 CB 20        	SLA B
1828  5567 CB 11        	RL C
1829  5569 CB 20        	SLA B
1830  556B CB 11        	RL C
1831  556D CB 20        	SLA B
1832  556F CB 11        	RL C
1833  5571
1834  5571 D9           	EXX
1835  5572 1A           	LD A, (DE) ; background
1836  5573 D9           	EXX
1837  5574 A3           	AND E
1838  5575 B1           	OR C
1839  5576 D9           	EXX
1840  5577 12           	LD (DE), A
1841  5578
1842  5578 0A           	LD A, (BC)
1843  5579 D9           	EXX
1844  557A A2           	AND D
1845  557B B0           	OR B
1846  557C 23           	INC HL
1847  557D D9           	EXX
1848  557E 02           	LD (BC), A
1849  557F
1850  557F 23           	INC HL
1851  5580 13           	INC DE
1852  5581 03           	INC BC
1853  5582
1854  5582 08           	EX AF, AF'
1855  5583 3D           	DEC A
1856  5584 C2 4B 55     	JP NZ, .L1
1857  5587 F1           	POP AF
1858  5588 3D           	DEC A
1859  5589 C2 48 55     	JP NZ, .L0
1860  558C C9           	RET
1861  558D              ; *******************************************************************************************************
1862  558D
1863  558D              ; *******************************************************************************************************
1864  558D              ; function rotates mask and character data and applies it to background
1865  558D              ; input A=x shift (0-7)
1866  558D              ; input IX=pointer to structure describing input data
1867  558D              ; +0  DW shift count 0-7
1868  558D              ; +2  DW background data start;
1869  558D              ; +4  DW background add to value to next row of background data
1870  558D              ; +6  DW mask data start;
1871  558D              ; +8  DW character data start;
1872  558D              ; +10 DW character&mask add to value to next row of data
1873  558D              ; +12 DW columns (low byte used)
1874  558D              ; +14 DW rows (low byte used)
1875  558D              SHIFT_MERGE_CHARACTER:
1876  558D DD 7E 00     	LD A, (IX) ; shift
1877  5590 FE 05        	CP 5
1878  5592 38 22        	JR C, .RIGHT
1879  5594              	; shifts 5-7, use rotate towards left 1-3
1880  5594 21 3E 55     	LD HL, SHIFT58
1881  5597 22 FB 55     	LD (.CALL+1), HL ; modify fn used
1882  559A D6 05        	SUB 5
1883  559C 28 0D        	JR Z, .L1
1884  559E 87           	ADD A, A
1885  559F 87           	ADD A, A
1886  55A0 67           	LD H, A
1887  55A1 2E 18        	LD L, #18 ; JR opcode
1888  55A3 22 52 55     	LD (SHIFT58.M1), HL
1889  55A6 22 63 55     	LD (SHIFT58.M2), HL
1890  55A9 18 2F        	JR .DO
1891  55AB              .L1:
1892  55AB 21 00 00     	LD HL, 0 ; 2xNOP opcode
1893  55AE 22 52 55     	LD (SHIFT58.M1), HL
1894  55B1 22 63 55     	LD (SHIFT58.M2), HL
1895  55B4 18 24        	JR .DO
1896  55B6              .RIGHT:
1897  55B6              	; shifts 0-4, rotate towards right
1898  55B6 21 E7 54     	LD HL, SHIFT04
1899  55B9 22 FB 55     	LD (.CALL+1), HL ; modify fn used
1900  55BC FE 04        	CP 4
1901  55BE 28 11        	JR Z, .R1
1902  55C0 D6 04        	SUB 4
1903  55C2 ED 44        	NEG
1904  55C4 87           	ADD A, A
1905  55C5 87           	ADD A, A
1906  55C6 67           	LD H, A
1907  55C7 2E 18        	LD L, #18 ; JR opcode
1908  55C9 22 FB 54     	LD (SHIFT04.M1), HL
1909  55CC 22 10 55     	LD (SHIFT04.M2), HL
1910  55CF 18 09        	JR .DO
1911  55D1              .R1:
1912  55D1 21 00 00     	LD HL, 0 ; 2xNOP opcode
1913  55D4 22 FB 54     	LD (SHIFT04.M1), HL
1914  55D7 22 10 55     	LD (SHIFT04.M2), HL
1915  55DA              .DO:
1916  55DA DD 46 0E     	LD B, (IX+14) ; rows
1917  55DD DD 6E 06     	LD L, (IX+6)
1918  55E0 DD 66 07     	LD H, (IX+7) ; mask data
1919  55E3 DD 5E 02     	LD E, (IX+2)
1920  55E6 DD 56 03     	LD D, (IX+3) ; background data
1921  55E9 D9           	EXX
1922  55EA DD 6E 08     	LD L, (IX+8)
1923  55ED DD 66 09     	LD H, (IX+9) ; character data
1924  55F0 D9           	EXX
1925  55F1              .LOOP:
1926  55F1 C5           	PUSH BC
1927  55F2 E5           	PUSH HL
1928  55F3 D5           	PUSH DE
1929  55F4 D9           	EXX
1930  55F5 E5           	PUSH HL
1931  55F6 D9           	EXX
1932  55F7 DD 7E 0C     	LD A, (IX+12) ; columns
1933  55FA              .CALL:
1934  55FA CD 00 00     	CALL 0
1935  55FD E1           	POP HL
1936  55FE DD 5E 0A     	LD E, (IX+10)
1937  5601 DD 56 0B     	LD D, (IX+11) ; char data to next row
1938  5604 19           	ADD HL, DE
1939  5605 D9           	EXX
1940  5606 E1           	POP HL
1941  5607 DD 5E 04     	LD E, (IX+4)
1942  560A DD 56 05     	LD D, (IX+5) ; background to next row
1943  560D 19           	ADD HL, DE
1944  560E EB           	EX DE, HL
1945  560F E1           	POP HL
1946  5610 DD 4E 0A     	LD C, (IX+10)
1947  5613 DD 46 0B     	LD B, (IX+11) ; char data to next row
1948  5616 09           	ADD HL, BC
1949  5617 C1           	POP BC
1950  5618 10 D7        	DJNZ .LOOP
1951  561A C9           	RET
1952  561B              ; *******************************************************************************************************
1953  561B
1954  561B              ; *******************************************************************************************************
1955  561B              ; function to handle CALL HBLIT basic extension
1956  561B              ; rotates 1-bit character drawing horizontally with mask and character data and
1957  561B              ; fuses with background data
1958  561B              ; HBLIT ( INT request_data_ptr )
1959  561B              ; request_data_ptr described in SHIFT_MERGE_CHARACTER
1960  561B              ; will put ram in page 0 also, page 1 is already there
1961  561B              HBLIT:
1962  561B              	; opening (
1963  561B CD FF 4F     	CALL CHKCHAR
1964  561E 28           	DB '('
1965  561F              	; get pointer to request struct
1966  561F DD 21 2F 54  	LD IX, FRMQNT
1967  5623 CD 59 01     	CALL CALBAS
1968  5626 D5           	PUSH DE
1969  5627              	; ending )
1970  5627 CD FF 4F     	CALL CHKCHAR
1971  562A 29           	DB ')'
1972  562B
1973  562B DD E1        	POP IX ; pointer to request struct
1974  562D
1975  562D E5           	PUSH HL ; save position in BASIC buffer
1976  562E
1977  562E FD 21 35 56  	LD IY, .RET
1978  5632 C3 A2 4E     	JP ENABLE_PAGE0
1979  5635              .RET:
1980  5635 FB           	EI
1981  5636 CD 8D 55     	CALL SHIFT_MERGE_CHARACTER
1982  5639
1983  5639 D1               POP DE
1984  563A C1               POP BC
1985  563B CD 19 4E         CALL RESTORE_PAGE_INFO
1986  563E
1987  563E E1           	POP HL
1988  563F C9           	RET
1989  5640              ; *******************************************************************************************************
1990  5640
1991  5640
1992  5640              EXT_END:
1993  5640
# file closed: asm\main.asm
