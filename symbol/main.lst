# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; control variables to include/exclude parts of code
   4  4000              SOUND_CMDS	 	EQU 1
   5  4000              RAM_CMDS 		EQU 1
   6  4000              VRAM_CMDS 		EQU 1
   7  4000              BLIT_CMDS		EQU 1
   8  4000              SPRITE_CMDS 	EQU 1
   9  4000              GENCAL_CMD		EQU 1
  10  4000              TILE_CMDS		EQU 1
  11  4000              BOX_CMDS		EQU 1
  12  4000              ANIM_CMDS		EQU 1
  13  4000
  14  4000               DEFINE CMDS_WITH_PARAMETERS
  15  4000
  16  4000              CHPUT   EQU     #A2
  17  4000              CALBAS	EQU		#159
  18  4000              ERRHAND EQU     #406F
  19  4000              FRMEVL  EQU     #4C64
  20  4000              FRESTR	EQU		#67D0
  21  4000              ; FRMQNT = formula quantificator
  22  4000              ; input HL=pointer to current program expression
  23  4000              ; output HL=next address
  24  4000              ; output DE=integer datum
  25  4000              FRMQNT	EQU		#542F
  26  4000              ; GETBYT = get byte parameter
  27  4000              ; input HL=pointer to current program expression
  28  4000              ; output HL=next address
  29  4000              ; output A=E=byte read
  30  4000              GETBYT		EQU		#521C
  31  4000              CHRGTR  	EQU     #4666
  32  4000              PTRGET		EQU 	#5EA4
  33  4000              SUBFLG		EQU		#F6A5
  34  4000              SYNCHR		EQU		#558C
  35  4000              VALTYP  	EQU     #F663
  36  4000              USR     	EQU     #F7F8
  37  4000              PROCNM		EQU		#FD89
  38  4000              BIOS_FILVRM EQU     #0056
  39  4000              CLIKSW		EQU		#F3DB
  40  4000              ATRBAS		EQU		#F928
  41  4000              GRPCGP		EQU		#F3CB
  42  4000
  43  4000              RAMAD0	EQU	#F341	; Main-RAM Slot (00000h~03FFFh)
  44  4000              RAMAD1	EQU	#F342	; Main-RAM Slot (04000h~07FFFh)
  45  4000              RAMAD2	EQU	#F343	; Main-RAM Slot (08000h~0BFFFh)
  46  4000              RAMAD3	EQU	#F344	; Main-RAM Slot (0C000h~0FFFFh)
  47  4000              EXPTBL	EQU #FCC1
  48  4000              SCRMOD	EQU #FCAF ; current screen mode
  49  4000              REG1SAV EQU #F3E0 ; VDP(1)
  50  4000              JIFFY	EQU #FC9E
  51  4000              GRPPAT	EQU #F3CF ; SCREEN 2 sprite generator table address
  52  4000              T32PAT	EQU #F3C5 ; SCREEN 1 sprite generator table address
  53  4000
  54  4000              ; BASIC error codes
  55  4000              ;01 NEXT without FOR
  56  4000              ;02 Syntax error
  57  4000              ;03 RETURN without GOSUB
  58  4000              ;04 Out of DATA
  59  4000              ;05 Illegal function call
  60  4000              ;06 Overflow
  61  4000              ;07 Out of memory
  62  4000              ;08 Undefined line number
  63  4000              ;09 Subscript out of range
  64  4000              ;10 Redimensioned array
  65  4000              ;11 Division by zero
  66  4000              ;12 Illegal direct
  67  4000              ;13 Type mismatch
  68  4000              ;14 Out of string space
  69  4000              ;15 String too long
  70  4000              ;16 String formula too complex
  71  4000              ;17 Can't CONTINUE
  72  4000              ;18 Undefined user function
  73  4000              ;19 Device I/O error
  74  4000              ;20 Verify error
  75  4000              ;21 No RESUME
  76  4000              ;22 RESUME without error
  77  4000              ;23 Unprintable error
  78  4000              ;24 Missing operand
  79  4000              ;25 Line buffer overflow
  80  4000              ;50 FIELD overflow
  81  4000              ;51 Internal error
  82  4000              ;52 Bad file number
  83  4000              ;53 File not found
  84  4000              ;54 File already open
  85  4000              ;55 Input past end
  86  4000              ;56 Bad file name
  87  4000              ;57 Direct statement in file
  88  4000              ;58 Sequential I/O only
  89  4000              ;59 File not OPEN
  90  4000
  91  4000
  92  4000               ; simulate cartridge with BASIC extension
  93  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  93  4004 C6 56 00 00
  93  4008 00 00 00 00
  93  400C 00 00 00 00
  94  4010
  95  4010              ; this location #4010 stores last location used by basic extension
  96  4010              ; free memory after that point
  97  4010              FREEMEMPTR:
  98  4010 69 5F         DW EXT_END
  99  4012
 100  4012              ; this location #4012 stores extension version in DAA format
 101  4012              ; first byte is major version and second minor
 102  4012              VERSION:
 103  4012 00 70         DB #00, #70
 104  4014
 105  4014              ; binary included AKG player compiled at #4014
 106  4014               IF (SOUND_CMDS == 1)
 107  4014              	INCBIN "bin/AKG.bin"
 108  4CF0              	INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CF0              MAIN_PLAYER_START EQU 04014H
   2+ 4CF0              PLY_AKG_START EQU 04014H
   3+ 4CF0              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401DH
   4+ 4CF0              PLY_AKG_INITSOUNDEFFECTS EQU 0401DH
   5+ 4CF0              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 04021H
   6+ 4CF0              PLY_AKG_PLAYSOUNDEFFECT EQU 04021H
   7+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04022H
   8+ 4CF0              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04022H
   9+ 4CF0              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04049H
  10+ 4CF0              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04049H
  11+ 4CF0              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04057H
  12+ 4CF0              PLY_AKG_PSES_PLAY EQU 04090H
  13+ 4CF0              PLY_AKG_PSES_READFIRSTBYTE EQU 04099H
  14+ 4CF0              PLY_AKG_PSES_S_ENDORLOOP EQU 040B1H
  15+ 4CF0              PLY_AKG_PSES_S_LOOP EQU 040BCH
  16+ 4CF0              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C2H
  17+ 4CF0              PLY_AKG_PSES_NOTREACHED EQU 040D5H
  18+ 4CF0              PLY_AKG_PSES_HARDWAREONLY EQU 040D9H
  19+ 4CF0              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040E0H
  20+ 4CF0              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F2H
  21+ 4CF0              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FCH
  22+ 4CF0              PLY_AKG_PSES_H_AFTERRETRIG EQU 04106H
  23+ 4CF0              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 0411AH
  24+ 4CF0              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411FH
  25+ 4CF0              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04127H
  26+ 4CF0              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04132H
  27+ 4CF0              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413EH
  28+ 4CF0              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 04140H
  29+ 4CF0              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04146H
  30+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 0414AH
  31+ 4CF0              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 0414AH
  32+ 4CF0              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414CH
  33+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414CH
  34+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414CH
  35+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414DH
  36+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414EH
  37+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04152H
  38+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04152H
  39+ 4CF0              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04152H
  40+ 4CF0              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 0415AH
  41+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04162H
  42+ 4CF0              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04162H
  43+ 4CF0              PLY_AKG_INIT EQU 04162H
  44+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04162H
  45+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 04190H
  46+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A4H
  47+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B6H
  48+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D5H
  49+ 4CF0              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E2H
  50+ 4CF0              PLY_AKG_INIT_READWORDSANDFILL EQU 041E8H
  51+ 4CF0              PLY_AKG_INITTABLE0 EQU 041EBH
  52+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041EBH
  53+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04205H
  54+ 4CF0              PLY_AKG_INITTABLE0_END EQU 04205H
  55+ 4CF0              PLY_AKG_INITTABLE1 EQU 04205H
  56+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04205H
  57+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04209H
  58+ 4CF0              PLY_AKG_INITTABLE1_END EQU 04209H
  59+ 4CF0              PLY_AKG_INITTABLEORA EQU 04209H
  60+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04209H
  61+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 04221H
  62+ 4CF0              PLY_AKG_INITTABLEORA_END EQU 04221H
  63+ 4CF0              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 04221H
  64+ 4CF0              PLY_AKG_STOP EQU 04221H
  65+ 4CF0              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04233H
  66+ 4CF0              PLY_AKG_PLAY EQU 04233H
  67+ 4CF0              PLY_AKG_TICKDECREASINGCOUNTER EQU 0423BH
  68+ 4CF0              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 04241H
  69+ 4CF0              PLY_AKG_READLINKER EQU 04246H
  70+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04246H
  71+ 4CF0              PLY_AKG_READLINKER_PTLINKER EQU 04246H
  72+ 4CF0              PLY_AKG_READLINKER_NOLOOP EQU 04251H
  73+ 4CF0              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 0428AH
  74+ 4CF0              PLY_AKG_READLINE EQU 0428DH
  75+ 4CF0              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428DH
  76+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04293H
  77+ 4CF0              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04293H
  78+ 4CF0              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 042A0H
  79+ 4CF0              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A4H
  80+ 4CF0              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A7H
  81+ 4CF0              PLY_AKG_SPEEDTRACK_END EQU 042AAH
  82+ 4CF0              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042AAH
  83+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042B0H
  84+ 4CF0              PLY_AKG_EVENTTRACK_PTTRACK EQU 042B0H
  85+ 4CF0              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BDH
  86+ 4CF0              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042C1H
  87+ 4CF0              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C4H
  88+ 4CF0              PLY_AKG_EVENTTRACK_END EQU 042C7H
  89+ 4CF0              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C7H
  90+ 4CF0              PLY_AKG_CHANNEL1_READTRACK EQU 042D3H
  91+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D3H
  92+ 4CF0              PLY_AKG_CHANNEL1_PTTRACK EQU 042D3H
  93+ 4CF0              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042EEH
  94+ 4CF0              PLY_AKG_CHANNEL1_WAIT EQU 042F9H
  95+ 4CF0              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 04300H
  96+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 04300H
  97+ 4CF0              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 04300H
  98+ 4CF0              PLY_AKG_CHANNEL1_NOTE EQU 04309H
  99+ 4CF0              PLY_AKG_BASENOTEINDEX EQU 04309H
 100+ 4CF0              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 0430BH
 101+ 4CF0              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 0430BH
 102+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 0431BH
 103+ 4CF0              PLY_AKG_INSTRUMENTSTABLE EQU 0431BH
 104+ 4CF0              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432DH
 105+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433DH
 106+ 4CF0              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04365H
 107+ 4CF0              PLY_AKG_CHANNEL1_READCELLEND EQU 04368H
 108+ 4CF0              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04368H
 109+ 4CF0              PLY_AKG_CHANNEL2_READTRACK EQU 04374H
 110+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04374H
 111+ 4CF0              PLY_AKG_CHANNEL2_PTTRACK EQU 04374H
 112+ 4CF0              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438FH
 113+ 4CF0              PLY_AKG_CHANNEL2_WAIT EQU 0439AH
 114+ 4CF0              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 043A1H
 115+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 043A1H
 116+ 4CF0              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 043A1H
 117+ 4CF0              PLY_AKG_CHANNEL2_NOTE EQU 043AAH
 118+ 4CF0              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043AFH
 119+ 4CF0              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043AFH
 120+ 4CF0              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043D1H
 121+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043E1H
 122+ 4CF0              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04409H
 123+ 4CF0              PLY_AKG_CHANNEL2_READCELLEND EQU 0440CH
 124+ 4CF0              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440CH
 125+ 4CF0              PLY_AKG_CHANNEL3_READTRACK EQU 04418H
 126+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04418H
 127+ 4CF0              PLY_AKG_CHANNEL3_PTTRACK EQU 04418H
 128+ 4CF0              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04433H
 129+ 4CF0              PLY_AKG_CHANNEL3_WAIT EQU 0443EH
 130+ 4CF0              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04445H
 131+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04445H
 132+ 4CF0              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04445H
 133+ 4CF0              PLY_AKG_CHANNEL3_NOTE EQU 0444EH
 134+ 4CF0              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04453H
 135+ 4CF0              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04453H
 136+ 4CF0              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04475H
 137+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04485H
 138+ 4CF0              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ADH
 139+ 4CF0              PLY_AKG_CHANNEL3_READCELLEND EQU 044B0H
 140+ 4CF0              PLY_AKG_CURRENTSPEED EQU 044B0H
 141+ 4CF0              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B2H
 142+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B5H
 143+ 4CF0              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B5H
 144+ 4CF0              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B8H
 145+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044BBH
 146+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044BBH
 147+ 4CF0              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C7H
 148+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CEH
 149+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044D1H
 150+ 4CF0              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D7H
 151+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044DAH
 152+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044DAH
 153+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E8H
 154+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EDH
 155+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F8H
 156+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044FBH
 157+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044FBH
 158+ 4CF0              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FEH
 159+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 04501H
 160+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE EQU 04501H
 161+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 0450AH
 162+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04514H
 163+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04517H
 164+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04517H
 165+ 4CF0              PLY_AKG_CHANNEL1_PITCH EQU 04517H
 166+ 4CF0              PLY_AKG_CHANNEL1_ISPITCH EQU 0451AH
 167+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451FH
 168+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451FH
 169+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04523H
 170+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04525H
 171+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04527H
 172+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452EH
 173+ 4CF0              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452FH
 174+ 4CF0              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04532H
 175+ 4CF0              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04532H
 176+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454EH
 177+ 4CF0              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454EH
 178+ 4CF0              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 0455BH
 179+ 4CF0              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455FH
 180+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456FH
 181+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456FH
 182+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 04570H
 183+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 04571H
 184+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04573H
 185+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04573H
 186+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04573H
 187+ 4CF0              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04574H
 188+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04575H
 189+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04577H
 190+ 4CF0              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04577H
 191+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04577H
 192+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04577H
 193+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04577H
 194+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_END EQU 0457AH
 195+ 4CF0              PLY_AKG_CHANNEL1_PITCH_END EQU 0457CH
 196+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04584H
 197+ 4CF0              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04584H
 198+ 4CF0              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04587H
 199+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 0458AH
 200+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 0458AH
 201+ 4CF0              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04596H
 202+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459DH
 203+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 045A0H
 204+ 4CF0              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A6H
 205+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A9H
 206+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A9H
 207+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B7H
 208+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BCH
 209+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C7H
 210+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045CAH
 211+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045CAH
 212+ 4CF0              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CDH
 213+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045D0H
 214+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045D0H
 215+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D9H
 216+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E3H
 217+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E6H
 218+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E6H
 219+ 4CF0              PLY_AKG_CHANNEL2_PITCH EQU 045E6H
 220+ 4CF0              PLY_AKG_CHANNEL2_ISPITCH EQU 045E9H
 221+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045EEH
 222+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045EEH
 223+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F2H
 224+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F4H
 225+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F6H
 226+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FDH
 227+ 4CF0              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FEH
 228+ 4CF0              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04601H
 229+ 4CF0              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 04601H
 230+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461DH
 231+ 4CF0              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461DH
 232+ 4CF0              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 0462AH
 233+ 4CF0              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462EH
 234+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463EH
 235+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463EH
 236+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463FH
 237+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 04640H
 238+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04642H
 239+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04642H
 240+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04642H
 241+ 4CF0              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04643H
 242+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04644H
 243+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04646H
 244+ 4CF0              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04646H
 245+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04646H
 246+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04646H
 247+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04646H
 248+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_END EQU 04649H
 249+ 4CF0              PLY_AKG_CHANNEL2_PITCH_END EQU 0464BH
 250+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04653H
 251+ 4CF0              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04653H
 252+ 4CF0              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04656H
 253+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04659H
 254+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04659H
 255+ 4CF0              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04665H
 256+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466CH
 257+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466FH
 258+ 4CF0              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04675H
 259+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04678H
 260+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04678H
 261+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04686H
 262+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 0468BH
 263+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04696H
 264+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04699H
 265+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04699H
 266+ 4CF0              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469CH
 267+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469FH
 268+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469FH
 269+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A8H
 270+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B2H
 271+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B5H
 272+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B5H
 273+ 4CF0              PLY_AKG_CHANNEL3_PITCH EQU 046B5H
 274+ 4CF0              PLY_AKG_CHANNEL3_ISPITCH EQU 046B8H
 275+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BDH
 276+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BDH
 277+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046C1H
 278+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C3H
 279+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C5H
 280+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CCH
 281+ 4CF0              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CDH
 282+ 4CF0              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046D0H
 283+ 4CF0              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046D0H
 284+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046ECH
 285+ 4CF0              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046ECH
 286+ 4CF0              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F9H
 287+ 4CF0              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FDH
 288+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470DH
 289+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470DH
 290+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470EH
 291+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470FH
 292+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 04711H
 293+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 04711H
 294+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 04711H
 295+ 4CF0              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04712H
 296+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04713H
 297+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04715H
 298+ 4CF0              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04715H
 299+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04715H
 300+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04715H
 301+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04715H
 302+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_END EQU 04718H
 303+ 4CF0              PLY_AKG_CHANNEL3_PITCH_END EQU 0471AH
 304+ 4CF0              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04726H
 305+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04726H
 306+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04726H
 307+ 4CF0              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04729H
 308+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 0472BH
 309+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 04731H
 310+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04734H
 311+ 4CF0              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04734H
 312+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04737H
 313+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 04740H
 314+ 4CF0              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04748H
 315+ 4CF0              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04755H
 316+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04755H
 317+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04755H
 318+ 4CF0              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04758H
 319+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 0475AH
 320+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 04760H
 321+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04763H
 322+ 4CF0              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04763H
 323+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04766H
 324+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476FH
 325+ 4CF0              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04777H
 326+ 4CF0              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04785H
 327+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04785H
 328+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04785H
 329+ 4CF0              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04788H
 330+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 0478AH
 331+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 04790H
 332+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04793H
 333+ 4CF0              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04793H
 334+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04796H
 335+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479FH
 336+ 4CF0              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A7H
 337+ 4CF0              PLY_AKG_SENDPSGREGISTERS EQU 047B6H
 338+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BEH
 339+ 4CF0              PLY_AKG_PSGREG01_INSTR EQU 047BEH
 340+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CEH
 341+ 4CF0              PLY_AKG_PSGREG23_INSTR EQU 047CEH
 342+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DFH
 343+ 4CF0              PLY_AKG_PSGREG45_INSTR EQU 047DFH
 344+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047F0H
 345+ 4CF0              PLY_AKG_PSGREG6_8_INSTR EQU 047F0H
 346+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 04801H
 347+ 4CF0              PLY_AKG_PSGREG9_10_INSTR EQU 04801H
 348+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04812H
 349+ 4CF0              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04812H
 350+ 4CF0              PLY_AKG_PSGREG13_OLDVALUE EQU 04827H
 351+ 4CF0              PLY_AKG_RETRIG EQU 04829H
 352+ 4CF0              PLY_AKG_PSGREG13_INSTR EQU 0482BH
 353+ 4CF0              PLY_AKG_PSGREG13_END EQU 0483AH
 354+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 0483AH
 355+ 4CF0              PLY_AKG_SAVESP EQU 0483AH
 356+ 4CF0              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483EH
 357+ 4CF0              PLY_AKG_CHANNEL1_READEFFECTS EQU 04846H
 358+ 4CF0              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04853H
 359+ 4CF0              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04853H
 360+ 4CF0              PLY_AKG_CHANNEL2_READEFFECTS EQU 0485BH
 361+ 4CF0              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04868H
 362+ 4CF0              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04868H
 363+ 4CF0              PLY_AKG_CHANNEL3_READEFFECTS EQU 04870H
 364+ 4CF0              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 0487BH
 365+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS EQU 0487BH
 366+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 0488AH
 367+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 0488AH
 368+ 4CF0              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 04891H
 369+ 4CF0              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 048A1H
 370+ 4CF0              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 048A1H
 371+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A8H
 372+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A8H
 373+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048ABH
 374+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B4H
 375+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B4H
 376+ 4CF0              PLY_AKG_READINSTRUMENTCELL EQU 048BAH
 377+ 4CF0              PLY_AKG_NOSOFTNOHARD EQU 048C7H
 378+ 4CF0              PLY_AKG_NSNH_NONOISE EQU 048DCH
 379+ 4CF0              PLY_AKG_SOFT EQU 048DFH
 380+ 4CF0              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E6H
 381+ 4CF0              PLY_AKG_S_NOTSIMPLE EQU 048EEH
 382+ 4CF0              PLY_AKG_S_AFTERSIMPLETEST EQU 048F1H
 383+ 4CF0              PLY_AKG_HARDTOSOFT EQU 048FEH
 384+ 4CF0              PLY_AKG_HS_JUMPRATIO EQU 04909H
 385+ 4CF0              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04936H
 386+ 4CF0              PLY_AKG_ENDWITHOUTLOOP EQU 04938H
 387+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04938H
 388+ 4CF0              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04938H
 389+ 4CF0              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 04940H
 390+ 4CF0              PLY_AKG_SH_JUMPRATIO EQU 0494DH
 391+ 4CF0              PLY_AKG_SH_JUMPRATIOEND EQU 0496EH
 392+ 4CF0              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497DH
 393+ 4CF0              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04983H
 394+ 4CF0              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499DH
 395+ 4CF0              PLY_AKG_H_RETRIGEND EQU 049AFH
 396+ 4CF0              PLY_AKG_H_AFTERRETRIG EQU 049B0H
 397+ 4CF0              PLY_AKG_ENDWITHLOOP EQU 049C2H
 398+ 4CF0              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C9H
 399+ 4CF0              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DFH
 400+ 4CF0              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EDH
 401+ 4CF0              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FDH
 402+ 4CF0              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A0BH
 403+ 4CF0              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A1AH
 404+ 4CF0              PLY_AKG_SHOHS_RETRIGEND EQU 04A29H
 405+ 4CF0              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A2AH
 406+ 4CF0              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3CH
 407+ 4CF0              PLY_AKG_EFFECTTABLE EQU 04A4AH
 408+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A4AH
 409+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6EH
 410+ 4CF0              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6EH
 411+ 4CF0              PLY_AKG_EFFECT_RESET EQU 04A71H
 412+ 4CF0              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A73H
 413+ 4CF0              PLY_AKG_EFFECT_VOLUME EQU 04A8EH
 414+ 4CF0              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A9AH
 415+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04AA0H
 416+ 4CF0              PLY_AKG_ARPEGGIOSTABLE EQU 04AA0H
 417+ 4CF0              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC7H
 418+ 4CF0              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACEH
 419+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD4H
 420+ 4CF0              PLY_AKG_PITCHESTABLE EQU 04AD4H
 421+ 4CF0              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AFBH
 422+ 4CF0              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B02H
 423+ 4CF0              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B13H
 424+ 4CF0              PLY_AKG_EFFECT_PITCHDOWN EQU 04B1AH
 425+ 4CF0              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B2AH
 426+ 4CF0              PLY_AKG_EFFECT_PITCHUP EQU 04B3FH
 427+ 4CF0              PLY_AKG_EFFECT_PITCHSTOP EQU 04B51H
 428+ 4CF0              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B58H
 429+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B82H
 430+ 4CF0              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B82H
 431+ 4CF0              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B9BH
 432+ 4CF0              PLY_AKG_EFFECT_GLIDESPEED EQU 04B9BH
 433+ 4CF0              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BADH
 434+ 4CF0              PLY_AKG_EFFECT_LEGATO EQU 04BC3H
 435+ 4CF0              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD7H
 436+ 4CF0              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDFH
 437+ 4CF0              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE7H
 438+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEFH
 439+ 4CF0              PLY_AKG_EVENT EQU 04BEFH
 440+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BF0H
 441+ 4CF0              PLY_AKG_PERIODTABLE EQU 04BF0H
 442+ 4CF0              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BF0H
 443+ 4CF0              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CF0H
 444+ 4CF0              PLY_AKG_PERIODTABLE_END EQU 04CF0H
 445+ 4CF0              PLY_AKG_END EQU 04CF0H
 446+ 4CF0              MAIN_PLAYER_END EQU 04CF0H
 447+ 4CF0              TESTEREND EQU 04CF0H
 448+ 4CF0
# file closed: ./symbol/AKG.sym
 109  4CF0               ENDIF
 110  4CF0
 111  4CF0               INCLUDE "VBLANK.asm"
# file opened: asm\VBLANK.asm
   1+ 4CF0              ORIG.HTIMI:
   2+ 4CF0 00 00 00 00  	DB 0, 0, 0, 0, 0
   2+ 4CF4 00
   3+ 4CF5               EXPORT ORIG.HTIMI
   4+ 4CF5
   5+ 4CF5              ; *******************************************************************************************************
   6+ 4CF5              ; interrupt handler when page 0 enabled
   7+ 4CF5              ; we are here only if one of the extended basic commands have paged in page 0
   8+ 4CF5              ; which means we arrived from BASIC so page 2 is already good
   9+ 4CF5              VBLANK:
  10+ 4CF5              	EXPORT VBLANK
  11+ 4CF5
  12+ 4CF5 F5               PUSH AF
  13+ 4CF6              	; is VDP originator ?
  14+ 4CF6 DB 99        	IN	A, (099H)
  15+ 4CF8 A7           	AND	A
  16+ 4CF9 F2 27 4D     	JP P, .EXIT
  17+ 4CFC
  18+ 4CFC               IF (SOUND_CMDS + SPRITE_CMDS > 0)
  19+ 4CFC C5               PUSH BC
  20+ 4CFD D5               PUSH DE
  21+ 4CFE E5               PUSH HL
  22+ 4CFF 08               EX AF, AF'
  23+ 4D00 D9               EXX
  24+ 4D01 F5               PUSH AF
  25+ 4D02 C5               PUSH BC
  26+ 4D03 D5               PUSH DE
  27+ 4D04 E5               PUSH HL
  28+ 4D05 DD E5            PUSH IX
  29+ 4D07 FD E5            PUSH IY
  30+ 4D09
  31+ 4D09               IF (SPRITE_CMDS == 1)
  32+ 4D09 CD 61 4D     	CALL PROCESS_SPRITES_AND_ANIMATIONS
  33+ 4D0C               ENDIF
  34+ 4D0C
  35+ 4D0C               IF (SOUND_CMDS == 1)
  36+ 4D0C 3A 7C 4D     	LD A, (SOUND_ENABLED)
  37+ 4D0F B7           	OR A
  38+ 4D10 C4 33 42     	CALL NZ,PLY_AKG_PLAY
  39+ 4D13               ENDIF
  40+ 4D13
  41+ 4D13                  ; increase JIFFY
  42+ 4D13 2A 9E FC         LD HL,(JIFFY)
  43+ 4D16 23               INC HL
  44+ 4D17 22 9E FC         LD (JIFFY),HL
  45+ 4D1A
  46+ 4D1A FD E1            POP IY
  47+ 4D1C DD E1            POP IX
  48+ 4D1E E1               POP HL
  49+ 4D1F D1               POP DE
  50+ 4D20 C1               POP BC
  51+ 4D21 F1               POP AF
  52+ 4D22 08               EX AF, AF'
  53+ 4D23 D9               EXX
  54+ 4D24 E1               POP HL
  55+ 4D25 D1               POP DE
  56+ 4D26 C1               POP BC
  57+ 4D27               ENDIF
  58+ 4D27
  59+ 4D27              .EXIT:
  60+ 4D27 F1           	POP AF
  61+ 4D28 FB           	EI
  62+ 4D29 ED 4D        	RETI
  63+ 4D2B              ; *******************************************************************************************************
  64+ 4D2B
  65+ 4D2B              ; *******************************************************************************************************
  66+ 4D2B              ; H.TIMI function
  67+ 4D2B              ; we can end up here from anywhere so page in both page 0 and 2
  68+ 4D2B              MBGE_HTIMI:
  69+ 4D2B               EXPORT MBGE_HTIMI
  70+ 4D2B
  71+ 4D2B               IF (SOUND_CMDS + SPRITE_CMDS > 0)
  72+ 4D2B
  73+ 4D2B F5           	PUSH AF
  74+ 4D2C
  75+ 4D2C              	; enable page 2
  76+ 4D2C 3E 02            LD A, 2
  77+ 4D2E CD F6 55         CALL GET_PAGE_INFO
  78+ 4D31 C5               PUSH BC
  79+ 4D32 D5               PUSH DE
  80+ 4D33 3A 43 F3         LD A, (RAMAD2)
  81+ 4D36 26 80            LD H, 080H
  82+ 4D38 CD 3D 56         CALL LOCAL_ENASLT
  83+ 4D3B              	; enable page 0
  84+ 4D3B AF               XOR A
  85+ 4D3C CD F6 55         CALL GET_PAGE_INFO
  86+ 4D3F C5               PUSH BC
  87+ 4D40 D5               PUSH DE
  88+ 4D41 3A 41 F3         LD A, (RAMAD0)
  89+ 4D44 26 00            LD H, 0
  90+ 4D46 CD 3D 56         CALL LOCAL_ENASLT
  91+ 4D49
  92+ 4D49               IF (SPRITE_CMDS == 1)
  93+ 4D49 CD 61 4D     	CALL PROCESS_SPRITES_AND_ANIMATIONS
  94+ 4D4C               ENDIF
  95+ 4D4C
  96+ 4D4C               IF (SOUND_CMDS == 1)
  97+ 4D4C 3A 7C 4D     	LD A, (SOUND_ENABLED)
  98+ 4D4F B7           	OR A
  99+ 4D50 C4 33 42     	CALL NZ,PLY_AKG_PLAY
 100+ 4D53               ENDIF
 101+ 4D53
 102+ 4D53              	; restore page 0
 103+ 4D53 D1               POP DE
 104+ 4D54 C1               POP BC
 105+ 4D55 CD 2D 56         CALL RESTORE_PAGE_INFO
 106+ 4D58              	; restore page 2
 107+ 4D58 D1               POP DE
 108+ 4D59 C1               POP BC
 109+ 4D5A CD 2D 56         CALL RESTORE_PAGE_INFO
 110+ 4D5D
 111+ 4D5D F1           	POP AF
 112+ 4D5E               ENDIF
 113+ 4D5E C3 F0 4C     	JP ORIG.HTIMI
 114+ 4D61              ; *******************************************************************************************************
 115+ 4D61
 116+ 4D61              ; *******************************************************************************************************
 117+ 4D61              ; function checks if the sprite system is initialized and what screen mode we are running
 118+ 4D61              ; also checks if some VRAM modifying command is running
 119+ 4D61              ; when that checks out calls sprite updates and animation processing
 120+ 4D61              PROCESS_SPRITES_AND_ANIMATIONS:
 121+ 4D61              	; check if initialized
 122+ 4D61 3A 7D 4D     	LD A, (SPRATR_INIT_STATUS)
 123+ 4D64 B7           	OR A
 124+ 4D65 C8           	RET Z
 125+ 4D66              	; check screen mode
 126+ 4D66 3A AF FC     	LD A, (SCRMOD)
 127+ 4D69 3D           	DEC A
 128+ 4D6A 28 02        	JR Z, .L0 ; screen 1
 129+ 4D6C 3D           	DEC A
 130+ 4D6D C0           	RET NZ ; not screen 2
 131+ 4D6E              .L0:
 132+ 4D6E                  ; check if anyone else is working with VRAM
 133+ 4D6E 3A 6A 54         LD A,(VRAM_UPDATE_IN_PROGRESS)
 134+ 4D71 B7               OR A
 135+ 4D72 C0               RET NZ
 136+ 4D73
 137+ 4D73 CD 92 4D         CALL SPRATR_UPDATE
 138+ 4D76
 139+ 4D76               IF (ANIM_CMDS == 1)
 140+ 4D76 CD 71 53         CALL PROCESS_ANIMATIONS
 141+ 4D79               ENDIF
 142+ 4D79 C9               RET
 143+ 4D7A              ; *******************************************************************************************************
# file closed: asm\VBLANK.asm
 112  4D7A
 113  4D7A               IF (SOUND_CMDS == 1)
 114  4D7A              MUSIC_INIT_STATUS:
 115  4D7A 00            DB 0
 116  4D7B              SFX_INIT_STATUS:
 117  4D7B 00            DB 0
 118  4D7C              SOUND_ENABLED:
 119  4D7C 00            DB 0
 120  4D7D               ENDIF
 121  4D7D
 122  4D7D               IF (SPRITE_CMDS == 1)
 123  4D7D               INCLUDE "SPRITES.asm"
# file opened: asm\SPRITES.asm
   1+ 4D7D              ; commands and variables related to sprites
   2+ 4D7D
   3+ 4D7D              SPRATR_INIT_STATUS:
   4+ 4D7D 00            DB 0
   5+ 4D7E              SPRATR_UPDATE_FLAG:
   6+ 4D7E 00 00         DW 0
   7+ 4D80              SPRATR_DATA:
   8+ 4D80 00 00         DW 0
   9+ 4D82              SPRFLICKER_ENABLED:
  10+ 4D82 00            DB 0
  11+ 4D83              ; to support sprite flicker
  12+ 4D83              FLICKER:
  13+ 4D83 00            DB 0
  14+ 4D84
  15+ 4D84              ; to temporarily store stack pointer
  16+ 4D84              TMPSP:
  17+ 4D84 00 00         DW 0
  18+ 4D86
  19+ 4D86              ; *******************************************************************************************************
  20+ 4D86              ; helper function gets pointer to n-th entry in sprite attributes
  21+ 4D86              ; changes HL,DE;
  22+ 4D86              GETnthSPRATTR:
  23+ 4D86 26 00            LD H,0
  24+ 4D88 6F               LD L,A
  25+ 4D89 CD F2 55         CALL HLx8
  26+ 4D8C ED 5B 80 4D      LD DE,(SPRATR_DATA)
  27+ 4D90 19               ADD HL,DE
  28+ 4D91 C9               RET
  29+ 4D92              ; *******************************************************************************************************
  30+ 4D92
  31+ 4D92              ; *******************************************************************************************************
  32+ 4D92              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
  33+ 4D92              ; struct {
  34+ 4D92              ; DW y
  35+ 4D92              ; DW x
  36+ 4D92              ; DW pattern (0-63)
  37+ 4D92              ; DW color
  38+ 4D92              ; } [32]
  39+ 4D92              ; will hide sprites whose location is outside of visible area
  40+ 4D92              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
  41+ 4D92              ; modifies AF, AF', BC, DE, HL
  42+ 4D92              SPRATR_UPDATE:
  43+ 4D92              	; check if update requested
  44+ 4D92 2A 7E 4D     	LD HL, (SPRATR_UPDATE_FLAG)
  45+ 4D95 7E           	LD A, (HL)
  46+ 4D96 B7           	OR A
  47+ 4D97 C8           	RET Z
  48+ 4D98              .L0:
  49+ 4D98 06 20        	LD B, 32 ; sprite number
  50+ 4D9A 0E 98        	LD C, #98 ; register for vdp data output
  51+ 4D9C              	; set VDP address
  52+ 4D9C 2A 28 F9     	LD HL, (ATRBAS)
  53+ 4D9F 3A 82 4D     	LD A, (SPRFLICKER_ENABLED)
  54+ 4DA2 B7           	OR A
  55+ 4DA3 28 03        	JR Z, .L3
  56+ 4DA5 3A 83 4D     	LD A, (FLICKER)
  57+ 4DA8              .L3:
  58+ 4DA8 5F           	LD E, A
  59+ 4DA9 08           	EX AF, AF'
  60+ 4DAA 7B           	LD A, E
  61+ 4DAB 87           	ADD A, A
  62+ 4DAC 87           	ADD A, A
  63+ 4DAD 16 00        	LD D, 0
  64+ 4DAF 5F           	LD E, A
  65+ 4DB0 19           	ADD HL, DE
  66+ 4DB1 CD DF 55     	CALL SETWRT_LOCAL
  67+ 4DB4 ED 73 84 4D  	LD (TMPSP), SP
  68+ 4DB8 ED 7B 80 4D  	LD SP, (SPRATR_DATA)
  69+ 4DBC
  70+ 4DBC              .LOOP:
  71+ 4DBC E1           	POP HL
  72+ 4DBD 24           	INC H
  73+ 4DBE 28 0D        	JR Z, .L1 ; negative number above -256
  74+ 4DC0 25           	DEC H
  75+ 4DC1 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
  76+ 4DC3 7D           	LD A, L
  77+ 4DC4 FE C0        	CP 192
  78+ 4DC6 30 10        	JR NC, .OUT3
  79+ 4DC8 3D           	DEC A ; due to VDP rule that top of screen is -1
  80+ 4DC9 57           	LD D, A
  81+ 4DCA C3 F1 4D     	JP .X
  82+ 4DCD              .L1:
  83+ 4DCD 7D           	LD A, L
  84+ 4DCE C6 10        	ADD 16
  85+ 4DD0 FA D8 4D     	JP M, .OUT3 ; below -16
  86+ 4DD3 2D           	DEC L ; due to VDP rule that top of screen is -1
  87+ 4DD4 55           	LD D, L
  88+ 4DD5 C3 F1 4D     	JP .X
  89+ 4DD8              .OUT3:
  90+ 4DD8 E1           	POP HL ; skip x value
  91+ 4DD9              .OUT2:
  92+ 4DD9 E1           	POP HL ; skip pattern
  93+ 4DDA E1           	POP HL ; skip color
  94+ 4DDB 3E D1        	LD A, #D1
  95+ 4DDD ED 79        	OUT (C), A ; sprite hidden
  96+ 4DDF 00          > NOP
  96+ 4DE0 00          > NOP
  96+ 4DE1 00          > NOP
  97+ 4DE2 ED 79        	OUT (C), A ; value unimportant
  98+ 4DE4 00          > NOP
  98+ 4DE5 00          > NOP
  98+ 4DE6 00          > NOP
  99+ 4DE7 ED 79        	OUT (C), A ; value unimportant
 100+ 4DE9 00          > NOP
 100+ 4DEA 00          > NOP
 100+ 4DEB 00          > NOP
 101+ 4DEC ED 79        	OUT (C), A ; value unimportant
 102+ 4DEE C3 1C 4E     	JP .NEXT
 103+ 4DF1              .X:
 104+ 4DF1 E1           	POP HL
 105+ 4DF2 24           	INC H
 106+ 4DF3 28 08        	JR Z, .L2
 107+ 4DF5 25           	DEC H
 108+ 4DF6 20 E1        	JR NZ, .OUT2
 109+ 4DF8 1E 00        	LD E, 0 ; EC bit
 110+ 4DFA C3 06 4E     	JP .XY
 111+ 4DFD              .L2:
 112+ 4DFD 7D           	LD A, L
 113+ 4DFE C6 20        	ADD 32
 114+ 4E00 FA D9 4D     	JP M, .OUT2
 115+ 4E03 6F           	LD L, A
 116+ 4E04 1E 80        	LD E, #80
 117+ 4E06              .XY:
 118+ 4E06 ED 51        	OUT (C), D
 119+ 4E08 3A E0 F3     	LD A, (REG1SAV)
 120+ 4E0B E6 02        	AND 2
 121+ 4E0D ED 69        	OUT (C), L
 122+ 4E0F E1           	POP HL ; pattern
 123+ 4E10 7D           	LD A, L
 124+ 4E11 28 02        	JR Z, .SMALLSPRITES
 125+ 4E13 87           	ADD A, A
 126+ 4E14 87           	ADD A, A ; needs to go at 4x
 127+ 4E15              .SMALLSPRITES:
 128+ 4E15 D3 98        	OUT (#98), A
 129+ 4E17 E1           	POP HL ; color
 130+ 4E18 7D           	LD A, L
 131+ 4E19 B3           	OR E
 132+ 4E1A D3 98        	OUT (#98), A
 133+ 4E1C              .NEXT:
 134+ 4E1C 08           	EX AF, AF'
 135+ 4E1D 3C           	INC A
 136+ 4E1E E6 1F        	AND 31
 137+ 4E20 C2 34 4E     	JP NZ, .NEXT2
 138+ 4E23 08           	EX AF, AF'
 139+ 4E24 2A 28 F9     	LD HL, (ATRBAS)
 140+ 4E27              	; CALL SETWRT_LOCAL not allowed as SP modified
 141+ 4E27 7D           	LD	A, L
 142+ 4E28 D3 99        	OUT	(099H), A
 143+ 4E2A 7C           	LD	A, H
 144+ 4E2B E6 3F        	AND	03FH
 145+ 4E2D F6 40        	OR	040H
 146+ 4E2F D3 99        	OUT	(099H), A
 147+ 4E31 C3 35 4E     	JP .NEXT3
 148+ 4E34              .NEXT2:
 149+ 4E34 08           	EX AF, AF'
 150+ 4E35              .NEXT3:
 151+ 4E35 10 85        	DJNZ .LOOP
 152+ 4E37 08           	EX AF, AF'
 153+ 4E38 3C           	INC A
 154+ 4E39 32 83 4D     	LD (FLICKER), A
 155+ 4E3C
 156+ 4E3C ED 7B 84 4D  	LD SP, (TMPSP)
 157+ 4E40 2A 7E 4D     	LD HL, (SPRATR_UPDATE_FLAG)
 158+ 4E43 36 00        	LD (HL), 0 ; zero out update flag
 159+ 4E45 C9           	RET
 160+ 4E46              ; *******************************************************************************************************
 161+ 4E46
 162+ 4E46              ; *******************************************************************************************************
 163+ 4E46              ; function to handle CALL SPRENABLE basic extension
 164+ 4E46              ; initializes sprites handler
 165+ 4E46              ; _SPRENABLE ( INT sprites_attributes_data,
 166+ 4E46              ;			   INT update_variable_location,
 167+ 4E46              ;			   INT sprite_flicker_enabled )
 168+ 4E46              ; expects both locations to be in range #8000+ or throws an error
 169+ 4E46              ; since these should be BASIC variables
 170+ 4E46              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA and SPRFLICKER_ENABLED
 171+ 4E46              SPRENABLE:
 172+ 4E46              	; opening (
 173+ 4E46 CD 03 57     	CALL CHKCHAR
 174+ 4E49 28           	DB '('
 175+ 4E4A              	; get address of sprite attribute table DIM SA%(3,31)
 176+ 4E4A DD 21 2F 54  	LD IX, FRMQNT
 177+ 4E4E CD 59 01     	CALL CALBAS
 178+ 4E51 D5           	PUSH DE
 179+ 4E52              	; comma
 180+ 4E52 CD 03 57     	CALL CHKCHAR
 181+ 4E55 2C           	DB ','
 182+ 4E56              	; get address of sprite update flag location
 183+ 4E56 DD 21 2F 54  	LD IX, FRMQNT
 184+ 4E5A CD 59 01     	CALL CALBAS
 185+ 4E5D D5           	PUSH DE
 186+ 4E5E              	; comma
 187+ 4E5E CD 03 57     	CALL CHKCHAR
 188+ 4E61 2C           	DB ','
 189+ 4E62              	; get flicker enabled flag
 190+ 4E62 DD 21 2F 54  	LD IX, FRMQNT
 191+ 4E66 CD 59 01     	CALL CALBAS
 192+ 4E69 D5           	PUSH DE
 193+ 4E6A              	; ending )
 194+ 4E6A CD 03 57     	CALL CHKCHAR
 195+ 4E6D 29           	DB ')'
 196+ 4E6E
 197+ 4E6E D1           	POP DE ; get flicker flag
 198+ 4E6F 7A           	LD A, D
 199+ 4E70 B3           	OR E
 200+ 4E71 32 82 4D     	LD (SPRFLICKER_ENABLED), A
 201+ 4E74
 202+ 4E74 D1           	POP DE ; update variable location
 203+ 4E75 CB 7A        	BIT 7, D ; is address >= &h8000
 204+ 4E77 20 05        	JR NZ, .L1
 205+ 4E79 1E 05        	LD E, 5 ; illegal function call
 206+ 4E7B C3 23 57     	JP THROW_ERROR
 207+ 4E7E              .L1:
 208+ 4E7E ED 53 7E 4D  	LD (SPRATR_UPDATE_FLAG), DE
 209+ 4E82 D1           	POP DE ; address of sprite attribute table
 210+ 4E83 CB 7A        	BIT 7, D ; is address >= &h8000
 211+ 4E85 20 05        	JR NZ, .L2
 212+ 4E87 1E 05        	LD E, 5 ; illegal function call
 213+ 4E89 C3 23 57     	JP THROW_ERROR
 214+ 4E8C              .L2:
 215+ 4E8C ED 53 80 4D  	LD (SPRATR_DATA), DE
 216+ 4E90 3E 01        	LD A, 1
 217+ 4E92 32 7D 4D     	LD (SPRATR_INIT_STATUS), A
 218+ 4E95 C9           	RET
 219+ 4E96              ; *******************************************************************************************************
 220+ 4E96
 221+ 4E96              ; *******************************************************************************************************
 222+ 4E96              ; function to handle CALL SPRDISABLE basic extension
 223+ 4E96              ; disables sprites handling
 224+ 4E96              ; _SPRDISABLE
 225+ 4E96              ; resets variable SPRATR_INIT_STATUS
 226+ 4E96              SPRDISABLE:
 227+ 4E96 AF           	XOR A
 228+ 4E97 32 7D 4D     	LD (SPRATR_INIT_STATUS), A
 229+ 4E9A C9           	RET
 230+ 4E9B              ; *******************************************************************************************************
 231+ 4E9B
 232+ 4E9B              ; *******************************************************************************************************
 233+ 4E9B              ; function to handle CALL SPRSET basic extension
 234+ 4E9B              ; sets position, and optionally pattern and color of sprite
 235+ 4E9B              ; _SPRSET ( BYTE sprite_num , valid 0-31
 236+ 4E9B              ;			INT x,
 237+ 4E9B              ;			INT y,
 238+ 4E9B              ;			INT pattern, valid 0-63, otherwise ignored
 239+ 4E9B              ;			INT color, valid 0-15, otherwise ignored
 240+ 4E9B              SPRSET:
 241+ 4E9B 3A 7D 4D     	LD A, (SPRATR_INIT_STATUS)
 242+ 4E9E B7           	OR A
 243+ 4E9F 20 05        	JR NZ, .L1
 244+ 4EA1 1E 05        	LD E, 5 ; illegal function call
 245+ 4EA3 C3 23 57     	JP THROW_ERROR
 246+ 4EA6              .L1:
 247+ 4EA6              	; opening (
 248+ 4EA6 CD 03 57     	CALL CHKCHAR
 249+ 4EA9 28           	DB '('
 250+ 4EAA              	; get sprite number
 251+ 4EAA DD 21 1C 52  	LD IX, GETBYT
 252+ 4EAE CD 59 01     	CALL CALBAS
 253+ 4EB1 F5           	PUSH AF
 254+ 4EB2              	; comma
 255+ 4EB2 CD 03 57     	CALL CHKCHAR
 256+ 4EB5 2C           	DB ','
 257+ 4EB6              	; get x
 258+ 4EB6 DD 21 2F 54  	LD IX, FRMQNT
 259+ 4EBA CD 59 01     	CALL CALBAS
 260+ 4EBD D5           	PUSH DE
 261+ 4EBE              	; comma
 262+ 4EBE CD 03 57     	CALL CHKCHAR
 263+ 4EC1 2C           	DB ','
 264+ 4EC2              	; get y
 265+ 4EC2 DD 21 2F 54  	LD IX, FRMQNT
 266+ 4EC6 CD 59 01     	CALL CALBAS
 267+ 4EC9 D5           	PUSH DE
 268+ 4ECA              	; comma
 269+ 4ECA CD 03 57     	CALL CHKCHAR
 270+ 4ECD 2C           	DB ','
 271+ 4ECE              	; get pattern
 272+ 4ECE DD 21 2F 54  	LD IX, FRMQNT
 273+ 4ED2 CD 59 01     	CALL CALBAS
 274+ 4ED5 D5           	PUSH DE
 275+ 4ED6              	; comma
 276+ 4ED6 CD 03 57     	CALL CHKCHAR
 277+ 4ED9 2C           	DB ','
 278+ 4EDA              	; get color
 279+ 4EDA DD 21 2F 54  	LD IX, FRMQNT
 280+ 4EDE CD 59 01     	CALL CALBAS
 281+ 4EE1 D5           	PUSH DE
 282+ 4EE2              	; ending )
 283+ 4EE2 CD 03 57     	CALL CHKCHAR
 284+ 4EE5 29           	DB ')'
 285+ 4EE6
 286+ 4EE6                  ; save position in BASIC text
 287+ 4EE6 E5           	PUSH HL
 288+ 4EE7 DD E1        	POP IX
 289+ 4EE9
 290+ 4EE9 C1           	POP BC ; color
 291+ 4EEA D1           	POP DE ; pattern
 292+ 4EEB D9           	EXX
 293+ 4EEC C1           	POP BC ; y
 294+ 4EED D1           	POP DE ; x
 295+ 4EEE F1           	POP AF ; sprite number
 296+ 4EEF FE 20        	CP 32
 297+ 4EF1 38 05        	JR C, .L2
 298+ 4EF3 1E 05        	LD E, 5 ; illegal function call
 299+ 4EF5 C3 23 57     	JP THROW_ERROR
 300+ 4EF8              .L2:
 301+ 4EF8              	; find location in sprite attributes table
 302+ 4EF8 D5           	PUSH DE
 303+ 4EF9 CD 86 4D     	CALL GETnthSPRATTR
 304+ 4EFC D1           	POP DE
 305+ 4EFD              	; set y
 306+ 4EFD 71           	LD (HL), C
 307+ 4EFE 23           	INC HL
 308+ 4EFF 70           	LD (HL), B
 309+ 4F00 23           	INC HL
 310+ 4F01              	; set x
 311+ 4F01 73           	LD (HL), E
 312+ 4F02 23           	INC HL
 313+ 4F03 72           	LD (HL), D
 314+ 4F04 23           	INC HL
 315+ 4F05 E5           	PUSH HL
 316+ 4F06 D9           	EXX
 317+ 4F07 E1           	POP HL
 318+ 4F08              	; check if 0<=pattern<64
 319+ 4F08 7A           	LD A, D
 320+ 4F09 B7           	OR A
 321+ 4F0A 20 0B        	JR NZ, .L3
 322+ 4F0C 7B           	LD A, E
 323+ 4F0D FE 40        	CP 64
 324+ 4F0F 30 06        	JR NC, .L3
 325+ 4F11              	; set pattern
 326+ 4F11              	;ADD A, A
 327+ 4F11              	;ADD A, A
 328+ 4F11              	;ADD A, A
 329+ 4F11 77           	LD (HL), A
 330+ 4F12 23           	INC HL
 331+ 4F13 72           	LD (HL), D
 332+ 4F14 23           	INC HL
 333+ 4F15 18 02        	JR .L4
 334+ 4F17              .L3:
 335+ 4F17              	; skip pattern
 336+ 4F17 23          > INC HL
 336+ 4F18 23          > INC HL
 337+ 4F19              .L4:
 338+ 4F19              	; check if 0<=color<16
 339+ 4F19 78           	LD A, B
 340+ 4F1A B7           	OR A
 341+ 4F1B 20 08        	JR NZ, .L5
 342+ 4F1D 79           	LD A, C
 343+ 4F1E FE 10        	CP 16
 344+ 4F20 30 03        	JR NC, .L5
 345+ 4F22              	; set color
 346+ 4F22 71           	LD (HL), C
 347+ 4F23 23           	INC HL
 348+ 4F24 70           	LD (HL), B
 349+ 4F25
 350+ 4F25              .L5:
 351+ 4F25 DD E5        	PUSH IX
 352+ 4F27 E1           	POP HL
 353+ 4F28 C9           	RET
 354+ 4F29              ; *******************************************************************************************************
 355+ 4F29
 356+ 4F29              ; *******************************************************************************************************
 357+ 4F29              ; function sets sprite location based on initial coordinates and offset provided
 358+ 4F29              ; input A=sprite number in SPRATR_DATA , 0-31
 359+ 4F29              ; input DE=initial x
 360+ 4F29              ; input BC=initial y
 361+ 4F29              ; input IY=location where delta y,x are located
 362+ 4F29              ; modifies AF, HL, IX
 363+ 4F29              SPRSET_DELTA_POS:
 364+ 4F29 D5           	PUSH DE
 365+ 4F2A CD 86 4D     	CALL GETnthSPRATTR
 366+ 4F2D E5           	PUSH HL
 367+ 4F2E DD E1        	POP IX
 368+ 4F30 D1           	POP DE
 369+ 4F31              	; IX=sprite's y location
 370+ 4F31 FD 6E 00     	LD L, (IY)
 371+ 4F34 FD 66 01     	LD H, (IY+1)
 372+ 4F37 09           	ADD HL, BC
 373+ 4F38 DD 75 00     	LD (IX), L
 374+ 4F3B DD 74 01     	LD (IX+1), H
 375+ 4F3E FD 6E 02     	LD L, (IY+2)
 376+ 4F41 FD 66 03     	LD H, (IY+3)
 377+ 4F44 19           	ADD HL, DE
 378+ 4F45 DD 75 02     	LD (IX+2), L
 379+ 4F48 DD 74 03     	LD (IX+3), H
 380+ 4F4B C9           	RET
 381+ 4F4C              ; *******************************************************************************************************
 382+ 4F4C
 383+ 4F4C              ; *******************************************************************************************************
 384+ 4F4C              ; function to handle CALL SPRGRPMOV basic extension
 385+ 4F4C              ; sets position of a group of sprites described with
 386+ 4F4C              ; { int sprite_num, int delta_y, int delta_x } [count]
 387+ 4F4C              ; _SPRGRPMOV ( INT x,
 388+ 4F4C              ;			   INT y,
 389+ 4F4C              ;			   INT data_ptr,
 390+ 4F4C              ;			   BYTE count,
 391+ 4F4C              ; will put ram in page 0 also, page 1 is already there
 392+ 4F4C              SPRGRPMOV:
 393+ 4F4C 3A 7D 4D     	LD A, (SPRATR_INIT_STATUS)
 394+ 4F4F B7           	OR A
 395+ 4F50 20 05        	JR NZ, .L1
 396+ 4F52 1E 05        	LD E, 5 ; illegal function call
 397+ 4F54 C3 23 57     	JP THROW_ERROR
 398+ 4F57              .L1:
 399+ 4F57              	; opening (
 400+ 4F57 CD 03 57     	CALL CHKCHAR
 401+ 4F5A 28           	DB '('
 402+ 4F5B              	; get x
 403+ 4F5B DD 21 2F 54  	LD IX, FRMQNT
 404+ 4F5F CD 59 01     	CALL CALBAS
 405+ 4F62 D5           	PUSH DE
 406+ 4F63              	; comma
 407+ 4F63 CD 03 57     	CALL CHKCHAR
 408+ 4F66 2C           	DB ','
 409+ 4F67              	; get y
 410+ 4F67 DD 21 2F 54  	LD IX, FRMQNT
 411+ 4F6B CD 59 01     	CALL CALBAS
 412+ 4F6E D5           	PUSH DE
 413+ 4F6F              	; comma
 414+ 4F6F CD 03 57     	CALL CHKCHAR
 415+ 4F72 2C           	DB ','
 416+ 4F73              	; get data pointer
 417+ 4F73 DD 21 2F 54  	LD IX, FRMQNT
 418+ 4F77 CD 59 01     	CALL CALBAS
 419+ 4F7A D5           	PUSH DE
 420+ 4F7B              	; comma
 421+ 4F7B CD 03 57     	CALL CHKCHAR
 422+ 4F7E 2C           	DB ','
 423+ 4F7F              	; get count
 424+ 4F7F DD 21 1C 52  	LD IX, GETBYT
 425+ 4F83 CD 59 01     	CALL CALBAS
 426+ 4F86 F5           	PUSH AF
 427+ 4F87              	; ending )
 428+ 4F87 CD 03 57     	CALL CHKCHAR
 429+ 4F8A 29           	DB ')'
 430+ 4F8B
 431+ 4F8B E5           	PUSH HL
 432+ 4F8C DD E1        	POP IX
 433+ 4F8E
 434+ 4F8E C1           	POP BC ; count
 435+ 4F8F E1           	POP HL ; data pointer
 436+ 4F90 D9           	EXX
 437+ 4F91 C1           	POP BC ; y
 438+ 4F92 D1           	POP DE ; x
 439+ 4F93 D9           	EXX
 440+ 4F94
 441+ 4F94 DD E5        	PUSH IX ; save position in BASIC buffer
 442+ 4F96
 443+ 4F96 C5           	PUSH BC
 444+ 4F97 E5           	PUSH HL
 445+ 4F98 AF               XOR A
 446+ 4F99 CD F6 55         CALL GET_PAGE_INFO
 447+ 4F9C D9           	EXX
 448+ 4F9D E1           	POP HL
 449+ 4F9E F1           	POP AF
 450+ 4F9F D9           	EXX
 451+ 4FA0 C5               PUSH BC
 452+ 4FA1 D5               PUSH DE
 453+ 4FA2 D9           	EXX
 454+ 4FA3 F5           	PUSH AF
 455+ 4FA4 E5           	PUSH HL
 456+ 4FA5 D9           	EXX
 457+ 4FA6 3A 41 F3         LD A, (RAMAD0)
 458+ 4FA9 26 00            LD H, 0
 459+ 4FAB CD 3D 56         CALL LOCAL_ENASLT
 460+ 4FAE FB           	EI
 461+ 4FAF E1           	POP HL
 462+ 4FB0 C1           	POP BC
 463+ 4FB1 CD BB 4F     	CALL .UPDATE_LOC
 464+ 4FB4 D1               POP DE
 465+ 4FB5 C1               POP BC
 466+ 4FB6 CD 2D 56         CALL RESTORE_PAGE_INFO
 467+ 4FB9 E1           	POP HL
 468+ 4FBA C9           	RET
 469+ 4FBB
 470+ 4FBB              .UPDATE_LOC:
 471+ 4FBB              .L4:
 472+ 4FBB 7E           	LD A, (HL)
 473+ 4FBC 23           	INC HL
 474+ 4FBD 23           	INC HL
 475+ 4FBE E5           	PUSH HL
 476+ 4FBF FD E1        	POP IY
 477+ 4FC1 D9           	EXX
 478+ 4FC2 CD 29 4F     	CALL SPRSET_DELTA_POS
 479+ 4FC5 D9           	EXX
 480+ 4FC6 23          > INC HL
 480+ 4FC7 23          > INC HL
 480+ 4FC8 23          > INC HL
 480+ 4FC9 23          > INC HL
 481+ 4FCA 10 EF        	DJNZ .L4
 482+ 4FCC C9           	RET
 483+ 4FCD              ; *******************************************************************************************************
 484+ 4FCD
# file closed: asm\SPRITES.asm
 124  4FCD               ENDIF
 125  4FCD
 126  4FCD               IF (ANIM_CMDS == 1)
 127  4FCD               INCLUDE "ANIMATION.asm"
# file opened: asm\ANIMATION.asm
   1+ 4FCD              ; sprite animation routines
   2+ 4FCD
   3+ 4FCD              ; number of animation items and pointer
   4+ 4FCD              ANIMITEMNUM:
   5+ 4FCD 00            DB 0
   6+ 4FCE              ANIMITEMPTR:
   7+ 4FCE 69 5F         DW EXT_END
   8+ 4FD0              ; number of animation definitions and pointer
   9+ 4FD0              ANIMDEFNUM:
  10+ 4FD0 00            DB 0
  11+ 4FD1              ANIMDEFPTR:
  12+ 4FD1 69 5F         DW EXT_END
  13+ 4FD3              ; number of links between sprite and animation definitions
  14+ 4FD3              ANIMSPRNUM:
  15+ 4FD3 00            DB 0
  16+ 4FD4              ANIMSPRPTR:
  17+ 4FD4 69 5F         DW EXT_END
  18+ 4FD6
  19+ 4FD6              ; ANIMATION ITEM
  20+ 4FD6              ; byte type = [0 - pattern and color change
  21+ 4FD6              ;              1 - pattern definition change ]
  22+ 4FD6              ; word ticks - number of ticks to hold this state
  23+ 4FD6              ; for type = 0
  24+ 4FD6              ;   byte pattern;
  25+ 4FD6              ;   byte color;
  26+ 4FD6              ; for type = 1
  27+ 4FD6              ;   work data_pointer;
  28+ 4FD6              ; total size = 5b
  29+ 4FD6
  30+ 4FD6              ; ANIMATION DEFINITION
  31+ 4FD6              ; byte number of items 1-15
  32+ 4FD6              ; byte[15] anim_item;
  33+ 4FD6              ; total size = 16b
  34+ 4FD6
  35+ 4FD6              ; SPRITE ANIMATION
  36+ 4FD6              ; +00 byte sprite number;
  37+ 4FD6              ; +01 word time;
  38+ 4FD6              ; +03 byte current item;
  39+ 4FD6              ; +04 byte animation definition;
  40+ 4FD6              ; +05 byte cyclic;
  41+ 4FD6              ; +06 byte active;
  42+ 4FD6              ; +07 byte reserved
  43+ 4FD6              ; total size = 8b
  44+ 4FD6
  45+ 4FD6              ; *******************************************************************************************************
  46+ 4FD6              ; helper function HL=A*5
  47+ 4FD6              ; changes HL,DE;
  48+ 4FD6              Ax5:
  49+ 4FD6 26 00            LD H,0
  50+ 4FD8 6F               LD L,A
  51+ 4FD9 54               LD D,H
  52+ 4FDA 5D               LD E,L
  53+ 4FDB 29               ADD HL,HL
  54+ 4FDC 29               ADD HL,HL
  55+ 4FDD 19               ADD HL,DE
  56+ 4FDE C9               RET
  57+ 4FDF              ; *******************************************************************************************************
  58+ 4FDF
  59+ 4FDF              ; *******************************************************************************************************
  60+ 4FDF              ; helper function gets pointer to n-th animation item
  61+ 4FDF              ; changes HL,DE;
  62+ 4FDF              GETnthANIMITEM:
  63+ 4FDF CD D6 4F         CALL Ax5
  64+ 4FE2 ED 5B CE 4F      LD DE,(ANIMITEMPTR)
  65+ 4FE6 19               ADD HL,DE
  66+ 4FE7 C9               RET
  67+ 4FE8              ; *******************************************************************************************************
  68+ 4FE8
  69+ 4FE8              ; *******************************************************************************************************
  70+ 4FE8              ; helper function gets pointer to n-th entry in animation definition
  71+ 4FE8              ; changes HL,DE;
  72+ 4FE8              GETnthANIMDEF:
  73+ 4FE8 26 00            LD H,0
  74+ 4FEA 6F               LD L,A
  75+ 4FEB CD F2 55         CALL HLx8
  76+ 4FEE ED 5B D1 4F      LD DE,(ANIMDEFPTR)
  77+ 4FF2 19               ADD HL,DE
  78+ 4FF3 C9               RET
  79+ 4FF4              ; *******************************************************************************************************
  80+ 4FF4
  81+ 4FF4              ; *******************************************************************************************************
  82+ 4FF4              ; helper function gets pointer to n-th entry in sprite animation
  83+ 4FF4              ; changes HL,DE;
  84+ 4FF4              GETnthSPRANIM:
  85+ 4FF4 26 00            LD H,0
  86+ 4FF6 6F               LD L,A
  87+ 4FF7 CD F1 55         CALL HLx16
  88+ 4FFA ED 5B D4 4F      LD DE,(ANIMSPRPTR)
  89+ 4FFE 19               ADD HL,DE
  90+ 4FFF C9               RET
  91+ 5000              ; *******************************************************************************************************
  92+ 5000
  93+ 5000              ; *******************************************************************************************************
  94+ 5000              ; function to handle CALL MAXANIMITEMS basic extension
  95+ 5000              ; MAXANIMITEMS (BYTE number)
  96+ 5000              ; sets new number and moves memory buffers as needed
  97+ 5000              MAXANIMITEMS:
  98+ 5000              	; opening (
  99+ 5000 CD 03 57     	CALL CHKCHAR
 100+ 5003 28           	DB '('
 101+ 5004              	; get value
 102+ 5004 DD 21 1C 52  	LD IX, GETBYT
 103+ 5008 CD 59 01     	CALL CALBAS
 104+ 500B F5               PUSH AF
 105+ 500C              	; ending )
 106+ 500C CD 03 57     	CALL CHKCHAR
 107+ 500F 29           	DB ')'
 108+ 5010 F1               POP AF
 109+ 5011
 110+ 5011              	; save position
 111+ 5011 E5           	PUSH HL
 112+ 5012              .ENTRY:
 113+ 5012 47               LD B,A
 114+ 5013 3A CD 4F         LD A,(ANIMITEMNUM)
 115+ 5016 90               SUB B
 116+ 5017 28 1F            JR Z, .EXIT; same value as before
 117+ 5019 FD 21 D1 4F      LD IY,ANIMDEFPTR
 118+ 501D FA 3B 50         JP M, .INCREASE
 119+ 5020                  ; new value is lower than previous one
 120+ 5020 CD 53 50         CALL .SIZEDIFF
 121+ 5023 CD 6E 50         CALL .DECREASE_COMMON
 122+ 5026 2A D4 4F         LD HL,(ANIMSPRPTR)
 123+ 5029 AF               XOR A
 124+ 502A ED 42            SBC HL,BC
 125+ 502C 22 D4 4F         LD (ANIMSPRPTR),HL
 126+ 502F              .E1:
 127+ 502F 2A 10 40         LD HL,(FREEMEMPTR)
 128+ 5032 AF               XOR A
 129+ 5033 ED 42            SBC HL,BC
 130+ 5035 22 10 40         LD (FREEMEMPTR),HL
 131+ 5038              .EXIT:
 132+ 5038 FB               EI
 133+ 5039 E1           	POP HL
 134+ 503A C9           	RET
 135+ 503B              .INCREASE:
 136+ 503B ED 44            NEG
 137+ 503D CD 53 50         CALL .SIZEDIFF
 138+ 5040 CD 9A 50         CALL .INCREASE_COMMON
 139+ 5043 2A D4 4F         LD HL,(ANIMSPRPTR)
 140+ 5046 09               ADD HL,BC
 141+ 5047 22 D4 4F         LD (ANIMSPRPTR),HL
 142+ 504A              .E2:
 143+ 504A 2A 10 40         LD HL,(FREEMEMPTR)
 144+ 504D 09               ADD HL,BC
 145+ 504E 22 10 40         LD (FREEMEMPTR),HL
 146+ 5051 18 E5            JR .EXIT
 147+ 5053              .SIZEDIFF:
 148+ 5053 CD D6 4F         CALL Ax5
 149+ 5056 78               LD A,B
 150+ 5057 32 CD 4F         LD (ANIMITEMNUM),A
 151+ 505A 44               LD B,H
 152+ 505B 4D               LD C,L
 153+ 505C C9               RET ; BC=size difference in bytes
 154+ 505D              .SIZETOMOVE:
 155+ 505D D5               PUSH DE
 156+ 505E 2A 10 40         LD HL,(FREEMEMPTR)
 157+ 5061 FD 5E 00         LD E,(IY)
 158+ 5064 FD 56 01         LD D,(IY+1)
 159+ 5067 AF               XOR A
 160+ 5068 ED 52            SBC HL,DE
 161+ 506A 44               LD B,H
 162+ 506B 4D               LD C,L
 163+ 506C D1               POP DE
 164+ 506D C9               RET
 165+ 506E              .DECREASE_COMMON:
 166+ 506E FD 6E 00         LD L,(IY)
 167+ 5071 FD 66 01         LD H,(IY+1)
 168+ 5074 AF               XOR A
 169+ 5075 ED 42            SBC HL,BC
 170+ 5077 EB               EX DE,HL
 171+ 5078 C5               PUSH BC
 172+ 5079 CD 5D 50         CALL .SIZETOMOVE
 173+ 507C F3               DI
 174+ 507D 78               LD A,B
 175+ 507E B1               OR C
 176+ 507F 28 08            JR Z,.L1
 177+ 5081 FD 6E 00         LD L,(IY)
 178+ 5084 FD 66 01         LD H,(IY+1)
 179+ 5087 ED B0            LDIR
 180+ 5089              .L1:
 181+ 5089 C1               POP BC
 182+ 508A FD 6E 00         LD L,(IY)
 183+ 508D FD 66 01         LD H,(IY+1)
 184+ 5090 AF               XOR A
 185+ 5091 ED 42            SBC HL,BC
 186+ 5093 FD 75 00         LD (IY),L
 187+ 5096 FD 74 01         LD (IY+1),H
 188+ 5099 C9               RET
 189+ 509A              .INCREASE_COMMON:
 190+ 509A 2A 10 40         LD HL,(FREEMEMPTR)
 191+ 509D 2B               DEC HL
 192+ 509E AF               XOR A
 193+ 509F ED 42            SBC HL,BC
 194+ 50A1 EB               EX DE,HL
 195+ 50A2 C5               PUSH BC
 196+ 50A3 CD 5D 50         CALL .SIZETOMOVE
 197+ 50A6 F3               DI
 198+ 50A7 78               LD A,B
 199+ 50A8 B1               OR C
 200+ 50A9 28 06            JR Z,.L2
 201+ 50AB 2A 10 40         LD HL,(FREEMEMPTR)
 202+ 50AE 2B               DEC HL
 203+ 50AF ED B8            LDDR
 204+ 50B1              .L2:
 205+ 50B1 C1               POP BC
 206+ 50B2 FD 6E 00         LD L,(IY)
 207+ 50B5 FD 66 01         LD H,(IY+1)
 208+ 50B8 09               ADD HL,BC
 209+ 50B9 FD 75 00         LD (IY),L
 210+ 50BC FD 74 01         LD (IY+1),H
 211+ 50BF C9               RET
 212+ 50C0              ; *******************************************************************************************************
 213+ 50C0
 214+ 50C0              ; *******************************************************************************************************
 215+ 50C0              ; function to handle CALL ANIMITEMPAT basic extension
 216+ 50C0              ; ANIMITEMPAT ( BYTE id,
 217+ 50C0              ;               INT ticks,
 218+ 50C0              ;               BYTE pattern,
 219+ 50C0              ;               BYTE color )
 220+ 50C0              ; fills animation item data, returns an error if out of bounds
 221+ 50C0              ANIMITEMPAT:
 222+ 50C0                  ; opening (
 223+ 50C0 CD 03 57     	CALL CHKCHAR
 224+ 50C3 28           	DB '('
 225+ 50C4              	; get id
 226+ 50C4 DD 21 1C 52  	LD IX, GETBYT
 227+ 50C8 CD 59 01     	CALL CALBAS
 228+ 50CB F5               PUSH AF
 229+ 50CC                  ; check if out of bounds
 230+ 50CC 3C               INC A
 231+ 50CD 4F               LD C,A
 232+ 50CE 3A CD 4F         LD A,(ANIMITEMNUM)
 233+ 50D1 B9               CP C
 234+ 50D2 DA 19 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 235+ 50D5              	; comma
 236+ 50D5 CD 03 57     	CALL CHKCHAR
 237+ 50D8 2C           	DB ','
 238+ 50D9              	; get ticks
 239+ 50D9 DD 21 2F 54  	LD IX, FRMQNT
 240+ 50DD CD 59 01     	CALL CALBAS
 241+ 50E0 D5           	PUSH DE
 242+ 50E1              	; comma
 243+ 50E1 CD 03 57     	CALL CHKCHAR
 244+ 50E4 2C           	DB ','
 245+ 50E5              	; get pattern
 246+ 50E5 DD 21 1C 52  	LD IX, GETBYT
 247+ 50E9 CD 59 01     	CALL CALBAS
 248+ 50EC F5               PUSH AF
 249+ 50ED              	; comma
 250+ 50ED CD 03 57     	CALL CHKCHAR
 251+ 50F0 2C           	DB ','
 252+ 50F1              	; get color
 253+ 50F1 DD 21 1C 52  	LD IX, GETBYT
 254+ 50F5 CD 59 01     	CALL CALBAS
 255+ 50F8 F5               PUSH AF
 256+ 50F9              	; ending )
 257+ 50F9 CD 03 57     	CALL CHKCHAR
 258+ 50FC 29           	DB ')'
 259+ 50FD              .ENTRY:
 260+ 50FD E5               PUSH HL
 261+ 50FE DD E1            POP IX
 262+ 5100 D9               EXX
 263+ 5101 C1               POP BC ; color
 264+ 5102 D1               POP DE ; pattern
 265+ 5103 E1               POP HL ; ticks
 266+ 5104 D9               EXX
 267+ 5105 F1               POP AF
 268+ 5106 CD DF 4F         CALL GETnthANIMITEM
 269+ 5109 E5               PUSH HL
 270+ 510A FD E1            POP IY
 271+ 510C D9               EXX
 272+ 510D FD 36 00 00      LD (IY),0 ; type=0
 273+ 5111 FD 75 01         LD (IY+1),L
 274+ 5114 FD 74 02         LD (IY+2),H
 275+ 5117 FD 72 03         LD (IY+3),D
 276+ 511A FD 70 04         LD (IY+4),B
 277+ 511D
 278+ 511D DD E5            PUSH IX
 279+ 511F E1               POP HL
 280+ 5120 C9               RET
 281+ 5121              ; *******************************************************************************************************
 282+ 5121
 283+ 5121              ; *******************************************************************************************************
 284+ 5121              ; function to handle CALL ANIMITEMPTR basic extension
 285+ 5121              ; ANIMITEMPTR ( BYTE id,
 286+ 5121              ;               INT ticks,
 287+ 5121              ;               INT pointer,
 288+ 5121              ; fills animation item data, returns an error if out of bounds
 289+ 5121              ANIMITEMPTR_CMD:
 290+ 5121                  ; opening (
 291+ 5121 CD 03 57     	CALL CHKCHAR
 292+ 5124 28           	DB '('
 293+ 5125              	; get id
 294+ 5125 DD 21 1C 52  	LD IX, GETBYT
 295+ 5129 CD 59 01     	CALL CALBAS
 296+ 512C F5               PUSH AF
 297+ 512D                  ; check if out of bounds
 298+ 512D 3C               INC A
 299+ 512E 4F               LD C,A
 300+ 512F 3A CD 4F         LD A,(ANIMITEMNUM)
 301+ 5132 B9               CP C
 302+ 5133 DA 19 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 303+ 5136              	; comma
 304+ 5136 CD 03 57     	CALL CHKCHAR
 305+ 5139 2C           	DB ','
 306+ 513A              	; get ticks
 307+ 513A DD 21 2F 54  	LD IX, FRMQNT
 308+ 513E CD 59 01     	CALL CALBAS
 309+ 5141 D5           	PUSH DE
 310+ 5142              	; comma
 311+ 5142 CD 03 57     	CALL CHKCHAR
 312+ 5145 2C           	DB ','
 313+ 5146              	; get pointer
 314+ 5146 DD 21 2F 54  	LD IX, FRMQNT
 315+ 514A CD 59 01     	CALL CALBAS
 316+ 514D D5           	PUSH DE
 317+ 514E              	; ending )
 318+ 514E CD 03 57     	CALL CHKCHAR
 319+ 5151 29           	DB ')'
 320+ 5152              .ENTRY:
 321+ 5152 E5               PUSH HL
 322+ 5153 DD E1            POP IX
 323+ 5155 D9               EXX
 324+ 5156 D1               POP DE ; pointer
 325+ 5157 E1               POP HL ; ticks
 326+ 5158 D9               EXX
 327+ 5159 F1               POP AF
 328+ 515A CD DF 4F         CALL GETnthANIMITEM
 329+ 515D E5               PUSH HL
 330+ 515E FD E1            POP IY
 331+ 5160 D9               EXX
 332+ 5161 FD 36 00 01      LD (IY),1 ; type=1
 333+ 5165 FD 75 01         LD (IY+1),L
 334+ 5168 FD 74 02         LD (IY+2),H
 335+ 516B FD 73 03         LD (IY+3),E
 336+ 516E FD 72 04         LD (IY+4),D
 337+ 5171
 338+ 5171 DD E5            PUSH IX
 339+ 5173 E1               POP HL
 340+ 5174 C9               RET
 341+ 5175              ; *******************************************************************************************************
 342+ 5175
 343+ 5175              ; *******************************************************************************************************
 344+ 5175              ; function to handle CALL MAXANIMDEFS basic extension
 345+ 5175              ; MAXANIMDEFS (BYTE number)
 346+ 5175              ; sets new number and moves memory buffers as needed
 347+ 5175              MAXANIMDEFS:
 348+ 5175              	; opening (
 349+ 5175 CD 03 57     	CALL CHKCHAR
 350+ 5178 28           	DB '('
 351+ 5179              	; get value
 352+ 5179 DD 21 1C 52  	LD IX, GETBYT
 353+ 517D CD 59 01     	CALL CALBAS
 354+ 5180 F5               PUSH AF
 355+ 5181              	; ending )
 356+ 5181 CD 03 57     	CALL CHKCHAR
 357+ 5184 29           	DB ')'
 358+ 5185 F1               POP AF
 359+ 5186
 360+ 5186              	; save position
 361+ 5186 E5           	PUSH HL
 362+ 5187              .ENTRY:
 363+ 5187 47               LD B,A
 364+ 5188 3A D0 4F         LD A,(ANIMDEFNUM)
 365+ 518B 90               SUB B
 366+ 518C CA 38 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 367+ 518F FD 21 D4 4F      LD IY,ANIMSPRPTR
 368+ 5193 FA 9F 51         JP M, .INCREASE
 369+ 5196                  ; new value is lower than previous one
 370+ 5196 CD AA 51         CALL .SIZEDIFF
 371+ 5199 CD 6E 50         CALL MAXANIMITEMS.DECREASE_COMMON
 372+ 519C C3 2F 50         JP MAXANIMITEMS.E1
 373+ 519F              .INCREASE:
 374+ 519F ED 44            NEG
 375+ 51A1 CD AA 51         CALL .SIZEDIFF
 376+ 51A4 CD 9A 50         CALL MAXANIMITEMS.INCREASE_COMMON
 377+ 51A7 C3 4A 50         JP MAXANIMITEMS.E2
 378+ 51AA              .SIZEDIFF:
 379+ 51AA 26 00            LD H,0
 380+ 51AC 6F               LD L,A
 381+ 51AD CD F1 55         CALL HLx16
 382+ 51B0 78               LD A,B
 383+ 51B1 32 D0 4F         LD (ANIMDEFNUM),A
 384+ 51B4 44               LD B,H
 385+ 51B5 4D               LD C,L
 386+ 51B6 C9               RET ; BC=size difference in bytes
 387+ 51B7              ; *******************************************************************************************************
 388+ 51B7
 389+ 51B7              ; *******************************************************************************************************
 390+ 51B7              ; function to handle CALL ANIMDEF basic extension
 391+ 51B7              ; ANIMITEMPAT ( BYTE id,
 392+ 51B7              ;               BYTE size,
 393+ 51B7              ;               INT[] list )
 394+ 51B7              ; fills animation definition data, returns an error if out of bounds, or invalid type
 395+ 51B7              ANIMDEF:
 396+ 51B7                  ; opening (
 397+ 51B7 CD 03 57     	CALL CHKCHAR
 398+ 51BA 28           	DB '('
 399+ 51BB              	; get id
 400+ 51BB DD 21 1C 52  	LD IX, GETBYT
 401+ 51BF CD 59 01     	CALL CALBAS
 402+ 51C2 F5               PUSH AF
 403+ 51C3                  ; check if out of bounds
 404+ 51C3 3C               INC A
 405+ 51C4 4F               LD C,A
 406+ 51C5 3A D0 4F         LD A,(ANIMDEFNUM)
 407+ 51C8 B9               CP C
 408+ 51C9 DA 19 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 409+ 51CC              	; comma
 410+ 51CC CD 03 57     	CALL CHKCHAR
 411+ 51CF 2C           	DB ','
 412+ 51D0              	; get size
 413+ 51D0 DD 21 1C 52  	LD IX, GETBYT
 414+ 51D4 CD 59 01     	CALL CALBAS
 415+ 51D7 FE 10            CP 16
 416+ 51D9 D2 1D 57         JP NC, OVERFLOW
 417+ 51DC B7               OR A
 418+ 51DD CA 1D 57         JP Z, OVERFLOW
 419+ 51E0 F5           	PUSH AF
 420+ 51E1              	; comma
 421+ 51E1 CD 03 57     	CALL CHKCHAR
 422+ 51E4 2C           	DB ','
 423+ 51E5              	; get pointer to a list of animation items in integer array format
 424+ 51E5 3E 01            LD A,1
 425+ 51E7 32 A5 F6         LD (SUBFLG),A ; search for arrays only
 426+ 51EA DD 21 A4 5E  	LD IX, PTRGET
 427+ 51EE CD 59 01     	CALL CALBAS
 428+ 51F1                  ; contrary to documentation we get a pointer to array dimension in BC
 429+ 51F1                  ; and type in VALTYP
 430+ 51F1 3A 63 F6         LD A,(VALTYP)
 431+ 51F4 FE 02            CP 2
 432+ 51F6 C2 15 57         JP NZ,TYPE_MISMATCH
 433+ 51F9 0A               LD A,(BC)
 434+ 51FA FE 01            CP 1
 435+ 51FC C2 15 57         JP NZ,TYPE_MISMATCH
 436+ 51FF 03               INC BC
 437+ 5200 0A               LD A,(BC)
 438+ 5201 D1               POP DE
 439+ 5202 D5               PUSH DE
 440+ 5203 3C               INC A
 441+ 5204 BA               CP D
 442+ 5205 DA 19 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 443+ 5208 03          > INC BC
 443+ 5209 03          > INC BC
 444+ 520A C5               PUSH BC
 445+ 520B              	; ending )
 446+ 520B CD 03 57     	CALL CHKCHAR
 447+ 520E 29           	DB ')'
 448+ 520F              .ENTRY:
 449+ 520F E5               PUSH HL
 450+ 5210 DD E1            POP IX
 451+ 5212 D1               POP DE ; pointer to INT array
 452+ 5213 C1               POP BC ; B=item number
 453+ 5214 F1               POP AF ; id
 454+ 5215 CD E8 4F         CALL GETnthANIMDEF
 455+ 5218 D1               POP DE
 456+ 5219 70               LD (HL),B
 457+ 521A              .L1:
 458+ 521A 23               INC HL
 459+ 521B 1A               LD A,(DE)
 460+ 521C 13          > INC DE
 460+ 521D 13          > INC DE
 461+ 521E 77               LD (HL),A
 462+ 521F 10 F9            DJNZ .L1
 463+ 5221 DD E5            PUSH IX
 464+ 5223 E1               POP HL
 465+ 5224 C9               RET
 466+ 5225              ; *******************************************************************************************************
 467+ 5225
 468+ 5225              ; *******************************************************************************************************
 469+ 5225              ; function to handle CALL MAXANIMSPRS basic extension
 470+ 5225              ; MAXANIMSPRS (BYTE number)
 471+ 5225              ; sets new number and moves memory buffers as needed
 472+ 5225              MAXANIMSPRS:
 473+ 5225              	; opening (
 474+ 5225 CD 03 57     	CALL CHKCHAR
 475+ 5228 28           	DB '('
 476+ 5229              	; get value
 477+ 5229 DD 21 1C 52  	LD IX, GETBYT
 478+ 522D CD 59 01     	CALL CALBAS
 479+ 5230 F5               PUSH AF
 480+ 5231              	; ending )
 481+ 5231 CD 03 57     	CALL CHKCHAR
 482+ 5234 29           	DB ')'
 483+ 5235 F1               POP AF
 484+ 5236
 485+ 5236              	; save position
 486+ 5236 E5           	PUSH HL
 487+ 5237              .ENTRY:
 488+ 5237 47               LD B,A
 489+ 5238 3A D3 4F         LD A,(ANIMSPRNUM)
 490+ 523B 90               SUB B
 491+ 523C CA 38 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 492+ 523F FD 21 10 40      LD IY,FREEMEMPTR
 493+ 5243 FA 4F 52         JP M, .INCREASE
 494+ 5246                  ; new value is lower than previous one
 495+ 5246 CD 6E 52         CALL .SIZEDIFF
 496+ 5249 CD 6E 50         CALL MAXANIMITEMS.DECREASE_COMMON
 497+ 524C C3 38 50         JP MAXANIMITEMS.EXIT
 498+ 524F              .INCREASE:
 499+ 524F ED 44            NEG
 500+ 5251 F5               PUSH AF; save difference for later to set active flag to 0 of new entires
 501+ 5252 CD 6E 52         CALL .SIZEDIFF
 502+ 5255 CD 9A 50         CALL MAXANIMITEMS.INCREASE_COMMON
 503+ 5258 AF               XOR A
 504+ 5259 ED 42            SBC HL,BC ; location of new stuff
 505+ 525B F1               POP AF
 506+ 525C 47               LD B,A
 507+ 525D 11 08 00         LD DE,8
 508+ 5260 E5               PUSH HL
 509+ 5261 DD E1            POP IX
 510+ 5263              .L1:
 511+ 5263 DD 36 06 00      LD (IX+6),0
 512+ 5267 DD 19            ADD IX,DE
 513+ 5269 10 F8            DJNZ .L1
 514+ 526B C3 38 50         JP MAXANIMITEMS.EXIT
 515+ 526E              .SIZEDIFF:
 516+ 526E 26 00            LD H,0
 517+ 5270 6F               LD L,A
 518+ 5271 CD F2 55         CALL HLx8
 519+ 5274 78               LD A,B
 520+ 5275 32 D3 4F         LD (ANIMSPRNUM),A
 521+ 5278 44               LD B,H
 522+ 5279 4D               LD C,L
 523+ 527A C9               RET ; BC=size difference in bytes
 524+ 527B              ; *******************************************************************************************************
 525+ 527B
 526+ 527B              ; *******************************************************************************************************
 527+ 527B              ; function to handle CALL ANIMSPRITE basic extension
 528+ 527B              ; ANIMSPRITE ( BYTE id,
 529+ 527B              ;              BYTE sprite_number,
 530+ 527B              ;              BYTE animation_definition_id,
 531+ 527B              ;              BYTE cyclic_flag )
 532+ 527B              ; fills sprite animation data, returns an error if out of bounds, or invalid type
 533+ 527B              ANIMSPRITE:
 534+ 527B                  ; opening (
 535+ 527B CD 03 57     	CALL CHKCHAR
 536+ 527E 28           	DB '('
 537+ 527F              	; get sprite animation id
 538+ 527F DD 21 1C 52  	LD IX, GETBYT
 539+ 5283 CD 59 01     	CALL CALBAS
 540+ 5286 F5               PUSH AF
 541+ 5287 3C               INC A
 542+ 5288 4F               LD C,A
 543+ 5289 3A D3 4F         LD A,(ANIMSPRNUM)
 544+ 528C B9               CP C
 545+ 528D DA 19 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 546+ 5290              	; comma
 547+ 5290 CD 03 57     	CALL CHKCHAR
 548+ 5293 2C           	DB ','
 549+ 5294              	; get sprite number
 550+ 5294 DD 21 1C 52  	LD IX, GETBYT
 551+ 5298 CD 59 01     	CALL CALBAS
 552+ 529B F5               PUSH AF
 553+ 529C                  ; check if out of bounds
 554+ 529C FE 20            CP 32
 555+ 529E D2 19 57         JP NC, SUBSCRIPT_OUT_OF_RANGE
 556+ 52A1              	; comma
 557+ 52A1 CD 03 57     	CALL CHKCHAR
 558+ 52A4 2C           	DB ','
 559+ 52A5              	; get animation definition id
 560+ 52A5 DD 21 1C 52  	LD IX, GETBYT
 561+ 52A9 CD 59 01     	CALL CALBAS
 562+ 52AC F5               PUSH AF
 563+ 52AD 3C               INC A
 564+ 52AE 4F               LD C,A
 565+ 52AF 3A D0 4F         LD A,(ANIMDEFNUM)
 566+ 52B2 B9               CP C
 567+ 52B3 DA 19 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 568+ 52B6              	; comma
 569+ 52B6 CD 03 57     	CALL CHKCHAR
 570+ 52B9 2C           	DB ','
 571+ 52BA              	; get cyclic flag
 572+ 52BA DD 21 1C 52  	LD IX, GETBYT
 573+ 52BE CD 59 01         CALL CALBAS
 574+ 52C1 F5           	PUSH AF
 575+ 52C2              	; ending )
 576+ 52C2 CD 03 57     	CALL CHKCHAR
 577+ 52C5 29           	DB ')'
 578+ 52C6              .ENTRY:
 579+ 52C6 E5               PUSH HL
 580+ 52C7 DD E1            POP IX
 581+ 52C9 D9               EXX
 582+ 52CA D1               POP DE ; cyclic
 583+ 52CB C1               POP BC ; animation definition id
 584+ 52CC E1               POP HL ; sprite number
 585+ 52CD D9               EXX
 586+ 52CE F1               POP AF ; sprite animation id
 587+ 52CF 26 00            LD H,0
 588+ 52D1 6F               LD L,A
 589+ 52D2 CD F2 55         CALL HLx8
 590+ 52D5 ED 5B D4 4F      LD DE,(ANIMSPRPTR)
 591+ 52D9 19               ADD HL,DE
 592+ 52DA E5               PUSH HL
 593+ 52DB FD E1            POP IY
 594+ 52DD D9               EXX
 595+ 52DE FD 74 00         LD (IY),H
 596+ 52E1 FD 70 04         LD (IY+4),B
 597+ 52E4 FD 72 05         LD (IY+5),D
 598+ 52E7                  ;LD (IY+6),0
 599+ 52E7 DD E5            PUSH IX
 600+ 52E9 E1               POP HL
 601+ 52EA C9               RET
 602+ 52EB              ; *******************************************************************************************************
 603+ 52EB
 604+ 52EB              ; *******************************************************************************************************
 605+ 52EB              ; function to handle CALL ANIMSTART basic extension
 606+ 52EB              ; two forms
 607+ 52EB              ; ANIMSTART ( BYTE id )
 608+ 52EB              ; or
 609+ 52EB              ; ANIMSTART ( BYTE item_number,
 610+ 52EB              ;             INT[] sprite_animations )
 611+ 52EB              ; sets active flag to 1
 612+ 52EB              ANIMSTART:
 613+ 52EB 3E 01            LD A,1
 614+ 52ED 18 01            JR ANIMSTARTSTOP_COMMON
 615+ 52EF              ; *******************************************************************************************************
 616+ 52EF              ; *******************************************************************************************************
 617+ 52EF              ; function to handle CALL ANIMSTOP basic extension
 618+ 52EF              ; two forms
 619+ 52EF              ; ANIMSTOP ( BYTE id )
 620+ 52EF              ; or
 621+ 52EF              ; ANIMSTOP ( BYTE item_number,
 622+ 52EF              ;            INT[] sprite_animations )
 623+ 52EF              ; sets active flag to 1
 624+ 52EF              ANIMSTOP:
 625+ 52EF AF               XOR A
 626+ 52F0              ANIMSTARTSTOP_COMMON:
 627+ 52F0 32 68 53         LD (ANIMSTARTSTOP_COMMON.VALUE+3),A
 628+ 52F3              ; *******************************************************************************************************
 629+ 52F3                  ; opening (
 630+ 52F3 CD 03 57     	CALL CHKCHAR
 631+ 52F6 28           	DB '('
 632+ 52F7              	; get sprite animation id or array size
 633+ 52F7 DD 21 1C 52  	LD IX,GETBYT
 634+ 52FB CD 59 01     	CALL CALBAS
 635+ 52FE F5               PUSH AF
 636+ 52FF                  ; check if comma present
 637+ 52FF CD 0D 57         CALL GETPREVCHAR
 638+ 5302 23               INC HL
 639+ 5303 FE 2C            CP ','
 640+ 5305 28 0C            JR Z,.L1
 641+ 5307 FE 29            CP ')'
 642+ 5309 C2 21 57         JP NZ,SYNTAX_ERROR
 643+ 530C                  ; ok so single argument variant
 644+ 530C F1               POP AF
 645+ 530D E5               PUSH HL
 646+ 530E CD 55 53         CALL .SETVALUE
 647+ 5311 E1               POP HL
 648+ 5312 C9               RET
 649+ 5313              .L1:
 650+ 5313                  ; array of items
 651+ 5313              	; get pointer to a list of animation items in integer array format
 652+ 5313 3E 01            LD A,1
 653+ 5315 32 A5 F6         LD (SUBFLG),A ; search for arrays only
 654+ 5318 DD 21 A4 5E  	LD IX, PTRGET
 655+ 531C CD 59 01     	CALL CALBAS
 656+ 531F                  ; contrary to documentation we get a pointer to array dimension in BC
 657+ 531F                  ; and type in VALTYP
 658+ 531F 3A 63 F6         LD A,(VALTYP)
 659+ 5322 FE 02            CP 2
 660+ 5324 C2 15 57         JP NZ,TYPE_MISMATCH
 661+ 5327 0A               LD A,(BC)
 662+ 5328 FE 01            CP 1
 663+ 532A C2 15 57         JP NZ,TYPE_MISMATCH
 664+ 532D 03               INC BC
 665+ 532E 0A               LD A,(BC)
 666+ 532F D1               POP DE
 667+ 5330 D5               PUSH DE
 668+ 5331 3C               INC A
 669+ 5332 BA               CP D
 670+ 5333 DA 19 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 671+ 5336 03          > INC BC
 671+ 5337 03          > INC BC
 672+ 5338 C5               PUSH BC
 673+ 5339              	; ending )
 674+ 5339 CD 03 57     	CALL CHKCHAR
 675+ 533C 29           	DB ')'
 676+ 533D D1               POP DE ; array pointer
 677+ 533E C1               POP BC ; number of items
 678+ 533F 78               LD A,B
 679+ 5340 B7               OR A
 680+ 5341 CA 19 57         JP Z,SUBSCRIPT_OUT_OF_RANGE
 681+ 5344 E5               PUSH HL
 682+ 5345 F3               DI
 683+ 5346              .L2:
 684+ 5346 C5               PUSH BC
 685+ 5347 1A               LD A,(DE)
 686+ 5348 13          > INC DE
 686+ 5349 13          > INC DE
 687+ 534A D5               PUSH DE
 688+ 534B CD 55 53         CALL .SETVALUE
 689+ 534E D1               POP DE
 690+ 534F C1               POP BC
 691+ 5350 10 F4            DJNZ .L2
 692+ 5352 FB               EI
 693+ 5353 E1               POP HL
 694+ 5354 C9               RET
 695+ 5355
 696+ 5355              .SETVALUE:
 697+ 5355 47               LD B,A
 698+ 5356 3C               INC A
 699+ 5357 4F               LD C,A
 700+ 5358 3A D3 4F         LD A,(ANIMSPRNUM)
 701+ 535B B9               CP C
 702+ 535C DA 19 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 703+ 535F CD F4 4F         CALL GETnthSPRANIM
 704+ 5362 E5               PUSH HL
 705+ 5363 DD E1            POP IX
 706+ 5365              .VALUE:
 707+ 5365 DD 36 06 01      LD (IX+6),1 ; active flag
 708+ 5369                  ; following stuff is needed to start only, but code sharing
 709+ 5369 AF               XOR A
 710+ 536A DD 77 03         LD (IX+3),A ; current item
 711+ 536D CD 17 54         CALL INIT_CURRENT_ANIMATION
 712+ 5370 C9               RET
 713+ 5371              ; *******************************************************************************************************
 714+ 5371
 715+ 5371              ; *******************************************************************************************************
 716+ 5371              ; function processes animations during vblank period
 717+ 5371              PROCESS_ANIMATIONS:
 718+ 5371 3A D3 4F         LD A,(ANIMSPRNUM)
 719+ 5374 B7               OR A
 720+ 5375 C8               RET Z; no animations defined
 721+ 5376 47               LD B,A
 722+ 5377 DD 2A D4 4F      LD IX,(ANIMSPRPTR)
 723+ 537B              .L1:
 724+ 537B C5               PUSH BC
 725+ 537C DD 7E 06         LD A,(IX+6); active
 726+ 537F B7               OR A
 727+ 5380 CA F3 53         JP Z,.SKIP ; inactive animation
 728+ 5383 DD 6E 01         LD L,(IX+1)
 729+ 5386 DD 66 02         LD H,(IX+2) ; HL=end time
 730+ 5389 ED 5B 9E FC      LD DE,(JIFFY)
 731+ 538D AF               XOR A
 732+ 538E ED 52            SBC HL,DE
 733+ 5390 F2 F3 53         JP P,.SKIP ; time until next animation item not yet reached
 734+ 5393 DD 34 03         INC (IX+3) ; current animation item
 735+ 5396 DD 4E 04         LD C,(IX+4) ; animation definition ID
 736+ 5399 0C               INC C
 737+ 539A 3A D0 4F         LD A,(ANIMDEFNUM)
 738+ 539D B9               CP C
 739+ 539E 30 07            JR NC,.L2
 740+ 53A0                  ; given animation item is outside of bounds, deactivate animation
 741+ 53A0              .STOPANIM:
 742+ 53A0 DD 36 06 00      LD (IX+6),0
 743+ 53A4 C3 F3 53         JP .SKIP
 744+ 53A7              .L2:
 745+ 53A7 0D               DEC C
 746+ 53A8 79               LD A,C
 747+ 53A9 CD 17 54         CALL INIT_CURRENT_ANIMATION
 748+ 53AC 38 F2            JR C, .STOPANIM
 749+ 53AE FD 7E 00         LD A,(IY) ; type of animation item
 750+ 53B1 B7               OR A
 751+ 53B2 CA FC 53         JP Z,.L4 ; change pattern and/or color
 752+ 53B5                  ; change sprite pattern definition
 753+ 53B5 DD 7E 00         LD A,(IX) ; sprite number
 754+ 53B8 CD 86 4D         CALL GETnthSPRATTR
 755+ 53BB 23          > INC HL ; skip y and x
 755+ 53BC 23          > INC HL
 755+ 53BD 23          > INC HL
 755+ 53BE 23          > INC HL
 756+ 53BF 7E               LD A,(HL); current pattern
 757+ 53C0 26 00            LD H,0
 758+ 53C2 6F               LD L,A
 759+ 53C3 3A E0 F3         LD A,(REG1SAV)
 760+ 53C6 E6 02            AND 2
 761+ 53C8 20 07            JR NZ,.L6
 762+ 53CA                  ; 8x8 sprite
 763+ 53CA CD F2 55         CALL HLx8
 764+ 53CD 06 08            LD B,8
 765+ 53CF 18 05            JR .L5
 766+ 53D1              .L6:
 767+ 53D1 CD F0 55         CALL HLx32
 768+ 53D4 06 20            LD B,32
 769+ 53D6              .L5:
 770+ 53D6 3A AF FC     	LD A, (SCRMOD)
 771+ 53D9 3D           	DEC A
 772+ 53DA 28 06        	JR Z, .L7 ; screen 1
 773+ 53DC                  ; screen 2
 774+ 53DC ED 5B CF F3      LD DE,(GRPPAT)
 775+ 53E0 18 04            JR .L8
 776+ 53E2              .L7:
 777+ 53E2 ED 5B C5 F3      LD DE,(T32PAT)
 778+ 53E6              .L8:
 779+ 53E6 19               ADD HL,DE
 780+ 53E7 CD DF 55         CALL SETWRT_LOCAL
 781+ 53EA FD 6E 03         LD L,(IY+3)
 782+ 53ED FD 66 04         LD H,(IY+4) ; pointer to sprite patter data
 783+ 53F0 CD EA 55         CALL BBYTECOPY
 784+ 53F3              .SKIP:
 785+ 53F3 11 08 00         LD DE,8
 786+ 53F6 DD 19            ADD IX,DE
 787+ 53F8 C1               POP BC
 788+ 53F9 10 80            DJNZ .L1
 789+ 53FB C9               RET
 790+ 53FC              .L4:
 791+ 53FC                  ; change pattern and color in sprite attributes table
 792+ 53FC DD 7E 00         LD A,(IX) ; sprite number
 793+ 53FF CD 86 4D         CALL GETnthSPRATTR
 794+ 5402 23          > INC HL ; skip y and x
 794+ 5403 23          > INC HL
 794+ 5404 23          > INC HL
 794+ 5405 23          > INC HL
 795+ 5406 FD 7E 03         LD A,(IY+3) ; new pattern
 796+ 5409 77               LD (HL),A
 797+ 540A 23          > INC HL
 797+ 540B 23          > INC HL
 798+ 540C FD 7E 04         LD A,(IY+4) ; new color
 799+ 540F 77               LD (HL),A
 800+ 5410 3E 01            LD A,1
 801+ 5412 32 7E 4D         LD (SPRATR_UPDATE_FLAG),A
 802+ 5415 18 DC            JR .SKIP
 803+ 5417              ; *******************************************************************************************************
 804+ 5417
 805+ 5417              ; *******************************************************************************************************
 806+ 5417              ; function will setup sprite animation after current item change
 807+ 5417              ; input A=current animation
 808+ 5417              ; input IX=pointer to sprite animation
 809+ 5417              ; output IY=pointer to animation item
 810+ 5417              ; CF=1 error or non-cyclic animation ended, in both cases set active flag to 0
 811+ 5417              ; basically sets new end time for current animation
 812+ 5417              INIT_CURRENT_ANIMATION:
 813+ 5417 CD E8 4F         CALL GETnthANIMDEF
 814+ 541A 7E               LD A,(HL); number of animation items in the animation definition
 815+ 541B DD BE 03         CP (IX+3) ; current animation item
 816+ 541E 38 0A            JR C,.L3 ; last item not reached
 817+ 5420                  ; last item reached
 818+ 5420 DD 7E 05         LD A,(IX+5) ; cyclic flag
 819+ 5423 B7               OR A
 820+ 5424 28 2D            JR Z,.ERROR ; non-cyclic animation
 821+ 5426                  ; cyclic animation, restart
 822+ 5426 DD 36 03 00      LD (IX+3),0; current item
 823+ 542A              .L3:
 824+ 542A                  ; HL = animation definition
 825+ 542A 23               INC HL ; skip animation definition size field
 826+ 542B 16 00            LD D,0
 827+ 542D DD 5E 03         LD E,(IX+3); current item
 828+ 5430 19               ADD HL,DE
 829+ 5431 4E               LD C,(HL) ; current animation item
 830+ 5432 0C               INC C
 831+ 5433 3A CD 4F         LD A,(ANIMITEMNUM)
 832+ 5436 B9               CP C
 833+ 5437 38 1A            JR C,.ERROR ; invalid animation item, stop animation
 834+ 5439 0D               DEC C
 835+ 543A 79               LD A,C
 836+ 543B CD DF 4F         CALL GETnthANIMITEM
 837+ 543E E5               PUSH HL
 838+ 543F FD E1            POP IY ; IY=animation item
 839+ 5441 2A 9E FC         LD HL,(JIFFY)
 840+ 5444 FD 5E 01         LD E,(IY+1)
 841+ 5447 FD 56 02         LD D,(IY+2) ; duration
 842+ 544A 19               ADD HL,DE
 843+ 544B DD 75 01         LD (IX+1),L
 844+ 544E DD 74 02         LD (IX+2),H ; end time for current item
 845+ 5451              .EXIT:
 846+ 5451 AF               XOR A
 847+ 5452 C9               RET
 848+ 5453              .ERROR:
 849+ 5453 37               SCF
 850+ 5454 C9               RET
 851+ 5455              ; *******************************************************************************************************
# file closed: asm\ANIMATION.asm
 128  5455               ENDIF
 129  5455
 130  5455              ; temp variables for BLIT, TILE functions
 131  5455               IF (BLIT_CMDS + TILE_CMDS > 0)
 132  5455              BLIT_TMP:
 133  5455              TILETMP1:
 134  5455              BLIT_TMP1:
 135  5455 00 00         DW 0
 136  5457              TILETMP2:
 137  5457              BLIT_TMP2:
 138  5457 00 00         DW 0
 139  5459                IFDEF CMDS_WITH_PARAMETERS
 140  5459              BLIT_STRUCT:
 141  5459 00 00 00...   DS 17
 142  545D                ENDIF
 143  545D               ENDIF
 144  546A
 145  546A               IF (VRAM_CMDS + TILE_CMDS + BOX_CMDS > 0)
 146  546A              VRAM_UPDATE_IN_PROGRESS:
 147  546A 00            DB 0
 148  546B               ENDIF
 149  546B
 150  546B              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 151  546B              ; per starting letter, if no commands with this letter, NULL value
 152  546B              CMDS:
 153  546B               IF (ANIM_CMDS == 1)
 154  546B 94 55        	DW CMDS_A ;
 155  546D               ELSE
 156  546D ~                DW 0 ; A
 157  546D               ENDIF
 158  546D               IF (BLIT_CMDS + BOX_CMDS > 0)
 159  546D 5F 55            DW CMDS_B ; B
 160  546F               ELSE
 161  546F ~            	DW 0
 162  546F               ENDIF
 163  546F 00 00            DW 0 ; C
 164  5471 00 00            DW 0 ; D
 165  5473 00 00            DW 0 ; E
 166  5475               IF (VRAM_CMDS + RAM_CMDS > 0)
 167  5475 DD 54            DW CMDS_F; F
 168  5477               ELSE
 169  5477 ~            	DW 0
 170  5477               ENDIF
 171  5477               IF (GENCAL_CMD > 0)
 172  5477 F0 54            DW CMDS_G; G
 173  5479               ELSE
 174  5479 ~            	DW 0
 175  5479               ENDIF
 176  5479 00 00            DW 0 ; H
 177  547B 00 00            DW 0 ; I
 178  547D 00 00            DW 0 ; J
 179  547F 00 00            DW 0 ; K
 180  5481 00 00            DW 0 ; L
 181  5483               IF (VRAM_CMDS + RAM_CMDS + ANIM_CMDS > 0)
 182  5483 9F 54            DW CMDS_M ; M
 183  5485               ELSE
 184  5485 ~            	DW 0
 185  5485               ENDIF
 186  5485 00 00            DW 0 ; N
 187  5487 00 00            DW 0 ; O
 188  5489 00 00            DW 0 ; P
 189  548B 00 00            DW 0 ; Q
 190  548D 00 00            DW 0 ; R
 191  548F               IF (SOUND_CMDS + SPRITE_CMDS > 0)
 192  548F 04 55            DW CMDS_S ; S
 193  5491               ELSE
 194  5491 ~            	DW 0
 195  5491               ENDIF
 196  5491               IF (TILE_CMDS > 0)
 197  5491 7F 55            DW CMDS_T ; T
 198  5493               ELSE
 199  5493 ~            	DW 0
 200  5493               ENDIF
 201  5493 00 00            DW 0 ; U
 202  5495               IF (VRAM_CMDS > 0)
 203  5495 FA 54            DW CMDS_V ; V
 204  5497               ELSE
 205  5497 ~            	DW 0
 206  5497               ENDIF
 207  5497 00 00            DW 0 ; W
 208  5499 00 00            DW 0 ; X
 209  549B 00 00            DW 0 ; Y
 210  549D 00 00            DW 0 ; Z
 211  549F
 212  549F              CMDS_M:
 213  549F               IF (VRAM_CMDS == 1)
 214  549F 4D 45 4D 56      DB "MEMVRM", 0
 214  54A3 52 4D 00
 215  54A6 74 58            DW MEMVRM
 216  54A8               ENDIF
 217  54A8               IF (RAM_CMDS == 1)
 218  54A8 4D 45 4D 43  	DB "MEMCPY", 0
 218  54AC 50 59 00
 219  54AF 2A 57        	DW MEMCPY
 220  54B1               ENDIF
 221  54B1               IF (ANIM_CMDS == 1)
 222  54B1 4D 41 58 41  	DB "MAXANIMITEMS",0
 222  54B5 4E 49 4D 49
 222  54B9 54 45 4D 53
 222  54BD 00
 223  54BE 00 50        	DW MAXANIMITEMS
 224  54C0 4D 41 58 41  	DB "MAXANIMDEFS",0
 224  54C4 4E 49 4D 44
 224  54C8 45 46 53 00
 225  54CC 75 51        	DW MAXANIMDEFS
 226  54CE 4D 41 58 41  	DB "MAXANIMSPRS",0
 226  54D2 4E 49 4D 53
 226  54D6 50 52 53 00
 227  54DA 25 52        	DW MAXANIMSPRS
 228  54DC               ENDIF
 229  54DC               IF (VRAM_CMDS + RAM_CMDS + ANIM_CMDS > 0)
 230  54DC 00           	DB 0
 231  54DD               ENDIF
 232  54DD              CMDS_F:
 233  54DD               IF (VRAM_CMDS == 1)
 234  54DD 46 49 4C 56      DB "FILVRM", 0
 234  54E1 52 4D 00
 235  54E4 6D 57            DW FILVRM
 236  54E6               ENDIF
 237  54E6               IF (RAM_CMDS == 1)
 238  54E6 46 49 4C 52      DB "FILRAM", 0
 238  54EA 41 4D 00
 239  54ED BD 57            DW FILRAM
 240  54EF               ENDIF
 241  54EF               IF (VRAM_CMDS + RAM_CMDS > 0)
 242  54EF 00               DB 0
 243  54F0               ENDIF
 244  54F0              CMDS_G:
 245  54F0               IF (GENCAL_CMD == 1)
 246  54F0 47 45 4E 43      DB "GENCAL", 0
 246  54F4 41 4C 00
 247  54F7 1B 58            DW GENCAL
 248  54F9               ENDIF
 249  54F9               IF (GENCAL_CMD > 0)
 250  54F9 00           	DB	0
 251  54FA               ENDIF
 252  54FA              CMDS_V:
 253  54FA               IF (VRAM_CMDS == 1)
 254  54FA 56 52 4D 4D  	DB "VRMMEM", 0
 254  54FE 45 4D 00
 255  5501 F5 58        	DW VRMMEM
 256  5503               ENDIF
 257  5503               IF (VRAM_CMDS > 0)
 258  5503 00           	DB 0
 259  5504               ENDIF
 260  5504              CMDS_S:
 261  5504               IF (SPRITE_CMDS == 1)
 262  5504 53 50 52 53  	DB "SPRSET", 0
 262  5508 45 54 00
 263  550B 9B 4E        	DW SPRSET
 264  550D 53 50 52 47  	DB "SPRGRPMOV", 0
 264  5511 52 50 4D 4F
 264  5515 56 00
 265  5517 4C 4F        	DW SPRGRPMOV
 266  5519               ENDIF
 267  5519               IF (SOUND_CMDS == 1)
 268  5519 53 4E 44 53  	DB "SNDSFX", 0
 268  551D 46 58 00
 269  5520 D6 59        	DW SNDSFX
 270  5522 53 4E 44 50  	DB "SNDPLYON", 0
 270  5526 4C 59 4F 4E
 270  552A 00
 271  552B A0 59        	DW SNDPLYON
 272  552D 53 4E 44 50  	DB "SNDPLYOFF", 0
 272  5531 4C 59 4F 46
 272  5535 46 00
 273  5537 B3 59        	DW SNDPLYOFF
 274  5539 53 4E 44 50  	DB "SNDPLYINI", 0
 274  553D 4C 59 49 4E
 274  5541 49 00
 275  5543 56 59        	DW SNDPLYINIT
 276  5545               ENDIF
 277  5545               IF (SPRITE_CMDS == 1)
 278  5545 53 50 52 45  	DB "SPRENABLE", 0
 278  5549 4E 41 42 4C
 278  554D 45 00
 279  554F 46 4E        	DW SPRENABLE
 280  5551 53 50 52 44  	DB "SPRDISABLE", 0
 280  5555 49 53 41 42
 280  5559 4C 45 00
 281  555C 96 4E        	DW SPRDISABLE
 282  555E               ENDIF
 283  555E               IF (SOUND_CMDS + SPRITE_CMDS > 0)
 284  555E 00           	DB 0
 285  555F               ENDIF
 286  555F              CMDS_B:
 287  555F               IF (BLIT_CMDS == 1)
 288  555F 42 4C 49 54  	DB "BLIT", 0
 288  5563 00
 289  5564 AD 5B        	DW BLIT
 290  5566               ENDIF
 291  5566               IF (BOX_CMDS == 1)
 292  5566 42 4F 58 4D  	DB "BOXMEMCPY", 0
 292  556A 45 4D 43 50
 292  556E 59 00
 293  5570 E5 5E        	DW BOXMEMCPY
 294  5572 42 4F 58 4D  	DB "BOXMEMVRM", 0
 294  5576 45 4D 56 52
 294  557A 4D 00
 295  557C 19 5F        	DW BOXMEMVRM
 296  557E               ENDIF
 297  557E               IF (BLIT_CMDS + BOX_CMDS > 0)
 298  557E 00           	DB 0
 299  557F               ENDIF
 300  557F              CMDS_T:
 301  557F               IF (TILE_CMDS == 1)
 302  557F 54 49 4C 45  	DB "TILERAM", 0
 302  5583 52 41 4D 00
 303  5587 F1 5C        	DW TILERAM
 304  5589 54 49 4C 45  	DB "TILEVRM", 0
 304  558D 56 52 4D 00
 305  5591 F4 5D        	DW TILEVRM
 306  5593               ENDIF
 307  5593               IF (TILE_CMDS > 0)
 308  5593 00           	DB 0
 309  5594               ENDIF
 310  5594              CMDS_A:
 311  5594               IF (ANIM_CMDS == 1)
 312  5594 41 4E 49 4D  	DB "ANIMSTART",0
 312  5598 53 54 41 52
 312  559C 54 00
 313  559E EB 52        	DW ANIMSTART
 314  55A0 41 4E 49 4D  	DB "ANIMSTOP",0
 314  55A4 53 54 4F 50
 314  55A8 00
 315  55A9 EF 52        	DW ANIMSTOP
 316  55AB 41 4E 49 4D  	DB "ANIMITEMPAT",0
 316  55AF 49 54 45 4D
 316  55B3 50 41 54 00
 317  55B7 C0 50        	DW ANIMITEMPAT
 318  55B9 41 4E 49 4D  	DB "ANIMITEMPTR",0
 318  55BD 49 54 45 4D
 318  55C1 50 54 52 00
 319  55C5 21 51        	DW ANIMITEMPTR_CMD
 320  55C7 41 4E 49 4D  	DB "ANIMDEF",0
 320  55CB 44 45 46 00
 321  55CF B7 51        	DW ANIMDEF
 322  55D1 41 4E 49 4D  	DB "ANIMSPRITE",0
 322  55D5 53 50 52 49
 322  55D9 54 45 00
 323  55DC 7B 52        	DW ANIMSPRITE
 324  55DE 00           	DB 0
 325  55DF               ENDIF
 326  55DF
 327  55DF               IF (VRAM_CMDS + TILE_CMDS + SPRITE_CMDS > 0)
 328  55DF              ; ****************************************************************************************************
 329  55DF              ; function sets VRAM address
 330  55DF              ; input HL=address
 331  55DF              ; modifies AF
 332  55DF              SETWRT_LOCAL:
 333  55DF 7D           	LD	A, L
 334  55E0 D3 99        	OUT	(099H), A
 335  55E2 7C           	LD	A, H
 336  55E3 E6 3F        	AND	03FH
 337  55E5 F6 40        	OR	040H
 338  55E7 D3 99        	OUT	(099H), A
 339  55E9 C9           	RET
 340  55EA              ; ****************************************************************************************************
 341  55EA               ENDIF
 342  55EA
 343  55EA               IF (VRAM_CMDS + TILE_CMDS > 0)
 344  55EA              ; ****************************************************************************************************
 345  55EA              ; function copies data from RAM to VRAM
 346  55EA              ; input HL=address in RAM
 347  55EA              ; input B=count
 348  55EA              ; modifies AF
 349  55EA              BBYTECOPY:
 350  55EA ED A3        	OUTI
 351  55EC C2 EA 55     	JP	NZ, BBYTECOPY
 352  55EF C9           	RET
 353  55F0              ; ****************************************************************************************************
 354  55F0               ENDIF
 355  55F0
 356  55F0              ; ****************************************************************************************************
 357  55F0              ; function multiplies HL by 32
 358  55F0              HLx32:
 359  55F0 29           	ADD HL,HL
 360  55F1              ; ****************************************************************************************************
 361  55F1              ; function multiplies HL by 16
 362  55F1              HLx16:
 363  55F1 29           	ADD HL,HL
 364  55F2              ; ****************************************************************************************************
 365  55F2              ; function multiplies HL by 8
 366  55F2              HLx8:
 367  55F2 29          > ADD HL, HL
 367  55F3 29          > ADD HL, HL
 367  55F4 29          > ADD HL, HL
 368  55F5 C9           	RET
 369  55F6              ; ****************************************************************************************************
 370  55F6
 371  55F6              ; ****************************************************************************************************
 372  55F6              ; function gets slot and subslot data for specific page
 373  55F6              ; input A=page (0, 1 or 2)
 374  55F6              ; output B = 0A8H register value
 375  55F6              ; output D = 0 is no subslots, 1 if yes
 376  55F6              ; output C = 0A8H value when page 3 slot equals to requested page slot
 377  55F6              ; output E = subslot value if present
 378  55F6              ; modifies AF, BC, DE, HL
 379  55F6              GET_PAGE_INFO:
 380  55F6 6F               LD L, A
 381  55F7 C6 C1            ADD A, low (EXPTBL)
 382  55F9 32 03 56         LD (GET_PAGE_INFO_L1+1), A
 383  55FC DB A8            IN A, (0A8H)
 384  55FE 47               LD B, A
 385  55FF E6 3F            AND 03FH
 386  5601 4F               LD C, A
 387  5602              GET_PAGE_INFO_L1:
 388  5602 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 389  5605 E6 80            AND 080H
 390  5607 28 1B            JR Z, GET_PAGE_INFO_L2
 391  5609                  ; expanded
 392  5609 2D               DEC L
 393  560A FA 29 56         JP M, GET_PAGE_INFO_L3
 394  560D 2D               DEC L
 395  560E FA 27 56         JP M, GET_PAGE_INFO_L4
 396  5611                  ; page 2
 397  5611 07               RLCA
 398  5612 07               RLCA
 399  5613              GET_PAGE_INFO_L5:
 400  5613 E6 C0            AND 0C0H
 401  5615 B1               OR C
 402  5616 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 403  5618 4F               LD C, A
 404  5619 3A FF FF         LD A, (0FFFFH)
 405  561C 2F               CPL
 406  561D 5F               LD E, A
 407  561E 16 01            LD D, 1
 408  5620 78               LD A, B ; return stack
 409  5621 D3 A8            OUT (0A8H), A
 410  5623 C9               RET
 411  5624              GET_PAGE_INFO_L2:
 412  5624                  ; not expanded
 413  5624 16 00            LD D, 0
 414  5626 C9               RET
 415  5627              GET_PAGE_INFO_L4:
 416  5627                  ; page 1
 417  5627 0F               RRCA
 418  5628 0F               RRCA
 419  5629              GET_PAGE_INFO_L3:
 420  5629                  ; page 0
 421  5629 0F               RRCA
 422  562A 0F               RRCA
 423  562B 18 E6            JR GET_PAGE_INFO_L5
 424  562D              ; ****************************************************************************************************
 425  562D
 426  562D              ; ****************************************************************************************************
 427  562D              ; function returns original slot and subslot info
 428  562D              ; input B = 0A8H register value
 429  562D              ; input D = 0 is no subslots, 1 if yes
 430  562D              ; input C = 0A8H value when page 3 slot equals to requested page slot
 431  562D              ; input E = subslot value if present
 432  562D              ; modifies AF, disables interrupts
 433  562D              RESTORE_PAGE_INFO:
 434  562D 7A               LD A, D
 435  562E B7               OR A
 436  562F 28 08            JR Z, RESTORE_PAGE_INFO_L1
 437  5631 79               LD A, C
 438  5632 F3           	DI
 439  5633 D3 A8            OUT (0A8H), A
 440  5635 7B               LD A, E
 441  5636 32 FF FF         LD (0FFFFH), A
 442  5639              RESTORE_PAGE_INFO_L1:
 443  5639 78               LD A, B
 444  563A D3 A8            OUT (0A8H), A
 445  563C C9               RET
 446  563D              ; ****************************************************************************************************
 447  563D
 448  563D              ; *******************************************************************************************************
 449  563D              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 450  563D              ; INPUT:  A = SLOT ID: EXXXSSPP
 451  563D              ; E = EXPANDED FLAG
 452  563D              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 453  563D              ; PP = PRIMARY SLOT NUMBER
 454  563D              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 455  563D              ; CHANGES: AF, BC, DE
 456  563D
 457  563D              LOCAL_ENASLT:
 458  563D CD 5D 56         CALL L0353
 459  5640 FA 4A 56         JP M, L0340
 460  5643 DB A8            IN A, (0A8H)
 461  5645 A1               AND C
 462  5646 B0               OR B
 463  5647 D3 A8            OUT (0A8H), A
 464  5649 C9               RET
 465  564A              L0340:
 466  564A E5               PUSH HL
 467  564B CD 82 56         CALL L0378
 468  564E 4F               LD C, A
 469  564F 06 00            LD B, 0
 470  5651 7D               LD A, L
 471  5652 A4               AND H
 472  5653 B2               OR D
 473  5654 21 C5 FC         LD HL, 0FCC5H
 474  5657 09               ADD HL, BC
 475  5658 77               LD (HL), A
 476  5659 E1               POP HL
 477  565A 79               LD A, C
 478  565B 18 E0            JR LOCAL_ENASLT
 479  565D              L0353:
 480  565D F3               DI
 481  565E F5               PUSH AF
 482  565F 7C               LD A, H
 483  5660 07               RLCA
 484  5661 07               RLCA
 485  5662 E6 03            AND 3
 486  5664 5F               LD E, A
 487  5665 3E C0            LD A, 0C0H
 488  5667              L035D:
 489  5667 07               RLCA
 490  5668 07               RLCA
 491  5669 1D               DEC E
 492  566A F2 67 56         JP P, L035D
 493  566D 5F               LD E, A
 494  566E 2F               CPL
 495  566F 4F               LD C, A
 496  5670 F1               POP AF
 497  5671 F5               PUSH AF
 498  5672 E6 03            AND 3
 499  5674 3C               INC A
 500  5675 47               LD B, A
 501  5676 3E AB            LD A, 0ABH
 502  5678              L036E:
 503  5678 C6 55            ADD A, 055H
 504  567A 10 FC            DJNZ L036E
 505  567C 57               LD D, A
 506  567D A3               AND E
 507  567E 47               LD B, A
 508  567F F1               POP AF
 509  5680 A7               AND A
 510  5681 C9               RET
 511  5682              L0378:
 512  5682 F5               PUSH AF
 513  5683 7A               LD A, D
 514  5684 E6 C0            AND 0C0H
 515  5686 4F               LD C, A
 516  5687 F1               POP AF
 517  5688 F5               PUSH AF
 518  5689 57               LD D, A
 519  568A DB A8            IN A, (0A8H)
 520  568C 47               LD B, A
 521  568D E6 3F            AND 03FH
 522  568F B1               OR C
 523  5690 D3 A8            OUT (0A8H), A
 524  5692 7A               LD A, D
 525  5693 0F               RRCA
 526  5694 0F               RRCA
 527  5695 E6 03            AND 3
 528  5697 57               LD D, A
 529  5698 3E AB            LD A, 0ABH
 530  569A              L0390:
 531  569A C6 55            ADD A, 055H
 532  569C 15               DEC D
 533  569D F2 9A 56         JP P, L0390
 534  56A0 A3               AND E
 535  56A1 57               LD D, A
 536  56A2 7B               LD A, E
 537  56A3 2F               CPL
 538  56A4 67               LD H, A
 539  56A5 3A FF FF         LD A, (0FFFFH)
 540  56A8 2F               CPL
 541  56A9 6F               LD L, A
 542  56AA A4               AND H
 543  56AB B2               OR D
 544  56AC 32 FF FF         LD (0FFFFH), A
 545  56AF 78               LD A, B
 546  56B0 D3 A8            OUT (0A8H), A
 547  56B2 F1               POP AF
 548  56B3 E6 03            AND 3
 549  56B5 C9               RET
 550  56B6              ; *******************************************************************************************************
 551  56B6
 552  56B6              ; *******************************************************************************************************
 553  56B6              ; some common code to activate page 0 and place values needed to restore original page on stack
 554  56B6              ; input IY=return address
 555  56B6              ENABLE_PAGE0:
 556  56B6 AF               XOR A
 557  56B7 CD F6 55         CALL GET_PAGE_INFO
 558  56BA C5               PUSH BC
 559  56BB D5               PUSH DE
 560  56BC 3A 41 F3         LD A, (RAMAD0)
 561  56BF 26 00            LD H, 0
 562  56C1 CD 3D 56         CALL LOCAL_ENASLT
 563  56C4 FD E9        	JP (IY)
 564  56C6              ; *******************************************************************************************************
 565  56C6
 566  56C6              ; General BASIC CALL-instruction handler
 567  56C6              CALLHAND:
 568  56C6 E5           	PUSH HL
 569  56C7 21 6B 54     	LD	HL, CMDS ; pointer table based on starting letter
 570  56CA 3A 89 FD         LD A, (PROCNM)
 571  56CD D6 41            SUB 'A'
 572  56CF 87               ADD A, A
 573  56D0 16 00            LD D, 0
 574  56D2 5F               LD E, A
 575  56D3 19               ADD HL, DE
 576  56D4 5E               LD E, (HL)
 577  56D5 23               INC HL
 578  56D6 56               LD D, (HL)
 579  56D7 7A               LD A, D
 580  56D8 B3               OR E
 581  56D9 28 23            JR Z, .CMDNOTRECOGNIZED
 582  56DB EB               EX DE, HL
 583  56DC              .CHKCMD:
 584  56DC 11 89 FD     	LD	DE, PROCNM
 585  56DF 1A           .LOOP:	LD	A,(DE)
 586  56E0 BE           	CP	(HL)
 587  56E1 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 588  56E3 13           	INC	DE
 589  56E4 23           	INC	HL
 590  56E5 A7           	AND	A
 591  56E6 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 592  56E8 5E           	LD	E,(HL)
 593  56E9 23           	INC	HL
 594  56EA 56           	LD	D,(HL)
 595  56EB E1           	POP	HL		; routine address
 596  56EC CD 0D 57     	CALL	GETPREVCHAR
 597  56EF CD 01 57     	CALL	.CALLDE		; Call routine
 598  56F2 A7           	AND	A
 599  56F3 C9           	RET
 600  56F4
 601  56F4              .TONEXTCMD:
 602  56F4 0E FF        	LD	C,0FFH
 603  56F6 AF           	XOR	A
 604  56F7 ED B1        	CPIR			; Skip to end of instruction name
 605  56F9 23           	INC	HL
 606  56FA 23           	INC	HL		; Skip address
 607  56FB BE           	CP	(HL)
 608  56FC 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 609  56FE              .CMDNOTRECOGNIZED:
 610  56FE E1           	POP	HL
 611  56FF 37               SCF
 612  5700 C9           	RET
 613  5701
 614  5701              .CALLDE:
 615  5701 D5           	PUSH	DE
 616  5702 C9           	RET
 617  5703
 618  5703              ;---------------------------
 619  5703
 620  5703              ;GETSTRPNT:
 621  5703              ; OUT:
 622  5703              ; HL = String Address
 623  5703              ; B  = Lenght
 624  5703              ;        LD      HL,(USR)
 625  5703              ;        LD      B,(HL)
 626  5703              ;        INC     HL
 627  5703              ;        LD      E,(HL)
 628  5703              ;        INC     HL
 629  5703              ;        LD      D,(HL)
 630  5703              ;        EX      DE,HL
 631  5703              ;        RET
 632  5703
 633  5703              ;EVALTXTPARAM:
 634  5703              ;	CALL	CHKCHAR
 635  5703              ;	DEFB	"("             ; Check for (
 636  5703              ;	LD	IX,FRMEVL
 637  5703              ;	CALL	CALBAS		; Evaluate expression
 638  5703              ;       LD      A,(VALTYP)
 639  5703              ;        CP      3               ; Text type?
 640  5703              ;        JP      NZ,TYPE_MISMATCH
 641  5703              ;        PUSH	HL
 642  5703              ;        LD	IX,FRESTR         ; Free the temporary string
 643  5703              ;        CALL	CALBAS
 644  5703              ;        POP	HL
 645  5703              ;	CALL	CHKCHAR
 646  5703              ;	DEFB	")"             ; Check for )
 647  5703              ;        RET
 648  5703
 649  5703
 650  5703              CHKCHAR:
 651  5703 CD 0D 57     	CALL	GETPREVCHAR	; Get previous basic char
 652  5706 E3           	EX	(SP),HL
 653  5707 BE           	CP	(HL) 	        ; Check if good char
 654  5708 20 17        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 655  570A 23           	INC	HL
 656  570B E3           	EX	(SP),HL
 657  570C 23           	INC	HL		; Get next basic char
 658  570D
 659  570D              GETPREVCHAR:
 660  570D 2B           	DEC	HL
 661  570E DD 21 66 46  	LD	IX,CHRGTR
 662  5712 C3 59 01     	JP      CALBAS
 663  5715
 664  5715
 665  5715              TYPE_MISMATCH:
 666  5715 1E 0D            LD E, 13 ; Type mismatch
 667  5717 18 0A            JR THROW_ERROR
 668  5719              SUBSCRIPT_OUT_OF_RANGE:
 669  5719 1E 09            LD E,9 ; subscript out of range
 670  571B 18 06        	JR THROW_ERROR
 671  571D              OVERFLOW:
 672  571D 1E 06        	LD E,6
 673  571F 18 02        	JR THROW_ERROR
 674  5721              SYNTAX_ERROR:
 675  5721 1E 02            LD E, 2 ; Syntax error
 676  5723              THROW_ERROR:
 677  5723 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 678  5727 C3 59 01     	JP	CALBAS
 679  572A
 680  572A              ;---------------------------
 681  572A
 682  572A               IF (RAM_CMDS == 1)
 683  572A              ; *******************************************************************************************************
 684  572A              ; function to handle CALL MEMCPY basic extension
 685  572A              ; _MEMCPY ( INT source,
 686  572A              ;			INT destination,
 687  572A              ;			INT count,
 688  572A              ; will put ram in page 0 also, page 1 is already there
 689  572A              MEMCPY:
 690  572A              	; opening (
 691  572A CD 03 57     	CALL CHKCHAR
 692  572D 28           	DB '('
 693  572E              	; get source address
 694  572E DD 21 2F 54  	LD IX, FRMQNT
 695  5732 CD 59 01     	CALL CALBAS
 696  5735 D5           	PUSH DE
 697  5736              	; comma
 698  5736 CD 03 57     	CALL CHKCHAR
 699  5739 2C           	DB ','
 700  573A              	; get destination address
 701  573A DD 21 2F 54  	LD IX, FRMQNT
 702  573E CD 59 01     	CALL CALBAS
 703  5741 D5           	PUSH DE
 704  5742              	; comma
 705  5742 CD 03 57     	CALL CHKCHAR
 706  5745 2C           	DB ','
 707  5746              	; get length
 708  5746 DD 21 2F 54  	LD IX, FRMQNT
 709  574A CD 59 01     	CALL CALBAS
 710  574D D5           	PUSH DE
 711  574E              	; ending )
 712  574E CD 03 57     	CALL CHKCHAR
 713  5751 29           	DB ')'
 714  5752
 715  5752              	; save position
 716  5752 E5           	PUSH HL
 717  5753 DD E1        	POP IX
 718  5755
 719  5755 C1           	POP BC ; count
 720  5756 D1           	POP DE ; destination
 721  5757 E1           	POP HL ; source
 722  5758 D9           	EXX
 723  5759              	; enable page 0
 724  5759 FD 21 60 57  	LD IY, .RET
 725  575D C3 B6 56     	JP ENABLE_PAGE0
 726  5760              .RET:
 727  5760 FB           	EI
 728  5761 D9           	EXX
 729  5762 ED B0        	LDIR
 730  5764 D1               POP DE
 731  5765 C1               POP BC
 732  5766 CD 2D 56         CALL RESTORE_PAGE_INFO
 733  5769 DD E5        	PUSH IX
 734  576B E1           	POP HL
 735  576C C9           	RET
 736  576D              ; *******************************************************************************************************
 737  576D               ENDIF
 738  576D
 739  576D               IF (VRAM_CMDS == 1)
 740  576D              ; *******************************************************************************************************
 741  576D              ; function to handle CALL FILVRM basic extension
 742  576D              ; FILVRM ( INT offset,
 743  576D              ;		   INT count,
 744  576D              ;		   BYTE value,
 745  576D              ;		   BYTE wait_vsync) >0 = true
 746  576D              ; wait_vsync will issue HALT before copying
 747  576D              FILVRM:
 748  576D              	; opening (
 749  576D CD 03 57     	CALL CHKCHAR
 750  5770 28           	DB '('
 751  5771              	; get offset address
 752  5771 DD 21 2F 54  	LD IX, FRMQNT
 753  5775 CD 59 01     	CALL CALBAS
 754  5778 D5           	PUSH DE
 755  5779              	; comma
 756  5779 CD 03 57     	CALL CHKCHAR
 757  577C 2C           	DB ','
 758  577D              	; get count
 759  577D DD 21 2F 54  	LD IX, FRMQNT
 760  5781 CD 59 01     	CALL CALBAS
 761  5784 D5           	PUSH DE
 762  5785              	; comma
 763  5785 CD 03 57     	CALL CHKCHAR
 764  5788 2C           	DB ','
 765  5789              	; get value
 766  5789 DD 21 1C 52  	LD IX, GETBYT
 767  578D CD 59 01     	CALL CALBAS
 768  5790 F5           	PUSH AF
 769  5791              	; comma
 770  5791 CD 03 57     	CALL CHKCHAR
 771  5794 2C           	DB ','
 772  5795              	; get vsync wait
 773  5795 DD 21 1C 52  	LD IX, GETBYT
 774  5799 CD 59 01     	CALL CALBAS
 775  579C F5           	PUSH AF
 776  579D              	; ending )
 777  579D CD 03 57     	CALL CHKCHAR
 778  57A0 29           	DB ')'
 779  57A1
 780  57A1 FB               EI
 781  57A2              	; save position
 782  57A2 E5           	PUSH HL
 783  57A3 DD E1        	POP IX
 784  57A5
 785  57A5              	; syntax ok
 786  57A5              	; wait for vsync if needed
 787  57A5 F1           	POP AF
 788  57A6 B7           	OR A
 789  57A7 28 01        	JR Z, .L1
 790  57A9 76           	HALT
 791  57AA
 792  57AA              .L1:
 793  57AA F1               POP AF ; value
 794  57AB C1               POP BC ; count
 795  57AC E1               POP HL ; offset
 796  57AD 3E 01        	LD A,1
 797  57AF 32 6A 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
 798  57B2 CD 56 00         CALL BIOS_FILVRM
 799  57B5 AF           	XOR A
 800  57B6 32 6A 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
 801  57B9
 802  57B9              .L3:
 803  57B9 DD E5        	PUSH IX
 804  57BB E1           	POP HL
 805  57BC C9           	RET
 806  57BD              ; *******************************************************************************************************
 807  57BD               ENDIF
 808  57BD
 809  57BD               IF (RAM_CMDS == 1)
 810  57BD              ; *******************************************************************************************************
 811  57BD              ; function to handle CALL FILRAM basic extension
 812  57BD              ; FILRAM ( INT start address,
 813  57BD              ;		   INT count,
 814  57BD              ;		   BYTE value,
 815  57BD              ; will put ram in page 0 also, page 1 is already there
 816  57BD              FILRAM:
 817  57BD              	; opening (
 818  57BD CD 03 57     	CALL CHKCHAR
 819  57C0 28           	DB '('
 820  57C1              	; get start address
 821  57C1 DD 21 2F 54  	LD IX, FRMQNT
 822  57C5 CD 59 01     	CALL CALBAS
 823  57C8 D5           	PUSH DE
 824  57C9              	; comma
 825  57C9 CD 03 57     	CALL CHKCHAR
 826  57CC 2C           	DB ','
 827  57CD              	; get count
 828  57CD DD 21 2F 54  	LD IX, FRMQNT
 829  57D1 CD 59 01     	CALL CALBAS
 830  57D4 D5           	PUSH DE
 831  57D5              	; comma
 832  57D5 CD 03 57     	CALL CHKCHAR
 833  57D8 2C           	DB ','
 834  57D9              	; get value
 835  57D9 DD 21 1C 52  	LD IX, GETBYT
 836  57DD CD 59 01     	CALL CALBAS
 837  57E0 F5           	PUSH AF
 838  57E1              	; ending )
 839  57E1 CD 03 57     	CALL CHKCHAR
 840  57E4 29           	DB ')'
 841  57E5
 842  57E5              	; save position
 843  57E5 E5           	PUSH HL
 844  57E6 DD E1        	POP IX
 845  57E8
 846  57E8 D1           	POP DE ; actually AF
 847  57E9 C1           	POP BC ; count
 848  57EA E1           	POP HL ; start address
 849  57EB 78           	LD A, B
 850  57EC B7           	OR A
 851  57ED 20 0A        	JR NZ, .L1 ; >=256 bytes to fill
 852  57EF B1           	OR C
 853  57F0 28 19        	JR Z, .EXIT ; 0 bytes to fill, skip
 854  57F2 79           	LD A, C
 855  57F3 3D           	DEC A
 856  57F4 20 03        	JR NZ, .L1 ; ; >1 byte to fill
 857  57F6              	; one byte to fill
 858  57F6 72           	LD (HL), D
 859  57F7 18 12        	JR .EXIT
 860  57F9              .L1:
 861  57F9 D9           	EXX
 862  57FA              	; enable page 0
 863  57FA FD 21 01 58  	LD IY, .RET
 864  57FE C3 B6 56     	JP ENABLE_PAGE0
 865  5801              .RET:
 866  5801 FB           	EI
 867  5802 D9           	EXX
 868  5803 CD 0F 58     	CALL .FILLVALUE
 869  5806 D1               POP DE
 870  5807 C1               POP BC
 871  5808 CD 2D 56         CALL RESTORE_PAGE_INFO
 872  580B              .EXIT:
 873  580B DD E5        	PUSH IX
 874  580D E1           	POP HL
 875  580E C9           	RET
 876  580F
 877  580F              .FILLVALUE:
 878  580F 72               LD (HL), D
 879  5810 54               LD D, H
 880  5811 5D               LD E, L
 881  5812 13               INC DE
 882  5813 0B               DEC BC
 883  5814 ED B0            LDIR
 884  5816 C9               RET
 885  5817              ; *******************************************************************************************************
 886  5817               ENDIF
 887  5817
 888  5817               IF (GENCAL_CMD == 1)
 889  5817              ; *******************************************************************************************************
 890  5817              ; function to handle CALL GENCAL basic extension
 891  5817              ; GENCAL ( INT fn_addr, = address of the function to call
 892  5817              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 893  5817              ; output values of reristers will also be stored at reg_list_ptr
 894  5817              GENCAL_VAR_SP:
 895  5817 00 00            DW 0
 896  5819              GENCAL_VAR_SP2:
 897  5819 00 00            DW 0
 898  581B              GENCAL:
 899  581B              	; opening (
 900  581B CD 03 57     	CALL CHKCHAR
 901  581E 28           	DB '('
 902  581F              	; get function address
 903  581F DD 21 2F 54  	LD IX, FRMQNT
 904  5823 CD 59 01     	CALL CALBAS
 905  5826 D5           	PUSH DE
 906  5827              	; comma
 907  5827 CD 03 57     	CALL CHKCHAR
 908  582A 2C           	DB ','
 909  582B              	; get pointer to register list
 910  582B DD 21 2F 54  	LD IX, FRMQNT
 911  582F CD 59 01     	CALL CALBAS
 912  5832 D5           	PUSH DE
 913  5833              	; ending )
 914  5833 CD 03 57     	CALL CHKCHAR
 915  5836 29           	DB ')'
 916  5837
 917  5837              	; save BASIC token position
 918  5837 E5           	PUSH HL
 919  5838 D9               EXX
 920  5839 E1           	POP HL ; HL'=next basic token
 921  583A D9               EXX
 922  583B
 923  583B E1               POP HL ; get pointer to register values
 924  583C F3           	DI
 925  583D ED 73 17 58      LD (GENCAL_VAR_SP), SP
 926  5841 F9               LD SP, HL
 927  5842 F1               POP AF
 928  5843 C1               POP BC
 929  5844 D1               POP DE
 930  5845 E1               POP HL
 931  5846 DD E1            POP IX
 932  5848 FD E1            POP IY
 933  584A D9               EXX
 934  584B ED 73 19 58      LD (GENCAL_VAR_SP2), SP
 935  584F ED 7B 17 58      LD SP, (GENCAL_VAR_SP)
 936  5853 FB               EI
 937  5854 D1               POP DE ; get function to call
 938  5855 E5               PUSH HL
 939  5856 CD 71 58         CALL .EXXDECALL
 940  5859 F3               DI
 941  585A ED 73 17 58      LD (GENCAL_VAR_SP), SP
 942  585E ED 7B 19 58      LD SP, (GENCAL_VAR_SP2)
 943  5862 FD E5            PUSH IY
 944  5864 DD E5            PUSH IX
 945  5866 E5               PUSH HL
 946  5867 D5               PUSH DE
 947  5868 C5               PUSH BC
 948  5869 F5               PUSH AF
 949  586A ED 7B 17 58      LD SP, (GENCAL_VAR_SP)
 950  586E FB               EI
 951  586F E1               POP HL
 952  5870 C9           	RET
 953  5871
 954  5871              .EXXDECALL:
 955  5871 D5               PUSH DE
 956  5872 D9               EXX
 957  5873 C9               RET
 958  5874              ; *******************************************************************************************************
 959  5874               ENDIF
 960  5874
 961  5874               IF (VRAM_CMDS == 1)
 962  5874              ; *******************************************************************************************************
 963  5874              ; function to handle CALL MEMVRM basic extension
 964  5874              ; copies from RAM to VRAM
 965  5874              ; _MEMVRM ( INT source,
 966  5874              ;			INT destination,
 967  5874              ;			INT count,
 968  5874              ;			BYTE wait_vsync) >0 = true
 969  5874              ; will put ram in page 0 also, page 1 is already there
 970  5874              ; wait_vsync will issue HALT before copying
 971  5874              MEMVRM:
 972  5874              	; opening (
 973  5874 CD 03 57     	CALL CHKCHAR
 974  5877 28           	DB '('
 975  5878              	; get source address
 976  5878 DD 21 2F 54  	LD IX, FRMQNT
 977  587C CD 59 01     	CALL CALBAS
 978  587F D5           	PUSH DE
 979  5880              	; comma
 980  5880 CD 03 57     	CALL CHKCHAR
 981  5883 2C           	DB ','
 982  5884              	; get destination address
 983  5884 DD 21 2F 54  	LD IX, FRMQNT
 984  5888 CD 59 01     	CALL CALBAS
 985  588B D5           	PUSH DE
 986  588C              	; comma
 987  588C CD 03 57     	CALL CHKCHAR
 988  588F 2C           	DB ','
 989  5890              	; get length
 990  5890 DD 21 2F 54  	LD IX, FRMQNT
 991  5894 CD 59 01     	CALL CALBAS
 992  5897 D5           	PUSH DE
 993  5898              	; comma
 994  5898 CD 03 57     	CALL CHKCHAR
 995  589B 2C           	DB ','
 996  589C              	; get vsync wait
 997  589C DD 21 1C 52  	LD IX, GETBYT
 998  58A0 CD 59 01     	CALL CALBAS
 999  58A3 F5           	PUSH AF
1000  58A4              	; ending )
1001  58A4 CD 03 57     	CALL CHKCHAR
1002  58A7 29           	DB ')'
1003  58A8
1004  58A8                  ; save position in BASIC text
1005  58A8 E5           	PUSH HL
1006  58A9 DD E1        	POP IX
1007  58AB
1008  58AB F1           	POP AF ; wait vsync
1009  58AC B7           	OR A
1010  58AD 28 03        	JR Z, .L1
1011  58AF FB               EI
1012  58B0 76           	HALT
1013  58B1 F3           	DI
1014  58B2              .L1:
1015  58B2              	; pop LDIR parameters and store away for later
1016  58B2 C1           	POP BC ; count
1017  58B3 D1           	POP DE ; vram destination
1018  58B4 E1           	POP HL ; ram source
1019  58B5 D9           	EXX
1020  58B6 FD 21 BD 58   	LD IY, .RET
1021  58BA C3 B6 56     	JP ENABLE_PAGE0
1022  58BD              .RET:
1023  58BD FB           	EI
1024  58BE D9           	EXX
1025  58BF 3E 01        	LD A,1
1026  58C1 32 6A 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
1027  58C4 CD D4 58     	CALL .LDIRVM
1028  58C7 AF           	XOR A
1029  58C8 32 6A 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
1030  58CB D1               POP DE
1031  58CC C1               POP BC
1032  58CD CD 2D 56         CALL RESTORE_PAGE_INFO
1033  58D0 DD E5        	PUSH IX
1034  58D2 E1           	POP HL
1035  58D3 C9           	RET
1036  58D4
1037  58D4              .LDIRVM:
1038  58D4 EB           	EX DE, HL
1039  58D5 F3           	DI
1040  58D6 CD DF 55     	CALL SETWRT_LOCAL
1041  58D9 FB           	EI
1042  58DA EB           	EX DE, HL
1043  58DB 78           	LD A, B
1044  58DC B7           	OR A
1045  58DD 28 0D        	JR Z, .L3
1046  58DF C5           	PUSH BC
1047  58E0 0E 98        	LD C, #98
1048  58E2              .L2:
1049  58E2 50           	LD D, B
1050  58E3 06 00        	LD B, 0
1051  58E5 CD EA 55     	CALL BBYTECOPY
1052  58E8 42           	LD B, D
1053  58E9 10 F7        	DJNZ .L2
1054  58EB C1           	POP BC
1055  58EC              .L3:
1056  58EC 79           	LD A, C
1057  58ED B7           	OR A
1058  58EE C8           	RET Z
1059  58EF 41           	LD B, C
1060  58F0 0E 98        	LD C, #98
1061  58F2 C3 EA 55     	JP BBYTECOPY
1062  58F5              ; *******************************************************************************************************
1063  58F5               ENDIF
1064  58F5
1065  58F5               IF (VRAM_CMDS == 1)
1066  58F5              ; *******************************************************************************************************
1067  58F5              ; function to handle CALL VRMMEM basic extension
1068  58F5              ; copies from RAM to VRAM
1069  58F5              ; _VRMMEM ( INT source,
1070  58F5              ;			INT destination,
1071  58F5              ;			INT count
1072  58F5              ; will put ram in page 0 also, page 1 is already there
1073  58F5              VRMMEM:
1074  58F5              	; opening (
1075  58F5 CD 03 57     	CALL CHKCHAR
1076  58F8 28           	DB '('
1077  58F9              	; get source address
1078  58F9 DD 21 2F 54  	LD IX, FRMQNT
1079  58FD CD 59 01     	CALL CALBAS
1080  5900 D5           	PUSH DE
1081  5901              	; comma
1082  5901 CD 03 57     	CALL CHKCHAR
1083  5904 2C           	DB ','
1084  5905              	; get destination address
1085  5905 DD 21 2F 54  	LD IX, FRMQNT
1086  5909 CD 59 01     	CALL CALBAS
1087  590C D5           	PUSH DE
1088  590D              	; comma
1089  590D CD 03 57     	CALL CHKCHAR
1090  5910 2C           	DB ','
1091  5911              	; get length
1092  5911 DD 21 2F 54  	LD IX, FRMQNT
1093  5915 CD 59 01     	CALL CALBAS
1094  5918 D5           	PUSH DE
1095  5919              	; ending )
1096  5919 CD 03 57     	CALL CHKCHAR
1097  591C 29           	DB ')'
1098  591D
1099  591D                  ; save position in BASIC text
1100  591D E5           	PUSH HL
1101  591E DD E1        	POP IX
1102  5920
1103  5920 C1           	POP BC ; count
1104  5921 D1           	POP DE ; destination
1105  5922 E1           	POP HL ; source
1106  5923 D9           	EXX
1107  5924 FD 21 2B 59  	LD IY, .RET
1108  5928 C3 B6 56     	JP ENABLE_PAGE0
1109  592B              .RET:
1110  592B FB           	EI
1111  592C D9           	EXX
1112  592D 3E 01        	LD A,1
1113  592F 32 6A 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
1114  5932 CD 42 59     	CALL .LDIRMV
1115  5935 AF           	XOR A
1116  5936 32 6A 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
1117  5939 D1               POP DE
1118  593A C1               POP BC
1119  593B CD 2D 56         CALL RESTORE_PAGE_INFO
1120  593E DD E5        	PUSH IX
1121  5940 E1           	POP HL
1122  5941 C9           	RET
1123  5942
1124  5942              .LDIRMV:
1125  5942              	; set VRAM address *exactly* as in ROM, otherwise corruption
1126  5942 7D           	LD	A, L
1127  5943 F3           	DI
1128  5944 D3 99        	OUT	(099H), A
1129  5946 7C           	LD	A, H
1130  5947 E6 3F        	AND	03FH
1131  5949 D3 99        	OUT	(099H), A
1132  594B FB           	EI
1133  594C              	;EX (SP), HL
1134  594C              	;EX (SP), HL
1135  594C              	;NOP
1136  594C              	;NOP
1137  594C              .L4:
1138  594C DB 98            IN A, (#98)
1139  594E 12           	LD (DE), A
1140  594F 13               INC DE
1141  5950 0B               DEC BC
1142  5951 79               LD A, C
1143  5952 B0               OR B
1144  5953 20 F7            JR NZ, .L4
1145  5955 C9               RET
1146  5956              ; *******************************************************************************************************
1147  5956               ENDIF
1148  5956
1149  5956               IF (SOUND_CMDS == 1)
1150  5956              ; *******************************************************************************************************
1151  5956              ; function to handle CALL SNDPLYINIT basic extension
1152  5956              ; initializes sound player
1153  5956              ; _SNDPLYINIT ( INT music_offset,
1154  5956              ;				INT sfx_offset, can be -1 if no SFX
1155  5956              ; will put ram in page 0 also, page 1 is already there
1156  5956              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1157  5956              SNDPLYINIT:
1158  5956              	; opening (
1159  5956 CD 03 57     	CALL CHKCHAR
1160  5959 28           	DB '('
1161  595A              	; get music address
1162  595A DD 21 2F 54  	LD IX, FRMQNT
1163  595E CD 59 01     	CALL CALBAS
1164  5961 D5           	PUSH DE
1165  5962              	; comma
1166  5962 CD 03 57     	CALL CHKCHAR
1167  5965 2C           	DB ','
1168  5966              	; get sfx address
1169  5966 DD 21 2F 54  	LD IX, FRMQNT
1170  596A CD 59 01     	CALL CALBAS
1171  596D D5           	PUSH DE
1172  596E              	; ending )
1173  596E CD 03 57     	CALL CHKCHAR
1174  5971 29           	DB ')'
1175  5972
1176  5972                  ; save position in BASIC text
1177  5972 44           	LD B, H
1178  5973 4D           	LD C, L
1179  5974
1180  5974              	; pop LDIR parameters and store away for later
1181  5974 D1           	POP DE ; sfx address
1182  5975 E1           	POP HL ; music address
1183  5976 C5           	PUSH BC ; basic text location
1184  5977 D9           	EXX
1185  5978 FD 21 7F 59  	LD IY, .RET
1186  597C C3 B6 56     	JP ENABLE_PAGE0
1187  597F              .RET:
1188  597F D9           	EXX
1189  5980
1190  5980 D5           	PUSH DE
1191  5981 AF           	XOR A
1192  5982              	; HL = music location
1193  5982 CD 62 41     	CALL PLY_AKG_INIT
1194  5985 3E 01        	LD A, 1
1195  5987 32 7A 4D     	LD (MUSIC_INIT_STATUS), A
1196  598A
1197  598A E1           	POP HL ; SFX
1198  598B              	; check if SFX address -1
1199  598B 23           	INC HL
1200  598C 7D           	LD A, L
1201  598D B4           	OR H
1202  598E 28 09        	JR Z,.L1
1203  5990 2B           	DEC HL
1204  5991 CD 1D 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1205  5994 3E 01        	LD A, 1
1206  5996 32 7B 4D     	LD (SFX_INIT_STATUS), A
1207  5999              .L1:
1208  5999 D1               POP DE
1209  599A C1               POP BC
1210  599B CD 2D 56         CALL RESTORE_PAGE_INFO
1211  599E
1212  599E E1           	POP HL
1213  599F C9           	RET
1214  59A0              ; *******************************************************************************************************
1215  59A0
1216  59A0              ; *******************************************************************************************************
1217  59A0              ; function to handle CALL SNDPLYON basic extension
1218  59A0              ; enables sound player
1219  59A0              ; _SNDPLYON
1220  59A0              ; sets SOUND_ENABLED variable to 1 if init call was done
1221  59A0              ; if not throws out of data error
1222  59A0              SNDPLYON:
1223  59A0 3A 7A 4D     	LD A, (MUSIC_INIT_STATUS)
1224  59A3 B7           	OR A
1225  59A4 20 05        	JR NZ, .L1
1226  59A6              	; player not initialized, throw error
1227  59A6 1E 04        	LD E, 04 ; Out of DATA
1228  59A8 C3 23 57     	JP THROW_ERROR
1229  59AB              .L1:
1230  59AB 32 7C 4D     	LD (SOUND_ENABLED), A
1231  59AE              	; disable key click
1232  59AE AF           	XOR A
1233  59AF 32 DB F3     	LD (CLIKSW), A
1234  59B2 C9           	RET
1235  59B3              ; *******************************************************************************************************
1236  59B3
1237  59B3              ; *******************************************************************************************************
1238  59B3              ; function to handle CALL SNDPLYOFF basic extension
1239  59B3              ; disables sound player
1240  59B3              ; _SNDPLYOFF
1241  59B3              ; sets SOUND_ENABLED variable to 0
1242  59B3              ; calls AKG to stop music and SFX on all channels if initialized
1243  59B3              SNDPLYOFF:
1244  59B3 3A 7C 4D     	LD A, (SOUND_ENABLED)
1245  59B6 B7           	OR A
1246  59B7 C8           	RET Z ; already stopped
1247  59B8 AF           	XOR A
1248  59B9 32 7C 4D     	LD (SOUND_ENABLED), A
1249  59BC E5           	PUSH HL
1250  59BD CD 21 42     	CALL PLY_AKG_STOP
1251  59C0 3A 7B 4D     	LD A, (SFX_INIT_STATUS)
1252  59C3 B7           	OR A
1253  59C4 28 0E        	JR Z, .EXIT ; SFX not in use
1254  59C6 AF           	XOR A
1255  59C7 CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1256  59CA 3E 01        	LD A, 1
1257  59CC CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1258  59CF 3E 02        	LD A, 2
1259  59D1 CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1260  59D4              .EXIT:
1261  59D4 E1           	POP HL
1262  59D5 C9           	RET
1263  59D6              ; *******************************************************************************************************
1264  59D6
1265  59D6              ; *******************************************************************************************************
1266  59D6              ; function to handle CALL SNDSFX basic extension
1267  59D6              ; plays a sound effect
1268  59D6              ; _SNDSFX ( BYTE sfx_number, >0
1269  59D6              ;			BYTE channel, = 0,1 or 2
1270  59D6              ;			BYTE inverted_volume = 0-16, 0 being full volume
1271  59D6              ; will put ram in page 0 also, page 1 is already there
1272  59D6              ; if sound off throws illegal function call
1273  59D6              ; if sfx not initialized, throws out of data
1274  59D6              SNDSFX:
1275  59D6              	; opening (
1276  59D6 CD 03 57     	CALL CHKCHAR
1277  59D9 28           	DB '('
1278  59DA              	; get sfx_number
1279  59DA DD 21 1C 52  	LD IX, GETBYT
1280  59DE CD 59 01     	CALL CALBAS
1281  59E1 D5           	PUSH DE
1282  59E2              	; comma
1283  59E2 CD 03 57     	CALL CHKCHAR
1284  59E5 2C           	DB ','
1285  59E6              	; get sfx address
1286  59E6 DD 21 1C 52  	LD IX, GETBYT
1287  59EA CD 59 01     	CALL CALBAS
1288  59ED D5           	PUSH DE
1289  59EE              	; comma
1290  59EE CD 03 57     	CALL CHKCHAR
1291  59F1 2C           	DB ','
1292  59F2              	; get inverted volume
1293  59F2 DD 21 1C 52  	LD IX, GETBYT
1294  59F6 CD 59 01     	CALL CALBAS
1295  59F9 D5           	PUSH DE
1296  59FA              	; ending )
1297  59FA CD 03 57     	CALL CHKCHAR
1298  59FD 29           	DB ')'
1299  59FE
1300  59FE 3A 7C 4D     	LD A, (SOUND_ENABLED)
1301  5A01 B7           	OR A
1302  5A02 20 05        	JR NZ, .L1
1303  5A04              	; sound disabled, throw illegal function call
1304  5A04 1E 05        	LD E, 5
1305  5A06 C3 23 57     	JP THROW_ERROR
1306  5A09              .L1:
1307  5A09 3A 7B 4D     	LD A, (SFX_INIT_STATUS)
1308  5A0C B7           	OR A
1309  5A0D 20 05        	JR NZ, .L2
1310  5A0F              	; sfx data not initialized, throw out of data
1311  5A0F 1E 04        	LD E, 4
1312  5A11 C3 23 57     	JP THROW_ERROR
1313  5A14              .L2:
1314  5A14              	; pop  parameters and store away for later
1315  5A14 D1           	POP DE ; inverted volume
1316  5A15 43           	LD B, E
1317  5A16 D1           	POP DE ; channel
1318  5A17 4B           	LD C, E
1319  5A18 D1           	POP DE
1320  5A19 7B           	LD A, E
1321  5A1A 08           	EX AF, AF'
1322  5A1B E5           	PUSH HL ; basic text location
1323  5A1C D9           	EXX
1324  5A1D FD 21 24 5A  	LD IY, .RET
1325  5A21 C3 B6 56     	JP ENABLE_PAGE0
1326  5A24              .RET:
1327  5A24 D9           	EXX
1328  5A25 08           	EX AF, AF'
1329  5A26 CD 21 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1330  5A29
1331  5A29 D1               POP DE
1332  5A2A C1               POP BC
1333  5A2B CD 2D 56         CALL RESTORE_PAGE_INFO
1334  5A2E
1335  5A2E E1           	POP HL
1336  5A2F C9           	RET
1337  5A30              ; *******************************************************************************************************
1338  5A30               ENDIF
1339  5A30
1340  5A30               IF (BLIT_CMDS == 1)
1341  5A30              ; *******************************************************************************************************
1342  5A30              ; function rotates mask and data of several characters and applies to background data
1343  5A30              ; this handles x-shift from 0 to 4
1344  5A30              ; contains self-modifying code that is set-up from external function
1345  5A30              ; input HL=pointer to mask data
1346  5A30              ; input HL'=pointer to character data
1347  5A30              ; input DE=output buffer containing background data
1348  5A30              ; input BC=DE+8
1349  5A30              ; input A=number of characters to process
1350  5A30              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1351  5A30              SHIFT04:
1352  5A30 08           	EX AF, AF'
1353  5A31 7E           	LD A, (HL) ; get mask
1354  5A32 D9           	EXX
1355  5A33 57           	LD D, A
1356  5A34 1E FF        	LD E, #FF
1357  5A36 37           	SCF
1358  5A37              .M1:
1359  5A37 18 FE        	JR .M1 ; this is self-modifying part
1360  5A39 CB 1A        	RR D
1361  5A3B CB 1B        	RR E
1362  5A3D CB 1A        	RR D
1363  5A3F CB 1B        	RR E
1364  5A41 CB 1A        	RR D
1365  5A43 CB 1B        	RR E
1366  5A45 CB 1A        	RR D
1367  5A47 CB 1B        	RR E
1368  5A49
1369  5A49 46           	LD B, (HL) ; get data
1370  5A4A 0E 00        	LD C, 0
1371  5A4C              .M2:
1372  5A4C 18 FE        	JR .M2 ; also self-modifying part
1373  5A4E CB 38        	SRL B
1374  5A50 CB 19        	RR C
1375  5A52 CB 38        	SRL B
1376  5A54 CB 19        	RR C
1377  5A56 CB 38        	SRL B
1378  5A58 CB 19        	RR C
1379  5A5A CB 38        	SRL B
1380  5A5C CB 19        	RR C
1381  5A5E
1382  5A5E D9           	EXX
1383  5A5F 1A           	LD A, (DE) ; background
1384  5A60 D9           	EXX
1385  5A61 A2           	AND D
1386  5A62 B0           	OR B
1387  5A63 D9           	EXX
1388  5A64 12           	LD (DE), A
1389  5A65
1390  5A65 0A           	LD A, (BC)
1391  5A66 D9           	EXX
1392  5A67 A3           	AND E
1393  5A68 B1           	OR C
1394  5A69 23           	INC HL
1395  5A6A D9           	EXX
1396  5A6B 02           	LD (BC), A
1397  5A6C
1398  5A6C 23           	INC HL
1399  5A6D 13           	INC DE
1400  5A6E 03           	INC BC
1401  5A6F
1402  5A6F 08           	EX AF, AF'
1403  5A70 3D           	DEC A
1404  5A71 C2 30 5A     	JP NZ, SHIFT04
1405  5A74 C9           	RET
1406  5A75              ; *******************************************************************************************************
1407  5A75
1408  5A75              ; *******************************************************************************************************
1409  5A75              ; function rotates mask and data of several characters and applies to background data
1410  5A75              ; this handles x-shift from 5 to 8
1411  5A75              ; contains self-modifying code that is set-up from external function
1412  5A75              ; input HL=pointer to mask data
1413  5A75              ; input HL'=pointer to character data
1414  5A75              ; input DE=output buffer containing background data
1415  5A75              ; input BC=DE+8
1416  5A75              ; input A=number of characters to process
1417  5A75              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1418  5A75              SHIFT58:
1419  5A75 08           	EX AF, AF'
1420  5A76 7E           	LD A, (HL) ; get mask
1421  5A77 D9           	EXX
1422  5A78 57           	LD D, A
1423  5A79 1E FF        	LD E, #FF
1424  5A7B 37           	SCF
1425  5A7C              .M1:
1426  5A7C 18 FE        	JR .M1 ; this is self-modifying part
1427  5A7E CB 12        	RL D
1428  5A80 CB 13        	RL E
1429  5A82 CB 12        	RL D
1430  5A84 CB 13        	RL E
1431  5A86 CB 12        	RL D
1432  5A88 CB 13        	RL E
1433  5A8A
1434  5A8A 46           	LD B, (HL)
1435  5A8B 0E 00        	LD C, 0
1436  5A8D              .M2:
1437  5A8D 18 FE        	JR .M2 ; also self-modifying part
1438  5A8F CB 20        	SLA B
1439  5A91 CB 11        	RL C
1440  5A93 CB 20        	SLA B
1441  5A95 CB 11        	RL C
1442  5A97 CB 20        	SLA B
1443  5A99 CB 11        	RL C
1444  5A9B
1445  5A9B D9           	EXX
1446  5A9C 1A           	LD A, (DE) ; background
1447  5A9D D9           	EXX
1448  5A9E A3           	AND E
1449  5A9F B1           	OR C
1450  5AA0 D9           	EXX
1451  5AA1 12           	LD (DE), A
1452  5AA2
1453  5AA2 0A           	LD A, (BC)
1454  5AA3 D9           	EXX
1455  5AA4 A2           	AND D
1456  5AA5 B0           	OR B
1457  5AA6 23           	INC HL
1458  5AA7 D9           	EXX
1459  5AA8 02           	LD (BC), A
1460  5AA9
1461  5AA9 23           	INC HL
1462  5AAA 13           	INC DE
1463  5AAB 03           	INC BC
1464  5AAC
1465  5AAC 08           	EX AF, AF'
1466  5AAD 3D           	DEC A
1467  5AAE C2 75 5A     	JP NZ, SHIFT58
1468  5AB1 C9           	RET
1469  5AB2              ; *******************************************************************************************************
1470  5AB2
1471  5AB2              ; *******************************************************************************************************
1472  5AB2              ; routine that shifts one row of characters
1473  5AB2              ; contains self-modifying code that is set-up from external function
1474  5AB2              ; input HL=pointer to mask data
1475  5AB2              ; input HL'=pointer to character data
1476  5AB2              ; input DE=output buffer containing background data
1477  5AB2              ; input A=number of characters to process
1478  5AB2              ; input IX=pointer to structure describing input data
1479  5AB2              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1480  5AB2              SHIFT_ROW:
1481  5AB2 F5           	PUSH AF
1482  5AB3 ED 53 55 54  		LD (BLIT_TMP1), DE
1483  5AB7 E5           		PUSH HL
1484  5AB8 CD FB 5A     			CALL .ADDYSHIFT
1485  5ABB E1           		POP HL
1486  5ABC ED 53 57 54  		LD (BLIT_TMP2), DE ; DE+vertical shift
1487  5AC0              .L1:
1488  5AC0 3E 08        		LD A, 8
1489  5AC2 DD 96 02     		SUB (IX+2) ; y shift
1490  5AC5              .CALL1:
1491  5AC5 CD 00 00     		CALL 0
1492  5AC8 DD 7E 02     		LD A, (IX+2); y shift
1493  5ACB B7           		OR A
1494  5ACC 28 26        		JR Z, .DONE
1495  5ACE ED 5B 55 54  		LD DE, (BLIT_TMP1)
1496  5AD2 E5           		PUSH HL
1497  5AD3 CD 09 5B     			CALL .DETONEXTROW
1498  5AD6 E1           		POP HL
1499  5AD7              .CALL2:
1500  5AD7 CD 00 00     		CALL 0
1501  5ADA ED 5B 55 54  		LD DE, (BLIT_TMP1)
1502  5ADE E5           		PUSH HL
1503  5ADF CD 03 5B     			CALL .ADD8
1504  5AE2 E1           		POP HL
1505  5AE3 ED 53 55 54  		LD (BLIT_TMP1), DE
1506  5AE7 ED 5B 57 54  		LD DE, (BLIT_TMP2)
1507  5AEB E5           		PUSH HL
1508  5AEC CD 03 5B     			CALL .ADD8
1509  5AEF E1           		POP HL
1510  5AF0 ED 53 57 54  		LD (BLIT_TMP2), DE ; DE+vertical shift
1511  5AF4              .DONE:
1512  5AF4 F1           	POP AF
1513  5AF5 3D           	DEC A
1514  5AF6 C8           	RET Z
1515  5AF7 F5           	PUSH AF
1516  5AF8 C3 C0 5A     	JP .L1
1517  5AFB              .ADDYSHIFT:
1518  5AFB EB           	EX DE, HL
1519  5AFC 16 00        	LD D, 0
1520  5AFE DD 5E 02     	LD E, (IX+2); y shift
1521  5B01 18 0C        	JR .MOVDEBC
1522  5B03              .ADD8:
1523  5B03 21 08 00     	LD HL, 8
1524  5B06 C3 0F 5B     	JP .MOVDEBC
1525  5B09              .DETONEXTROW:
1526  5B09 DD 6E 06     	LD L, (IX+6)
1527  5B0C DD 66 07     	LD H, (IX+7) ; bkg add to value
1528  5B0F              .MOVDEBC:
1529  5B0F 19           	ADD HL, DE
1530  5B10 54           	LD D, H
1531  5B11 5D           	LD E, L
1532  5B12 01 08 00     	LD BC, 8
1533  5B15 09           	ADD HL, BC
1534  5B16 44           	LD B, H
1535  5B17 4D           	LD C, L
1536  5B18 C9           	RET
1537  5B19              ; *******************************************************************************************************
1538  5B19
1539  5B19              ; *******************************************************************************************************
1540  5B19              ; function rotates mask and character data and applies it to background
1541  5B19              ; input IX=pointer to structure describing input data
1542  5B19              ; +0  DW horizontal shift count 0-7 (low byte used)
1543  5B19              ; +2  DW vertical shift count 0-7 (low byte used)
1544  5B19              ; +4  DW background data start;
1545  5B19              ; +6  DW background add to value to next row of background data
1546  5B19              ; +8  DW mask data start;
1547  5B19              ; +10  DW character data start;
1548  5B19              ; +12 DW character&mask add to value to next row of data
1549  5B19              ; +14 DW columns (low byte used)
1550  5B19              ; +16 DW rows (low byte used)
1551  5B19              SHIFT_MERGE_CHARACTER:
1552  5B19 DD 7E 00     	LD A, (IX) ; shift
1553  5B1C FE 05        	CP 5
1554  5B1E 38 25        	JR C, .RIGHT
1555  5B20              	; shifts 5-7, use rotate towards left 1-3
1556  5B20 21 75 5A     	LD HL, SHIFT58
1557  5B23 22 C6 5A     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1558  5B26 22 D8 5A     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1559  5B29 D6 05        	SUB 5
1560  5B2B 28 0D        	JR Z, .L1
1561  5B2D 87           	ADD A, A
1562  5B2E 87           	ADD A, A
1563  5B2F 67           	LD H, A
1564  5B30 2E 18        	LD L, #18 ; JR opcode
1565  5B32 22 7C 5A     	LD (SHIFT58.M1), HL
1566  5B35 22 8D 5A     	LD (SHIFT58.M2), HL
1567  5B38 18 32        	JR .DO
1568  5B3A              .L1:
1569  5B3A 21 00 00     	LD HL, 0 ; 2xNOP opcode
1570  5B3D 22 7C 5A     	LD (SHIFT58.M1), HL
1571  5B40 22 8D 5A     	LD (SHIFT58.M2), HL
1572  5B43 18 27        	JR .DO
1573  5B45              .RIGHT:
1574  5B45              	; shifts 0-4, rotate towards right
1575  5B45 21 30 5A     	LD HL, SHIFT04
1576  5B48 22 C6 5A     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1577  5B4B 22 D8 5A     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1578  5B4E FE 04        	CP 4
1579  5B50 28 11        	JR Z, .R1
1580  5B52 D6 04        	SUB 4
1581  5B54 ED 44        	NEG
1582  5B56 87           	ADD A, A
1583  5B57 87           	ADD A, A
1584  5B58 67           	LD H, A
1585  5B59 2E 18        	LD L, #18 ; JR opcode
1586  5B5B 22 37 5A     	LD (SHIFT04.M1), HL
1587  5B5E 22 4C 5A     	LD (SHIFT04.M2), HL
1588  5B61 18 09        	JR .DO
1589  5B63              .R1:
1590  5B63 21 00 00     	LD HL, 0 ; 2xNOP opcode
1591  5B66 22 37 5A     	LD (SHIFT04.M1), HL
1592  5B69 22 4C 5A     	LD (SHIFT04.M2), HL
1593  5B6C              .DO:
1594  5B6C DD 46 10     	LD B, (IX+16) ; rows
1595  5B6F DD 6E 08     	LD L, (IX+8)
1596  5B72 DD 66 09     	LD H, (IX+9) ; mask data
1597  5B75 DD 5E 04     	LD E, (IX+4)
1598  5B78 DD 56 05     	LD D, (IX+5) ; background data
1599  5B7B D9           	EXX
1600  5B7C DD 6E 0A     	LD L, (IX+10)
1601  5B7F DD 66 0B     	LD H, (IX+11) ; character data
1602  5B82 D9           	EXX
1603  5B83              .LOOP:
1604  5B83 C5           	PUSH BC
1605  5B84 E5           		PUSH HL
1606  5B85 D5           			PUSH DE
1607  5B86 D9           				EXX
1608  5B87 E5           				PUSH HL
1609  5B88 D9           					EXX
1610  5B89 DD 7E 0E     					LD A, (IX+14) ; columns
1611  5B8C              .CALL:
1612  5B8C CD B2 5A     					CALL SHIFT_ROW
1613  5B8F E1           				POP HL
1614  5B90 DD 5E 0C     				LD E, (IX+12)
1615  5B93 DD 56 0D     				LD D, (IX+13) ; char data to next row
1616  5B96 19           				ADD HL, DE
1617  5B97 D9           				EXX
1618  5B98 E1           			POP HL
1619  5B99 DD 5E 06     			LD E, (IX+6)
1620  5B9C DD 56 07     			LD D, (IX+7) ; background to next row
1621  5B9F 19           			ADD HL, DE
1622  5BA0 EB           			EX DE, HL
1623  5BA1 E1           		POP HL
1624  5BA2 DD 4E 0C     		LD C, (IX+12)
1625  5BA5 DD 46 0D     		LD B, (IX+13) ; char data to next row
1626  5BA8 09           		ADD HL, BC
1627  5BA9 C1           	POP BC
1628  5BAA 10 D7        	DJNZ .LOOP
1629  5BAC C9           	RET
1630  5BAD              ; *******************************************************************************************************
1631  5BAD
1632  5BAD               IFNDEF CMDS_WITH_PARAMETERS
1633  5BAD ~            ; *******************************************************************************************************
1634  5BAD ~            ; function to handle CALL BLIT basic extension
1635  5BAD ~            ; rotates 1-bit character drawing horizontally with mask and character data and
1636  5BAD ~            ; fuses with background data and applies vertical shift too
1637  5BAD ~            ; BLIT ( INT request_data_ptr )
1638  5BAD ~            ; request_data_ptr described in SHIFT_MERGE_CHARACTER
1639  5BAD ~            ; will put ram in page 0 also, page 1 is already there
1640  5BAD ~            BLIT:
1641  5BAD ~            	; opening (
1642  5BAD ~            	CALL CHKCHAR
1643  5BAD ~            	DB '('
1644  5BAD ~            	; get pointer to request struct
1645  5BAD ~            	LD IX, FRMQNT
1646  5BAD ~            	CALL CALBAS
1647  5BAD ~            	PUSH DE
1648  5BAD ~            	; ending )
1649  5BAD ~            	CALL CHKCHAR
1650  5BAD ~            	DB ')'
1651  5BAD ~
1652  5BAD ~            	POP IX ; pointer to request struct
1653  5BAD ~
1654  5BAD ~            	PUSH HL ; save position in BASIC buffer
1655  5BAD ~
1656  5BAD ~            	LD IY, .RET
1657  5BAD ~            	JP ENABLE_PAGE0
1658  5BAD ~            .RET:
1659  5BAD ~            	EI
1660  5BAD ~            	CALL SHIFT_MERGE_CHARACTER
1661  5BAD ~
1662  5BAD ~                POP DE
1663  5BAD ~                POP BC
1664  5BAD ~                CALL RESTORE_PAGE_INFO
1665  5BAD ~
1666  5BAD ~            	POP HL
1667  5BAD ~            	RET
1668  5BAD ~            ; *******************************************************************************************************
1669  5BAD               ENDIF
1670  5BAD
1671  5BAD               IFDEF CMDS_WITH_PARAMETERS
1672  5BAD              ; *******************************************************************************************************
1673  5BAD              ; function to handle CALL BLIT basic extension
1674  5BAD              ; rotates 1-bit character drawing horizontally with mask and character data and
1675  5BAD              ; fuses with background data and applies vertical shift too
1676  5BAD              ; in form without pointers
1677  5BAD              ; BLIT ( INT x,
1678  5BAD              ;		 INT y,
1679  5BAD              ;		 INT char_data_pointer,
1680  5BAD              ;		 INT mask_data_pointer,
1681  5BAD              ;		 INT width (in characters),
1682  5BAD              ;		 INT height (in characters),
1683  5BAD              ;		 INT background_pointer (top left),
1684  5BAD              ;		 INT background_width (in characters),
1685  5BAD              ;		 INT background_height (in characters))
1686  5BAD              ; will put ram in page 0 also, page 1 is already there
1687  5BAD              BLIT:
1688  5BAD              	; opening (
1689  5BAD CD 03 57     	CALL CHKCHAR
1690  5BB0 28           	DB '('
1691  5BB1              	; get x coordinate
1692  5BB1 DD 21 2F 54  	LD IX, FRMQNT
1693  5BB5 CD 59 01     	CALL CALBAS
1694  5BB8 7B           	LD A, E
1695  5BB9 E6 07        	AND 7
1696  5BBB 32 59 54     	LD (BLIT_STRUCT+0), A
1697  5BBE CD 9B 5C     	CALL .DAdiv8
1698  5BC1 32 55 54     	LD (BLIT_TMP+0),A
1699  5BC4              	; comma
1700  5BC4 CD 03 57     	CALL CHKCHAR
1701  5BC7 2C           	DB ','
1702  5BC8              	; get y coordinate
1703  5BC8 DD 21 2F 54  	LD IX, FRMQNT
1704  5BCC CD 59 01     	CALL CALBAS
1705  5BCF 7B           	LD A, E
1706  5BD0 E6 07        	AND 7
1707  5BD2 32 5B 54     	LD (BLIT_STRUCT+2), A
1708  5BD5 CD 9B 5C     	CALL .DAdiv8
1709  5BD8 32 56 54     	LD (BLIT_TMP+1),A
1710  5BDB              	; comma
1711  5BDB CD 03 57     	CALL CHKCHAR
1712  5BDE 2C           	DB ','
1713  5BDF              	; get char data pointer
1714  5BDF DD 21 2F 54  	LD IX, FRMQNT
1715  5BE3 CD 59 01     	CALL CALBAS
1716  5BE6 ED 53 63 54  	LD (BLIT_STRUCT+10), DE
1717  5BEA              	; comma
1718  5BEA CD 03 57     	CALL CHKCHAR
1719  5BED 2C           	DB ','
1720  5BEE              	; get mask data pointer
1721  5BEE DD 21 2F 54  	LD IX, FRMQNT
1722  5BF2 CD 59 01     	CALL CALBAS
1723  5BF5 ED 53 61 54  	LD (BLIT_STRUCT+8), DE
1724  5BF9              	; comma
1725  5BF9 CD 03 57     	CALL CHKCHAR
1726  5BFC 2C           	DB ','
1727  5BFD              	; get width
1728  5BFD DD 21 2F 54  	LD IX, FRMQNT
1729  5C01 CD 59 01     	CALL CALBAS
1730  5C04 7B           	LD A, E
1731  5C05 32 67 54     	LD (BLIT_STRUCT+14), A
1732  5C08              	; comma
1733  5C08 CD 03 57     	CALL CHKCHAR
1734  5C0B 2C           	DB ','
1735  5C0C              	; get height
1736  5C0C DD 21 2F 54  	LD IX, FRMQNT
1737  5C10 CD 59 01     	CALL CALBAS
1738  5C13 7B           	LD A, E
1739  5C14 32 69 54     	LD (BLIT_STRUCT+16), A
1740  5C17              	; comma
1741  5C17 CD 03 57     	CALL CHKCHAR
1742  5C1A 2C           	DB ','
1743  5C1B              	; get background pointer
1744  5C1B DD 21 2F 54  	LD IX, FRMQNT
1745  5C1F CD 59 01     	CALL CALBAS
1746  5C22 ED 53 5D 54  	LD (BLIT_STRUCT+4), DE
1747  5C26              	; comma
1748  5C26 CD 03 57     	CALL CHKCHAR
1749  5C29 2C           	DB ','
1750  5C2A              	; get background width
1751  5C2A DD 21 2F 54  	LD IX, FRMQNT
1752  5C2E CD 59 01     	CALL CALBAS
1753  5C31 7B           	LD A, E
1754  5C32 32 57 54     	LD (BLIT_TMP+2), A
1755  5C35              	; comma
1756  5C35 CD 03 57     	CALL CHKCHAR
1757  5C38 2C           	DB ','
1758  5C39              	; get background height
1759  5C39 DD 21 2F 54  	LD IX, FRMQNT
1760  5C3D CD 59 01     	CALL CALBAS
1761  5C40 7B           	LD A, E
1762  5C41 32 58 54     	LD (BLIT_TMP+3), A
1763  5C44              	; ending )
1764  5C44 CD 03 57     	CALL CHKCHAR
1765  5C47 29           	DB ')'
1766  5C48
1767  5C48 E5           	PUSH HL ; save position in BASIC buffer
1768  5C49
1769  5C49              	; calculate char&mask add to value
1770  5C49 26 00        	LD H, 0
1771  5C4B 3A 67 54     	LD A, (BLIT_STRUCT+14)
1772  5C4E 6F           	LD L, A
1773  5C4F CD F2 55     	CALL HLx8
1774  5C52 22 65 54     	LD (BLIT_STRUCT+12), HL
1775  5C55              	; calculate background add to value
1776  5C55 26 00        	LD H, 0
1777  5C57 3A 57 54     	LD A, (BLIT_TMP+2)
1778  5C5A 6F           	LD L, A
1779  5C5B CD F2 55     	CALL HLx8
1780  5C5E 22 5F 54     	LD (BLIT_STRUCT+6), HL
1781  5C61              	; calculate pointer to background location
1782  5C61 21 00 00     	LD HL, 0
1783  5C64 3A 56 54     	LD A,(BLIT_TMP+1)
1784  5C67 B7           	OR A
1785  5C68 28 08        	JR Z, .L1
1786  5C6A 47           	LD B,A
1787  5C6B ED 5B 5F 54  	LD DE,(BLIT_STRUCT+6)
1788  5C6F              .L0:
1789  5C6F 19           	ADD HL, DE
1790  5C70 10 FD        	DJNZ .L0
1791  5C72              .L1:
1792  5C72 EB           	EX DE,HL
1793  5C73 26 00        	LD H,0
1794  5C75 3A 55 54     	LD A,(BLIT_TMP+0)
1795  5C78 6F           	LD L,A
1796  5C79 CD F2 55     	CALL HLx8
1797  5C7C 19           	ADD HL,DE
1798  5C7D ED 5B 5D 54  	LD DE,(BLIT_STRUCT+4)
1799  5C81 19           	ADD HL,DE
1800  5C82 22 5D 54     	LD (BLIT_STRUCT+4),HL
1801  5C85
1802  5C85 FD 21 8C 5C  	LD IY, .RET
1803  5C89 C3 B6 56     	JP ENABLE_PAGE0
1804  5C8C              .RET:
1805  5C8C FB           	EI
1806  5C8D DD 21 59 54  	LD IX, BLIT_STRUCT
1807  5C91 CD 19 5B     	CALL SHIFT_MERGE_CHARACTER
1808  5C94
1809  5C94 D1               POP DE
1810  5C95 C1               POP BC
1811  5C96 CD 2D 56         CALL RESTORE_PAGE_INFO
1812  5C99
1813  5C99 E1           	POP HL
1814  5C9A C9           	RET
1815  5C9B              .DAdiv8:
1816  5C9B 7B           	LD A,E
1817  5C9C CB 2A        	SRA D
1818  5C9E CB 1F            RR  A
1819  5CA0 CB 2A            SRA D
1820  5CA2 CB 1F            RR  A
1821  5CA4 CB 2A            SRA D
1822  5CA6 CB 1F            RR  A
1823  5CA8 C9           	RET
1824  5CA9              ; *******************************************************************************************************
1825  5CA9               ENDIF
1826  5CA9               ENDIF
1827  5CA9
1828  5CA9               IF (TILE_CMDS == 1)
1829  5CA9              ; *******************************************************************************************************
1830  5CA9              ; generic function to implement tiling
1831  5CA9              ; should be modified to call appropriate function for memory or vram
1832  5CA9              ; input IX=pointer to following structure
1833  5CA9              ; +00 tile_data_ptr
1834  5CA9              ; +02 tile_rows
1835  5CA9              ; +04 tile_columns
1836  5CA9              ; +06 destination_address
1837  5CA9              ; +08 dest_to_next_row_add_to_value
1838  5CA9              ; +10 num_horizontal_tiles
1839  5CA9              ; +12 num_vertical_tiles
1840  5CA9              ; modifies AF, BC, DE, HL
1841  5CA9              TILE:
1842  5CA9 DD 6E 06     	LD L, (IX+6)
1843  5CAC DD 66 07     	LD H, (IX+7) ; destination address
1844  5CAF 22 55 54     	LD (TILETMP1), HL
1845  5CB2 DD 46 0C     	LD B, (IX+12) ; vertical tile number
1846  5CB5              .L1:
1847  5CB5 C5           	PUSH BC
1848  5CB6 DD 6E 00     		LD L, (IX+0)
1849  5CB9 DD 66 01     		LD H, (IX+1) ; tile address
1850  5CBC 22 57 54     		LD (TILETMP2), HL
1851  5CBF DD 46 02     		LD B, (IX+2) ; tile rows
1852  5CC2              .L2:
1853  5CC2 C5           		PUSH BC
1854  5CC3              .CALL1:
1855  5CC3 CD 00 00     			CALL 0
1856  5CC6 DD 46 0A     			LD B, (IX+10) ; horizontal tile num
1857  5CC9              .L3:
1858  5CC9 C5           			PUSH BC
1859  5CCA 2A 57 54     				LD HL, (TILETMP2)
1860  5CCD DD 46 04     				LD B, (IX+4) ; tile columns
1861  5CD0              .L4:
1862  5CD0 C5           				PUSH BC
1863  5CD1              .CALL2:
1864  5CD1 CD 00 00     					CALL 0
1865  5CD4 C1           				POP BC
1866  5CD5 10 F9        				DJNZ .L4
1867  5CD7 C1           			POP BC
1868  5CD8 10 EF        			DJNZ .L3
1869  5CDA 22 57 54     			LD (TILETMP2), HL
1870  5CDD 2A 55 54     			LD HL, (TILETMP1)
1871  5CE0 DD 5E 08     			LD E, (IX+8)
1872  5CE3 DD 56 09     			LD D, (IX+9) ; add to value for dest next row
1873  5CE6 19           			ADD HL, DE
1874  5CE7 22 55 54     			LD (TILETMP1), HL
1875  5CEA C1           		POP BC
1876  5CEB 10 D5        		DJNZ .L2
1877  5CED C1           	POP BC
1878  5CEE 10 C5        	DJNZ .L1
1879  5CF0 C9           	RET
1880  5CF1              ; *******************************************************************************************************
1881  5CF1
1882  5CF1               IFNDEF CMDS_WITH_PARAMETERS
1883  5CF1 ~            ; *******************************************************************************************************
1884  5CF1 ~            ; function to handle CALL TILERAM basic extension
1885  5CF1 ~            ; fills memory with tiles
1886  5CF1 ~            ; TILERAM ( INT request_data_ptr )
1887  5CF1 ~            ; request_data_ptr described in TILE
1888  5CF1 ~            ; will put ram in page 0 also, page 1 is already there
1889  5CF1 ~            TILERAM:
1890  5CF1 ~            	; opening (
1891  5CF1 ~            	CALL CHKCHAR
1892  5CF1 ~            	DB '('
1893  5CF1 ~            	; get pointer to request struct
1894  5CF1 ~            	LD IX, FRMQNT
1895  5CF1 ~            	CALL CALBAS
1896  5CF1 ~            	PUSH DE
1897  5CF1 ~            	; ending )
1898  5CF1 ~            	CALL CHKCHAR
1899  5CF1 ~            	DB ')'
1900  5CF1 ~
1901  5CF1 ~            	POP IX ; pointer to request struct
1902  5CF1 ~
1903  5CF1 ~            	PUSH HL ; save position in BASIC buffer
1904  5CF1 ~
1905  5CF1 ~            	LD IY, .RET
1906  5CF1 ~            	JP ENABLE_PAGE0
1907  5CF1 ~            .RET:
1908  5CF1 ~            	EI
1909  5CF1 ~            	; set RAM functions to call
1910  5CF1 ~            	LD HL, .TILECOPY
1911  5CF1 ~            	LD (TILE.CALL2+1), HL
1912  5CF1 ~            	LD HL, .SETDESTROW
1913  5CF1 ~            	LD (TILE.CALL1+1), HL
1914  5CF1 ~            	LD A,1
1915  5CF1 ~            	LD (VRAM_UPDATE_IN_PROGRESS),A
1916  5CF1 ~            	CALL TILE
1917  5CF1 ~            	XOR A
1918  5CF1 ~            	LD (VRAM_UPDATE_IN_PROGRESS),A
1919  5CF1 ~
1920  5CF1 ~                POP DE
1921  5CF1 ~                POP BC
1922  5CF1 ~                CALL RESTORE_PAGE_INFO
1923  5CF1 ~
1924  5CF1 ~            	POP HL
1925  5CF1 ~            	RET
1926  5CF1 ~            .TILECOPY:
1927  5CF1 ~            	.8 LDI
1928  5CF1 ~            	RET
1929  5CF1 ~            .SETDESTROW:
1930  5CF1 ~            	LD DE, (TILETMP1)
1931  5CF1 ~            	RET
1932  5CF1 ~            ; *******************************************************************************************************
1933  5CF1               ENDIF
1934  5CF1
1935  5CF1               IFDEF CMDS_WITH_PARAMETERS
1936  5CF1              ; *******************************************************************************************************
1937  5CF1              ; function to handle CALL TILERAM basic extension
1938  5CF1              ; fills memory with tiles
1939  5CF1              ; TILERAM ( INT tile_data_pointer,
1940  5CF1              ;			INT tile_columns,
1941  5CF1              ;			INT tile_rows,
1942  5CF1              ;			INT destination_pointer,
1943  5CF1              ;			INT destination_columns,
1944  5CF1              ;			INT destination_rows,
1945  5CF1              ;			INT destination_begin_column,
1946  5CF1              ;			INT destination_begin_row,
1947  5CF1              ;			INT number_of_tiles_horizontally,
1948  5CF1              ;			INT	number_of_tiles_vertically )
1949  5CF1              ; will put ram in page 0 also, page 1 is already there
1950  5CF1              TILERAM:
1951  5CF1              	; opening (
1952  5CF1 CD 03 57     	CALL CHKCHAR
1953  5CF4 28           	DB '('
1954  5CF5              	; get tile data pointer coordinate
1955  5CF5 DD 21 2F 54  	LD IX, FRMQNT
1956  5CF9 CD 59 01     	CALL CALBAS
1957  5CFC ED 53 59 54  	LD (BLIT_STRUCT+0), DE
1958  5D00              	; comma
1959  5D00 CD 03 57     	CALL CHKCHAR
1960  5D03 2C           	DB ','
1961  5D04              	; get tile columns
1962  5D04 DD 21 2F 54  	LD IX, FRMQNT
1963  5D08 CD 59 01     	CALL CALBAS
1964  5D0B ED 53 5D 54  	LD (BLIT_STRUCT+4), DE
1965  5D0F              	; comma
1966  5D0F CD 03 57     	CALL CHKCHAR
1967  5D12 2C           	DB ','
1968  5D13              	; get tile columns
1969  5D13 DD 21 2F 54  	LD IX, FRMQNT
1970  5D17 CD 59 01     	CALL CALBAS
1971  5D1A ED 53 5B 54  	LD (BLIT_STRUCT+2), DE
1972  5D1E              	; comma
1973  5D1E CD 03 57     	CALL CHKCHAR
1974  5D21 2C           	DB ','
1975  5D22              	; get destintion pointer
1976  5D22 DD 21 2F 54  	LD IX, FRMQNT
1977  5D26 CD 59 01     	CALL CALBAS
1978  5D29 ED 53 5F 54  	LD (BLIT_STRUCT+6), DE
1979  5D2D              	; comma
1980  5D2D CD 03 57     	CALL CHKCHAR
1981  5D30 2C           	DB ','
1982  5D31              	; get destination columns
1983  5D31 DD 21 2F 54  	LD IX, FRMQNT
1984  5D35 CD 59 01     	CALL CALBAS
1985  5D38 7B           	LD A, E
1986  5D39 32 55 54     	LD (BLIT_TMP+0), A
1987  5D3C              	; comma
1988  5D3C CD 03 57     	CALL CHKCHAR
1989  5D3F 2C           	DB ','
1990  5D40              	; get destination rows
1991  5D40 DD 21 2F 54  	LD IX, FRMQNT
1992  5D44 CD 59 01     	CALL CALBAS
1993  5D47 7B           	LD A, E
1994  5D48 32 56 54     	LD (BLIT_TMP+1), A
1995  5D4B              	; comma
1996  5D4B CD 03 57     	CALL CHKCHAR
1997  5D4E 2C           	DB ','
1998  5D4F              	; get destination begin column
1999  5D4F DD 21 2F 54  	LD IX, FRMQNT
2000  5D53 CD 59 01     	CALL CALBAS
2001  5D56 7B           	LD A, E
2002  5D57 32 57 54     	LD (BLIT_TMP+2), A
2003  5D5A              	; comma
2004  5D5A CD 03 57     	CALL CHKCHAR
2005  5D5D 2C           	DB ','
2006  5D5E              	; get destination begin row
2007  5D5E DD 21 2F 54  	LD IX, FRMQNT
2008  5D62 CD 59 01     	CALL CALBAS
2009  5D65 7B           	LD A, E
2010  5D66 32 58 54     	LD (BLIT_TMP+3), A
2011  5D69              	; comma
2012  5D69 CD 03 57     	CALL CHKCHAR
2013  5D6C 2C           	DB ','
2014  5D6D              	; get number of tiles horizontally
2015  5D6D DD 21 2F 54  	LD IX, FRMQNT
2016  5D71 CD 59 01     	CALL CALBAS
2017  5D74 ED 53 63 54  	LD (BLIT_STRUCT+10), DE
2018  5D78              	; comma
2019  5D78 CD 03 57     	CALL CHKCHAR
2020  5D7B 2C           	DB ','
2021  5D7C              	; get number of tiles vertically
2022  5D7C DD 21 2F 54  	LD IX, FRMQNT
2023  5D80 CD 59 01     	CALL CALBAS
2024  5D83 ED 53 65 54  	LD (BLIT_STRUCT+12), DE
2025  5D87              	; ending )
2026  5D87 CD 03 57     	CALL CHKCHAR
2027  5D8A 29           	DB ')'
2028  5D8B
2029  5D8B E5           	PUSH HL ; save position in BASIC buffer
2030  5D8C
2031  5D8C              	; calculate destination add to value
2032  5D8C 26 00        	LD H, 0
2033  5D8E 3A 55 54     	LD A, (BLIT_TMP+0)
2034  5D91 6F           	LD L, A
2035  5D92 CD F2 55     	CALL HLx8
2036  5D95 22 61 54     	LD (BLIT_STRUCT+8), HL
2037  5D98              	; calculate pointer to background location
2038  5D98 21 00 00     	LD HL, 0
2039  5D9B 3A 58 54     	LD A,(BLIT_TMP+3)
2040  5D9E B7           	OR A
2041  5D9F 28 08        	JR Z, .L1
2042  5DA1 47           	LD B,A
2043  5DA2 ED 5B 61 54  	LD DE,(BLIT_STRUCT+8)
2044  5DA6              .L0:
2045  5DA6 19           	ADD HL, DE
2046  5DA7 10 FD        	DJNZ .L0
2047  5DA9              .L1:
2048  5DA9 EB           	EX DE,HL
2049  5DAA 26 00        	LD H,0
2050  5DAC 3A 57 54     	LD A,(BLIT_TMP+2)
2051  5DAF 6F           	LD L,A
2052  5DB0 CD F2 55     	CALL HLx8
2053  5DB3 19           	ADD HL,DE
2054  5DB4 ED 5B 5F 54  	LD DE,(BLIT_STRUCT+6)
2055  5DB8 19           	ADD HL,DE
2056  5DB9 22 5F 54     	LD (BLIT_STRUCT+6),HL
2057  5DBC
2058  5DBC FD 21 C3 5D  	LD IY, .RET
2059  5DC0 C3 B6 56     	JP ENABLE_PAGE0
2060  5DC3              .RET:
2061  5DC3 FB           	EI
2062  5DC4              	; set RAM functions to call
2063  5DC4 21 DE 5D     	LD HL, .TILECOPY
2064  5DC7 22 D2 5C     	LD (TILE.CALL2+1), HL
2065  5DCA 21 EF 5D     	LD HL, .SETDESTROW
2066  5DCD 22 C4 5C     	LD (TILE.CALL1+1), HL
2067  5DD0 DD 21 59 54  	LD IX,BLIT_STRUCT
2068  5DD4 CD A9 5C     	CALL TILE
2069  5DD7
2070  5DD7 D1               POP DE
2071  5DD8 C1               POP BC
2072  5DD9 CD 2D 56         CALL RESTORE_PAGE_INFO
2073  5DDC
2074  5DDC E1           	POP HL
2075  5DDD C9           	RET
2076  5DDE              .TILECOPY:
2077  5DDE ED A0       > LDI
2077  5DE0 ED A0       > LDI
2077  5DE2 ED A0       > LDI
2077  5DE4 ED A0       > LDI
2077  5DE6 ED A0       > LDI
2077  5DE8 ED A0       > LDI
2077  5DEA ED A0       > LDI
2077  5DEC ED A0       > LDI
2078  5DEE C9           	RET
2079  5DEF              .SETDESTROW:
2080  5DEF ED 5B 55 54  	LD DE, (TILETMP1)
2081  5DF3 C9           	RET
2082  5DF4              ; *******************************************************************************************************
2083  5DF4               ENDIF
2084  5DF4
2085  5DF4               IFDEF CMDS_WITH_PARAMETERS
2086  5DF4              ; *******************************************************************************************************
2087  5DF4              ; function to handle CALL TILEVRM basic extension
2088  5DF4              ; fills vram with tiles
2089  5DF4              ; TILEVRM ( INT tile_data_pointer,
2090  5DF4              ;			INT tile_columns,
2091  5DF4              ;			INT tile_rows,
2092  5DF4              ;			INT destination_begin_column,
2093  5DF4              ;			INT destination_begin_row,
2094  5DF4              ;			INT number_of_tiles_horizontally,
2095  5DF4              ;			INT	number_of_tiles_vertically )
2096  5DF4              ; will put ram in page 0 also, page 1 is already there
2097  5DF4              ; for destination uses address of SCREEN 2 pattern buffer and 32x24 size
2098  5DF4              TILEVRM:
2099  5DF4              	; opening (
2100  5DF4 CD 03 57     	CALL CHKCHAR
2101  5DF7 28           	DB '('
2102  5DF8              	; get tile data pointer coordinate
2103  5DF8 DD 21 2F 54  	LD IX, FRMQNT
2104  5DFC CD 59 01     	CALL CALBAS
2105  5DFF ED 53 59 54  	LD (BLIT_STRUCT+0), DE
2106  5E03              	; comma
2107  5E03 CD 03 57     	CALL CHKCHAR
2108  5E06 2C           	DB ','
2109  5E07              	; get tile columns
2110  5E07 DD 21 2F 54  	LD IX, FRMQNT
2111  5E0B CD 59 01     	CALL CALBAS
2112  5E0E ED 53 5D 54  	LD (BLIT_STRUCT+4), DE
2113  5E12              	; comma
2114  5E12 CD 03 57     	CALL CHKCHAR
2115  5E15 2C           	DB ','
2116  5E16              	; get tile columns
2117  5E16 DD 21 2F 54  	LD IX, FRMQNT
2118  5E1A CD 59 01     	CALL CALBAS
2119  5E1D ED 53 5B 54  	LD (BLIT_STRUCT+2), DE
2120  5E21              	; comma
2121  5E21 CD 03 57     	CALL CHKCHAR
2122  5E24 2C           	DB ','
2123  5E25              	; get destination begin column
2124  5E25 DD 21 2F 54  	LD IX, FRMQNT
2125  5E29 CD 59 01     	CALL CALBAS
2126  5E2C 7B           	LD A, E
2127  5E2D 32 57 54     	LD (BLIT_TMP+2), A
2128  5E30              	; comma
2129  5E30 CD 03 57     	CALL CHKCHAR
2130  5E33 2C           	DB ','
2131  5E34              	; get destination begin row
2132  5E34 DD 21 2F 54  	LD IX, FRMQNT
2133  5E38 CD 59 01     	CALL CALBAS
2134  5E3B 7B           	LD A, E
2135  5E3C 32 58 54     	LD (BLIT_TMP+3), A
2136  5E3F              	; comma
2137  5E3F CD 03 57     	CALL CHKCHAR
2138  5E42 2C           	DB ','
2139  5E43              	; get number of tiles horizontally
2140  5E43 DD 21 2F 54  	LD IX, FRMQNT
2141  5E47 CD 59 01     	CALL CALBAS
2142  5E4A ED 53 63 54  	LD (BLIT_STRUCT+10), DE
2143  5E4E              	; comma
2144  5E4E CD 03 57     	CALL CHKCHAR
2145  5E51 2C           	DB ','
2146  5E52              	; get number of tiles vertically
2147  5E52 DD 21 2F 54  	LD IX, FRMQNT
2148  5E56 CD 59 01     	CALL CALBAS
2149  5E59 ED 53 65 54  	LD (BLIT_STRUCT+12), DE
2150  5E5D              	; ending )
2151  5E5D CD 03 57     	CALL CHKCHAR
2152  5E60 29           	DB ')'
2153  5E61
2154  5E61 E5           	PUSH HL ; save position in BASIC buffer
2155  5E62
2156  5E62              	; calculate destination add to value
2157  5E62 21 00 01     	LD HL, 256
2158  5E65 22 61 54     	LD (BLIT_STRUCT+8), HL
2159  5E68              	; calculate pointer to background location
2160  5E68 3A 58 54     	LD A,(BLIT_TMP+3)
2161  5E6B 67           	LD H,A
2162  5E6C 2E 00        	LD L,0
2163  5E6E EB           	EX DE,HL
2164  5E6F 26 00        	LD H,0
2165  5E71 3A 57 54     	LD A,(BLIT_TMP+2)
2166  5E74 6F           	LD L,A
2167  5E75 CD F2 55     	CALL HLx8
2168  5E78 19           	ADD HL,DE
2169  5E79 ED 5B CB F3  	LD DE,(GRPCGP)
2170  5E7D 19           	ADD HL,DE
2171  5E7E 22 5F 54     	LD (BLIT_STRUCT+6),HL
2172  5E81
2173  5E81 FD 21 88 5E  	LD IY, .RET
2174  5E85 C3 B6 56     	JP ENABLE_PAGE0
2175  5E88              .RET:
2176  5E88 FB           	EI
2177  5E89              	; set RAM functions to call
2178  5E89 21 A3 5E     	LD HL, .TILECOPY
2179  5E8C 22 D2 5C     	LD (TILE.CALL2+1), HL
2180  5E8F 21 A9 5E     	LD HL, .SETDESTROW
2181  5E92 22 C4 5C     	LD (TILE.CALL1+1), HL
2182  5E95 DD 21 59 54  	LD IX,BLIT_STRUCT
2183  5E99 CD A9 5C     	CALL TILE
2184  5E9C
2185  5E9C D1               POP DE
2186  5E9D C1               POP BC
2187  5E9E CD 2D 56         CALL RESTORE_PAGE_INFO
2188  5EA1
2189  5EA1 E1           	POP HL
2190  5EA2 C9           	RET
2191  5EA3              .TILECOPY:
2192  5EA3 01 98 08     	LD BC, #0898
2193  5EA6 C3 EA 55     	JP BBYTECOPY
2194  5EA9              .SETDESTROW:
2195  5EA9 2A 55 54     	LD HL, (TILETMP1)
2196  5EAC F3           	DI
2197  5EAD CD DF 55     	CALL SETWRT_LOCAL
2198  5EB0 FB           	EI
2199  5EB1 C9           	RET
2200  5EB2              ; *******************************************************************************************************
2201  5EB2               ENDIF
2202  5EB2
2203  5EB2               IFNDEF CMDS_WITH_PARAMETERS
2204  5EB2 ~            ; *******************************************************************************************************
2205  5EB2 ~            ; function to handle CALL TILEVRM basic extension
2206  5EB2 ~            ; fills vram with tiles
2207  5EB2 ~            ; TILEVRM ( INT request_data_ptr )
2208  5EB2 ~            ; request_data_ptr described in TILE
2209  5EB2 ~            ; will put ram in page 0 also, page 1 is already there
2210  5EB2 ~            TILEVRM:
2211  5EB2 ~            	; opening (
2212  5EB2 ~            	CALL CHKCHAR
2213  5EB2 ~            	DB '('
2214  5EB2 ~            	; get pointer to request struct
2215  5EB2 ~            	LD IX, FRMQNT
2216  5EB2 ~            	CALL CALBAS
2217  5EB2 ~            	PUSH DE
2218  5EB2 ~            	; ending )
2219  5EB2 ~            	CALL CHKCHAR
2220  5EB2 ~            	DB ')'
2221  5EB2 ~
2222  5EB2 ~            	POP IX ; pointer to request struct
2223  5EB2 ~
2224  5EB2 ~            	PUSH HL ; save position in BASIC buffer
2225  5EB2 ~
2226  5EB2 ~            	LD IY, .RET
2227  5EB2 ~            	JP ENABLE_PAGE0
2228  5EB2 ~            .RET:
2229  5EB2 ~            	EI
2230  5EB2 ~            	; set RAM functions to call
2231  5EB2 ~            	LD HL, .TILECOPY
2232  5EB2 ~            	LD (TILE.CALL2+1), HL
2233  5EB2 ~            	LD HL, .SETDESTROW
2234  5EB2 ~            	LD (TILE.CALL1+1), HL
2235  5EB2 ~            	CALL TILE
2236  5EB2 ~
2237  5EB2 ~                POP DE
2238  5EB2 ~                POP BC
2239  5EB2 ~                CALL RESTORE_PAGE_INFO
2240  5EB2 ~
2241  5EB2 ~            	POP HL
2242  5EB2 ~            	RET
2243  5EB2 ~            .TILECOPY:
2244  5EB2 ~            	LD BC, #0898
2245  5EB2 ~            	JP BBYTECOPY
2246  5EB2 ~            .SETDESTROW:
2247  5EB2 ~            	LD HL, (TILETMP1)
2248  5EB2 ~            	DI
2249  5EB2 ~            	CALL SETWRT_LOCAL
2250  5EB2 ~            	EI
2251  5EB2 ~            	RET
2252  5EB2 ~            ; *******************************************************************************************************
2253  5EB2               ENDIF
2254  5EB2               ENDIF
2255  5EB2
2256  5EB2               IF (BOX_CMDS == 1)
2257  5EB2              ; *******************************************************************************************************
2258  5EB2              ; generic function to implement rectangle data copy
2259  5EB2              ; should be modified to call appropriate function for memory or vram
2260  5EB2              ; input IX=pointer to following structure
2261  5EB2              ; +00 source data pointer
2262  5EB2              ; +02 num bytes in a row
2263  5EB2              ; +04 number of rows
2264  5EB2              ; +06 source add-to value till next row
2265  5EB2              ; +08 destination address
2266  5EB2              ; +10 destination add-to value till next row
2267  5EB2              ; modifies AF, BC, DE, HL
2268  5EB2              RECTANGLE_COPY:
2269  5EB2 DD 6E 00     	LD L, (IX+0)
2270  5EB5 DD 66 01     	LD H, (IX+1) ; source address
2271  5EB8 DD 5E 08     	LD E, (IX+8)
2272  5EBB DD 56 09     	LD D, (IX+9) ; destination
2273  5EBE DD 46 04     	LD B, (IX+4) ; row number
2274  5EC1              .L1:
2275  5EC1 C5           	PUSH BC
2276  5EC2 E5           		PUSH HL
2277  5EC3 D5           			PUSH DE
2278  5EC4 DD 4E 02     				LD C, (IX+2)
2279  5EC7 DD 46 03     				LD B, (IX+3) ; num bytes in a row
2280  5ECA              .CALL1:
2281  5ECA CD 00 00     				CALL 0 ; set destination address from DE
2282  5ECD              .CALL2:
2283  5ECD CD 00 00     				CALL 0 ; copy data fn
2284  5ED0 E1           			POP HL
2285  5ED1 DD 4E 0A     			LD C, (IX+10)
2286  5ED4 DD 46 0B     			LD B, (IX+11) ; destination add-to
2287  5ED7 09           			ADD HL, BC
2288  5ED8 EB           			EX DE, HL
2289  5ED9 E1           		POP HL
2290  5EDA DD 4E 06     		LD C, (IX+6)
2291  5EDD DD 46 07     		LD B, (IX+7) ; src add-to
2292  5EE0 09           		ADD HL, BC
2293  5EE1 C1           	POP BC
2294  5EE2 10 DD        	DJNZ .L1
2295  5EE4 C9           	RET
2296  5EE5              ; *******************************************************************************************************
2297  5EE5
2298  5EE5              ; *******************************************************************************************************
2299  5EE5              ; function to handle CALL BOXMEMCPY basic extension
2300  5EE5              ; copies data with window like boundaries to ram
2301  5EE5              ; BOXMEMCPY ( INT request_data_ptr )
2302  5EE5              ; request_data_ptr described in RECTANGLE_COPY
2303  5EE5              ; will put ram in page 0 also, page 1 is already there
2304  5EE5              BOXMEMCPY:
2305  5EE5              	; opening (
2306  5EE5 CD 03 57     	CALL CHKCHAR
2307  5EE8 28           	DB '('
2308  5EE9              	; get pointer to request struct
2309  5EE9 DD 21 2F 54  	LD IX, FRMQNT
2310  5EED CD 59 01     	CALL CALBAS
2311  5EF0 D5           	PUSH DE
2312  5EF1              	; ending )
2313  5EF1 CD 03 57     	CALL CHKCHAR
2314  5EF4 29           	DB ')'
2315  5EF5
2316  5EF5 DD E1        	POP IX ; pointer to request struct
2317  5EF7
2318  5EF7 E5           	PUSH HL ; save position in BASIC buffer
2319  5EF8
2320  5EF8 FD 21 FF 5E  	LD IY, .RET
2321  5EFC C3 B6 56     	JP ENABLE_PAGE0
2322  5EFF              .RET:
2323  5EFF FB           	EI
2324  5F00              	; set RAM functions to call
2325  5F00 21 00 00     	LD HL, 0
2326  5F03 22 CA 5E     	LD (RECTANGLE_COPY.CALL1), HL ; NOP NOP
2327  5F06 22 CC 5E     	LD (RECTANGLE_COPY.CALL1+2), HL ; NOP NOP
2328  5F09 21 ED B0     	LD HL, #B0ED ; LDIR
2329  5F0C 22 CE 5E     	LD (RECTANGLE_COPY.CALL1+4), HL
2330  5F0F CD B2 5E     	CALL RECTANGLE_COPY
2331  5F12
2332  5F12 D1               POP DE
2333  5F13 C1               POP BC
2334  5F14 CD 2D 56         CALL RESTORE_PAGE_INFO
2335  5F17
2336  5F17 E1           	POP HL
2337  5F18 C9           	RET
2338  5F19              ; *******************************************************************************************************
2339  5F19
2340  5F19              ; *******************************************************************************************************
2341  5F19              ; function to handle CALL BOXMEMVRM basic extension
2342  5F19              ; copies data with window like boundaries to ram
2343  5F19              ; BOXMEMVRM ( INT request_data_ptr )
2344  5F19              ; request_data_ptr described in RECTANGLE_COPY
2345  5F19              ; will put ram in page 0 also, page 1 is already there
2346  5F19              BOXMEMVRM:
2347  5F19              	; opening (
2348  5F19 CD 03 57     	CALL CHKCHAR
2349  5F1C 28           	DB '('
2350  5F1D              	; get pointer to request struct
2351  5F1D DD 21 2F 54  	LD IX, FRMQNT
2352  5F21 CD 59 01     	CALL CALBAS
2353  5F24 D5           	PUSH DE
2354  5F25              	; ending )
2355  5F25 CD 03 57     	CALL CHKCHAR
2356  5F28 29           	DB ')'
2357  5F29
2358  5F29 DD E1        	POP IX ; pointer to request struct
2359  5F2B
2360  5F2B E5           	PUSH HL ; save position in BASIC buffer
2361  5F2C
2362  5F2C FD 21 33 5F  	LD IY, .RET
2363  5F30 C3 B6 56     	JP ENABLE_PAGE0
2364  5F33              .RET:
2365  5F33 FB           	EI
2366  5F34              	; set RAM functions to call
2367  5F34 21 5B 5F     	LD HL, .SETDEST
2368  5F37 22 CB 5E     	LD (RECTANGLE_COPY.CALL1+1), HL
2369  5F3A 21 63 5F     	LD HL, .COPYDATA
2370  5F3D 22 CE 5E     	LD (RECTANGLE_COPY.CALL2+1), HL
2371  5F40 3E CD        	LD A, #CD ; CALL
2372  5F42 32 CA 5E     	LD (RECTANGLE_COPY.CALL1), A
2373  5F45 32 CD 5E     	LD (RECTANGLE_COPY.CALL2), A
2374  5F48 3E 01        	LD A,1
2375  5F4A 32 6A 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
2376  5F4D CD B2 5E     	CALL RECTANGLE_COPY
2377  5F50 AF           	XOR A
2378  5F51 32 6A 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
2379  5F54
2380  5F54 D1               POP DE
2381  5F55 C1               POP BC
2382  5F56 CD 2D 56         CALL RESTORE_PAGE_INFO
2383  5F59
2384  5F59 E1           	POP HL
2385  5F5A C9           	RET
2386  5F5B              .SETDEST:
2387  5F5B EB           	EX DE, HL
2388  5F5C F3           	DI
2389  5F5D CD DF 55     	CALL SETWRT_LOCAL
2390  5F60 FB           	EI
2391  5F61 EB           	EX DE, HL
2392  5F62 C9           	RET
2393  5F63              .COPYDATA:
2394  5F63 41           	LD B, C
2395  5F64 0E 98        	LD C, #98
2396  5F66 C3 EA 55     	JP BBYTECOPY
2397  5F69              ; *******************************************************************************************************
2398  5F69               ENDIF
2399  5F69
2400  5F69              EXT_END:
2401  5F69
# file closed: asm\main.asm
