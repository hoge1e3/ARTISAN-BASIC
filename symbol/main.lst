# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; INCLUDE "system_variables.inc"
   4  4000              ; INCLUDE "system_hooks.inc"
   5  4000              ; INCLUDE "bios_calls.inc"
   6  4000
   7  4000              CHPUT   EQU     #A2
   8  4000              CALBAS	EQU		#159
   9  4000              ERRHAND EQU     #406F
  10  4000              FRMEVL  EQU     #4C64
  11  4000              FRESTR	EQU		#67D0
  12  4000              ; FRMQNT = formula quantificator
  13  4000              ; input HL=pointer to current program expression
  14  4000              ; output HL=next address
  15  4000              ; output DE=integer datum
  16  4000              FRMQNT	EQU		#542F
  17  4000              ; GETBYT = get byte parameter
  18  4000              ; input HL=pointer to current program expression
  19  4000              ; output HL=next address
  20  4000              ; output A=E=byte read
  21  4000              GETBYT	EQU		#521C
  22  4000              CHRGTR  EQU     #4666
  23  4000              SYNCHR	EQU		#558C
  24  4000              VALTYP  EQU     #F663
  25  4000              USR     EQU     #F7F8
  26  4000              PROCNM	EQU		#FD89
  27  4000              BIOS_FILVRM  EQU     #56
  28  4000              CLIKSW	EQU		#F3DB
  29  4000              ATRBAS	EQU		#F928
  30  4000
  31  4000              RAMAD0	EQU	0F341h	; Main-RAM Slot (00000h~03FFFh)
  32  4000              RAMAD1	EQU	0F342h	; Main-RAM Slot (04000h~07FFFh)
  33  4000              RAMAD2	EQU	0F343h	; Main-RAM Slot (08000h~0BFFFh)
  34  4000              RAMAD3	EQU	0F344h	; Main-RAM Slot (0C000h~0FFFFh)
  35  4000              EXPTBL	EQU #FCC1
  36  4000              SCRMOD	EQU #FCAF ; current screen mode
  37  4000
  38  4000              ; BASIC error codes
  39  4000              ;01 NEXT without FOR
  40  4000              ;02 Syntax error
  41  4000              ;03 RETURN without GOSUB
  42  4000              ;04 Out of DATA
  43  4000              ;05 Illegal function call
  44  4000              ;06 Overflow
  45  4000              ;07 Out of memory
  46  4000              ;08 Undefined line number
  47  4000              ;09 Subscript out of range
  48  4000              ;10 Redimensioned array
  49  4000              ;11 Division by zero
  50  4000              ;12 Illegal direct
  51  4000              ;13 Type mismatch
  52  4000              ;14 Out of string space
  53  4000              ;15 String too long
  54  4000              ;16 String formula too complex
  55  4000              ;17 Can't CONTINUE
  56  4000              ;18 Undefined user function
  57  4000              ;19 Device I/O error
  58  4000              ;20 Verify error
  59  4000              ;21 No RESUME
  60  4000              ;22 RESUME without error
  61  4000              ;23 Unprintable error
  62  4000              ;24 Missing operand
  63  4000              ;25 Line buffer overflow
  64  4000              ;50 FIELD overflow
  65  4000              ;51 Internal error
  66  4000              ;52 Bad file number
  67  4000              ;53 File not found
  68  4000              ;54 File already open
  69  4000              ;55 Input past end
  70  4000              ;56 Bad file name
  71  4000              ;57 Direct statement in file
  72  4000              ;58 Sequential I/O only
  73  4000              ;59 File not OPEN
  74  4000
  75  4000
  76  4000               ; simulate cartridge with BASIC extension
  77  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  77  4004 4D 4F 00 00
  77  4008 00 00 00 00
  77  400C 00 00 00 00
  78  4010
  79  4010              ; this location #400A stores last location used by basic extension
  80  4010              ; free memory after that point
  81  4010 C5 56         DW EXT_END
  82  4012
  83  4012              ; binary included AKG player compiled at #4012
  84  4012               INCBIN "bin/AKG.bin"
  85  4CEE               INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CEE              MAIN_PLAYER_START EQU 04012H
   2+ 4CEE              PLY_AKG_START EQU 04012H
   3+ 4CEE              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401BH
   4+ 4CEE              PLY_AKG_INITSOUNDEFFECTS EQU 0401BH
   5+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 0401FH
   6+ 4CEE              PLY_AKG_PLAYSOUNDEFFECT EQU 0401FH
   7+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04020H
   8+ 4CEE              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04020H
   9+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04047H
  10+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04047H
  11+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04055H
  12+ 4CEE              PLY_AKG_PSES_PLAY EQU 0408EH
  13+ 4CEE              PLY_AKG_PSES_READFIRSTBYTE EQU 04097H
  14+ 4CEE              PLY_AKG_PSES_S_ENDORLOOP EQU 040AFH
  15+ 4CEE              PLY_AKG_PSES_S_LOOP EQU 040BAH
  16+ 4CEE              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C0H
  17+ 4CEE              PLY_AKG_PSES_NOTREACHED EQU 040D3H
  18+ 4CEE              PLY_AKG_PSES_HARDWAREONLY EQU 040D7H
  19+ 4CEE              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040DEH
  20+ 4CEE              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F0H
  21+ 4CEE              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FAH
  22+ 4CEE              PLY_AKG_PSES_H_AFTERRETRIG EQU 04104H
  23+ 4CEE              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 04118H
  24+ 4CEE              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411DH
  25+ 4CEE              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04125H
  26+ 4CEE              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04130H
  27+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413CH
  28+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 0413EH
  29+ 4CEE              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04144H
  30+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 04148H
  31+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 04148H
  32+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414AH
  33+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414AH
  34+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414AH
  35+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414BH
  36+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414CH
  37+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04150H
  38+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04150H
  39+ 4CEE              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04150H
  40+ 4CEE              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 04158H
  41+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04160H
  42+ 4CEE              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04160H
  43+ 4CEE              PLY_AKG_INIT EQU 04160H
  44+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04160H
  45+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 0418EH
  46+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A2H
  47+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B4H
  48+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D3H
  49+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E0H
  50+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL EQU 041E6H
  51+ 4CEE              PLY_AKG_INITTABLE0 EQU 041E9H
  52+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041E9H
  53+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04203H
  54+ 4CEE              PLY_AKG_INITTABLE0_END EQU 04203H
  55+ 4CEE              PLY_AKG_INITTABLE1 EQU 04203H
  56+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04203H
  57+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04207H
  58+ 4CEE              PLY_AKG_INITTABLE1_END EQU 04207H
  59+ 4CEE              PLY_AKG_INITTABLEORA EQU 04207H
  60+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04207H
  61+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 0421FH
  62+ 4CEE              PLY_AKG_INITTABLEORA_END EQU 0421FH
  63+ 4CEE              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 0421FH
  64+ 4CEE              PLY_AKG_STOP EQU 0421FH
  65+ 4CEE              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04231H
  66+ 4CEE              PLY_AKG_PLAY EQU 04231H
  67+ 4CEE              PLY_AKG_TICKDECREASINGCOUNTER EQU 04239H
  68+ 4CEE              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 0423FH
  69+ 4CEE              PLY_AKG_READLINKER EQU 04244H
  70+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04244H
  71+ 4CEE              PLY_AKG_READLINKER_PTLINKER EQU 04244H
  72+ 4CEE              PLY_AKG_READLINKER_NOLOOP EQU 0424FH
  73+ 4CEE              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 04288H
  74+ 4CEE              PLY_AKG_READLINE EQU 0428BH
  75+ 4CEE              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428BH
  76+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04291H
  77+ 4CEE              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04291H
  78+ 4CEE              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 0429EH
  79+ 4CEE              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A2H
  80+ 4CEE              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A5H
  81+ 4CEE              PLY_AKG_SPEEDTRACK_END EQU 042A8H
  82+ 4CEE              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042A8H
  83+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042AEH
  84+ 4CEE              PLY_AKG_EVENTTRACK_PTTRACK EQU 042AEH
  85+ 4CEE              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BBH
  86+ 4CEE              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042BFH
  87+ 4CEE              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C2H
  88+ 4CEE              PLY_AKG_EVENTTRACK_END EQU 042C5H
  89+ 4CEE              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C5H
  90+ 4CEE              PLY_AKG_CHANNEL1_READTRACK EQU 042D1H
  91+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D1H
  92+ 4CEE              PLY_AKG_CHANNEL1_PTTRACK EQU 042D1H
  93+ 4CEE              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042ECH
  94+ 4CEE              PLY_AKG_CHANNEL1_WAIT EQU 042F7H
  95+ 4CEE              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 042FEH
  96+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 042FEH
  97+ 4CEE              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 042FEH
  98+ 4CEE              PLY_AKG_CHANNEL1_NOTE EQU 04307H
  99+ 4CEE              PLY_AKG_BASENOTEINDEX EQU 04307H
 100+ 4CEE              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 04309H
 101+ 4CEE              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 04309H
 102+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 04319H
 103+ 4CEE              PLY_AKG_INSTRUMENTSTABLE EQU 04319H
 104+ 4CEE              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432BH
 105+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433BH
 106+ 4CEE              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04363H
 107+ 4CEE              PLY_AKG_CHANNEL1_READCELLEND EQU 04366H
 108+ 4CEE              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04366H
 109+ 4CEE              PLY_AKG_CHANNEL2_READTRACK EQU 04372H
 110+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04372H
 111+ 4CEE              PLY_AKG_CHANNEL2_PTTRACK EQU 04372H
 112+ 4CEE              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438DH
 113+ 4CEE              PLY_AKG_CHANNEL2_WAIT EQU 04398H
 114+ 4CEE              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 0439FH
 115+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 0439FH
 116+ 4CEE              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 0439FH
 117+ 4CEE              PLY_AKG_CHANNEL2_NOTE EQU 043A8H
 118+ 4CEE              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043ADH
 119+ 4CEE              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043ADH
 120+ 4CEE              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043CFH
 121+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043DFH
 122+ 4CEE              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04407H
 123+ 4CEE              PLY_AKG_CHANNEL2_READCELLEND EQU 0440AH
 124+ 4CEE              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440AH
 125+ 4CEE              PLY_AKG_CHANNEL3_READTRACK EQU 04416H
 126+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04416H
 127+ 4CEE              PLY_AKG_CHANNEL3_PTTRACK EQU 04416H
 128+ 4CEE              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04431H
 129+ 4CEE              PLY_AKG_CHANNEL3_WAIT EQU 0443CH
 130+ 4CEE              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04443H
 131+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04443H
 132+ 4CEE              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04443H
 133+ 4CEE              PLY_AKG_CHANNEL3_NOTE EQU 0444CH
 134+ 4CEE              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04451H
 135+ 4CEE              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04451H
 136+ 4CEE              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04473H
 137+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04483H
 138+ 4CEE              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ABH
 139+ 4CEE              PLY_AKG_CHANNEL3_READCELLEND EQU 044AEH
 140+ 4CEE              PLY_AKG_CURRENTSPEED EQU 044AEH
 141+ 4CEE              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B0H
 142+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B3H
 143+ 4CEE              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B3H
 144+ 4CEE              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B6H
 145+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044B9H
 146+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044B9H
 147+ 4CEE              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C5H
 148+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CCH
 149+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044CFH
 150+ 4CEE              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D5H
 151+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044D8H
 152+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044D8H
 153+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E6H
 154+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EBH
 155+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F6H
 156+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044F9H
 157+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044F9H
 158+ 4CEE              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FCH
 159+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 044FFH
 160+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE EQU 044FFH
 161+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 04508H
 162+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04512H
 163+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04515H
 164+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04515H
 165+ 4CEE              PLY_AKG_CHANNEL1_PITCH EQU 04515H
 166+ 4CEE              PLY_AKG_CHANNEL1_ISPITCH EQU 04518H
 167+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451DH
 168+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451DH
 169+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04521H
 170+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04523H
 171+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04525H
 172+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452CH
 173+ 4CEE              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452DH
 174+ 4CEE              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04530H
 175+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04530H
 176+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454CH
 177+ 4CEE              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454CH
 178+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 04559H
 179+ 4CEE              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455DH
 180+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456DH
 181+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456DH
 182+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 0456EH
 183+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 0456FH
 184+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04571H
 185+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04571H
 186+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04571H
 187+ 4CEE              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04572H
 188+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04573H
 189+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04575H
 190+ 4CEE              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04575H
 191+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04575H
 192+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04575H
 193+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04575H
 194+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_END EQU 04578H
 195+ 4CEE              PLY_AKG_CHANNEL1_PITCH_END EQU 0457AH
 196+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04582H
 197+ 4CEE              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04582H
 198+ 4CEE              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04585H
 199+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 04588H
 200+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 04588H
 201+ 4CEE              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04594H
 202+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459BH
 203+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 0459EH
 204+ 4CEE              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A4H
 205+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A7H
 206+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A7H
 207+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B5H
 208+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BAH
 209+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C5H
 210+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045C8H
 211+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045C8H
 212+ 4CEE              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CBH
 213+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045CEH
 214+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045CEH
 215+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D7H
 216+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E1H
 217+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E4H
 218+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E4H
 219+ 4CEE              PLY_AKG_CHANNEL2_PITCH EQU 045E4H
 220+ 4CEE              PLY_AKG_CHANNEL2_ISPITCH EQU 045E7H
 221+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045ECH
 222+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045ECH
 223+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F0H
 224+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F2H
 225+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F4H
 226+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FBH
 227+ 4CEE              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FCH
 228+ 4CEE              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 045FFH
 229+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 045FFH
 230+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461BH
 231+ 4CEE              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461BH
 232+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 04628H
 233+ 4CEE              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462CH
 234+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463CH
 235+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463CH
 236+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463DH
 237+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 0463EH
 238+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04640H
 239+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04640H
 240+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04640H
 241+ 4CEE              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04641H
 242+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04642H
 243+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04644H
 244+ 4CEE              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04644H
 245+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04644H
 246+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04644H
 247+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04644H
 248+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_END EQU 04647H
 249+ 4CEE              PLY_AKG_CHANNEL2_PITCH_END EQU 04649H
 250+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04651H
 251+ 4CEE              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04651H
 252+ 4CEE              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04654H
 253+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04657H
 254+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04657H
 255+ 4CEE              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04663H
 256+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466AH
 257+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466DH
 258+ 4CEE              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04673H
 259+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04676H
 260+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04676H
 261+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04684H
 262+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 04689H
 263+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04694H
 264+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04697H
 265+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04697H
 266+ 4CEE              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469AH
 267+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469DH
 268+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469DH
 269+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A6H
 270+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B0H
 271+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B3H
 272+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B3H
 273+ 4CEE              PLY_AKG_CHANNEL3_PITCH EQU 046B3H
 274+ 4CEE              PLY_AKG_CHANNEL3_ISPITCH EQU 046B6H
 275+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BBH
 276+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BBH
 277+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046BFH
 278+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C1H
 279+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C3H
 280+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CAH
 281+ 4CEE              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CBH
 282+ 4CEE              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046CEH
 283+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046CEH
 284+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046EAH
 285+ 4CEE              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046EAH
 286+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F7H
 287+ 4CEE              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FBH
 288+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470BH
 289+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470BH
 290+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470CH
 291+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470DH
 292+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 0470FH
 293+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 0470FH
 294+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 0470FH
 295+ 4CEE              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04710H
 296+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04711H
 297+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04713H
 298+ 4CEE              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04713H
 299+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04713H
 300+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04713H
 301+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04713H
 302+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_END EQU 04716H
 303+ 4CEE              PLY_AKG_CHANNEL3_PITCH_END EQU 04718H
 304+ 4CEE              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04724H
 305+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04724H
 306+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04724H
 307+ 4CEE              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04727H
 308+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 04729H
 309+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 0472FH
 310+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04732H
 311+ 4CEE              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04732H
 312+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04735H
 313+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 0473EH
 314+ 4CEE              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04746H
 315+ 4CEE              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04753H
 316+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04753H
 317+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04753H
 318+ 4CEE              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04756H
 319+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 04758H
 320+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 0475EH
 321+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04761H
 322+ 4CEE              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04761H
 323+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04764H
 324+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476DH
 325+ 4CEE              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04775H
 326+ 4CEE              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04783H
 327+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04783H
 328+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04783H
 329+ 4CEE              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04786H
 330+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 04788H
 331+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 0478EH
 332+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04791H
 333+ 4CEE              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04791H
 334+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04794H
 335+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479DH
 336+ 4CEE              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A5H
 337+ 4CEE              PLY_AKG_SENDPSGREGISTERS EQU 047B4H
 338+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BCH
 339+ 4CEE              PLY_AKG_PSGREG01_INSTR EQU 047BCH
 340+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CCH
 341+ 4CEE              PLY_AKG_PSGREG23_INSTR EQU 047CCH
 342+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DDH
 343+ 4CEE              PLY_AKG_PSGREG45_INSTR EQU 047DDH
 344+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047EEH
 345+ 4CEE              PLY_AKG_PSGREG6_8_INSTR EQU 047EEH
 346+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 047FFH
 347+ 4CEE              PLY_AKG_PSGREG9_10_INSTR EQU 047FFH
 348+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04810H
 349+ 4CEE              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04810H
 350+ 4CEE              PLY_AKG_PSGREG13_OLDVALUE EQU 04825H
 351+ 4CEE              PLY_AKG_RETRIG EQU 04827H
 352+ 4CEE              PLY_AKG_PSGREG13_INSTR EQU 04829H
 353+ 4CEE              PLY_AKG_PSGREG13_END EQU 04838H
 354+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 04838H
 355+ 4CEE              PLY_AKG_SAVESP EQU 04838H
 356+ 4CEE              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483CH
 357+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTS EQU 04844H
 358+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04851H
 359+ 4CEE              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04851H
 360+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTS EQU 04859H
 361+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04866H
 362+ 4CEE              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04866H
 363+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTS EQU 0486EH
 364+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 04879H
 365+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS EQU 04879H
 366+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 04888H
 367+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 04888H
 368+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 0488FH
 369+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 0489FH
 370+ 4CEE              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 0489FH
 371+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A6H
 372+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A6H
 373+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048A9H
 374+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B2H
 375+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B2H
 376+ 4CEE              PLY_AKG_READINSTRUMENTCELL EQU 048B8H
 377+ 4CEE              PLY_AKG_NOSOFTNOHARD EQU 048C5H
 378+ 4CEE              PLY_AKG_NSNH_NONOISE EQU 048DAH
 379+ 4CEE              PLY_AKG_SOFT EQU 048DDH
 380+ 4CEE              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E4H
 381+ 4CEE              PLY_AKG_S_NOTSIMPLE EQU 048ECH
 382+ 4CEE              PLY_AKG_S_AFTERSIMPLETEST EQU 048EFH
 383+ 4CEE              PLY_AKG_HARDTOSOFT EQU 048FCH
 384+ 4CEE              PLY_AKG_HS_JUMPRATIO EQU 04907H
 385+ 4CEE              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04934H
 386+ 4CEE              PLY_AKG_ENDWITHOUTLOOP EQU 04936H
 387+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04936H
 388+ 4CEE              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04936H
 389+ 4CEE              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 0493EH
 390+ 4CEE              PLY_AKG_SH_JUMPRATIO EQU 0494BH
 391+ 4CEE              PLY_AKG_SH_JUMPRATIOEND EQU 0496CH
 392+ 4CEE              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497BH
 393+ 4CEE              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04981H
 394+ 4CEE              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499BH
 395+ 4CEE              PLY_AKG_H_RETRIGEND EQU 049ADH
 396+ 4CEE              PLY_AKG_H_AFTERRETRIG EQU 049AEH
 397+ 4CEE              PLY_AKG_ENDWITHLOOP EQU 049C0H
 398+ 4CEE              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C7H
 399+ 4CEE              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DDH
 400+ 4CEE              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EBH
 401+ 4CEE              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FBH
 402+ 4CEE              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A09H
 403+ 4CEE              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A18H
 404+ 4CEE              PLY_AKG_SHOHS_RETRIGEND EQU 04A27H
 405+ 4CEE              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A28H
 406+ 4CEE              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3AH
 407+ 4CEE              PLY_AKG_EFFECTTABLE EQU 04A48H
 408+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A48H
 409+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6CH
 410+ 4CEE              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6CH
 411+ 4CEE              PLY_AKG_EFFECT_RESET EQU 04A6FH
 412+ 4CEE              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A71H
 413+ 4CEE              PLY_AKG_EFFECT_VOLUME EQU 04A8CH
 414+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A98H
 415+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04A9EH
 416+ 4CEE              PLY_AKG_ARPEGGIOSTABLE EQU 04A9EH
 417+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC5H
 418+ 4CEE              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACCH
 419+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD2H
 420+ 4CEE              PLY_AKG_PITCHESTABLE EQU 04AD2H
 421+ 4CEE              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AF9H
 422+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B00H
 423+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B11H
 424+ 4CEE              PLY_AKG_EFFECT_PITCHDOWN EQU 04B18H
 425+ 4CEE              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B28H
 426+ 4CEE              PLY_AKG_EFFECT_PITCHUP EQU 04B3DH
 427+ 4CEE              PLY_AKG_EFFECT_PITCHSTOP EQU 04B4FH
 428+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B56H
 429+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B80H
 430+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B80H
 431+ 4CEE              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B99H
 432+ 4CEE              PLY_AKG_EFFECT_GLIDESPEED EQU 04B99H
 433+ 4CEE              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BABH
 434+ 4CEE              PLY_AKG_EFFECT_LEGATO EQU 04BC1H
 435+ 4CEE              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD5H
 436+ 4CEE              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDDH
 437+ 4CEE              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE5H
 438+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEDH
 439+ 4CEE              PLY_AKG_EVENT EQU 04BEDH
 440+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BEEH
 441+ 4CEE              PLY_AKG_PERIODTABLE EQU 04BEEH
 442+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BEEH
 443+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CEEH
 444+ 4CEE              PLY_AKG_PERIODTABLE_END EQU 04CEEH
 445+ 4CEE              PLY_AKG_END EQU 04CEEH
 446+ 4CEE              MAIN_PLAYER_END EQU 04CEEH
 447+ 4CEE              TESTEREND EQU 04CEEH
 448+ 4CEE
# file closed: ./symbol/AKG.sym
  86  4CEE
  87  4CEE              ORIG.HTIMI:
  88  4CEE 00 00 00 00  	DB 0, 0, 0, 0, 0
  88  4CF2 00
  89  4CF3               EXPORT ORIG.HTIMI
  90  4CF3
  91  4CF3              MUSIC_INIT_STATUS:
  92  4CF3 00            DB 0
  93  4CF4              SFX_INIT_STATUS:
  94  4CF4 00            DB 0
  95  4CF5              SOUND_ENABLED:
  96  4CF5 00            DB 0
  97  4CF6
  98  4CF6              SPRATR_INIT_STATUS:
  99  4CF6 00            DB 0
 100  4CF7              SPRATR_UPDATE_FLAG:
 101  4CF7 00 00         DW 0
 102  4CF9              SPRATR_DATA:
 103  4CF9 00 00         DW 0
 104  4CFB
 105  4CFB              ; to temporarily store stack pointer
 106  4CFB              TMPSP:
 107  4CFB 00 00         DW 0
 108  4CFD              ; to support sprite flicker
 109  4CFD              FLICKER:
 110  4CFD 00            DB 0
 111  4CFE
 112  4CFE              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 113  4CFE              ; per starting letter, if no commands with this letter, NULL value
 114  4CFE              CMDS:
 115  4CFE 00 00            DW 0 ; A
 116  4D00 00 00            DW 0 ; B
 117  4D02 00 00            DW 0 ; C
 118  4D04 00 00            DW 0 ; D
 119  4D06 00 00            DW 0 ; E
 120  4D08 63 4D            DW CMDS_F; F
 121  4D0A 76 4D            DW CMDS_G; G
 122  4D0C 00 00            DW 0 ; H
 123  4D0E 00 00            DW 0 ; I
 124  4D10 00 00            DW 0 ; J
 125  4D12 00 00            DW 0 ; K
 126  4D14 3C 4D            DW CMDS_L ; L
 127  4D16 46 4D            DW CMDS_M ; M
 128  4D18 00 00            DW 0 ; N
 129  4D1A 00 00            DW 0 ; O
 130  4D1C 00 00            DW 0 ; P
 131  4D1E 00 00            DW 0 ; Q
 132  4D20 00 00            DW 0 ; R
 133  4D22 8A 4D            DW CMDS_S ; S
 134  4D24 00 00            DW 0 ; T
 135  4D26 32 4D            DW CMDS_U ; U
 136  4D28 80 4D            DW CMDS_V ; V
 137  4D2A 00 00            DW 0 ; W
 138  4D2C 00 00            DW 0 ; X
 139  4D2E 00 00            DW 0 ; Y
 140  4D30 00 00            DW 0 ; Z
 141  4D32
 142  4D32              CMDS_U:
 143  4D32 55 50 52 49  	DEFB	"UPRINT",0      ; Print upper case string
 143  4D36 4E 54 00
 144  4D39 8A 4F        	DEFW	UPRINT
 145  4D3B 00               DB 0
 146  4D3C              CMDS_L:
 147  4D3C 4C 50 52 49  	DEFB	"LPRINT",0      ; Print lower case string
 147  4D40 4E 54 00
 148  4D43 A7 4F        	DEFW	LPRINT
 149  4D45 00               DB 0
 150  4D46              CMDS_M:
 151  4D46 4D 45 4D 56      DB "MEMVRM", 0
 151  4D4A 52 4D 00
 152  4D4D 9C 51            DW MEMVRM
 153  4D4F 4D 45 4D 43  	DB "MEMCPY", 0
 153  4D53 50 59 00
 154  4D56 0E 50        	DW MEMCPY
 155  4D58 4D 45 4C 44  	DB "MELDGRP", 0
 155  4D5C 47 52 50 00
 156  4D60 84 56        	DW MELDGRP
 157  4D62 00           	DB 0
 158  4D63              CMDS_F:
 159  4D63 46 49 4C 56      DB "FILVRM", 0
 159  4D67 52 4D 00
 160  4D6A 7E 50            DW FILVRM
 161  4D6C 46 49 4C 52      DB "FILRAM", 0
 161  4D70 41 4D 00
 162  4D73 C5 50            DW FILRAM
 163  4D75 00               DB 0
 164  4D76              CMDS_G:
 165  4D76 47 45 4E 43      DB "GENCAL", 0
 165  4D7A 41 4C 00
 166  4D7D 43 51            DW GENCAL
 167  4D7F 00           	DB	0
 168  4D80              CMDS_V:
 169  4D80 56 52 4D 4D  	DB "VRMMEM", 0
 169  4D84 45 4D 00
 170  4D87 1E 52        	DW VRMMEM
 171  4D89 00           	DB 0
 172  4D8A              CMDS_S:
 173  4D8A 53 50 52 53  	DB "SPRSET", 0
 173  4D8E 45 54 00
 174  4D91 FC 53        	DW SPRSET
 175  4D93 53 50 52 47  	DB "SPRGRPMOV", 0
 175  4D97 52 50 4D 4F
 175  4D9B 56 00
 176  4D9D BA 54        	DW SPRGRPMOV
 177  4D9F 53 4E 44 53  	DB "SNDSFX", 0
 177  4DA3 46 58 00
 178  4DA6 5D 53        	DW SNDSFX
 179  4DA8 53 4E 44 50  	DB "SNDPLYON", 0
 179  4DAC 4C 59 4F 4E
 179  4DB0 00
 180  4DB1 27 53        	DW SNDPLYON
 181  4DB3 53 4E 44 50  	DB "SNDPLYOFF", 0
 181  4DB7 4C 59 4F 46
 181  4DBB 46 00
 182  4DBD 3A 53        	DW SNDPLYOFF
 183  4DBF 53 4E 44 50  	DB "SNDPLYINI", 0
 183  4DC3 4C 59 49 4E
 183  4DC7 49 00
 184  4DC9 D6 52        	DW SNDPLYINIT
 185  4DCB 53 50 52 41  	DB "SPRATRINI", 0
 185  4DCF 54 52 49 4E
 185  4DD3 49 00
 186  4DD5 BE 53        	DW SPRATRINI
 187  4DD7 00           	DB 0
 188  4DD8
 189  4DD8              ; ****************************************************************************************************
 190  4DD8              ; function sets VRAM address
 191  4DD8              ; input HL=address
 192  4DD8              ; modifies AF
 193  4DD8              SETWRT_LOCAL:
 194  4DD8 7D           	LD	A, L
 195  4DD9 D3 99        	OUT	(099H), A
 196  4DDB 7C           	LD	A, H
 197  4DDC E6 3F        	AND	03FH
 198  4DDE F6 40        	OR	040H
 199  4DE0 D3 99        	OUT	(099H), A
 200  4DE2 C9           	RET
 201  4DE3              ; ****************************************************************************************************
 202  4DE3
 203  4DE3              ; ****************************************************************************************************
 204  4DE3              ; function gets slot and subslot data for specific page
 205  4DE3              ; input A=page (0, 1 or 2)
 206  4DE3              ; output B = 0A8H register value
 207  4DE3              ; output D = 0 is no subslots, 1 if yes
 208  4DE3              ; output C = 0A8H value when page 3 slot equals to requested page slot
 209  4DE3              ; output E = subslot value if present
 210  4DE3              ; modifies AF, BC, DE, HL
 211  4DE3              GET_PAGE_INFO:
 212  4DE3 6F               LD L, A
 213  4DE4 C6 C1            ADD A, low (EXPTBL)
 214  4DE6 32 F0 4D         LD (GET_PAGE_INFO_L1+1), A
 215  4DE9 DB A8            IN A, (0A8H)
 216  4DEB 47               LD B, A
 217  4DEC E6 3F            AND 03FH
 218  4DEE 4F               LD C, A
 219  4DEF              GET_PAGE_INFO_L1:
 220  4DEF 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 221  4DF2 E6 80            AND 080H
 222  4DF4 28 1B            JR Z, GET_PAGE_INFO_L2
 223  4DF6                  ; expanded
 224  4DF6 2D               DEC L
 225  4DF7 FA 16 4E         JP M, GET_PAGE_INFO_L3
 226  4DFA 2D               DEC L
 227  4DFB FA 14 4E         JP M, GET_PAGE_INFO_L4
 228  4DFE                  ; page 2
 229  4DFE 07               RLCA
 230  4DFF 07               RLCA
 231  4E00              GET_PAGE_INFO_L5:
 232  4E00 E6 C0            AND 0C0H
 233  4E02 B1               OR C
 234  4E03 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 235  4E05 4F               LD C, A
 236  4E06 3A FF FF         LD A, (0FFFFH)
 237  4E09 2F               CPL
 238  4E0A 5F               LD E, A
 239  4E0B 16 01            LD D, 1
 240  4E0D 78               LD A, B ; return stack
 241  4E0E D3 A8            OUT (0A8H), A
 242  4E10 C9               RET
 243  4E11              GET_PAGE_INFO_L2:
 244  4E11                  ; not expanded
 245  4E11 16 00            LD D, 0
 246  4E13 C9               RET
 247  4E14              GET_PAGE_INFO_L4:
 248  4E14                  ; page 1
 249  4E14 0F               RRCA
 250  4E15 0F               RRCA
 251  4E16              GET_PAGE_INFO_L3:
 252  4E16                  ; page 0
 253  4E16 0F               RRCA
 254  4E17 0F               RRCA
 255  4E18 18 E6            JR GET_PAGE_INFO_L5
 256  4E1A              ; ****************************************************************************************************
 257  4E1A
 258  4E1A              ; ****************************************************************************************************
 259  4E1A              ; function returns original slot and subslot info
 260  4E1A              ; input B = 0A8H register value
 261  4E1A              ; input D = 0 is no subslots, 1 if yes
 262  4E1A              ; input C = 0A8H value when page 3 slot equals to requested page slot
 263  4E1A              ; input E = subslot value if present
 264  4E1A              ; modifies AF
 265  4E1A              RESTORE_PAGE_INFO:
 266  4E1A 7A               LD A, D
 267  4E1B B7               OR A
 268  4E1C 28 07            JR Z, RESTORE_PAGE_INFO_L1
 269  4E1E 79               LD A, C
 270  4E1F D3 A8            OUT (0A8H), A
 271  4E21 7B               LD A, E
 272  4E22 32 FF FF         LD (0FFFFH), A
 273  4E25              RESTORE_PAGE_INFO_L1:
 274  4E25 78               LD A, B
 275  4E26 D3 A8            OUT (0A8H), A
 276  4E28 C9               RET
 277  4E29              ; ****************************************************************************************************
 278  4E29
 279  4E29              ; *******************************************************************************************************
 280  4E29              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 281  4E29              ; INPUT:  A = SLOT ID: EXXXSSPP
 282  4E29              ; E = EXPANDED FLAG
 283  4E29              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 284  4E29              ; PP = PRIMARY SLOT NUMBER
 285  4E29              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 286  4E29              ; CHANGES: AF, BC, DE
 287  4E29
 288  4E29              LOCAL_ENASLT:
 289  4E29 CD 49 4E         CALL L0353
 290  4E2C FA 36 4E         JP M, L0340
 291  4E2F DB A8            IN A, (0A8H)
 292  4E31 A1               AND C
 293  4E32 B0               OR B
 294  4E33 D3 A8            OUT (0A8H), A
 295  4E35 C9               RET
 296  4E36              L0340:
 297  4E36 E5               PUSH HL
 298  4E37 CD 6E 4E         CALL L0378
 299  4E3A 4F               LD C, A
 300  4E3B 06 00            LD B, 0
 301  4E3D 7D               LD A, L
 302  4E3E A4               AND H
 303  4E3F B2               OR D
 304  4E40 21 C5 FC         LD HL, 0FCC5H
 305  4E43 09               ADD HL, BC
 306  4E44 77               LD (HL), A
 307  4E45 E1               POP HL
 308  4E46 79               LD A, C
 309  4E47 18 E0            JR LOCAL_ENASLT
 310  4E49              L0353:
 311  4E49 F3               DI
 312  4E4A F5               PUSH AF
 313  4E4B 7C               LD A, H
 314  4E4C 07               RLCA
 315  4E4D 07               RLCA
 316  4E4E E6 03            AND 3
 317  4E50 5F               LD E, A
 318  4E51 3E C0            LD A, 0C0H
 319  4E53              L035D:
 320  4E53 07               RLCA
 321  4E54 07               RLCA
 322  4E55 1D               DEC E
 323  4E56 F2 53 4E         JP P, L035D
 324  4E59 5F               LD E, A
 325  4E5A 2F               CPL
 326  4E5B 4F               LD C, A
 327  4E5C F1               POP AF
 328  4E5D F5               PUSH AF
 329  4E5E E6 03            AND 3
 330  4E60 3C               INC A
 331  4E61 47               LD B, A
 332  4E62 3E AB            LD A, 0ABH
 333  4E64              L036E:
 334  4E64 C6 55            ADD A, 055H
 335  4E66 10 FC            DJNZ L036E
 336  4E68 57               LD D, A
 337  4E69 A3               AND E
 338  4E6A 47               LD B, A
 339  4E6B F1               POP AF
 340  4E6C A7               AND A
 341  4E6D C9               RET
 342  4E6E              L0378:
 343  4E6E F5               PUSH AF
 344  4E6F 7A               LD A, D
 345  4E70 E6 C0            AND 0C0H
 346  4E72 4F               LD C, A
 347  4E73 F1               POP AF
 348  4E74 F5               PUSH AF
 349  4E75 57               LD D, A
 350  4E76 DB A8            IN A, (0A8H)
 351  4E78 47               LD B, A
 352  4E79 E6 3F            AND 03FH
 353  4E7B B1               OR C
 354  4E7C D3 A8            OUT (0A8H), A
 355  4E7E 7A               LD A, D
 356  4E7F 0F               RRCA
 357  4E80 0F               RRCA
 358  4E81 E6 03            AND 3
 359  4E83 57               LD D, A
 360  4E84 3E AB            LD A, 0ABH
 361  4E86              L0390:
 362  4E86 C6 55            ADD A, 055H
 363  4E88 15               DEC D
 364  4E89 F2 86 4E         JP P, L0390
 365  4E8C A3               AND E
 366  4E8D 57               LD D, A
 367  4E8E 7B               LD A, E
 368  4E8F 2F               CPL
 369  4E90 67               LD H, A
 370  4E91 3A FF FF         LD A, (0FFFFH)
 371  4E94 2F               CPL
 372  4E95 6F               LD L, A
 373  4E96 A4               AND H
 374  4E97 B2               OR D
 375  4E98 32 FF FF         LD (0FFFFH), A
 376  4E9B 78               LD A, B
 377  4E9C D3 A8            OUT (0A8H), A
 378  4E9E F1               POP AF
 379  4E9F E6 03            AND 3
 380  4EA1 C9               RET
 381  4EA2              ; *******************************************************************************************************
 382  4EA2
 383  4EA2              ; *******************************************************************************************************
 384  4EA2              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
 385  4EA2              ; struct {
 386  4EA2              ; DW y
 387  4EA2              ; DW x
 388  4EA2              ; DW pattern (0-31)
 389  4EA2              ; DW color
 390  4EA2              ; } [32]
 391  4EA2              ; will hide sprites whose location is outside of visible area
 392  4EA2              ; works in screen 1 and 2
 393  4EA2              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
 394  4EA2              ; modifies AF, AF', BC, DE, HL
 395  4EA2              SPRATR_UPDATE:
 396  4EA2              	; check if initialized
 397  4EA2 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
 398  4EA5 B7           	OR A
 399  4EA6 C8           	RET Z
 400  4EA7              	; check if update requested
 401  4EA7 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 402  4EAA 7E           	LD A, (HL)
 403  4EAB B7           	OR A
 404  4EAC C8           	RET Z
 405  4EAD              	; check screen mode
 406  4EAD 3A AF FC     	LD A, (SCRMOD)
 407  4EB0 3D           	DEC A
 408  4EB1 28 02        	JR Z, .L0 ; screen 1
 409  4EB3 3D           	DEC A
 410  4EB4 C0           	RET NZ ; not screen 2
 411  4EB5              .L0:
 412  4EB5 06 20        	LD B, 32 ; sprite number
 413  4EB7 0E 98        	LD C, #98 ; register for vpd data output
 414  4EB9              	; set VDP address
 415  4EB9 2A 28 F9     	LD HL, (ATRBAS)
 416  4EBC 3A FD 4C     	LD A, (FLICKER)
 417  4EBF 5F           	LD E, A
 418  4EC0 08           	EX AF, AF'
 419  4EC1 7B           	LD A, E
 420  4EC2 87           	ADD A, A
 421  4EC3 87           	ADD A, A
 422  4EC4 16 00        	LD D, 0
 423  4EC6 5F           	LD E, A
 424  4EC7 19           	ADD HL, DE
 425  4EC8 CD D8 4D     	CALL SETWRT_LOCAL
 426  4ECB ED 73 FB 4C  	LD (TMPSP), SP
 427  4ECF ED 7B F9 4C  	LD SP, (SPRATR_DATA)
 428  4ED3
 429  4ED3              .LOOP:
 430  4ED3 E1           	POP HL
 431  4ED4 24           	INC H
 432  4ED5 28 0D        	JR Z, .L1 ; negative number above -256
 433  4ED7 25           	DEC H
 434  4ED8 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
 435  4EDA 7D           	LD A, L
 436  4EDB FE C0        	CP 192
 437  4EDD 30 10        	JR NC, .OUT3
 438  4EDF 3D           	DEC A ; due to VDP rule that top of screen is -1
 439  4EE0 57           	LD D, A
 440  4EE1 C3 FF 4E     	JP .X
 441  4EE4              .L1:
 442  4EE4 7D           	LD A, L
 443  4EE5 C6 10        	ADD 16
 444  4EE7 FA EF 4E     	JP M, .OUT3 ; below -16
 445  4EEA 2D           	DEC L ; due to VDP rule that top of screen is -1
 446  4EEB 55           	LD D, L
 447  4EEC C3 FF 4E     	JP .X
 448  4EEF              .OUT3:
 449  4EEF E1           	POP HL ; skip x value
 450  4EF0              .OUT2:
 451  4EF0 E1           	POP HL ; skip pattern
 452  4EF1 E1           	POP HL ; skip color
 453  4EF2 3E D1        	LD A, #D1
 454  4EF4 D3 98        	OUT (#98), A ; sprite hidden
 455  4EF6 D3 98        	OUT (#98), A ; value unimportant
 456  4EF8 D3 98        	OUT (#98), A ; value unimportant
 457  4EFA D3 98        	OUT (#98), A ; value unimportant
 458  4EFC C3 23 4F     	JP .NEXT
 459  4EFF              .X:
 460  4EFF E1           	POP HL
 461  4F00 24           	INC H
 462  4F01 28 08        	JR Z, .L2
 463  4F03 25           	DEC H
 464  4F04 20 EA        	JR NZ, .OUT2
 465  4F06 1E 00        	LD E, 0 ; EC bit
 466  4F08 C3 14 4F     	JP .XY
 467  4F0B              .L2:
 468  4F0B 7D           	LD A, L
 469  4F0C C6 20        	ADD 32
 470  4F0E FA F0 4E     	JP M, .OUT2
 471  4F11 6F           	LD L, A
 472  4F12 1E 80        	LD E, #80
 473  4F14              .XY:
 474  4F14 ED 51        	OUT (C), D
 475  4F16 ED 69        	OUT (C), L
 476  4F18 E1           	POP HL ; pattern
 477  4F19 7D           	LD A, L
 478  4F1A 87           	ADD A, A
 479  4F1B 87           	ADD A, A ; needs to go at 4x
 480  4F1C D3 98        	OUT (#98), A
 481  4F1E E1           	POP HL ; color
 482  4F1F 7D           	LD A, L
 483  4F20 B3           	OR E
 484  4F21 D3 98        	OUT (#98), A
 485  4F23              .NEXT:
 486  4F23 08           	EX AF, AF'
 487  4F24 3C           	INC A
 488  4F25 E6 1F        	AND 31
 489  4F27 C2 3B 4F     	JP NZ, .NEXT2
 490  4F2A 08           	EX AF, AF'
 491  4F2B 2A 28 F9     	LD HL, (ATRBAS)
 492  4F2E              	; CALL SETWRT_LOCAL not allowed as SP modified
 493  4F2E 7D           	LD	A, L
 494  4F2F D3 99        	OUT	(099H), A
 495  4F31 7C           	LD	A, H
 496  4F32 E6 3F        	AND	03FH
 497  4F34 F6 40        	OR	040H
 498  4F36 D3 99        	OUT	(099H), A
 499  4F38 C3 3C 4F     	JP .NEXT3
 500  4F3B              .NEXT2:
 501  4F3B 08           	EX AF, AF'
 502  4F3C              .NEXT3:
 503  4F3C 10 95        	DJNZ .LOOP
 504  4F3E 08           	EX AF, AF'
 505  4F3F 3C           	INC A
 506  4F40 32 FD 4C     	LD (FLICKER), A
 507  4F43
 508  4F43 ED 7B FB 4C  	LD SP, (TMPSP)
 509  4F47 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 510  4F4A 36 00        	LD (HL), 0 ; zero out update flag
 511  4F4C C9           	RET
 512  4F4D              ; *******************************************************************************************************
 513  4F4D
 514  4F4D              ; General BASIC CALL-instruction handler
 515  4F4D              CALLHAND:
 516  4F4D E5           	PUSH HL
 517  4F4E 21 FE 4C     	LD	HL, CMDS ; pointer table based on starting letter
 518  4F51 3A 89 FD         LD A, (PROCNM)
 519  4F54 D6 41            SUB 'A'
 520  4F56 87               ADD A, A
 521  4F57 16 00            LD D, 0
 522  4F59 5F               LD E, A
 523  4F5A 19               ADD HL, DE
 524  4F5B 5E               LD E, (HL)
 525  4F5C 23               INC HL
 526  4F5D 56               LD D, (HL)
 527  4F5E 7A               LD A, D
 528  4F5F B3               OR E
 529  4F60 28 24            JR Z, .CMDNOTRECOGNIZED
 530  4F62 EB               EX DE, HL
 531  4F63              .CHKCMD:
 532  4F63 11 89 FD     	LD	DE, PROCNM
 533  4F66 1A           .LOOP:	LD	A,(DE)
 534  4F67 BE           	CP	(HL)
 535  4F68 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 536  4F6A 13           	INC	DE
 537  4F6B 23           	INC	HL
 538  4F6C A7           	AND	A
 539  4F6D 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 540  4F6F 5E           	LD	E,(HL)
 541  4F70 23           	INC	HL
 542  4F71 56           	LD	D,(HL)
 543  4F72 E1           	POP	HL		; routine address
 544  4F73 CD F9 4F     	CALL	GETPREVCHAR
 545  4F76 CD 88 4F     	CALL	.CALLDE		; Call routine
 546  4F79 A7           	AND	A
 547  4F7A C9           	RET
 548  4F7B
 549  4F7B              .TONEXTCMD:
 550  4F7B 0E FF        	LD	C,0FFH
 551  4F7D AF           	XOR	A
 552  4F7E ED B1        	CPIR			; Skip to end of instruction name
 553  4F80 23           	INC	HL
 554  4F81 23           	INC	HL		; Skip address
 555  4F82 BE           	CP	(HL)
 556  4F83 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 557  4F85 E1           	POP	HL
 558  4F86              .CMDNOTRECOGNIZED:
 559  4F86 37               SCF
 560  4F87 C9           	RET
 561  4F88
 562  4F88              .CALLDE:
 563  4F88 D5           	PUSH	DE
 564  4F89 C9           	RET
 565  4F8A
 566  4F8A              ;---------------------------
 567  4F8A
 568  4F8A              ;---------------------------
 569  4F8A              UPRINT:
 570  4F8A CD CE 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 571  4F8D E5           	PUSH	HL
 572  4F8E CD C4 4F             CALL    GETSTRPNT
 573  4F91              .LOOP
 574  4F91 7E                   LD      A,(HL)
 575  4F92 CD 9E 4F             CALL    .UCASE
 576  4F95 CD A2 00             CALL    CHPUT  ;Print
 577  4F98 23                   INC     HL
 578  4F99 10 F6                DJNZ    .LOOP
 579  4F9B
 580  4F9B E1           	POP	HL
 581  4F9C B7           	OR      A
 582  4F9D C9           	RET
 583  4F9E
 584  4F9E              .UCASE:
 585  4F9E FE 61                CP      "a"
 586  4FA0 D8                   RET     C
 587  4FA1 FE 7B                CP      "z"+1
 588  4FA3 D0                   RET     NC
 589  4FA4 E6 DF                AND     %11011111
 590  4FA6 C9                   RET
 591  4FA7              ;---------------------------
 592  4FA7              LPRINT:
 593  4FA7 CD CE 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 594  4FAA E5           	PUSH	HL
 595  4FAB CD C4 4F             CALL    GETSTRPNT
 596  4FAE              .LOOP
 597  4FAE 7E                   LD      A,(HL)
 598  4FAF CD BB 4F             CALL    .LCASE
 599  4FB2 CD A2 00             CALL    CHPUT  ;Print
 600  4FB5 23                   INC     HL
 601  4FB6 10 F6                DJNZ    .LOOP
 602  4FB8
 603  4FB8 E1           	POP	HL
 604  4FB9 B7           	OR      A
 605  4FBA C9           	RET
 606  4FBB
 607  4FBB              .LCASE:
 608  4FBB FE 41                CP      "A"
 609  4FBD D8                   RET     C
 610  4FBE FE 5B                CP      "Z"+1
 611  4FC0 D0                   RET     NC
 612  4FC1 F6 20                OR      %00100000
 613  4FC3 C9                   RET
 614  4FC4              ;---------------------------
 615  4FC4
 616  4FC4              GETSTRPNT:
 617  4FC4              ; OUT:
 618  4FC4              ; HL = String Address
 619  4FC4              ; B  = Lenght
 620  4FC4
 621  4FC4 2A F8 F7             LD      HL,(USR)
 622  4FC7 46                   LD      B,(HL)
 623  4FC8 23                   INC     HL
 624  4FC9 5E                   LD      E,(HL)
 625  4FCA 23                   INC     HL
 626  4FCB 56                   LD      D,(HL)
 627  4FCC EB                   EX      DE,HL
 628  4FCD C9                   RET
 629  4FCE
 630  4FCE              EVALTXTPARAM:
 631  4FCE CD EF 4F     	CALL	CHKCHAR
 632  4FD1 28           	DEFB	"("             ; Check for (
 633  4FD2 DD 21 64 4C  	LD	IX,FRMEVL
 634  4FD6 CD 59 01     	CALL	CALBAS		; Evaluate expression
 635  4FD9 3A 63 F6             LD      A,(VALTYP)
 636  4FDC FE 03                CP      3               ; Text type?
 637  4FDE C2 01 50             JP      NZ,TYPE_MISMATCH
 638  4FE1 E5                   PUSH	HL
 639  4FE2 DD 21 D0 67          LD	IX,FRESTR         ; Free the temporary string
 640  4FE6 CD 59 01             CALL	CALBAS
 641  4FE9 E1                   POP	HL
 642  4FEA CD EF 4F     	CALL	CHKCHAR
 643  4FED 29           	DEFB	")"             ; Check for )
 644  4FEE C9                   RET
 645  4FEF
 646  4FEF
 647  4FEF              CHKCHAR:
 648  4FEF CD F9 4F     	CALL	GETPREVCHAR	; Get previous basic char
 649  4FF2 E3           	EX	(SP),HL
 650  4FF3 BE           	CP	(HL) 	        ; Check if good char
 651  4FF4 20 0F        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 652  4FF6 23           	INC	HL
 653  4FF7 E3           	EX	(SP),HL
 654  4FF8 23           	INC	HL		; Get next basic char
 655  4FF9
 656  4FF9              GETPREVCHAR:
 657  4FF9 2B           	DEC	HL
 658  4FFA DD 21 66 46  	LD	IX,CHRGTR
 659  4FFE C3 59 01     	JP      CALBAS
 660  5001
 661  5001
 662  5001              TYPE_MISMATCH:
 663  5001 1E 0D            LD E, 13 ; Type mismatch
 664  5003 18 02            JR THROW_ERROR
 665  5005
 666  5005              SYNTAX_ERROR:
 667  5005 1E 02            LD E, 2 ; Syntax error
 668  5007              THROW_ERROR:
 669  5007 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 670  500B C3 59 01     	JP	CALBAS
 671  500E
 672  500E              ;---------------------------
 673  500E
 674  500E              ; *******************************************************************************************************
 675  500E              ; function to handle CALL MEMCPY basic extension
 676  500E              ; _MEMCPY ( INT source,
 677  500E              ;			INT destination,
 678  500E              ;			INT count,
 679  500E              ;			BYTE enable_ram, >0 = true
 680  500E              ;			BYTE wait_vsync) >0 = treu
 681  500E              ; enable_ram will put ram in page 0 also, page 1 is already there
 682  500E              ; wait_vsync will issue HALT before copying
 683  500E              MEMCPY:
 684  500E              	; opening (
 685  500E CD EF 4F     	CALL CHKCHAR
 686  5011 28           	DB '('
 687  5012              	; get source address
 688  5012 DD 21 2F 54  	LD IX, FRMQNT
 689  5016 CD 59 01     	CALL CALBAS
 690  5019 D5           	PUSH DE
 691  501A              	; comma
 692  501A CD EF 4F     	CALL CHKCHAR
 693  501D 2C           	DB ','
 694  501E              	; get destination address
 695  501E DD 21 2F 54  	LD IX, FRMQNT
 696  5022 CD 59 01     	CALL CALBAS
 697  5025 D5           	PUSH DE
 698  5026              	; comma
 699  5026 CD EF 4F     	CALL CHKCHAR
 700  5029 2C           	DB ','
 701  502A              	; get length
 702  502A DD 21 2F 54  	LD IX, FRMQNT
 703  502E CD 59 01     	CALL CALBAS
 704  5031 D5           	PUSH DE
 705  5032              	; comma
 706  5032 CD EF 4F     	CALL CHKCHAR
 707  5035 2C           	DB ','
 708  5036              	; get ROM/RAM
 709  5036 DD 21 1C 52  	LD IX, GETBYT
 710  503A CD 59 01     	CALL CALBAS
 711  503D F5           	PUSH AF
 712  503E              	; comma
 713  503E CD EF 4F     	CALL CHKCHAR
 714  5041 2C           	DB ','
 715  5042              	; get vsync wait
 716  5042 DD 21 1C 52  	LD IX, GETBYT
 717  5046 CD 59 01     	CALL CALBAS
 718  5049 F5           	PUSH AF
 719  504A              	; ending )
 720  504A CD EF 4F     	CALL CHKCHAR
 721  504D 29           	DB ')'
 722  504E
 723  504E FB               EI
 724  504F              	; save position
 725  504F E5           	PUSH HL
 726  5050 DD E1        	POP IX
 727  5052
 728  5052              	; syntax ok
 729  5052              	; wait for vsync if needed
 730  5052 F1           	POP AF
 731  5053 B7           	OR A
 732  5054 28 01        	JR Z, .L1
 733  5056 76           	HALT
 734  5057
 735  5057              .L1:
 736  5057              	; enable RAM in page 0 if needed
 737  5057 F1           	POP AF
 738  5058 B7           	OR A
 739  5059              	; pop LDIR parameters and store away for later
 740  5059 C1           	POP BC
 741  505A D1           	POP DE
 742  505B E1           	POP HL
 743  505C 28 1A        	JR Z, .L2
 744  505E D9           	EXX
 745  505F AF               XOR A
 746  5060 CD E3 4D         CALL GET_PAGE_INFO
 747  5063 C5               PUSH BC
 748  5064 D5               PUSH DE
 749  5065 3A 41 F3         LD A, (RAMAD0)
 750  5068 26 00            LD H, 0
 751  506A F3           	DI
 752  506B CD 29 4E         CALL LOCAL_ENASLT
 753  506E D9           	EXX
 754  506F ED B0        	LDIR
 755  5071 D1               POP DE
 756  5072 C1               POP BC
 757  5073 CD 1A 4E         CALL RESTORE_PAGE_INFO
 758  5076 18 02        	JR .L3
 759  5078
 760  5078              .L2:
 761  5078 ED B0        	LDIR
 762  507A
 763  507A              .L3:
 764  507A DD E5        	PUSH IX
 765  507C E1           	POP HL
 766  507D C9           	RET
 767  507E              ; *******************************************************************************************************
 768  507E
 769  507E              ; *******************************************************************************************************
 770  507E              ; function to handle CALL FILVRM basic extension
 771  507E              ; FILVRM ( INT offset,
 772  507E              ;		   INT count,
 773  507E              ;		   BYTE value,
 774  507E              ;		   BYTE wait_vsync) >0 = true
 775  507E              ; wait_vsync will issue HALT before copying
 776  507E              FILVRM:
 777  507E              	; opening (
 778  507E CD EF 4F     	CALL CHKCHAR
 779  5081 28           	DB '('
 780  5082              	; get offset address
 781  5082 DD 21 2F 54  	LD IX, FRMQNT
 782  5086 CD 59 01     	CALL CALBAS
 783  5089 D5           	PUSH DE
 784  508A              	; comma
 785  508A CD EF 4F     	CALL CHKCHAR
 786  508D 2C           	DB ','
 787  508E              	; get count
 788  508E DD 21 2F 54  	LD IX, FRMQNT
 789  5092 CD 59 01     	CALL CALBAS
 790  5095 D5           	PUSH DE
 791  5096              	; comma
 792  5096 CD EF 4F     	CALL CHKCHAR
 793  5099 2C           	DB ','
 794  509A              	; get value
 795  509A DD 21 1C 52  	LD IX, GETBYT
 796  509E CD 59 01     	CALL CALBAS
 797  50A1 F5           	PUSH AF
 798  50A2              	; comma
 799  50A2 CD EF 4F     	CALL CHKCHAR
 800  50A5 2C           	DB ','
 801  50A6              	; get vsync wait
 802  50A6 DD 21 1C 52  	LD IX, GETBYT
 803  50AA CD 59 01     	CALL CALBAS
 804  50AD F5           	PUSH AF
 805  50AE              	; ending )
 806  50AE CD EF 4F     	CALL CHKCHAR
 807  50B1 29           	DB ')'
 808  50B2
 809  50B2 FB               EI
 810  50B3              	; save position
 811  50B3 E5           	PUSH HL
 812  50B4 DD E1        	POP IX
 813  50B6
 814  50B6              	; syntax ok
 815  50B6              	; wait for vsync if needed
 816  50B6 F1           	POP AF
 817  50B7 B7           	OR A
 818  50B8 28 01        	JR Z, .L1
 819  50BA 76           	HALT
 820  50BB
 821  50BB              .L1:
 822  50BB F1               POP AF ; value
 823  50BC C1               POP BC ; count
 824  50BD E1               POP HL ; offset
 825  50BE CD 56 00         CALL BIOS_FILVRM
 826  50C1
 827  50C1              .L3:
 828  50C1 DD E5        	PUSH IX
 829  50C3 E1           	POP HL
 830  50C4 C9           	RET
 831  50C5              ; *******************************************************************************************************
 832  50C5
 833  50C5              ; *******************************************************************************************************
 834  50C5              ; function to handle CALL FILRAM basic extension
 835  50C5              ; FILRAM ( INT start address,
 836  50C5              ;		   INT count,
 837  50C5              ;		   BYTE value,
 838  50C5              ;	   	   BYTE enable_ram, >0 = true
 839  50C5              ;		   BYTE wait_vsync) >0 = true
 840  50C5              ; enable_ram will put ram in page 0 also, page 1 is already there
 841  50C5              ; wait_vsync will issue HALT before copying
 842  50C5              FILRAM:
 843  50C5              	; opening (
 844  50C5 CD EF 4F     	CALL CHKCHAR
 845  50C8 28           	DB '('
 846  50C9              	; get start address
 847  50C9 DD 21 2F 54  	LD IX, FRMQNT
 848  50CD CD 59 01     	CALL CALBAS
 849  50D0 D5           	PUSH DE
 850  50D1              	; comma
 851  50D1 CD EF 4F     	CALL CHKCHAR
 852  50D4 2C           	DB ','
 853  50D5              	; get count
 854  50D5 DD 21 2F 54  	LD IX, FRMQNT
 855  50D9 CD 59 01     	CALL CALBAS
 856  50DC D5           	PUSH DE
 857  50DD              	; comma
 858  50DD CD EF 4F     	CALL CHKCHAR
 859  50E0 2C           	DB ','
 860  50E1              	; get value
 861  50E1 DD 21 1C 52  	LD IX, GETBYT
 862  50E5 CD 59 01     	CALL CALBAS
 863  50E8 F5           	PUSH AF
 864  50E9              	; comma
 865  50E9 CD EF 4F     	CALL CHKCHAR
 866  50EC 2C           	DB ','
 867  50ED              	; get ROM/RAM
 868  50ED DD 21 1C 52  	LD IX, GETBYT
 869  50F1 CD 59 01     	CALL CALBAS
 870  50F4 F5           	PUSH AF
 871  50F5              	; comma
 872  50F5 CD EF 4F     	CALL CHKCHAR
 873  50F8 2C           	DB ','
 874  50F9              	; get vsync wait
 875  50F9 DD 21 1C 52  	LD IX, GETBYT
 876  50FD CD 59 01     	CALL CALBAS
 877  5100 F5           	PUSH AF
 878  5101              	; ending )
 879  5101 CD EF 4F     	CALL CHKCHAR
 880  5104 29           	DB ')'
 881  5105
 882  5105 FB               EI
 883  5106              	; save position
 884  5106 E5           	PUSH HL
 885  5107 DD E1        	POP IX
 886  5109
 887  5109              	; syntax ok
 888  5109              	; wait for vsync if needed
 889  5109 F1           	POP AF
 890  510A B7           	OR A
 891  510B 28 01        	JR Z, .L1
 892  510D 76           	HALT
 893  510E
 894  510E              .L1:
 895  510E              	; enable RAM in page 0 if needed
 896  510E F1           	POP AF
 897  510F B7           	OR A
 898  5110              	; pop LDIR parameters and store away for later
 899  5110 D1           	POP DE ; actually AF
 900  5111 C1           	POP BC ; count
 901  5112 E1           	POP HL ; start address
 902  5113 28 1B        	JR Z, .L2
 903  5115 D9           	EXX
 904  5116 AF               XOR A
 905  5117 CD E3 4D         CALL GET_PAGE_INFO
 906  511A C5               PUSH BC
 907  511B D5               PUSH DE
 908  511C 3A 41 F3         LD A, (RAMAD0)
 909  511F 26 00            LD H, 0
 910  5121 F3           	DI
 911  5122 CD 29 4E         CALL LOCAL_ENASLT
 912  5125 D9           	EXX
 913  5126 CD 37 51     	CALL .FILLVALUE
 914  5129 D1               POP DE
 915  512A C1               POP BC
 916  512B CD 1A 4E         CALL RESTORE_PAGE_INFO
 917  512E 18 03        	JR .L3
 918  5130
 919  5130              .L2:
 920  5130 CD 37 51     	CALL .FILLVALUE
 921  5133
 922  5133              .L3:
 923  5133 DD E5        	PUSH IX
 924  5135 E1           	POP HL
 925  5136 C9           	RET
 926  5137
 927  5137              .FILLVALUE:
 928  5137 72               LD (HL), D
 929  5138 54               LD D, H
 930  5139 5D               LD E, L
 931  513A 13               INC DE
 932  513B 0B               DEC BC
 933  513C ED B0            LDIR
 934  513E C9               RET
 935  513F              ; *******************************************************************************************************
 936  513F
 937  513F              ; *******************************************************************************************************
 938  513F              ; function to handle CALL GENCAL basic extension
 939  513F              ; GENCAL ( INT fn_addr, = address of the function to call
 940  513F              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 941  513F              ; output values of reristers will also be stored at reg_list_ptr
 942  513F              GENCAL_VAR_SP:
 943  513F 00 00            DW 0
 944  5141              GENCAL_VAR_SP2:
 945  5141 00 00            DW 0
 946  5143              GENCAL:
 947  5143              	; opening (
 948  5143 CD EF 4F     	CALL CHKCHAR
 949  5146 28           	DB '('
 950  5147              	; get function address
 951  5147 DD 21 2F 54  	LD IX, FRMQNT
 952  514B CD 59 01     	CALL CALBAS
 953  514E D5           	PUSH DE
 954  514F              	; comma
 955  514F CD EF 4F     	CALL CHKCHAR
 956  5152 2C           	DB ','
 957  5153              	; get pointer to register list
 958  5153 DD 21 2F 54  	LD IX, FRMQNT
 959  5157 CD 59 01     	CALL CALBAS
 960  515A D5           	PUSH DE
 961  515B              	; ending )
 962  515B CD EF 4F     	CALL CHKCHAR
 963  515E 29           	DB ')'
 964  515F
 965  515F              	; save BASIC token position
 966  515F E5           	PUSH HL
 967  5160 D9               EXX
 968  5161 E1           	POP HL ; HL'=next basic token
 969  5162 D9               EXX
 970  5163
 971  5163 E1               POP HL ; get pointer to register values
 972  5164 ED 73 3F 51      LD (GENCAL_VAR_SP), SP
 973  5168 F3               DI
 974  5169 F9               LD SP, HL
 975  516A F1               POP AF
 976  516B C1               POP BC
 977  516C D1               POP DE
 978  516D E1               POP HL
 979  516E DD E1            POP IX
 980  5170 FD E1            POP IY
 981  5172 D9               EXX
 982  5173 ED 73 41 51      LD (GENCAL_VAR_SP2), SP
 983  5177 ED 7B 3F 51      LD SP, (GENCAL_VAR_SP)
 984  517B FB               EI
 985  517C D1               POP DE ; get function to call
 986  517D E5               PUSH HL
 987  517E CD 99 51         CALL .EXXDECALL
 988  5181 F3               DI
 989  5182 ED 73 3F 51      LD (GENCAL_VAR_SP), SP
 990  5186 ED 7B 41 51      LD SP, (GENCAL_VAR_SP2)
 991  518A FD E5            PUSH IY
 992  518C DD E5            PUSH IX
 993  518E E5               PUSH HL
 994  518F D5               PUSH DE
 995  5190 C5               PUSH BC
 996  5191 F5               PUSH AF
 997  5192 ED 7B 3F 51      LD SP, (GENCAL_VAR_SP)
 998  5196 FB               EI
 999  5197 E1               POP HL
1000  5198 C9           	RET
1001  5199
1002  5199              .EXXDECALL:
1003  5199 D5               PUSH DE
1004  519A D9               EXX
1005  519B C9               RET
1006  519C              ; *******************************************************************************************************
1007  519C
1008  519C              ; *******************************************************************************************************
1009  519C              ; function to handle CALL MEMVRM basic extension
1010  519C              ; copies from RAM to VRAM
1011  519C              ; _MEMVRM ( INT source,
1012  519C              ;			INT destination,
1013  519C              ;			INT count,
1014  519C              ;			BYTE enable_ram, >0 = true
1015  519C              ;			BYTE wait_vsync) >0 = treu
1016  519C              ; enable_ram will put ram in page 0 also, page 1 is already there
1017  519C              ; wait_vsync will issue HALT before copying
1018  519C              MEMVRM:
1019  519C              	; opening (
1020  519C CD EF 4F     	CALL CHKCHAR
1021  519F 28           	DB '('
1022  51A0              	; get source address
1023  51A0 DD 21 2F 54  	LD IX, FRMQNT
1024  51A4 CD 59 01     	CALL CALBAS
1025  51A7 D5           	PUSH DE
1026  51A8              	; comma
1027  51A8 CD EF 4F     	CALL CHKCHAR
1028  51AB 2C           	DB ','
1029  51AC              	; get destination address
1030  51AC DD 21 2F 54  	LD IX, FRMQNT
1031  51B0 CD 59 01     	CALL CALBAS
1032  51B3 D5           	PUSH DE
1033  51B4              	; comma
1034  51B4 CD EF 4F     	CALL CHKCHAR
1035  51B7 2C           	DB ','
1036  51B8              	; get length
1037  51B8 DD 21 2F 54  	LD IX, FRMQNT
1038  51BC CD 59 01     	CALL CALBAS
1039  51BF D5           	PUSH DE
1040  51C0              	; comma
1041  51C0 CD EF 4F     	CALL CHKCHAR
1042  51C3 2C           	DB ','
1043  51C4              	; get ROM/RAM
1044  51C4 DD 21 1C 52  	LD IX, GETBYT
1045  51C8 CD 59 01     	CALL CALBAS
1046  51CB F5           	PUSH AF
1047  51CC              	; comma
1048  51CC CD EF 4F     	CALL CHKCHAR
1049  51CF 2C           	DB ','
1050  51D0              	; get vsync wait
1051  51D0 DD 21 1C 52  	LD IX, GETBYT
1052  51D4 CD 59 01     	CALL CALBAS
1053  51D7 F5           	PUSH AF
1054  51D8              	; ending )
1055  51D8 CD EF 4F     	CALL CHKCHAR
1056  51DB 29           	DB ')'
1057  51DC
1058  51DC                  ; save position in BASIC text
1059  51DC E5           	PUSH HL
1060  51DD DD E1        	POP IX
1061  51DF
1062  51DF              	; syntax ok
1063  51DF              	; wait for vsync if needed
1064  51DF F1           	POP AF
1065  51E0 B7           	OR A
1066  51E1 28 03        	JR Z, .L1
1067  51E3 FB               EI
1068  51E4 76           	HALT
1069  51E5 F3               DI ; since interrupt can modify vram address
1070  51E6
1071  51E6              .L1:
1072  51E6              	; enable RAM in page 0 if needed
1073  51E6 F1           	POP AF
1074  51E7 B7           	OR A
1075  51E8              	; pop LDIR parameters and store away for later
1076  51E8 C1           	POP BC
1077  51E9 D1           	POP DE
1078  51EA E1           	POP HL
1079  51EB 28 1A        	JR Z, .L2
1080  51ED D9           	EXX
1081  51EE AF               XOR A
1082  51EF CD E3 4D         CALL GET_PAGE_INFO
1083  51F2 C5               PUSH BC
1084  51F3 D5               PUSH DE
1085  51F4 3A 41 F3         LD A, (RAMAD0)
1086  51F7 26 00            LD H, 0
1087  51F9 CD 29 4E         CALL LOCAL_ENASLT
1088  51FC D9           	EXX
1089  51FD CD 0E 52     	CALL .LDIRVM
1090  5200 D1               POP DE
1091  5201 C1               POP BC
1092  5202 CD 1A 4E         CALL RESTORE_PAGE_INFO
1093  5205 18 03        	JR .L3
1094  5207
1095  5207              .L2:
1096  5207 CD 0E 52     	CALL .LDIRVM
1097  520A
1098  520A              .L3:
1099  520A DD E5        	PUSH IX
1100  520C E1           	POP HL
1101  520D C9           	RET
1102  520E
1103  520E              .LDIRVM:
1104  520E EB           	EX DE, HL
1105  520F CD D8 4D     	CALL SETWRT_LOCAL
1106  5212 EB           	EX DE, HL
1107  5213
1108  5213              .L4:
1109  5213 7E               LD A, (HL)
1110  5214 D3 98            OUT (#98), A
1111  5216 23               INC HL
1112  5217 0B               DEC BC
1113  5218 79               LD A, C
1114  5219 B0               OR B
1115  521A C2 13 52         JP NZ, .L4
1116  521D C9               RET
1117  521E              ; *******************************************************************************************************
1118  521E
1119  521E              ; *******************************************************************************************************
1120  521E              ; function to handle CALL VRMMEM basic extension
1121  521E              ; copies from RAM to VRAM
1122  521E              ; _VRMMEM ( INT source,
1123  521E              ;			INT destination,
1124  521E              ;			INT count,
1125  521E              ;			BYTE enable_ram, >0 = true
1126  521E              ;			BYTE wait_vsync) >0 = true
1127  521E              ; enable_ram will put ram in page 0 also, page 1 is already there
1128  521E              ; wait_vsync will issue HALT before copying
1129  521E              VRMMEM:
1130  521E              	; opening (
1131  521E CD EF 4F     	CALL CHKCHAR
1132  5221 28           	DB '('
1133  5222              	; get source address
1134  5222 DD 21 2F 54  	LD IX, FRMQNT
1135  5226 CD 59 01     	CALL CALBAS
1136  5229 D5           	PUSH DE
1137  522A              	; comma
1138  522A CD EF 4F     	CALL CHKCHAR
1139  522D 2C           	DB ','
1140  522E              	; get destination address
1141  522E DD 21 2F 54  	LD IX, FRMQNT
1142  5232 CD 59 01     	CALL CALBAS
1143  5235 D5           	PUSH DE
1144  5236              	; comma
1145  5236 CD EF 4F     	CALL CHKCHAR
1146  5239 2C           	DB ','
1147  523A              	; get length
1148  523A DD 21 2F 54  	LD IX, FRMQNT
1149  523E CD 59 01     	CALL CALBAS
1150  5241 D5           	PUSH DE
1151  5242              	; comma
1152  5242 CD EF 4F     	CALL CHKCHAR
1153  5245 2C           	DB ','
1154  5246              	; get ROM/RAM
1155  5246 DD 21 1C 52  	LD IX, GETBYT
1156  524A CD 59 01     	CALL CALBAS
1157  524D F5           	PUSH AF
1158  524E              	; comma
1159  524E CD EF 4F     	CALL CHKCHAR
1160  5251 2C           	DB ','
1161  5252              	; get vsync wait
1162  5252 DD 21 1C 52  	LD IX, GETBYT
1163  5256 CD 59 01     	CALL CALBAS
1164  5259 F5           	PUSH AF
1165  525A              	; ending )
1166  525A CD EF 4F     	CALL CHKCHAR
1167  525D 29           	DB ')'
1168  525E
1169  525E                  ; save position in BASIC text
1170  525E E5           	PUSH HL
1171  525F DD E1        	POP IX
1172  5261
1173  5261              	; syntax ok
1174  5261              	; wait for vsync if needed
1175  5261 F1           	POP AF
1176  5262 B7           	OR A
1177  5263 28 03        	JR Z, .L1
1178  5265 FB               EI
1179  5266 76           	HALT
1180  5267 F3               DI ; since interrupt can modify vram address
1181  5268
1182  5268              .L1:
1183  5268              	; enable RAM in page 0 if needed
1184  5268 F1           	POP AF
1185  5269 B7           	OR A
1186  526A              	; pop LDIR parameters and store away for later
1187  526A C1           	POP BC
1188  526B D1           	POP DE
1189  526C E1           	POP HL
1190  526D 28 1A        	JR Z, .L2
1191  526F D9           	EXX
1192  5270 AF               XOR A
1193  5271 CD E3 4D         CALL GET_PAGE_INFO
1194  5274 C5               PUSH BC
1195  5275 D5               PUSH DE
1196  5276 3A 41 F3         LD A, (RAMAD0)
1197  5279 26 00            LD H, 0
1198  527B CD 29 4E         CALL LOCAL_ENASLT
1199  527E D9           	EXX
1200  527F CD 90 52     	CALL .LDIRMV
1201  5282 D1               POP DE
1202  5283 C1               POP BC
1203  5284 CD 1A 4E         CALL RESTORE_PAGE_INFO
1204  5287 18 03        	JR .L3
1205  5289
1206  5289              .L2:
1207  5289 CD 90 52     	CALL .LDIRMV
1208  528C
1209  528C              .L3:
1210  528C DD E5        	PUSH IX
1211  528E E1           	POP HL
1212  528F C9           	RET
1213  5290
1214  5290              .LDIRMV:
1215  5290 CD D8 4D     	CALL SETWRT_LOCAL
1216  5293              .L4:
1217  5293 DB 98            IN A, (#98)
1218  5295 12           	LD (DE), A
1219  5296 13               INC DE
1220  5297 0B               DEC BC
1221  5298 79               LD A, C
1222  5299 B0               OR B
1223  529A C2 93 52         JP NZ, .L4
1224  529D C9               RET
1225  529E              ; *******************************************************************************************************
1226  529E
1227  529E              ; *******************************************************************************************************
1228  529E              ; H.TIMI function
1229  529E              MBGE_HTIMI:
1230  529E               EXPORT MBGE_HTIMI
1231  529E F5           	PUSH AF
1232  529F
1233  529F CD A2 4E     	CALL SPRATR_UPDATE
1234  52A2
1235  52A2 3A F5 4C     	LD A, (SOUND_ENABLED)
1236  52A5 B7           	OR A
1237  52A6 28 2A        	JR Z, .EXIT
1238  52A8
1239  52A8              	; enable page 2
1240  52A8 3E 02            LD A, 2
1241  52AA CD E3 4D         CALL GET_PAGE_INFO
1242  52AD C5               PUSH BC
1243  52AE D5               PUSH DE
1244  52AF 3A 43 F3         LD A, (RAMAD2)
1245  52B2 26 80            LD H, 080H
1246  52B4 CD 29 4E         CALL LOCAL_ENASLT
1247  52B7              	; enable page 0
1248  52B7 AF               XOR A
1249  52B8 CD E3 4D         CALL GET_PAGE_INFO
1250  52BB C5               PUSH BC
1251  52BC D5               PUSH DE
1252  52BD 3A 41 F3         LD A, (RAMAD0)
1253  52C0 26 00            LD H, 0
1254  52C2 CD 29 4E         CALL LOCAL_ENASLT
1255  52C5
1256  52C5 CD 31 42     	CALL PLY_AKG_PLAY
1257  52C8
1258  52C8              	; restore page 0
1259  52C8 D1               POP DE
1260  52C9 C1               POP BC
1261  52CA CD 1A 4E         CALL RESTORE_PAGE_INFO
1262  52CD              	; restore page 2
1263  52CD D1               POP DE
1264  52CE C1               POP BC
1265  52CF CD 1A 4E         CALL RESTORE_PAGE_INFO
1266  52D2
1267  52D2              .EXIT:
1268  52D2 F1           	POP AF
1269  52D3 C3 EE 4C     	JP ORIG.HTIMI
1270  52D6              ; *******************************************************************************************************
1271  52D6
1272  52D6              ; *******************************************************************************************************
1273  52D6              ; function to handle CALL SNDPLYINIT basic extension
1274  52D6              ; initializes sound player
1275  52D6              ; _SNDPLYINIT ( INT music_offset,
1276  52D6              ;				INT sfx_offset, can be -1 if no SFX
1277  52D6              ; will put ram in page 0 also, page 1 is already there
1278  52D6              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1279  52D6              SNDPLYINIT:
1280  52D6              	; opening (
1281  52D6 CD EF 4F     	CALL CHKCHAR
1282  52D9 28           	DB '('
1283  52DA              	; get music address
1284  52DA DD 21 2F 54  	LD IX, FRMQNT
1285  52DE CD 59 01     	CALL CALBAS
1286  52E1 D5           	PUSH DE
1287  52E2              	; comma
1288  52E2 CD EF 4F     	CALL CHKCHAR
1289  52E5 2C           	DB ','
1290  52E6              	; get sfx address
1291  52E6 DD 21 2F 54  	LD IX, FRMQNT
1292  52EA CD 59 01     	CALL CALBAS
1293  52ED D5           	PUSH DE
1294  52EE              	; ending )
1295  52EE CD EF 4F     	CALL CHKCHAR
1296  52F1 29           	DB ')'
1297  52F2
1298  52F2                  ; save position in BASIC text
1299  52F2 44           	LD B, H
1300  52F3 4D           	LD C, L
1301  52F4
1302  52F4              	; pop LDIR parameters and store away for later
1303  52F4 D1           	POP DE ; sfx address
1304  52F5 E1           	POP HL ; music address
1305  52F6 C5           	PUSH BC ; basic text location
1306  52F7 D9           	EXX
1307  52F8 AF               XOR A
1308  52F9 CD E3 4D         CALL GET_PAGE_INFO
1309  52FC C5               PUSH BC
1310  52FD D5               PUSH DE
1311  52FE 3A 41 F3         LD A, (RAMAD0)
1312  5301 26 00            LD H, 0
1313  5303 CD 29 4E         CALL LOCAL_ENASLT
1314  5306 D9           	EXX
1315  5307
1316  5307 D5           	PUSH DE
1317  5308 AF           	XOR A
1318  5309              	; HL = music location
1319  5309 CD 60 41     	CALL PLY_AKG_INIT
1320  530C 3E 01        	LD A, 1
1321  530E 32 F3 4C     	LD (MUSIC_INIT_STATUS), A
1322  5311
1323  5311 E1           	POP HL
1324  5312 23           	INC HL
1325  5313 7D           	LD A, L
1326  5314 B4           	OR H
1327  5315 28 09        	JR Z,.L1
1328  5317 2B           	DEC HL
1329  5318 CD 1B 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1330  531B 3E 01        	LD A, 1
1331  531D 32 F4 4C     	LD (SFX_INIT_STATUS), A
1332  5320              .L1:
1333  5320 D1               POP DE
1334  5321 C1               POP BC
1335  5322 CD 1A 4E         CALL RESTORE_PAGE_INFO
1336  5325
1337  5325 E1           	POP HL
1338  5326 C9           	RET
1339  5327              ; *******************************************************************************************************
1340  5327
1341  5327              ; *******************************************************************************************************
1342  5327              ; function to handle CALL SNDPLYON basic extension
1343  5327              ; enables sound player
1344  5327              ; _SNDPLYON
1345  5327              ; sets SOUND_ENABLED variable to 1 if init call was done
1346  5327              ; if not throws out of data error
1347  5327              SNDPLYON:
1348  5327 3A F3 4C     	LD A, (MUSIC_INIT_STATUS)
1349  532A B7           	OR A
1350  532B 20 05        	JR NZ, .L1
1351  532D              	; player not initialized, throw error
1352  532D 1E 04        	LD E, 04 ; Out of DATA
1353  532F C3 07 50     	JP THROW_ERROR
1354  5332              .L1:
1355  5332 32 F5 4C     	LD (SOUND_ENABLED), A
1356  5335              	; disable key click
1357  5335 AF           	XOR A
1358  5336 32 DB F3     	LD (CLIKSW), A
1359  5339 C9           	RET
1360  533A              ; *******************************************************************************************************
1361  533A
1362  533A              ; *******************************************************************************************************
1363  533A              ; function to handle CALL SNDPLYOFF basic extension
1364  533A              ; disables sound player
1365  533A              ; _SNDPLYOFF
1366  533A              ; sets SOUND_ENABLED variable to 0
1367  533A              ; calls AKG to stop music and SFX on all channels if initialized
1368  533A              SNDPLYOFF:
1369  533A 3A F5 4C     	LD A, (SOUND_ENABLED)
1370  533D B7           	OR A
1371  533E C8           	RET Z ; already stopped
1372  533F AF           	XOR A
1373  5340 32 F5 4C     	LD (SOUND_ENABLED), A
1374  5343 E5           	PUSH HL
1375  5344 CD 1F 42     	CALL PLY_AKG_STOP
1376  5347 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1377  534A B7           	OR A
1378  534B 28 0E        	JR Z, .EXIT ; SFX not in use
1379  534D AF           	XOR A
1380  534E CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1381  5351 3E 01        	LD A, 1
1382  5353 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1383  5356 3E 02        	LD A, 2
1384  5358 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1385  535B              .EXIT:
1386  535B E1           	POP HL
1387  535C C9           	RET
1388  535D              ; *******************************************************************************************************
1389  535D
1390  535D              ; *******************************************************************************************************
1391  535D              ; function to handle CALL SNDSFX basic extension
1392  535D              ; plays a sound effect
1393  535D              ; _SNDSFX ( BYTE sfx_number, >0
1394  535D              ;			BYTE channel, = 0,1 or 2
1395  535D              ;			BYTE inverted_volume = 0-16, 0 being full volume
1396  535D              ; will put ram in page 0 also, page 1 is already there
1397  535D              ; if sound off throws illegal function call
1398  535D              ; if sfx not initialized, throws out of data
1399  535D              SNDSFX:
1400  535D              	; opening (
1401  535D CD EF 4F     	CALL CHKCHAR
1402  5360 28           	DB '('
1403  5361              	; get sfx_number
1404  5361 DD 21 1C 52  	LD IX, GETBYT
1405  5365 CD 59 01     	CALL CALBAS
1406  5368 D5           	PUSH DE
1407  5369              	; comma
1408  5369 CD EF 4F     	CALL CHKCHAR
1409  536C 2C           	DB ','
1410  536D              	; get sfx address
1411  536D DD 21 1C 52  	LD IX, GETBYT
1412  5371 CD 59 01     	CALL CALBAS
1413  5374 D5           	PUSH DE
1414  5375              	; comma
1415  5375 CD EF 4F     	CALL CHKCHAR
1416  5378 2C           	DB ','
1417  5379              	; get inverted volume
1418  5379 DD 21 1C 52  	LD IX, GETBYT
1419  537D CD 59 01     	CALL CALBAS
1420  5380 D5           	PUSH DE
1421  5381              	; ending )
1422  5381 CD EF 4F     	CALL CHKCHAR
1423  5384 29           	DB ')'
1424  5385
1425  5385 3A F5 4C     	LD A, (SOUND_ENABLED)
1426  5388 B7           	OR A
1427  5389 20 05        	JR NZ, .L1
1428  538B              	; sound disabled, throw illegal function call
1429  538B 1E 05        	LD E, 5
1430  538D C3 07 50     	JP THROW_ERROR
1431  5390              .L1:
1432  5390 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1433  5393 B7           	OR A
1434  5394 20 05        	JR NZ, .L2
1435  5396              	; sfx data not initialized, throw out of data
1436  5396 1E 04        	LD E, 4
1437  5398 C3 07 50     	JP THROW_ERROR
1438  539B              .L2:
1439  539B              	; pop  parameters and store away for later
1440  539B D1           	POP DE ; inverted volume
1441  539C 43           	LD B, E
1442  539D D1           	POP DE ; channel
1443  539E 4B           	LD C, E
1444  539F D1           	POP DE
1445  53A0 7B           	LD A, E
1446  53A1 08           	EX AF, AF'
1447  53A2 E5           	PUSH HL ; basic text location
1448  53A3 D9           	EXX
1449  53A4 AF               XOR A
1450  53A5 CD E3 4D         CALL GET_PAGE_INFO
1451  53A8 C5               PUSH BC
1452  53A9 D5               PUSH DE
1453  53AA 3A 41 F3         LD A, (RAMAD0)
1454  53AD 26 00            LD H, 0
1455  53AF CD 29 4E         CALL LOCAL_ENASLT
1456  53B2 D9           	EXX
1457  53B3 08           	EX AF, AF'
1458  53B4 CD 1F 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1459  53B7
1460  53B7 D1               POP DE
1461  53B8 C1               POP BC
1462  53B9 CD 1A 4E         CALL RESTORE_PAGE_INFO
1463  53BC
1464  53BC E1           	POP HL
1465  53BD C9           	RET
1466  53BE              ; *******************************************************************************************************
1467  53BE
1468  53BE              ; *******************************************************************************************************
1469  53BE              ; function to handle CALL SPRATRINI basic extension
1470  53BE              ; initializes sprites handler
1471  53BE              ; _SPRATRINI ( INT sprites_attributes_data,
1472  53BE              ;			   INT update_variable_location )
1473  53BE              ; expects both locations to be in range #8000+ or throws an error
1474  53BE              ; since these should be BASIC variables
1475  53BE              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA
1476  53BE              SPRATRINI:
1477  53BE              	; opening (
1478  53BE CD EF 4F     	CALL CHKCHAR
1479  53C1 28           	DB '('
1480  53C2              	; get address of sprite attribute table DIM SA%(3,31)
1481  53C2 DD 21 2F 54  	LD IX, FRMQNT
1482  53C6 CD 59 01     	CALL CALBAS
1483  53C9 D5           	PUSH DE
1484  53CA              	; comma
1485  53CA CD EF 4F     	CALL CHKCHAR
1486  53CD 2C           	DB ','
1487  53CE              	; get update variable location SU%
1488  53CE DD 21 2F 54  	LD IX, FRMQNT
1489  53D2 CD 59 01     	CALL CALBAS
1490  53D5 D5           	PUSH DE
1491  53D6              	; ending )
1492  53D6 CD EF 4F     	CALL CHKCHAR
1493  53D9 29           	DB ')'
1494  53DA
1495  53DA D1           	POP DE ; update variable location
1496  53DB CB 7A        	BIT 7, D ; is address >= &h8000
1497  53DD 20 05        	JR NZ, .L1
1498  53DF 1E 05        	LD E, 5 ; illegal function call
1499  53E1 C3 07 50     	JP THROW_ERROR
1500  53E4              .L1:
1501  53E4 ED 53 F7 4C  	LD (SPRATR_UPDATE_FLAG), DE
1502  53E8 D1           	POP DE ; address of sprite attribute table
1503  53E9 CB 7A        	BIT 7, D ; is address >= &h8000
1504  53EB 20 05        	JR NZ, .L2
1505  53ED 1E 05        	LD E, 5 ; illegal function call
1506  53EF C3 07 50     	JP THROW_ERROR
1507  53F2              .L2:
1508  53F2 ED 53 F9 4C  	LD (SPRATR_DATA), DE
1509  53F6 3E 01        	LD A, 1
1510  53F8 32 F6 4C     	LD (SPRATR_INIT_STATUS), A
1511  53FB C9           	RET
1512  53FC              ; *******************************************************************************************************
1513  53FC
1514  53FC              ; *******************************************************************************************************
1515  53FC              ; function to handle CALL SPRSET basic extension
1516  53FC              ; sets position, and optionally pattern and color of sprite
1517  53FC              ; _SPRSET ( BYTE sprite_num , valid 0-31
1518  53FC              ;			INT x,
1519  53FC              ;			INT y,
1520  53FC              ;			INT pattern, valid 0-31, otherwise ignored
1521  53FC              ;			INT color, valid 0-15, otherwise ignored
1522  53FC              SPRSET:
1523  53FC 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1524  53FF B7           	OR A
1525  5400 20 05        	JR NZ, .L1
1526  5402 1E 05        	LD E, 5 ; illegal function call
1527  5404 C3 07 50     	JP THROW_ERROR
1528  5407              .L1:
1529  5407              	; opening (
1530  5407 CD EF 4F     	CALL CHKCHAR
1531  540A 28           	DB '('
1532  540B              	; get sprite number
1533  540B DD 21 1C 52  	LD IX, GETBYT
1534  540F CD 59 01     	CALL CALBAS
1535  5412 F5           	PUSH AF
1536  5413              	; comma
1537  5413 CD EF 4F     	CALL CHKCHAR
1538  5416 2C           	DB ','
1539  5417              	; get x
1540  5417 DD 21 2F 54  	LD IX, FRMQNT
1541  541B CD 59 01     	CALL CALBAS
1542  541E D5           	PUSH DE
1543  541F              	; comma
1544  541F CD EF 4F     	CALL CHKCHAR
1545  5422 2C           	DB ','
1546  5423              	; get y
1547  5423 DD 21 2F 54  	LD IX, FRMQNT
1548  5427 CD 59 01     	CALL CALBAS
1549  542A D5           	PUSH DE
1550  542B              	; comma
1551  542B CD EF 4F     	CALL CHKCHAR
1552  542E 2C           	DB ','
1553  542F              	; get pattern
1554  542F DD 21 2F 54  	LD IX, FRMQNT
1555  5433 CD 59 01     	CALL CALBAS
1556  5436 D5           	PUSH DE
1557  5437              	; comma
1558  5437 CD EF 4F     	CALL CHKCHAR
1559  543A 2C           	DB ','
1560  543B              	; get color
1561  543B DD 21 2F 54  	LD IX, FRMQNT
1562  543F CD 59 01     	CALL CALBAS
1563  5442 D5           	PUSH DE
1564  5443              	; ending )
1565  5443 CD EF 4F     	CALL CHKCHAR
1566  5446 29           	DB ')'
1567  5447
1568  5447                  ; save position in BASIC text
1569  5447 E5           	PUSH HL
1570  5448 DD E1        	POP IX
1571  544A
1572  544A C1           	POP BC ; color
1573  544B D1           	POP DE ; pattern
1574  544C D9           	EXX
1575  544D C1           	POP BC ; y
1576  544E D1           	POP DE ; x
1577  544F F1           	POP AF ; sprite number
1578  5450 FE 20        	CP 32
1579  5452 38 05        	JR C, .L2
1580  5454 1E 05        	LD E, 5 ; illegal function call
1581  5456 C3 07 50     	JP THROW_ERROR
1582  5459              .L2:
1583  5459              	; find location in sprite attributes table
1584  5459 87          > ADD A, A
1584  545A 87          > ADD A, A
1584  545B 87          > ADD A, A
1585  545C D5           	PUSH DE
1586  545D 16 00        	LD D, 0
1587  545F 5F           	LD E, A
1588  5460 2A F9 4C     	LD HL, (SPRATR_DATA)
1589  5463 19           	ADD HL, DE
1590  5464 D1           	POP DE
1591  5465              	; set y
1592  5465 71           	LD (HL), C
1593  5466 23           	INC HL
1594  5467 70           	LD (HL), B
1595  5468 23           	INC HL
1596  5469              	; set x
1597  5469 73           	LD (HL), E
1598  546A 23           	INC HL
1599  546B 72           	LD (HL), D
1600  546C 23           	INC HL
1601  546D E5           	PUSH HL
1602  546E D9           	EXX
1603  546F E1           	POP HL
1604  5470              	; check if 0<=pattern<32
1605  5470 7A           	LD A, D
1606  5471 B7           	OR A
1607  5472 20 0B        	JR NZ, .L3
1608  5474 7D           	LD A, L
1609  5475 FE 20        	CP 32
1610  5477 30 06        	JR NC, .L3
1611  5479              	; set pattern
1612  5479 73           	LD (HL), E
1613  547A 23           	INC HL
1614  547B 72           	LD (HL), D
1615  547C 23           	INC HL
1616  547D 18 02        	JR .L4
1617  547F              .L3:
1618  547F              	; skip pattern
1619  547F 23          > INC HL
1619  5480 23          > INC HL
1620  5481              .L4:
1621  5481              	; check if 0<=color<16
1622  5481 78           	LD A, B
1623  5482 B7           	OR A
1624  5483 20 08        	JR NZ, .L5
1625  5485 79           	LD A, C
1626  5486 FE 10        	CP 16
1627  5488 30 03        	JR NC, .L5
1628  548A              	; set color
1629  548A 71           	LD (HL), C
1630  548B 23           	INC HL
1631  548C 70           	LD (HL), B
1632  548D
1633  548D              .L5:
1634  548D DD E5        	PUSH IX
1635  548F E1           	POP HL
1636  5490 C9           	RET
1637  5491              ; *******************************************************************************************************
1638  5491
1639  5491              ; *******************************************************************************************************
1640  5491              ; function sets sprite location based on initial coordinates and offset provided
1641  5491              ; input A=sprite number in SPRATR_DATA , 0-31
1642  5491              ; input DE=initial x
1643  5491              ; input BC=initial y
1644  5491              ; input IY=location where delta y,x are located
1645  5491              ; modifies AF, HL, IX
1646  5491              SPRSET_DELTA_POS:
1647  5491 87          > ADD A, A
1647  5492 87          > ADD A, A
1647  5493 87          > ADD A, A
1648  5494 D5           	PUSH DE
1649  5495 16 00        	LD D, 0
1650  5497 5F           	LD E, A
1651  5498 DD 2A F9 4C  	LD IX, (SPRATR_DATA)
1652  549C DD 19        	ADD IX, DE
1653  549E D1           	POP DE
1654  549F              	; IX=sprite's y location
1655  549F FD 6E 00     	LD L, (IY)
1656  54A2 FD 66 01     	LD H, (IY+1)
1657  54A5 09           	ADD HL, BC
1658  54A6 DD 75 00     	LD (IX), L
1659  54A9 DD 74 01     	LD (IX+1), H
1660  54AC FD 6E 02     	LD L, (IY+2)
1661  54AF FD 66 03     	LD H, (IY+3)
1662  54B2 19           	ADD HL, DE
1663  54B3 DD 75 02     	LD (IX+2), L
1664  54B6 DD 74 03     	LD (IX+3), H
1665  54B9 C9           	RET
1666  54BA              ; *******************************************************************************************************
1667  54BA
1668  54BA              ; *******************************************************************************************************
1669  54BA              ; function to handle CALL SPRGRPMOV basic extension
1670  54BA              ; sets position of a group of sprites described with
1671  54BA              ; { int sprite_num, int delta_y, int delta_x } [count]
1672  54BA              ; _SPRGRPMOV ( INT x,
1673  54BA              ;			   INT y,
1674  54BA              ;			   INT data_ptr,
1675  54BA              ;			   BYTE count,
1676  54BA              ;			   BYTE enable_ram) >0 = true
1677  54BA              ; enable_ram will put ram in page 0 also, page 1 is already there
1678  54BA              SPRGRPMOV:
1679  54BA 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1680  54BD B7           	OR A
1681  54BE 20 05        	JR NZ, .L1
1682  54C0 1E 05        	LD E, 5 ; illegal function call
1683  54C2 C3 07 50     	JP THROW_ERROR
1684  54C5              .L1:
1685  54C5              	; opening (
1686  54C5 CD EF 4F     	CALL CHKCHAR
1687  54C8 28           	DB '('
1688  54C9              	; get x
1689  54C9 DD 21 2F 54  	LD IX, FRMQNT
1690  54CD CD 59 01     	CALL CALBAS
1691  54D0 D5           	PUSH DE
1692  54D1              	; comma
1693  54D1 CD EF 4F     	CALL CHKCHAR
1694  54D4 2C           	DB ','
1695  54D5              	; get y
1696  54D5 DD 21 2F 54  	LD IX, FRMQNT
1697  54D9 CD 59 01     	CALL CALBAS
1698  54DC D5           	PUSH DE
1699  54DD              	; comma
1700  54DD CD EF 4F     	CALL CHKCHAR
1701  54E0 2C           	DB ','
1702  54E1              	; get data pointer
1703  54E1 DD 21 2F 54  	LD IX, FRMQNT
1704  54E5 CD 59 01     	CALL CALBAS
1705  54E8 D5           	PUSH DE
1706  54E9              	; comma
1707  54E9 CD EF 4F     	CALL CHKCHAR
1708  54EC 2C           	DB ','
1709  54ED              	; get count
1710  54ED DD 21 1C 52  	LD IX, GETBYT
1711  54F1 CD 59 01     	CALL CALBAS
1712  54F4 F5           	PUSH AF
1713  54F5              	; comma
1714  54F5 CD EF 4F     	CALL CHKCHAR
1715  54F8 2C           	DB ','
1716  54F9              	; get enable RAM
1717  54F9 DD 21 1C 52  	LD IX, GETBYT
1718  54FD CD 59 01     	CALL CALBAS
1719  5500 F5           	PUSH AF
1720  5501              	; ending )
1721  5501 CD EF 4F     	CALL CHKCHAR
1722  5504 29           	DB ')'
1723  5505
1724  5505 E5           	PUSH HL
1725  5506 DD E1        	POP IX
1726  5508
1727  5508 F1           	POP AF ; enable RAM
1728  5509 B7           	OR A
1729  550A C1           	POP BC ; count
1730  550B E1           	POP HL ; data pointer
1731  550C D9           	EXX
1732  550D C1           	POP BC ; y
1733  550E D1           	POP DE ; x
1734  550F D9           	EXX
1735  5510
1736  5510 DD E5        	PUSH IX ; save position in BASIC buffer
1737  5512
1738  5512 28 24        	JR Z, .L2
1739  5514 C5           	PUSH BC
1740  5515 E5           	PUSH HL
1741  5516 AF               XOR A
1742  5517 CD E3 4D         CALL GET_PAGE_INFO
1743  551A D9           	EXX
1744  551B E1           	POP HL
1745  551C F1           	POP AF
1746  551D D9           	EXX
1747  551E C5               PUSH BC
1748  551F D5               PUSH DE
1749  5520 D9           	EXX
1750  5521 F5           	PUSH AF
1751  5522 E5           	PUSH HL
1752  5523 D9           	EXX
1753  5524 3A 41 F3         LD A, (RAMAD0)
1754  5527 26 00            LD H, 0
1755  5529 CD 29 4E         CALL LOCAL_ENASLT
1756  552C E1           	POP HL
1757  552D C1           	POP BC
1758  552E CD 3E 55     	CALL .UPDATE_LOC
1759  5531 D1               POP DE
1760  5532 C1               POP BC
1761  5533 CD 1A 4E         CALL RESTORE_PAGE_INFO
1762  5536 18 04        	JR .L3
1763  5538
1764  5538              .L2:
1765  5538 FB           	EI
1766  5539 CD 3E 55     	CALL .UPDATE_LOC
1767  553C
1768  553C              .L3:
1769  553C E1           	POP HL
1770  553D C9           	RET
1771  553E
1772  553E              .UPDATE_LOC:
1773  553E              .L4:
1774  553E 7E           	LD A, (HL)
1775  553F 23           	INC HL
1776  5540 23           	INC HL
1777  5541 E5           	PUSH HL
1778  5542 FD E1        	POP IY
1779  5544 D9           	EXX
1780  5545 CD 91 54     	CALL SPRSET_DELTA_POS
1781  5548 D9           	EXX
1782  5549 23          > INC HL
1782  554A 23          > INC HL
1782  554B 23          > INC HL
1782  554C 23          > INC HL
1783  554D 10 EF        	DJNZ .L4
1784  554F C9           	RET
1785  5550              ; *******************************************************************************************************
1786  5550
1787  5550              ; *******************************************************************************************************
1788  5550              ; function rotates mask and data of several characters and applies to background data
1789  5550              ; this handles x-shift from 0 to 4
1790  5550              ; contains self-modifying code that is set-up from external function
1791  5550              ; input HL=pointer to mask data
1792  5550              ; input HL'=pointer to character data
1793  5550              ; input DE=output buffer containing background data
1794  5550              ; input A=number of characters to process
1795  5550              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1796  5550              SHIFT04:
1797  5550 E5           	PUSH HL
1798  5551 62           	LD H, D
1799  5552 6B           	LD L, E
1800  5553 01 08 00     	LD BC, 8
1801  5556 09           	ADD HL, BC
1802  5557 44           	LD B, H
1803  5558 4D           	LD C, L
1804  5559 E1           	POP HL
1805  555A              .L0:
1806  555A F5           	PUSH AF
1807  555B 3E 08        	LD A, 8
1808  555D              .L1:
1809  555D 08           	EX AF, AF'
1810  555E 7E           	LD A, (HL) ; get mask
1811  555F D9           	EXX
1812  5560 57           	LD D, A
1813  5561 1E FF        	LD E, #FF
1814  5563 37           	SCF
1815  5564              .M1:
1816  5564 18 FE        	JR .M1 ; this is self-modifying part
1817  5566 CB 1A        	RR D
1818  5568 CB 1B        	RR E
1819  556A CB 1A        	RR D
1820  556C CB 1B        	RR E
1821  556E CB 1A        	RR D
1822  5570 CB 1B        	RR E
1823  5572 CB 1A        	RR D
1824  5574 CB 1B        	RR E
1825  5576
1826  5576 46           	LD B, (HL)
1827  5577 0E 00        	LD C, 0
1828  5579              .M2:
1829  5579 18 FE        	JR .M2 ; also self-modifying part
1830  557B CB 38        	SRL B
1831  557D CB 19        	RR C
1832  557F CB 38        	SRL B
1833  5581 CB 19        	RR C
1834  5583 CB 38        	SRL B
1835  5585 CB 19        	RR C
1836  5587 CB 38        	SRL B
1837  5589 CB 19        	RR C
1838  558B
1839  558B D9           	EXX
1840  558C 1A           	LD A, (DE) ; background
1841  558D D9           	EXX
1842  558E A2           	AND D
1843  558F B0           	OR B
1844  5590 D9           	EXX
1845  5591 12           	LD (DE), A
1846  5592
1847  5592 0A           	LD A, (BC)
1848  5593 D9           	EXX
1849  5594 A3           	AND E
1850  5595 B1           	OR C
1851  5596 23           	INC HL
1852  5597 D9           	EXX
1853  5598 02           	LD (BC), A
1854  5599
1855  5599 23           	INC HL
1856  559A 13           	INC DE
1857  559B 03           	INC BC
1858  559C
1859  559C 08           	EX AF, AF'
1860  559D 3D           	DEC A
1861  559E C2 5D 55     	JP NZ, .L1
1862  55A1 F1           	POP AF
1863  55A2 3D           	DEC A
1864  55A3 C2 5A 55     	JP NZ, .L0
1865  55A6 C9           	RET
1866  55A7              ; *******************************************************************************************************
1867  55A7
1868  55A7              ; *******************************************************************************************************
1869  55A7              ; function rotates mask and data of several characters and applies to background data
1870  55A7              ; this handles x-shift from 5 to 8
1871  55A7              ; contains self-modifying code that is set-up from external function
1872  55A7              ; input HL=pointer to mask data
1873  55A7              ; input HL'=pointer to character data
1874  55A7              ; input DE=output buffer containing background data
1875  55A7              ; input A=number of characters to process
1876  55A7              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1877  55A7              SHIFT58:
1878  55A7 E5           	PUSH HL
1879  55A8 62           	LD H, D
1880  55A9 6B           	LD L, E
1881  55AA 01 08 00     	LD BC, 8
1882  55AD 09           	ADD HL, BC
1883  55AE 44           	LD B, H
1884  55AF 4D           	LD C, L
1885  55B0 E1           	POP HL
1886  55B1              .L0:
1887  55B1 F5           	PUSH AF
1888  55B2 3E 08        	LD A, 8
1889  55B4              .L1:
1890  55B4 08           	EX AF, AF'
1891  55B5 7E           	LD A, (HL) ; get mask
1892  55B6 D9           	EXX
1893  55B7 57           	LD D, A
1894  55B8 1E FF        	LD E, #FF
1895  55BA 37           	SCF
1896  55BB              .M1:
1897  55BB 18 FE        	JR .M1 ; this is self-modifying part
1898  55BD CB 12        	RL D
1899  55BF CB 13        	RL E
1900  55C1 CB 12        	RL D
1901  55C3 CB 13        	RL E
1902  55C5 CB 12        	RL D
1903  55C7 CB 13        	RL E
1904  55C9
1905  55C9 46           	LD B, (HL)
1906  55CA 0E 00        	LD C, 0
1907  55CC              .M2:
1908  55CC 18 FE        	JR .M2 ; also self-modifying part
1909  55CE CB 20        	SLA B
1910  55D0 CB 11        	RL C
1911  55D2 CB 28        	SRA B
1912  55D4 CB 11        	RL C
1913  55D6 CB 20        	SLA B
1914  55D8 CB 11        	RL C
1915  55DA
1916  55DA D9           	EXX
1917  55DB 1A           	LD A, (DE) ; background
1918  55DC D9           	EXX
1919  55DD A3           	AND E
1920  55DE B1           	OR C
1921  55DF D9           	EXX
1922  55E0 12           	LD (DE), A
1923  55E1
1924  55E1 0A           	LD A, (BC)
1925  55E2 D9           	EXX
1926  55E3 A2           	AND D
1927  55E4 B0           	OR B
1928  55E5 23           	INC HL
1929  55E6 D9           	EXX
1930  55E7 02           	LD (BC), A
1931  55E8
1932  55E8 23           	INC HL
1933  55E9 13           	INC DE
1934  55EA 03           	INC BC
1935  55EB
1936  55EB 08           	EX AF, AF'
1937  55EC 3D           	DEC A
1938  55ED C2 B4 55     	JP NZ, .L1
1939  55F0 F1           	POP AF
1940  55F1 3D           	DEC A
1941  55F2 C2 B1 55     	JP NZ, .L0
1942  55F5 C9           	RET
1943  55F6              ; *******************************************************************************************************
1944  55F6
1945  55F6              ; *******************************************************************************************************
1946  55F6              ; function rotates mask and character data and applies it to background
1947  55F6              ; input A=x shift (0-7)
1948  55F6              ; input IX=pointer to structure describing input data
1949  55F6              ; +0  DW shift count 0-7
1950  55F6              ; +2  DW background data start;
1951  55F6              ; +4  DW background add to value to next row of background data
1952  55F6              ; +6  DW mask data start;
1953  55F6              ; +8  DW character data start;
1954  55F6              ; +10 DW character&mask add to value to next row of data
1955  55F6              ; +12 DW columns (low byte used)
1956  55F6              ; +14 DW rows (low byte used)
1957  55F6              SHIFT_MERGE_CHARACTER:
1958  55F6 DD 7E 00     	LD A, (IX) ; shift
1959  55F9 FE 05        	CP 5
1960  55FB 38 22        	JR C, .RIGHT
1961  55FD              	; shifts 5-7, use rotate towards left 1-3
1962  55FD 21 A7 55     	LD HL, SHIFT58
1963  5600 22 64 56     	LD (.CALL+1), HL ; modify fn used
1964  5603 D6 05        	SUB 5
1965  5605 28 0D        	JR Z, .L1
1966  5607 87           	ADD A, A
1967  5608 87           	ADD A, A
1968  5609 67           	LD H, A
1969  560A 2E 18        	LD L, #18 ; JR opcode
1970  560C 22 BB 55     	LD (SHIFT58.M1), HL
1971  560F 22 CC 55     	LD (SHIFT58.M2), HL
1972  5612 18 2F        	JR .DO
1973  5614              .L1:
1974  5614 21 00 00     	LD HL, 0 ; 2xNOP opcode
1975  5617 22 BB 55     	LD (SHIFT58.M1), HL
1976  561A 22 CC 55     	LD (SHIFT58.M2), HL
1977  561D 18 24        	JR .DO
1978  561F              .RIGHT:
1979  561F              	; shifts 0-4, rotate towards right
1980  561F 21 50 55     	LD HL, SHIFT04
1981  5622 22 64 56     	LD (.CALL+1), HL ; modify fn used
1982  5625 FE 04        	CP 4
1983  5627 28 11        	JR Z, .R1
1984  5629 D6 04        	SUB 4
1985  562B ED 44        	NEG
1986  562D 87           	ADD A, A
1987  562E 87           	ADD A, A
1988  562F 67           	LD H, A
1989  5630 2E 18        	LD L, #18 ; JR opcode
1990  5632 22 64 55     	LD (SHIFT04.M1), HL
1991  5635 22 79 55     	LD (SHIFT04.M2), HL
1992  5638 18 09        	JR .DO
1993  563A              .R1:
1994  563A 21 00 00     	LD HL, 0 ; 2xNOP opcode
1995  563D 22 64 55     	LD (SHIFT04.M1), HL
1996  5640 22 79 55     	LD (SHIFT04.M2), HL
1997  5643              .DO:
1998  5643 DD 46 0E     	LD B, (IX+14) ; rows
1999  5646 DD 6E 06     	LD L, (IX+6)
2000  5649 DD 66 07     	LD H, (IX+7) ; mask data
2001  564C DD 5E 02     	LD E, (IX+2)
2002  564F DD 56 03     	LD D, (IX+3) ; background data
2003  5652 D9           	EXX
2004  5653 DD 6E 08     	LD L, (IX+8)
2005  5656 DD 66 09     	LD H, (IX+9) ; character data
2006  5659 D9           	EXX
2007  565A              .LOOP:
2008  565A C5           	PUSH BC
2009  565B E5           	PUSH HL
2010  565C D5           	PUSH DE
2011  565D D9           	EXX
2012  565E E5           	PUSH HL
2013  565F D9           	EXX
2014  5660 DD 7E 0C     	LD A, (IX+12) ; columns
2015  5663              .CALL:
2016  5663 CD 00 00     	CALL 0
2017  5666 E1           	POP HL
2018  5667 DD 5E 0A     	LD E, (IX+10)
2019  566A DD 56 0B     	LD D, (IX+11) ; char data to next row
2020  566D 19           	ADD HL, DE
2021  566E D9           	EXX
2022  566F E1           	POP HL
2023  5670 DD 5E 04     	LD E, (IX+4)
2024  5673 DD 56 05     	LD D, (IX+5) ; background to next row
2025  5676 19           	ADD HL, DE
2026  5677 EB           	EX DE, HL
2027  5678 E1           	POP HL
2028  5679 DD 4E 0A     	LD C, (IX+10)
2029  567C DD 46 0B     	LD B, (IX+11) ; char data to next row
2030  567F 09           	ADD HL, BC
2031  5680 C1           	POP BC
2032  5681 10 D7        	DJNZ .LOOP
2033  5683 C9           	RET
2034  5684              ; *******************************************************************************************************
2035  5684
2036  5684              ; *******************************************************************************************************
2037  5684              ; function to handle CALL MELDGRP basic extension
2038  5684              ; rotates 1-bit character drawing horizontally with mask and character data and
2039  5684              ; fuses with background data
2040  5684              ; _MELDGRP ( INT request_data_ptr,
2041  5684              ;			 BYTE enable_ram) >0 = true
2042  5684              ; request_data_ptr described in SHIFT_MERGE_CHARACTER
2043  5684              ; enable_ram will put ram in page 0 also, page 1 is already there
2044  5684              MELDGRP:
2045  5684              	; opening (
2046  5684 CD EF 4F     	CALL CHKCHAR
2047  5687 28           	DB '('
2048  5688              	; get pointer to request struct
2049  5688 DD 21 2F 54  	LD IX, FRMQNT
2050  568C CD 59 01     	CALL CALBAS
2051  568F D5           	PUSH DE
2052  5690              	; comma
2053  5690 CD EF 4F     	CALL CHKCHAR
2054  5693 2C           	DB ','
2055  5694              	; get enable RAM
2056  5694 DD 21 1C 52  	LD IX, GETBYT
2057  5698 CD 59 01     	CALL CALBAS
2058  569B F5           	PUSH AF
2059  569C              	; ending )
2060  569C CD EF 4F     	CALL CHKCHAR
2061  569F 29           	DB ')'
2062  56A0
2063  56A0 F1           	POP AF ; enable RAM
2064  56A1 B7           	OR A
2065  56A2 DD E1        	POP IX ; pointer to request struct
2066  56A4
2067  56A4 E5           	PUSH HL ; save position in BASIC buffer
2068  56A5
2069  56A5 28 18        	JR Z, .L2
2070  56A7 AF               XOR A
2071  56A8 CD E3 4D         CALL GET_PAGE_INFO
2072  56AB C5               PUSH BC
2073  56AC D5               PUSH DE
2074  56AD 3A 41 F3         LD A, (RAMAD0)
2075  56B0 26 00            LD H, 0
2076  56B2 CD 29 4E         CALL LOCAL_ENASLT
2077  56B5 CD F6 55     	CALL SHIFT_MERGE_CHARACTER
2078  56B8 D1               POP DE
2079  56B9 C1               POP BC
2080  56BA CD 1A 4E         CALL RESTORE_PAGE_INFO
2081  56BD 18 04        	JR .L3
2082  56BF
2083  56BF              .L2:
2084  56BF FB           	EI
2085  56C0 CD F6 55     	CALL SHIFT_MERGE_CHARACTER
2086  56C3
2087  56C3              .L3:
2088  56C3 E1           	POP HL
2089  56C4 C9           	RET
2090  56C5              ; *******************************************************************************************************
2091  56C5
2092  56C5
2093  56C5              EXT_END:
2094  56C5
# file closed: asm\main.asm
