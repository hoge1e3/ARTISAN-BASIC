# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; control variables to include/exclude parts of code
   4  4000              SOUND_CMDS	 	EQU 1
   5  4000              RAM_CMDS 		EQU 1
   6  4000              VRAM_CMDS 		EQU 1
   7  4000              BLIT_CMDS		EQU 1
   8  4000              SPRITE_CMDS 	EQU 1
   9  4000              GENCAL_CMD		EQU 1
  10  4000              TILE_CMDS		EQU 1
  11  4000              BOX_CMDS		   EQU 1
  12  4000              ANIM_CMDS		EQU 1
  13  4000              COLL_CMD       EQU 1
  14  4000
  15  4000               DEFINE CMDS_WITH_PARAMETERS
  16  4000
  17  4000              CHPUT   EQU    #A2
  18  4000              CALBAS  EQU		#159
  19  4000              ERRHAND EQU    #406F
  20  4000              FRMEVL  EQU    #4C64
  21  4000              FRESTR  EQU		#67D0
  22  4000              ; FRMQNT = formula quantificator
  23  4000              ; input HL=pointer to current program expression
  24  4000              ; output HL=next address
  25  4000              ; output DE=integer datum
  26  4000              FRMQNT	EQU		#542F
  27  4000              ; GETBYT = get byte parameter
  28  4000              ; input HL=pointer to current program expression
  29  4000              ; output HL=next address
  30  4000              ; output A=E=byte read
  31  4000              GETBYT		EQU	#521C
  32  4000              CHRGTR  	   EQU   #4666
  33  4000              PTRGET		EQU 	#5EA4
  34  4000              SUBFLG		EQU	#F6A5
  35  4000              SYNCHR		EQU	#558C
  36  4000              VALTYP  	   EQU   #F663
  37  4000              DAC         EQU   #F7F6
  38  4000              USR     	   EQU   #F7F8
  39  4000              PROCNM		EQU	#FD89
  40  4000              BIOS_FILVRM EQU   #0056
  41  4000              CLIKSW		EQU	#F3DB
  42  4000
  43  4000              RAMAD0	   EQU	#F341	; Main-RAM Slot (00000h~03FFFh)
  44  4000              RAMAD1	   EQU	#F342	; Main-RAM Slot (04000h~07FFFh)
  45  4000              RAMAD2	   EQU	#F343	; Main-RAM Slot (08000h~0BFFFh)
  46  4000              RAMAD3	   EQU	#F344	; Main-RAM Slot (0C000h~0FFFFh)
  47  4000              EXPTBL	   EQU   #FCC1
  48  4000              SCRMOD	   EQU   #FCAF ; current screen mode
  49  4000              REG1SAV     EQU   #F3E0 ; VDP(1)
  50  4000              JIFFY	      EQU   #FC9E
  51  4000              GRPPAT	   EQU   #F3CF ; SCREEN 2 sprite generator table address
  52  4000              GRPCGP		EQU	#F3CB ; SCREEN 2 pattern generator table address
  53  4000              GRPATR      EQU   #F3CD ; SCREEN 2 sprite attribute table address
  54  4000              T32PAT	   EQU   #F3C5 ; SCREEN 1 sprite generator table address
  55  4000              T32CGP      EQU   #F3C1 ; SCREEN 1 pattern ganarator table address
  56  4000              T32ATR      EQU   #F3C3 ; SCREEN 1 sprite attribute table address
  57  4000
  58  4000              ; BASIC error codes
  59  4000              ;01 NEXT without FOR
  60  4000              ;02 Syntax error
  61  4000              ;03 RETURN without GOSUB
  62  4000              ;04 Out of DATA
  63  4000              ;05 Illegal function call
  64  4000              ;06 Overflow
  65  4000              ;07 Out of memory
  66  4000              ;08 Undefined line number
  67  4000              ;09 Subscript out of range
  68  4000              ;10 Redimensioned array
  69  4000              ;11 Division by zero
  70  4000              ;12 Illegal direct
  71  4000              ;13 Type mismatch
  72  4000              ;14 Out of string space
  73  4000              ;15 String too long
  74  4000              ;16 String formula too complex
  75  4000              ;17 Can't CONTINUE
  76  4000              ;18 Undefined user function
  77  4000              ;19 Device I/O error
  78  4000              ;20 Verify error
  79  4000              ;21 No RESUME
  80  4000              ;22 RESUME without error
  81  4000              ;23 Unprintable error
  82  4000              ;24 Missing operand
  83  4000              ;25 Line buffer overflow
  84  4000              ;50 FIELD overflow
  85  4000              ;51 Internal error
  86  4000              ;52 Bad file number
  87  4000              ;53 File not found
  88  4000              ;54 File already open
  89  4000              ;55 Input past end
  90  4000              ;56 Bad file name
  91  4000              ;57 Direct statement in file
  92  4000              ;58 Sequential I/O only
  93  4000              ;59 File not OPEN
  94  4000
  95  4000
  96  4000               ; simulate cartridge with BASIC extension
  97  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  97  4004 83 65 00 00
  97  4008 00 00 00 00
  97  400C 00 00 00 00
  98  4010
  99  4010              ; this location #4010 stores last location used by basic extension
 100  4010              ; free memory after that point
 101  4010              FREEMEMPTR:
 102  4010 23 66         DW EXT_END
 103  4012
 104  4012              ; this location #4012 stores extension version in DAA format
 105  4012              ; first byte is major version and second minor
 106  4012              VERSION:
 107  4012 00 80         DB #00, #80
 108  4014
 109  4014              ; binary included AKG player compiled at #4014
 110  4014               IF (SOUND_CMDS == 1)
 111  4014              	INCBIN "bin/AKG.bin"
 112  4CF0              	INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CF0              MAIN_PLAYER_START EQU 04014H
   2+ 4CF0              PLY_AKG_START EQU 04014H
   3+ 4CF0              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401DH
   4+ 4CF0              PLY_AKG_INITSOUNDEFFECTS EQU 0401DH
   5+ 4CF0              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 04021H
   6+ 4CF0              PLY_AKG_PLAYSOUNDEFFECT EQU 04021H
   7+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04022H
   8+ 4CF0              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04022H
   9+ 4CF0              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04049H
  10+ 4CF0              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04049H
  11+ 4CF0              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04057H
  12+ 4CF0              PLY_AKG_PSES_PLAY EQU 04090H
  13+ 4CF0              PLY_AKG_PSES_READFIRSTBYTE EQU 04099H
  14+ 4CF0              PLY_AKG_PSES_S_ENDORLOOP EQU 040B1H
  15+ 4CF0              PLY_AKG_PSES_S_LOOP EQU 040BCH
  16+ 4CF0              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C2H
  17+ 4CF0              PLY_AKG_PSES_NOTREACHED EQU 040D5H
  18+ 4CF0              PLY_AKG_PSES_HARDWAREONLY EQU 040D9H
  19+ 4CF0              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040E0H
  20+ 4CF0              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F2H
  21+ 4CF0              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FCH
  22+ 4CF0              PLY_AKG_PSES_H_AFTERRETRIG EQU 04106H
  23+ 4CF0              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 0411AH
  24+ 4CF0              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411FH
  25+ 4CF0              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04127H
  26+ 4CF0              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04132H
  27+ 4CF0              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413EH
  28+ 4CF0              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 04140H
  29+ 4CF0              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04146H
  30+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 0414AH
  31+ 4CF0              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 0414AH
  32+ 4CF0              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414CH
  33+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414CH
  34+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414CH
  35+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414DH
  36+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414EH
  37+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04152H
  38+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04152H
  39+ 4CF0              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04152H
  40+ 4CF0              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 0415AH
  41+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04162H
  42+ 4CF0              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04162H
  43+ 4CF0              PLY_AKG_INIT EQU 04162H
  44+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04162H
  45+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 04190H
  46+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A4H
  47+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B6H
  48+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D5H
  49+ 4CF0              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E2H
  50+ 4CF0              PLY_AKG_INIT_READWORDSANDFILL EQU 041E8H
  51+ 4CF0              PLY_AKG_INITTABLE0 EQU 041EBH
  52+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041EBH
  53+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04205H
  54+ 4CF0              PLY_AKG_INITTABLE0_END EQU 04205H
  55+ 4CF0              PLY_AKG_INITTABLE1 EQU 04205H
  56+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04205H
  57+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04209H
  58+ 4CF0              PLY_AKG_INITTABLE1_END EQU 04209H
  59+ 4CF0              PLY_AKG_INITTABLEORA EQU 04209H
  60+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04209H
  61+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 04221H
  62+ 4CF0              PLY_AKG_INITTABLEORA_END EQU 04221H
  63+ 4CF0              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 04221H
  64+ 4CF0              PLY_AKG_STOP EQU 04221H
  65+ 4CF0              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04233H
  66+ 4CF0              PLY_AKG_PLAY EQU 04233H
  67+ 4CF0              PLY_AKG_TICKDECREASINGCOUNTER EQU 0423BH
  68+ 4CF0              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 04241H
  69+ 4CF0              PLY_AKG_READLINKER EQU 04246H
  70+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04246H
  71+ 4CF0              PLY_AKG_READLINKER_PTLINKER EQU 04246H
  72+ 4CF0              PLY_AKG_READLINKER_NOLOOP EQU 04251H
  73+ 4CF0              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 0428AH
  74+ 4CF0              PLY_AKG_READLINE EQU 0428DH
  75+ 4CF0              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428DH
  76+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04293H
  77+ 4CF0              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04293H
  78+ 4CF0              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 042A0H
  79+ 4CF0              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A4H
  80+ 4CF0              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A7H
  81+ 4CF0              PLY_AKG_SPEEDTRACK_END EQU 042AAH
  82+ 4CF0              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042AAH
  83+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042B0H
  84+ 4CF0              PLY_AKG_EVENTTRACK_PTTRACK EQU 042B0H
  85+ 4CF0              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BDH
  86+ 4CF0              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042C1H
  87+ 4CF0              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C4H
  88+ 4CF0              PLY_AKG_EVENTTRACK_END EQU 042C7H
  89+ 4CF0              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C7H
  90+ 4CF0              PLY_AKG_CHANNEL1_READTRACK EQU 042D3H
  91+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D3H
  92+ 4CF0              PLY_AKG_CHANNEL1_PTTRACK EQU 042D3H
  93+ 4CF0              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042EEH
  94+ 4CF0              PLY_AKG_CHANNEL1_WAIT EQU 042F9H
  95+ 4CF0              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 04300H
  96+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 04300H
  97+ 4CF0              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 04300H
  98+ 4CF0              PLY_AKG_CHANNEL1_NOTE EQU 04309H
  99+ 4CF0              PLY_AKG_BASENOTEINDEX EQU 04309H
 100+ 4CF0              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 0430BH
 101+ 4CF0              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 0430BH
 102+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 0431BH
 103+ 4CF0              PLY_AKG_INSTRUMENTSTABLE EQU 0431BH
 104+ 4CF0              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432DH
 105+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433DH
 106+ 4CF0              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04365H
 107+ 4CF0              PLY_AKG_CHANNEL1_READCELLEND EQU 04368H
 108+ 4CF0              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04368H
 109+ 4CF0              PLY_AKG_CHANNEL2_READTRACK EQU 04374H
 110+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04374H
 111+ 4CF0              PLY_AKG_CHANNEL2_PTTRACK EQU 04374H
 112+ 4CF0              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438FH
 113+ 4CF0              PLY_AKG_CHANNEL2_WAIT EQU 0439AH
 114+ 4CF0              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 043A1H
 115+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 043A1H
 116+ 4CF0              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 043A1H
 117+ 4CF0              PLY_AKG_CHANNEL2_NOTE EQU 043AAH
 118+ 4CF0              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043AFH
 119+ 4CF0              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043AFH
 120+ 4CF0              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043D1H
 121+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043E1H
 122+ 4CF0              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04409H
 123+ 4CF0              PLY_AKG_CHANNEL2_READCELLEND EQU 0440CH
 124+ 4CF0              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440CH
 125+ 4CF0              PLY_AKG_CHANNEL3_READTRACK EQU 04418H
 126+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04418H
 127+ 4CF0              PLY_AKG_CHANNEL3_PTTRACK EQU 04418H
 128+ 4CF0              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04433H
 129+ 4CF0              PLY_AKG_CHANNEL3_WAIT EQU 0443EH
 130+ 4CF0              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04445H
 131+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04445H
 132+ 4CF0              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04445H
 133+ 4CF0              PLY_AKG_CHANNEL3_NOTE EQU 0444EH
 134+ 4CF0              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04453H
 135+ 4CF0              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04453H
 136+ 4CF0              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04475H
 137+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04485H
 138+ 4CF0              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ADH
 139+ 4CF0              PLY_AKG_CHANNEL3_READCELLEND EQU 044B0H
 140+ 4CF0              PLY_AKG_CURRENTSPEED EQU 044B0H
 141+ 4CF0              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B2H
 142+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B5H
 143+ 4CF0              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B5H
 144+ 4CF0              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B8H
 145+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044BBH
 146+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044BBH
 147+ 4CF0              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C7H
 148+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CEH
 149+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044D1H
 150+ 4CF0              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D7H
 151+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044DAH
 152+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044DAH
 153+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E8H
 154+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EDH
 155+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F8H
 156+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044FBH
 157+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044FBH
 158+ 4CF0              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FEH
 159+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 04501H
 160+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE EQU 04501H
 161+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 0450AH
 162+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04514H
 163+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04517H
 164+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04517H
 165+ 4CF0              PLY_AKG_CHANNEL1_PITCH EQU 04517H
 166+ 4CF0              PLY_AKG_CHANNEL1_ISPITCH EQU 0451AH
 167+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451FH
 168+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451FH
 169+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04523H
 170+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04525H
 171+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04527H
 172+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452EH
 173+ 4CF0              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452FH
 174+ 4CF0              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04532H
 175+ 4CF0              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04532H
 176+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454EH
 177+ 4CF0              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454EH
 178+ 4CF0              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 0455BH
 179+ 4CF0              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455FH
 180+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456FH
 181+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456FH
 182+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 04570H
 183+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 04571H
 184+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04573H
 185+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04573H
 186+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04573H
 187+ 4CF0              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04574H
 188+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04575H
 189+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04577H
 190+ 4CF0              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04577H
 191+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04577H
 192+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04577H
 193+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04577H
 194+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_END EQU 0457AH
 195+ 4CF0              PLY_AKG_CHANNEL1_PITCH_END EQU 0457CH
 196+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04584H
 197+ 4CF0              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04584H
 198+ 4CF0              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04587H
 199+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 0458AH
 200+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 0458AH
 201+ 4CF0              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04596H
 202+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459DH
 203+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 045A0H
 204+ 4CF0              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A6H
 205+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A9H
 206+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A9H
 207+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B7H
 208+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BCH
 209+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C7H
 210+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045CAH
 211+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045CAH
 212+ 4CF0              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CDH
 213+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045D0H
 214+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045D0H
 215+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D9H
 216+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E3H
 217+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E6H
 218+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E6H
 219+ 4CF0              PLY_AKG_CHANNEL2_PITCH EQU 045E6H
 220+ 4CF0              PLY_AKG_CHANNEL2_ISPITCH EQU 045E9H
 221+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045EEH
 222+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045EEH
 223+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F2H
 224+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F4H
 225+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F6H
 226+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FDH
 227+ 4CF0              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FEH
 228+ 4CF0              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04601H
 229+ 4CF0              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 04601H
 230+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461DH
 231+ 4CF0              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461DH
 232+ 4CF0              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 0462AH
 233+ 4CF0              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462EH
 234+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463EH
 235+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463EH
 236+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463FH
 237+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 04640H
 238+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04642H
 239+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04642H
 240+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04642H
 241+ 4CF0              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04643H
 242+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04644H
 243+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04646H
 244+ 4CF0              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04646H
 245+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04646H
 246+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04646H
 247+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04646H
 248+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_END EQU 04649H
 249+ 4CF0              PLY_AKG_CHANNEL2_PITCH_END EQU 0464BH
 250+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04653H
 251+ 4CF0              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04653H
 252+ 4CF0              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04656H
 253+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04659H
 254+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04659H
 255+ 4CF0              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04665H
 256+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466CH
 257+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466FH
 258+ 4CF0              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04675H
 259+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04678H
 260+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04678H
 261+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04686H
 262+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 0468BH
 263+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04696H
 264+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04699H
 265+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04699H
 266+ 4CF0              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469CH
 267+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469FH
 268+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469FH
 269+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A8H
 270+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B2H
 271+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B5H
 272+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B5H
 273+ 4CF0              PLY_AKG_CHANNEL3_PITCH EQU 046B5H
 274+ 4CF0              PLY_AKG_CHANNEL3_ISPITCH EQU 046B8H
 275+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BDH
 276+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BDH
 277+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046C1H
 278+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C3H
 279+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C5H
 280+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CCH
 281+ 4CF0              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CDH
 282+ 4CF0              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046D0H
 283+ 4CF0              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046D0H
 284+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046ECH
 285+ 4CF0              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046ECH
 286+ 4CF0              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F9H
 287+ 4CF0              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FDH
 288+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470DH
 289+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470DH
 290+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470EH
 291+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470FH
 292+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 04711H
 293+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 04711H
 294+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 04711H
 295+ 4CF0              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04712H
 296+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04713H
 297+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04715H
 298+ 4CF0              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04715H
 299+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04715H
 300+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04715H
 301+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04715H
 302+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_END EQU 04718H
 303+ 4CF0              PLY_AKG_CHANNEL3_PITCH_END EQU 0471AH
 304+ 4CF0              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04726H
 305+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04726H
 306+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04726H
 307+ 4CF0              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04729H
 308+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 0472BH
 309+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 04731H
 310+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04734H
 311+ 4CF0              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04734H
 312+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04737H
 313+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 04740H
 314+ 4CF0              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04748H
 315+ 4CF0              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04755H
 316+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04755H
 317+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04755H
 318+ 4CF0              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04758H
 319+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 0475AH
 320+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 04760H
 321+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04763H
 322+ 4CF0              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04763H
 323+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04766H
 324+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476FH
 325+ 4CF0              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04777H
 326+ 4CF0              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04785H
 327+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04785H
 328+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04785H
 329+ 4CF0              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04788H
 330+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 0478AH
 331+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 04790H
 332+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04793H
 333+ 4CF0              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04793H
 334+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04796H
 335+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479FH
 336+ 4CF0              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A7H
 337+ 4CF0              PLY_AKG_SENDPSGREGISTERS EQU 047B6H
 338+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BEH
 339+ 4CF0              PLY_AKG_PSGREG01_INSTR EQU 047BEH
 340+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CEH
 341+ 4CF0              PLY_AKG_PSGREG23_INSTR EQU 047CEH
 342+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DFH
 343+ 4CF0              PLY_AKG_PSGREG45_INSTR EQU 047DFH
 344+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047F0H
 345+ 4CF0              PLY_AKG_PSGREG6_8_INSTR EQU 047F0H
 346+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 04801H
 347+ 4CF0              PLY_AKG_PSGREG9_10_INSTR EQU 04801H
 348+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04812H
 349+ 4CF0              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04812H
 350+ 4CF0              PLY_AKG_PSGREG13_OLDVALUE EQU 04827H
 351+ 4CF0              PLY_AKG_RETRIG EQU 04829H
 352+ 4CF0              PLY_AKG_PSGREG13_INSTR EQU 0482BH
 353+ 4CF0              PLY_AKG_PSGREG13_END EQU 0483AH
 354+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 0483AH
 355+ 4CF0              PLY_AKG_SAVESP EQU 0483AH
 356+ 4CF0              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483EH
 357+ 4CF0              PLY_AKG_CHANNEL1_READEFFECTS EQU 04846H
 358+ 4CF0              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04853H
 359+ 4CF0              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04853H
 360+ 4CF0              PLY_AKG_CHANNEL2_READEFFECTS EQU 0485BH
 361+ 4CF0              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04868H
 362+ 4CF0              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04868H
 363+ 4CF0              PLY_AKG_CHANNEL3_READEFFECTS EQU 04870H
 364+ 4CF0              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 0487BH
 365+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS EQU 0487BH
 366+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 0488AH
 367+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 0488AH
 368+ 4CF0              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 04891H
 369+ 4CF0              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 048A1H
 370+ 4CF0              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 048A1H
 371+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A8H
 372+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A8H
 373+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048ABH
 374+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B4H
 375+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B4H
 376+ 4CF0              PLY_AKG_READINSTRUMENTCELL EQU 048BAH
 377+ 4CF0              PLY_AKG_NOSOFTNOHARD EQU 048C7H
 378+ 4CF0              PLY_AKG_NSNH_NONOISE EQU 048DCH
 379+ 4CF0              PLY_AKG_SOFT EQU 048DFH
 380+ 4CF0              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E6H
 381+ 4CF0              PLY_AKG_S_NOTSIMPLE EQU 048EEH
 382+ 4CF0              PLY_AKG_S_AFTERSIMPLETEST EQU 048F1H
 383+ 4CF0              PLY_AKG_HARDTOSOFT EQU 048FEH
 384+ 4CF0              PLY_AKG_HS_JUMPRATIO EQU 04909H
 385+ 4CF0              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04936H
 386+ 4CF0              PLY_AKG_ENDWITHOUTLOOP EQU 04938H
 387+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04938H
 388+ 4CF0              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04938H
 389+ 4CF0              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 04940H
 390+ 4CF0              PLY_AKG_SH_JUMPRATIO EQU 0494DH
 391+ 4CF0              PLY_AKG_SH_JUMPRATIOEND EQU 0496EH
 392+ 4CF0              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497DH
 393+ 4CF0              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04983H
 394+ 4CF0              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499DH
 395+ 4CF0              PLY_AKG_H_RETRIGEND EQU 049AFH
 396+ 4CF0              PLY_AKG_H_AFTERRETRIG EQU 049B0H
 397+ 4CF0              PLY_AKG_ENDWITHLOOP EQU 049C2H
 398+ 4CF0              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C9H
 399+ 4CF0              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DFH
 400+ 4CF0              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EDH
 401+ 4CF0              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FDH
 402+ 4CF0              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A0BH
 403+ 4CF0              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A1AH
 404+ 4CF0              PLY_AKG_SHOHS_RETRIGEND EQU 04A29H
 405+ 4CF0              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A2AH
 406+ 4CF0              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3CH
 407+ 4CF0              PLY_AKG_EFFECTTABLE EQU 04A4AH
 408+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A4AH
 409+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6EH
 410+ 4CF0              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6EH
 411+ 4CF0              PLY_AKG_EFFECT_RESET EQU 04A71H
 412+ 4CF0              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A73H
 413+ 4CF0              PLY_AKG_EFFECT_VOLUME EQU 04A8EH
 414+ 4CF0              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A9AH
 415+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04AA0H
 416+ 4CF0              PLY_AKG_ARPEGGIOSTABLE EQU 04AA0H
 417+ 4CF0              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC7H
 418+ 4CF0              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACEH
 419+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD4H
 420+ 4CF0              PLY_AKG_PITCHESTABLE EQU 04AD4H
 421+ 4CF0              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AFBH
 422+ 4CF0              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B02H
 423+ 4CF0              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B13H
 424+ 4CF0              PLY_AKG_EFFECT_PITCHDOWN EQU 04B1AH
 425+ 4CF0              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B2AH
 426+ 4CF0              PLY_AKG_EFFECT_PITCHUP EQU 04B3FH
 427+ 4CF0              PLY_AKG_EFFECT_PITCHSTOP EQU 04B51H
 428+ 4CF0              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B58H
 429+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B82H
 430+ 4CF0              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B82H
 431+ 4CF0              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B9BH
 432+ 4CF0              PLY_AKG_EFFECT_GLIDESPEED EQU 04B9BH
 433+ 4CF0              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BADH
 434+ 4CF0              PLY_AKG_EFFECT_LEGATO EQU 04BC3H
 435+ 4CF0              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD7H
 436+ 4CF0              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDFH
 437+ 4CF0              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE7H
 438+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEFH
 439+ 4CF0              PLY_AKG_EVENT EQU 04BEFH
 440+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BF0H
 441+ 4CF0              PLY_AKG_PERIODTABLE EQU 04BF0H
 442+ 4CF0              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BF0H
 443+ 4CF0              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CF0H
 444+ 4CF0              PLY_AKG_PERIODTABLE_END EQU 04CF0H
 445+ 4CF0              PLY_AKG_END EQU 04CF0H
 446+ 4CF0              MAIN_PLAYER_END EQU 04CF0H
 447+ 4CF0              TESTEREND EQU 04CF0H
 448+ 4CF0
# file closed: ./symbol/AKG.sym
 113  4CF0               ENDIF
 114  4CF0
 115  4CF0               INCLUDE "VBLANK.asm"
# file opened: asm\VBLANK.asm
   1+ 4CF0              ORIG.HTIMI:
   2+ 4CF0 00 00 00 00  	DB 0, 0, 0, 0, 0
   2+ 4CF4 00
   3+ 4CF5               EXPORT ORIG.HTIMI
   4+ 4CF5
   5+ 4CF5              ; *******************************************************************************************************
   6+ 4CF5              ; interrupt handler when page 0 enabled
   7+ 4CF5              ; we are here only if one of the extended basic commands have paged in page 0
   8+ 4CF5              ; which means we arrived from BASIC so page 2 is already good
   9+ 4CF5              VBLANK:
  10+ 4CF5              	EXPORT VBLANK
  11+ 4CF5
  12+ 4CF5 F5               PUSH AF
  13+ 4CF6              	; is VDP originator ?
  14+ 4CF6 DB 99        	IN	A, (099H)
  15+ 4CF8 A7           	AND	A
  16+ 4CF9 F2 20 4D     	JP P, .EXIT
  17+ 4CFC
  18+ 4CFC               IF (SOUND_CMDS + SPRITE_CMDS > 0)
  19+ 4CFC C5               PUSH BC
  20+ 4CFD D5               PUSH DE
  21+ 4CFE E5               PUSH HL
  22+ 4CFF 08               EX AF, AF'
  23+ 4D00 D9               EXX
  24+ 4D01 F5               PUSH AF
  25+ 4D02 C5               PUSH BC
  26+ 4D03 D5               PUSH DE
  27+ 4D04 E5               PUSH HL
  28+ 4D05 DD E5            PUSH IX
  29+ 4D07 FD E5            PUSH IY
  30+ 4D09
  31+ 4D09               IF (SPRITE_CMDS == 1)
  32+ 4D09 CD 5A 4D     	CALL PROCESS_SPRITES_AND_ANIMATIONS
  33+ 4D0C               ENDIF
  34+ 4D0C
  35+ 4D0C               IF (SOUND_CMDS == 1)
  36+ 4D0C 3A 35 59     	LD A, (SOUND_ENABLED)
  37+ 4D0F B7           	OR A
  38+ 4D10 C4 33 42     	CALL NZ,PLY_AKG_PLAY
  39+ 4D13               ENDIF
  40+ 4D13
  41+ 4D13                  ; increase JIFFY
  42+ 4D13                  ;LD HL,(JIFFY)
  43+ 4D13                  ;INC HL
  44+ 4D13                  ;LD (JIFFY),HL
  45+ 4D13
  46+ 4D13 FD E1            POP IY
  47+ 4D15 DD E1            POP IX
  48+ 4D17 E1               POP HL
  49+ 4D18 D1               POP DE
  50+ 4D19 C1               POP BC
  51+ 4D1A F1               POP AF
  52+ 4D1B 08               EX AF, AF'
  53+ 4D1C D9               EXX
  54+ 4D1D E1               POP HL
  55+ 4D1E D1               POP DE
  56+ 4D1F C1               POP BC
  57+ 4D20               ENDIF
  58+ 4D20
  59+ 4D20              .EXIT:
  60+ 4D20 F1           	POP AF
  61+ 4D21 FB           	EI
  62+ 4D22 ED 4D        	RETI
  63+ 4D24              ; *******************************************************************************************************
  64+ 4D24
  65+ 4D24              ; *******************************************************************************************************
  66+ 4D24              ; H.TIMI function
  67+ 4D24              ; we can end up here from anywhere so page in both page 0 and 2
  68+ 4D24              MBGE_HTIMI:
  69+ 4D24               EXPORT MBGE_HTIMI
  70+ 4D24
  71+ 4D24               IF (SOUND_CMDS + SPRITE_CMDS > 0)
  72+ 4D24
  73+ 4D24 F5           	PUSH AF
  74+ 4D25
  75+ 4D25              	; enable page 2
  76+ 4D25 3E 02            LD A, 2
  77+ 4D27 CD B3 64         CALL GET_PAGE_INFO
  78+ 4D2A C5               PUSH BC
  79+ 4D2B D5               PUSH DE
  80+ 4D2C 3A 43 F3         LD A, (RAMAD2)
  81+ 4D2F 26 80            LD H, 080H
  82+ 4D31 CD FA 64         CALL LOCAL_ENASLT
  83+ 4D34              	; enable page 0
  84+ 4D34 AF               XOR A
  85+ 4D35 CD B3 64         CALL GET_PAGE_INFO
  86+ 4D38 C5               PUSH BC
  87+ 4D39 D5               PUSH DE
  88+ 4D3A 3A 41 F3         LD A, (RAMAD0)
  89+ 4D3D 26 00            LD H, 0
  90+ 4D3F CD FA 64         CALL LOCAL_ENASLT
  91+ 4D42
  92+ 4D42               IF (SPRITE_CMDS == 1)
  93+ 4D42 CD 5A 4D     	CALL PROCESS_SPRITES_AND_ANIMATIONS
  94+ 4D45               ENDIF
  95+ 4D45
  96+ 4D45               IF (SOUND_CMDS == 1)
  97+ 4D45 3A 35 59     	LD A, (SOUND_ENABLED)
  98+ 4D48 B7           	OR A
  99+ 4D49 C4 33 42     	CALL NZ,PLY_AKG_PLAY
 100+ 4D4C               ENDIF
 101+ 4D4C
 102+ 4D4C              	; restore page 0
 103+ 4D4C D1               POP DE
 104+ 4D4D C1               POP BC
 105+ 4D4E CD EA 64         CALL RESTORE_PAGE_INFO
 106+ 4D51              	; restore page 2
 107+ 4D51 D1               POP DE
 108+ 4D52 C1               POP BC
 109+ 4D53 CD EA 64         CALL RESTORE_PAGE_INFO
 110+ 4D56
 111+ 4D56 F1           	POP AF
 112+ 4D57               ENDIF
 113+ 4D57 C3 F0 4C     	JP ORIG.HTIMI
 114+ 4D5A              ; *******************************************************************************************************
 115+ 4D5A
 116+ 4D5A              ; *******************************************************************************************************
 117+ 4D5A              ; function checks if the sprite system is initialized and what screen mode we are running
 118+ 4D5A              ; also checks if some VRAM modifying command is running
 119+ 4D5A              ; when that checks out calls sprite updates and animation processing
 120+ 4D5A              ; if in an unsupported mode disables sprite handling
 121+ 4D5A              PROCESS_SPRITES_AND_ANIMATIONS:
 122+ 4D5A              	; check if initialized
 123+ 4D5A 3A 7C 4D     	LD A, (SPRATR_INIT_STATUS)
 124+ 4D5D B7           	OR A
 125+ 4D5E C8           	RET Z
 126+ 4D5F              	; check screen mode
 127+ 4D5F 3A AF FC     	LD A, (SCRMOD)
 128+ 4D62 3D           	DEC A
 129+ 4D63 28 08        	JR Z, .L0 ; screen 1
 130+ 4D65 3D           	DEC A
 131+ 4D66 28 05            JR Z, .L0 ; screen 2
 132+ 4D68              	; unsupported screen mode, disable
 133+ 4D68 AF               XOR A
 134+ 4D69 32 7C 4D         LD (SPRATR_INIT_STATUS),A
 135+ 4D6C C9               RET
 136+ 4D6D              .L0:
 137+ 4D6D                  ; check if anyone else is working with VRAM
 138+ 4D6D 3A C4 62         LD A,(VRAM_UPDATE_IN_PROGRESS)
 139+ 4D70 B7               OR A
 140+ 4D71 C0               RET NZ
 141+ 4D72
 142+ 4D72 CD 91 4D         CALL SPRATR_UPDATE
 143+ 4D75
 144+ 4D75               IF (ANIM_CMDS == 1)
 145+ 4D75 CD D7 55         CALL PROCESS_ANIMATIONS
 146+ 4D78 CD A3 57         CALL PROCESS_AUTOSGAMS
 147+ 4D7B               ENDIF
 148+ 4D7B C9               RET
 149+ 4D7C              ; *******************************************************************************************************
# file closed: asm\VBLANK.asm
 116  4D7C
 117  4D7C               IF (SPRITE_CMDS == 1)
 118  4D7C               INCLUDE "SPRITES.asm"
# file opened: asm\SPRITES.asm
   1+ 4D7C              ; commands and variables related to sprites
   2+ 4D7C
   3+ 4D7C              SPRATR_INIT_STATUS:
   4+ 4D7C 00            DB 0
   5+ 4D7D              SPRATR_UPDATE_FLAG:
   6+ 4D7D 00 00         DW 0
   7+ 4D7F              SPRATR_DATA:
   8+ 4D7F 00 00         DW 0
   9+ 4D81              SPRFLICKER_ENABLED:
  10+ 4D81 00            DB 0
  11+ 4D82              ; to support sprite flicker
  12+ 4D82              FLICKER:
  13+ 4D82 00            DB 0
  14+ 4D83
  15+ 4D83              ; to temporarily store stack pointer
  16+ 4D83              TMPSP:
  17+ 4D83 00 00         DW 0
  18+ 4D85
  19+ 4D85              ; *******************************************************************************************************
  20+ 4D85              ; helper function gets pointer to n-th entry in sprite attributes
  21+ 4D85              ; changes HL,DE
  22+ 4D85              GETnthSPRATTR:
  23+ 4D85 26 00            LD H,0
  24+ 4D87 6F               LD L,A
  25+ 4D88 CD AF 64         CALL HLx8
  26+ 4D8B ED 5B 7F 4D      LD DE,(SPRATR_DATA)
  27+ 4D8F 19               ADD HL,DE
  28+ 4D90 C9               RET
  29+ 4D91              ; *******************************************************************************************************
  30+ 4D91
  31+ 4D91              ; *******************************************************************************************************
  32+ 4D91              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
  33+ 4D91              ; struct {
  34+ 4D91              ; DW y
  35+ 4D91              ; DW x
  36+ 4D91              ; DW pattern (0-63)
  37+ 4D91              ; DW color
  38+ 4D91              ; } [32]
  39+ 4D91              ; will hide sprites whose location is outside of visible area
  40+ 4D91              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
  41+ 4D91              ; modifies AF, AF', BC, DE, HL
  42+ 4D91              SPRATR_UPDATE:
  43+ 4D91              	; check if update requested
  44+ 4D91 2A 7D 4D     	LD HL, (SPRATR_UPDATE_FLAG)
  45+ 4D94 7E           	LD A, (HL)
  46+ 4D95 B7           	OR A
  47+ 4D96 C8           	RET Z
  48+ 4D97              .L0:
  49+ 4D97 06 20        	LD B, 32 ; sprite number
  50+ 4D99 0E 98        	LD C, #98 ; register for vdp data output
  51+ 4D9B              	; set VDP address
  52+ 4D9B 3A AF FC         LD A,(SCRMOD)
  53+ 4D9E 3D               DEC A
  54+ 4D9F 20 05            JR NZ,.L4
  55+ 4DA1 2A C3 F3         LD HL, (T32ATR)
  56+ 4DA4 18 03            JR .L5
  57+ 4DA6              .L4:
  58+ 4DA6 2A CD F3         LD HL, (GRPATR)
  59+ 4DA9              .L5:
  60+ 4DA9 3A 81 4D     	LD A, (SPRFLICKER_ENABLED)
  61+ 4DAC B7           	OR A
  62+ 4DAD 28 03        	JR Z, .L3
  63+ 4DAF 3A 82 4D     	LD A, (FLICKER)
  64+ 4DB2              .L3:
  65+ 4DB2 5F           	LD E, A
  66+ 4DB3 08           	EX AF, AF'
  67+ 4DB4 7B           	LD A, E
  68+ 4DB5 87           	ADD A, A
  69+ 4DB6 87           	ADD A, A
  70+ 4DB7 16 00        	LD D, 0
  71+ 4DB9 5F           	LD E, A
  72+ 4DBA 19           	ADD HL, DE
  73+ 4DBB CD 9A 64     	CALL SETWRT_LOCAL
  74+ 4DBE ED 73 83 4D  	LD (TMPSP), SP
  75+ 4DC2 ED 7B 7F 4D  	LD SP, (SPRATR_DATA)
  76+ 4DC6
  77+ 4DC6              .LOOP:
  78+ 4DC6 E1           	POP HL
  79+ 4DC7 24           	INC H
  80+ 4DC8 28 0D        	JR Z, .L1 ; negative number between -256 and -1
  81+ 4DCA 25           	DEC H
  82+ 4DCB 20 15        	JR NZ, .OUT3 ; sprite vertically can't be visible
  83+ 4DCD 7D           	LD A, L
  84+ 4DCE FE C0        	CP 192
  85+ 4DD0 30 10        	JR NC, .OUT3
  86+ 4DD2 3D           	DEC A ; due to VDP rule that top of screen is -1
  87+ 4DD3 57           	LD D, A
  88+ 4DD4 C3 FB 4D     	JP .X
  89+ 4DD7              .L1:
  90+ 4DD7 7D           	LD A, L
  91+ 4DD8 C6 10        	ADD 16
  92+ 4DDA FA E2 4D     	JP M, .OUT3 ; below -16
  93+ 4DDD 2D           	DEC L ; due to VDP rule that top of screen is -1
  94+ 4DDE 55           	LD D, L
  95+ 4DDF C3 FB 4D     	JP .X
  96+ 4DE2              .OUT3:
  97+ 4DE2 E1           	POP HL ; skip x value
  98+ 4DE3              .OUT2:
  99+ 4DE3 E1           	POP HL ; skip pattern
 100+ 4DE4 E1           	POP HL ; skip color
 101+ 4DE5 3E D1        	LD A, #D1
 102+ 4DE7 ED 79        	OUT (C), A ; sprite hidden
 103+ 4DE9 00          > NOP
 103+ 4DEA 00          > NOP
 103+ 4DEB 00          > NOP
 104+ 4DEC ED 79        	OUT (C), A ; value unimportant
 105+ 4DEE 00          > NOP
 105+ 4DEF 00          > NOP
 105+ 4DF0 00          > NOP
 106+ 4DF1 ED 79        	OUT (C), A ; value unimportant
 107+ 4DF3 00          > NOP
 107+ 4DF4 00          > NOP
 107+ 4DF5 00          > NOP
 108+ 4DF6 ED 79        	OUT (C), A ; value unimportant
 109+ 4DF8 C3 26 4E     	JP .NEXT
 110+ 4DFB              .X:
 111+ 4DFB E1           	POP HL
 112+ 4DFC 24           	INC H
 113+ 4DFD 28 08        	JR Z, .L2
 114+ 4DFF 25           	DEC H
 115+ 4E00 20 E1        	JR NZ, .OUT2
 116+ 4E02 1E 00        	LD E, 0 ; EC bit
 117+ 4E04 C3 10 4E     	JP .XY
 118+ 4E07              .L2:
 119+ 4E07 7D           	LD A, L
 120+ 4E08 C6 20        	ADD 32
 121+ 4E0A FA E3 4D     	JP M, .OUT2
 122+ 4E0D 6F           	LD L, A
 123+ 4E0E 1E 80        	LD E, #80
 124+ 4E10              .XY:
 125+ 4E10 ED 51        	OUT (C), D
 126+ 4E12 3A E0 F3     	LD A, (REG1SAV)
 127+ 4E15 E6 02        	AND 2
 128+ 4E17 ED 69        	OUT (C), L
 129+ 4E19 E1           	POP HL ; pattern
 130+ 4E1A 7D           	LD A, L
 131+ 4E1B 28 02        	JR Z, .SMALLSPRITES
 132+ 4E1D 87           	ADD A, A
 133+ 4E1E 87           	ADD A, A ; needs to go at 4x
 134+ 4E1F              .SMALLSPRITES:
 135+ 4E1F D3 98        	OUT (#98), A
 136+ 4E21 E1           	POP HL ; color
 137+ 4E22 7D           	LD A, L
 138+ 4E23 B3           	OR E
 139+ 4E24 D3 98        	OUT (#98), A
 140+ 4E26              .NEXT:
 141+ 4E26 08           	EX AF, AF'
 142+ 4E27 3C           	INC A
 143+ 4E28 E6 1F        	AND 31
 144+ 4E2A C2 49 4E     	JP NZ, .NEXT2
 145+ 4E2D 08           	EX AF, AF'
 146+ 4E2E 3A AF FC         LD A,(SCRMOD)
 147+ 4E31 3D               DEC A
 148+ 4E32 20 05            JR NZ,.L6
 149+ 4E34 2A C3 F3         LD HL, (T32ATR)
 150+ 4E37 18 03            JR .L7
 151+ 4E39              .L6:
 152+ 4E39 2A CD F3         LD HL, (GRPATR)
 153+ 4E3C              .L7:
 154+ 4E3C              	; CALL SETWRT_LOCAL not allowed as SP modified
 155+ 4E3C 7D           	LD	A, L
 156+ 4E3D D3 99        	OUT	(099H), A
 157+ 4E3F 7C           	LD	A, H
 158+ 4E40 E6 3F        	AND	03FH
 159+ 4E42 F6 40        	OR	040H
 160+ 4E44 D3 99        	OUT	(099H), A
 161+ 4E46 C3 4A 4E     	JP .NEXT3
 162+ 4E49              .NEXT2:
 163+ 4E49 08           	EX AF, AF'
 164+ 4E4A              .NEXT3:
 165+ 4E4A 05           	DEC B
 166+ 4E4B C2 C6 4D     	JP NZ, .LOOP
 167+ 4E4E 08           	EX AF, AF'
 168+ 4E4F 3C           	INC A
 169+ 4E50 32 82 4D     	LD (FLICKER), A
 170+ 4E53
 171+ 4E53 ED 7B 83 4D  	LD SP, (TMPSP)
 172+ 4E57 2A 7D 4D     	LD HL, (SPRATR_UPDATE_FLAG)
 173+ 4E5A 36 00        	LD (HL), 0 ; zero out update flag
 174+ 4E5C C9           	RET
 175+ 4E5D              ; *******************************************************************************************************
 176+ 4E5D
 177+ 4E5D              ; *******************************************************************************************************
 178+ 4E5D              ; function to handle CALL SPRENABLE basic extension
 179+ 4E5D              ; initializes sprites handler
 180+ 4E5D              ; _SPRENABLE ( INT[][] sprites_attributes,
 181+ 4E5D              ;			   INT update_variable,
 182+ 4E5D              ;			   BYTE sprite_flicker_enabled )
 183+ 4E5D              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA and SPRFLICKER_ENABLED
 184+ 4E5D              SPRENABLE:
 185+ 4E5D              	; opening (
 186+ 4E5D CD C1 65     	CALL CHKCHAR
 187+ 4E60 28           	DB '('
 188+ 4E61              	; get address of sprite attribute table DIM SA%(3,31)
 189+ 4E61 3E 02        	LD A,2
 190+ 4E63 06 02        	LD B,2
 191+ 4E65 11 20 04     	LD DE,#0420
 192+ 4E68 CD EE 65     	CALL GET_BASIC_ARRAY_DATA_POINTER
 193+ 4E6B C5           	PUSH BC
 194+ 4E6C              	; comma
 195+ 4E6C CD C1 65     	CALL CHKCHAR
 196+ 4E6F 2C           	DB ','
 197+ 4E70              	; get address of sprite update flag
 198+ 4E70 DD 21 A4 5E  	LD IX, PTRGET
 199+ 4E74 CD 59 01     	CALL CALBAS
 200+ 4E77 D5           	PUSH DE
 201+ 4E78              	; comma
 202+ 4E78 CD C1 65     	CALL CHKCHAR
 203+ 4E7B 2C           	DB ','
 204+ 4E7C              	; get flicker enabled flag
 205+ 4E7C DD 21 1C 52  	LD IX, GETBYT
 206+ 4E80 CD 59 01     	CALL CALBAS
 207+ 4E83 F5           	PUSH AF
 208+ 4E84              	; ending )
 209+ 4E84 CD C1 65     	CALL CHKCHAR
 210+ 4E87 29           	DB ')'
 211+ 4E88
 212+ 4E88 F1           	POP AF ; get flicker flag
 213+ 4E89 B7           	OR A
 214+ 4E8A 32 81 4D     	LD (SPRFLICKER_ENABLED), A
 215+ 4E8D
 216+ 4E8D D1           	POP DE ; update variable location
 217+ 4E8E ED 53 7D 4D  	LD (SPRATR_UPDATE_FLAG), DE
 218+ 4E92 D1           	POP DE ; address of sprite attribute table
 219+ 4E93 ED 53 7F 4D  	LD (SPRATR_DATA), DE
 220+ 4E97 3E 01        	LD A, 1
 221+ 4E99 32 7C 4D     	LD (SPRATR_INIT_STATUS), A
 222+ 4E9C C9           	RET
 223+ 4E9D              ; *******************************************************************************************************
 224+ 4E9D
 225+ 4E9D              ; *******************************************************************************************************
 226+ 4E9D              ; function to handle CALL SPRDISABLE basic extension
 227+ 4E9D              ; disables sprites handling
 228+ 4E9D              ; _SPRDISABLE
 229+ 4E9D              ; resets variable SPRATR_INIT_STATUS
 230+ 4E9D              SPRDISABLE:
 231+ 4E9D AF           	XOR A
 232+ 4E9E 32 7C 4D     	LD (SPRATR_INIT_STATUS), A
 233+ 4EA1 C9           	RET
 234+ 4EA2              ; *******************************************************************************************************
 235+ 4EA2
 236+ 4EA2              ; *******************************************************************************************************
 237+ 4EA2              ; function to handle CALL SPRSET basic extension
 238+ 4EA2              ; sets position, and optionally pattern and color of sprite
 239+ 4EA2              ; _SPRSET ( BYTE sprite_num , valid 0-31
 240+ 4EA2              ;			INT x,
 241+ 4EA2              ;			INT y,
 242+ 4EA2              ;			INT pattern, valid 0-63, otherwise ignored
 243+ 4EA2              ;			INT color, valid 0-15, otherwise ignored
 244+ 4EA2              SPRSET:
 245+ 4EA2 3A 7C 4D     	LD A, (SPRATR_INIT_STATUS)
 246+ 4EA5 B7           	OR A
 247+ 4EA6 20 05        	JR NZ, .L1
 248+ 4EA8 1E 05        	LD E, 5 ; illegal function call
 249+ 4EAA C3 E7 65     	JP THROW_ERROR
 250+ 4EAD              .L1:
 251+ 4EAD              	; opening (
 252+ 4EAD CD C1 65     	CALL CHKCHAR
 253+ 4EB0 28           	DB '('
 254+ 4EB1              	; get sprite number
 255+ 4EB1 DD 21 1C 52  	LD IX, GETBYT
 256+ 4EB5 CD 59 01     	CALL CALBAS
 257+ 4EB8 F5           	PUSH AF
 258+ 4EB9              	; comma
 259+ 4EB9 CD C1 65     	CALL CHKCHAR
 260+ 4EBC 2C           	DB ','
 261+ 4EBD              	; get x
 262+ 4EBD DD 21 2F 54  	LD IX, FRMQNT
 263+ 4EC1 CD 59 01     	CALL CALBAS
 264+ 4EC4 D5           	PUSH DE
 265+ 4EC5              	; comma
 266+ 4EC5 CD C1 65     	CALL CHKCHAR
 267+ 4EC8 2C           	DB ','
 268+ 4EC9              	; get y
 269+ 4EC9 DD 21 2F 54  	LD IX, FRMQNT
 270+ 4ECD CD 59 01     	CALL CALBAS
 271+ 4ED0 D5           	PUSH DE
 272+ 4ED1              	; comma
 273+ 4ED1 CD C1 65     	CALL CHKCHAR
 274+ 4ED4 2C           	DB ','
 275+ 4ED5              	; get pattern
 276+ 4ED5 DD 21 2F 54  	LD IX, FRMQNT
 277+ 4ED9 CD 59 01     	CALL CALBAS
 278+ 4EDC D5           	PUSH DE
 279+ 4EDD              	; comma
 280+ 4EDD CD C1 65     	CALL CHKCHAR
 281+ 4EE0 2C           	DB ','
 282+ 4EE1              	; get color
 283+ 4EE1 DD 21 2F 54  	LD IX, FRMQNT
 284+ 4EE5 CD 59 01     	CALL CALBAS
 285+ 4EE8 D5           	PUSH DE
 286+ 4EE9              	; ending )
 287+ 4EE9 CD C1 65     	CALL CHKCHAR
 288+ 4EEC 29           	DB ')'
 289+ 4EED
 290+ 4EED                  ; save position in BASIC text
 291+ 4EED E5           	PUSH HL
 292+ 4EEE DD E1        	POP IX
 293+ 4EF0
 294+ 4EF0 C1           	POP BC ; color
 295+ 4EF1 D1           	POP DE ; pattern
 296+ 4EF2 D9           	EXX
 297+ 4EF3 C1           	POP BC ; y
 298+ 4EF4 D1           	POP DE ; x
 299+ 4EF5 F1           	POP AF ; sprite number
 300+ 4EF6 FE 20        	CP 32
 301+ 4EF8 38 05        	JR C, .L2
 302+ 4EFA 1E 05        	LD E, 5 ; illegal function call
 303+ 4EFC C3 E7 65     	JP THROW_ERROR
 304+ 4EFF              .L2:
 305+ 4EFF              	; find location in sprite attributes table
 306+ 4EFF D5           	PUSH DE
 307+ 4F00 CD 85 4D     	CALL GETnthSPRATTR
 308+ 4F03 D1           	POP DE
 309+ 4F04 F3           	DI
 310+ 4F05              	; set y
 311+ 4F05 71           	LD (HL), C
 312+ 4F06 23           	INC HL
 313+ 4F07 70           	LD (HL), B
 314+ 4F08 23           	INC HL
 315+ 4F09              	; set x
 316+ 4F09 73           	LD (HL), E
 317+ 4F0A 23           	INC HL
 318+ 4F0B 72           	LD (HL), D
 319+ 4F0C 23           	INC HL
 320+ 4F0D E5           	PUSH HL
 321+ 4F0E D9           	EXX
 322+ 4F0F E1           	POP HL
 323+ 4F10              	; check if 0<=pattern<64
 324+ 4F10 7A           	LD A, D
 325+ 4F11 B7           	OR A
 326+ 4F12 20 0B        	JR NZ, .L3
 327+ 4F14 7B           	LD A, E
 328+ 4F15 FE 40        	CP 64
 329+ 4F17 30 06        	JR NC, .L3
 330+ 4F19              	; set pattern
 331+ 4F19              	;ADD A, A
 332+ 4F19              	;ADD A, A
 333+ 4F19              	;ADD A, A
 334+ 4F19 77           	LD (HL), A
 335+ 4F1A 23           	INC HL
 336+ 4F1B 72           	LD (HL), D
 337+ 4F1C 23           	INC HL
 338+ 4F1D 18 02        	JR .L4
 339+ 4F1F              .L3:
 340+ 4F1F              	; skip pattern
 341+ 4F1F 23          > INC HL
 341+ 4F20 23          > INC HL
 342+ 4F21              .L4:
 343+ 4F21              	; check if 0<=color<16
 344+ 4F21 78           	LD A, B
 345+ 4F22 B7           	OR A
 346+ 4F23 20 08        	JR NZ, .L5
 347+ 4F25 79           	LD A, C
 348+ 4F26 FE 10        	CP 16
 349+ 4F28 30 03        	JR NC, .L5
 350+ 4F2A              	; set color
 351+ 4F2A 71           	LD (HL), C
 352+ 4F2B 23           	INC HL
 353+ 4F2C 70           	LD (HL), B
 354+ 4F2D
 355+ 4F2D              .L5:
 356+ 4F2D FB           	EI
 357+ 4F2E DD E5        	PUSH IX
 358+ 4F30 E1           	POP HL
 359+ 4F31 C9           	RET
 360+ 4F32              ; *******************************************************************************************************
 361+ 4F32
 362+ 4F32              ; *******************************************************************************************************
 363+ 4F32              ; function sets sprite location based on initial coordinates and offset provided
 364+ 4F32              ; input A=sprite number in SPRATR_DATA , 0-31
 365+ 4F32              ; input DE=initial x
 366+ 4F32              ; input BC=initial y
 367+ 4F32              ; input IY=location where delta y,x are located
 368+ 4F32              ; modifies AF, HL, IX
 369+ 4F32              SPRSET_DELTA_POS:
 370+ 4F32 D5           	PUSH DE
 371+ 4F33 CD 85 4D     	CALL GETnthSPRATTR
 372+ 4F36 E5           	PUSH HL
 373+ 4F37 DD E1        	POP IX
 374+ 4F39 D1           	POP DE
 375+ 4F3A              	; IX=sprite's y location
 376+ 4F3A FD 6E 00     	LD L, (IY)
 377+ 4F3D FD 66 01     	LD H, (IY+1)
 378+ 4F40 09           	ADD HL, BC
 379+ 4F41 DD 75 00     	LD (IX), L
 380+ 4F44 DD 74 01     	LD (IX+1), H
 381+ 4F47 FD 6E 02     	LD L, (IY+2)
 382+ 4F4A FD 66 03     	LD H, (IY+3)
 383+ 4F4D 19           	ADD HL, DE
 384+ 4F4E DD 75 02     	LD (IX+2), L
 385+ 4F51 DD 74 03     	LD (IX+3), H
 386+ 4F54 C9           	RET
 387+ 4F55              ; *******************************************************************************************************
 388+ 4F55
 389+ 4F55              ; *******************************************************************************************************
 390+ 4F55              ; function to handle CALL SPRGRPMOV basic extension
 391+ 4F55              ; sets position of a group of sprites described with
 392+ 4F55              ; { int sprite_num, int delta_y, int delta_x } [count]
 393+ 4F55              ; _SPRGRPMOV ( INT x,
 394+ 4F55              ;			   INT y,
 395+ 4F55              ;			   BYTE count,
 396+ 4F55              ;			   INT[2][count] data_ptr
 397+ 4F55              SPRGRPMOV:
 398+ 4F55 3A 7C 4D     	LD A, (SPRATR_INIT_STATUS)
 399+ 4F58 B7           	OR A
 400+ 4F59 CA E1 65     	JP Z,ILLEGAL_FUNCTION
 401+ 4F5C              	; opening (
 402+ 4F5C CD C1 65     	CALL CHKCHAR
 403+ 4F5F 28           	DB '('
 404+ 4F60              	; get x
 405+ 4F60 DD 21 2F 54  	LD IX, FRMQNT
 406+ 4F64 CD 59 01     	CALL CALBAS
 407+ 4F67 ED 53 B3 62  	LD (BLIT_STRUCT),DE
 408+ 4F6B              	; comma
 409+ 4F6B CD C1 65     	CALL CHKCHAR
 410+ 4F6E 2C           	DB ','
 411+ 4F6F              	; get y
 412+ 4F6F DD 21 2F 54  	LD IX, FRMQNT
 413+ 4F73 CD 59 01     	CALL CALBAS
 414+ 4F76 ED 53 B5 62  	LD (BLIT_STRUCT+2),DE
 415+ 4F7A              	; comma
 416+ 4F7A CD C1 65     	CALL CHKCHAR
 417+ 4F7D 2C           	DB ','
 418+ 4F7E              	; get count
 419+ 4F7E DD 21 1C 52  	LD IX, GETBYT
 420+ 4F82 CD 59 01     	CALL CALBAS
 421+ 4F85 32 B7 62     	LD (BLIT_STRUCT+4),A
 422+ 4F88              	; comma
 423+ 4F88 CD C1 65     	CALL CHKCHAR
 424+ 4F8B 2C           	DB ','
 425+ 4F8C              	; get sprite group definition array data pointer
 426+ 4F8C 3A B7 62     	LD A,(BLIT_STRUCT+4)
 427+ 4F8F 5F           	LD E,A
 428+ 4F90 16 03        	LD D,3
 429+ 4F92 3E 02        	LD A,2
 430+ 4F94 47           	LD B,A
 431+ 4F95 CD EE 65     	CALL GET_BASIC_ARRAY_DATA_POINTER
 432+ 4F98 ED 43 B8 62  	LD (BLIT_STRUCT+5),BC
 433+ 4F9C              	; ending )
 434+ 4F9C CD C1 65     	CALL CHKCHAR
 435+ 4F9F 29           	DB ')'
 436+ 4FA0
 437+ 4FA0 E5           	PUSH HL
 438+ 4FA1
 439+ 4FA1 D9               EXX
 440+ 4FA2 ED 5B B3 62      LD DE,(BLIT_STRUCT) ; initial x
 441+ 4FA6 ED 4B B5 62      LD BC,(BLIT_STRUCT+2) ; initial y
 442+ 4FAA D9               EXX
 443+ 4FAB 2A B8 62         LD HL,(BLIT_STRUCT+5) ; pointer to data
 444+ 4FAE 3A B7 62         LD A,(BLIT_STRUCT+4) ; number of entries
 445+ 4FB1 47               LD B,A
 446+ 4FB2 3E 01        	LD A,1
 447+ 4FB4 32 C4 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 448+ 4FB7 F3           	DI
 449+ 4FB8 CD C2 4F     	CALL .UPDATE_LOC
 450+ 4FBB FB           	EI
 451+ 4FBC AF           	XOR A
 452+ 4FBD 32 C4 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 453+ 4FC0
 454+ 4FC0 E1           	POP HL
 455+ 4FC1 C9           	RET
 456+ 4FC2
 457+ 4FC2              .UPDATE_LOC:
 458+ 4FC2 7E           	LD A, (HL)
 459+ 4FC3 23           	INC HL
 460+ 4FC4 23           	INC HL
 461+ 4FC5 E5           	PUSH HL
 462+ 4FC6 FD E1        	POP IY
 463+ 4FC8 D9           	EXX
 464+ 4FC9 CD 32 4F     	CALL SPRSET_DELTA_POS
 465+ 4FCC D9           	EXX
 466+ 4FCD 23          > INC HL
 466+ 4FCE 23          > INC HL
 466+ 4FCF 23          > INC HL
 466+ 4FD0 23          > INC HL
 467+ 4FD1 10 EF        	DJNZ .UPDATE_LOC
 468+ 4FD3 C9           	RET
 469+ 4FD4              ; *******************************************************************************************************
 470+ 4FD4
# file closed: asm\SPRITES.asm
 119  4FD4               ENDIF
 120  4FD4
 121  4FD4               IF (ANIM_CMDS == 1)
 122  4FD4               INCLUDE "ANIMATION.asm"
# file opened: asm\ANIMATION.asm
   1+ 4FD4              ; sprite animation routines
   2+ 4FD4
   3+ 4FD4              ; number of animation items and pointer
   4+ 4FD4              ANIMITEMNUM:
   5+ 4FD4 00            DB 0
   6+ 4FD5              ANIMITEMPTR:
   7+ 4FD5 23 66         DW EXT_END
   8+ 4FD7              ; number of animation definitions and pointer
   9+ 4FD7              ANIMDEFNUM:
  10+ 4FD7 00            DB 0
  11+ 4FD8              ANIMDEFPTR:
  12+ 4FD8 23 66         DW EXT_END
  13+ 4FDA              ; number of links between sprite and animation definitions
  14+ 4FDA              ANIMSPRNUM:
  15+ 4FDA 00            DB 0
  16+ 4FDB              ANIMSPRPTR:
  17+ 4FDB 23 66         DW EXT_END
  18+ 4FDD              ; number of automatic sprite group move and animate structures
  19+ 4FDD              AUTOSGAMNUM:
  20+ 4FDD 00            DB 0
  21+ 4FDE              AUTOSGAMPTR:
  22+ 4FDE 23 66         DW EXT_END
  23+ 4FE0
  24+ 4FE0              ; ANIMATION ITEM
  25+ 4FE0              ; byte type = [0 - pattern and color change
  26+ 4FE0              ;              1 - pattern definition change ]
  27+ 4FE0              ; word ticks - number of ticks to hold this state
  28+ 4FE0              ; for type = 0
  29+ 4FE0              ;   byte pattern;
  30+ 4FE0              ;   byte color;
  31+ 4FE0              ; for type = 1
  32+ 4FE0              ;   work data_pointer;
  33+ 4FE0              ; total size = 5b
  34+ 4FE0
  35+ 4FE0              ; ANIMATION DEFINITION
  36+ 4FE0              ; byte number of items 1-15
  37+ 4FE0              ; byte[15] anim_item;
  38+ 4FE0              ; total size = 16b
  39+ 4FE0
  40+ 4FE0              ; SPRITE/CHAR ANIMATION
  41+ 4FE0              ; +00 byte sprite/char number;
  42+ 4FE0              ; +01 word time;
  43+ 4FE0              ; +03 byte current item;
  44+ 4FE0              ; +04 byte animation definition;
  45+ 4FE0              ; +05 byte cyclic;
  46+ 4FE0              ; +06 byte active;
  47+ 4FE0              ; +07 byte 0=sprite, 1-3 character bank
  48+ 4FE0              ; total size = 8b
  49+ 4FE0
  50+ 4FE0              ; AUTOMATIC SPRITE GROUP MOVE AND ANIMATE structure
  51+ 4FE0              ; +00 pointer to X variable
  52+ 4FE0              ; +02 pointer to Y variable
  53+ 4FE0              ; +04 minimum value
  54+ 4FE0              ; +06 maximal value
  55+ 4FE0              ; +08 delta value
  56+ 4FE0              ; +10 direction 0=horizontal, <>0 = vertical
  57+ 4FE0              ; +11 sprite group size
  58+ 4FE0              ; +12 sprite group pointer
  59+ 4FE0              ; +14 animation list size
  60+ 4FE0              ; +15 animation list pointer for negative delta values
  61+ 4FE0              ; +17 animation list pointer for positive delta values
  62+ 4FE0              ; +19 active flag
  63+ 4FE0              ; +20 ticks for movement
  64+ 4FE0              ; +22 timer
  65+ 4FE0              ; total = 24b
  66+ 4FE0
  67+ 4FE0              ; *******************************************************************************************************
  68+ 4FE0              ; helper function HL=A*5
  69+ 4FE0              ; changes HL,DE
  70+ 4FE0              Ax5:
  71+ 4FE0 26 00            LD H,0
  72+ 4FE2 6F               LD L,A
  73+ 4FE3 54               LD D,H
  74+ 4FE4 5D               LD E,L
  75+ 4FE5 29               ADD HL,HL
  76+ 4FE6 29               ADD HL,HL
  77+ 4FE7 19               ADD HL,DE
  78+ 4FE8 C9               RET
  79+ 4FE9              ; *******************************************************************************************************
  80+ 4FE9
  81+ 4FE9              ; *******************************************************************************************************
  82+ 4FE9              ; helper function gets pointer to n-th animation item
  83+ 4FE9              ; changes HL,DE
  84+ 4FE9              GETnthANIMITEM:
  85+ 4FE9 CD E0 4F         CALL Ax5
  86+ 4FEC ED 5B D5 4F      LD DE,(ANIMITEMPTR)
  87+ 4FF0 19               ADD HL,DE
  88+ 4FF1 C9               RET
  89+ 4FF2              ; *******************************************************************************************************
  90+ 4FF2
  91+ 4FF2              ; *******************************************************************************************************
  92+ 4FF2              ; helper function gets pointer to n-th entry in animation definition
  93+ 4FF2              ; changes HL,DE
  94+ 4FF2              GETnthANIMDEF:
  95+ 4FF2 26 00            LD H,0
  96+ 4FF4 6F               LD L,A
  97+ 4FF5 CD AE 64         CALL HLx16
  98+ 4FF8 ED 5B D8 4F      LD DE,(ANIMDEFPTR)
  99+ 4FFC 19               ADD HL,DE
 100+ 4FFD C9               RET
 101+ 4FFE              ; *******************************************************************************************************
 102+ 4FFE
 103+ 4FFE              ; *******************************************************************************************************
 104+ 4FFE              ; helper function gets pointer to n-th entry in sprite animation
 105+ 4FFE              ; changes HL,DE
 106+ 4FFE              GETnthSPRANIM:
 107+ 4FFE 26 00            LD H,0
 108+ 5000 6F               LD L,A
 109+ 5001 CD AF 64         CALL HLx8
 110+ 5004 ED 5B DB 4F      LD DE,(ANIMSPRPTR)
 111+ 5008 19               ADD HL,DE
 112+ 5009 C9               RET
 113+ 500A              ; *******************************************************************************************************
 114+ 500A
 115+ 500A              ; *******************************************************************************************************
 116+ 500A              ; helper function gets pointer to n-th entry in autosgam table
 117+ 500A              ; changes HL,DE
 118+ 500A              GETnthAUTOSGAM:
 119+ 500A 26 00            LD H,0
 120+ 500C 6F               LD L,A
 121+ 500D CD AF 64         CALL HLx8
 122+ 5010 54               LD D,H
 123+ 5011 5D               LD E,L
 124+ 5012 29               ADD HL,HL
 125+ 5013 19               ADD HL,DE
 126+ 5014 ED 5B DE 4F      LD DE,(AUTOSGAMPTR)
 127+ 5018 19               ADD HL,DE
 128+ 5019 C9               RET
 129+ 501A              ; *******************************************************************************************************
 130+ 501A
 131+ 501A              ; *******************************************************************************************************
 132+ 501A              ; function to handle CALL MAXANIMITEMS basic extension
 133+ 501A              ; MAXANIMITEMS (BYTE number)
 134+ 501A              ; sets new number and moves memory buffers as needed
 135+ 501A              MAXANIMITEMS:
 136+ 501A              	; opening (
 137+ 501A CD C1 65     	CALL CHKCHAR
 138+ 501D 28           	DB '('
 139+ 501E              	; get value
 140+ 501E DD 21 1C 52  	LD IX, GETBYT
 141+ 5022 CD 59 01     	CALL CALBAS
 142+ 5025 F5               PUSH AF
 143+ 5026              	; ending )
 144+ 5026 CD C1 65     	CALL CHKCHAR
 145+ 5029 29           	DB ')'
 146+ 502A F1               POP AF
 147+ 502B F3               DI
 148+ 502C              	; save position
 149+ 502C E5           	PUSH HL
 150+ 502D              .ENTRY:
 151+ 502D 47               LD B,A
 152+ 502E 3A D4 4F         LD A,(ANIMITEMNUM)
 153+ 5031 90               SUB B
 154+ 5032 28 28            JR Z, .EXIT; same value as before
 155+ 5034 FD 21 D8 4F      LD IY,ANIMDEFPTR
 156+ 5038 FA 5F 50         JP M, .INCREASE
 157+ 503B                  ; new value is lower than previous one
 158+ 503B CD 7E 50         CALL .SIZEDIFF
 159+ 503E CD 99 50         CALL .DECREASE_COMMON
 160+ 5041 2A DB 4F         LD HL,(ANIMSPRPTR)
 161+ 5044 AF               XOR A
 162+ 5045 ED 42            SBC HL,BC
 163+ 5047 22 DB 4F         LD (ANIMSPRPTR),HL
 164+ 504A              .E1:
 165+ 504A 2A DE 4F         LD HL,(AUTOSGAMPTR)
 166+ 504D AF               XOR A
 167+ 504E ED 42            SBC HL,BC
 168+ 5050 22 DE 4F         LD (AUTOSGAMPTR),HL
 169+ 5053              .E3:
 170+ 5053 2A 10 40         LD HL,(FREEMEMPTR)
 171+ 5056 AF               XOR A
 172+ 5057 ED 42            SBC HL,BC
 173+ 5059 22 10 40         LD (FREEMEMPTR),HL
 174+ 505C              .EXIT:
 175+ 505C FB               EI
 176+ 505D E1           	POP HL
 177+ 505E C9           	RET
 178+ 505F              .INCREASE:
 179+ 505F ED 44            NEG
 180+ 5061 CD 7E 50         CALL .SIZEDIFF
 181+ 5064 CD C5 50         CALL .INCREASE_COMMON
 182+ 5067 2A DB 4F         LD HL,(ANIMSPRPTR)
 183+ 506A 09               ADD HL,BC
 184+ 506B 22 DB 4F         LD (ANIMSPRPTR),HL
 185+ 506E              .E2:
 186+ 506E 2A DE 4F         LD HL,(AUTOSGAMPTR)
 187+ 5071 09               ADD HL,BC
 188+ 5072 22 DE 4F         LD (AUTOSGAMPTR),HL
 189+ 5075              .E4:
 190+ 5075 2A 10 40         LD HL,(FREEMEMPTR)
 191+ 5078 09               ADD HL,BC
 192+ 5079 22 10 40         LD (FREEMEMPTR),HL
 193+ 507C 18 DE            JR .EXIT
 194+ 507E              .SIZEDIFF:
 195+ 507E CD E0 4F         CALL Ax5
 196+ 5081 78               LD A,B
 197+ 5082 32 D4 4F         LD (ANIMITEMNUM),A
 198+ 5085 44               LD B,H
 199+ 5086 4D               LD C,L
 200+ 5087 C9               RET ; BC=size difference in bytes
 201+ 5088              .SIZETOMOVE:
 202+ 5088 D5               PUSH DE
 203+ 5089 2A 10 40         LD HL,(FREEMEMPTR)
 204+ 508C FD 5E 00         LD E,(IY)
 205+ 508F FD 56 01         LD D,(IY+1)
 206+ 5092 AF               XOR A
 207+ 5093 ED 52            SBC HL,DE
 208+ 5095 44               LD B,H
 209+ 5096 4D               LD C,L
 210+ 5097 D1               POP DE
 211+ 5098 C9               RET
 212+ 5099              .DECREASE_COMMON:
 213+ 5099 FD 6E 00         LD L,(IY)
 214+ 509C FD 66 01         LD H,(IY+1)
 215+ 509F AF               XOR A
 216+ 50A0 ED 42            SBC HL,BC
 217+ 50A2 EB               EX DE,HL
 218+ 50A3 C5               PUSH BC
 219+ 50A4 CD 88 50         CALL .SIZETOMOVE
 220+ 50A7 F3               DI
 221+ 50A8 78               LD A,B
 222+ 50A9 B1               OR C
 223+ 50AA 28 08            JR Z,.L1
 224+ 50AC FD 6E 00         LD L,(IY)
 225+ 50AF FD 66 01         LD H,(IY+1)
 226+ 50B2 ED B0            LDIR
 227+ 50B4              .L1:
 228+ 50B4 C1               POP BC
 229+ 50B5 FD 6E 00         LD L,(IY)
 230+ 50B8 FD 66 01         LD H,(IY+1)
 231+ 50BB AF               XOR A
 232+ 50BC ED 42            SBC HL,BC
 233+ 50BE FD 75 00         LD (IY),L
 234+ 50C1 FD 74 01         LD (IY+1),H
 235+ 50C4 C9               RET
 236+ 50C5              .INCREASE_COMMON:
 237+ 50C5 2A 10 40         LD HL,(FREEMEMPTR)
 238+ 50C8 2B               DEC HL
 239+ 50C9 AF               XOR A
 240+ 50CA ED 42            SBC HL,BC
 241+ 50CC EB               EX DE,HL
 242+ 50CD C5               PUSH BC
 243+ 50CE CD 88 50         CALL .SIZETOMOVE
 244+ 50D1 F3               DI
 245+ 50D2 78               LD A,B
 246+ 50D3 B1               OR C
 247+ 50D4 28 06            JR Z,.L2
 248+ 50D6 2A 10 40         LD HL,(FREEMEMPTR)
 249+ 50D9 2B               DEC HL
 250+ 50DA ED B8            LDDR
 251+ 50DC              .L2:
 252+ 50DC C1               POP BC
 253+ 50DD FD 6E 00         LD L,(IY)
 254+ 50E0 FD 66 01         LD H,(IY+1)
 255+ 50E3 09               ADD HL,BC
 256+ 50E4 FD 75 00         LD (IY),L
 257+ 50E7 FD 74 01         LD (IY+1),H
 258+ 50EA C9               RET
 259+ 50EB              ; *******************************************************************************************************
 260+ 50EB
 261+ 50EB              ; *******************************************************************************************************
 262+ 50EB              ; function to handle CALL ANIMITEMPAT basic extension
 263+ 50EB              ; ANIMITEMPAT ( BYTE id,
 264+ 50EB              ;               INT ticks,
 265+ 50EB              ;               BYTE pattern,
 266+ 50EB              ;               BYTE color )
 267+ 50EB              ; fills animation item data, returns an error if ID out of bounds
 268+ 50EB              ANIMITEMPAT:
 269+ 50EB                  ; opening (
 270+ 50EB CD C1 65     	CALL CHKCHAR
 271+ 50EE 28           	DB '('
 272+ 50EF              	; get id
 273+ 50EF DD 21 1C 52  	LD IX, GETBYT
 274+ 50F3 CD 59 01     	CALL CALBAS
 275+ 50F6 F5               PUSH AF
 276+ 50F7                  ; check if out of bounds
 277+ 50F7 3C               INC A
 278+ 50F8 4F               LD C,A
 279+ 50F9 3A D4 4F         LD A,(ANIMITEMNUM)
 280+ 50FC B9               CP C
 281+ 50FD DA D9 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 282+ 5100              	; comma
 283+ 5100 CD C1 65     	CALL CHKCHAR
 284+ 5103 2C           	DB ','
 285+ 5104              	; get ticks
 286+ 5104 DD 21 2F 54  	LD IX, FRMQNT
 287+ 5108 CD 59 01     	CALL CALBAS
 288+ 510B D5           	PUSH DE
 289+ 510C              	; comma
 290+ 510C CD C1 65     	CALL CHKCHAR
 291+ 510F 2C           	DB ','
 292+ 5110              	; get pattern
 293+ 5110 DD 21 1C 52  	LD IX, GETBYT
 294+ 5114 CD 59 01     	CALL CALBAS
 295+ 5117 F5               PUSH AF
 296+ 5118              	; comma
 297+ 5118 CD C1 65     	CALL CHKCHAR
 298+ 511B 2C           	DB ','
 299+ 511C              	; get color
 300+ 511C DD 21 1C 52  	LD IX, GETBYT
 301+ 5120 CD 59 01     	CALL CALBAS
 302+ 5123 F5               PUSH AF
 303+ 5124              	; ending )
 304+ 5124 CD C1 65     	CALL CHKCHAR
 305+ 5127 29           	DB ')'
 306+ 5128              .ENTRY:
 307+ 5128 E5               PUSH HL
 308+ 5129 DD E1            POP IX
 309+ 512B D9               EXX
 310+ 512C C1               POP BC ; color
 311+ 512D D1               POP DE ; pattern
 312+ 512E E1               POP HL ; ticks
 313+ 512F D9               EXX
 314+ 5130 F1               POP AF
 315+ 5131 CD E9 4F         CALL GETnthANIMITEM
 316+ 5134 E5               PUSH HL
 317+ 5135 FD E1            POP IY
 318+ 5137 D9               EXX
 319+ 5138 FD 36 00 00      LD (IY),0 ; type=0
 320+ 513C FD 75 01         LD (IY+1),L
 321+ 513F FD 74 02         LD (IY+2),H
 322+ 5142 FD 72 03         LD (IY+3),D
 323+ 5145 FD 70 04         LD (IY+4),B
 324+ 5148
 325+ 5148 DD E5            PUSH IX
 326+ 514A E1               POP HL
 327+ 514B C9               RET
 328+ 514C              ; *******************************************************************************************************
 329+ 514C
 330+ 514C              ; *******************************************************************************************************
 331+ 514C              ; function to handle CALL ANIMITEMPTR basic extension
 332+ 514C              ; ANIMITEMPTR ( BYTE id,
 333+ 514C              ;               INT ticks,
 334+ 514C              ;               INT pointer,
 335+ 514C              ; fills animation item data, returns an error if ID out of bounds
 336+ 514C              ANIMITEMPTR_CMD:
 337+ 514C                  ; opening (
 338+ 514C CD C1 65     	CALL CHKCHAR
 339+ 514F 28           	DB '('
 340+ 5150              	; get id
 341+ 5150 DD 21 1C 52  	LD IX, GETBYT
 342+ 5154 CD 59 01     	CALL CALBAS
 343+ 5157 F5               PUSH AF
 344+ 5158                  ; check if out of bounds
 345+ 5158 3C               INC A
 346+ 5159 4F               LD C,A
 347+ 515A 3A D4 4F         LD A,(ANIMITEMNUM)
 348+ 515D B9               CP C
 349+ 515E DA D9 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 350+ 5161              	; comma
 351+ 5161 CD C1 65     	CALL CHKCHAR
 352+ 5164 2C           	DB ','
 353+ 5165              	; get ticks
 354+ 5165 DD 21 2F 54  	LD IX, FRMQNT
 355+ 5169 CD 59 01     	CALL CALBAS
 356+ 516C D5           	PUSH DE
 357+ 516D              	; comma
 358+ 516D CD C1 65     	CALL CHKCHAR
 359+ 5170 2C           	DB ','
 360+ 5171              	; get pointer
 361+ 5171 DD 21 2F 54  	LD IX, FRMQNT
 362+ 5175 CD 59 01     	CALL CALBAS
 363+ 5178 D5           	PUSH DE
 364+ 5179              	; ending )
 365+ 5179 CD C1 65     	CALL CHKCHAR
 366+ 517C 29           	DB ')'
 367+ 517D              .ENTRY:
 368+ 517D E5               PUSH HL
 369+ 517E DD E1            POP IX
 370+ 5180 D9               EXX
 371+ 5181 D1               POP DE ; pointer
 372+ 5182 E1               POP HL ; ticks
 373+ 5183 D9               EXX
 374+ 5184 F1               POP AF
 375+ 5185 CD E9 4F         CALL GETnthANIMITEM
 376+ 5188 E5               PUSH HL
 377+ 5189 FD E1            POP IY
 378+ 518B D9               EXX
 379+ 518C FD 36 00 01      LD (IY),1 ; type=1
 380+ 5190 FD 75 01         LD (IY+1),L
 381+ 5193 FD 74 02         LD (IY+2),H
 382+ 5196 FD 73 03         LD (IY+3),E
 383+ 5199 FD 72 04         LD (IY+4),D
 384+ 519C
 385+ 519C DD E5            PUSH IX
 386+ 519E E1               POP HL
 387+ 519F C9               RET
 388+ 51A0              ; *******************************************************************************************************
 389+ 51A0
 390+ 51A0              ; *******************************************************************************************************
 391+ 51A0              ; function to handle CALL MAXANIMDEFS basic extension
 392+ 51A0              ; MAXANIMDEFS (BYTE number)
 393+ 51A0              ; sets new number and moves memory buffers as needed
 394+ 51A0              MAXANIMDEFS:
 395+ 51A0              	; opening (
 396+ 51A0 CD C1 65     	CALL CHKCHAR
 397+ 51A3 28           	DB '('
 398+ 51A4              	; get value
 399+ 51A4 DD 21 1C 52  	LD IX, GETBYT
 400+ 51A8 CD 59 01     	CALL CALBAS
 401+ 51AB F5               PUSH AF
 402+ 51AC              	; ending )
 403+ 51AC CD C1 65     	CALL CHKCHAR
 404+ 51AF 29           	DB ')'
 405+ 51B0 F1               POP AF
 406+ 51B1 F3               DI
 407+ 51B2              	; save position
 408+ 51B2 E5           	PUSH HL
 409+ 51B3              .ENTRY:
 410+ 51B3 47               LD B,A
 411+ 51B4 3A D7 4F         LD A,(ANIMDEFNUM)
 412+ 51B7 90               SUB B
 413+ 51B8 CA 5C 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 414+ 51BB FD 21 DB 4F      LD IY,ANIMSPRPTR
 415+ 51BF FA CB 51         JP M, .INCREASE
 416+ 51C2                  ; new value is lower than previous one
 417+ 51C2 CD D6 51         CALL .SIZEDIFF
 418+ 51C5 CD 99 50         CALL MAXANIMITEMS.DECREASE_COMMON
 419+ 51C8 C3 4A 50         JP MAXANIMITEMS.E1
 420+ 51CB              .INCREASE:
 421+ 51CB ED 44            NEG
 422+ 51CD CD D6 51         CALL .SIZEDIFF
 423+ 51D0 CD C5 50         CALL MAXANIMITEMS.INCREASE_COMMON
 424+ 51D3 C3 6E 50         JP MAXANIMITEMS.E2
 425+ 51D6              .SIZEDIFF:
 426+ 51D6 26 00            LD H,0
 427+ 51D8 6F               LD L,A
 428+ 51D9 CD AE 64         CALL HLx16
 429+ 51DC 78               LD A,B
 430+ 51DD 32 D7 4F         LD (ANIMDEFNUM),A
 431+ 51E0 44               LD B,H
 432+ 51E1 4D               LD C,L
 433+ 51E2 C9               RET ; BC=size difference in bytes
 434+ 51E3              ; *******************************************************************************************************
 435+ 51E3
 436+ 51E3              ; *******************************************************************************************************
 437+ 51E3              ; function to handle CALL ANIMDEF basic extension
 438+ 51E3              ; ANIMITEMPAT ( BYTE id,
 439+ 51E3              ;               BYTE size,
 440+ 51E3              ;               INT[] list )
 441+ 51E3              ; fills animation definition data, returns an error if out of bounds, or invalid type
 442+ 51E3              ANIMDEF:
 443+ 51E3                  ; opening (
 444+ 51E3 CD C1 65     	CALL CHKCHAR
 445+ 51E6 28           	DB '('
 446+ 51E7              	; get id
 447+ 51E7 DD 21 1C 52  	LD IX, GETBYT
 448+ 51EB CD 59 01     	CALL CALBAS
 449+ 51EE F5               PUSH AF
 450+ 51EF                  ; check if out of bounds
 451+ 51EF 3C               INC A
 452+ 51F0 4F               LD C,A
 453+ 51F1 3A D7 4F         LD A,(ANIMDEFNUM)
 454+ 51F4 B9               CP C
 455+ 51F5 DA D9 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 456+ 51F8              	; comma
 457+ 51F8 CD C1 65     	CALL CHKCHAR
 458+ 51FB 2C           	DB ','
 459+ 51FC              	; get size
 460+ 51FC DD 21 1C 52  	LD IX, GETBYT
 461+ 5200 CD 59 01     	CALL CALBAS
 462+ 5203 FE 10            CP 16
 463+ 5205 D2 DD 65         JP NC, OVERFLOW
 464+ 5208 B7               OR A
 465+ 5209 CA DD 65         JP Z, OVERFLOW
 466+ 520C F5           	PUSH AF
 467+ 520D              	; comma
 468+ 520D CD C1 65     	CALL CHKCHAR
 469+ 5210 2C           	DB ','
 470+ 5211              	; get pointer to a list of animation items in integer array format
 471+ 5211                  ; get array pointer
 472+ 5211 D1               POP DE
 473+ 5212 D5               PUSH DE
 474+ 5213 3E 02            LD A,2
 475+ 5215 06 01            LD B,1
 476+ 5217 CD EE 65         CALL GET_BASIC_ARRAY_DATA_POINTER
 477+ 521A C5               PUSH BC
 478+ 521B              	; ending )
 479+ 521B CD C1 65     	CALL CHKCHAR
 480+ 521E 29           	DB ')'
 481+ 521F              .ENTRY:
 482+ 521F E5               PUSH HL
 483+ 5220 DD E1            POP IX
 484+ 5222 D1               POP DE ; pointer to INT array
 485+ 5223 C1               POP BC ; B=item number
 486+ 5224 F1               POP AF ; id
 487+ 5225 D5               PUSH DE
 488+ 5226 CD F2 4F         CALL GETnthANIMDEF
 489+ 5229 D1               POP DE
 490+ 522A 70               LD (HL),B
 491+ 522B              .L1:
 492+ 522B 23               INC HL
 493+ 522C 1A               LD A,(DE)
 494+ 522D 13          > INC DE
 494+ 522E 13          > INC DE
 495+ 522F 77               LD (HL),A
 496+ 5230 10 F9            DJNZ .L1
 497+ 5232 DD E5            PUSH IX
 498+ 5234 E1               POP HL
 499+ 5235 C9               RET
 500+ 5236              ; *******************************************************************************************************
 501+ 5236
 502+ 5236              ; *******************************************************************************************************
 503+ 5236              ; function to handle CALL MAXANIMSPRS basic extension
 504+ 5236              ; MAXANIMSPRS (BYTE number)
 505+ 5236              ; sets new number and moves memory buffers as needed
 506+ 5236              MAXANIMSPRS:
 507+ 5236              	; opening (
 508+ 5236 CD C1 65     	CALL CHKCHAR
 509+ 5239 28           	DB '('
 510+ 523A              	; get value
 511+ 523A DD 21 1C 52  	LD IX, GETBYT
 512+ 523E CD 59 01     	CALL CALBAS
 513+ 5241 F5               PUSH AF
 514+ 5242              	; ending )
 515+ 5242 CD C1 65     	CALL CHKCHAR
 516+ 5245 29           	DB ')'
 517+ 5246 F1               POP AF
 518+ 5247 F3               DI
 519+ 5248              	; save position
 520+ 5248 E5           	PUSH HL
 521+ 5249              .ENTRY:
 522+ 5249 47               LD B,A
 523+ 524A 3A DA 4F         LD A,(ANIMSPRNUM)
 524+ 524D 90               SUB B
 525+ 524E CA 5C 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 526+ 5251 FD 21 DE 4F      LD IY,AUTOSGAMPTR
 527+ 5255 FA 61 52         JP M, .INCREASE
 528+ 5258                  ; new value is lower than previous one
 529+ 5258 CD 82 52         CALL .SIZEDIFF
 530+ 525B CD 99 50         CALL MAXANIMITEMS.DECREASE_COMMON
 531+ 525E C3 53 50         JP MAXANIMITEMS.E3
 532+ 5261              .INCREASE:
 533+ 5261 ED 44            NEG
 534+ 5263 F5               PUSH AF; save difference for later to set active flag to 0 of new entires
 535+ 5264 CD 82 52         CALL .SIZEDIFF
 536+ 5267 CD C5 50         CALL MAXANIMITEMS.INCREASE_COMMON
 537+ 526A AF               XOR A
 538+ 526B ED 42            SBC HL,BC ; location of new stuff
 539+ 526D F1               POP AF
 540+ 526E C5               PUSH BC
 541+ 526F 47               LD B,A
 542+ 5270 11 08 00         LD DE,8
 543+ 5273 E5               PUSH HL
 544+ 5274 DD E1            POP IX
 545+ 5276              .L1:
 546+ 5276 DD 36 06 00      LD (IX+6),0 ; active flag
 547+ 527A DD 19            ADD IX,DE
 548+ 527C 10 F8            DJNZ .L1
 549+ 527E C1               POP BC
 550+ 527F C3 75 50         JP MAXANIMITEMS.E4
 551+ 5282              .SIZEDIFF:
 552+ 5282 26 00            LD H,0
 553+ 5284 6F               LD L,A
 554+ 5285 CD AF 64         CALL HLx8
 555+ 5288 78               LD A,B
 556+ 5289 32 DA 4F         LD (ANIMSPRNUM),A
 557+ 528C 44               LD B,H
 558+ 528D 4D               LD C,L
 559+ 528E C9               RET ; BC=size difference in bytes
 560+ 528F              ; *******************************************************************************************************
 561+ 528F
 562+ 528F              ; *******************************************************************************************************
 563+ 528F              ; function to handle CALL ANIMSPRITE basic extension
 564+ 528F              ; ANIMSPRITE ( BYTE id,
 565+ 528F              ;              BYTE sprite_number,
 566+ 528F              ;              BYTE animation_definition_id,
 567+ 528F              ;              BYTE cyclic_flag )
 568+ 528F              ; fills sprite animation data, returns an error if out of bounds, or invalid type
 569+ 528F              ANIMSPRITE:
 570+ 528F                  ; opening (
 571+ 528F CD C1 65     	CALL CHKCHAR
 572+ 5292 28           	DB '('
 573+ 5293              	; get sprite animation id
 574+ 5293 DD 21 1C 52  	LD IX, GETBYT
 575+ 5297 CD 59 01     	CALL CALBAS
 576+ 529A F5               PUSH AF
 577+ 529B 3C               INC A
 578+ 529C 4F               LD C,A
 579+ 529D 3A DA 4F         LD A,(ANIMSPRNUM)
 580+ 52A0 B9               CP C
 581+ 52A1 DA D9 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 582+ 52A4              	; comma
 583+ 52A4 CD C1 65     	CALL CHKCHAR
 584+ 52A7 2C           	DB ','
 585+ 52A8              	; get sprite number
 586+ 52A8 DD 21 1C 52  	LD IX, GETBYT
 587+ 52AC CD 59 01     	CALL CALBAS
 588+ 52AF F5               PUSH AF
 589+ 52B0                  ; check if out of bounds
 590+ 52B0 FE 20            CP 32
 591+ 52B2 D2 D9 65         JP NC, SUBSCRIPT_OUT_OF_RANGE
 592+ 52B5              	; comma
 593+ 52B5 CD C1 65     	CALL CHKCHAR
 594+ 52B8 2C           	DB ','
 595+ 52B9              	; get animation definition id
 596+ 52B9 DD 21 1C 52  	LD IX, GETBYT
 597+ 52BD CD 59 01     	CALL CALBAS
 598+ 52C0 F5               PUSH AF
 599+ 52C1 3C               INC A
 600+ 52C2 4F               LD C,A
 601+ 52C3 3A D7 4F         LD A,(ANIMDEFNUM)
 602+ 52C6 B9               CP C
 603+ 52C7 DA D9 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 604+ 52CA              	; comma
 605+ 52CA CD C1 65     	CALL CHKCHAR
 606+ 52CD 2C           	DB ','
 607+ 52CE              	; get cyclic flag
 608+ 52CE DD 21 1C 52  	LD IX, GETBYT
 609+ 52D2 CD 59 01         CALL CALBAS
 610+ 52D5 F5           	PUSH AF
 611+ 52D6              	; ending )
 612+ 52D6 CD C1 65     	CALL CHKCHAR
 613+ 52D9 29           	DB ')'
 614+ 52DA              .ENTRY:
 615+ 52DA E5               PUSH HL
 616+ 52DB DD E1            POP IX
 617+ 52DD D9               EXX
 618+ 52DE D1               POP DE ; cyclic
 619+ 52DF C1               POP BC ; animation definition id
 620+ 52E0 E1               POP HL ; sprite number
 621+ 52E1 D9               EXX
 622+ 52E2 F1               POP AF ; sprite animation id
 623+ 52E3 CD FE 4F         CALL GETnthSPRANIM
 624+ 52E6 E5               PUSH HL
 625+ 52E7 FD E1            POP IY
 626+ 52E9 D9               EXX
 627+ 52EA FD 74 00         LD (IY),H
 628+ 52ED FD 70 04         LD (IY+4),B
 629+ 52F0 FD 72 05         LD (IY+5),D
 630+ 52F3                  ;LD (IY+6),0 -- not needed as set in MAXANIMSPRS
 631+ 52F3                  ; following will do preparation for ANIMSTEP situation
 632+ 52F3                  ; current item set to above limit and timer to 1
 633+ 52F3                  ; any call to ANIMSTEP will switch and setup to first item for cyclic
 634+ 52F3 FD 36 03 FF      LD (IY+3),255
 635+ 52F7 FD 36 01 01      LD (IY+1),1
 636+ 52FB FD 36 02 00      LD (IY+2),0
 637+ 52FF                  ; mark as sprite animation
 638+ 52FF FD 36 07 00      LD (IY+7),0
 639+ 5303 DD E5            PUSH IX
 640+ 5305 E1               POP HL
 641+ 5306 C9               RET
 642+ 5307              ; *******************************************************************************************************
 643+ 5307
 644+ 5307              ; *******************************************************************************************************
 645+ 5307              ; function to handle CALL ANIMCHAR basic extension
 646+ 5307              ; ANIMCHAR ( BYTE id,
 647+ 5307              ;            INT character number 0-767,
 648+ 5307              ;            BYTE animation_definition_id,
 649+ 5307              ;            BYTE cyclic_flag )
 650+ 5307              ; fills sprite animation data, returns an error if out of bounds, or invalid type
 651+ 5307              ANIMCHAR:
 652+ 5307                  ; opening (
 653+ 5307 CD C1 65     	CALL CHKCHAR
 654+ 530A 28           	DB '('
 655+ 530B              	; get sprite animation id
 656+ 530B DD 21 1C 52  	LD IX, GETBYT
 657+ 530F CD 59 01     	CALL CALBAS
 658+ 5312 F5               PUSH AF
 659+ 5313 3C               INC A
 660+ 5314 4F               LD C,A
 661+ 5315 3A DA 4F         LD A,(ANIMSPRNUM)
 662+ 5318 B9               CP C
 663+ 5319 DA D9 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 664+ 531C              	; comma
 665+ 531C CD C1 65     	CALL CHKCHAR
 666+ 531F 2C           	DB ','
 667+ 5320              	; get character number
 668+ 5320 DD 21 2F 54  	LD IX, FRMQNT
 669+ 5324 CD 59 01     	CALL CALBAS
 670+ 5327 D5               PUSH DE
 671+ 5328                  ; check if out of bounds
 672+ 5328 7A               LD A,D
 673+ 5329 FE 03            CP 3
 674+ 532B D2 D9 65         JP NC, SUBSCRIPT_OUT_OF_RANGE
 675+ 532E              	; comma
 676+ 532E CD C1 65     	CALL CHKCHAR
 677+ 5331 2C           	DB ','
 678+ 5332              	; get animation definition id
 679+ 5332 DD 21 1C 52  	LD IX, GETBYT
 680+ 5336 CD 59 01     	CALL CALBAS
 681+ 5339 F5               PUSH AF
 682+ 533A 3C               INC A
 683+ 533B 4F               LD C,A
 684+ 533C 3A D7 4F         LD A,(ANIMDEFNUM)
 685+ 533F B9               CP C
 686+ 5340 DA D9 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 687+ 5343              	; comma
 688+ 5343 CD C1 65     	CALL CHKCHAR
 689+ 5346 2C           	DB ','
 690+ 5347              	; get cyclic flag
 691+ 5347 DD 21 1C 52  	LD IX, GETBYT
 692+ 534B CD 59 01         CALL CALBAS
 693+ 534E F5           	PUSH AF
 694+ 534F              	; ending )
 695+ 534F CD C1 65     	CALL CHKCHAR
 696+ 5352 29           	DB ')'
 697+ 5353              .ENTRY:
 698+ 5353 E5               PUSH HL
 699+ 5354 DD E1            POP IX
 700+ 5356 D9               EXX
 701+ 5357 D1               POP DE ; cyclic
 702+ 5358 C1               POP BC ; animation definition id
 703+ 5359 E1               POP HL ; character number
 704+ 535A D9               EXX
 705+ 535B F1               POP AF ; sprite animation id
 706+ 535C CD FE 4F         CALL GETnthSPRANIM
 707+ 535F E5               PUSH HL
 708+ 5360 FD E1            POP IY
 709+ 5362 D9               EXX
 710+ 5363 FD 75 00         LD (IY),L
 711+ 5366 24               INC H ; save character bank+1
 712+ 5367 FD 74 07         LD (IY+7),H
 713+ 536A FD 70 04         LD (IY+4),B
 714+ 536D FD 72 05         LD (IY+5),D
 715+ 5370                  ;LD (IY+6),0 -- not needed as set in MAXANIMSPRS
 716+ 5370                  ; following will do preparation for ANIMSTEP situation
 717+ 5370                  ; current item set to above limit and timer to 1
 718+ 5370                  ; any call to ANIMSTEP will switch and setup to first item for cyclic
 719+ 5370 FD 36 03 FF      LD (IY+3),255
 720+ 5374 FD 36 01 01      LD (IY+1),1
 721+ 5378 FD 36 02 00      LD (IY+2),0
 722+ 537C DD E5            PUSH IX
 723+ 537E E1               POP HL
 724+ 537F C9               RET
 725+ 5380              ; *******************************************************************************************************
 726+ 5380
 727+ 5380              ; *******************************************************************************************************
 728+ 5380              ; function to handle CALL MAXAUTOSGAMS basic extension
 729+ 5380              ; MAXAUTOSGAMS (BYTE number)
 730+ 5380              ; sets new number and moves memory buffers as needed
 731+ 5380              MAXAUTOSGAMS:
 732+ 5380              	; opening (
 733+ 5380 CD C1 65     	CALL CHKCHAR
 734+ 5383 28           	DB '('
 735+ 5384              	; get value
 736+ 5384 DD 21 1C 52  	LD IX, GETBYT
 737+ 5388 CD 59 01     	CALL CALBAS
 738+ 538B F5               PUSH AF
 739+ 538C              	; ending )
 740+ 538C CD C1 65     	CALL CHKCHAR
 741+ 538F 29           	DB ')'
 742+ 5390 F1               POP AF
 743+ 5391 F3               DI
 744+ 5392              	; save position
 745+ 5392 E5           	PUSH HL
 746+ 5393              .ENTRY:
 747+ 5393 47               LD B,A
 748+ 5394 3A DD 4F         LD A,(AUTOSGAMNUM)
 749+ 5397 90               SUB B
 750+ 5398 CA 5C 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 751+ 539B FD 21 10 40      LD IY,FREEMEMPTR
 752+ 539F FA AB 53         JP M, .INCREASE
 753+ 53A2                  ; new value is lower than previous one
 754+ 53A2 CD CC 53         CALL .SIZEDIFF
 755+ 53A5 CD 99 50         CALL MAXANIMITEMS.DECREASE_COMMON
 756+ 53A8 C3 5C 50         JP MAXANIMITEMS.EXIT
 757+ 53AB              .INCREASE:
 758+ 53AB ED 44            NEG
 759+ 53AD F5               PUSH AF; save difference for later to set active flag to 0 of new entires
 760+ 53AE CD CC 53         CALL .SIZEDIFF
 761+ 53B1 CD C5 50         CALL MAXANIMITEMS.INCREASE_COMMON
 762+ 53B4 AF               XOR A
 763+ 53B5 ED 42            SBC HL,BC ; location of new stuff
 764+ 53B7 F1               POP AF
 765+ 53B8 C5               PUSH BC
 766+ 53B9 47               LD B,A
 767+ 53BA 11 18 00         LD DE,24
 768+ 53BD E5               PUSH HL
 769+ 53BE DD E1            POP IX
 770+ 53C0              .L1:
 771+ 53C0 DD 36 13 00      LD (IX+19),0 ; active flag
 772+ 53C4 DD 19            ADD IX,DE
 773+ 53C6 10 F8            DJNZ .L1
 774+ 53C8 C1               POP BC
 775+ 53C9 C3 5C 50         JP MAXANIMITEMS.EXIT
 776+ 53CC              .SIZEDIFF:
 777+ 53CC 26 00            LD H,0
 778+ 53CE 6F               LD L,A
 779+ 53CF CD AF 64         CALL HLx8
 780+ 53D2 54               LD D,H
 781+ 53D3 5D               LD E,L
 782+ 53D4 29               ADD HL,HL
 783+ 53D5 19               ADD HL,DE
 784+ 53D6 78               LD A,B
 785+ 53D7 32 DD 4F         LD (AUTOSGAMNUM),A
 786+ 53DA 44               LD B,H
 787+ 53DB 4D               LD C,L
 788+ 53DC C9               RET ; BC=size difference in bytes
 789+ 53DD              ; *******************************************************************************************************
 790+ 53DD
 791+ 53DD              ; *******************************************************************************************************
 792+ 53DD              ; function to handle CALL AUTOSGAMDEF basic extension
 793+ 53DD              ; AUTOSGAMDEF ( BYTE id,
 794+ 53DD              ;               INT VARIABLE x, INT VARIABLE y,
 795+ 53DD              ;               INT minimum, INT maximum, INT delta,
 796+ 53DD              ;               INT direction,
 797+ 53DD              ;               INT ticks,
 798+ 53DD              ;               BYTE sprite_group_count,
 799+ 53DD              ;               INT[2][sprite_group_count] VARIABLE sprite_group,
 800+ 53DD              ;               BYTE item_number,
 801+ 53DD              ;               INT[] VARIABLE sprite_animations_negative_direction,
 802+ 53DD              ;               INT[] VARIABLE sprite_animations_positive_direction
 803+ 53DD              AUTOSGAMDEF:
 804+ 53DD                  ; opening (
 805+ 53DD CD C1 65     	CALL CHKCHAR
 806+ 53E0 28           	DB '('
 807+ 53E1              	; get sprite animation id
 808+ 53E1 DD 21 1C 52  	LD IX, GETBYT
 809+ 53E5 CD 59 01     	CALL CALBAS
 810+ 53E8 F5               PUSH AF
 811+ 53E9 3C               INC A
 812+ 53EA 4F               LD C,A
 813+ 53EB 3A DD 4F         LD A,(AUTOSGAMNUM)
 814+ 53EE B9               CP C
 815+ 53EF DA D9 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 816+ 53F2 F1               POP AF
 817+ 53F3 E5               PUSH HL
 818+ 53F4 CD 0A 50         CALL GETnthAUTOSGAM
 819+ 53F7 22 AF 62         LD (BLIT_TMP),HL ; for later
 820+ 53FA E1               POP HL
 821+ 53FB              	; comma
 822+ 53FB CD C1 65     	CALL CHKCHAR
 823+ 53FE 2C           	DB ','
 824+ 53FF              	; get address of the X coordinate variable
 825+ 53FF DD 21 A4 5E  	LD IX, PTRGET
 826+ 5403 CD 59 01     	CALL CALBAS
 827+ 5406 DD 2A AF 62  	LD IX,(BLIT_TMP)
 828+ 540A DD 73 00         LD (IX+0),E
 829+ 540D DD 72 01         LD (IX+1),D
 830+ 5410              	; comma
 831+ 5410 CD C1 65     	CALL CHKCHAR
 832+ 5413 2C           	DB ','
 833+ 5414              	; get address of the Y coordinate variable
 834+ 5414 DD 21 A4 5E  	LD IX, PTRGET
 835+ 5418 CD 59 01     	CALL CALBAS
 836+ 541B DD 2A AF 62  	LD IX,(BLIT_TMP)
 837+ 541F DD 73 02         LD (IX+2),E
 838+ 5422 DD 72 03         LD (IX+3),D
 839+ 5425              	; comma
 840+ 5425 CD C1 65     	CALL CHKCHAR
 841+ 5428 2C           	DB ','
 842+ 5429              	; get minimum value
 843+ 5429 DD 21 2F 54  	LD IX, FRMQNT
 844+ 542D CD 59 01     	CALL CALBAS
 845+ 5430 DD 2A AF 62  	LD IX,(BLIT_TMP)
 846+ 5434 DD 73 04         LD (IX+4),E
 847+ 5437 DD 72 05         LD (IX+5),D
 848+ 543A              	; comma
 849+ 543A CD C1 65     	CALL CHKCHAR
 850+ 543D 2C           	DB ','
 851+ 543E              	; get maximum value
 852+ 543E DD 21 2F 54  	LD IX, FRMQNT
 853+ 5442 CD 59 01     	CALL CALBAS
 854+ 5445 DD 2A AF 62  	LD IX,(BLIT_TMP)
 855+ 5449 DD 73 06         LD (IX+6),E
 856+ 544C DD 72 07         LD (IX+7),D
 857+ 544F              	; comma
 858+ 544F CD C1 65     	CALL CHKCHAR
 859+ 5452 2C           	DB ','
 860+ 5453              	; get delta value
 861+ 5453 DD 21 2F 54  	LD IX, FRMQNT
 862+ 5457 CD 59 01     	CALL CALBAS
 863+ 545A DD 2A AF 62  	LD IX,(BLIT_TMP)
 864+ 545E DD 73 08         LD (IX+8),E
 865+ 5461 DD 72 09         LD (IX+9),D
 866+ 5464              	; comma
 867+ 5464 CD C1 65     	CALL CHKCHAR
 868+ 5467 2C           	DB ','
 869+ 5468              	; get direction value
 870+ 5468 DD 21 2F 54  	LD IX, FRMQNT
 871+ 546C CD 59 01     	CALL CALBAS
 872+ 546F DD 2A AF 62  	LD IX,(BLIT_TMP)
 873+ 5473 DD 73 0A         LD (IX+10),E
 874+ 5476 DD 72 0B         LD (IX+11),D
 875+ 5479              	; comma
 876+ 5479 CD C1 65     	CALL CHKCHAR
 877+ 547C 2C           	DB ','
 878+ 547D              	; get ticks value
 879+ 547D DD 21 2F 54  	LD IX, FRMQNT
 880+ 5481 CD 59 01     	CALL CALBAS
 881+ 5484 DD 2A AF 62  	LD IX,(BLIT_TMP)
 882+ 5488 DD 73 14         LD (IX+20),E
 883+ 548B DD 72 15         LD (IX+21),D
 884+ 548E              	; comma
 885+ 548E CD C1 65     	CALL CHKCHAR
 886+ 5491 2C           	DB ','
 887+ 5492              	; get sprite group count
 888+ 5492 DD 21 1C 52  	LD IX, GETBYT
 889+ 5496 CD 59 01     	CALL CALBAS
 890+ 5499 B7               OR A
 891+ 549A CA D9 65         JP Z,SUBSCRIPT_OUT_OF_RANGE
 892+ 549D DD 2A AF 62  	LD IX,(BLIT_TMP)
 893+ 54A1 DD 77 0B         LD (IX+11),A
 894+ 54A4              	; comma
 895+ 54A4 CD C1 65     	CALL CHKCHAR
 896+ 54A7 2C           	DB ','
 897+ 54A8              	; get sprite group definition array data pointer
 898+ 54A8 DD 2A AF 62  	LD IX,(BLIT_TMP)
 899+ 54AC DD 5E 0B         LD E,(IX+11)
 900+ 54AF 16 03        	LD D,3
 901+ 54B1 3E 02        	LD A,2
 902+ 54B3 47           	LD B,A
 903+ 54B4 CD EE 65     	CALL GET_BASIC_ARRAY_DATA_POINTER
 904+ 54B7 DD 2A AF 62  	LD IX,(BLIT_TMP)
 905+ 54BB DD 71 0C     	LD (IX+12),C
 906+ 54BE DD 70 0D         LD (IX+13),B
 907+ 54C1              	; comma
 908+ 54C1 CD C1 65     	CALL CHKCHAR
 909+ 54C4 2C           	DB ','
 910+ 54C5              	; get sprite animation array size
 911+ 54C5 DD 21 1C 52  	LD IX,GETBYT
 912+ 54C9 CD 59 01     	CALL CALBAS
 913+ 54CC DD 2A AF 62  	LD IX,(BLIT_TMP)
 914+ 54D0 DD 77 0E         LD (IX+14),A
 915+ 54D3 B7               OR A
 916+ 54D4 CA D9 65         JP Z,SUBSCRIPT_OUT_OF_RANGE
 917+ 54D7              	; comma
 918+ 54D7 CD C1 65     	CALL CHKCHAR
 919+ 54DA 2C           	DB ','
 920+ 54DB                  ; get array pointer for negative direction
 921+ 54DB DD 2A AF 62  	LD IX,(BLIT_TMP)
 922+ 54DF DD 56 0E         LD D,(IX+14)
 923+ 54E2 3E 02            LD A,2
 924+ 54E4 06 01            LD B,1
 925+ 54E6 CD EE 65         CALL GET_BASIC_ARRAY_DATA_POINTER
 926+ 54E9 DD 2A AF 62  	LD IX,(BLIT_TMP)
 927+ 54ED DD 71 0F         LD (IX+15),C
 928+ 54F0 DD 70 10         LD (IX+16),B
 929+ 54F3              	; comma
 930+ 54F3 CD C1 65     	CALL CHKCHAR
 931+ 54F6 2C           	DB ','
 932+ 54F7                  ; get array pointer for positive direction
 933+ 54F7 DD 2A AF 62  	LD IX,(BLIT_TMP)
 934+ 54FB DD 56 0E         LD D,(IX+14)
 935+ 54FE 3E 02            LD A,2
 936+ 5500 06 01            LD B,1
 937+ 5502 CD EE 65         CALL GET_BASIC_ARRAY_DATA_POINTER
 938+ 5505 DD 2A AF 62  	LD IX,(BLIT_TMP)
 939+ 5509 DD 71 11         LD (IX+17),C
 940+ 550C DD 70 12         LD (IX+18),B
 941+ 550F              	; ending )
 942+ 550F CD C1 65     	CALL CHKCHAR
 943+ 5512 29           	DB ')'
 944+ 5513 C9               RET
 945+ 5514              ; *******************************************************************************************************
 946+ 5514
 947+ 5514              ; *******************************************************************************************************
 948+ 5514              ; function to handle CALL AUTOSGAMSTART basic extension
 949+ 5514              ; AUTOSGAMSTART ( BYTE id )
 950+ 5514              AUTOSGAMSTART:
 951+ 5514 3E 01            LD A,1
 952+ 5516              .COMMON:
 953+ 5516 32 42 55         LD (.SETVALUE+3),A
 954+ 5519                  ; opening (
 955+ 5519 CD C1 65     	CALL CHKCHAR
 956+ 551C 28           	DB '('
 957+ 551D              	; get sprite animation id
 958+ 551D DD 21 1C 52  	LD IX, GETBYT
 959+ 5521 CD 59 01     	CALL CALBAS
 960+ 5524 F5               PUSH AF
 961+ 5525 3C               INC A
 962+ 5526 4F               LD C,A
 963+ 5527 3A DD 4F         LD A,(AUTOSGAMNUM)
 964+ 552A B9               CP C
 965+ 552B DA D9 65         JP C,SUBSCRIPT_OUT_OF_RANGE
 966+ 552E F1               POP AF
 967+ 552F E5               PUSH HL
 968+ 5530 CD 0A 50         CALL GETnthAUTOSGAM
 969+ 5533 E5               PUSH HL
 970+ 5534 DD E1            POP IX
 971+ 5536 E1               POP HL
 972+ 5537 DD E5            PUSH IX
 973+ 5539              	; ending )
 974+ 5539 CD C1 65     	CALL CHKCHAR
 975+ 553C 29           	DB ')'
 976+ 553D
 977+ 553D                  ; so syntax is fine
 978+ 553D DD E1            POP IX
 979+ 553F              .SETVALUE:
 980+ 553F DD 36 13 01      LD (IX+19),1 ; active flag
 981+ 5543                  ; set initial timer
 982+ 5543 DD 7E 14         LD A,(IX+20)
 983+ 5546 DD 77 16         LD (IX+22),A
 984+ 5549 DD 7E 15         LD A,(IX+21)
 985+ 554C DD 77 17         LD (IX+23),A
 986+ 554F C9               RET
 987+ 5550              ; *******************************************************************************************************
 988+ 5550
 989+ 5550              ; *******************************************************************************************************
 990+ 5550              ; function to handle CALL AUTOSGAMSTOP basic extension
 991+ 5550              ; AUTOSGAMSTOP ( BYTE id )
 992+ 5550              AUTOSGAMSTOP:
 993+ 5550 AF               XOR A
 994+ 5551 18 C3            JR AUTOSGAMSTART.COMMON
 995+ 5553              ; *******************************************************************************************************
 996+ 5553
 997+ 5553              ; *******************************************************************************************************
 998+ 5553              ; function to handle CALL ANIMSTEP basic extension
 999+ 5553              ; two forms
1000+ 5553              ; ANIMSTEP ( BYTE id )
1001+ 5553              ; or
1002+ 5553              ; ANIMSTEP ( BYTE item_number,
1003+ 5553              ;            INT[] sprite_animations )
1004+ 5553              ; sets active flag to 1
1005+ 5553              ANIMSTEP:
1006+ 5553 11 D2 55         LD DE,ANIMSTARTSTOP_COMMON.STEP
1007+ 5556 18 08            JR ANIMSTARTSTOP_COMMON
1008+ 5558              ; *******************************************************************************************************
1009+ 5558              ; *******************************************************************************************************
1010+ 5558              ; function to handle CALL ANIMSTART basic extension
1011+ 5558              ; two forms
1012+ 5558              ; ANIMSTART ( BYTE id )
1013+ 5558              ; or
1014+ 5558              ; ANIMSTART ( BYTE item_number,
1015+ 5558              ;             INT[] sprite_animations )
1016+ 5558              ; sets active flag to 1
1017+ 5558              ANIMSTART:
1018+ 5558 11 C0 55         LD DE,ANIMSTARTSTOP_COMMON.START
1019+ 555B 18 03            JR ANIMSTARTSTOP_COMMON
1020+ 555D              ; *******************************************************************************************************
1021+ 555D              ; *******************************************************************************************************
1022+ 555D              ; function to handle CALL ANIMSTOP basic extension
1023+ 555D              ; two forms
1024+ 555D              ; ANIMSTOP ( BYTE id )
1025+ 555D              ; or
1026+ 555D              ; ANIMSTOP ( BYTE item_number,
1027+ 555D              ;            INT[] sprite_animations )
1028+ 555D              ; sets active flag to 1
1029+ 555D              ANIMSTOP:
1030+ 555D 11 CD 55         LD DE,ANIMSTARTSTOP_COMMON.STOP
1031+ 5560              ; *******************************************************************************************************
1032+ 5560              ANIMSTARTSTOP_COMMON:
1033+ 5560 ED 53 BE 55      LD (ANIMSTARTSTOP_COMMON.FN+1),DE
1034+ 5564                  ; opening (
1035+ 5564 CD C1 65     	CALL CHKCHAR
1036+ 5567 28           	DB '('
1037+ 5568              	; get sprite animation id or array size
1038+ 5568 DD 21 1C 52  	LD IX,GETBYT
1039+ 556C CD 59 01     	CALL CALBAS
1040+ 556F F5               PUSH AF
1041+ 5570                  ; check if comma present
1042+ 5570 CD CB 65         CALL GETPREVCHAR
1043+ 5573 23               INC HL
1044+ 5574 FE 2C            CP ','
1045+ 5576 28 0E            JR Z,.L1
1046+ 5578 FE 29            CP ')'
1047+ 557A C2 E5 65         JP NZ,SYNTAX_ERROR
1048+ 557D                  ; ok so single argument variant
1049+ 557D F1               POP AF
1050+ 557E E5               PUSH HL
1051+ 557F F3               DI
1052+ 5580 CD AC 55         CALL .SETVALUE
1053+ 5583 FB               EI
1054+ 5584 E1               POP HL
1055+ 5585 C9               RET
1056+ 5586              .L1:
1057+ 5586                  ; get array pointer
1058+ 5586 D1               POP DE
1059+ 5587 D5               PUSH DE
1060+ 5588 3E 02            LD A,2
1061+ 558A 06 01            LD B,1
1062+ 558C CD EE 65         CALL GET_BASIC_ARRAY_DATA_POINTER
1063+ 558F C5               PUSH BC
1064+ 5590              	; ending )
1065+ 5590 CD C1 65     	CALL CHKCHAR
1066+ 5593 29           	DB ')'
1067+ 5594 D1               POP DE ; array pointer
1068+ 5595 C1               POP BC ; number of items
1069+ 5596 78               LD A,B
1070+ 5597 B7               OR A
1071+ 5598 CA D9 65         JP Z,SUBSCRIPT_OUT_OF_RANGE
1072+ 559B E5               PUSH HL
1073+ 559C F3               DI
1074+ 559D              .L2:
1075+ 559D C5               PUSH BC
1076+ 559E 1A               LD A,(DE)
1077+ 559F 13          > INC DE
1077+ 55A0 13          > INC DE
1078+ 55A1 D5               PUSH DE
1079+ 55A2 CD AC 55         CALL .SETVALUE
1080+ 55A5 D1               POP DE
1081+ 55A6 C1               POP BC
1082+ 55A7 10 F4            DJNZ .L2
1083+ 55A9 FB               EI
1084+ 55AA E1               POP HL
1085+ 55AB C9               RET
1086+ 55AC
1087+ 55AC              .SETVALUE:
1088+ 55AC 47               LD B,A
1089+ 55AD 3C               INC A
1090+ 55AE 4F               LD C,A
1091+ 55AF 3A DA 4F         LD A,(ANIMSPRNUM)
1092+ 55B2 B9               CP C
1093+ 55B3 DA D9 65         JP C,SUBSCRIPT_OUT_OF_RANGE
1094+ 55B6 78               LD A,B
1095+ 55B7 CD FE 4F         CALL GETnthSPRANIM
1096+ 55BA E5               PUSH HL
1097+ 55BB DD E1            POP IX
1098+ 55BD              .FN:
1099+ 55BD C3 00 00         JP 0
1100+ 55C0              .START:
1101+ 55C0 DD 36 06 01      LD (IX+6),1 ; active flag
1102+ 55C4 DD 36 03 00      LD (IX+3),0 ; current item
1103+ 55C8 06 00            LD B,0 ; setup timer
1104+ 55CA C3 51 56         JP SETUP_ANIM_STEP
1105+ 55CD              .STOP:
1106+ 55CD DD 36 06 00      LD (IX+6),0 ; active flag
1107+ 55D1 C9               RET
1108+ 55D2              .STEP:
1109+ 55D2 06 00            LD B,0
1110+ 55D4 C3 F5 55         JP PROCESS_SINGLE_ANIMATION.INACTIVE_TOO
1111+ 55D7              ; *******************************************************************************************************
1112+ 55D7
1113+ 55D7              ; *******************************************************************************************************
1114+ 55D7              ; function processes animations during vblank period
1115+ 55D7              PROCESS_ANIMATIONS:
1116+ 55D7 3A DA 4F         LD A,(ANIMSPRNUM)
1117+ 55DA B7               OR A
1118+ 55DB C8               RET Z; no animations defined
1119+ 55DC 47               LD B,A
1120+ 55DD DD 2A DB 4F      LD IX,(ANIMSPRPTR)
1121+ 55E1              .L1:
1122+ 55E1 C5               PUSH BC
1123+ 55E2 06 00            LD B,0 ; normal mode, change on timer expiry only
1124+ 55E4 CD F0 55         CALL PROCESS_SINGLE_ANIMATION
1125+ 55E7 11 08 00         LD DE,8
1126+ 55EA DD 19            ADD IX,DE
1127+ 55EC C1               POP BC
1128+ 55ED 10 F2            DJNZ .L1
1129+ 55EF C9               RET
1130+ 55F0              ; *******************************************************************************************************
1131+ 55F0
1132+ 55F0              ; *******************************************************************************************************
1133+ 55F0              ; processes single sprite animation
1134+ 55F0              ; skips inactive ones, but this can be skipped by calling .INACTIVE_TOO entry point
1135+ 55F0              ; on timer expiry goes to next animation item
1136+ 55F0              ; input IX=sprite animation pointer
1137+ 55F0              ; input B=1 force mode, activate animation action regardless of expired timer
1138+ 55F0              PROCESS_SINGLE_ANIMATION:
1139+ 55F0 DD 7E 06         LD A,(IX+6); active
1140+ 55F3 B7               OR A
1141+ 55F4 C8               RET Z ; inactive animation
1142+ 55F5              .INACTIVE_TOO:
1143+ 55F5 DD 6E 01         LD L,(IX+1)
1144+ 55F8 DD 66 02         LD H,(IX+2) ; HL=end time
1145+ 55FB 2B               DEC HL
1146+ 55FC DD 75 01         LD (IX+1),L
1147+ 55FF DD 74 02         LD (IX+2),H
1148+ 5602 7D               LD A,L
1149+ 5603 B4               OR H
1150+ 5604 28 06            JR Z,.STEP
1151+ 5606 05               DEC B
1152+ 5607 04               INC B
1153+ 5608 C8               RET Z ; not forced mode, return
1154+ 5609 C3 51 56         JP SETUP_ANIM_STEP; call function with flag to skip timer setup
1155+ 560C              .STEP:
1156+ 560C 06 00            LD B,0; setup timer
1157+ 560E DD 34 03         INC (IX+3) ; current animation item
1158+ 5611 C3 51 56         JP SETUP_ANIM_STEP
1159+ 5614              ; *******************************************************************************************************
1160+ 5614
1161+ 5614              ; *******************************************************************************************************
1162+ 5614              ; function will setup sprite animation after current item change
1163+ 5614              ; input A=current animation definition
1164+ 5614              ; input IX=pointer to sprite animation
1165+ 5614              ; input B=1 skip timer setup
1166+ 5614              ; output IY=pointer to animation item
1167+ 5614              ; CF=1 error or non-cyclic animation ended, in both cases set active flag to 0
1168+ 5614              ; basically sets new end time for current animation
1169+ 5614              INIT_CURRENT_ANIMATION:
1170+ 5614 CD F2 4F         CALL GETnthANIMDEF
1171+ 5617 DD 7E 03         LD A,(IX+3) ; current animation item
1172+ 561A BE               CP (HL) ; number of animation items in the animation definition
1173+ 561B 38 0A            JR C,.L3 ; last item not reached
1174+ 561D                  ; last item reached
1175+ 561D DD 7E 05         LD A,(IX+5) ; cyclic flag
1176+ 5620 B7               OR A
1177+ 5621 28 2C            JR Z,.ERROR ; non-cyclic animation
1178+ 5623                  ; cyclic animation, restart
1179+ 5623 DD 36 03 00      LD (IX+3),0; current item
1180+ 5627              .L3:
1181+ 5627                  ; HL = animation definition
1182+ 5627 23               INC HL ; skip animation definition size field
1183+ 5628 16 00            LD D,0
1184+ 562A DD 5E 03         LD E,(IX+3); current item
1185+ 562D 19               ADD HL,DE
1186+ 562E 4E               LD C,(HL) ; current animation item
1187+ 562F 0C               INC C
1188+ 5630 3A D4 4F         LD A,(ANIMITEMNUM)
1189+ 5633 B9               CP C
1190+ 5634 38 19            JR C,.ERROR ; invalid animation item, stop animation
1191+ 5636 0D               DEC C
1192+ 5637 79               LD A,C
1193+ 5638 CD E9 4F         CALL GETnthANIMITEM
1194+ 563B E5               PUSH HL
1195+ 563C FD E1            POP IY ; IY=animation item
1196+ 563E 05               DEC B
1197+ 563F 28 0C            JR Z,.EXIT
1198+ 5641 FD 5E 01         LD E,(IY+1)
1199+ 5644 FD 56 02         LD D,(IY+2) ; duration
1200+ 5647 DD 73 01         LD (IX+1),E
1201+ 564A DD 72 02         LD (IX+2),D
1202+ 564D              .EXIT:
1203+ 564D AF               XOR A
1204+ 564E C9               RET
1205+ 564F              .ERROR:
1206+ 564F 37               SCF
1207+ 5650 C9               RET
1208+ 5651              ; *******************************************************************************************************
1209+ 5651
1210+ 5651              ; *******************************************************************************************************
1211+ 5651              ; function will display currect item and set up expiry time
1212+ 5651              ; it will also stop the animation if expired
1213+ 5651              ; sets sprite update flag if any changes in sprite data made
1214+ 5651              ; input IX=current sprite animation
1215+ 5651              ; input B=1 skip timer setup
1216+ 5651              SETUP_ANIM_STEP:
1217+ 5651 DD 4E 04         LD C,(IX+4) ; animation definition ID
1218+ 5654 0C               INC C
1219+ 5655 3A D7 4F         LD A,(ANIMDEFNUM)
1220+ 5658 B9               CP C
1221+ 5659 30 05            JR NC,.L2
1222+ 565B                  ; given animation item is outside of bounds, deactivate animation
1223+ 565B              .STOPANIM:
1224+ 565B DD 36 06 00      LD (IX+6),0
1225+ 565F C9               RET
1226+ 5660              .L2:
1227+ 5660 0D               DEC C
1228+ 5661 79               LD A,C
1229+ 5662 CD 14 56         CALL INIT_CURRENT_ANIMATION
1230+ 5665 38 F4            JR C, .STOPANIM
1231+ 5667 FD 7E 00         LD A,(IY) ; type of animation item
1232+ 566A B7               OR A
1233+ 566B 28 44            JR Z,.L4 ; change pattern and/or color
1234+ 566D              .PAT:
1235+ 566D                  ; change pattern definition
1236+ 566D                  ; check if sprite or character
1237+ 566D DD 7E 07         LD A,(IX+7)
1238+ 5670 B7               OR A
1239+ 5671 20 58            JR NZ,.CHAR
1240+ 5673 DD 7E 00         LD A,(IX) ; sprite number
1241+ 5676 CD 85 4D         CALL GETnthSPRATTR
1242+ 5679 23          > INC HL ; skip y and x
1242+ 567A 23          > INC HL
1242+ 567B 23          > INC HL
1242+ 567C 23          > INC HL
1243+ 567D 7E               LD A,(HL); current pattern
1244+ 567E 26 00            LD H,0
1245+ 5680 6F               LD L,A
1246+ 5681 3A E0 F3         LD A,(REG1SAV)
1247+ 5684 E6 02            AND 2
1248+ 5686 20 07            JR NZ,.L6
1249+ 5688                  ; 8x8 sprite
1250+ 5688 CD AF 64         CALL HLx8
1251+ 568B 06 08            LD B,8
1252+ 568D 18 05            JR .L5
1253+ 568F              .L6:
1254+ 568F CD AD 64         CALL HLx32
1255+ 5692 06 20            LD B,32
1256+ 5694              .L5:
1257+ 5694 3A AF FC         LD A,(SCRMOD)
1258+ 5697 3D               DEC A
1259+ 5698 20 06            JR NZ,.L10
1260+ 569A ED 5B C5 F3      LD DE,(T32PAT)
1261+ 569E 18 04            JR .L7
1262+ 56A0              .L10:
1263+ 56A0 ED 5B CF F3      LD DE,(GRPPAT)
1264+ 56A4              .L7:
1265+ 56A4 19               ADD HL,DE
1266+ 56A5 CD 9A 64         CALL SETWRT_LOCAL
1267+ 56A8 FD 6E 03         LD L,(IY+3)
1268+ 56AB FD 66 04         LD H,(IY+4) ; pointer to sprite pattern data
1269+ 56AE C3 A5 64         JP BBYTECOPY
1270+ 56B1              .L4:
1271+ 56B1                  ; change pattern and color in sprite attributes table
1272+ 56B1 DD 7E 00         LD A,(IX) ; sprite number
1273+ 56B4 CD 85 4D         CALL GETnthSPRATTR
1274+ 56B7 23          > INC HL ; skip y and x
1274+ 56B8 23          > INC HL
1274+ 56B9 23          > INC HL
1274+ 56BA 23          > INC HL
1275+ 56BB FD 7E 03         LD A,(IY+3) ; new pattern
1276+ 56BE 77               LD (HL),A
1277+ 56BF 23          > INC HL
1277+ 56C0 23          > INC HL
1278+ 56C1 FD 7E 04         LD A,(IY+4) ; new color
1279+ 56C4 77               LD (HL),A
1280+ 56C5 2A 7D 4D         LD HL,(SPRATR_UPDATE_FLAG)
1281+ 56C8 36 01            LD (HL),1
1282+ 56CA C9               RET
1283+ 56CB              .CHAR:
1284+ 56CB DD 6E 00         LD L,(IX)
1285+ 56CE 3D               DEC A
1286+ 56CF 67               LD H,A
1287+ 56D0 CD AF 64         CALL HLx8
1288+ 56D3 3A AF FC         LD A,(SCRMOD)
1289+ 56D6 3D               DEC A
1290+ 56D7 20 06            JR NZ,.L8
1291+ 56D9 ED 5B C1 F3      LD DE,(T32CGP)
1292+ 56DD 18 04            JR .L9
1293+ 56DF              .L8:
1294+ 56DF ED 5B CB F3      LD DE,(GRPCGP)
1295+ 56E3              .L9:
1296+ 56E3 06 08            LD B,8
1297+ 56E5 18 BD            JR .L7
1298+ 56E7              ; *******************************************************************************************************
1299+ 56E7
# file closed: asm\ANIMATION.asm
 123  56E7               INCLUDE "SGAM.asm"
# file opened: asm\SGAM.asm
   1+ 56E7              ; Sprite Group Animate and Move
   2+ 56E7
   3+ 56E7              ; *******************************************************************************************************
   4+ 56E7              ; shared function to process a list of animations
   5+ 56E7              ; input B=list size
   6+ 56E7              ; input DE=list pointer
   7+ 56E7              SGAM_PROCESS_ANIM_LIST:
   8+ 56E7 21 FA 56         LD HL,.STEP
   9+ 56EA 22 BE 55         LD (ANIMSTARTSTOP_COMMON.FN+1),HL
  10+ 56ED              .L1:
  11+ 56ED C5               PUSH BC
  12+ 56EE 1A               LD A,(DE)
  13+ 56EF 13          > INC DE
  13+ 56F0 13          > INC DE
  14+ 56F1 D5               PUSH DE
  15+ 56F2 CD AC 55         CALL ANIMSTARTSTOP_COMMON.SETVALUE
  16+ 56F5 D1               POP DE
  17+ 56F6 C1               POP BC
  18+ 56F7 10 F4            DJNZ .L1
  19+ 56F9 C9           	RET
  20+ 56FA              .STEP:
  21+ 56FA 06 01            LD B,1
  22+ 56FC C3 F5 55         JP PROCESS_SINGLE_ANIMATION.INACTIVE_TOO
  23+ 56FF              ; *******************************************************************************************************
  24+ 56FF
  25+ 56FF              ; *******************************************************************************************************
  26+ 56FF              ; function to handle CALL SGAM basic extension
  27+ 56FF              ; sets position of a group of sprites as described in SPRGRPMOV
  28+ 56FF              ; and manually animate a list of animations
  29+ 56FF              ; _SGAM ( INT x,
  30+ 56FF              ;	      INT y,
  31+ 56FF              ;		  BYTE count,
  32+ 56FF              ;		  INT[2][count] data_ptr,
  33+ 56FF              ;         BYTE item_number,
  34+ 56FF              ;         INT[] sprite_animations )
  35+ 56FF              ; will put ram in page 0 also, page 1 is already there
  36+ 56FF              SGAM:
  37+ 56FF 3A 7C 4D     	LD A, (SPRATR_INIT_STATUS)
  38+ 5702 B7           	OR A
  39+ 5703 CA E1 65     	JP Z,ILLEGAL_FUNCTION
  40+ 5706              	; opening (
  41+ 5706 CD C1 65     	CALL CHKCHAR
  42+ 5709 28           	DB '('
  43+ 570A              	; get x
  44+ 570A DD 21 2F 54  	LD IX, FRMQNT
  45+ 570E CD 59 01     	CALL CALBAS
  46+ 5711 ED 53 B3 62  	LD (BLIT_STRUCT),DE
  47+ 5715              	; comma
  48+ 5715 CD C1 65     	CALL CHKCHAR
  49+ 5718 2C           	DB ','
  50+ 5719              	; get y
  51+ 5719 DD 21 2F 54  	LD IX, FRMQNT
  52+ 571D CD 59 01     	CALL CALBAS
  53+ 5720 ED 53 B5 62  	LD (BLIT_STRUCT+2),DE
  54+ 5724              	; comma
  55+ 5724 CD C1 65     	CALL CHKCHAR
  56+ 5727 2C           	DB ','
  57+ 5728              	; get count
  58+ 5728 DD 21 1C 52  	LD IX, GETBYT
  59+ 572C CD 59 01     	CALL CALBAS
  60+ 572F B7               OR A
  61+ 5730 CA D9 65         JP Z,SUBSCRIPT_OUT_OF_RANGE
  62+ 5733 32 B7 62     	LD (BLIT_STRUCT+4),A
  63+ 5736              	; comma
  64+ 5736 CD C1 65     	CALL CHKCHAR
  65+ 5739 2C           	DB ','
  66+ 573A              	; get sprite group definition array data pointer
  67+ 573A 3A B7 62         LD A,(BLIT_STRUCT+4)
  68+ 573D 5F           	LD E,A
  69+ 573E 16 03        	LD D,3
  70+ 5740 3E 02        	LD A,2
  71+ 5742 47           	LD B,A
  72+ 5743 CD EE 65     	CALL GET_BASIC_ARRAY_DATA_POINTER
  73+ 5746 ED 43 B8 62  	LD (BLIT_STRUCT+5),BC
  74+ 574A              	; comma
  75+ 574A CD C1 65     	CALL CHKCHAR
  76+ 574D 2C           	DB ','
  77+ 574E              	; get sprite animation array size
  78+ 574E DD 21 1C 52  	LD IX,GETBYT
  79+ 5752 CD 59 01     	CALL CALBAS
  80+ 5755 32 BA 62         LD (BLIT_STRUCT+7),A
  81+ 5758 B7               OR A
  82+ 5759 CA D9 65         JP Z,SUBSCRIPT_OUT_OF_RANGE
  83+ 575C              	; comma
  84+ 575C CD C1 65     	CALL CHKCHAR
  85+ 575F 2C           	DB ','
  86+ 5760                  ; get array pointer
  87+ 5760 3A BA 62         LD A,(BLIT_STRUCT+7)
  88+ 5763 57               LD D,A
  89+ 5764 3E 02            LD A,2
  90+ 5766 06 01            LD B,1
  91+ 5768 CD EE 65         CALL GET_BASIC_ARRAY_DATA_POINTER
  92+ 576B ED 43 BB 62      LD (BLIT_STRUCT+8),BC
  93+ 576F              	; ending )
  94+ 576F CD C1 65     	CALL CHKCHAR
  95+ 5772 29           	DB ')'
  96+ 5773              .ENTRY:
  97+ 5773 E5               PUSH HL
  98+ 5774 F3               DI
  99+ 5775
 100+ 5775              	; enable page 0
 101+ 5775 FD 21 7C 57  	LD IY, .RET
 102+ 5779 C3 73 65     	JP ENABLE_PAGE0
 103+ 577C              .RET:
 104+ 577C D9               EXX
 105+ 577D ED 5B B3 62      LD DE,(BLIT_STRUCT) ; initial x
 106+ 5781 ED 4B B5 62      LD BC,(BLIT_STRUCT+2) ; initial y
 107+ 5785 D9               EXX
 108+ 5786 2A B8 62         LD HL,(BLIT_STRUCT+5) ; pointer to data
 109+ 5789 3A B7 62         LD A,(BLIT_STRUCT+4) ; number of entries
 110+ 578C 47               LD B,A
 111+ 578D CD C2 4F         CALL SPRGRPMOV.UPDATE_LOC
 112+ 5790
 113+ 5790 3A BA 62         LD A,(BLIT_STRUCT+7) ; anim number
 114+ 5793 47               LD B,A
 115+ 5794 ED 5B BB 62      LD DE,(BLIT_STRUCT+8) ; anim list
 116+ 5798 CD E7 56     	CALL SGAM_PROCESS_ANIM_LIST
 117+ 579B
 118+ 579B D1               POP DE
 119+ 579C C1               POP BC
 120+ 579D CD EA 64         CALL RESTORE_PAGE_INFO
 121+ 57A0 FB               EI
 122+ 57A1 E1               POP HL
 123+ 57A2 C9               RET
 124+ 57A3              ; *******************************************************************************************************
 125+ 57A3
 126+ 57A3              ; *******************************************************************************************************
 127+ 57A3              ; handles automatic move and animate sprite groups during interrupt
 128+ 57A3              PROCESS_AUTOSGAMS:
 129+ 57A3 3A DD 4F     	LD A,(AUTOSGAMNUM)
 130+ 57A6 B7           	OR A
 131+ 57A7 C8           	RET Z
 132+ 57A8 47           	LD B,A
 133+ 57A9 DD 2A DE 4F  	LD IX,(AUTOSGAMPTR)
 134+ 57AD              .L1:
 135+ 57AD C5           	PUSH BC
 136+ 57AE DD 7E 13     	LD A,(IX+19) ; active flag
 137+ 57B1 B7           	OR A
 138+ 57B2 28 28        	JR Z,.LOOPEND
 139+ 57B4              	; active, check timer
 140+ 57B4 DD 6E 16     	LD L,(IX+22)
 141+ 57B7 DD 66 17     	LD H,(IX+23) ; timer
 142+ 57BA 2B           	DEC HL
 143+ 57BB 7C           	LD A,H
 144+ 57BC B5           	OR L
 145+ 57BD 28 08        	JR Z,.L2
 146+ 57BF              	; not expired
 147+ 57BF DD 75 16     	LD (IX+22),L
 148+ 57C2 DD 74 17     	LD (IX+23),H
 149+ 57C5 18 15        	JR .LOOPEND
 150+ 57C7              .L2:
 151+ 57C7              	; expired, process
 152+ 57C7
 153+ 57C7                  ; set initial timer
 154+ 57C7 DD 7E 14         LD A,(IX+20)
 155+ 57CA DD 77 16         LD (IX+22),A
 156+ 57CD DD 7E 15         LD A,(IX+21)
 157+ 57D0 DD 77 17         LD (IX+23),A
 158+ 57D3
 159+ 57D3 CD E5 57     	CALL .MOVE
 160+ 57D6 CD 50 58     	CALL .UPDATELOC
 161+ 57D9 CD 75 58     	CALL .PROCESS_ANIM_LIST
 162+ 57DC
 163+ 57DC              .LOOPEND:
 164+ 57DC 11 18 00     	LD DE,24
 165+ 57DF DD 19        	ADD IX,DE
 166+ 57E1 C1           	POP BC
 167+ 57E2 10 C9        	DJNZ .L1
 168+ 57E4 C9           	RET
 169+ 57E5
 170+ 57E5              .MOVE:
 171+ 57E5              	; process movement
 172+ 57E5 DD 7E 0A     	LD A,(IX+10) ; direction
 173+ 57E8 B7           	OR A
 174+ 57E9 28 08        	JR Z, .MOVE_L1
 175+ 57EB              	; vertical
 176+ 57EB DD 6E 02     	LD L,(IX+2)
 177+ 57EE DD 66 03     	LD H,(IX+3) ; vertical variable pointer
 178+ 57F1 18 06        	JR .MOVE_L2
 179+ 57F3              .MOVE_L1:
 180+ 57F3              	; horizontal
 181+ 57F3 DD 6E 00     	LD L,(IX+0)
 182+ 57F6 DD 66 01     	LD H,(IX+1) ; horizontal variable pointer
 183+ 57F9              .MOVE_L2:
 184+ 57F9 E5           	PUSH HL
 185+ 57FA FD E1        	POP IY
 186+ 57FC FD 6E 00     	LD L,(IY+0)
 187+ 57FF FD 66 01     	LD H,(IY+1)
 188+ 5802 DD 5E 08     	LD E,(IX+8)
 189+ 5805 DD 56 09     	LD D,(IX+9) ; delta value
 190+ 5808 19           	ADD HL,DE
 191+ 5809 E5           	PUSH HL
 192+ 580A DD 5E 04     	LD E,(IX+4)
 193+ 580D DD 56 05     	LD D,(IX+5) ; minimum value
 194+ 5810 A7           	AND A
 195+ 5811 ED 52        	SBC HL,DE
 196+ 5813 FA 2D 58     	JP M,.MOVE_L3 ; below minimum
 197+ 5816 E1           	POP HL
 198+ 5817 E5           	PUSH HL
 199+ 5818 DD 5E 06     	LD E,(IX+6)
 200+ 581B DD 56 07     	LD D,(IX+7) ; maximum value
 201+ 581E EB           	EX DE,HL
 202+ 581F A7           	AND A
 203+ 5820 ED 52        	SBC HL,DE
 204+ 5822 FA 35 58     	JP M,.MOVE_L4 ; above maximum
 205+ 5825 E1           	POP HL
 206+ 5826              	; within bounds
 207+ 5826              .MOVE_L5:
 208+ 5826 FD 75 00     	LD (IY+0),L
 209+ 5829 FD 74 01     	LD (IY+1),H
 210+ 582C C9           	RET
 211+ 582D              .MOVE_L3:
 212+ 582D E1           	POP HL
 213+ 582E CD 41 58     	CALL .INVERSE_DELTA
 214+ 5831 6B           	LD L,E
 215+ 5832 62           	LD H,D
 216+ 5833 18 F1        	JR .MOVE_L5
 217+ 5835              .MOVE_L4:
 218+ 5835 E1           	POP HL
 219+ 5836 CD 41 58     	CALL .INVERSE_DELTA
 220+ 5839 DD 6E 06     	LD L,(IX+6)
 221+ 583C DD 66 07     	LD H,(IX+7) ; maximum
 222+ 583F 18 E5        	JR .MOVE_L5
 223+ 5841              .INVERSE_DELTA:
 224+ 5841 AF           	XOR A
 225+ 5842 DD 96 08     	SUB (IX+8)
 226+ 5845 DD 77 08     	LD (IX+8),A
 227+ 5848 9F           	SBC A,A
 228+ 5849 DD 96 09     	SUB (IX+9)
 229+ 584C DD 77 09     	LD (IX+9),A
 230+ 584F C9           	RET
 231+ 5850
 232+ 5850              .UPDATELOC:
 233+ 5850 DD E5        	PUSH IX
 234+ 5852 D9           	EXX
 235+ 5853 DD 6E 00     	LD L,(IX+0)
 236+ 5856 DD 66 01     	LD H,(IX+1)
 237+ 5859 5E           	LD E,(HL)
 238+ 585A 23           	INC HL
 239+ 585B 56           	LD D,(HL)
 240+ 585C DD 6E 02     	LD L,(IX+2)
 241+ 585F DD 66 03     	LD H,(IX+3)
 242+ 5862 4E           	LD C,(HL)
 243+ 5863 23           	INC HL
 244+ 5864 46           	LD B,(HL)
 245+ 5865 D9           	EXX
 246+ 5866 DD 6E 0C     	LD L,(IX+12)
 247+ 5869 DD 66 0D     	LD H,(IX+13) ; pointer to sprite group data
 248+ 586C DD 46 0B     	LD B,(IX+11) ; sprite group size
 249+ 586F CD C2 4F     	CALL SPRGRPMOV.UPDATE_LOC
 250+ 5872 DD E1        	POP IX
 251+ 5874 C9           	RET
 252+ 5875
 253+ 5875              .PROCESS_ANIM_LIST:
 254+ 5875 DD E5        	PUSH IX
 255+ 5877 DD 46 0E         LD B,(IX+14) ; anim list size
 256+ 587A DD CB 09 7E  	BIT 7,(IX+9)
 257+ 587E 28 08        	JR Z,.PROCESS_ANIM_LIST_L1
 258+ 5880              	; negative direction
 259+ 5880 DD 5E 0F     	LD E,(IX+15)
 260+ 5883 DD 56 10     	LD D,(IX+16)
 261+ 5886 18 06        	JR .PROCESS_ANIM_LIST_L2
 262+ 5888              .PROCESS_ANIM_LIST_L1:
 263+ 5888              	; positive direction
 264+ 5888 DD 5E 11     	LD E,(IX+17)
 265+ 588B DD 56 12     	LD D,(IX+18)
 266+ 588E              .PROCESS_ANIM_LIST_L2:
 267+ 588E CD E7 56     	CALL SGAM_PROCESS_ANIM_LIST
 268+ 5891 DD E1        	POP IX
 269+ 5893 C9           	RET
 270+ 5894              ; *******************************************************************************************************
 271+ 5894
# file closed: asm\SGAM.asm
 124  5894               ENDIF
 125  5894
 126  5894               IF (RAM_CMDS == 1)
 127  5894               INCLUDE "MEMORY.asm"
# file opened: asm\MEMORY.asm
   1+ 5894              ; *******************************************************************************************************
   2+ 5894              ; function to handle CALL MEMCPY basic extension
   3+ 5894              ; _MEMCPY ( INT source,
   4+ 5894              ;			INT destination,
   5+ 5894              ;			INT count,
   6+ 5894              ; will put ram in page 0 also, page 1 is already there
   7+ 5894              MEMCPY:
   8+ 5894              	; opening (
   9+ 5894 CD C1 65     	CALL CHKCHAR
  10+ 5897 28           	DB '('
  11+ 5898              	; get source address
  12+ 5898 DD 21 2F 54  	LD IX, FRMQNT
  13+ 589C CD 59 01     	CALL CALBAS
  14+ 589F D5           	PUSH DE
  15+ 58A0              	; comma
  16+ 58A0 CD C1 65     	CALL CHKCHAR
  17+ 58A3 2C           	DB ','
  18+ 58A4              	; get destination address
  19+ 58A4 DD 21 2F 54  	LD IX, FRMQNT
  20+ 58A8 CD 59 01     	CALL CALBAS
  21+ 58AB D5           	PUSH DE
  22+ 58AC              	; comma
  23+ 58AC CD C1 65     	CALL CHKCHAR
  24+ 58AF 2C           	DB ','
  25+ 58B0              	; get length
  26+ 58B0 DD 21 2F 54  	LD IX, FRMQNT
  27+ 58B4 CD 59 01     	CALL CALBAS
  28+ 58B7 D5           	PUSH DE
  29+ 58B8              	; ending )
  30+ 58B8 CD C1 65     	CALL CHKCHAR
  31+ 58BB 29           	DB ')'
  32+ 58BC
  33+ 58BC              	; save position
  34+ 58BC E5           	PUSH HL
  35+ 58BD DD E1        	POP IX
  36+ 58BF
  37+ 58BF C1           	POP BC ; count
  38+ 58C0 D1           	POP DE ; destination
  39+ 58C1 E1           	POP HL ; source
  40+ 58C2 D9           	EXX
  41+ 58C3              	; enable page 0
  42+ 58C3 F3           	DI
  43+ 58C4 FD 21 CB 58  	LD IY, .RET
  44+ 58C8 C3 73 65     	JP ENABLE_PAGE0
  45+ 58CB              .RET:
  46+ 58CB FB           	EI
  47+ 58CC D9           	EXX
  48+ 58CD ED B0        	LDIR
  49+ 58CF D1               POP DE
  50+ 58D0 C1               POP BC
  51+ 58D1 CD EA 64         CALL RESTORE_PAGE_INFO
  52+ 58D4 DD E5        	PUSH IX
  53+ 58D6 E1           	POP HL
  54+ 58D7 C9           	RET
  55+ 58D8              ; *******************************************************************************************************
  56+ 58D8
  57+ 58D8              ; *******************************************************************************************************
  58+ 58D8              ; function to handle CALL FILRAM basic extension
  59+ 58D8              ; FILRAM ( INT start address,
  60+ 58D8              ;		   INT count,
  61+ 58D8              ;		   BYTE value )
  62+ 58D8              ; will put ram in page 0 also, page 1 is already there
  63+ 58D8              FILRAM:
  64+ 58D8              	; opening (
  65+ 58D8 CD C1 65     	CALL CHKCHAR
  66+ 58DB 28           	DB '('
  67+ 58DC              	; get start address
  68+ 58DC DD 21 2F 54  	LD IX, FRMQNT
  69+ 58E0 CD 59 01     	CALL CALBAS
  70+ 58E3 D5           	PUSH DE
  71+ 58E4              	; comma
  72+ 58E4 CD C1 65     	CALL CHKCHAR
  73+ 58E7 2C           	DB ','
  74+ 58E8              	; get count
  75+ 58E8 DD 21 2F 54  	LD IX, FRMQNT
  76+ 58EC CD 59 01     	CALL CALBAS
  77+ 58EF D5           	PUSH DE
  78+ 58F0              	; comma
  79+ 58F0 CD C1 65     	CALL CHKCHAR
  80+ 58F3 2C           	DB ','
  81+ 58F4              	; get value
  82+ 58F4 DD 21 1C 52  	LD IX, GETBYT
  83+ 58F8 CD 59 01     	CALL CALBAS
  84+ 58FB F5           	PUSH AF
  85+ 58FC              	; ending )
  86+ 58FC CD C1 65     	CALL CHKCHAR
  87+ 58FF 29           	DB ')'
  88+ 5900
  89+ 5900              	; save position
  90+ 5900 E5           	PUSH HL
  91+ 5901 DD E1        	POP IX
  92+ 5903
  93+ 5903 D1           	POP DE ; actually AF
  94+ 5904 C1           	POP BC ; count
  95+ 5905 E1           	POP HL ; start address
  96+ 5906 78           	LD A, B
  97+ 5907 B7           	OR A
  98+ 5908 20 0A        	JR NZ, .L1 ; >=256 bytes to fill
  99+ 590A B1           	OR C
 100+ 590B 28 1A        	JR Z, .EXIT ; 0 bytes to fill, skip
 101+ 590D 79           	LD A, C
 102+ 590E 3D           	DEC A
 103+ 590F 20 03        	JR NZ, .L1 ; ; >1 byte to fill
 104+ 5911              	; one byte to fill
 105+ 5911 72           	LD (HL), D
 106+ 5912 18 13        	JR .EXIT
 107+ 5914              .L1:
 108+ 5914 D9           	EXX
 109+ 5915              	; enable page 0
 110+ 5915 F3           	DI
 111+ 5916 FD 21 1D 59  	LD IY, .RET
 112+ 591A C3 73 65     	JP ENABLE_PAGE0
 113+ 591D              .RET:
 114+ 591D FB           	EI
 115+ 591E D9           	EXX
 116+ 591F CD 2B 59     	CALL .FILLVALUE
 117+ 5922 D1               POP DE
 118+ 5923 C1               POP BC
 119+ 5924 CD EA 64         CALL RESTORE_PAGE_INFO
 120+ 5927              .EXIT:
 121+ 5927 DD E5        	PUSH IX
 122+ 5929 E1           	POP HL
 123+ 592A C9           	RET
 124+ 592B
 125+ 592B              .FILLVALUE:
 126+ 592B 72               LD (HL), D
 127+ 592C 54               LD D, H
 128+ 592D 5D               LD E, L
 129+ 592E 13               INC DE
 130+ 592F 0B               DEC BC
 131+ 5930 ED B0            LDIR
 132+ 5932 C9               RET
 133+ 5933              ; *******************************************************************************************************
 134+ 5933
# file closed: asm\MEMORY.asm
 128  5933               ENDIF
 129  5933
 130  5933               IF (SOUND_CMDS == 1)
 131  5933               INCLUDE "SOUND.asm"
# file opened: asm\SOUND.asm
   1+ 5933              MUSIC_INIT_STATUS:
   2+ 5933 00            DB 0
   3+ 5934              SFX_INIT_STATUS:
   4+ 5934 00            DB 0
   5+ 5935              SOUND_ENABLED:
   6+ 5935 00            DB 0
   7+ 5936
   8+ 5936              ; *******************************************************************************************************
   9+ 5936              ; function to handle CALL SNDPLYINIT basic extension
  10+ 5936              ; initializes sound player
  11+ 5936              ; _SNDPLYINIT ( INT music_offset,
  12+ 5936              ;				INT sfx_offset, can be -1 if no SFX
  13+ 5936              ; will put ram in page 0 also, page 1 is already there
  14+ 5936              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
  15+ 5936              SNDPLYINIT:
  16+ 5936              	; opening (
  17+ 5936 CD C1 65     	CALL CHKCHAR
  18+ 5939 28           	DB '('
  19+ 593A              	; get music address
  20+ 593A DD 21 2F 54  	LD IX, FRMQNT
  21+ 593E CD 59 01     	CALL CALBAS
  22+ 5941 D5           	PUSH DE
  23+ 5942              	; comma
  24+ 5942 CD C1 65     	CALL CHKCHAR
  25+ 5945 2C           	DB ','
  26+ 5946              	; get sfx address
  27+ 5946 DD 21 2F 54  	LD IX, FRMQNT
  28+ 594A CD 59 01     	CALL CALBAS
  29+ 594D D5           	PUSH DE
  30+ 594E              	; ending )
  31+ 594E CD C1 65     	CALL CHKCHAR
  32+ 5951 29           	DB ')'
  33+ 5952
  34+ 5952                  ; save position in BASIC text
  35+ 5952 44           	LD B, H
  36+ 5953 4D           	LD C, L
  37+ 5954
  38+ 5954              	; pop LDIR parameters and store away for later
  39+ 5954 D1           	POP DE ; sfx address
  40+ 5955 E1           	POP HL ; music address
  41+ 5956 C5           	PUSH BC ; basic text location
  42+ 5957 D9           	EXX
  43+ 5958 FD 21 5F 59  	LD IY, .RET
  44+ 595C C3 73 65     	JP ENABLE_PAGE0
  45+ 595F              .RET:
  46+ 595F D9           	EXX
  47+ 5960
  48+ 5960 D5           	PUSH DE
  49+ 5961 AF           	XOR A
  50+ 5962              	; HL = music location
  51+ 5962 CD 62 41     	CALL PLY_AKG_INIT
  52+ 5965 3E 01        	LD A, 1
  53+ 5967 32 33 59     	LD (MUSIC_INIT_STATUS), A
  54+ 596A
  55+ 596A E1           	POP HL ; SFX
  56+ 596B              	; check if SFX address -1
  57+ 596B 23           	INC HL
  58+ 596C 7D           	LD A, L
  59+ 596D B4           	OR H
  60+ 596E 28 09        	JR Z,.L1
  61+ 5970 2B           	DEC HL
  62+ 5971 CD 1D 40     	CALL PLY_AKG_INITSOUNDEFFECTS
  63+ 5974 3E 01        	LD A, 1
  64+ 5976 32 34 59     	LD (SFX_INIT_STATUS), A
  65+ 5979              .L1:
  66+ 5979 D1               POP DE
  67+ 597A C1               POP BC
  68+ 597B CD EA 64         CALL RESTORE_PAGE_INFO
  69+ 597E
  70+ 597E E1           	POP HL
  71+ 597F C9           	RET
  72+ 5980              ; *******************************************************************************************************
  73+ 5980
  74+ 5980              ; *******************************************************************************************************
  75+ 5980              ; function to handle CALL SNDPLYON basic extension
  76+ 5980              ; enables sound player
  77+ 5980              ; _SNDPLYON
  78+ 5980              ; sets SOUND_ENABLED variable to 1 if init call was done
  79+ 5980              ; if not throws out of data error
  80+ 5980              SNDPLYON:
  81+ 5980 3A 33 59     	LD A, (MUSIC_INIT_STATUS)
  82+ 5983 B7           	OR A
  83+ 5984 20 05        	JR NZ, .L1
  84+ 5986              	; player not initialized, throw error
  85+ 5986 1E 04        	LD E, 04 ; Out of DATA
  86+ 5988 C3 E7 65     	JP THROW_ERROR
  87+ 598B              .L1:
  88+ 598B 32 35 59     	LD (SOUND_ENABLED), A
  89+ 598E              	; disable key click
  90+ 598E AF           	XOR A
  91+ 598F 32 DB F3     	LD (CLIKSW), A
  92+ 5992 C9           	RET
  93+ 5993              ; *******************************************************************************************************
  94+ 5993
  95+ 5993              ; *******************************************************************************************************
  96+ 5993              ; function to handle CALL SNDPLYOFF basic extension
  97+ 5993              ; disables sound player
  98+ 5993              ; _SNDPLYOFF
  99+ 5993              ; sets SOUND_ENABLED variable to 0
 100+ 5993              ; calls AKG to stop music and SFX on all channels if initialized
 101+ 5993              SNDPLYOFF:
 102+ 5993 3A 35 59     	LD A, (SOUND_ENABLED)
 103+ 5996 B7           	OR A
 104+ 5997 C8           	RET Z ; already stopped
 105+ 5998 AF           	XOR A
 106+ 5999 32 35 59     	LD (SOUND_ENABLED), A
 107+ 599C E5           	PUSH HL
 108+ 599D CD 21 42     	CALL PLY_AKG_STOP
 109+ 59A0 3A 34 59     	LD A, (SFX_INIT_STATUS)
 110+ 59A3 B7           	OR A
 111+ 59A4 28 0E        	JR Z, .EXIT ; SFX not in use
 112+ 59A6 AF           	XOR A
 113+ 59A7 CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
 114+ 59AA 3E 01        	LD A, 1
 115+ 59AC CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
 116+ 59AF 3E 02        	LD A, 2
 117+ 59B1 CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
 118+ 59B4              .EXIT:
 119+ 59B4 E1           	POP HL
 120+ 59B5 C9           	RET
 121+ 59B6              ; *******************************************************************************************************
 122+ 59B6
 123+ 59B6              ; *******************************************************************************************************
 124+ 59B6              ; function to handle CALL SNDSFX basic extension
 125+ 59B6              ; plays a sound effect
 126+ 59B6              ; _SNDSFX ( BYTE sfx_number, >0
 127+ 59B6              ;			BYTE channel, = 0,1 or 2
 128+ 59B6              ;			BYTE inverted_volume = 0-16, 0 being full volume
 129+ 59B6              ; will put ram in page 0 also, page 1 is already there
 130+ 59B6              ; if sound off throws illegal function call
 131+ 59B6              ; if sfx not initialized, throws out of data
 132+ 59B6              SNDSFX:
 133+ 59B6              	; opening (
 134+ 59B6 CD C1 65     	CALL CHKCHAR
 135+ 59B9 28           	DB '('
 136+ 59BA              	; get sfx_number
 137+ 59BA DD 21 1C 52  	LD IX, GETBYT
 138+ 59BE CD 59 01     	CALL CALBAS
 139+ 59C1 D5           	PUSH DE
 140+ 59C2              	; comma
 141+ 59C2 CD C1 65     	CALL CHKCHAR
 142+ 59C5 2C           	DB ','
 143+ 59C6              	; get sfx address
 144+ 59C6 DD 21 1C 52  	LD IX, GETBYT
 145+ 59CA CD 59 01     	CALL CALBAS
 146+ 59CD D5           	PUSH DE
 147+ 59CE              	; comma
 148+ 59CE CD C1 65     	CALL CHKCHAR
 149+ 59D1 2C           	DB ','
 150+ 59D2              	; get inverted volume
 151+ 59D2 DD 21 1C 52  	LD IX, GETBYT
 152+ 59D6 CD 59 01     	CALL CALBAS
 153+ 59D9 D5           	PUSH DE
 154+ 59DA              	; ending )
 155+ 59DA CD C1 65     	CALL CHKCHAR
 156+ 59DD 29           	DB ')'
 157+ 59DE
 158+ 59DE 3A 35 59     	LD A, (SOUND_ENABLED)
 159+ 59E1 B7           	OR A
 160+ 59E2 20 05        	JR NZ, .L1
 161+ 59E4              	; sound disabled, throw illegal function call
 162+ 59E4 1E 05        	LD E, 5
 163+ 59E6 C3 E7 65     	JP THROW_ERROR
 164+ 59E9              .L1:
 165+ 59E9 3A 34 59     	LD A, (SFX_INIT_STATUS)
 166+ 59EC B7           	OR A
 167+ 59ED 20 05        	JR NZ, .L2
 168+ 59EF              	; sfx data not initialized, throw out of data
 169+ 59EF 1E 04        	LD E, 4
 170+ 59F1 C3 E7 65     	JP THROW_ERROR
 171+ 59F4              .L2:
 172+ 59F4              	; pop  parameters and store away for later
 173+ 59F4 D1           	POP DE ; inverted volume
 174+ 59F5 43           	LD B, E
 175+ 59F6 D1           	POP DE ; channel
 176+ 59F7 4B           	LD C, E
 177+ 59F8 D1           	POP DE
 178+ 59F9 7B           	LD A, E
 179+ 59FA 08           	EX AF, AF'
 180+ 59FB E5           	PUSH HL ; basic text location
 181+ 59FC D9           	EXX
 182+ 59FD FD 21 04 5A  	LD IY, .RET
 183+ 5A01 C3 73 65     	JP ENABLE_PAGE0
 184+ 5A04              .RET:
 185+ 5A04 D9           	EXX
 186+ 5A05 08           	EX AF, AF'
 187+ 5A06 CD 21 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
 188+ 5A09
 189+ 5A09 D1               POP DE
 190+ 5A0A C1               POP BC
 191+ 5A0B CD EA 64         CALL RESTORE_PAGE_INFO
 192+ 5A0E
 193+ 5A0E E1           	POP HL
 194+ 5A0F C9           	RET
 195+ 5A10              ; *******************************************************************************************************
# file closed: asm\SOUND.asm
 132  5A10               ENDIF
 133  5A10
 134  5A10               IF (VRAM_CMDS == 1)
 135  5A10               INCLUDE "VRAM.asm"
# file opened: asm\VRAM.asm
   1+ 5A10              ; *******************************************************************************************************
   2+ 5A10              ; function to handle CALL FILVRM basic extension
   3+ 5A10              ; FILVRM ( INT offset,
   4+ 5A10              ;		   INT count,
   5+ 5A10              ;		   BYTE value,
   6+ 5A10              ;		   BYTE wait_vsync) >0 = true
   7+ 5A10              ; wait_vsync will issue HALT before copying
   8+ 5A10              FILVRM:
   9+ 5A10              	; opening (
  10+ 5A10 CD C1 65     	CALL CHKCHAR
  11+ 5A13 28           	DB '('
  12+ 5A14              	; get offset address
  13+ 5A14 DD 21 2F 54  	LD IX, FRMQNT
  14+ 5A18 CD 59 01     	CALL CALBAS
  15+ 5A1B D5           	PUSH DE
  16+ 5A1C              	; comma
  17+ 5A1C CD C1 65     	CALL CHKCHAR
  18+ 5A1F 2C           	DB ','
  19+ 5A20              	; get count
  20+ 5A20 DD 21 2F 54  	LD IX, FRMQNT
  21+ 5A24 CD 59 01     	CALL CALBAS
  22+ 5A27 D5           	PUSH DE
  23+ 5A28              	; comma
  24+ 5A28 CD C1 65     	CALL CHKCHAR
  25+ 5A2B 2C           	DB ','
  26+ 5A2C              	; get value
  27+ 5A2C DD 21 1C 52  	LD IX, GETBYT
  28+ 5A30 CD 59 01     	CALL CALBAS
  29+ 5A33 F5           	PUSH AF
  30+ 5A34              	; comma
  31+ 5A34 CD C1 65     	CALL CHKCHAR
  32+ 5A37 2C           	DB ','
  33+ 5A38              	; get vsync wait
  34+ 5A38 DD 21 1C 52  	LD IX, GETBYT
  35+ 5A3C CD 59 01     	CALL CALBAS
  36+ 5A3F F5           	PUSH AF
  37+ 5A40              	; ending )
  38+ 5A40 CD C1 65     	CALL CHKCHAR
  39+ 5A43 29           	DB ')'
  40+ 5A44
  41+ 5A44              	; save position
  42+ 5A44 E5           	PUSH HL
  43+ 5A45 DD E1        	POP IX
  44+ 5A47
  45+ 5A47              	; syntax ok
  46+ 5A47              	; wait for vsync if needed
  47+ 5A47 F1           	POP AF
  48+ 5A48 B7           	OR A
  49+ 5A49 28 01        	JR Z, .L1
  50+ 5A4B 76           	HALT
  51+ 5A4C
  52+ 5A4C              .L1:
  53+ 5A4C 3E 01        	LD A,1
  54+ 5A4E 32 C4 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
  55+ 5A51 F1               POP AF ; value
  56+ 5A52 C1               POP BC ; count
  57+ 5A53 E1               POP HL ; offset
  58+ 5A54 CD 56 00         CALL BIOS_FILVRM
  59+ 5A57 AF           	XOR A
  60+ 5A58 32 C4 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
  61+ 5A5B
  62+ 5A5B              .L3:
  63+ 5A5B DD E5        	PUSH IX
  64+ 5A5D E1           	POP HL
  65+ 5A5E C9           	RET
  66+ 5A5F              ; *******************************************************************************************************
  67+ 5A5F
  68+ 5A5F              ; *******************************************************************************************************
  69+ 5A5F              ; function to handle CALL MEMVRM basic extension
  70+ 5A5F              ; copies from RAM to VRAM
  71+ 5A5F              ; _MEMVRM ( INT source,
  72+ 5A5F              ;			INT destination,
  73+ 5A5F              ;			INT count,
  74+ 5A5F              ;			BYTE wait_vsync) >0 = true
  75+ 5A5F              ; will put ram in page 0 also, page 1 is already there
  76+ 5A5F              ; wait_vsync will issue HALT before copying
  77+ 5A5F              MEMVRM:
  78+ 5A5F              	; opening (
  79+ 5A5F CD C1 65     	CALL CHKCHAR
  80+ 5A62 28           	DB '('
  81+ 5A63              	; get source address
  82+ 5A63 DD 21 2F 54  	LD IX, FRMQNT
  83+ 5A67 CD 59 01     	CALL CALBAS
  84+ 5A6A D5           	PUSH DE
  85+ 5A6B              	; comma
  86+ 5A6B CD C1 65     	CALL CHKCHAR
  87+ 5A6E 2C           	DB ','
  88+ 5A6F              	; get destination address
  89+ 5A6F DD 21 2F 54  	LD IX, FRMQNT
  90+ 5A73 CD 59 01     	CALL CALBAS
  91+ 5A76 D5           	PUSH DE
  92+ 5A77              	; comma
  93+ 5A77 CD C1 65     	CALL CHKCHAR
  94+ 5A7A 2C           	DB ','
  95+ 5A7B              	; get length
  96+ 5A7B DD 21 2F 54  	LD IX, FRMQNT
  97+ 5A7F CD 59 01     	CALL CALBAS
  98+ 5A82 D5           	PUSH DE
  99+ 5A83              	; comma
 100+ 5A83 CD C1 65     	CALL CHKCHAR
 101+ 5A86 2C           	DB ','
 102+ 5A87              	; get vsync wait
 103+ 5A87 DD 21 1C 52  	LD IX, GETBYT
 104+ 5A8B CD 59 01     	CALL CALBAS
 105+ 5A8E F5           	PUSH AF
 106+ 5A8F              	; ending )
 107+ 5A8F CD C1 65     	CALL CHKCHAR
 108+ 5A92 29           	DB ')'
 109+ 5A93
 110+ 5A93                  ; save position in BASIC text
 111+ 5A93 E5           	PUSH HL
 112+ 5A94 DD E1        	POP IX
 113+ 5A96
 114+ 5A96 F1           	POP AF ; wait vsync
 115+ 5A97 B7           	OR A
 116+ 5A98 28 02        	JR Z, .L1
 117+ 5A9A 76           	HALT
 118+ 5A9B F3           	DI
 119+ 5A9C              .L1:
 120+ 5A9C              	; pop LDIR parameters and store away for later
 121+ 5A9C C1           	POP BC ; count
 122+ 5A9D D1           	POP DE ; vram destination
 123+ 5A9E E1           	POP HL ; ram source
 124+ 5A9F D9           	EXX
 125+ 5AA0 FD 21 A7 5A   	LD IY, .RET
 126+ 5AA4 C3 73 65     	JP ENABLE_PAGE0
 127+ 5AA7              .RET:
 128+ 5AA7 FB           	EI
 129+ 5AA8 D9           	EXX
 130+ 5AA9 3E 01        	LD A,1
 131+ 5AAB 32 C4 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 132+ 5AAE CD BE 5A     	CALL .LDIRVM
 133+ 5AB1 AF           	XOR A
 134+ 5AB2 32 C4 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 135+ 5AB5 D1               POP DE
 136+ 5AB6 C1               POP BC
 137+ 5AB7 CD EA 64         CALL RESTORE_PAGE_INFO
 138+ 5ABA DD E5        	PUSH IX
 139+ 5ABC E1           	POP HL
 140+ 5ABD C9           	RET
 141+ 5ABE
 142+ 5ABE              .LDIRVM:
 143+ 5ABE EB           	EX DE, HL
 144+ 5ABF F3           	DI
 145+ 5AC0 CD 9A 64     	CALL SETWRT_LOCAL
 146+ 5AC3 FB           	EI
 147+ 5AC4 EB           	EX DE, HL
 148+ 5AC5 78           	LD A, B
 149+ 5AC6 B7           	OR A
 150+ 5AC7 28 0D        	JR Z, .L3
 151+ 5AC9 C5           	PUSH BC
 152+ 5ACA 0E 98        	LD C, #98
 153+ 5ACC              .L2:
 154+ 5ACC 50           	LD D, B
 155+ 5ACD 06 00        	LD B, 0
 156+ 5ACF CD A7 64     	CALL BBYTECOPY_NO_C
 157+ 5AD2 42           	LD B, D
 158+ 5AD3 10 F7        	DJNZ .L2
 159+ 5AD5 C1           	POP BC
 160+ 5AD6              .L3:
 161+ 5AD6 79           	LD A, C
 162+ 5AD7 B7           	OR A
 163+ 5AD8 C8           	RET Z
 164+ 5AD9 41           	LD B, C
 165+ 5ADA C3 A5 64     	JP BBYTECOPY
 166+ 5ADD              ; *******************************************************************************************************
 167+ 5ADD
 168+ 5ADD              ; *******************************************************************************************************
 169+ 5ADD              ; function to handle CALL VRMMEM basic extension
 170+ 5ADD              ; copies from RAM to VRAM
 171+ 5ADD              ; _VRMMEM ( INT source,
 172+ 5ADD              ;			INT destination,
 173+ 5ADD              ;			INT count
 174+ 5ADD              ; will put ram in page 0 also, page 1 is already there
 175+ 5ADD              VRMMEM:
 176+ 5ADD              	; opening (
 177+ 5ADD CD C1 65     	CALL CHKCHAR
 178+ 5AE0 28           	DB '('
 179+ 5AE1              	; get source address
 180+ 5AE1 DD 21 2F 54  	LD IX, FRMQNT
 181+ 5AE5 CD 59 01     	CALL CALBAS
 182+ 5AE8 D5           	PUSH DE
 183+ 5AE9              	; comma
 184+ 5AE9 CD C1 65     	CALL CHKCHAR
 185+ 5AEC 2C           	DB ','
 186+ 5AED              	; get destination address
 187+ 5AED DD 21 2F 54  	LD IX, FRMQNT
 188+ 5AF1 CD 59 01     	CALL CALBAS
 189+ 5AF4 D5           	PUSH DE
 190+ 5AF5              	; comma
 191+ 5AF5 CD C1 65     	CALL CHKCHAR
 192+ 5AF8 2C           	DB ','
 193+ 5AF9              	; get length
 194+ 5AF9 DD 21 2F 54  	LD IX, FRMQNT
 195+ 5AFD CD 59 01     	CALL CALBAS
 196+ 5B00 D5           	PUSH DE
 197+ 5B01              	; ending )
 198+ 5B01 CD C1 65     	CALL CHKCHAR
 199+ 5B04 29           	DB ')'
 200+ 5B05
 201+ 5B05                  ; save position in BASIC text
 202+ 5B05 E5           	PUSH HL
 203+ 5B06 DD E1        	POP IX
 204+ 5B08
 205+ 5B08 C1           	POP BC ; count
 206+ 5B09 D1           	POP DE ; destination
 207+ 5B0A E1           	POP HL ; source
 208+ 5B0B D9           	EXX
 209+ 5B0C FD 21 14 5B  	LD IY, .RET
 210+ 5B10 F3           	DI
 211+ 5B11 C3 73 65     	JP ENABLE_PAGE0
 212+ 5B14              .RET:
 213+ 5B14 FB           	EI
 214+ 5B15 D9           	EXX
 215+ 5B16 3E 01        	LD A,1
 216+ 5B18 32 C4 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 217+ 5B1B CD 2B 5B     	CALL .LDIRMV
 218+ 5B1E AF           	XOR A
 219+ 5B1F 32 C4 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 220+ 5B22 D1               POP DE
 221+ 5B23 C1               POP BC
 222+ 5B24 CD EA 64         CALL RESTORE_PAGE_INFO
 223+ 5B27 DD E5        	PUSH IX
 224+ 5B29 E1           	POP HL
 225+ 5B2A C9           	RET
 226+ 5B2B
 227+ 5B2B              .LDIRMV:
 228+ 5B2B              	; set VRAM address *exactly* as in ROM, otherwise corruption
 229+ 5B2B 7D           	LD	A, L
 230+ 5B2C F3           	DI
 231+ 5B2D D3 99        	OUT	(099H), A
 232+ 5B2F 7C           	LD	A, H
 233+ 5B30 E6 3F        	AND	03FH
 234+ 5B32 D3 99        	OUT	(099H), A
 235+ 5B34 FB           	EI
 236+ 5B35              	;EX (SP), HL
 237+ 5B35              	;EX (SP), HL
 238+ 5B35              	;NOP
 239+ 5B35              	;NOP
 240+ 5B35              .L4:
 241+ 5B35 DB 98            IN A, (#98)
 242+ 5B37 12           	LD (DE), A
 243+ 5B38 13               INC DE
 244+ 5B39 0B               DEC BC
 245+ 5B3A 79               LD A, C
 246+ 5B3B B0               OR B
 247+ 5B3C 20 F7            JR NZ, .L4
 248+ 5B3E C9               RET
 249+ 5B3F              ; *******************************************************************************************************
# file closed: asm\VRAM.asm
 136  5B3F               ENDIF
 137  5B3F
 138  5B3F               IF (GENCAL_CMD == 1)
 139  5B3F               INCLUDE "GENCAL.asm"
# file opened: asm\GENCAL.asm
   1+ 5B3F              ; *******************************************************************************************************
   2+ 5B3F              ; function to handle CALL GENCAL basic extension
   3+ 5B3F              ; GENCAL ( INT fn_addr, = address of the function to call
   4+ 5B3F              ;		   INT[] reg_list_ptr, = array holding register values (AF,BC,DE,HL,IX,IY)
   5+ 5B3F              ; output values of registers will also be stored at reg_list_ptr
   6+ 5B3F              GENCAL:
   7+ 5B3F              	; opening (
   8+ 5B3F CD C1 65     	CALL CHKCHAR
   9+ 5B42 28           	DB '('
  10+ 5B43              	; get function address
  11+ 5B43 DD 21 2F 54  	LD IX, FRMQNT
  12+ 5B47 CD 59 01     	CALL CALBAS
  13+ 5B4A D5           	PUSH DE
  14+ 5B4B              	; comma
  15+ 5B4B CD C1 65     	CALL CHKCHAR
  16+ 5B4E 2C           	DB ','
  17+ 5B4F              	; get pointer to register list
  18+ 5B4F 3E 02            LD A,2
  19+ 5B51 06 01            LD B,1
  20+ 5B53 11 00 05         LD DE,#0500
  21+ 5B56 CD EE 65         CALL GET_BASIC_ARRAY_DATA_POINTER
  22+ 5B59 C5           	PUSH BC
  23+ 5B5A              	; ending )
  24+ 5B5A CD C1 65     	CALL CHKCHAR
  25+ 5B5D 29           	DB ')'
  26+ 5B5E
  27+ 5B5E              	; save BASIC token position
  28+ 5B5E E5           	PUSH HL
  29+ 5B5F D9               EXX
  30+ 5B60 E1           	POP HL ; HL'=next basic token
  31+ 5B61 D9               EXX
  32+ 5B62
  33+ 5B62 E1               POP HL ; get pointer to register values
  34+ 5B63 F3           	DI
  35+ 5B64 ED 73 B3 62      LD (BLIT_STRUCT), SP
  36+ 5B68 F9               LD SP, HL
  37+ 5B69 F1               POP AF
  38+ 5B6A C1               POP BC
  39+ 5B6B D1               POP DE
  40+ 5B6C E1               POP HL
  41+ 5B6D DD E1            POP IX
  42+ 5B6F FD E1            POP IY
  43+ 5B71 D9               EXX
  44+ 5B72 ED 73 B5 62      LD (BLIT_STRUCT+2), SP
  45+ 5B76 ED 7B B3 62      LD SP, (BLIT_STRUCT)
  46+ 5B7A FB               EI
  47+ 5B7B D1               POP DE ; get function to call
  48+ 5B7C E5               PUSH HL
  49+ 5B7D CD 98 5B         CALL .EXXDECALL
  50+ 5B80 F3               DI
  51+ 5B81 ED 73 B3 62      LD (BLIT_STRUCT), SP
  52+ 5B85 ED 7B B5 62      LD SP, (BLIT_STRUCT+2)
  53+ 5B89 FD E5            PUSH IY
  54+ 5B8B DD E5            PUSH IX
  55+ 5B8D E5               PUSH HL
  56+ 5B8E D5               PUSH DE
  57+ 5B8F C5               PUSH BC
  58+ 5B90 F5               PUSH AF
  59+ 5B91 ED 7B B3 62      LD SP, (BLIT_STRUCT)
  60+ 5B95 FB               EI
  61+ 5B96 E1               POP HL
  62+ 5B97 C9           	RET
  63+ 5B98
  64+ 5B98              .EXXDECALL:
  65+ 5B98 D5               PUSH DE
  66+ 5B99 D9               EXX
  67+ 5B9A C9               RET
  68+ 5B9B              ; *******************************************************************************************************
# file closed: asm\GENCAL.asm
 140  5B9B               ENDIF
 141  5B9B
 142  5B9B               IF (BOX_CMDS == 1)
 143  5B9B               INCLUDE "BOX.asm"
# file opened: asm\BOX.asm
   1+ 5B9B              ; *******************************************************************************************************
   2+ 5B9B              ; generic function to implement rectangle data copy
   3+ 5B9B              ; should be modified to call appropriate function for memory or vram
   4+ 5B9B              ; input IX=pointer to following structure
   5+ 5B9B              ; +00 source data pointer
   6+ 5B9B              ; +02 num bytes in a row
   7+ 5B9B              ; +04 number of rows
   8+ 5B9B              ; +06 source add-to value till next row
   9+ 5B9B              ; +08 destination address
  10+ 5B9B              ; +10 destination add-to value till next row
  11+ 5B9B              ; modifies AF, BC, DE, HL
  12+ 5B9B              RECTANGLE_COPY:
  13+ 5B9B DD 6E 00     	LD L, (IX+0)
  14+ 5B9E DD 66 01     	LD H, (IX+1) ; source address
  15+ 5BA1 DD 5E 08     	LD E, (IX+8)
  16+ 5BA4 DD 56 09     	LD D, (IX+9) ; destination
  17+ 5BA7 DD 46 04     	LD B, (IX+4) ; row number
  18+ 5BAA              .L1:
  19+ 5BAA C5           	PUSH BC
  20+ 5BAB E5           		PUSH HL
  21+ 5BAC D5           			PUSH DE
  22+ 5BAD DD 4E 02     				LD C, (IX+2)
  23+ 5BB0 DD 46 03     				LD B, (IX+3) ; num bytes in a row
  24+ 5BB3              .CALL1:
  25+ 5BB3 CD 00 00     				CALL 0 ; set destination address from DE
  26+ 5BB6              .CALL2:
  27+ 5BB6 CD 00 00     				CALL 0 ; copy data fn
  28+ 5BB9 E1           			POP HL
  29+ 5BBA DD 4E 0A     			LD C, (IX+10)
  30+ 5BBD DD 46 0B     			LD B, (IX+11) ; destination add-to
  31+ 5BC0 09           			ADD HL, BC
  32+ 5BC1 EB           			EX DE, HL
  33+ 5BC2 E1           		POP HL
  34+ 5BC3 DD 4E 06     		LD C, (IX+6)
  35+ 5BC6 DD 46 07     		LD B, (IX+7) ; src add-to
  36+ 5BC9 09           		ADD HL, BC
  37+ 5BCA C1           	POP BC
  38+ 5BCB 10 DD        	DJNZ .L1
  39+ 5BCD C9           	RET
  40+ 5BCE              ; *******************************************************************************************************
  41+ 5BCE
  42+ 5BCE              ; *******************************************************************************************************
  43+ 5BCE              ; function to handle CALL BOXMEMCPY basic extension
  44+ 5BCE              ; copies data with window like boundaries within ram
  45+ 5BCE              ; BOXMEMCPY ( INT source data pointer,
  46+ 5BCE              ;			  INT source number of bytes in a row,
  47+ 5BCE              ;			  INT number of rows,
  48+ 5BCE              ;			  INT source add-to value till next row,
  49+ 5BCE              ; 			  INT destination pointer,
  50+ 5BCE              ;			  INT destination add-to value till next row )
  51+ 5BCE              ; request_data_ptr described in RECTANGLE_COPY
  52+ 5BCE              ; will put ram in page 0 also, page 1 is already there
  53+ 5BCE              BOXMEMCPY:
  54+ 5BCE 11 D8 5B     	LD DE,BOXMEMCPY.RET
  55+ 5BD1 ED 53 4D 5C  	LD (BOXCOMMON.ADDR+2), DE
  56+ 5BD5 C3 EB 5B     	JP BOXCOMMON
  57+ 5BD8              .RET:
  58+ 5BD8 FB           	EI
  59+ 5BD9              	; set RAM functions to call
  60+ 5BD9 21 00 00     	LD HL, 0
  61+ 5BDC 22 B3 5B     	LD (RECTANGLE_COPY.CALL1), HL ; NOP NOP
  62+ 5BDF 22 B5 5B     	LD (RECTANGLE_COPY.CALL1+2), HL ; NOP NOP
  63+ 5BE2 21 ED B0     	LD HL, #B0ED ; LDIR
  64+ 5BE5 22 B7 5B     	LD (RECTANGLE_COPY.CALL1+4), HL
  65+ 5BE8 C3 52 5C     	JP BOXCOMMON.CALL
  66+ 5BEB              ; *******************************************************************************************************
  67+ 5BEB
  68+ 5BEB              ; *******************************************************************************************************
  69+ 5BEB              ; common parts of BOX commands
  70+ 5BEB              BOXCOMMON:
  71+ 5BEB              	; opening (
  72+ 5BEB CD C1 65     	CALL CHKCHAR
  73+ 5BEE 28           	DB '('
  74+ 5BEF              	; get source data pointer
  75+ 5BEF DD 21 2F 54  	LD IX, FRMQNT
  76+ 5BF3 CD 59 01     	CALL CALBAS
  77+ 5BF6 ED 53 B3 62  	LD (BLIT_STRUCT+0), DE
  78+ 5BFA              	; comma
  79+ 5BFA CD C1 65     	CALL CHKCHAR
  80+ 5BFD 2C           	DB ','
  81+ 5BFE              	; source number of bytes in a row
  82+ 5BFE DD 21 2F 54  	LD IX, FRMQNT
  83+ 5C02 CD 59 01     	CALL CALBAS
  84+ 5C05 ED 53 B5 62  	LD (BLIT_STRUCT+2), DE
  85+ 5C09              	; comma
  86+ 5C09 CD C1 65     	CALL CHKCHAR
  87+ 5C0C 2C           	DB ','
  88+ 5C0D              	; number of rows
  89+ 5C0D DD 21 2F 54  	LD IX, FRMQNT
  90+ 5C11 CD 59 01     	CALL CALBAS
  91+ 5C14 ED 53 B7 62  	LD (BLIT_STRUCT+4), DE
  92+ 5C18              	; comma
  93+ 5C18 CD C1 65     	CALL CHKCHAR
  94+ 5C1B 2C           	DB ','
  95+ 5C1C              	; source add-to value till next row
  96+ 5C1C DD 21 2F 54  	LD IX, FRMQNT
  97+ 5C20 CD 59 01     	CALL CALBAS
  98+ 5C23 ED 53 B9 62  	LD (BLIT_STRUCT+6), DE
  99+ 5C27              	; comma
 100+ 5C27 CD C1 65     	CALL CHKCHAR
 101+ 5C2A 2C           	DB ','
 102+ 5C2B              	; destination pointer
 103+ 5C2B DD 21 2F 54  	LD IX, FRMQNT
 104+ 5C2F CD 59 01     	CALL CALBAS
 105+ 5C32 ED 53 BB 62  	LD (BLIT_STRUCT+8), DE
 106+ 5C36              	; comma
 107+ 5C36 CD C1 65     	CALL CHKCHAR
 108+ 5C39 2C           	DB ','
 109+ 5C3A              	; destination add-to value till next row
 110+ 5C3A DD 21 2F 54  	LD IX, FRMQNT
 111+ 5C3E CD 59 01     	CALL CALBAS
 112+ 5C41 ED 53 BD 62  	LD (BLIT_STRUCT+10), DE
 113+ 5C45              	; ending )
 114+ 5C45 CD C1 65     	CALL CHKCHAR
 115+ 5C48 29           	DB ')'
 116+ 5C49
 117+ 5C49 E5           	PUSH HL ; save position in BASIC buffer
 118+ 5C4A F3           	DI
 119+ 5C4B              .ADDR:
 120+ 5C4B FD 21 00 00  	LD IY, 0
 121+ 5C4F C3 73 65     	JP ENABLE_PAGE0
 122+ 5C52              .CALL:
 123+ 5C52 DD 21 B3 62  	LD IX,BLIT_STRUCT
 124+ 5C56 CD 9B 5B     	CALL RECTANGLE_COPY
 125+ 5C59 AF           	XOR A
 126+ 5C5A 32 C4 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 127+ 5C5D
 128+ 5C5D D1               POP DE
 129+ 5C5E C1               POP BC
 130+ 5C5F CD EA 64         CALL RESTORE_PAGE_INFO
 131+ 5C62
 132+ 5C62 E1           	POP HL
 133+ 5C63 C9           	RET
 134+ 5C64              ; *******************************************************************************************************
 135+ 5C64
 136+ 5C64              ; *******************************************************************************************************
 137+ 5C64              ; function to handle CALL BOXMEMVRM basic extension
 138+ 5C64              ; copies data with window like boundaries from ram to Vram
 139+ 5C64              ; BOXMEMVRM ( INT source data pointer,
 140+ 5C64              ;			  INT source number of bytes in a row,
 141+ 5C64              ;			  INT number of rows,
 142+ 5C64              ;			  INT source add-to value till next row,
 143+ 5C64              ; 			  INT destination pointer,
 144+ 5C64              ;			  INT destination add-to value till next row )
 145+ 5C64              ; request_data_ptr described in RECTANGLE_COPY
 146+ 5C64              ; will put ram in page 0 also, page 1 is already there
 147+ 5C64              BOXMEMVRM:
 148+ 5C64 11 6E 5C     	LD DE,BOXMEMVRM.RET
 149+ 5C67 ED 53 4D 5C  	LD (BOXCOMMON.ADDR+2), DE
 150+ 5C6B C3 EB 5B     	JP BOXCOMMON
 151+ 5C6E              .RET:
 152+ 5C6E FB           	EI
 153+ 5C6F              	; set RAM functions to call
 154+ 5C6F 21 89 5C     	LD HL, .SETDEST
 155+ 5C72 22 B4 5B     	LD (RECTANGLE_COPY.CALL1+1), HL
 156+ 5C75 21 91 5C     	LD HL, .COPYDATA
 157+ 5C78 22 B7 5B     	LD (RECTANGLE_COPY.CALL2+1), HL
 158+ 5C7B 3E CD        	LD A, #CD ; CALL
 159+ 5C7D 32 B3 5B     	LD (RECTANGLE_COPY.CALL1), A
 160+ 5C80 32 B6 5B     	LD (RECTANGLE_COPY.CALL2), A
 161+ 5C83              	;LD A,1
 162+ 5C83 32 C4 62     	LD (VRAM_UPDATE_IN_PROGRESS),A
 163+ 5C86 C3 52 5C     	JP BOXCOMMON.CALL
 164+ 5C89              .SETDEST:
 165+ 5C89 EB           	EX DE, HL
 166+ 5C8A F3           	DI
 167+ 5C8B CD 9A 64     	CALL SETWRT_LOCAL
 168+ 5C8E FB           	EI
 169+ 5C8F EB           	EX DE, HL
 170+ 5C90 C9           	RET
 171+ 5C91              .COPYDATA:
 172+ 5C91 41           	LD B, C
 173+ 5C92 C3 A5 64     	JP BBYTECOPY
 174+ 5C95              ; *******************************************************************************************************
# file closed: asm\BOX.asm
 144  5C95               ENDIF
 145  5C95
 146  5C95               IF (BLIT_CMDS == 1)
 147  5C95               INCLUDE "BLIT.asm"
# file opened: asm\BLIT.asm
   1+ 5C95              ; *******************************************************************************************************
   2+ 5C95              ; function rotates mask and data of several characters and applies to background data
   3+ 5C95              ; this handles x-shift from 0 to 4
   4+ 5C95              ; contains self-modifying code that is set-up from external function
   5+ 5C95              ; input HL=pointer to mask data
   6+ 5C95              ; input HL'=pointer to character data
   7+ 5C95              ; input DE=output buffer containing background data
   8+ 5C95              ; input BC=DE+8
   9+ 5C95              ; input A=number of characters to process
  10+ 5C95              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
  11+ 5C95              SHIFT04:
  12+ 5C95 08           	EX AF, AF'
  13+ 5C96 7E           	LD A, (HL) ; get mask
  14+ 5C97 D9           	EXX
  15+ 5C98 57           	LD D, A
  16+ 5C99 1E FF        	LD E, #FF
  17+ 5C9B 37           	SCF
  18+ 5C9C              .M1:
  19+ 5C9C 18 FE        	JR .M1 ; this is self-modifying part
  20+ 5C9E CB 1A        	RR D
  21+ 5CA0 CB 1B        	RR E
  22+ 5CA2 CB 1A        	RR D
  23+ 5CA4 CB 1B        	RR E
  24+ 5CA6 CB 1A        	RR D
  25+ 5CA8 CB 1B        	RR E
  26+ 5CAA CB 1A        	RR D
  27+ 5CAC CB 1B        	RR E
  28+ 5CAE
  29+ 5CAE 46           	LD B, (HL) ; get data
  30+ 5CAF 0E 00        	LD C, 0
  31+ 5CB1              .M2:
  32+ 5CB1 18 FE        	JR .M2 ; also self-modifying part
  33+ 5CB3 CB 38        	SRL B
  34+ 5CB5 CB 19        	RR C
  35+ 5CB7 CB 38        	SRL B
  36+ 5CB9 CB 19        	RR C
  37+ 5CBB CB 38        	SRL B
  38+ 5CBD CB 19        	RR C
  39+ 5CBF CB 38        	SRL B
  40+ 5CC1 CB 19        	RR C
  41+ 5CC3
  42+ 5CC3 D9           	EXX
  43+ 5CC4 1A           	LD A, (DE) ; background
  44+ 5CC5 D9           	EXX
  45+ 5CC6 A2           	AND D
  46+ 5CC7 B0           	OR B
  47+ 5CC8 D9           	EXX
  48+ 5CC9 12           	LD (DE), A
  49+ 5CCA
  50+ 5CCA 0A           	LD A, (BC)
  51+ 5CCB D9           	EXX
  52+ 5CCC A3           	AND E
  53+ 5CCD B1           	OR C
  54+ 5CCE 23           	INC HL
  55+ 5CCF D9           	EXX
  56+ 5CD0 02           	LD (BC), A
  57+ 5CD1
  58+ 5CD1 23           	INC HL
  59+ 5CD2 13           	INC DE
  60+ 5CD3 03           	INC BC
  61+ 5CD4
  62+ 5CD4 08           	EX AF, AF'
  63+ 5CD5 3D           	DEC A
  64+ 5CD6 C2 95 5C     	JP NZ, SHIFT04
  65+ 5CD9 C9           	RET
  66+ 5CDA              ; *******************************************************************************************************
  67+ 5CDA
  68+ 5CDA              ; *******************************************************************************************************
  69+ 5CDA              ; function rotates mask and data of several characters and applies to background data
  70+ 5CDA              ; this handles x-shift from 5 to 8
  71+ 5CDA              ; contains self-modifying code that is set-up from external function
  72+ 5CDA              ; input HL=pointer to mask data
  73+ 5CDA              ; input HL'=pointer to character data
  74+ 5CDA              ; input DE=output buffer containing background data
  75+ 5CDA              ; input BC=DE+8
  76+ 5CDA              ; input A=number of characters to process
  77+ 5CDA              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
  78+ 5CDA              SHIFT58:
  79+ 5CDA 08           	EX AF, AF'
  80+ 5CDB 7E           	LD A, (HL) ; get mask
  81+ 5CDC D9           	EXX
  82+ 5CDD 57           	LD D, A
  83+ 5CDE 1E FF        	LD E, #FF
  84+ 5CE0 37           	SCF
  85+ 5CE1              .M1:
  86+ 5CE1 18 FE        	JR .M1 ; this is self-modifying part
  87+ 5CE3 CB 12        	RL D
  88+ 5CE5 CB 13        	RL E
  89+ 5CE7 CB 12        	RL D
  90+ 5CE9 CB 13        	RL E
  91+ 5CEB CB 12        	RL D
  92+ 5CED CB 13        	RL E
  93+ 5CEF
  94+ 5CEF 46           	LD B, (HL)
  95+ 5CF0 0E 00        	LD C, 0
  96+ 5CF2              .M2:
  97+ 5CF2 18 FE        	JR .M2 ; also self-modifying part
  98+ 5CF4 CB 20        	SLA B
  99+ 5CF6 CB 11        	RL C
 100+ 5CF8 CB 20        	SLA B
 101+ 5CFA CB 11        	RL C
 102+ 5CFC CB 20        	SLA B
 103+ 5CFE CB 11        	RL C
 104+ 5D00
 105+ 5D00 D9           	EXX
 106+ 5D01 1A           	LD A, (DE) ; background
 107+ 5D02 D9           	EXX
 108+ 5D03 A3           	AND E
 109+ 5D04 B1           	OR C
 110+ 5D05 D9           	EXX
 111+ 5D06 12           	LD (DE), A
 112+ 5D07
 113+ 5D07 0A           	LD A, (BC)
 114+ 5D08 D9           	EXX
 115+ 5D09 A2           	AND D
 116+ 5D0A B0           	OR B
 117+ 5D0B 23           	INC HL
 118+ 5D0C D9           	EXX
 119+ 5D0D 02           	LD (BC), A
 120+ 5D0E
 121+ 5D0E 23           	INC HL
 122+ 5D0F 13           	INC DE
 123+ 5D10 03           	INC BC
 124+ 5D11
 125+ 5D11 08           	EX AF, AF'
 126+ 5D12 3D           	DEC A
 127+ 5D13 C2 DA 5C     	JP NZ, SHIFT58
 128+ 5D16 C9           	RET
 129+ 5D17              ; *******************************************************************************************************
 130+ 5D17
 131+ 5D17              ; *******************************************************************************************************
 132+ 5D17              ; routine that shifts one row of characters
 133+ 5D17              ; contains self-modifying code that is set-up from external function
 134+ 5D17              ; input HL=pointer to mask data
 135+ 5D17              ; input HL'=pointer to character data
 136+ 5D17              ; input DE=output buffer containing background data
 137+ 5D17              ; input A=number of characters to process
 138+ 5D17              ; input IX=pointer to structure describing input data
 139+ 5D17              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
 140+ 5D17              SHIFT_ROW:
 141+ 5D17 F5           	PUSH AF
 142+ 5D18 ED 53 AF 62  		LD (BLIT_TMP1), DE
 143+ 5D1C E5           		PUSH HL
 144+ 5D1D CD 60 5D     			CALL .ADDYSHIFT
 145+ 5D20 E1           		POP HL
 146+ 5D21 ED 53 B1 62  		LD (BLIT_TMP2), DE ; DE+vertical shift
 147+ 5D25              .L1:
 148+ 5D25 3E 08        		LD A, 8
 149+ 5D27 DD 96 02     		SUB (IX+2) ; y shift
 150+ 5D2A              .CALL1:
 151+ 5D2A CD 00 00     		CALL 0
 152+ 5D2D DD 7E 02     		LD A, (IX+2); y shift
 153+ 5D30 B7           		OR A
 154+ 5D31 28 26        		JR Z, .DONE
 155+ 5D33 ED 5B AF 62  		LD DE, (BLIT_TMP1)
 156+ 5D37 E5           		PUSH HL
 157+ 5D38 CD 6E 5D     			CALL .DETONEXTROW
 158+ 5D3B E1           		POP HL
 159+ 5D3C              .CALL2:
 160+ 5D3C CD 00 00     		CALL 0
 161+ 5D3F ED 5B AF 62  		LD DE, (BLIT_TMP1)
 162+ 5D43 E5           		PUSH HL
 163+ 5D44 CD 68 5D     			CALL .ADD8
 164+ 5D47 E1           		POP HL
 165+ 5D48 ED 53 AF 62  		LD (BLIT_TMP1), DE
 166+ 5D4C ED 5B B1 62  		LD DE, (BLIT_TMP2)
 167+ 5D50 E5           		PUSH HL
 168+ 5D51 CD 68 5D     			CALL .ADD8
 169+ 5D54 E1           		POP HL
 170+ 5D55 ED 53 B1 62  		LD (BLIT_TMP2), DE ; DE+vertical shift
 171+ 5D59              .DONE:
 172+ 5D59 F1           	POP AF
 173+ 5D5A 3D           	DEC A
 174+ 5D5B C8           	RET Z
 175+ 5D5C F5           	PUSH AF
 176+ 5D5D C3 25 5D     	JP .L1
 177+ 5D60              .ADDYSHIFT:
 178+ 5D60 EB           	EX DE, HL
 179+ 5D61 16 00        	LD D, 0
 180+ 5D63 DD 5E 02     	LD E, (IX+2); y shift
 181+ 5D66 18 0C        	JR .MOVDEBC
 182+ 5D68              .ADD8:
 183+ 5D68 21 08 00     	LD HL, 8
 184+ 5D6B C3 74 5D     	JP .MOVDEBC
 185+ 5D6E              .DETONEXTROW:
 186+ 5D6E DD 6E 06     	LD L, (IX+6)
 187+ 5D71 DD 66 07     	LD H, (IX+7) ; bkg add to value
 188+ 5D74              .MOVDEBC:
 189+ 5D74 19           	ADD HL, DE
 190+ 5D75 54           	LD D, H
 191+ 5D76 5D           	LD E, L
 192+ 5D77 01 08 00     	LD BC, 8
 193+ 5D7A 09           	ADD HL, BC
 194+ 5D7B 44           	LD B, H
 195+ 5D7C 4D           	LD C, L
 196+ 5D7D C9           	RET
 197+ 5D7E              ; *******************************************************************************************************
 198+ 5D7E
 199+ 5D7E              ; *******************************************************************************************************
 200+ 5D7E              ; function rotates mask and character data and applies it to background
 201+ 5D7E              ; input IX=pointer to structure describing input data
 202+ 5D7E              ; +0  DW horizontal shift count 0-7 (low byte used)
 203+ 5D7E              ; +2  DW vertical shift count 0-7 (low byte used)
 204+ 5D7E              ; +4  DW background data start;
 205+ 5D7E              ; +6  DW background add to value to next row of background data
 206+ 5D7E              ; +8  DW mask data start;
 207+ 5D7E              ; +10  DW character data start;
 208+ 5D7E              ; +12 DW character&mask add to value to next row of data
 209+ 5D7E              ; +14 DW columns (low byte used)
 210+ 5D7E              ; +16 DW rows (low byte used)
 211+ 5D7E              SHIFT_MERGE_CHARACTER:
 212+ 5D7E DD 7E 00     	LD A, (IX) ; shift
 213+ 5D81 FE 05        	CP 5
 214+ 5D83 38 25        	JR C, .RIGHT
 215+ 5D85              	; shifts 5-7, use rotate towards left 1-3
 216+ 5D85 21 DA 5C     	LD HL, SHIFT58
 217+ 5D88 22 2B 5D     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
 218+ 5D8B 22 3D 5D     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
 219+ 5D8E D6 05        	SUB 5
 220+ 5D90 28 0D        	JR Z, .L1
 221+ 5D92 87           	ADD A, A
 222+ 5D93 87           	ADD A, A
 223+ 5D94 67           	LD H, A
 224+ 5D95 2E 18        	LD L, #18 ; JR opcode
 225+ 5D97 22 E1 5C     	LD (SHIFT58.M1), HL
 226+ 5D9A 22 F2 5C     	LD (SHIFT58.M2), HL
 227+ 5D9D 18 32        	JR .DO
 228+ 5D9F              .L1:
 229+ 5D9F 21 00 00     	LD HL, 0 ; 2xNOP opcode
 230+ 5DA2 22 E1 5C     	LD (SHIFT58.M1), HL
 231+ 5DA5 22 F2 5C     	LD (SHIFT58.M2), HL
 232+ 5DA8 18 27        	JR .DO
 233+ 5DAA              .RIGHT:
 234+ 5DAA              	; shifts 0-4, rotate towards right
 235+ 5DAA 21 95 5C     	LD HL, SHIFT04
 236+ 5DAD 22 2B 5D     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
 237+ 5DB0 22 3D 5D     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
 238+ 5DB3 FE 04        	CP 4
 239+ 5DB5 28 11        	JR Z, .R1
 240+ 5DB7 D6 04        	SUB 4
 241+ 5DB9 ED 44        	NEG
 242+ 5DBB 87           	ADD A, A
 243+ 5DBC 87           	ADD A, A
 244+ 5DBD 67           	LD H, A
 245+ 5DBE 2E 18        	LD L, #18 ; JR opcode
 246+ 5DC0 22 9C 5C     	LD (SHIFT04.M1), HL
 247+ 5DC3 22 B1 5C     	LD (SHIFT04.M2), HL
 248+ 5DC6 18 09        	JR .DO
 249+ 5DC8              .R1:
 250+ 5DC8 21 00 00     	LD HL, 0 ; 2xNOP opcode
 251+ 5DCB 22 9C 5C     	LD (SHIFT04.M1), HL
 252+ 5DCE 22 B1 5C     	LD (SHIFT04.M2), HL
 253+ 5DD1              .DO:
 254+ 5DD1 DD 46 10     	LD B, (IX+16) ; rows
 255+ 5DD4 DD 6E 08     	LD L, (IX+8)
 256+ 5DD7 DD 66 09     	LD H, (IX+9) ; mask data
 257+ 5DDA DD 5E 04     	LD E, (IX+4)
 258+ 5DDD DD 56 05     	LD D, (IX+5) ; background data
 259+ 5DE0 D9           	EXX
 260+ 5DE1 DD 6E 0A     	LD L, (IX+10)
 261+ 5DE4 DD 66 0B     	LD H, (IX+11) ; character data
 262+ 5DE7 D9           	EXX
 263+ 5DE8              .LOOP:
 264+ 5DE8 C5           	PUSH BC
 265+ 5DE9 E5           		PUSH HL
 266+ 5DEA D5           			PUSH DE
 267+ 5DEB D9           				EXX
 268+ 5DEC E5           				PUSH HL
 269+ 5DED D9           					EXX
 270+ 5DEE DD 7E 0E     					LD A, (IX+14) ; columns
 271+ 5DF1              .CALL:
 272+ 5DF1 CD 17 5D     					CALL SHIFT_ROW
 273+ 5DF4 E1           				POP HL
 274+ 5DF5 DD 5E 0C     				LD E, (IX+12)
 275+ 5DF8 DD 56 0D     				LD D, (IX+13) ; char data to next row
 276+ 5DFB 19           				ADD HL, DE
 277+ 5DFC D9           				EXX
 278+ 5DFD E1           			POP HL
 279+ 5DFE DD 5E 06     			LD E, (IX+6)
 280+ 5E01 DD 56 07     			LD D, (IX+7) ; background to next row
 281+ 5E04 19           			ADD HL, DE
 282+ 5E05 EB           			EX DE, HL
 283+ 5E06 E1           		POP HL
 284+ 5E07 DD 4E 0C     		LD C, (IX+12)
 285+ 5E0A DD 46 0D     		LD B, (IX+13) ; char data to next row
 286+ 5E0D 09           		ADD HL, BC
 287+ 5E0E C1           	POP BC
 288+ 5E0F 10 D7        	DJNZ .LOOP
 289+ 5E11 C9           	RET
 290+ 5E12              ; *******************************************************************************************************
 291+ 5E12
 292+ 5E12               IFNDEF CMDS_WITH_PARAMETERS
 293+ 5E12 ~            ; *******************************************************************************************************
 294+ 5E12 ~            ; function to handle CALL BLIT basic extension
 295+ 5E12 ~            ; rotates 1-bit character drawing horizontally with mask and character data and
 296+ 5E12 ~            ; fuses with background data and applies vertical shift too
 297+ 5E12 ~            ; BLIT ( INT request_data_ptr )
 298+ 5E12 ~            ; request_data_ptr described in SHIFT_MERGE_CHARACTER
 299+ 5E12 ~            ; will put ram in page 0 also, page 1 is already there
 300+ 5E12 ~            BLIT:
 301+ 5E12 ~            	; opening (
 302+ 5E12 ~            	CALL CHKCHAR
 303+ 5E12 ~            	DB '('
 304+ 5E12 ~            	; get pointer to request struct
 305+ 5E12 ~            	LD IX, FRMQNT
 306+ 5E12 ~            	CALL CALBAS
 307+ 5E12 ~            	PUSH DE
 308+ 5E12 ~            	; ending )
 309+ 5E12 ~            	CALL CHKCHAR
 310+ 5E12 ~            	DB ')'
 311+ 5E12 ~
 312+ 5E12 ~            	POP IX ; pointer to request struct
 313+ 5E12 ~
 314+ 5E12 ~            	PUSH HL ; save position in BASIC buffer
 315+ 5E12 ~
 316+ 5E12 ~            	LD IY, .RET
 317+ 5E12 ~            	JP ENABLE_PAGE0
 318+ 5E12 ~            .RET:
 319+ 5E12 ~            	EI
 320+ 5E12 ~            	CALL SHIFT_MERGE_CHARACTER
 321+ 5E12 ~
 322+ 5E12 ~                POP DE
 323+ 5E12 ~                POP BC
 324+ 5E12 ~                CALL RESTORE_PAGE_INFO
 325+ 5E12 ~
 326+ 5E12 ~            	POP HL
 327+ 5E12 ~            	RET
 328+ 5E12 ~            ; *******************************************************************************************************
 329+ 5E12               ENDIF
 330+ 5E12
 331+ 5E12               IFDEF CMDS_WITH_PARAMETERS
 332+ 5E12              ; *******************************************************************************************************
 333+ 5E12              ; function to handle CALL BLIT basic extension
 334+ 5E12              ; rotates 1-bit character drawing horizontally with mask and character data and
 335+ 5E12              ; fuses with background data and applies vertical shift too
 336+ 5E12              ; in form without pointers
 337+ 5E12              ; BLIT ( INT x,
 338+ 5E12              ;		 INT y,
 339+ 5E12              ;		 INT char_data_pointer,
 340+ 5E12              ;		 INT mask_data_pointer,
 341+ 5E12              ;		 INT width (in characters),
 342+ 5E12              ;		 INT height (in characters),
 343+ 5E12              ;		 INT background_pointer (top left),
 344+ 5E12              ;		 INT background_width (in characters),
 345+ 5E12              ;		 INT background_height (in characters))
 346+ 5E12              ; will put ram in page 0 also, page 1 is already there
 347+ 5E12              BLIT:
 348+ 5E12              	; opening (
 349+ 5E12 CD C1 65     	CALL CHKCHAR
 350+ 5E15 28           	DB '('
 351+ 5E16              	; get x coordinate
 352+ 5E16 DD 21 2F 54  	LD IX, FRMQNT
 353+ 5E1A CD 59 01     	CALL CALBAS
 354+ 5E1D 7B           	LD A, E
 355+ 5E1E E6 07        	AND 7
 356+ 5E20 32 B3 62     	LD (BLIT_STRUCT+0), A
 357+ 5E23 CD 01 5F     	CALL .DAdiv8
 358+ 5E26 32 AF 62     	LD (BLIT_TMP+0),A
 359+ 5E29              	; comma
 360+ 5E29 CD C1 65     	CALL CHKCHAR
 361+ 5E2C 2C           	DB ','
 362+ 5E2D              	; get y coordinate
 363+ 5E2D DD 21 2F 54  	LD IX, FRMQNT
 364+ 5E31 CD 59 01     	CALL CALBAS
 365+ 5E34 7B           	LD A, E
 366+ 5E35 E6 07        	AND 7
 367+ 5E37 32 B5 62     	LD (BLIT_STRUCT+2), A
 368+ 5E3A CD 01 5F     	CALL .DAdiv8
 369+ 5E3D 32 B0 62     	LD (BLIT_TMP+1),A
 370+ 5E40              	; comma
 371+ 5E40 CD C1 65     	CALL CHKCHAR
 372+ 5E43 2C           	DB ','
 373+ 5E44              	; get char data pointer
 374+ 5E44 DD 21 2F 54  	LD IX, FRMQNT
 375+ 5E48 CD 59 01     	CALL CALBAS
 376+ 5E4B ED 53 BD 62  	LD (BLIT_STRUCT+10), DE
 377+ 5E4F              	; comma
 378+ 5E4F CD C1 65     	CALL CHKCHAR
 379+ 5E52 2C           	DB ','
 380+ 5E53              	; get mask data pointer
 381+ 5E53 DD 21 2F 54  	LD IX, FRMQNT
 382+ 5E57 CD 59 01     	CALL CALBAS
 383+ 5E5A ED 53 BB 62  	LD (BLIT_STRUCT+8), DE
 384+ 5E5E              	; comma
 385+ 5E5E CD C1 65     	CALL CHKCHAR
 386+ 5E61 2C           	DB ','
 387+ 5E62              	; get width
 388+ 5E62 DD 21 2F 54  	LD IX, FRMQNT
 389+ 5E66 CD 59 01     	CALL CALBAS
 390+ 5E69 7B           	LD A, E
 391+ 5E6A 32 C1 62     	LD (BLIT_STRUCT+14), A
 392+ 5E6D              	; comma
 393+ 5E6D CD C1 65     	CALL CHKCHAR
 394+ 5E70 2C           	DB ','
 395+ 5E71              	; get height
 396+ 5E71 DD 21 2F 54  	LD IX, FRMQNT
 397+ 5E75 CD 59 01     	CALL CALBAS
 398+ 5E78 7B           	LD A, E
 399+ 5E79 32 C3 62     	LD (BLIT_STRUCT+16), A
 400+ 5E7C              	; comma
 401+ 5E7C CD C1 65     	CALL CHKCHAR
 402+ 5E7F 2C           	DB ','
 403+ 5E80              	; get background pointer
 404+ 5E80 DD 21 2F 54  	LD IX, FRMQNT
 405+ 5E84 CD 59 01     	CALL CALBAS
 406+ 5E87 ED 53 B7 62  	LD (BLIT_STRUCT+4), DE
 407+ 5E8B              	; comma
 408+ 5E8B CD C1 65     	CALL CHKCHAR
 409+ 5E8E 2C           	DB ','
 410+ 5E8F              	; get background width
 411+ 5E8F DD 21 2F 54  	LD IX, FRMQNT
 412+ 5E93 CD 59 01     	CALL CALBAS
 413+ 5E96 7B           	LD A, E
 414+ 5E97 32 B1 62     	LD (BLIT_TMP+2), A
 415+ 5E9A              	; comma
 416+ 5E9A CD C1 65     	CALL CHKCHAR
 417+ 5E9D 2C           	DB ','
 418+ 5E9E              	; get background height
 419+ 5E9E DD 21 2F 54  	LD IX, FRMQNT
 420+ 5EA2 CD 59 01     	CALL CALBAS
 421+ 5EA5 7B           	LD A, E
 422+ 5EA6 32 B2 62     	LD (BLIT_TMP+3), A
 423+ 5EA9              	; ending )
 424+ 5EA9 CD C1 65     	CALL CHKCHAR
 425+ 5EAC 29           	DB ')'
 426+ 5EAD
 427+ 5EAD E5           	PUSH HL ; save position in BASIC buffer
 428+ 5EAE
 429+ 5EAE              	; calculate char&mask add to value
 430+ 5EAE 26 00        	LD H, 0
 431+ 5EB0 3A C1 62     	LD A, (BLIT_STRUCT+14)
 432+ 5EB3 6F           	LD L, A
 433+ 5EB4 CD AF 64     	CALL HLx8
 434+ 5EB7 22 BF 62     	LD (BLIT_STRUCT+12), HL
 435+ 5EBA              	; calculate background add to value
 436+ 5EBA 26 00        	LD H, 0
 437+ 5EBC 3A B1 62     	LD A, (BLIT_TMP+2)
 438+ 5EBF 6F           	LD L, A
 439+ 5EC0 CD AF 64     	CALL HLx8
 440+ 5EC3 22 B9 62     	LD (BLIT_STRUCT+6), HL
 441+ 5EC6              	; calculate pointer to background location
 442+ 5EC6 21 00 00     	LD HL, 0
 443+ 5EC9 3A B0 62     	LD A,(BLIT_TMP+1)
 444+ 5ECC B7           	OR A
 445+ 5ECD 28 08        	JR Z, .L1
 446+ 5ECF 47           	LD B,A
 447+ 5ED0 ED 5B B9 62  	LD DE,(BLIT_STRUCT+6)
 448+ 5ED4              .L0:
 449+ 5ED4 19           	ADD HL, DE
 450+ 5ED5 10 FD        	DJNZ .L0
 451+ 5ED7              .L1:
 452+ 5ED7 EB           	EX DE,HL
 453+ 5ED8 26 00        	LD H,0
 454+ 5EDA 3A AF 62     	LD A,(BLIT_TMP+0)
 455+ 5EDD 6F           	LD L,A
 456+ 5EDE CD AF 64     	CALL HLx8
 457+ 5EE1 19           	ADD HL,DE
 458+ 5EE2 ED 5B B7 62  	LD DE,(BLIT_STRUCT+4)
 459+ 5EE6 19           	ADD HL,DE
 460+ 5EE7 22 B7 62     	LD (BLIT_STRUCT+4),HL
 461+ 5EEA
 462+ 5EEA F3           	DI
 463+ 5EEB FD 21 F2 5E  	LD IY, .RET
 464+ 5EEF C3 73 65     	JP ENABLE_PAGE0
 465+ 5EF2              .RET:
 466+ 5EF2 FB           	EI
 467+ 5EF3 DD 21 B3 62  	LD IX, BLIT_STRUCT
 468+ 5EF7 CD 7E 5D     	CALL SHIFT_MERGE_CHARACTER
 469+ 5EFA
 470+ 5EFA D1               POP DE
 471+ 5EFB C1               POP BC
 472+ 5EFC CD EA 64         CALL RESTORE_PAGE_INFO
 473+ 5EFF
 474+ 5EFF E1           	POP HL
 475+ 5F00 C9           	RET
 476+ 5F01              .DAdiv8:
 477+ 5F01 7B           	LD A,E
 478+ 5F02 CB 2A        	SRA D
 479+ 5F04 CB 1F            RR  A
 480+ 5F06 CB 2A            SRA D
 481+ 5F08 CB 1F            RR  A
 482+ 5F0A CB 2A            SRA D
 483+ 5F0C CB 1F            RR  A
 484+ 5F0E C9           	RET
 485+ 5F0F              ; *******************************************************************************************************
 486+ 5F0F               ENDIF
# file closed: asm\BLIT.asm
 148  5F0F               ENDIF
 149  5F0F
 150  5F0F               IF (TILE_CMDS == 1)
 151  5F0F               INCLUDE "TILE.asm"
# file opened: asm\TILE.asm
   1+ 5F0F              ; *******************************************************************************************************
   2+ 5F0F              ; generic function to implement tiling
   3+ 5F0F              ; should be modified to call appropriate function for memory or vram
   4+ 5F0F              ; input IX=pointer to following structure
   5+ 5F0F              ; +00 tile_data_ptr
   6+ 5F0F              ; +02 tile_rows
   7+ 5F0F              ; +04 tile_columns
   8+ 5F0F              ; +06 destination_address
   9+ 5F0F              ; +08 dest_to_next_row_add_to_value
  10+ 5F0F              ; +10 num_horizontal_tiles
  11+ 5F0F              ; +12 num_vertical_tiles
  12+ 5F0F              ; modifies AF, BC, DE, HL
  13+ 5F0F              TILE:
  14+ 5F0F DD 6E 06     	LD L, (IX+6)
  15+ 5F12 DD 66 07     	LD H, (IX+7) ; destination address
  16+ 5F15 22 AF 62     	LD (TILETMP1), HL
  17+ 5F18 DD 46 0C     	LD B, (IX+12) ; vertical tile number
  18+ 5F1B              .L1:
  19+ 5F1B C5           	PUSH BC
  20+ 5F1C DD 6E 00     		LD L, (IX+0)
  21+ 5F1F DD 66 01     		LD H, (IX+1) ; tile address
  22+ 5F22 22 B1 62     		LD (TILETMP2), HL
  23+ 5F25 DD 46 02     		LD B, (IX+2) ; tile rows
  24+ 5F28              .L2:
  25+ 5F28 C5           		PUSH BC
  26+ 5F29 CD 00 00     .CALL1:		CALL 0
  27+ 5F2C DD 46 0A     			LD B, (IX+10) ; horizontal tile num
  28+ 5F2F              .L3:
  29+ 5F2F C5           			PUSH BC
  30+ 5F30 2A B1 62     				LD HL, (TILETMP2)
  31+ 5F33 DD 46 04     				LD B, (IX+4) ; tile columns
  32+ 5F36              .L4:
  33+ 5F36 C5           				PUSH BC
  34+ 5F37              .CALL2:
  35+ 5F37 CD 00 00     					CALL 0
  36+ 5F3A C1           				POP BC
  37+ 5F3B 10 F9        				DJNZ .L4
  38+ 5F3D C1           			POP BC
  39+ 5F3E 10 EF        			DJNZ .L3
  40+ 5F40 22 B1 62     			LD (TILETMP2), HL
  41+ 5F43 2A AF 62     			LD HL, (TILETMP1)
  42+ 5F46 DD 5E 08     			LD E, (IX+8)
  43+ 5F49 DD 56 09     			LD D, (IX+9) ; add to value for dest next row
  44+ 5F4C 19           			ADD HL, DE
  45+ 5F4D 22 AF 62     			LD (TILETMP1), HL
  46+ 5F50 C1           		POP BC
  47+ 5F51 10 D5        		DJNZ .L2
  48+ 5F53 C1           	POP BC
  49+ 5F54 10 C5        	DJNZ .L1
  50+ 5F56 C9           	RET
  51+ 5F57              ; *******************************************************************************************************
  52+ 5F57
  53+ 5F57               IFNDEF CMDS_WITH_PARAMETERS
  54+ 5F57 ~            ; *******************************************************************************************************
  55+ 5F57 ~            ; function to handle CALL TILERAM basic extension
  56+ 5F57 ~            ; fills memory with tiles
  57+ 5F57 ~            ; TILERAM ( INT request_data_ptr )
  58+ 5F57 ~            ; request_data_ptr described in TILE
  59+ 5F57 ~            ; will put ram in page 0 also, page 1 is already there
  60+ 5F57 ~            TILERAM:
  61+ 5F57 ~            	; opening (
  62+ 5F57 ~            	CALL CHKCHAR
  63+ 5F57 ~            	DB '('
  64+ 5F57 ~            	; get pointer to request struct
  65+ 5F57 ~            	LD IX, FRMQNT
  66+ 5F57 ~            	CALL CALBAS
  67+ 5F57 ~            	PUSH DE
  68+ 5F57 ~            	; ending )
  69+ 5F57 ~            	CALL CHKCHAR
  70+ 5F57 ~            	DB ')'
  71+ 5F57 ~
  72+ 5F57 ~            	POP IX ; pointer to request struct
  73+ 5F57 ~
  74+ 5F57 ~            	PUSH HL ; save position in BASIC buffer
  75+ 5F57 ~            	DI
  76+ 5F57 ~            	LD IY, .RET
  77+ 5F57 ~            	JP ENABLE_PAGE0
  78+ 5F57 ~            .RET:
  79+ 5F57 ~            	EI
  80+ 5F57 ~            	; set RAM functions to call
  81+ 5F57 ~            	LD HL, .TILECOPY
  82+ 5F57 ~            	LD (TILE.CALL2+1), HL
  83+ 5F57 ~            	LD HL, .SETDESTROW
  84+ 5F57 ~            	LD (TILE.CALL1+1), HL
  85+ 5F57 ~            	LD A,1
  86+ 5F57 ~            	LD (VRAM_UPDATE_IN_PROGRESS),A
  87+ 5F57 ~            	CALL TILE
  88+ 5F57 ~            	XOR A
  89+ 5F57 ~            	LD (VRAM_UPDATE_IN_PROGRESS),A
  90+ 5F57 ~
  91+ 5F57 ~                POP DE
  92+ 5F57 ~                POP BC
  93+ 5F57 ~                CALL RESTORE_PAGE_INFO
  94+ 5F57 ~
  95+ 5F57 ~            	POP HL
  96+ 5F57 ~            	RET
  97+ 5F57 ~            .TILECOPY:
  98+ 5F57 ~            	.8 LDI
  99+ 5F57 ~            	RET
 100+ 5F57 ~            .SETDESTROW:
 101+ 5F57 ~            	LD DE, (TILETMP1)
 102+ 5F57 ~            	RET
 103+ 5F57 ~            ; *******************************************************************************************************
 104+ 5F57               ENDIF
 105+ 5F57
 106+ 5F57               IFDEF CMDS_WITH_PARAMETERS
 107+ 5F57              ; *******************************************************************************************************
 108+ 5F57              ; function to handle CALL TILERAM basic extension
 109+ 5F57              ; fills memory with tiles
 110+ 5F57              ; TILERAM ( INT tile_data_pointer,
 111+ 5F57              ;			INT tile_columns,
 112+ 5F57              ;			INT tile_rows,
 113+ 5F57              ;			INT destination_pointer,
 114+ 5F57              ;			INT destination_columns,
 115+ 5F57              ;			INT destination_rows,
 116+ 5F57              ;			INT destination_begin_column,
 117+ 5F57              ;			INT destination_begin_row,
 118+ 5F57              ;			INT number_of_tiles_horizontally,
 119+ 5F57              ;			INT	number_of_tiles_vertically )
 120+ 5F57              ; will put ram in page 0 also, page 1 is already there
 121+ 5F57              TILERAM:
 122+ 5F57              	; opening (
 123+ 5F57 CD C1 65     	CALL CHKCHAR
 124+ 5F5A 28           	DB '('
 125+ 5F5B              	; get tile data pointer coordinate
 126+ 5F5B DD 21 2F 54  	LD IX, FRMQNT
 127+ 5F5F CD 59 01     	CALL CALBAS
 128+ 5F62 ED 53 B3 62  	LD (BLIT_STRUCT+0), DE
 129+ 5F66              	; comma
 130+ 5F66 CD C1 65     	CALL CHKCHAR
 131+ 5F69 2C           	DB ','
 132+ 5F6A              	; get tile columns
 133+ 5F6A DD 21 2F 54  	LD IX, FRMQNT
 134+ 5F6E CD 59 01     	CALL CALBAS
 135+ 5F71 ED 53 B7 62  	LD (BLIT_STRUCT+4), DE
 136+ 5F75              	; comma
 137+ 5F75 CD C1 65     	CALL CHKCHAR
 138+ 5F78 2C           	DB ','
 139+ 5F79              	; get tile columns
 140+ 5F79 DD 21 2F 54  	LD IX, FRMQNT
 141+ 5F7D CD 59 01     	CALL CALBAS
 142+ 5F80 ED 53 B5 62  	LD (BLIT_STRUCT+2), DE
 143+ 5F84              	; comma
 144+ 5F84 CD C1 65     	CALL CHKCHAR
 145+ 5F87 2C           	DB ','
 146+ 5F88              	; get destintion pointer
 147+ 5F88 DD 21 2F 54  	LD IX, FRMQNT
 148+ 5F8C CD 59 01     	CALL CALBAS
 149+ 5F8F ED 53 B9 62  	LD (BLIT_STRUCT+6), DE
 150+ 5F93              	; comma
 151+ 5F93 CD C1 65     	CALL CHKCHAR
 152+ 5F96 2C           	DB ','
 153+ 5F97              	; get destination columns
 154+ 5F97 DD 21 2F 54  	LD IX, FRMQNT
 155+ 5F9B CD 59 01     	CALL CALBAS
 156+ 5F9E 7B           	LD A, E
 157+ 5F9F 32 AF 62     	LD (BLIT_TMP+0), A
 158+ 5FA2              	; comma
 159+ 5FA2 CD C1 65     	CALL CHKCHAR
 160+ 5FA5 2C           	DB ','
 161+ 5FA6              	; get destination rows
 162+ 5FA6 DD 21 2F 54  	LD IX, FRMQNT
 163+ 5FAA CD 59 01     	CALL CALBAS
 164+ 5FAD 7B           	LD A, E
 165+ 5FAE 32 B0 62     	LD (BLIT_TMP+1), A
 166+ 5FB1              	; comma
 167+ 5FB1 CD C1 65     	CALL CHKCHAR
 168+ 5FB4 2C           	DB ','
 169+ 5FB5              	; get destination begin column
 170+ 5FB5 DD 21 2F 54  	LD IX, FRMQNT
 171+ 5FB9 CD 59 01     	CALL CALBAS
 172+ 5FBC 7B           	LD A, E
 173+ 5FBD 32 B1 62     	LD (BLIT_TMP+2), A
 174+ 5FC0              	; comma
 175+ 5FC0 CD C1 65     	CALL CHKCHAR
 176+ 5FC3 2C           	DB ','
 177+ 5FC4              	; get destination begin row
 178+ 5FC4 DD 21 2F 54  	LD IX, FRMQNT
 179+ 5FC8 CD 59 01     	CALL CALBAS
 180+ 5FCB 7B           	LD A, E
 181+ 5FCC 32 B2 62     	LD (BLIT_TMP+3), A
 182+ 5FCF              	; comma
 183+ 5FCF CD C1 65     	CALL CHKCHAR
 184+ 5FD2 2C           	DB ','
 185+ 5FD3              	; get number of tiles horizontally
 186+ 5FD3 DD 21 2F 54  	LD IX, FRMQNT
 187+ 5FD7 CD 59 01     	CALL CALBAS
 188+ 5FDA ED 53 BD 62  	LD (BLIT_STRUCT+10), DE
 189+ 5FDE              	; comma
 190+ 5FDE CD C1 65     	CALL CHKCHAR
 191+ 5FE1 2C           	DB ','
 192+ 5FE2              	; get number of tiles vertically
 193+ 5FE2 DD 21 2F 54  	LD IX, FRMQNT
 194+ 5FE6 CD 59 01     	CALL CALBAS
 195+ 5FE9 ED 53 BF 62  	LD (BLIT_STRUCT+12), DE
 196+ 5FED              	; ending )
 197+ 5FED CD C1 65     	CALL CHKCHAR
 198+ 5FF0 29           	DB ')'
 199+ 5FF1
 200+ 5FF1 E5           	PUSH HL ; save position in BASIC buffer
 201+ 5FF2
 202+ 5FF2              	; calculate destination add to value
 203+ 5FF2 26 00        	LD H, 0
 204+ 5FF4 3A AF 62     	LD A, (BLIT_TMP+0)
 205+ 5FF7 6F           	LD L, A
 206+ 5FF8 CD AF 64     	CALL HLx8
 207+ 5FFB 22 BB 62     	LD (BLIT_STRUCT+8), HL
 208+ 5FFE              	; calculate pointer to background location
 209+ 5FFE 21 00 00     	LD HL, 0
 210+ 6001 3A B2 62     	LD A,(BLIT_TMP+3)
 211+ 6004 B7           	OR A
 212+ 6005 28 08        	JR Z, .L1
 213+ 6007 47           	LD B,A
 214+ 6008 ED 5B BB 62  	LD DE,(BLIT_STRUCT+8)
 215+ 600C              .L0:
 216+ 600C 19           	ADD HL, DE
 217+ 600D 10 FD        	DJNZ .L0
 218+ 600F              .L1:
 219+ 600F EB           	EX DE,HL
 220+ 6010 26 00        	LD H,0
 221+ 6012 3A B1 62     	LD A,(BLIT_TMP+2)
 222+ 6015 6F           	LD L,A
 223+ 6016 CD AF 64     	CALL HLx8
 224+ 6019 19           	ADD HL,DE
 225+ 601A ED 5B B9 62  	LD DE,(BLIT_STRUCT+6)
 226+ 601E 19           	ADD HL,DE
 227+ 601F 22 B9 62     	LD (BLIT_STRUCT+6),HL
 228+ 6022 F3           	DI
 229+ 6023 FD 21 2A 60  	LD IY, .RET
 230+ 6027 C3 73 65     	JP ENABLE_PAGE0
 231+ 602A              .RET:
 232+ 602A FB           	EI
 233+ 602B              	; set RAM functions to call
 234+ 602B 21 45 60     	LD HL, .TILECOPY
 235+ 602E 22 38 5F     	LD (TILE.CALL2+1), HL
 236+ 6031 21 56 60     	LD HL, .SETDESTROW
 237+ 6034 22 2A 5F     	LD (TILE.CALL1+1), HL
 238+ 6037 DD 21 B3 62  	LD IX,BLIT_STRUCT
 239+ 603B CD 0F 5F     	CALL TILE
 240+ 603E
 241+ 603E D1               POP DE
 242+ 603F C1               POP BC
 243+ 6040 CD EA 64         CALL RESTORE_PAGE_INFO
 244+ 6043
 245+ 6043 E1           	POP HL
 246+ 6044 C9           	RET
 247+ 6045              .TILECOPY:
 248+ 6045 ED A0       > LDI
 248+ 6047 ED A0       > LDI
 248+ 6049 ED A0       > LDI
 248+ 604B ED A0       > LDI
 248+ 604D ED A0       > LDI
 248+ 604F ED A0       > LDI
 248+ 6051 ED A0       > LDI
 248+ 6053 ED A0       > LDI
 249+ 6055 C9           	RET
 250+ 6056              .SETDESTROW:
 251+ 6056 ED 5B AF 62  	LD DE, (TILETMP1)
 252+ 605A C9           	RET
 253+ 605B              ; *******************************************************************************************************
 254+ 605B               ENDIF
 255+ 605B
 256+ 605B               IFDEF CMDS_WITH_PARAMETERS
 257+ 605B              ; *******************************************************************************************************
 258+ 605B              ; function to handle CALL TILEVRM basic extension
 259+ 605B              ; fills vram with tiles
 260+ 605B              ; TILEVRM ( INT tile_data_pointer,
 261+ 605B              ;			INT tile_columns,
 262+ 605B              ;			INT tile_rows,
 263+ 605B              ;			INT destination_begin_column,
 264+ 605B              ;			INT destination_begin_row,
 265+ 605B              ;			INT number_of_tiles_horizontally,
 266+ 605B              ;			INT	number_of_tiles_vertically )
 267+ 605B              ; will put ram in page 0 also, page 1 is already there
 268+ 605B              ; for destination uses address of SCREEN 2 pattern buffer and 32x24 size
 269+ 605B              TILEVRM:
 270+ 605B              	; opening (
 271+ 605B CD C1 65     	CALL CHKCHAR
 272+ 605E 28           	DB '('
 273+ 605F              	; get tile data pointer coordinate
 274+ 605F DD 21 2F 54  	LD IX, FRMQNT
 275+ 6063 CD 59 01     	CALL CALBAS
 276+ 6066 ED 53 B3 62  	LD (BLIT_STRUCT+0), DE
 277+ 606A              	; comma
 278+ 606A CD C1 65     	CALL CHKCHAR
 279+ 606D 2C           	DB ','
 280+ 606E              	; get tile columns
 281+ 606E DD 21 2F 54  	LD IX, FRMQNT
 282+ 6072 CD 59 01     	CALL CALBAS
 283+ 6075 ED 53 B7 62  	LD (BLIT_STRUCT+4), DE
 284+ 6079              	; comma
 285+ 6079 CD C1 65     	CALL CHKCHAR
 286+ 607C 2C           	DB ','
 287+ 607D              	; get tile columns
 288+ 607D DD 21 2F 54  	LD IX, FRMQNT
 289+ 6081 CD 59 01     	CALL CALBAS
 290+ 6084 ED 53 B5 62  	LD (BLIT_STRUCT+2), DE
 291+ 6088              	; comma
 292+ 6088 CD C1 65     	CALL CHKCHAR
 293+ 608B 2C           	DB ','
 294+ 608C              	; get destination begin column
 295+ 608C DD 21 2F 54  	LD IX, FRMQNT
 296+ 6090 CD 59 01     	CALL CALBAS
 297+ 6093 7B           	LD A, E
 298+ 6094 32 B1 62     	LD (BLIT_TMP+2), A
 299+ 6097              	; comma
 300+ 6097 CD C1 65     	CALL CHKCHAR
 301+ 609A 2C           	DB ','
 302+ 609B              	; get destination begin row
 303+ 609B DD 21 2F 54  	LD IX, FRMQNT
 304+ 609F CD 59 01     	CALL CALBAS
 305+ 60A2 7B           	LD A, E
 306+ 60A3 32 B2 62     	LD (BLIT_TMP+3), A
 307+ 60A6              	; comma
 308+ 60A6 CD C1 65     	CALL CHKCHAR
 309+ 60A9 2C           	DB ','
 310+ 60AA              	; get number of tiles horizontally
 311+ 60AA DD 21 2F 54  	LD IX, FRMQNT
 312+ 60AE CD 59 01     	CALL CALBAS
 313+ 60B1 ED 53 BD 62  	LD (BLIT_STRUCT+10), DE
 314+ 60B5              	; comma
 315+ 60B5 CD C1 65     	CALL CHKCHAR
 316+ 60B8 2C           	DB ','
 317+ 60B9              	; get number of tiles vertically
 318+ 60B9 DD 21 2F 54  	LD IX, FRMQNT
 319+ 60BD CD 59 01     	CALL CALBAS
 320+ 60C0 ED 53 BF 62  	LD (BLIT_STRUCT+12), DE
 321+ 60C4              	; ending )
 322+ 60C4 CD C1 65     	CALL CHKCHAR
 323+ 60C7 29           	DB ')'
 324+ 60C8
 325+ 60C8 E5           	PUSH HL ; save position in BASIC buffer
 326+ 60C9
 327+ 60C9              	; calculate destination add to value
 328+ 60C9 21 00 01     	LD HL, 256
 329+ 60CC 22 BB 62     	LD (BLIT_STRUCT+8), HL
 330+ 60CF              	; calculate pointer to background location
 331+ 60CF 3A B2 62     	LD A,(BLIT_TMP+3)
 332+ 60D2 67           	LD H,A
 333+ 60D3 2E 00        	LD L,0
 334+ 60D5 EB           	EX DE,HL
 335+ 60D6 26 00        	LD H,0
 336+ 60D8 3A B1 62     	LD A,(BLIT_TMP+2)
 337+ 60DB 6F           	LD L,A
 338+ 60DC CD AF 64     	CALL HLx8
 339+ 60DF 19           	ADD HL,DE
 340+ 60E0 ED 5B CB F3  	LD DE,(GRPCGP)
 341+ 60E4 19           	ADD HL,DE
 342+ 60E5 22 B9 62     	LD (BLIT_STRUCT+6),HL
 343+ 60E8 F3           	DI
 344+ 60E9 FD 21 F0 60  	LD IY, .RET
 345+ 60ED C3 73 65     	JP ENABLE_PAGE0
 346+ 60F0              .RET:
 347+ 60F0 FB           	EI
 348+ 60F1              	; set RAM functions to call
 349+ 60F1 21 0B 61     	LD HL, .TILECOPY
 350+ 60F4 22 38 5F     	LD (TILE.CALL2+1), HL
 351+ 60F7 21 11 61     	LD HL, .SETDESTROW
 352+ 60FA 22 2A 5F     	LD (TILE.CALL1+1), HL
 353+ 60FD DD 21 B3 62  	LD IX,BLIT_STRUCT
 354+ 6101 CD 0F 5F     	CALL TILE
 355+ 6104
 356+ 6104 D1               POP DE
 357+ 6105 C1               POP BC
 358+ 6106 CD EA 64         CALL RESTORE_PAGE_INFO
 359+ 6109
 360+ 6109 E1           	POP HL
 361+ 610A C9           	RET
 362+ 610B              .TILECOPY:
 363+ 610B 01 98 08     	LD BC, #0898
 364+ 610E C3 A7 64     	JP BBYTECOPY_NO_C
 365+ 6111              .SETDESTROW:
 366+ 6111 2A AF 62     	LD HL, (TILETMP1)
 367+ 6114 F3           	DI
 368+ 6115 CD 9A 64     	CALL SETWRT_LOCAL
 369+ 6118 FB           	EI
 370+ 6119 C9           	RET
 371+ 611A              ; *******************************************************************************************************
 372+ 611A               ENDIF
 373+ 611A
 374+ 611A               IFNDEF CMDS_WITH_PARAMETERS
 375+ 611A ~            ; *******************************************************************************************************
 376+ 611A ~            ; function to handle CALL TILEVRM basic extension
 377+ 611A ~            ; fills vram with tiles
 378+ 611A ~            ; TILEVRM ( INT request_data_ptr )
 379+ 611A ~            ; request_data_ptr described in TILE
 380+ 611A ~            ; will put ram in page 0 also, page 1 is already there
 381+ 611A ~            TILEVRM:
 382+ 611A ~            	; opening (
 383+ 611A ~            	CALL CHKCHAR
 384+ 611A ~            	DB '('
 385+ 611A ~            	; get pointer to request struct
 386+ 611A ~            	LD IX, FRMQNT
 387+ 611A ~            	CALL CALBAS
 388+ 611A ~            	PUSH DE
 389+ 611A ~            	; ending )
 390+ 611A ~            	CALL CHKCHAR
 391+ 611A ~            	DB ')'
 392+ 611A ~
 393+ 611A ~            	POP IX ; pointer to request struct
 394+ 611A ~
 395+ 611A ~            	PUSH HL ; save position in BASIC buffer
 396+ 611A ~            	DI
 397+ 611A ~            	LD IY, .RET
 398+ 611A ~            	JP ENABLE_PAGE0
 399+ 611A ~            .RET:
 400+ 611A ~            	EI
 401+ 611A ~            	; set RAM functions to call
 402+ 611A ~            	LD HL, .TILECOPY
 403+ 611A ~            	LD (TILE.CALL2+1), HL
 404+ 611A ~            	LD HL, .SETDESTROW
 405+ 611A ~            	LD (TILE.CALL1+1), HL
 406+ 611A ~            	CALL TILE
 407+ 611A ~
 408+ 611A ~                POP DE
 409+ 611A ~                POP BC
 410+ 611A ~                CALL RESTORE_PAGE_INFO
 411+ 611A ~
 412+ 611A ~            	POP HL
 413+ 611A ~            	RET
 414+ 611A ~            .TILECOPY:
 415+ 611A ~            	LD BC, #0898
 416+ 611A ~            	JP BBYTECOPY_NO_C
 417+ 611A ~            .SETDESTROW:
 418+ 611A ~            	LD HL, (TILETMP1)
 419+ 611A ~            	DI
 420+ 611A ~            	CALL SETWRT_LOCAL
 421+ 611A ~            	EI
 422+ 611A ~            	RET
 423+ 611A ~            ; *******************************************************************************************************
 424+ 611A               ENDIF
# file closed: asm\TILE.asm
 152  611A               ENDIF
 153  611A
 154  611A               IF (COLL_CMD == 1)
 155  611A               INCLUDE "COLLISION.asm"
# file opened: asm\COLLISION.asm
   1+ 611A              ; generic collision checking routines
   2+ 611A              ; in BASIC we use rectangle structure array DIM R%(7,n) of the format
   3+ 611A              ; R%(0,n) is active flag, <>0 active / 0 skipped in checks
   4+ 611A              ; R%(1,n) is either upper left x coordinate or sprite id (0-31) depending on R(7,n)
   5+ 611A              ; R%(2,n) is either upper left y coordinate or unused depending on R(7,n)
   6+ 611A              ; R%(3,n) x offset where rectangle begins
   7+ 611A              ; R%(4,n) y offset where rectangle begins
   8+ 611A              ; R%(5,n) is width
   9+ 611A              ; R%(6,n) is height
  10+ 611A              ; R%(7,0) is type, 0=generic where R%(1,0) contains x coordinate
  11+ 611A              ;                  <>0 sprite where R%(1,0) contains sprite id
  12+ 611A              ; for type sprite, upper left coordinates are taken from sprite attribute array
  13+ 611A
  14+ 611A              ; ************************************************************************************************
  15+ 611A              ; quick test if HL<=DE<=HL+BC
  16+ 611A              ; input BC=width, DE=x, HL=min
  17+ 611A              ; if not true flag C set
  18+ 611A              ; modifies AF
  19+ 611A              GENERIC_INNER_CHECK:
  20+ 611A E5               PUSH HL
  21+ 611B D5               PUSH DE
  22+ 611C EB               EX DE,HL
  23+ 611D A7               AND A
  24+ 611E ED 52            SBC HL, DE
  25+ 6120 FA 2E 61         JP M, .GENERIC_INNER_CHECK_NOT
  26+ 6123 A7               AND A
  27+ 6124 ED 42            SBC HL, BC
  28+ 6126 28 03            JR Z, .L2
  29+ 6128 F2 2E 61         JP P, .GENERIC_INNER_CHECK_NOT
  30+ 612B              .L2:
  31+ 612B A7               AND A
  32+ 612C 18 01            JR .EXIT
  33+ 612E              .GENERIC_INNER_CHECK_NOT:
  34+ 612E 37               SCF
  35+ 612F              .EXIT:
  36+ 612F D1               POP DE
  37+ 6130 E1               POP HL
  38+ 6131 C9               RET
  39+ 6132              ; ************************************************************************************************
  40+ 6132
  41+ 6132              ; ************************************************************************************************
  42+ 6132              ; function to check if rectangles are overlapping
  43+ 6132              ; input IX=IY=pointer to struct
  44+ 6132              ;  +00 active flag
  45+ 6132              ;  +02 x coordinate
  46+ 6132              ;  +04 y coordinate
  47+ 6132              ;  +06 x offset where rectangle begins
  48+ 6132              ;  +08 y offset where rectangle begins
  49+ 6132              ;  +10 width
  50+ 6132              ;  +12 height
  51+ 6132              ; where IY is used to read +2 and +4, and IX to read +6, +8, +10 and +12
  52+ 6132              ; this is a hack to allow location being taken from sprite attributes table
  53+ 6132              ; input BLIT_STRUCT data
  54+ 6132              ;  +00 x coordinate
  55+ 6132              ;  +02 y coordinate
  56+ 6132              ;  +04 width
  57+ 6132              ;  +06 height
  58+ 6132              ; returns CF=1 if not overlapping, CF=0 if overlapping
  59+ 6132              RECTANGLE_OVERLAP_CHECK:
  60+ 6132                  ; first check which rectangle is higher
  61+ 6132 DD 6E 0C         LD L,(IX+12)
  62+ 6135 DD 66 0D         LD H,(IX+13)
  63+ 6138 ED 5B B9 62      LD DE,(BLIT_STRUCT+6)
  64+ 613C A7               AND A
  65+ 613D ED 52            SBC HL,DE
  66+ 613F FD 6E 04         LD L,(IY+4)
  67+ 6142 FD 66 05         LD H,(IY+5)
  68+ 6145 DD 5E 08         LD E,(IX+8)
  69+ 6148 DD 56 09         LD D,(IX+9)
  70+ 614B FA 6B 61         JP M,.L1
  71+ 614E                  ; equally high or IX defined one higher
  72+ 614E                  ; check upper boundary
  73+ 614E 19               ADD HL,DE
  74+ 614F ED 5B B5 62      LD DE,(BLIT_STRUCT+2)
  75+ 6153 DD 4E 0C         LD C,(IX+12)
  76+ 6156 DD 46 0D         LD B,(IX+13)
  77+ 6159 CD 1A 61         CALL GENERIC_INNER_CHECK
  78+ 615C 30 29            JR NC,.INSIDE
  79+ 615E                  ; check lower boundary
  80+ 615E E5               PUSH HL
  81+ 615F 2A B9 62         LD HL,(BLIT_STRUCT+6)
  82+ 6162 19               ADD HL,DE
  83+ 6163 EB               EX DE,HL
  84+ 6164 E1               POP HL
  85+ 6165 CD 1A 61         CALL GENERIC_INNER_CHECK
  86+ 6168 30 1D            JR NC,.INSIDE
  87+ 616A C9               RET ; not overlapping
  88+ 616B              .L1:
  89+ 616B                  ; rectangle defined in BLIT_STRUCT is higher
  90+ 616B 19               ADD HL,DE
  91+ 616C EB               EX DE,HL
  92+ 616D 2A B5 62         LD HL,(BLIT_STRUCT+2)
  93+ 6170 ED 4B B9 62      LD BC,(BLIT_STRUCT+6)
  94+ 6174 CD 1A 61         CALL GENERIC_INNER_CHECK
  95+ 6177 30 0E            JR NC,.INSIDE
  96+ 6179 E5               PUSH HL
  97+ 617A DD 6E 0C         LD L,(IX+12)
  98+ 617D DD 66 0D         LD H,(IX+13)
  99+ 6180 19               ADD HL,DE
 100+ 6181 EB               EX DE,HL
 101+ 6182 E1               POP HL
 102+ 6183 CD 1A 61         CALL GENERIC_INNER_CHECK
 103+ 6186 D8               RET C
 104+ 6187              .INSIDE:
 105+ 6187                  ; check x coordinate
 106+ 6187                  ; first check which rectangle is wider
 107+ 6187 DD 6E 0A         LD L,(IX+10)
 108+ 618A DD 66 0B         LD H,(IX+11)
 109+ 618D ED 5B B7 62      LD DE,(BLIT_STRUCT+4)
 110+ 6191 A7               AND A
 111+ 6192 ED 52            SBC HL,DE
 112+ 6194 FD 6E 02         LD L,(IY+2)
 113+ 6197 FD 66 03         LD H,(IY+3)
 114+ 619A DD 5E 06         LD E,(IX+6)
 115+ 619D DD 56 07         LD D,(IX+7)
 116+ 61A0 FA BC 61         JP M,.L2
 117+ 61A3                  ; equally wide or IX defined one wider
 118+ 61A3                  ; check left boundary
 119+ 61A3 19               ADD HL,DE
 120+ 61A4 ED 5B B3 62      LD DE,(BLIT_STRUCT+0)
 121+ 61A8 DD 4E 0A         LD C,(IX+10)
 122+ 61AB DD 46 0B         LD B,(IX+11)
 123+ 61AE CD 1A 61         CALL GENERIC_INNER_CHECK
 124+ 61B1 D0               RET NC ; overlap
 125+ 61B2                  ; check right boundary
 126+ 61B2 E5               PUSH HL
 127+ 61B3 2A B7 62         LD HL,(BLIT_STRUCT+4)
 128+ 61B6 19               ADD HL,DE
 129+ 61B7 EB               EX DE,HL
 130+ 61B8 E1               POP HL
 131+ 61B9 C3 1A 61         JP GENERIC_INNER_CHECK ; CF and result set by fn call
 132+ 61BC              .L2:
 133+ 61BC                  ; rectangle defined in BLIT_STRUCT is higher
 134+ 61BC 19               ADD HL,DE
 135+ 61BD EB               EX DE,HL
 136+ 61BE 2A B3 62         LD HL,(BLIT_STRUCT+0)
 137+ 61C1 ED 4B B7 62      LD BC,(BLIT_STRUCT+4)
 138+ 61C5 CD 1A 61         CALL GENERIC_INNER_CHECK
 139+ 61C8 D0               RET NC ; overlap
 140+ 61C9 E5               PUSH HL
 141+ 61CA DD 6E 0A         LD L,(IX+10)
 142+ 61CD DD 66 0B         LD H,(IX+11)
 143+ 61D0 19               ADD HL,DE
 144+ 61D1 EB               EX DE,HL
 145+ 61D2 E1               POP HL
 146+ 61D3 C3 1A 61         JP GENERIC_INNER_CHECK
 147+ 61D6              ; ************************************************************************************************
 148+ 61D6
 149+ 61D6              ; ************************************************************************************************
 150+ 61D6              ; function tries to find rectangle overlap and returns an index if found
 151+ 61D6              ; input BLIT_STRUCT data
 152+ 61D6              ;  +00 x coordinate
 153+ 61D6              ;  +02 y coordinate
 154+ 61D6              ;  +04 width
 155+ 61D6              ;  +06 height
 156+ 61D6              ;  +08 number of items in a list, described under RECTANGLE_OVERLAP_CHECK
 157+ 61D6              ;  +09 pointer to first element of R%(7,n)
 158+ 61D6              ;  +11 pointer to INT result variable
 159+ 61D6              ; returns CF=1 if not overlapping
 160+ 61D6              ; returns A=list index and CF=0 if overlapping
 161+ 61D6              FIND_OVERLAP:
 162+ 61D6 3A BB 62         LD A,(BLIT_STRUCT+8)
 163+ 61D9 47               LD B,A
 164+ 61DA DD 2A BC 62      LD IX,(BLIT_STRUCT+9)
 165+ 61DE              .L1:
 166+ 61DE C5               PUSH BC
 167+ 61DF                  ; check active flag
 168+ 61DF DD 7E 00         LD A,(IX)
 169+ 61E2 DD B6 01         OR (IX+1)
 170+ 61E5 28 18            JR Z,.NEXT
 171+ 61E7                  ; check type
 172+ 61E7 DD 7E 0E         LD A,(IX+14)
 173+ 61EA DD B6 0F         OR (IX+15)
 174+ 61ED 20 1A            JR NZ,.L2
 175+ 61EF DD E5            PUSH IX
 176+ 61F1 FD E1            POP IY
 177+ 61F3              .L3:
 178+ 61F3 CD 32 61         CALL RECTANGLE_OVERLAP_CHECK
 179+ 61F6 38 07            JR C,.NEXT
 180+ 61F8                  ; found
 181+ 61F8 C1               POP BC
 182+ 61F9 3A BB 62         LD A,(BLIT_STRUCT+8)
 183+ 61FC 90               SUB B
 184+ 61FD A7               AND A
 185+ 61FE C9               RET
 186+ 61FF              .NEXT:
 187+ 61FF 11 10 00         LD DE,16
 188+ 6202 DD 19            ADD IX,DE
 189+ 6204 C1               POP BC
 190+ 6205 10 D7            DJNZ .L1
 191+ 6207 37               SCF
 192+ 6208 C9               RET
 193+ 6209              .L2:
 194+ 6209                  ; sprite, need to build a temporary data struct since x and y values are inversed
 195+ 6209                  ; at BLIT_STRUCT+13
 196+ 6209 DD 7E 02         LD A,(IX+2) ; sprite ID
 197+ 620C CD 85 4D         CALL GETnthSPRATTR
 198+ 620F FD 21 BE 62      LD IY,BLIT_STRUCT+11
 199+ 6213 7E               LD A,(HL)
 200+ 6214 FD 77 04         LD (IY+4),A
 201+ 6217 23               INC HL
 202+ 6218 7E               LD A,(HL)
 203+ 6219 FD 77 05         LD (IY+5),A
 204+ 621C 23               INC HL
 205+ 621D 7E               LD A,(HL)
 206+ 621E FD 77 02         LD (IY+2),A
 207+ 6221 23               INC HL
 208+ 6222 7E               LD A,(HL)
 209+ 6223 FD 77 03         LD (IY+3),A
 210+ 6226 18 CB            JR .L3
 211+ 6228              ; ************************************************************************************************
 212+ 6228
 213+ 6228              ; ************************************************************************************************
 214+ 6228              ; function to handle CALL COLL basic extension
 215+ 6228              ; checks for collision between player and other rectangles
 216+ 6228              ; COLL ( INT result variable,
 217+ 6228              ;	     INT player x value,
 218+ 6228              ;	     INT player y value,
 219+ 6228              ;	     INT player width,
 220+ 6228              ;	     INT player height,
 221+ 6228              ;	     INT number of items in a list,
 222+ 6228              ;		 INT[6][n] rectangle struct )
 223+ 6228              ; will fill result variable with index or -1 if no collision
 224+ 6228              ; rectangle struct described under RECTANGLE_OVERLAP_CHECK
 225+ 6228              COLL:
 226+ 6228              	; opening (
 227+ 6228 CD C1 65     	CALL CHKCHAR
 228+ 622B 28           	DB '('
 229+ 622C              	; get address of result variable
 230+ 622C DD 21 A4 5E  	LD IX, PTRGET
 231+ 6230 CD 59 01     	CALL CALBAS
 232+ 6233 ED 53 BE 62  	LD (BLIT_STRUCT+11),DE
 233+ 6237              	; comma
 234+ 6237 CD C1 65     	CALL CHKCHAR
 235+ 623A 2C           	DB ','
 236+ 623B              	; get x
 237+ 623B DD 21 2F 54  	LD IX, FRMQNT
 238+ 623F CD 59 01     	CALL CALBAS
 239+ 6242 ED 53 B3 62  	LD (BLIT_STRUCT+0),DE
 240+ 6246              	; comma
 241+ 6246 CD C1 65     	CALL CHKCHAR
 242+ 6249 2C           	DB ','
 243+ 624A              	; get y
 244+ 624A DD 21 2F 54  	LD IX, FRMQNT
 245+ 624E CD 59 01     	CALL CALBAS
 246+ 6251 ED 53 B5 62  	LD (BLIT_STRUCT+2),DE
 247+ 6255              	; comma
 248+ 6255 CD C1 65     	CALL CHKCHAR
 249+ 6258 2C           	DB ','
 250+ 6259              	; get width
 251+ 6259 DD 21 2F 54  	LD IX, FRMQNT
 252+ 625D CD 59 01     	CALL CALBAS
 253+ 6260 ED 53 B7 62  	LD (BLIT_STRUCT+4),DE
 254+ 6264              	; comma
 255+ 6264 CD C1 65     	CALL CHKCHAR
 256+ 6267 2C           	DB ','
 257+ 6268              	; get height
 258+ 6268 DD 21 2F 54  	LD IX, FRMQNT
 259+ 626C CD 59 01     	CALL CALBAS
 260+ 626F ED 53 B9 62  	LD (BLIT_STRUCT+6),DE
 261+ 6273              	; comma
 262+ 6273 CD C1 65     	CALL CHKCHAR
 263+ 6276 2C           	DB ','
 264+ 6277              	; get number of items in a list
 265+ 6277 DD 21 1C 52  	LD IX, GETBYT
 266+ 627B CD 59 01     	CALL CALBAS
 267+ 627E 32 BB 62     	LD (BLIT_STRUCT+8),A
 268+ 6281              	; comma
 269+ 6281 CD C1 65     	CALL CHKCHAR
 270+ 6284 2C           	DB ','
 271+ 6285              	; get address of rectangle structure array DIM R%(7,n)
 272+ 6285 3A BB 62     	LD A,(BLIT_STRUCT+8)
 273+ 6288 5F               LD E,A
 274+ 6289 3E 02            LD A,2
 275+ 628B 47           	LD B,A
 276+ 628C 16 07        	LD D,7
 277+ 628E CD EE 65     	CALL GET_BASIC_ARRAY_DATA_POINTER
 278+ 6291 ED 43 BC 62  	LD (BLIT_STRUCT+9),BC
 279+ 6295              	; ending )
 280+ 6295 CD C1 65     	CALL CHKCHAR
 281+ 6298 29           	DB ')'
 282+ 6299
 283+ 6299 E5               PUSH HL
 284+ 629A CD D6 61         CALL FIND_OVERLAP
 285+ 629D 2A BE 62         LD HL,(BLIT_STRUCT+11)
 286+ 62A0 38 06            JR C,.NOTFOUND
 287+ 62A2 77               LD (HL),A
 288+ 62A3 23               INC HL
 289+ 62A4 36 00            LD (HL),0
 290+ 62A6 E1               POP HL
 291+ 62A7 C9               RET
 292+ 62A8              .NOTFOUND:
 293+ 62A8 36 FF            LD (HL),#FF
 294+ 62AA 23               INC HL
 295+ 62AB 36 FF            LD (HL),#FF
 296+ 62AD E1               POP HL
 297+ 62AE C9               RET
 298+ 62AF              ; ************************************************************************************************
 299+ 62AF
# file closed: asm\COLLISION.asm
 156  62AF               ENDIF
 157  62AF
 158  62AF              ; temp variables for BLIT, TILE functions
 159  62AF               IF (BLIT_CMDS + TILE_CMDS + BOX_CMDS + SPRITE_CMDS + ANIM_CMDS + COLL_CMD > 0)
 160  62AF              BLIT_TMP:
 161  62AF              TILETMP1:
 162  62AF              BLIT_TMP1:
 163  62AF 00 00         DW 0
 164  62B1              TILETMP2:
 165  62B1              BLIT_TMP2:
 166  62B1 00 00         DW 0
 167  62B3                IFDEF CMDS_WITH_PARAMETERS
 168  62B3              BLIT_STRUCT:
 169  62B3 00 00 00...   DS 17
 170  62B7                ENDIF
 171  62B7               ENDIF
 172  62C4
 173  62C4               IF (VRAM_CMDS + TILE_CMDS + BOX_CMDS + SPRITE_CMDS + ANIM_CMDS > 0)
 174  62C4              VRAM_UPDATE_IN_PROGRESS:
 175  62C4 00            DB 0
 176  62C5               ENDIF
 177  62C5
 178  62C5              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 179  62C5              ; per starting letter, if no commands with this letter, NULL value
 180  62C5              CMDS:
 181  62C5               IF (ANIM_CMDS == 1)
 182  62C5 04 64        	DW CMDS_A ;
 183  62C7               ELSE
 184  62C7 ~                DW 0 ; A
 185  62C7               ENDIF
 186  62C7               IF (BLIT_CMDS + BOX_CMDS > 0)
 187  62C7 CF 63            DW CMDS_B ; B
 188  62C9               ELSE
 189  62C9 ~            	DW 0
 190  62C9               ENDIF
 191  62C9               IF (COLL_CMD == 1)
 192  62C9 92 64        	DW CMDS_C ;
 193  62CB               ELSE
 194  62CB ~                DW 0 ; C
 195  62CB               ENDIF
 196  62CB 00 00            DW 0 ; D
 197  62CD 00 00            DW 0 ; E
 198  62CF               IF (VRAM_CMDS + RAM_CMDS > 0)
 199  62CF 46 63            DW CMDS_F; F
 200  62D1               ELSE
 201  62D1 ~            	DW 0
 202  62D1               ENDIF
 203  62D1               IF (GENCAL_CMD > 0)
 204  62D1 59 63            DW CMDS_G; G
 205  62D3               ELSE
 206  62D3 ~            	DW 0
 207  62D3               ENDIF
 208  62D3 00 00            DW 0 ; H
 209  62D5 00 00            DW 0 ; I
 210  62D7 00 00            DW 0 ; J
 211  62D9 00 00            DW 0 ; K
 212  62DB 00 00            DW 0 ; L
 213  62DD               IF (VRAM_CMDS + RAM_CMDS + ANIM_CMDS > 0)
 214  62DD F9 62            DW CMDS_M ; M
 215  62DF               ELSE
 216  62DF ~            	DW 0
 217  62DF               ENDIF
 218  62DF 00 00            DW 0 ; N
 219  62E1 00 00            DW 0 ; O
 220  62E3 00 00            DW 0 ; P
 221  62E5 00 00            DW 0 ; Q
 222  62E7 00 00            DW 0 ; R
 223  62E9               IF (SOUND_CMDS + SPRITE_CMDS > 0)
 224  62E9 6D 63            DW CMDS_S ; S
 225  62EB               ELSE
 226  62EB ~            	DW 0
 227  62EB               ENDIF
 228  62EB               IF (TILE_CMDS > 0)
 229  62EB EF 63            DW CMDS_T ; T
 230  62ED               ELSE
 231  62ED ~            	DW 0
 232  62ED               ENDIF
 233  62ED 00 00            DW 0 ; U
 234  62EF               IF (VRAM_CMDS > 0)
 235  62EF 63 63            DW CMDS_V ; V
 236  62F1               ELSE
 237  62F1 ~            	DW 0
 238  62F1               ENDIF
 239  62F1 00 00            DW 0 ; W
 240  62F3 00 00            DW 0 ; X
 241  62F5 00 00            DW 0 ; Y
 242  62F7 00 00            DW 0 ; Z
 243  62F9
 244  62F9              CMDS_M:
 245  62F9               IF (VRAM_CMDS == 1)
 246  62F9 4D 45 4D 56      DB "MEMVRM", 0
 246  62FD 52 4D 00
 247  6300 5F 5A            DW MEMVRM
 248  6302               ENDIF
 249  6302               IF (RAM_CMDS == 1)
 250  6302 4D 45 4D 43  	DB "MEMCPY", 0
 250  6306 50 59 00
 251  6309 94 58        	DW MEMCPY
 252  630B               ENDIF
 253  630B               IF (ANIM_CMDS == 1)
 254  630B 4D 41 58 41  	DB "MAXANIMITEMS",0
 254  630F 4E 49 4D 49
 254  6313 54 45 4D 53
 254  6317 00
 255  6318 1A 50        	DW MAXANIMITEMS
 256  631A 4D 41 58 41  	DB "MAXANIMDEFS",0
 256  631E 4E 49 4D 44
 256  6322 45 46 53 00
 257  6326 A0 51        	DW MAXANIMDEFS
 258  6328 4D 41 58 41  	DB "MAXANIMSPRS",0
 258  632C 4E 49 4D 53
 258  6330 50 52 53 00
 259  6334 36 52        	DW MAXANIMSPRS
 260  6336 4D 41 58 41     DB "MAXAUTOSGAMS",0
 260  633A 55 54 4F 53
 260  633E 47 41 4D 53
 260  6342 00
 261  6343 80 53           DW MAXAUTOSGAMS
 262  6345               ENDIF
 263  6345               IF (VRAM_CMDS + RAM_CMDS + ANIM_CMDS > 0)
 264  6345 00           	DB 0
 265  6346               ENDIF
 266  6346              CMDS_F:
 267  6346               IF (VRAM_CMDS == 1)
 268  6346 46 49 4C 56      DB "FILVRM", 0
 268  634A 52 4D 00
 269  634D 10 5A            DW FILVRM
 270  634F               ENDIF
 271  634F               IF (RAM_CMDS == 1)
 272  634F 46 49 4C 52      DB "FILRAM", 0
 272  6353 41 4D 00
 273  6356 D8 58            DW FILRAM
 274  6358               ENDIF
 275  6358               IF (VRAM_CMDS + RAM_CMDS > 0)
 276  6358 00               DB 0
 277  6359               ENDIF
 278  6359              CMDS_G:
 279  6359               IF (GENCAL_CMD == 1)
 280  6359 47 45 4E 43      DB "GENCAL", 0
 280  635D 41 4C 00
 281  6360 3F 5B            DW GENCAL
 282  6362               ENDIF
 283  6362               IF (GENCAL_CMD > 0)
 284  6362 00           	DB	0
 285  6363               ENDIF
 286  6363              CMDS_V:
 287  6363               IF (VRAM_CMDS == 1)
 288  6363 56 52 4D 4D  	DB "VRMMEM", 0
 288  6367 45 4D 00
 289  636A DD 5A        	DW VRMMEM
 290  636C               ENDIF
 291  636C               IF (VRAM_CMDS > 0)
 292  636C 00           	DB 0
 293  636D               ENDIF
 294  636D              CMDS_S:
 295  636D               IF (SPRITE_CMDS + ANIM_CMDS > 0)
 296  636D 53 47 41 4D      DB "SGAM",0
 296  6371 00
 297  6372 FF 56            DW SGAM
 298  6374               ENDIF
 299  6374               IF (SPRITE_CMDS == 1)
 300  6374 53 50 52 53   	DB "SPRSET", 0
 300  6378 45 54 00
 301  637B A2 4E        	DW SPRSET
 302  637D 53 50 52 47  	DB "SPRGRPMOV", 0
 302  6381 52 50 4D 4F
 302  6385 56 00
 303  6387 55 4F        	DW SPRGRPMOV
 304  6389               ENDIF
 305  6389               IF (SOUND_CMDS == 1)
 306  6389 53 4E 44 53  	DB "SNDSFX", 0
 306  638D 46 58 00
 307  6390 B6 59        	DW SNDSFX
 308  6392 53 4E 44 50  	DB "SNDPLYON", 0
 308  6396 4C 59 4F 4E
 308  639A 00
 309  639B 80 59        	DW SNDPLYON
 310  639D 53 4E 44 50  	DB "SNDPLYOFF", 0
 310  63A1 4C 59 4F 46
 310  63A5 46 00
 311  63A7 93 59        	DW SNDPLYOFF
 312  63A9 53 4E 44 50  	DB "SNDPLYINI", 0
 312  63AD 4C 59 49 4E
 312  63B1 49 00
 313  63B3 36 59        	DW SNDPLYINIT
 314  63B5               ENDIF
 315  63B5               IF (SPRITE_CMDS == 1)
 316  63B5 53 50 52 45  	DB "SPRENABLE", 0
 316  63B9 4E 41 42 4C
 316  63BD 45 00
 317  63BF 5D 4E        	DW SPRENABLE
 318  63C1 53 50 52 44  	DB "SPRDISABLE", 0
 318  63C5 49 53 41 42
 318  63C9 4C 45 00
 319  63CC 9D 4E        	DW SPRDISABLE
 320  63CE               ENDIF
 321  63CE               IF (SOUND_CMDS + SPRITE_CMDS + ANIM_CMDS > 0)
 322  63CE 00           	DB 0
 323  63CF               ENDIF
 324  63CF              CMDS_B:
 325  63CF               IF (BLIT_CMDS == 1)
 326  63CF 42 4C 49 54  	DB "BLIT", 0
 326  63D3 00
 327  63D4 12 5E        	DW BLIT
 328  63D6               ENDIF
 329  63D6               IF (BOX_CMDS == 1)
 330  63D6 42 4F 58 4D  	DB "BOXMEMCPY", 0
 330  63DA 45 4D 43 50
 330  63DE 59 00
 331  63E0 CE 5B        	DW BOXMEMCPY
 332  63E2 42 4F 58 4D  	DB "BOXMEMVRM", 0
 332  63E6 45 4D 56 52
 332  63EA 4D 00
 333  63EC 64 5C        	DW BOXMEMVRM
 334  63EE               ENDIF
 335  63EE               IF (BLIT_CMDS + BOX_CMDS > 0)
 336  63EE 00           	DB 0
 337  63EF               ENDIF
 338  63EF              CMDS_T:
 339  63EF               IF (TILE_CMDS == 1)
 340  63EF 54 49 4C 45  	DB "TILERAM", 0
 340  63F3 52 41 4D 00
 341  63F7 57 5F        	DW TILERAM
 342  63F9 54 49 4C 45  	DB "TILEVRM", 0
 342  63FD 56 52 4D 00
 343  6401 5B 60        	DW TILEVRM
 344  6403               ENDIF
 345  6403               IF (TILE_CMDS > 0)
 346  6403 00           	DB 0
 347  6404               ENDIF
 348  6404              CMDS_A:
 349  6404               IF (ANIM_CMDS == 1)
 350  6404 41 4E 49 4D     DB "ANIMSTEP",0
 350  6408 53 54 45 50
 350  640C 00
 351  640D 53 55           DW ANIMSTEP
 352  640F 41 4E 49 4D  	DB "ANIMSTART",0
 352  6413 53 54 41 52
 352  6417 54 00
 353  6419 58 55        	DW ANIMSTART
 354  641B 41 4E 49 4D  	DB "ANIMSTOP",0
 354  641F 53 54 4F 50
 354  6423 00
 355  6424 5D 55        	DW ANIMSTOP
 356  6426 41 4E 49 4D  	DB "ANIMITEMPAT",0
 356  642A 49 54 45 4D
 356  642E 50 41 54 00
 357  6432 EB 50        	DW ANIMITEMPAT
 358  6434 41 4E 49 4D  	DB "ANIMITEMPTR",0
 358  6438 49 54 45 4D
 358  643C 50 54 52 00
 359  6440 4C 51        	DW ANIMITEMPTR_CMD
 360  6442 41 4E 49 4D  	DB "ANIMDEF",0
 360  6446 44 45 46 00
 361  644A E3 51        	DW ANIMDEF
 362  644C 41 4E 49 4D  	DB "ANIMSPRITE",0
 362  6450 53 50 52 49
 362  6454 54 45 00
 363  6457 8F 52        	DW ANIMSPRITE
 364  6459 41 4E 49 4D     DB "ANIMCHAR",0
 364  645D 43 48 41 52
 364  6461 00
 365  6462 07 53           DW ANIMCHAR
 366  6464 41 55 54 4F     DB "AUTOSGAMDEF",0
 366  6468 53 47 41 4D
 366  646C 44 45 46 00
 367  6470 DD 53           DW AUTOSGAMDEF
 368  6472 41 55 54 4F     DB "AUTOSGAMSTART",0
 368  6476 53 47 41 4D
 368  647A 53 54 41 52
 368  647E 54 00
 369  6480 14 55           DW AUTOSGAMSTART
 370  6482 41 55 54 4F     DB "AUTOSGAMSTOP",0
 370  6486 53 47 41 4D
 370  648A 53 54 4F 50
 370  648E 00
 371  648F 50 55           DW AUTOSGAMSTOP
 372  6491 00           	DB 0
 373  6492               ENDIF
 374  6492              CMDS_C:
 375  6492               IF (COLL_CMD == 1)
 376  6492 43 4F 4C 4C      DB "COLL", 0
 376  6496 00
 377  6497 28 62            DW COLL
 378  6499               ENDIF
 379  6499               IF (COLL_CMD > 0)
 380  6499 00           	DB	0
 381  649A               ENDIF
 382  649A
 383  649A               IF (VRAM_CMDS + TILE_CMDS + SPRITE_CMDS > 0)
 384  649A              ; ****************************************************************************************************
 385  649A              ; function sets VRAM address
 386  649A              ; input HL=address
 387  649A              ; modifies AF
 388  649A              SETWRT_LOCAL:
 389  649A 7D           	LD	A, L
 390  649B D3 99        	OUT	(099H), A
 391  649D 7C           	LD	A, H
 392  649E E6 3F        	AND	03FH
 393  64A0 F6 40        	OR	040H
 394  64A2 D3 99        	OUT	(099H), A
 395  64A4 C9           	RET
 396  64A5              ; ****************************************************************************************************
 397  64A5               ENDIF
 398  64A5
 399  64A5               IF (VRAM_CMDS + TILE_CMDS > 0)
 400  64A5              ; ****************************************************************************************************
 401  64A5              ; function copies data from RAM to VRAM
 402  64A5              ; input HL=address in RAM
 403  64A5              ; input B=count
 404  64A5              ; modifies AF, BC, HL
 405  64A5              BBYTECOPY:
 406  64A5 0E 98        	LD C,#98
 407  64A7              BBYTECOPY_NO_C:
 408  64A7 ED A3        	OUTI
 409  64A9 C2 A7 64     	JP	NZ, BBYTECOPY_NO_C
 410  64AC C9           	RET
 411  64AD              ; ****************************************************************************************************
 412  64AD               ENDIF
 413  64AD
 414  64AD              ; ****************************************************************************************************
 415  64AD              ; function multiplies HL by 32
 416  64AD              HLx32:
 417  64AD 29           	ADD HL,HL
 418  64AE              ; ****************************************************************************************************
 419  64AE              ; function multiplies HL by 16
 420  64AE              HLx16:
 421  64AE 29           	ADD HL,HL
 422  64AF              ; ****************************************************************************************************
 423  64AF              ; function multiplies HL by 8
 424  64AF              HLx8:
 425  64AF 29          > ADD HL, HL
 425  64B0 29          > ADD HL, HL
 425  64B1 29          > ADD HL, HL
 426  64B2 C9           	RET
 427  64B3              ; ****************************************************************************************************
 428  64B3
 429  64B3              ; ****************************************************************************************************
 430  64B3              ; function gets slot and subslot data for specific page
 431  64B3              ; input A=page (0, 1 or 2)
 432  64B3              ; output B = 0A8H register value
 433  64B3              ; output D = 0 is no subslots, 1 if yes
 434  64B3              ; output C = 0A8H value when page 3 slot equals to requested page slot
 435  64B3              ; output E = subslot value if present
 436  64B3              ; modifies AF, BC, DE, HL
 437  64B3              GET_PAGE_INFO:
 438  64B3 6F               LD L, A
 439  64B4 C6 C1            ADD A, low (EXPTBL)
 440  64B6 32 C0 64         LD (GET_PAGE_INFO_L1+1), A
 441  64B9 DB A8            IN A, (0A8H)
 442  64BB 47               LD B, A
 443  64BC E6 3F            AND 03FH
 444  64BE 4F               LD C, A
 445  64BF              GET_PAGE_INFO_L1:
 446  64BF 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 447  64C2 E6 80            AND 080H
 448  64C4 28 1B            JR Z, GET_PAGE_INFO_L2
 449  64C6                  ; expanded
 450  64C6 2D               DEC L
 451  64C7 FA E6 64         JP M, GET_PAGE_INFO_L3
 452  64CA 2D               DEC L
 453  64CB FA E4 64         JP M, GET_PAGE_INFO_L4
 454  64CE                  ; page 2
 455  64CE 07               RLCA
 456  64CF 07               RLCA
 457  64D0              GET_PAGE_INFO_L5:
 458  64D0 E6 C0            AND 0C0H
 459  64D2 B1               OR C
 460  64D3 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 461  64D5 4F               LD C, A
 462  64D6 3A FF FF         LD A, (0FFFFH)
 463  64D9 2F               CPL
 464  64DA 5F               LD E, A
 465  64DB 16 01            LD D, 1
 466  64DD 78               LD A, B ; return stack
 467  64DE D3 A8            OUT (0A8H), A
 468  64E0 C9               RET
 469  64E1              GET_PAGE_INFO_L2:
 470  64E1                  ; not expanded
 471  64E1 16 00            LD D, 0
 472  64E3 C9               RET
 473  64E4              GET_PAGE_INFO_L4:
 474  64E4                  ; page 1
 475  64E4 0F               RRCA
 476  64E5 0F               RRCA
 477  64E6              GET_PAGE_INFO_L3:
 478  64E6                  ; page 0
 479  64E6 0F               RRCA
 480  64E7 0F               RRCA
 481  64E8 18 E6            JR GET_PAGE_INFO_L5
 482  64EA              ; ****************************************************************************************************
 483  64EA
 484  64EA              ; ****************************************************************************************************
 485  64EA              ; function returns original slot and subslot info
 486  64EA              ; input B = 0A8H register value
 487  64EA              ; input D = 0 is no subslots, 1 if yes
 488  64EA              ; input C = 0A8H value when page 3 slot equals to requested page slot
 489  64EA              ; input E = subslot value if present
 490  64EA              ; modifies AF, disables interrupts
 491  64EA              RESTORE_PAGE_INFO:
 492  64EA 7A              LD A, D
 493  64EB B7              OR A
 494  64EC 28 08           JR Z, RESTORE_PAGE_INFO_L1
 495  64EE 79              LD A, C
 496  64EF F3           	DI
 497  64F0 D3 A8           OUT (0A8H), A
 498  64F2 7B              LD A, E
 499  64F3 32 FF FF        LD (0FFFFH), A
 500  64F6              RESTORE_PAGE_INFO_L1:
 501  64F6 78              LD A, B
 502  64F7 D3 A8           OUT (0A8H), A
 503  64F9 C9              RET
 504  64FA              ; ****************************************************************************************************
 505  64FA
 506  64FA              ; *******************************************************************************************************
 507  64FA              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 508  64FA              ; INPUT:  A = SLOT ID: EXXXSSPP
 509  64FA              ; E = EXPANDED FLAG
 510  64FA              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 511  64FA              ; PP = PRIMARY SLOT NUMBER
 512  64FA              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 513  64FA              ; CHANGES: AF, BC, DE
 514  64FA
 515  64FA              LOCAL_ENASLT:
 516  64FA CD 1A 65         CALL L0353
 517  64FD FA 07 65         JP M, L0340
 518  6500 DB A8            IN A, (0A8H)
 519  6502 A1               AND C
 520  6503 B0               OR B
 521  6504 D3 A8            OUT (0A8H), A
 522  6506 C9               RET
 523  6507              L0340:
 524  6507 E5               PUSH HL
 525  6508 CD 3F 65         CALL L0378
 526  650B 4F               LD C, A
 527  650C 06 00            LD B, 0
 528  650E 7D               LD A, L
 529  650F A4               AND H
 530  6510 B2               OR D
 531  6511 21 C5 FC         LD HL, 0FCC5H
 532  6514 09               ADD HL, BC
 533  6515 77               LD (HL), A
 534  6516 E1               POP HL
 535  6517 79               LD A, C
 536  6518 18 E0            JR LOCAL_ENASLT
 537  651A              L0353:
 538  651A F3               DI
 539  651B F5               PUSH AF
 540  651C 7C               LD A, H
 541  651D 07               RLCA
 542  651E 07               RLCA
 543  651F E6 03            AND 3
 544  6521 5F               LD E, A
 545  6522 3E C0            LD A, 0C0H
 546  6524              L035D:
 547  6524 07               RLCA
 548  6525 07               RLCA
 549  6526 1D               DEC E
 550  6527 F2 24 65         JP P, L035D
 551  652A 5F               LD E, A
 552  652B 2F               CPL
 553  652C 4F               LD C, A
 554  652D F1               POP AF
 555  652E F5               PUSH AF
 556  652F E6 03            AND 3
 557  6531 3C               INC A
 558  6532 47               LD B, A
 559  6533 3E AB            LD A, 0ABH
 560  6535              L036E:
 561  6535 C6 55            ADD A, 055H
 562  6537 10 FC            DJNZ L036E
 563  6539 57               LD D, A
 564  653A A3               AND E
 565  653B 47               LD B, A
 566  653C F1               POP AF
 567  653D A7               AND A
 568  653E C9               RET
 569  653F              L0378:
 570  653F F5               PUSH AF
 571  6540 7A               LD A, D
 572  6541 E6 C0            AND 0C0H
 573  6543 4F               LD C, A
 574  6544 F1               POP AF
 575  6545 F5               PUSH AF
 576  6546 57               LD D, A
 577  6547 DB A8            IN A, (0A8H)
 578  6549 47               LD B, A
 579  654A E6 3F            AND 03FH
 580  654C B1               OR C
 581  654D D3 A8            OUT (0A8H), A
 582  654F 7A               LD A, D
 583  6550 0F               RRCA
 584  6551 0F               RRCA
 585  6552 E6 03            AND 3
 586  6554 57               LD D, A
 587  6555 3E AB            LD A, 0ABH
 588  6557              L0390:
 589  6557 C6 55            ADD A, 055H
 590  6559 15               DEC D
 591  655A F2 57 65         JP P, L0390
 592  655D A3               AND E
 593  655E 57               LD D, A
 594  655F 7B               LD A, E
 595  6560 2F               CPL
 596  6561 67               LD H, A
 597  6562 3A FF FF         LD A, (0FFFFH)
 598  6565 2F               CPL
 599  6566 6F               LD L, A
 600  6567 A4               AND H
 601  6568 B2               OR D
 602  6569 32 FF FF         LD (0FFFFH), A
 603  656C 78               LD A, B
 604  656D D3 A8            OUT (0A8H), A
 605  656F F1               POP AF
 606  6570 E6 03            AND 3
 607  6572 C9               RET
 608  6573              ; *******************************************************************************************************
 609  6573
 610  6573              ; *******************************************************************************************************
 611  6573              ; some common code to activate page 0 and place values needed to restore original page on stack
 612  6573              ; input IY=return address
 613  6573              ENABLE_PAGE0:
 614  6573 AF              XOR A
 615  6574 CD B3 64        CALL GET_PAGE_INFO
 616  6577 C5              PUSH BC
 617  6578 D5              PUSH DE
 618  6579 3A 41 F3        LD A, (RAMAD0)
 619  657C 26 00           LD H, 0
 620  657E CD FA 64        CALL LOCAL_ENASLT
 621  6581 FD E9        	JP (IY)
 622  6583              ; *******************************************************************************************************
 623  6583
 624  6583              ; General BASIC CALL-instruction handler
 625  6583              CALLHAND:
 626  6583 FB              EI
 627  6584 E5           	PUSH HL
 628  6585 21 C5 62     	LD	HL, CMDS ; pointer table based on starting letter
 629  6588 3A 89 FD        LD A, (PROCNM)
 630  658B D6 41           SUB 'A'
 631  658D 87              ADD A, A
 632  658E 16 00           LD D, 0
 633  6590 5F              LD E, A
 634  6591 19              ADD HL, DE
 635  6592 5E              LD E, (HL)
 636  6593 23              INC HL
 637  6594 56              LD D, (HL)
 638  6595 7A              LD A, D
 639  6596 B3              OR E
 640  6597 28 23           JR Z, .CMDNOTRECOGNIZED
 641  6599 EB              EX DE, HL
 642  659A              .CHKCMD:
 643  659A 11 89 FD     	LD	DE, PROCNM
 644  659D              .LOOP:
 645  659D 1A              LD	A,(DE)
 646  659E BE           	CP	(HL)
 647  659F 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 648  65A1 13           	INC	DE
 649  65A2 23           	INC	HL
 650  65A3 A7           	AND	A
 651  65A4 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 652  65A6 5E           	LD	E,(HL)
 653  65A7 23           	INC	HL
 654  65A8 56           	LD	D,(HL)
 655  65A9 E1           	POP	HL		; routine address
 656  65AA CD CB 65     	CALL	GETPREVCHAR
 657  65AD CD BF 65     	CALL	.CALLDE		; Call routine
 658  65B0 A7           	AND	A
 659  65B1 C9           	RET
 660  65B2
 661  65B2              .TONEXTCMD:
 662  65B2 0E FF        	LD	C,0FFH
 663  65B4 AF           	XOR	A
 664  65B5 ED B1        	CPIR			; Skip to end of instruction name
 665  65B7 23           	INC	HL
 666  65B8 23           	INC	HL		; Skip address
 667  65B9 BE           	CP	(HL)
 668  65BA 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 669  65BC              .CMDNOTRECOGNIZED:
 670  65BC E1           	POP	HL
 671  65BD 37              SCF
 672  65BE C9           	RET
 673  65BF
 674  65BF              .CALLDE:
 675  65BF D5           	PUSH	DE
 676  65C0 C9           	RET
 677  65C1
 678  65C1              ;---------------------------
 679  65C1
 680  65C1              ;GETSTRPNT:
 681  65C1              ; OUT:
 682  65C1              ; HL = String Address
 683  65C1              ; B  = Lenght
 684  65C1              ;        LD      HL,(USR)
 685  65C1              ;        LD      B,(HL)
 686  65C1              ;        INC     HL
 687  65C1              ;        LD      E,(HL)
 688  65C1              ;        INC     HL
 689  65C1              ;        LD      D,(HL)
 690  65C1              ;        EX      DE,HL
 691  65C1              ;        RET
 692  65C1
 693  65C1              ;EVALTXTPARAM:
 694  65C1              ;	CALL	CHKCHAR
 695  65C1              ;	DEFB	"("             ; Check for (
 696  65C1              ;	LD	IX,FRMEVL
 697  65C1              ;	CALL	CALBAS		; Evaluate expression
 698  65C1              ;       LD      A,(VALTYP)
 699  65C1              ;        CP      3               ; Text type?
 700  65C1              ;        JP      NZ,TYPE_MISMATCH
 701  65C1              ;        PUSH	HL
 702  65C1              ;        LD	IX,FRESTR         ; Free the temporary string
 703  65C1              ;        CALL	CALBAS
 704  65C1              ;        POP	HL
 705  65C1              ;	CALL	CHKCHAR
 706  65C1              ;	DEFB	")"             ; Check for )
 707  65C1              ;        RET
 708  65C1
 709  65C1
 710  65C1              CHKCHAR:
 711  65C1 CD CB 65     	CALL	GETPREVCHAR	; Get previous basic char
 712  65C4 E3           	EX	(SP),HL
 713  65C5 BE           	CP	(HL) 	        ; Check if good char
 714  65C6 20 1D        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 715  65C8 23           	INC	HL
 716  65C9 E3           	EX	(SP),HL
 717  65CA 23           	INC	HL		; Get next basic char
 718  65CB
 719  65CB              GETPREVCHAR:
 720  65CB 2B           	DEC HL
 721  65CC DD 21 66 46  	LD	IX,CHRGTR
 722  65D0 CD 59 01     	CALL CALBAS
 723  65D3 FB              EI
 724  65D4 C9              RET
 725  65D5
 726  65D5
 727  65D5              TYPE_MISMATCH:
 728  65D5 1E 0D            LD E, 13 ; Type mismatch
 729  65D7 18 0E            JR THROW_ERROR
 730  65D9              SUBSCRIPT_OUT_OF_RANGE:
 731  65D9 1E 09            LD E,9 ; subscript out of range
 732  65DB 18 0A        	JR THROW_ERROR
 733  65DD              OVERFLOW:
 734  65DD 1E 06        	LD E,6
 735  65DF 18 06        	JR THROW_ERROR
 736  65E1              ILLEGAL_FUNCTION:
 737  65E1 1E 05            LD E, 5 ; illegal function call
 738  65E3 18 02            JR THROW_ERROR
 739  65E5              SYNTAX_ERROR:
 740  65E5 1E 02            LD E, 2 ; Syntax error
 741  65E7              THROW_ERROR:
 742  65E7 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 743  65EB C3 59 01     	JP	CALBAS
 744  65EE
 745  65EE              ;---------------------------
 746  65EE
 747  65EE              ; *******************************************************************************************************
 748  65EE              ; helper function to get pointer to BASIC array data
 749  65EE              ; input A=data type (2=INT,4=SINGLE,8=DOUBLE)
 750  65EE              ; input B=dimensions (1 or 2)
 751  65EE              ; input D=minimal first dimension
 752  65EE              ; input E=minimal second dimension, if applicable
 753  65EE              ; returns BC=pointer to first data element
 754  65EE              ; throws BASIC error if invalid type
 755  65EE              GET_BASIC_ARRAY_DATA_POINTER:
 756  65EE D5           	PUSH DE
 757  65EF C5           	PUSH BC
 758  65F0 F5           	PUSH AF
 759  65F1 3E 01           LD A,1
 760  65F3 32 A5 F6        LD (SUBFLG),A ; search for arrays only
 761  65F6 DD 21 A4 5E  	LD IX, PTRGET
 762  65FA CD 59 01     	CALL CALBAS
 763  65FD AF              XOR A
 764  65FE 32 A5 F6        LD (SUBFLG),A ; if not reset will cause syntax errors
 765  6601 3A 63 F6     	LD A,(VALTYP)
 766  6604 D1           	POP DE ; required type
 767  6605 BA           	CP D
 768  6606 C2 D5 65     	JP NZ,TYPE_MISMATCH
 769  6609 0A           	LD A,(BC)
 770  660A 03           	INC BC
 771  660B D1           	POP DE ; required number of dimensions
 772  660C BA           	CP D
 773  660D C2 D5 65     	JP NZ,TYPE_MISMATCH
 774  6610 D1           	POP DE ; required minimal array dimensions
 775  6611 3D           	DEC A
 776  6612 28 07        	JR Z,.ONE_DIMENSION
 777  6614              	; 2-dimension array
 778  6614 0A           	LD A,(BC)
 779  6615 03          > INC BC
 779  6616 03          > INC BC
 780  6617 BB           	CP E
 781  6618 DA D9 65     	JP C,SUBSCRIPT_OUT_OF_RANGE
 782  661B              .ONE_DIMENSION:
 783  661B 0A           	LD A,(BC)
 784  661C 03          > INC BC
 784  661D 03          > INC BC
 785  661E BA           	CP D
 786  661F DA D9 65     	JP C,SUBSCRIPT_OUT_OF_RANGE
 787  6622 C9           	RET
 788  6623              ; *******************************************************************************************************
 789  6623
 790  6623              EXT_END:
 791  6623
# file closed: asm\main.asm
