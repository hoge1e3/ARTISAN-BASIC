# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; control variables to include/exclude parts of code
   4  4000              SOUND_CMDS	 	EQU 1
   5  4000              RAM_CMDS 		EQU 1
   6  4000              VRAM_CMDS 		EQU 1
   7  4000              BLIT_CMDS		EQU 1
   8  4000              SPRITE_CMDS 	EQU 1
   9  4000              GENCAL_CMD		EQU 1
  10  4000              TILE_CMDS		EQU 1
  11  4000              BOX_CMDS		EQU 1
  12  4000              ANIM_CMDS		EQU 1
  13  4000
  14  4000               DEFINE CMDS_WITH_PARAMETERS
  15  4000
  16  4000              CHPUT   EQU     #A2
  17  4000              CALBAS	EQU		#159
  18  4000              ERRHAND EQU     #406F
  19  4000              FRMEVL  EQU     #4C64
  20  4000              FRESTR	EQU		#67D0
  21  4000              ; FRMQNT = formula quantificator
  22  4000              ; input HL=pointer to current program expression
  23  4000              ; output HL=next address
  24  4000              ; output DE=integer datum
  25  4000              FRMQNT	EQU		#542F
  26  4000              ; GETBYT = get byte parameter
  27  4000              ; input HL=pointer to current program expression
  28  4000              ; output HL=next address
  29  4000              ; output A=E=byte read
  30  4000              GETBYT		EQU		#521C
  31  4000              CHRGTR  	EQU     #4666
  32  4000              PTRGET		EQU 	#5EA4
  33  4000              SUBFLG		EQU		#F6A5
  34  4000              SYNCHR		EQU		#558C
  35  4000              VALTYP  	EQU     #F663
  36  4000              USR     	EQU     #F7F8
  37  4000              PROCNM		EQU		#FD89
  38  4000              BIOS_FILVRM EQU     #0056
  39  4000              CLIKSW		EQU		#F3DB
  40  4000              ATRBAS		EQU		#F928
  41  4000              GRPCGP		EQU		#F3CB
  42  4000
  43  4000              RAMAD0	EQU	#F341	; Main-RAM Slot (00000h~03FFFh)
  44  4000              RAMAD1	EQU	#F342	; Main-RAM Slot (04000h~07FFFh)
  45  4000              RAMAD2	EQU	#F343	; Main-RAM Slot (08000h~0BFFFh)
  46  4000              RAMAD3	EQU	#F344	; Main-RAM Slot (0C000h~0FFFFh)
  47  4000              EXPTBL	EQU #FCC1
  48  4000              SCRMOD	EQU #FCAF ; current screen mode
  49  4000              REG1SAV EQU #F3E0 ; VDP(1)
  50  4000              JIFFY	EQU #FC9E
  51  4000              GRPPAT	EQU #F3CF ; SCREEN 2 sprite generator table address
  52  4000              T32PAT	EQU #F3C5 ; SCREEN 1 sprite generator table address
  53  4000              PATBAS  EQU #F926 ; current sprite generator table address
  54  4000
  55  4000              ; BASIC error codes
  56  4000              ;01 NEXT without FOR
  57  4000              ;02 Syntax error
  58  4000              ;03 RETURN without GOSUB
  59  4000              ;04 Out of DATA
  60  4000              ;05 Illegal function call
  61  4000              ;06 Overflow
  62  4000              ;07 Out of memory
  63  4000              ;08 Undefined line number
  64  4000              ;09 Subscript out of range
  65  4000              ;10 Redimensioned array
  66  4000              ;11 Division by zero
  67  4000              ;12 Illegal direct
  68  4000              ;13 Type mismatch
  69  4000              ;14 Out of string space
  70  4000              ;15 String too long
  71  4000              ;16 String formula too complex
  72  4000              ;17 Can't CONTINUE
  73  4000              ;18 Undefined user function
  74  4000              ;19 Device I/O error
  75  4000              ;20 Verify error
  76  4000              ;21 No RESUME
  77  4000              ;22 RESUME without error
  78  4000              ;23 Unprintable error
  79  4000              ;24 Missing operand
  80  4000              ;25 Line buffer overflow
  81  4000              ;50 FIELD overflow
  82  4000              ;51 Internal error
  83  4000              ;52 Bad file number
  84  4000              ;53 File not found
  85  4000              ;54 File already open
  86  4000              ;55 Input past end
  87  4000              ;56 Bad file name
  88  4000              ;57 Direct statement in file
  89  4000              ;58 Sequential I/O only
  90  4000              ;59 File not OPEN
  91  4000
  92  4000
  93  4000               ; simulate cartridge with BASIC extension
  94  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  94  4004 86 56 00 00
  94  4008 00 00 00 00
  94  400C 00 00 00 00
  95  4010
  96  4010              ; this location #4010 stores last location used by basic extension
  97  4010              ; free memory after that point
  98  4010              FREEMEMPTR:
  99  4010 59 5F         DW EXT_END
 100  4012
 101  4012              ; this location #4012 stores extension version in DAA format
 102  4012              ; first byte is major version and second minor
 103  4012              VERSION:
 104  4012 00 70         DB #00, #70
 105  4014
 106  4014              ; binary included AKG player compiled at #4014
 107  4014               IF (SOUND_CMDS == 1)
 108  4014              	INCBIN "bin/AKG.bin"
 109  4CF0              	INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CF0              MAIN_PLAYER_START EQU 04014H
   2+ 4CF0              PLY_AKG_START EQU 04014H
   3+ 4CF0              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401DH
   4+ 4CF0              PLY_AKG_INITSOUNDEFFECTS EQU 0401DH
   5+ 4CF0              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 04021H
   6+ 4CF0              PLY_AKG_PLAYSOUNDEFFECT EQU 04021H
   7+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04022H
   8+ 4CF0              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04022H
   9+ 4CF0              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04049H
  10+ 4CF0              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04049H
  11+ 4CF0              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04057H
  12+ 4CF0              PLY_AKG_PSES_PLAY EQU 04090H
  13+ 4CF0              PLY_AKG_PSES_READFIRSTBYTE EQU 04099H
  14+ 4CF0              PLY_AKG_PSES_S_ENDORLOOP EQU 040B1H
  15+ 4CF0              PLY_AKG_PSES_S_LOOP EQU 040BCH
  16+ 4CF0              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C2H
  17+ 4CF0              PLY_AKG_PSES_NOTREACHED EQU 040D5H
  18+ 4CF0              PLY_AKG_PSES_HARDWAREONLY EQU 040D9H
  19+ 4CF0              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040E0H
  20+ 4CF0              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F2H
  21+ 4CF0              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FCH
  22+ 4CF0              PLY_AKG_PSES_H_AFTERRETRIG EQU 04106H
  23+ 4CF0              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 0411AH
  24+ 4CF0              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411FH
  25+ 4CF0              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04127H
  26+ 4CF0              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04132H
  27+ 4CF0              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413EH
  28+ 4CF0              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 04140H
  29+ 4CF0              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04146H
  30+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 0414AH
  31+ 4CF0              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 0414AH
  32+ 4CF0              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414CH
  33+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414CH
  34+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414CH
  35+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414DH
  36+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414EH
  37+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04152H
  38+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04152H
  39+ 4CF0              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04152H
  40+ 4CF0              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 0415AH
  41+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04162H
  42+ 4CF0              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04162H
  43+ 4CF0              PLY_AKG_INIT EQU 04162H
  44+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04162H
  45+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 04190H
  46+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A4H
  47+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B6H
  48+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D5H
  49+ 4CF0              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E2H
  50+ 4CF0              PLY_AKG_INIT_READWORDSANDFILL EQU 041E8H
  51+ 4CF0              PLY_AKG_INITTABLE0 EQU 041EBH
  52+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041EBH
  53+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04205H
  54+ 4CF0              PLY_AKG_INITTABLE0_END EQU 04205H
  55+ 4CF0              PLY_AKG_INITTABLE1 EQU 04205H
  56+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04205H
  57+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04209H
  58+ 4CF0              PLY_AKG_INITTABLE1_END EQU 04209H
  59+ 4CF0              PLY_AKG_INITTABLEORA EQU 04209H
  60+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04209H
  61+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 04221H
  62+ 4CF0              PLY_AKG_INITTABLEORA_END EQU 04221H
  63+ 4CF0              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 04221H
  64+ 4CF0              PLY_AKG_STOP EQU 04221H
  65+ 4CF0              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04233H
  66+ 4CF0              PLY_AKG_PLAY EQU 04233H
  67+ 4CF0              PLY_AKG_TICKDECREASINGCOUNTER EQU 0423BH
  68+ 4CF0              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 04241H
  69+ 4CF0              PLY_AKG_READLINKER EQU 04246H
  70+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04246H
  71+ 4CF0              PLY_AKG_READLINKER_PTLINKER EQU 04246H
  72+ 4CF0              PLY_AKG_READLINKER_NOLOOP EQU 04251H
  73+ 4CF0              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 0428AH
  74+ 4CF0              PLY_AKG_READLINE EQU 0428DH
  75+ 4CF0              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428DH
  76+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04293H
  77+ 4CF0              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04293H
  78+ 4CF0              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 042A0H
  79+ 4CF0              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A4H
  80+ 4CF0              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A7H
  81+ 4CF0              PLY_AKG_SPEEDTRACK_END EQU 042AAH
  82+ 4CF0              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042AAH
  83+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042B0H
  84+ 4CF0              PLY_AKG_EVENTTRACK_PTTRACK EQU 042B0H
  85+ 4CF0              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BDH
  86+ 4CF0              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042C1H
  87+ 4CF0              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C4H
  88+ 4CF0              PLY_AKG_EVENTTRACK_END EQU 042C7H
  89+ 4CF0              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C7H
  90+ 4CF0              PLY_AKG_CHANNEL1_READTRACK EQU 042D3H
  91+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D3H
  92+ 4CF0              PLY_AKG_CHANNEL1_PTTRACK EQU 042D3H
  93+ 4CF0              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042EEH
  94+ 4CF0              PLY_AKG_CHANNEL1_WAIT EQU 042F9H
  95+ 4CF0              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 04300H
  96+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 04300H
  97+ 4CF0              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 04300H
  98+ 4CF0              PLY_AKG_CHANNEL1_NOTE EQU 04309H
  99+ 4CF0              PLY_AKG_BASENOTEINDEX EQU 04309H
 100+ 4CF0              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 0430BH
 101+ 4CF0              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 0430BH
 102+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 0431BH
 103+ 4CF0              PLY_AKG_INSTRUMENTSTABLE EQU 0431BH
 104+ 4CF0              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432DH
 105+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433DH
 106+ 4CF0              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04365H
 107+ 4CF0              PLY_AKG_CHANNEL1_READCELLEND EQU 04368H
 108+ 4CF0              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04368H
 109+ 4CF0              PLY_AKG_CHANNEL2_READTRACK EQU 04374H
 110+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04374H
 111+ 4CF0              PLY_AKG_CHANNEL2_PTTRACK EQU 04374H
 112+ 4CF0              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438FH
 113+ 4CF0              PLY_AKG_CHANNEL2_WAIT EQU 0439AH
 114+ 4CF0              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 043A1H
 115+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 043A1H
 116+ 4CF0              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 043A1H
 117+ 4CF0              PLY_AKG_CHANNEL2_NOTE EQU 043AAH
 118+ 4CF0              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043AFH
 119+ 4CF0              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043AFH
 120+ 4CF0              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043D1H
 121+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043E1H
 122+ 4CF0              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04409H
 123+ 4CF0              PLY_AKG_CHANNEL2_READCELLEND EQU 0440CH
 124+ 4CF0              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440CH
 125+ 4CF0              PLY_AKG_CHANNEL3_READTRACK EQU 04418H
 126+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04418H
 127+ 4CF0              PLY_AKG_CHANNEL3_PTTRACK EQU 04418H
 128+ 4CF0              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04433H
 129+ 4CF0              PLY_AKG_CHANNEL3_WAIT EQU 0443EH
 130+ 4CF0              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04445H
 131+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04445H
 132+ 4CF0              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04445H
 133+ 4CF0              PLY_AKG_CHANNEL3_NOTE EQU 0444EH
 134+ 4CF0              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04453H
 135+ 4CF0              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04453H
 136+ 4CF0              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04475H
 137+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04485H
 138+ 4CF0              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ADH
 139+ 4CF0              PLY_AKG_CHANNEL3_READCELLEND EQU 044B0H
 140+ 4CF0              PLY_AKG_CURRENTSPEED EQU 044B0H
 141+ 4CF0              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B2H
 142+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B5H
 143+ 4CF0              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B5H
 144+ 4CF0              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B8H
 145+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044BBH
 146+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044BBH
 147+ 4CF0              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C7H
 148+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CEH
 149+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044D1H
 150+ 4CF0              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D7H
 151+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044DAH
 152+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044DAH
 153+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E8H
 154+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EDH
 155+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F8H
 156+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044FBH
 157+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044FBH
 158+ 4CF0              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FEH
 159+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 04501H
 160+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE EQU 04501H
 161+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 0450AH
 162+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04514H
 163+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04517H
 164+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04517H
 165+ 4CF0              PLY_AKG_CHANNEL1_PITCH EQU 04517H
 166+ 4CF0              PLY_AKG_CHANNEL1_ISPITCH EQU 0451AH
 167+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451FH
 168+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451FH
 169+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04523H
 170+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04525H
 171+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04527H
 172+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452EH
 173+ 4CF0              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452FH
 174+ 4CF0              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04532H
 175+ 4CF0              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04532H
 176+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454EH
 177+ 4CF0              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454EH
 178+ 4CF0              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 0455BH
 179+ 4CF0              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455FH
 180+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456FH
 181+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456FH
 182+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 04570H
 183+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 04571H
 184+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04573H
 185+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04573H
 186+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04573H
 187+ 4CF0              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04574H
 188+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04575H
 189+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04577H
 190+ 4CF0              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04577H
 191+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04577H
 192+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04577H
 193+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04577H
 194+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_END EQU 0457AH
 195+ 4CF0              PLY_AKG_CHANNEL1_PITCH_END EQU 0457CH
 196+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04584H
 197+ 4CF0              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04584H
 198+ 4CF0              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04587H
 199+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 0458AH
 200+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 0458AH
 201+ 4CF0              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04596H
 202+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459DH
 203+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 045A0H
 204+ 4CF0              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A6H
 205+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A9H
 206+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A9H
 207+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B7H
 208+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BCH
 209+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C7H
 210+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045CAH
 211+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045CAH
 212+ 4CF0              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CDH
 213+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045D0H
 214+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045D0H
 215+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D9H
 216+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E3H
 217+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E6H
 218+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E6H
 219+ 4CF0              PLY_AKG_CHANNEL2_PITCH EQU 045E6H
 220+ 4CF0              PLY_AKG_CHANNEL2_ISPITCH EQU 045E9H
 221+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045EEH
 222+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045EEH
 223+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F2H
 224+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F4H
 225+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F6H
 226+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FDH
 227+ 4CF0              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FEH
 228+ 4CF0              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04601H
 229+ 4CF0              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 04601H
 230+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461DH
 231+ 4CF0              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461DH
 232+ 4CF0              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 0462AH
 233+ 4CF0              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462EH
 234+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463EH
 235+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463EH
 236+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463FH
 237+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 04640H
 238+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04642H
 239+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04642H
 240+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04642H
 241+ 4CF0              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04643H
 242+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04644H
 243+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04646H
 244+ 4CF0              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04646H
 245+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04646H
 246+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04646H
 247+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04646H
 248+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_END EQU 04649H
 249+ 4CF0              PLY_AKG_CHANNEL2_PITCH_END EQU 0464BH
 250+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04653H
 251+ 4CF0              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04653H
 252+ 4CF0              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04656H
 253+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04659H
 254+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04659H
 255+ 4CF0              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04665H
 256+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466CH
 257+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466FH
 258+ 4CF0              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04675H
 259+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04678H
 260+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04678H
 261+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04686H
 262+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 0468BH
 263+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04696H
 264+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04699H
 265+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04699H
 266+ 4CF0              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469CH
 267+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469FH
 268+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469FH
 269+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A8H
 270+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B2H
 271+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B5H
 272+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B5H
 273+ 4CF0              PLY_AKG_CHANNEL3_PITCH EQU 046B5H
 274+ 4CF0              PLY_AKG_CHANNEL3_ISPITCH EQU 046B8H
 275+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BDH
 276+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BDH
 277+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046C1H
 278+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C3H
 279+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C5H
 280+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CCH
 281+ 4CF0              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CDH
 282+ 4CF0              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046D0H
 283+ 4CF0              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046D0H
 284+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046ECH
 285+ 4CF0              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046ECH
 286+ 4CF0              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F9H
 287+ 4CF0              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FDH
 288+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470DH
 289+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470DH
 290+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470EH
 291+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470FH
 292+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 04711H
 293+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 04711H
 294+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 04711H
 295+ 4CF0              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04712H
 296+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04713H
 297+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04715H
 298+ 4CF0              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04715H
 299+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04715H
 300+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04715H
 301+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04715H
 302+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_END EQU 04718H
 303+ 4CF0              PLY_AKG_CHANNEL3_PITCH_END EQU 0471AH
 304+ 4CF0              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04726H
 305+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04726H
 306+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04726H
 307+ 4CF0              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04729H
 308+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 0472BH
 309+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 04731H
 310+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04734H
 311+ 4CF0              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04734H
 312+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04737H
 313+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 04740H
 314+ 4CF0              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04748H
 315+ 4CF0              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04755H
 316+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04755H
 317+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04755H
 318+ 4CF0              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04758H
 319+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 0475AH
 320+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 04760H
 321+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04763H
 322+ 4CF0              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04763H
 323+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04766H
 324+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476FH
 325+ 4CF0              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04777H
 326+ 4CF0              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04785H
 327+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04785H
 328+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04785H
 329+ 4CF0              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04788H
 330+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 0478AH
 331+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 04790H
 332+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04793H
 333+ 4CF0              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04793H
 334+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04796H
 335+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479FH
 336+ 4CF0              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A7H
 337+ 4CF0              PLY_AKG_SENDPSGREGISTERS EQU 047B6H
 338+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BEH
 339+ 4CF0              PLY_AKG_PSGREG01_INSTR EQU 047BEH
 340+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CEH
 341+ 4CF0              PLY_AKG_PSGREG23_INSTR EQU 047CEH
 342+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DFH
 343+ 4CF0              PLY_AKG_PSGREG45_INSTR EQU 047DFH
 344+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047F0H
 345+ 4CF0              PLY_AKG_PSGREG6_8_INSTR EQU 047F0H
 346+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 04801H
 347+ 4CF0              PLY_AKG_PSGREG9_10_INSTR EQU 04801H
 348+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04812H
 349+ 4CF0              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04812H
 350+ 4CF0              PLY_AKG_PSGREG13_OLDVALUE EQU 04827H
 351+ 4CF0              PLY_AKG_RETRIG EQU 04829H
 352+ 4CF0              PLY_AKG_PSGREG13_INSTR EQU 0482BH
 353+ 4CF0              PLY_AKG_PSGREG13_END EQU 0483AH
 354+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 0483AH
 355+ 4CF0              PLY_AKG_SAVESP EQU 0483AH
 356+ 4CF0              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483EH
 357+ 4CF0              PLY_AKG_CHANNEL1_READEFFECTS EQU 04846H
 358+ 4CF0              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04853H
 359+ 4CF0              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04853H
 360+ 4CF0              PLY_AKG_CHANNEL2_READEFFECTS EQU 0485BH
 361+ 4CF0              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04868H
 362+ 4CF0              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04868H
 363+ 4CF0              PLY_AKG_CHANNEL3_READEFFECTS EQU 04870H
 364+ 4CF0              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 0487BH
 365+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS EQU 0487BH
 366+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 0488AH
 367+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 0488AH
 368+ 4CF0              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 04891H
 369+ 4CF0              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 048A1H
 370+ 4CF0              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 048A1H
 371+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A8H
 372+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A8H
 373+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048ABH
 374+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B4H
 375+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B4H
 376+ 4CF0              PLY_AKG_READINSTRUMENTCELL EQU 048BAH
 377+ 4CF0              PLY_AKG_NOSOFTNOHARD EQU 048C7H
 378+ 4CF0              PLY_AKG_NSNH_NONOISE EQU 048DCH
 379+ 4CF0              PLY_AKG_SOFT EQU 048DFH
 380+ 4CF0              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E6H
 381+ 4CF0              PLY_AKG_S_NOTSIMPLE EQU 048EEH
 382+ 4CF0              PLY_AKG_S_AFTERSIMPLETEST EQU 048F1H
 383+ 4CF0              PLY_AKG_HARDTOSOFT EQU 048FEH
 384+ 4CF0              PLY_AKG_HS_JUMPRATIO EQU 04909H
 385+ 4CF0              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04936H
 386+ 4CF0              PLY_AKG_ENDWITHOUTLOOP EQU 04938H
 387+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04938H
 388+ 4CF0              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04938H
 389+ 4CF0              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 04940H
 390+ 4CF0              PLY_AKG_SH_JUMPRATIO EQU 0494DH
 391+ 4CF0              PLY_AKG_SH_JUMPRATIOEND EQU 0496EH
 392+ 4CF0              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497DH
 393+ 4CF0              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04983H
 394+ 4CF0              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499DH
 395+ 4CF0              PLY_AKG_H_RETRIGEND EQU 049AFH
 396+ 4CF0              PLY_AKG_H_AFTERRETRIG EQU 049B0H
 397+ 4CF0              PLY_AKG_ENDWITHLOOP EQU 049C2H
 398+ 4CF0              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C9H
 399+ 4CF0              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DFH
 400+ 4CF0              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EDH
 401+ 4CF0              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FDH
 402+ 4CF0              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A0BH
 403+ 4CF0              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A1AH
 404+ 4CF0              PLY_AKG_SHOHS_RETRIGEND EQU 04A29H
 405+ 4CF0              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A2AH
 406+ 4CF0              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3CH
 407+ 4CF0              PLY_AKG_EFFECTTABLE EQU 04A4AH
 408+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A4AH
 409+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6EH
 410+ 4CF0              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6EH
 411+ 4CF0              PLY_AKG_EFFECT_RESET EQU 04A71H
 412+ 4CF0              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A73H
 413+ 4CF0              PLY_AKG_EFFECT_VOLUME EQU 04A8EH
 414+ 4CF0              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A9AH
 415+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04AA0H
 416+ 4CF0              PLY_AKG_ARPEGGIOSTABLE EQU 04AA0H
 417+ 4CF0              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC7H
 418+ 4CF0              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACEH
 419+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD4H
 420+ 4CF0              PLY_AKG_PITCHESTABLE EQU 04AD4H
 421+ 4CF0              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AFBH
 422+ 4CF0              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B02H
 423+ 4CF0              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B13H
 424+ 4CF0              PLY_AKG_EFFECT_PITCHDOWN EQU 04B1AH
 425+ 4CF0              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B2AH
 426+ 4CF0              PLY_AKG_EFFECT_PITCHUP EQU 04B3FH
 427+ 4CF0              PLY_AKG_EFFECT_PITCHSTOP EQU 04B51H
 428+ 4CF0              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B58H
 429+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B82H
 430+ 4CF0              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B82H
 431+ 4CF0              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B9BH
 432+ 4CF0              PLY_AKG_EFFECT_GLIDESPEED EQU 04B9BH
 433+ 4CF0              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BADH
 434+ 4CF0              PLY_AKG_EFFECT_LEGATO EQU 04BC3H
 435+ 4CF0              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD7H
 436+ 4CF0              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDFH
 437+ 4CF0              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE7H
 438+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEFH
 439+ 4CF0              PLY_AKG_EVENT EQU 04BEFH
 440+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BF0H
 441+ 4CF0              PLY_AKG_PERIODTABLE EQU 04BF0H
 442+ 4CF0              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BF0H
 443+ 4CF0              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CF0H
 444+ 4CF0              PLY_AKG_PERIODTABLE_END EQU 04CF0H
 445+ 4CF0              PLY_AKG_END EQU 04CF0H
 446+ 4CF0              MAIN_PLAYER_END EQU 04CF0H
 447+ 4CF0              TESTEREND EQU 04CF0H
 448+ 4CF0
# file closed: ./symbol/AKG.sym
 110  4CF0               ENDIF
 111  4CF0
 112  4CF0               INCLUDE "VBLANK.asm"
# file opened: asm\VBLANK.asm
   1+ 4CF0              ORIG.HTIMI:
   2+ 4CF0 00 00 00 00  	DB 0, 0, 0, 0, 0
   2+ 4CF4 00
   3+ 4CF5               EXPORT ORIG.HTIMI
   4+ 4CF5
   5+ 4CF5              ; *******************************************************************************************************
   6+ 4CF5              ; interrupt handler when page 0 enabled
   7+ 4CF5              ; we are here only if one of the extended basic commands have paged in page 0
   8+ 4CF5              ; which means we arrived from BASIC so page 2 is already good
   9+ 4CF5              VBLANK:
  10+ 4CF5              	EXPORT VBLANK
  11+ 4CF5
  12+ 4CF5 F5               PUSH AF
  13+ 4CF6              	; is VDP originator ?
  14+ 4CF6 DB 99        	IN	A, (099H)
  15+ 4CF8 A7           	AND	A
  16+ 4CF9 F2 27 4D     	JP P, .EXIT
  17+ 4CFC
  18+ 4CFC               IF (SOUND_CMDS + SPRITE_CMDS > 0)
  19+ 4CFC C5               PUSH BC
  20+ 4CFD D5               PUSH DE
  21+ 4CFE E5               PUSH HL
  22+ 4CFF 08               EX AF, AF'
  23+ 4D00 D9               EXX
  24+ 4D01 F5               PUSH AF
  25+ 4D02 C5               PUSH BC
  26+ 4D03 D5               PUSH DE
  27+ 4D04 E5               PUSH HL
  28+ 4D05 DD E5            PUSH IX
  29+ 4D07 FD E5            PUSH IY
  30+ 4D09
  31+ 4D09               IF (SPRITE_CMDS == 1)
  32+ 4D09 CD 61 4D     	CALL PROCESS_SPRITES_AND_ANIMATIONS
  33+ 4D0C               ENDIF
  34+ 4D0C
  35+ 4D0C               IF (SOUND_CMDS == 1)
  36+ 4D0C 3A 7C 4D     	LD A, (SOUND_ENABLED)
  37+ 4D0F B7           	OR A
  38+ 4D10 C4 33 42     	CALL NZ,PLY_AKG_PLAY
  39+ 4D13               ENDIF
  40+ 4D13
  41+ 4D13                  ; increase JIFFY
  42+ 4D13 2A 9E FC         LD HL,(JIFFY)
  43+ 4D16 23               INC HL
  44+ 4D17 22 9E FC         LD (JIFFY),HL
  45+ 4D1A
  46+ 4D1A FD E1            POP IY
  47+ 4D1C DD E1            POP IX
  48+ 4D1E E1               POP HL
  49+ 4D1F D1               POP DE
  50+ 4D20 C1               POP BC
  51+ 4D21 F1               POP AF
  52+ 4D22 08               EX AF, AF'
  53+ 4D23 D9               EXX
  54+ 4D24 E1               POP HL
  55+ 4D25 D1               POP DE
  56+ 4D26 C1               POP BC
  57+ 4D27               ENDIF
  58+ 4D27
  59+ 4D27              .EXIT:
  60+ 4D27 F1           	POP AF
  61+ 4D28 FB           	EI
  62+ 4D29 ED 4D        	RETI
  63+ 4D2B              ; *******************************************************************************************************
  64+ 4D2B
  65+ 4D2B              ; *******************************************************************************************************
  66+ 4D2B              ; H.TIMI function
  67+ 4D2B              ; we can end up here from anywhere so page in both page 0 and 2
  68+ 4D2B              MBGE_HTIMI:
  69+ 4D2B               EXPORT MBGE_HTIMI
  70+ 4D2B
  71+ 4D2B               IF (SOUND_CMDS + SPRITE_CMDS > 0)
  72+ 4D2B
  73+ 4D2B F5           	PUSH AF
  74+ 4D2C
  75+ 4D2C              	; enable page 2
  76+ 4D2C 3E 02            LD A, 2
  77+ 4D2E CD B6 55         CALL GET_PAGE_INFO
  78+ 4D31 C5               PUSH BC
  79+ 4D32 D5               PUSH DE
  80+ 4D33 3A 43 F3         LD A, (RAMAD2)
  81+ 4D36 26 80            LD H, 080H
  82+ 4D38 CD FD 55         CALL LOCAL_ENASLT
  83+ 4D3B              	; enable page 0
  84+ 4D3B AF               XOR A
  85+ 4D3C CD B6 55         CALL GET_PAGE_INFO
  86+ 4D3F C5               PUSH BC
  87+ 4D40 D5               PUSH DE
  88+ 4D41 3A 41 F3         LD A, (RAMAD0)
  89+ 4D44 26 00            LD H, 0
  90+ 4D46 CD FD 55         CALL LOCAL_ENASLT
  91+ 4D49
  92+ 4D49               IF (SPRITE_CMDS == 1)
  93+ 4D49 CD 61 4D     	CALL PROCESS_SPRITES_AND_ANIMATIONS
  94+ 4D4C               ENDIF
  95+ 4D4C
  96+ 4D4C               IF (SOUND_CMDS == 1)
  97+ 4D4C 3A 7C 4D     	LD A, (SOUND_ENABLED)
  98+ 4D4F B7           	OR A
  99+ 4D50 C4 33 42     	CALL NZ,PLY_AKG_PLAY
 100+ 4D53               ENDIF
 101+ 4D53
 102+ 4D53              	; restore page 0
 103+ 4D53 D1               POP DE
 104+ 4D54 C1               POP BC
 105+ 4D55 CD ED 55         CALL RESTORE_PAGE_INFO
 106+ 4D58              	; restore page 2
 107+ 4D58 D1               POP DE
 108+ 4D59 C1               POP BC
 109+ 4D5A CD ED 55         CALL RESTORE_PAGE_INFO
 110+ 4D5D
 111+ 4D5D F1           	POP AF
 112+ 4D5E               ENDIF
 113+ 4D5E C3 F0 4C     	JP ORIG.HTIMI
 114+ 4D61              ; *******************************************************************************************************
 115+ 4D61
 116+ 4D61              ; *******************************************************************************************************
 117+ 4D61              ; function checks if the sprite system is initialized and what screen mode we are running
 118+ 4D61              ; also checks if some VRAM modifying command is running
 119+ 4D61              ; when that checks out calls sprite updates and animation processing
 120+ 4D61              PROCESS_SPRITES_AND_ANIMATIONS:
 121+ 4D61              	; check if initialized
 122+ 4D61 3A 7D 4D     	LD A, (SPRATR_INIT_STATUS)
 123+ 4D64 B7           	OR A
 124+ 4D65 C8           	RET Z
 125+ 4D66              	; check screen mode
 126+ 4D66 3A AF FC     	LD A, (SCRMOD)
 127+ 4D69 3D           	DEC A
 128+ 4D6A 28 02        	JR Z, .L0 ; screen 1
 129+ 4D6C 3D           	DEC A
 130+ 4D6D C0           	RET NZ ; not screen 2
 131+ 4D6E              .L0:
 132+ 4D6E                  ; check if anyone else is working with VRAM
 133+ 4D6E 3A 2A 54         LD A,(VRAM_UPDATE_IN_PROGRESS)
 134+ 4D71 B7               OR A
 135+ 4D72 C0               RET NZ
 136+ 4D73
 137+ 4D73 CD 92 4D         CALL SPRATR_UPDATE
 138+ 4D76
 139+ 4D76               IF (ANIM_CMDS == 1)
 140+ 4D76 CD 3D 53         CALL PROCESS_ANIMATIONS
 141+ 4D79               ENDIF
 142+ 4D79 C9               RET
 143+ 4D7A              ; *******************************************************************************************************
# file closed: asm\VBLANK.asm
 113  4D7A
 114  4D7A               IF (SOUND_CMDS == 1)
 115  4D7A              MUSIC_INIT_STATUS:
 116  4D7A 00            DB 0
 117  4D7B              SFX_INIT_STATUS:
 118  4D7B 00            DB 0
 119  4D7C              SOUND_ENABLED:
 120  4D7C 00            DB 0
 121  4D7D               ENDIF
 122  4D7D
 123  4D7D               IF (SPRITE_CMDS == 1)
 124  4D7D               INCLUDE "SPRITES.asm"
# file opened: asm\SPRITES.asm
   1+ 4D7D              ; commands and variables related to sprites
   2+ 4D7D
   3+ 4D7D              SPRATR_INIT_STATUS:
   4+ 4D7D 00            DB 0
   5+ 4D7E              SPRATR_UPDATE_FLAG:
   6+ 4D7E 00 00         DW 0
   7+ 4D80              SPRATR_DATA:
   8+ 4D80 00 00         DW 0
   9+ 4D82              SPRFLICKER_ENABLED:
  10+ 4D82 00            DB 0
  11+ 4D83              ; to support sprite flicker
  12+ 4D83              FLICKER:
  13+ 4D83 00            DB 0
  14+ 4D84
  15+ 4D84              ; to temporarily store stack pointer
  16+ 4D84              TMPSP:
  17+ 4D84 00 00         DW 0
  18+ 4D86
  19+ 4D86              ; *******************************************************************************************************
  20+ 4D86              ; helper function gets pointer to n-th entry in sprite attributes
  21+ 4D86              ; changes HL,DE;
  22+ 4D86              GETnthSPRATTR:
  23+ 4D86 26 00            LD H,0
  24+ 4D88 6F               LD L,A
  25+ 4D89 CD B2 55         CALL HLx8
  26+ 4D8C ED 5B 80 4D      LD DE,(SPRATR_DATA)
  27+ 4D90 19               ADD HL,DE
  28+ 4D91 C9               RET
  29+ 4D92              ; *******************************************************************************************************
  30+ 4D92
  31+ 4D92              ; *******************************************************************************************************
  32+ 4D92              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
  33+ 4D92              ; struct {
  34+ 4D92              ; DW y
  35+ 4D92              ; DW x
  36+ 4D92              ; DW pattern (0-63)
  37+ 4D92              ; DW color
  38+ 4D92              ; } [32]
  39+ 4D92              ; will hide sprites whose location is outside of visible area
  40+ 4D92              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
  41+ 4D92              ; modifies AF, AF', BC, DE, HL
  42+ 4D92              SPRATR_UPDATE:
  43+ 4D92              	; check if update requested
  44+ 4D92 2A 7E 4D     	LD HL, (SPRATR_UPDATE_FLAG)
  45+ 4D95 7E           	LD A, (HL)
  46+ 4D96 B7           	OR A
  47+ 4D97 C8           	RET Z
  48+ 4D98              .L0:
  49+ 4D98 06 20        	LD B, 32 ; sprite number
  50+ 4D9A 0E 98        	LD C, #98 ; register for vdp data output
  51+ 4D9C              	; set VDP address
  52+ 4D9C 2A 28 F9     	LD HL, (ATRBAS)
  53+ 4D9F 3A 82 4D     	LD A, (SPRFLICKER_ENABLED)
  54+ 4DA2 B7           	OR A
  55+ 4DA3 28 03        	JR Z, .L3
  56+ 4DA5 3A 83 4D     	LD A, (FLICKER)
  57+ 4DA8              .L3:
  58+ 4DA8 5F           	LD E, A
  59+ 4DA9 08           	EX AF, AF'
  60+ 4DAA 7B           	LD A, E
  61+ 4DAB 87           	ADD A, A
  62+ 4DAC 87           	ADD A, A
  63+ 4DAD 16 00        	LD D, 0
  64+ 4DAF 5F           	LD E, A
  65+ 4DB0 19           	ADD HL, DE
  66+ 4DB1 CD 9F 55     	CALL SETWRT_LOCAL
  67+ 4DB4 ED 73 84 4D  	LD (TMPSP), SP
  68+ 4DB8 ED 7B 80 4D  	LD SP, (SPRATR_DATA)
  69+ 4DBC
  70+ 4DBC              .LOOP:
  71+ 4DBC E1           	POP HL
  72+ 4DBD 24           	INC H
  73+ 4DBE 28 0D        	JR Z, .L1 ; negative number above -256
  74+ 4DC0 25           	DEC H
  75+ 4DC1 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
  76+ 4DC3 7D           	LD A, L
  77+ 4DC4 FE C0        	CP 192
  78+ 4DC6 30 10        	JR NC, .OUT3
  79+ 4DC8 3D           	DEC A ; due to VDP rule that top of screen is -1
  80+ 4DC9 57           	LD D, A
  81+ 4DCA C3 F1 4D     	JP .X
  82+ 4DCD              .L1:
  83+ 4DCD 7D           	LD A, L
  84+ 4DCE C6 10        	ADD 16
  85+ 4DD0 FA D8 4D     	JP M, .OUT3 ; below -16
  86+ 4DD3 2D           	DEC L ; due to VDP rule that top of screen is -1
  87+ 4DD4 55           	LD D, L
  88+ 4DD5 C3 F1 4D     	JP .X
  89+ 4DD8              .OUT3:
  90+ 4DD8 E1           	POP HL ; skip x value
  91+ 4DD9              .OUT2:
  92+ 4DD9 E1           	POP HL ; skip pattern
  93+ 4DDA E1           	POP HL ; skip color
  94+ 4DDB 3E D1        	LD A, #D1
  95+ 4DDD ED 79        	OUT (C), A ; sprite hidden
  96+ 4DDF 00          > NOP
  96+ 4DE0 00          > NOP
  96+ 4DE1 00          > NOP
  97+ 4DE2 ED 79        	OUT (C), A ; value unimportant
  98+ 4DE4 00          > NOP
  98+ 4DE5 00          > NOP
  98+ 4DE6 00          > NOP
  99+ 4DE7 ED 79        	OUT (C), A ; value unimportant
 100+ 4DE9 00          > NOP
 100+ 4DEA 00          > NOP
 100+ 4DEB 00          > NOP
 101+ 4DEC ED 79        	OUT (C), A ; value unimportant
 102+ 4DEE C3 1C 4E     	JP .NEXT
 103+ 4DF1              .X:
 104+ 4DF1 E1           	POP HL
 105+ 4DF2 24           	INC H
 106+ 4DF3 28 08        	JR Z, .L2
 107+ 4DF5 25           	DEC H
 108+ 4DF6 20 E1        	JR NZ, .OUT2
 109+ 4DF8 1E 00        	LD E, 0 ; EC bit
 110+ 4DFA C3 06 4E     	JP .XY
 111+ 4DFD              .L2:
 112+ 4DFD 7D           	LD A, L
 113+ 4DFE C6 20        	ADD 32
 114+ 4E00 FA D9 4D     	JP M, .OUT2
 115+ 4E03 6F           	LD L, A
 116+ 4E04 1E 80        	LD E, #80
 117+ 4E06              .XY:
 118+ 4E06 ED 51        	OUT (C), D
 119+ 4E08 3A E0 F3     	LD A, (REG1SAV)
 120+ 4E0B E6 02        	AND 2
 121+ 4E0D ED 69        	OUT (C), L
 122+ 4E0F E1           	POP HL ; pattern
 123+ 4E10 7D           	LD A, L
 124+ 4E11 28 02        	JR Z, .SMALLSPRITES
 125+ 4E13 87           	ADD A, A
 126+ 4E14 87           	ADD A, A ; needs to go at 4x
 127+ 4E15              .SMALLSPRITES:
 128+ 4E15 D3 98        	OUT (#98), A
 129+ 4E17 E1           	POP HL ; color
 130+ 4E18 7D           	LD A, L
 131+ 4E19 B3           	OR E
 132+ 4E1A D3 98        	OUT (#98), A
 133+ 4E1C              .NEXT:
 134+ 4E1C 08           	EX AF, AF'
 135+ 4E1D 3C           	INC A
 136+ 4E1E E6 1F        	AND 31
 137+ 4E20 C2 34 4E     	JP NZ, .NEXT2
 138+ 4E23 08           	EX AF, AF'
 139+ 4E24 2A 28 F9     	LD HL, (ATRBAS)
 140+ 4E27              	; CALL SETWRT_LOCAL not allowed as SP modified
 141+ 4E27 7D           	LD	A, L
 142+ 4E28 D3 99        	OUT	(099H), A
 143+ 4E2A 7C           	LD	A, H
 144+ 4E2B E6 3F        	AND	03FH
 145+ 4E2D F6 40        	OR	040H
 146+ 4E2F D3 99        	OUT	(099H), A
 147+ 4E31 C3 35 4E     	JP .NEXT3
 148+ 4E34              .NEXT2:
 149+ 4E34 08           	EX AF, AF'
 150+ 4E35              .NEXT3:
 151+ 4E35 10 85        	DJNZ .LOOP
 152+ 4E37 08           	EX AF, AF'
 153+ 4E38 3C           	INC A
 154+ 4E39 32 83 4D     	LD (FLICKER), A
 155+ 4E3C
 156+ 4E3C ED 7B 84 4D  	LD SP, (TMPSP)
 157+ 4E40 2A 7E 4D     	LD HL, (SPRATR_UPDATE_FLAG)
 158+ 4E43 36 00        	LD (HL), 0 ; zero out update flag
 159+ 4E45 C9           	RET
 160+ 4E46              ; *******************************************************************************************************
 161+ 4E46
 162+ 4E46              ; *******************************************************************************************************
 163+ 4E46              ; function to handle CALL SPRENABLE basic extension
 164+ 4E46              ; initializes sprites handler
 165+ 4E46              ; _SPRENABLE ( INT sprites_attributes_data,
 166+ 4E46              ;			   INT update_variable_location,
 167+ 4E46              ;			   INT sprite_flicker_enabled )
 168+ 4E46              ; expects both locations to be in range #8000+ or throws an error
 169+ 4E46              ; since these should be BASIC variables
 170+ 4E46              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA and SPRFLICKER_ENABLED
 171+ 4E46              SPRENABLE:
 172+ 4E46              	; opening (
 173+ 4E46 CD C3 56     	CALL CHKCHAR
 174+ 4E49 28           	DB '('
 175+ 4E4A              	; get address of sprite attribute table DIM SA%(3,31)
 176+ 4E4A DD 21 2F 54  	LD IX, FRMQNT
 177+ 4E4E CD 59 01     	CALL CALBAS
 178+ 4E51 D5           	PUSH DE
 179+ 4E52              	; comma
 180+ 4E52 CD C3 56     	CALL CHKCHAR
 181+ 4E55 2C           	DB ','
 182+ 4E56              	; get address of sprite update flag location
 183+ 4E56 DD 21 2F 54  	LD IX, FRMQNT
 184+ 4E5A CD 59 01     	CALL CALBAS
 185+ 4E5D D5           	PUSH DE
 186+ 4E5E              	; comma
 187+ 4E5E CD C3 56     	CALL CHKCHAR
 188+ 4E61 2C           	DB ','
 189+ 4E62              	; get flicker enabled flag
 190+ 4E62 DD 21 2F 54  	LD IX, FRMQNT
 191+ 4E66 CD 59 01     	CALL CALBAS
 192+ 4E69 D5           	PUSH DE
 193+ 4E6A              	; ending )
 194+ 4E6A CD C3 56     	CALL CHKCHAR
 195+ 4E6D 29           	DB ')'
 196+ 4E6E
 197+ 4E6E D1           	POP DE ; get flicker flag
 198+ 4E6F 7A           	LD A, D
 199+ 4E70 B3           	OR E
 200+ 4E71 32 82 4D     	LD (SPRFLICKER_ENABLED), A
 201+ 4E74
 202+ 4E74 D1           	POP DE ; update variable location
 203+ 4E75 CB 7A        	BIT 7, D ; is address >= &h8000
 204+ 4E77 20 05        	JR NZ, .L1
 205+ 4E79 1E 05        	LD E, 5 ; illegal function call
 206+ 4E7B C3 E3 56     	JP THROW_ERROR
 207+ 4E7E              .L1:
 208+ 4E7E ED 53 7E 4D  	LD (SPRATR_UPDATE_FLAG), DE
 209+ 4E82 D1           	POP DE ; address of sprite attribute table
 210+ 4E83 CB 7A        	BIT 7, D ; is address >= &h8000
 211+ 4E85 20 05        	JR NZ, .L2
 212+ 4E87 1E 05        	LD E, 5 ; illegal function call
 213+ 4E89 C3 E3 56     	JP THROW_ERROR
 214+ 4E8C              .L2:
 215+ 4E8C ED 53 80 4D  	LD (SPRATR_DATA), DE
 216+ 4E90 3E 01        	LD A, 1
 217+ 4E92 32 7D 4D     	LD (SPRATR_INIT_STATUS), A
 218+ 4E95 C9           	RET
 219+ 4E96              ; *******************************************************************************************************
 220+ 4E96
 221+ 4E96              ; *******************************************************************************************************
 222+ 4E96              ; function to handle CALL SPRDISABLE basic extension
 223+ 4E96              ; disables sprites handling
 224+ 4E96              ; _SPRDISABLE
 225+ 4E96              ; resets variable SPRATR_INIT_STATUS
 226+ 4E96              SPRDISABLE:
 227+ 4E96 AF           	XOR A
 228+ 4E97 32 7D 4D     	LD (SPRATR_INIT_STATUS), A
 229+ 4E9A C9           	RET
 230+ 4E9B              ; *******************************************************************************************************
 231+ 4E9B
 232+ 4E9B              ; *******************************************************************************************************
 233+ 4E9B              ; function to handle CALL SPRSET basic extension
 234+ 4E9B              ; sets position, and optionally pattern and color of sprite
 235+ 4E9B              ; _SPRSET ( BYTE sprite_num , valid 0-31
 236+ 4E9B              ;			INT x,
 237+ 4E9B              ;			INT y,
 238+ 4E9B              ;			INT pattern, valid 0-63, otherwise ignored
 239+ 4E9B              ;			INT color, valid 0-15, otherwise ignored
 240+ 4E9B              SPRSET:
 241+ 4E9B 3A 7D 4D     	LD A, (SPRATR_INIT_STATUS)
 242+ 4E9E B7           	OR A
 243+ 4E9F 20 05        	JR NZ, .L1
 244+ 4EA1 1E 05        	LD E, 5 ; illegal function call
 245+ 4EA3 C3 E3 56     	JP THROW_ERROR
 246+ 4EA6              .L1:
 247+ 4EA6              	; opening (
 248+ 4EA6 CD C3 56     	CALL CHKCHAR
 249+ 4EA9 28           	DB '('
 250+ 4EAA              	; get sprite number
 251+ 4EAA DD 21 1C 52  	LD IX, GETBYT
 252+ 4EAE CD 59 01     	CALL CALBAS
 253+ 4EB1 F5           	PUSH AF
 254+ 4EB2              	; comma
 255+ 4EB2 CD C3 56     	CALL CHKCHAR
 256+ 4EB5 2C           	DB ','
 257+ 4EB6              	; get x
 258+ 4EB6 DD 21 2F 54  	LD IX, FRMQNT
 259+ 4EBA CD 59 01     	CALL CALBAS
 260+ 4EBD D5           	PUSH DE
 261+ 4EBE              	; comma
 262+ 4EBE CD C3 56     	CALL CHKCHAR
 263+ 4EC1 2C           	DB ','
 264+ 4EC2              	; get y
 265+ 4EC2 DD 21 2F 54  	LD IX, FRMQNT
 266+ 4EC6 CD 59 01     	CALL CALBAS
 267+ 4EC9 D5           	PUSH DE
 268+ 4ECA              	; comma
 269+ 4ECA CD C3 56     	CALL CHKCHAR
 270+ 4ECD 2C           	DB ','
 271+ 4ECE              	; get pattern
 272+ 4ECE DD 21 2F 54  	LD IX, FRMQNT
 273+ 4ED2 CD 59 01     	CALL CALBAS
 274+ 4ED5 D5           	PUSH DE
 275+ 4ED6              	; comma
 276+ 4ED6 CD C3 56     	CALL CHKCHAR
 277+ 4ED9 2C           	DB ','
 278+ 4EDA              	; get color
 279+ 4EDA DD 21 2F 54  	LD IX, FRMQNT
 280+ 4EDE CD 59 01     	CALL CALBAS
 281+ 4EE1 D5           	PUSH DE
 282+ 4EE2              	; ending )
 283+ 4EE2 CD C3 56     	CALL CHKCHAR
 284+ 4EE5 29           	DB ')'
 285+ 4EE6
 286+ 4EE6                  ; save position in BASIC text
 287+ 4EE6 E5           	PUSH HL
 288+ 4EE7 DD E1        	POP IX
 289+ 4EE9
 290+ 4EE9 C1           	POP BC ; color
 291+ 4EEA D1           	POP DE ; pattern
 292+ 4EEB D9           	EXX
 293+ 4EEC C1           	POP BC ; y
 294+ 4EED D1           	POP DE ; x
 295+ 4EEE F1           	POP AF ; sprite number
 296+ 4EEF FE 20        	CP 32
 297+ 4EF1 38 05        	JR C, .L2
 298+ 4EF3 1E 05        	LD E, 5 ; illegal function call
 299+ 4EF5 C3 E3 56     	JP THROW_ERROR
 300+ 4EF8              .L2:
 301+ 4EF8              	; find location in sprite attributes table
 302+ 4EF8 D5           	PUSH DE
 303+ 4EF9 CD 86 4D     	CALL GETnthSPRATTR
 304+ 4EFC D1           	POP DE
 305+ 4EFD              	; set y
 306+ 4EFD 71           	LD (HL), C
 307+ 4EFE 23           	INC HL
 308+ 4EFF 70           	LD (HL), B
 309+ 4F00 23           	INC HL
 310+ 4F01              	; set x
 311+ 4F01 73           	LD (HL), E
 312+ 4F02 23           	INC HL
 313+ 4F03 72           	LD (HL), D
 314+ 4F04 23           	INC HL
 315+ 4F05 E5           	PUSH HL
 316+ 4F06 D9           	EXX
 317+ 4F07 E1           	POP HL
 318+ 4F08              	; check if 0<=pattern<64
 319+ 4F08 7A           	LD A, D
 320+ 4F09 B7           	OR A
 321+ 4F0A 20 0B        	JR NZ, .L3
 322+ 4F0C 7B           	LD A, E
 323+ 4F0D FE 40        	CP 64
 324+ 4F0F 30 06        	JR NC, .L3
 325+ 4F11              	; set pattern
 326+ 4F11              	;ADD A, A
 327+ 4F11              	;ADD A, A
 328+ 4F11              	;ADD A, A
 329+ 4F11 77           	LD (HL), A
 330+ 4F12 23           	INC HL
 331+ 4F13 72           	LD (HL), D
 332+ 4F14 23           	INC HL
 333+ 4F15 18 02        	JR .L4
 334+ 4F17              .L3:
 335+ 4F17              	; skip pattern
 336+ 4F17 23          > INC HL
 336+ 4F18 23          > INC HL
 337+ 4F19              .L4:
 338+ 4F19              	; check if 0<=color<16
 339+ 4F19 78           	LD A, B
 340+ 4F1A B7           	OR A
 341+ 4F1B 20 08        	JR NZ, .L5
 342+ 4F1D 79           	LD A, C
 343+ 4F1E FE 10        	CP 16
 344+ 4F20 30 03        	JR NC, .L5
 345+ 4F22              	; set color
 346+ 4F22 71           	LD (HL), C
 347+ 4F23 23           	INC HL
 348+ 4F24 70           	LD (HL), B
 349+ 4F25
 350+ 4F25              .L5:
 351+ 4F25 DD E5        	PUSH IX
 352+ 4F27 E1           	POP HL
 353+ 4F28 C9           	RET
 354+ 4F29              ; *******************************************************************************************************
 355+ 4F29
 356+ 4F29              ; *******************************************************************************************************
 357+ 4F29              ; function sets sprite location based on initial coordinates and offset provided
 358+ 4F29              ; input A=sprite number in SPRATR_DATA , 0-31
 359+ 4F29              ; input DE=initial x
 360+ 4F29              ; input BC=initial y
 361+ 4F29              ; input IY=location where delta y,x are located
 362+ 4F29              ; modifies AF, HL, IX
 363+ 4F29              SPRSET_DELTA_POS:
 364+ 4F29 D5           	PUSH DE
 365+ 4F2A CD 86 4D     	CALL GETnthSPRATTR
 366+ 4F2D E5           	PUSH HL
 367+ 4F2E DD E1        	POP IX
 368+ 4F30 D1           	POP DE
 369+ 4F31              	; IX=sprite's y location
 370+ 4F31 FD 6E 00     	LD L, (IY)
 371+ 4F34 FD 66 01     	LD H, (IY+1)
 372+ 4F37 09           	ADD HL, BC
 373+ 4F38 DD 75 00     	LD (IX), L
 374+ 4F3B DD 74 01     	LD (IX+1), H
 375+ 4F3E FD 6E 02     	LD L, (IY+2)
 376+ 4F41 FD 66 03     	LD H, (IY+3)
 377+ 4F44 19           	ADD HL, DE
 378+ 4F45 DD 75 02     	LD (IX+2), L
 379+ 4F48 DD 74 03     	LD (IX+3), H
 380+ 4F4B C9           	RET
 381+ 4F4C              ; *******************************************************************************************************
 382+ 4F4C
 383+ 4F4C              ; *******************************************************************************************************
 384+ 4F4C              ; function to handle CALL SPRGRPMOV basic extension
 385+ 4F4C              ; sets position of a group of sprites described with
 386+ 4F4C              ; { int sprite_num, int delta_y, int delta_x } [count]
 387+ 4F4C              ; _SPRGRPMOV ( INT x,
 388+ 4F4C              ;			   INT y,
 389+ 4F4C              ;			   INT data_ptr,
 390+ 4F4C              ;			   BYTE count,
 391+ 4F4C              ; will put ram in page 0 also, page 1 is already there
 392+ 4F4C              SPRGRPMOV:
 393+ 4F4C 3A 7D 4D     	LD A, (SPRATR_INIT_STATUS)
 394+ 4F4F B7           	OR A
 395+ 4F50 20 05        	JR NZ, .L1
 396+ 4F52 1E 05        	LD E, 5 ; illegal function call
 397+ 4F54 C3 E3 56     	JP THROW_ERROR
 398+ 4F57              .L1:
 399+ 4F57              	; opening (
 400+ 4F57 CD C3 56     	CALL CHKCHAR
 401+ 4F5A 28           	DB '('
 402+ 4F5B              	; get x
 403+ 4F5B DD 21 2F 54  	LD IX, FRMQNT
 404+ 4F5F CD 59 01     	CALL CALBAS
 405+ 4F62 D5           	PUSH DE
 406+ 4F63              	; comma
 407+ 4F63 CD C3 56     	CALL CHKCHAR
 408+ 4F66 2C           	DB ','
 409+ 4F67              	; get y
 410+ 4F67 DD 21 2F 54  	LD IX, FRMQNT
 411+ 4F6B CD 59 01     	CALL CALBAS
 412+ 4F6E D5           	PUSH DE
 413+ 4F6F              	; comma
 414+ 4F6F CD C3 56     	CALL CHKCHAR
 415+ 4F72 2C           	DB ','
 416+ 4F73              	; get data pointer
 417+ 4F73 DD 21 2F 54  	LD IX, FRMQNT
 418+ 4F77 CD 59 01     	CALL CALBAS
 419+ 4F7A D5           	PUSH DE
 420+ 4F7B              	; comma
 421+ 4F7B CD C3 56     	CALL CHKCHAR
 422+ 4F7E 2C           	DB ','
 423+ 4F7F              	; get count
 424+ 4F7F DD 21 1C 52  	LD IX, GETBYT
 425+ 4F83 CD 59 01     	CALL CALBAS
 426+ 4F86 F5           	PUSH AF
 427+ 4F87              	; ending )
 428+ 4F87 CD C3 56     	CALL CHKCHAR
 429+ 4F8A 29           	DB ')'
 430+ 4F8B
 431+ 4F8B E5           	PUSH HL
 432+ 4F8C DD E1        	POP IX
 433+ 4F8E
 434+ 4F8E C1           	POP BC ; count
 435+ 4F8F E1           	POP HL ; data pointer
 436+ 4F90 D9           	EXX
 437+ 4F91 C1           	POP BC ; y
 438+ 4F92 D1           	POP DE ; x
 439+ 4F93 D9           	EXX
 440+ 4F94
 441+ 4F94 DD E5        	PUSH IX ; save position in BASIC buffer
 442+ 4F96
 443+ 4F96 C5           	PUSH BC
 444+ 4F97 E5           	PUSH HL
 445+ 4F98 AF               XOR A
 446+ 4F99 CD B6 55         CALL GET_PAGE_INFO
 447+ 4F9C D9           	EXX
 448+ 4F9D E1           	POP HL
 449+ 4F9E F1           	POP AF
 450+ 4F9F D9           	EXX
 451+ 4FA0 C5               PUSH BC
 452+ 4FA1 D5               PUSH DE
 453+ 4FA2 D9           	EXX
 454+ 4FA3 F5           	PUSH AF
 455+ 4FA4 E5           	PUSH HL
 456+ 4FA5 D9           	EXX
 457+ 4FA6 3A 41 F3         LD A, (RAMAD0)
 458+ 4FA9 26 00            LD H, 0
 459+ 4FAB CD FD 55         CALL LOCAL_ENASLT
 460+ 4FAE FB           	EI
 461+ 4FAF E1           	POP HL
 462+ 4FB0 C1           	POP BC
 463+ 4FB1 CD BB 4F     	CALL .UPDATE_LOC
 464+ 4FB4 D1               POP DE
 465+ 4FB5 C1               POP BC
 466+ 4FB6 CD ED 55         CALL RESTORE_PAGE_INFO
 467+ 4FB9 E1           	POP HL
 468+ 4FBA C9           	RET
 469+ 4FBB
 470+ 4FBB              .UPDATE_LOC:
 471+ 4FBB              .L4:
 472+ 4FBB 7E           	LD A, (HL)
 473+ 4FBC 23           	INC HL
 474+ 4FBD 23           	INC HL
 475+ 4FBE E5           	PUSH HL
 476+ 4FBF FD E1        	POP IY
 477+ 4FC1 D9           	EXX
 478+ 4FC2 CD 29 4F     	CALL SPRSET_DELTA_POS
 479+ 4FC5 D9           	EXX
 480+ 4FC6 23          > INC HL
 480+ 4FC7 23          > INC HL
 480+ 4FC8 23          > INC HL
 480+ 4FC9 23          > INC HL
 481+ 4FCA 10 EF        	DJNZ .L4
 482+ 4FCC C9           	RET
 483+ 4FCD              ; *******************************************************************************************************
 484+ 4FCD
# file closed: asm\SPRITES.asm
 125  4FCD               ENDIF
 126  4FCD
 127  4FCD               IF (ANIM_CMDS == 1)
 128  4FCD               INCLUDE "ANIMATION.asm"
# file opened: asm\ANIMATION.asm
   1+ 4FCD              ; sprite animation routines
   2+ 4FCD
   3+ 4FCD              ; number of animation items and pointer
   4+ 4FCD              ANIMITEMNUM:
   5+ 4FCD 00            DB 0
   6+ 4FCE              ANIMITEMPTR:
   7+ 4FCE 59 5F         DW EXT_END
   8+ 4FD0              ; number of animation definitions and pointer
   9+ 4FD0              ANIMDEFNUM:
  10+ 4FD0 00            DB 0
  11+ 4FD1              ANIMDEFPTR:
  12+ 4FD1 59 5F         DW EXT_END
  13+ 4FD3              ; number of links between sprite and animation definitions
  14+ 4FD3              ANIMSPRNUM:
  15+ 4FD3 00            DB 0
  16+ 4FD4              ANIMSPRPTR:
  17+ 4FD4 59 5F         DW EXT_END
  18+ 4FD6
  19+ 4FD6              ; ANIMATION ITEM
  20+ 4FD6              ; byte type = [0 - pattern and color change
  21+ 4FD6              ;              1 - pattern definition change ]
  22+ 4FD6              ; word ticks - number of ticks to hold this state
  23+ 4FD6              ; for type = 0
  24+ 4FD6              ;   byte pattern;
  25+ 4FD6              ;   byte color;
  26+ 4FD6              ; for type = 1
  27+ 4FD6              ;   work data_pointer;
  28+ 4FD6              ; total size = 5b
  29+ 4FD6
  30+ 4FD6              ; ANIMATION DEFINITION
  31+ 4FD6              ; byte number of items 1-15
  32+ 4FD6              ; byte[15] anim_item;
  33+ 4FD6              ; total size = 16b
  34+ 4FD6
  35+ 4FD6              ; SPRITE ANIMATION
  36+ 4FD6              ; +00 byte sprite number;
  37+ 4FD6              ; +01 word time;
  38+ 4FD6              ; +03 byte current item;
  39+ 4FD6              ; +04 byte animation definition;
  40+ 4FD6              ; +05 byte cyclic;
  41+ 4FD6              ; +06 byte active;
  42+ 4FD6              ; +07 byte reserved
  43+ 4FD6              ; total size = 8b
  44+ 4FD6
  45+ 4FD6              ; *******************************************************************************************************
  46+ 4FD6              ; helper function HL=A*5
  47+ 4FD6              ; changes HL,DE;
  48+ 4FD6              Ax5:
  49+ 4FD6 26 00            LD H,0
  50+ 4FD8 6F               LD L,A
  51+ 4FD9 54               LD D,H
  52+ 4FDA 5D               LD E,L
  53+ 4FDB 29               ADD HL,HL
  54+ 4FDC 29               ADD HL,HL
  55+ 4FDD 19               ADD HL,DE
  56+ 4FDE C9               RET
  57+ 4FDF              ; *******************************************************************************************************
  58+ 4FDF
  59+ 4FDF              ; *******************************************************************************************************
  60+ 4FDF              ; helper function gets pointer to n-th animation item
  61+ 4FDF              ; changes HL,DE;
  62+ 4FDF              GETnthANIMITEM:
  63+ 4FDF CD D6 4F         CALL Ax5
  64+ 4FE2 ED 5B CE 4F      LD DE,(ANIMITEMPTR)
  65+ 4FE6 19               ADD HL,DE
  66+ 4FE7 C9               RET
  67+ 4FE8              ; *******************************************************************************************************
  68+ 4FE8
  69+ 4FE8              ; *******************************************************************************************************
  70+ 4FE8              ; helper function gets pointer to n-th entry in animation definition
  71+ 4FE8              ; changes HL,DE;
  72+ 4FE8              GETnthANIMDEF:
  73+ 4FE8 26 00            LD H,0
  74+ 4FEA 6F               LD L,A
  75+ 4FEB CD B2 55         CALL HLx8
  76+ 4FEE ED 5B D1 4F      LD DE,(ANIMDEFPTR)
  77+ 4FF2 19               ADD HL,DE
  78+ 4FF3 C9               RET
  79+ 4FF4              ; *******************************************************************************************************
  80+ 4FF4
  81+ 4FF4              ; *******************************************************************************************************
  82+ 4FF4              ; helper function gets pointer to n-th entry in sprite animation
  83+ 4FF4              ; changes HL,DE;
  84+ 4FF4              GETnthSPRANIM:
  85+ 4FF4 26 00            LD H,0
  86+ 4FF6 6F               LD L,A
  87+ 4FF7 CD B1 55         CALL HLx16
  88+ 4FFA ED 5B D4 4F      LD DE,(ANIMSPRPTR)
  89+ 4FFE 19               ADD HL,DE
  90+ 4FFF C9               RET
  91+ 5000              ; *******************************************************************************************************
  92+ 5000
  93+ 5000              ; *******************************************************************************************************
  94+ 5000              ; function to handle CALL MAXANIMITEMS basic extension
  95+ 5000              ; MAXANIMITEMS (BYTE number)
  96+ 5000              ; sets new number and moves memory buffers as needed
  97+ 5000              MAXANIMITEMS:
  98+ 5000              	; opening (
  99+ 5000 CD C3 56     	CALL CHKCHAR
 100+ 5003 28           	DB '('
 101+ 5004              	; get value
 102+ 5004 DD 21 1C 52  	LD IX, GETBYT
 103+ 5008 CD 59 01     	CALL CALBAS
 104+ 500B F5               PUSH AF
 105+ 500C              	; ending )
 106+ 500C CD C3 56     	CALL CHKCHAR
 107+ 500F 29           	DB ')'
 108+ 5010 F1               POP AF
 109+ 5011
 110+ 5011              	; save position
 111+ 5011 E5           	PUSH HL
 112+ 5012              .ENTRY:
 113+ 5012 47               LD B,A
 114+ 5013 3A CD 4F         LD A,(ANIMITEMNUM)
 115+ 5016 90               SUB B
 116+ 5017 28 1F            JR Z, .EXIT; same value as before
 117+ 5019 FD 21 D1 4F      LD IY,ANIMDEFPTR
 118+ 501D FA 3B 50         JP M, .INCREASE
 119+ 5020                  ; new value is lower than previous one
 120+ 5020 CD 53 50         CALL .SIZEDIFF
 121+ 5023 CD 6E 50         CALL .DECREASE_COMMON
 122+ 5026 2A D4 4F         LD HL,(ANIMSPRPTR)
 123+ 5029 AF               XOR A
 124+ 502A ED 42            SBC HL,BC
 125+ 502C 22 D4 4F         LD (ANIMSPRPTR),HL
 126+ 502F              .E1:
 127+ 502F 2A 10 40         LD HL,(FREEMEMPTR)
 128+ 5032 AF               XOR A
 129+ 5033 ED 42            SBC HL,BC
 130+ 5035 22 10 40         LD (FREEMEMPTR),HL
 131+ 5038              .EXIT:
 132+ 5038 FB               EI
 133+ 5039 E1           	POP HL
 134+ 503A C9           	RET
 135+ 503B              .INCREASE:
 136+ 503B ED 44            NEG
 137+ 503D CD 53 50         CALL .SIZEDIFF
 138+ 5040 CD 9A 50         CALL .INCREASE_COMMON
 139+ 5043 2A D4 4F         LD HL,(ANIMSPRPTR)
 140+ 5046 09               ADD HL,BC
 141+ 5047 22 D4 4F         LD (ANIMSPRPTR),HL
 142+ 504A              .E2:
 143+ 504A 2A 10 40         LD HL,(FREEMEMPTR)
 144+ 504D 09               ADD HL,BC
 145+ 504E 22 10 40         LD (FREEMEMPTR),HL
 146+ 5051 18 E5            JR .EXIT
 147+ 5053              .SIZEDIFF:
 148+ 5053 CD D6 4F         CALL Ax5
 149+ 5056 78               LD A,B
 150+ 5057 32 CD 4F         LD (ANIMITEMNUM),A
 151+ 505A 44               LD B,H
 152+ 505B 4D               LD C,L
 153+ 505C C9               RET ; BC=size difference in bytes
 154+ 505D              .SIZETOMOVE:
 155+ 505D D5               PUSH DE
 156+ 505E 2A 10 40         LD HL,(FREEMEMPTR)
 157+ 5061 FD 5E 00         LD E,(IY)
 158+ 5064 FD 56 01         LD D,(IY+1)
 159+ 5067 AF               XOR A
 160+ 5068 ED 52            SBC HL,DE
 161+ 506A 44               LD B,H
 162+ 506B 4D               LD C,L
 163+ 506C D1               POP DE
 164+ 506D C9               RET
 165+ 506E              .DECREASE_COMMON:
 166+ 506E FD 6E 00         LD L,(IY)
 167+ 5071 FD 66 01         LD H,(IY+1)
 168+ 5074 AF               XOR A
 169+ 5075 ED 42            SBC HL,BC
 170+ 5077 EB               EX DE,HL
 171+ 5078 C5               PUSH BC
 172+ 5079 CD 5D 50         CALL .SIZETOMOVE
 173+ 507C F3               DI
 174+ 507D 78               LD A,B
 175+ 507E B1               OR C
 176+ 507F 28 08            JR Z,.L1
 177+ 5081 FD 6E 00         LD L,(IY)
 178+ 5084 FD 66 01         LD H,(IY+1)
 179+ 5087 ED B0            LDIR
 180+ 5089              .L1:
 181+ 5089 C1               POP BC
 182+ 508A FD 6E 00         LD L,(IY)
 183+ 508D FD 66 01         LD H,(IY+1)
 184+ 5090 AF               XOR A
 185+ 5091 ED 42            SBC HL,BC
 186+ 5093 FD 75 00         LD (IY),L
 187+ 5096 FD 74 01         LD (IY+1),H
 188+ 5099 C9               RET
 189+ 509A              .INCREASE_COMMON:
 190+ 509A 2A 10 40         LD HL,(FREEMEMPTR)
 191+ 509D 2B               DEC HL
 192+ 509E AF               XOR A
 193+ 509F ED 42            SBC HL,BC
 194+ 50A1 EB               EX DE,HL
 195+ 50A2 C5               PUSH BC
 196+ 50A3 CD 5D 50         CALL .SIZETOMOVE
 197+ 50A6 F3               DI
 198+ 50A7 78               LD A,B
 199+ 50A8 B1               OR C
 200+ 50A9 28 06            JR Z,.L2
 201+ 50AB 2A 10 40         LD HL,(FREEMEMPTR)
 202+ 50AE 2B               DEC HL
 203+ 50AF ED B8            LDDR
 204+ 50B1              .L2:
 205+ 50B1 C1               POP BC
 206+ 50B2 FD 6E 00         LD L,(IY)
 207+ 50B5 FD 66 01         LD H,(IY+1)
 208+ 50B8 09               ADD HL,BC
 209+ 50B9 FD 75 00         LD (IY),L
 210+ 50BC FD 74 01         LD (IY+1),H
 211+ 50BF C9               RET
 212+ 50C0              ; *******************************************************************************************************
 213+ 50C0
 214+ 50C0              ; *******************************************************************************************************
 215+ 50C0              ; function to handle CALL ANIMITEMPAT basic extension
 216+ 50C0              ; ANIMITEMPAT ( BYTE id,
 217+ 50C0              ;               INT ticks,
 218+ 50C0              ;               BYTE pattern,
 219+ 50C0              ;               BYTE color )
 220+ 50C0              ; fills animation item data, returns an error if out of bounds
 221+ 50C0              ANIMITEMPAT:
 222+ 50C0                  ; opening (
 223+ 50C0 CD C3 56     	CALL CHKCHAR
 224+ 50C3 28           	DB '('
 225+ 50C4              	; get id
 226+ 50C4 DD 21 1C 52  	LD IX, GETBYT
 227+ 50C8 CD 59 01     	CALL CALBAS
 228+ 50CB F5               PUSH AF
 229+ 50CC                  ; check if out of bounds
 230+ 50CC 3C               INC A
 231+ 50CD 4F               LD C,A
 232+ 50CE 3A CD 4F         LD A,(ANIMITEMNUM)
 233+ 50D1 B9               CP C
 234+ 50D2 DA D9 56         JP C,SUBSCRIPT_OUT_OF_RANGE
 235+ 50D5              	; comma
 236+ 50D5 CD C3 56     	CALL CHKCHAR
 237+ 50D8 2C           	DB ','
 238+ 50D9              	; get ticks
 239+ 50D9 DD 21 2F 54  	LD IX, FRMQNT
 240+ 50DD CD 59 01     	CALL CALBAS
 241+ 50E0 D5           	PUSH DE
 242+ 50E1              	; comma
 243+ 50E1 CD C3 56     	CALL CHKCHAR
 244+ 50E4 2C           	DB ','
 245+ 50E5              	; get pattern
 246+ 50E5 DD 21 1C 52  	LD IX, GETBYT
 247+ 50E9 CD 59 01     	CALL CALBAS
 248+ 50EC F5               PUSH AF
 249+ 50ED              	; comma
 250+ 50ED CD C3 56     	CALL CHKCHAR
 251+ 50F0 2C           	DB ','
 252+ 50F1              	; get color
 253+ 50F1 DD 21 1C 52  	LD IX, GETBYT
 254+ 50F5 CD 59 01     	CALL CALBAS
 255+ 50F8 F5               PUSH AF
 256+ 50F9              	; ending )
 257+ 50F9 CD C3 56     	CALL CHKCHAR
 258+ 50FC 29           	DB ')'
 259+ 50FD              .ENTRY:
 260+ 50FD E5               PUSH HL
 261+ 50FE DD E1            POP IX
 262+ 5100 D9               EXX
 263+ 5101 C1               POP BC ; color
 264+ 5102 D1               POP DE ; pattern
 265+ 5103 E1               POP HL ; ticks
 266+ 5104 D9               EXX
 267+ 5105 F1               POP AF
 268+ 5106 CD DF 4F         CALL GETnthANIMITEM
 269+ 5109 E5               PUSH HL
 270+ 510A FD E1            POP IY
 271+ 510C D9               EXX
 272+ 510D FD 36 00 00      LD (IY),0 ; type=0
 273+ 5111 FD 75 01         LD (IY+1),L
 274+ 5114 FD 74 02         LD (IY+2),H
 275+ 5117 FD 72 03         LD (IY+3),D
 276+ 511A FD 70 04         LD (IY+4),B
 277+ 511D
 278+ 511D DD E5            PUSH IX
 279+ 511F E1               POP HL
 280+ 5120 C9               RET
 281+ 5121              ; *******************************************************************************************************
 282+ 5121
 283+ 5121              ; *******************************************************************************************************
 284+ 5121              ; function to handle CALL ANIMITEMPTR basic extension
 285+ 5121              ; ANIMITEMPTR ( BYTE id,
 286+ 5121              ;               INT ticks,
 287+ 5121              ;               INT pointer,
 288+ 5121              ; fills animation item data, returns an error if out of bounds
 289+ 5121              ANIMITEMPTR_CMD:
 290+ 5121                  ; opening (
 291+ 5121 CD C3 56     	CALL CHKCHAR
 292+ 5124 28           	DB '('
 293+ 5125              	; get id
 294+ 5125 DD 21 1C 52  	LD IX, GETBYT
 295+ 5129 CD 59 01     	CALL CALBAS
 296+ 512C F5               PUSH AF
 297+ 512D                  ; check if out of bounds
 298+ 512D 3C               INC A
 299+ 512E 4F               LD C,A
 300+ 512F 3A CD 4F         LD A,(ANIMITEMNUM)
 301+ 5132 B9               CP C
 302+ 5133 DA D9 56         JP C,SUBSCRIPT_OUT_OF_RANGE
 303+ 5136              	; comma
 304+ 5136 CD C3 56     	CALL CHKCHAR
 305+ 5139 2C           	DB ','
 306+ 513A              	; get ticks
 307+ 513A DD 21 2F 54  	LD IX, FRMQNT
 308+ 513E CD 59 01     	CALL CALBAS
 309+ 5141 D5           	PUSH DE
 310+ 5142              	; comma
 311+ 5142 CD C3 56     	CALL CHKCHAR
 312+ 5145 2C           	DB ','
 313+ 5146              	; get pointer
 314+ 5146 DD 21 2F 54  	LD IX, FRMQNT
 315+ 514A CD 59 01     	CALL CALBAS
 316+ 514D D5           	PUSH DE
 317+ 514E              	; ending )
 318+ 514E CD C3 56     	CALL CHKCHAR
 319+ 5151 29           	DB ')'
 320+ 5152              .ENTRY:
 321+ 5152 E5               PUSH HL
 322+ 5153 DD E1            POP IX
 323+ 5155 D9               EXX
 324+ 5156 D1               POP DE ; pointer
 325+ 5157 E1               POP HL ; ticks
 326+ 5158 D9               EXX
 327+ 5159 F1               POP AF
 328+ 515A CD DF 4F         CALL GETnthANIMITEM
 329+ 515D E5               PUSH HL
 330+ 515E FD E1            POP IY
 331+ 5160 D9               EXX
 332+ 5161 FD 36 00 01      LD (IY),1 ; type=1
 333+ 5165 FD 75 01         LD (IY+1),L
 334+ 5168 FD 74 02         LD (IY+2),H
 335+ 516B FD 73 03         LD (IY+3),E
 336+ 516E FD 72 04         LD (IY+4),D
 337+ 5171
 338+ 5171 DD E5            PUSH IX
 339+ 5173 E1               POP HL
 340+ 5174 C9               RET
 341+ 5175              ; *******************************************************************************************************
 342+ 5175
 343+ 5175              ; *******************************************************************************************************
 344+ 5175              ; function to handle CALL MAXANIMDEFS basic extension
 345+ 5175              ; MAXANIMDEFS (BYTE number)
 346+ 5175              ; sets new number and moves memory buffers as needed
 347+ 5175              MAXANIMDEFS:
 348+ 5175              	; opening (
 349+ 5175 CD C3 56     	CALL CHKCHAR
 350+ 5178 28           	DB '('
 351+ 5179              	; get value
 352+ 5179 DD 21 1C 52  	LD IX, GETBYT
 353+ 517D CD 59 01     	CALL CALBAS
 354+ 5180 F5               PUSH AF
 355+ 5181              	; ending )
 356+ 5181 CD C3 56     	CALL CHKCHAR
 357+ 5184 29           	DB ')'
 358+ 5185 F1               POP AF
 359+ 5186
 360+ 5186              	; save position
 361+ 5186 E5           	PUSH HL
 362+ 5187              .ENTRY:
 363+ 5187 47               LD B,A
 364+ 5188 3A D0 4F         LD A,(ANIMDEFNUM)
 365+ 518B 90               SUB B
 366+ 518C CA 38 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 367+ 518F FD 21 D4 4F      LD IY,ANIMSPRPTR
 368+ 5193 FA 9F 51         JP M, .INCREASE
 369+ 5196                  ; new value is lower than previous one
 370+ 5196 CD AA 51         CALL .SIZEDIFF
 371+ 5199 CD 6E 50         CALL MAXANIMITEMS.DECREASE_COMMON
 372+ 519C C3 2F 50         JP MAXANIMITEMS.E1
 373+ 519F              .INCREASE:
 374+ 519F ED 44            NEG
 375+ 51A1 CD AA 51         CALL .SIZEDIFF
 376+ 51A4 CD 9A 50         CALL MAXANIMITEMS.INCREASE_COMMON
 377+ 51A7 C3 4A 50         JP MAXANIMITEMS.E2
 378+ 51AA              .SIZEDIFF:
 379+ 51AA 26 00            LD H,0
 380+ 51AC 6F               LD L,A
 381+ 51AD CD B1 55         CALL HLx16
 382+ 51B0 78               LD A,B
 383+ 51B1 32 D0 4F         LD (ANIMDEFNUM),A
 384+ 51B4 44               LD B,H
 385+ 51B5 4D               LD C,L
 386+ 51B6 C9               RET ; BC=size difference in bytes
 387+ 51B7              ; *******************************************************************************************************
 388+ 51B7
 389+ 51B7              ; *******************************************************************************************************
 390+ 51B7              ; function to handle CALL ANIMDEF basic extension
 391+ 51B7              ; ANIMITEMPAT ( BYTE id,
 392+ 51B7              ;               BYTE size,
 393+ 51B7              ;               INT[] list )
 394+ 51B7              ; fills animation definition data, returns an error if out of bounds, or invalid type
 395+ 51B7              ANIMDEF:
 396+ 51B7                  ; opening (
 397+ 51B7 CD C3 56     	CALL CHKCHAR
 398+ 51BA 28           	DB '('
 399+ 51BB              	; get id
 400+ 51BB DD 21 1C 52  	LD IX, GETBYT
 401+ 51BF CD 59 01     	CALL CALBAS
 402+ 51C2 F5               PUSH AF
 403+ 51C3                  ; check if out of bounds
 404+ 51C3 3C               INC A
 405+ 51C4 4F               LD C,A
 406+ 51C5 3A D0 4F         LD A,(ANIMDEFNUM)
 407+ 51C8 B9               CP C
 408+ 51C9 DA D9 56         JP C,SUBSCRIPT_OUT_OF_RANGE
 409+ 51CC              	; comma
 410+ 51CC CD C3 56     	CALL CHKCHAR
 411+ 51CF 2C           	DB ','
 412+ 51D0              	; get size
 413+ 51D0 DD 21 1C 52  	LD IX, GETBYT
 414+ 51D4 CD 59 01     	CALL CALBAS
 415+ 51D7 FE 10            CP 16
 416+ 51D9 D2 DD 56         JP NC, OVERFLOW
 417+ 51DC B7               OR A
 418+ 51DD CA DD 56         JP Z, OVERFLOW
 419+ 51E0 F5           	PUSH AF
 420+ 51E1              	; comma
 421+ 51E1 CD C3 56     	CALL CHKCHAR
 422+ 51E4 2C           	DB ','
 423+ 51E5              	; get pointer to a list of animation items in integer array format
 424+ 51E5                  ; get array pointer
 425+ 51E5 D1               POP DE
 426+ 51E6 D5               PUSH DE
 427+ 51E7 15               DEC D
 428+ 51E8 1E 00            LD E,0
 429+ 51EA 3E 02            LD A,2
 430+ 51EC 06 01            LD B,1
 431+ 51EE CD EA 56         CALL GET_BASIC_ARRAY_DATA_POINTER
 432+ 51F1 C5               PUSH BC
 433+ 51F2              	; ending )
 434+ 51F2 CD C3 56     	CALL CHKCHAR
 435+ 51F5 29           	DB ')'
 436+ 51F6              .ENTRY:
 437+ 51F6 E5               PUSH HL
 438+ 51F7 DD E1            POP IX
 439+ 51F9 D1               POP DE ; pointer to INT array
 440+ 51FA C1               POP BC ; B=item number
 441+ 51FB F1               POP AF ; id
 442+ 51FC D5               PUSH DE
 443+ 51FD CD E8 4F         CALL GETnthANIMDEF
 444+ 5200 D1               POP DE
 445+ 5201 70               LD (HL),B
 446+ 5202              .L1:
 447+ 5202 23               INC HL
 448+ 5203 1A               LD A,(DE)
 449+ 5204 13          > INC DE
 449+ 5205 13          > INC DE
 450+ 5206 77               LD (HL),A
 451+ 5207 10 F9            DJNZ .L1
 452+ 5209 DD E5            PUSH IX
 453+ 520B E1               POP HL
 454+ 520C C9               RET
 455+ 520D              ; *******************************************************************************************************
 456+ 520D
 457+ 520D              ; *******************************************************************************************************
 458+ 520D              ; function to handle CALL MAXANIMSPRS basic extension
 459+ 520D              ; MAXANIMSPRS (BYTE number)
 460+ 520D              ; sets new number and moves memory buffers as needed
 461+ 520D              MAXANIMSPRS:
 462+ 520D              	; opening (
 463+ 520D CD C3 56     	CALL CHKCHAR
 464+ 5210 28           	DB '('
 465+ 5211              	; get value
 466+ 5211 DD 21 1C 52  	LD IX, GETBYT
 467+ 5215 CD 59 01     	CALL CALBAS
 468+ 5218 F5               PUSH AF
 469+ 5219              	; ending )
 470+ 5219 CD C3 56     	CALL CHKCHAR
 471+ 521C 29           	DB ')'
 472+ 521D F1               POP AF
 473+ 521E
 474+ 521E              	; save position
 475+ 521E E5           	PUSH HL
 476+ 521F              .ENTRY:
 477+ 521F 47               LD B,A
 478+ 5220 3A D3 4F         LD A,(ANIMSPRNUM)
 479+ 5223 90               SUB B
 480+ 5224 CA 38 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 481+ 5227 FD 21 10 40      LD IY,FREEMEMPTR
 482+ 522B FA 37 52         JP M, .INCREASE
 483+ 522E                  ; new value is lower than previous one
 484+ 522E CD 56 52         CALL .SIZEDIFF
 485+ 5231 CD 6E 50         CALL MAXANIMITEMS.DECREASE_COMMON
 486+ 5234 C3 38 50         JP MAXANIMITEMS.EXIT
 487+ 5237              .INCREASE:
 488+ 5237 ED 44            NEG
 489+ 5239 F5               PUSH AF; save difference for later to set active flag to 0 of new entires
 490+ 523A CD 56 52         CALL .SIZEDIFF
 491+ 523D CD 9A 50         CALL MAXANIMITEMS.INCREASE_COMMON
 492+ 5240 AF               XOR A
 493+ 5241 ED 42            SBC HL,BC ; location of new stuff
 494+ 5243 F1               POP AF
 495+ 5244 47               LD B,A
 496+ 5245 11 08 00         LD DE,8
 497+ 5248 E5               PUSH HL
 498+ 5249 DD E1            POP IX
 499+ 524B              .L1:
 500+ 524B DD 36 06 00      LD (IX+6),0
 501+ 524F DD 19            ADD IX,DE
 502+ 5251 10 F8            DJNZ .L1
 503+ 5253 C3 38 50         JP MAXANIMITEMS.EXIT
 504+ 5256              .SIZEDIFF:
 505+ 5256 26 00            LD H,0
 506+ 5258 6F               LD L,A
 507+ 5259 CD B2 55         CALL HLx8
 508+ 525C 78               LD A,B
 509+ 525D 32 D3 4F         LD (ANIMSPRNUM),A
 510+ 5260 44               LD B,H
 511+ 5261 4D               LD C,L
 512+ 5262 C9               RET ; BC=size difference in bytes
 513+ 5263              ; *******************************************************************************************************
 514+ 5263
 515+ 5263              ; *******************************************************************************************************
 516+ 5263              ; function to handle CALL ANIMSPRITE basic extension
 517+ 5263              ; ANIMSPRITE ( BYTE id,
 518+ 5263              ;              BYTE sprite_number,
 519+ 5263              ;              BYTE animation_definition_id,
 520+ 5263              ;              BYTE cyclic_flag )
 521+ 5263              ; fills sprite animation data, returns an error if out of bounds, or invalid type
 522+ 5263              ANIMSPRITE:
 523+ 5263                  ; opening (
 524+ 5263 CD C3 56     	CALL CHKCHAR
 525+ 5266 28           	DB '('
 526+ 5267              	; get sprite animation id
 527+ 5267 DD 21 1C 52  	LD IX, GETBYT
 528+ 526B CD 59 01     	CALL CALBAS
 529+ 526E F5               PUSH AF
 530+ 526F 3C               INC A
 531+ 5270 4F               LD C,A
 532+ 5271 3A D3 4F         LD A,(ANIMSPRNUM)
 533+ 5274 B9               CP C
 534+ 5275 DA D9 56         JP C,SUBSCRIPT_OUT_OF_RANGE
 535+ 5278              	; comma
 536+ 5278 CD C3 56     	CALL CHKCHAR
 537+ 527B 2C           	DB ','
 538+ 527C              	; get sprite number
 539+ 527C DD 21 1C 52  	LD IX, GETBYT
 540+ 5280 CD 59 01     	CALL CALBAS
 541+ 5283 F5               PUSH AF
 542+ 5284                  ; check if out of bounds
 543+ 5284 FE 20            CP 32
 544+ 5286 D2 D9 56         JP NC, SUBSCRIPT_OUT_OF_RANGE
 545+ 5289              	; comma
 546+ 5289 CD C3 56     	CALL CHKCHAR
 547+ 528C 2C           	DB ','
 548+ 528D              	; get animation definition id
 549+ 528D DD 21 1C 52  	LD IX, GETBYT
 550+ 5291 CD 59 01     	CALL CALBAS
 551+ 5294 F5               PUSH AF
 552+ 5295 3C               INC A
 553+ 5296 4F               LD C,A
 554+ 5297 3A D0 4F         LD A,(ANIMDEFNUM)
 555+ 529A B9               CP C
 556+ 529B DA D9 56         JP C,SUBSCRIPT_OUT_OF_RANGE
 557+ 529E              	; comma
 558+ 529E CD C3 56     	CALL CHKCHAR
 559+ 52A1 2C           	DB ','
 560+ 52A2              	; get cyclic flag
 561+ 52A2 DD 21 1C 52  	LD IX, GETBYT
 562+ 52A6 CD 59 01         CALL CALBAS
 563+ 52A9 F5           	PUSH AF
 564+ 52AA              	; ending )
 565+ 52AA CD C3 56     	CALL CHKCHAR
 566+ 52AD 29           	DB ')'
 567+ 52AE              .ENTRY:
 568+ 52AE E5               PUSH HL
 569+ 52AF DD E1            POP IX
 570+ 52B1 D9               EXX
 571+ 52B2 D1               POP DE ; cyclic
 572+ 52B3 C1               POP BC ; animation definition id
 573+ 52B4 E1               POP HL ; sprite number
 574+ 52B5 D9               EXX
 575+ 52B6 F1               POP AF ; sprite animation id
 576+ 52B7 CD F4 4F         CALL GETnthSPRANIM
 577+ 52BA E5               PUSH HL
 578+ 52BB FD E1            POP IY
 579+ 52BD D9               EXX
 580+ 52BE FD 74 00         LD (IY),H
 581+ 52C1 FD 70 04         LD (IY+4),B
 582+ 52C4 FD 72 05         LD (IY+5),D
 583+ 52C7                  ;LD (IY+6),0
 584+ 52C7 DD E5            PUSH IX
 585+ 52C9 E1               POP HL
 586+ 52CA C9               RET
 587+ 52CB              ; *******************************************************************************************************
 588+ 52CB
 589+ 52CB              ; *******************************************************************************************************
 590+ 52CB              ; function to handle CALL ANIMSTART basic extension
 591+ 52CB              ; two forms
 592+ 52CB              ; ANIMSTART ( BYTE id )
 593+ 52CB              ; or
 594+ 52CB              ; ANIMSTART ( BYTE item_number,
 595+ 52CB              ;             INT[] sprite_animations )
 596+ 52CB              ; sets active flag to 1
 597+ 52CB              ANIMSTART:
 598+ 52CB 3E 01            LD A,1
 599+ 52CD 18 01            JR ANIMSTARTSTOP_COMMON
 600+ 52CF              ; *******************************************************************************************************
 601+ 52CF              ; *******************************************************************************************************
 602+ 52CF              ; function to handle CALL ANIMSTOP basic extension
 603+ 52CF              ; two forms
 604+ 52CF              ; ANIMSTOP ( BYTE id )
 605+ 52CF              ; or
 606+ 52CF              ; ANIMSTOP ( BYTE item_number,
 607+ 52CF              ;            INT[] sprite_animations )
 608+ 52CF              ; sets active flag to 1
 609+ 52CF              ANIMSTOP:
 610+ 52CF AF               XOR A
 611+ 52D0              ANIMSTARTSTOP_COMMON:
 612+ 52D0 32 30 53         LD (ANIMSTARTSTOP_COMMON.VALUE+3),A
 613+ 52D3              ; *******************************************************************************************************
 614+ 52D3                  ; opening (
 615+ 52D3 CD C3 56     	CALL CHKCHAR
 616+ 52D6 28           	DB '('
 617+ 52D7              	; get sprite animation id or array size
 618+ 52D7 DD 21 1C 52  	LD IX,GETBYT
 619+ 52DB CD 59 01     	CALL CALBAS
 620+ 52DE F5               PUSH AF
 621+ 52DF                  ; check if comma present
 622+ 52DF CD CD 56         CALL GETPREVCHAR
 623+ 52E2 23               INC HL
 624+ 52E3 FE 2C            CP ','
 625+ 52E5 28 0C            JR Z,.L1
 626+ 52E7 FE 29            CP ')'
 627+ 52E9 C2 E1 56         JP NZ,SYNTAX_ERROR
 628+ 52EC                  ; ok so single argument variant
 629+ 52EC F1               POP AF
 630+ 52ED E5               PUSH HL
 631+ 52EE CD 1C 53         CALL .SETVALUE
 632+ 52F1 E1               POP HL
 633+ 52F2 C9               RET
 634+ 52F3              .L1:
 635+ 52F3                  ; get array pointer
 636+ 52F3 D1               POP DE
 637+ 52F4 D5               PUSH DE
 638+ 52F5 15               DEC D
 639+ 52F6 1E 00            LD E,0
 640+ 52F8 3E 02            LD A,2
 641+ 52FA 06 01            LD B,1
 642+ 52FC CD EA 56         CALL GET_BASIC_ARRAY_DATA_POINTER
 643+ 52FF C5               PUSH BC
 644+ 5300              	; ending )
 645+ 5300 CD C3 56     	CALL CHKCHAR
 646+ 5303 29           	DB ')'
 647+ 5304 D1               POP DE ; array pointer
 648+ 5305 C1               POP BC ; number of items
 649+ 5306 78               LD A,B
 650+ 5307 B7               OR A
 651+ 5308 CA D9 56         JP Z,SUBSCRIPT_OUT_OF_RANGE
 652+ 530B E5               PUSH HL
 653+ 530C F3               DI
 654+ 530D              .L2:
 655+ 530D C5               PUSH BC
 656+ 530E 1A               LD A,(DE)
 657+ 530F 13          > INC DE
 657+ 5310 13          > INC DE
 658+ 5311 D5               PUSH DE
 659+ 5312 CD 1C 53         CALL .SETVALUE
 660+ 5315 D1               POP DE
 661+ 5316 C1               POP BC
 662+ 5317 10 F4            DJNZ .L2
 663+ 5319 FB               EI
 664+ 531A E1               POP HL
 665+ 531B C9               RET
 666+ 531C
 667+ 531C              .SETVALUE:
 668+ 531C 47               LD B,A
 669+ 531D 3C               INC A
 670+ 531E 4F               LD C,A
 671+ 531F 3A D3 4F         LD A,(ANIMSPRNUM)
 672+ 5322 B9               CP C
 673+ 5323 DA D9 56         JP C,SUBSCRIPT_OUT_OF_RANGE
 674+ 5326 78               LD A,B
 675+ 5327 CD F4 4F         CALL GETnthSPRANIM
 676+ 532A E5               PUSH HL
 677+ 532B DD E1            POP IX
 678+ 532D              .VALUE:
 679+ 532D DD 36 06 01      LD (IX+6),1 ; active flag
 680+ 5331 3A 30 53         LD A,(.VALUE+3)
 681+ 5334 B7               OR A
 682+ 5335 C8               RET Z
 683+ 5336 DD 36 03 00      LD (IX+3),0 ; current item
 684+ 533A C3 AB 53         JP SETUP_ANIM_STEP
 685+ 533D              ; *******************************************************************************************************
 686+ 533D
 687+ 533D              ; *******************************************************************************************************
 688+ 533D              ; function processes animations during vblank period
 689+ 533D              PROCESS_ANIMATIONS:
 690+ 533D 3A D3 4F         LD A,(ANIMSPRNUM)
 691+ 5340 B7               OR A
 692+ 5341 C8               RET Z; no animations defined
 693+ 5342 47               LD B,A
 694+ 5343 DD 2A D4 4F      LD IX,(ANIMSPRPTR)
 695+ 5347              .L1:
 696+ 5347 C5               PUSH BC
 697+ 5348 DD 7E 06         LD A,(IX+6); active
 698+ 534B B7               OR A
 699+ 534C 28 16            JR Z,.SKIP ; inactive animation
 700+ 534E DD 6E 01         LD L,(IX+1)
 701+ 5351 DD 66 02         LD H,(IX+2) ; HL=end time
 702+ 5354 ED 5B 9E FC      LD DE,(JIFFY)
 703+ 5358 AF               XOR A
 704+ 5359 ED 52            SBC HL,DE
 705+ 535B F2 64 53         JP P,.SKIP ; time until next animation item not yet reached
 706+ 535E DD 34 03         INC (IX+3) ; current animation item
 707+ 5361 CD AB 53         CALL SETUP_ANIM_STEP
 708+ 5364              .SKIP:
 709+ 5364 11 08 00         LD DE,8
 710+ 5367 DD 19            ADD IX,DE
 711+ 5369 C1               POP BC
 712+ 536A 10 DB            DJNZ .L1
 713+ 536C C9               RET
 714+ 536D              ; *******************************************************************************************************
 715+ 536D
 716+ 536D              ; *******************************************************************************************************
 717+ 536D              ; function will setup sprite animation after current item change
 718+ 536D              ; input A=current animation definition
 719+ 536D              ; input IX=pointer to sprite animation
 720+ 536D              ; output IY=pointer to animation item
 721+ 536D              ; CF=1 error or non-cyclic animation ended, in both cases set active flag to 0
 722+ 536D              ; basically sets new end time for current animation
 723+ 536D              INIT_CURRENT_ANIMATION:
 724+ 536D CD E8 4F         CALL GETnthANIMDEF
 725+ 5370 7E               LD A,(HL); number of animation items in the animation definition
 726+ 5371 DD BE 03         CP (IX+3) ; current animation item
 727+ 5374 20 0A            JR NZ,.L3 ; last item not reached
 728+ 5376                  ; last item reached
 729+ 5376 DD 7E 05         LD A,(IX+5) ; cyclic flag
 730+ 5379 B7               OR A
 731+ 537A 28 2D            JR Z,.ERROR ; non-cyclic animation
 732+ 537C                  ; cyclic animation, restart
 733+ 537C DD 36 03 00      LD (IX+3),0; current item
 734+ 5380              .L3:
 735+ 5380                  ; HL = animation definition
 736+ 5380 23               INC HL ; skip animation definition size field
 737+ 5381 16 00            LD D,0
 738+ 5383 DD 5E 03         LD E,(IX+3); current item
 739+ 5386 19               ADD HL,DE
 740+ 5387 4E               LD C,(HL) ; current animation item
 741+ 5388 0C               INC C
 742+ 5389 3A CD 4F         LD A,(ANIMITEMNUM)
 743+ 538C B9               CP C
 744+ 538D 38 1A            JR C,.ERROR ; invalid animation item, stop animation
 745+ 538F 0D               DEC C
 746+ 5390 79               LD A,C
 747+ 5391 CD DF 4F         CALL GETnthANIMITEM
 748+ 5394 E5               PUSH HL
 749+ 5395 FD E1            POP IY ; IY=animation item
 750+ 5397 2A 9E FC         LD HL,(JIFFY)
 751+ 539A FD 5E 01         LD E,(IY+1)
 752+ 539D FD 56 02         LD D,(IY+2) ; duration
 753+ 53A0 19               ADD HL,DE
 754+ 53A1 DD 75 01         LD (IX+1),L
 755+ 53A4 DD 74 02         LD (IX+2),H ; end time for current item
 756+ 53A7              .EXIT:
 757+ 53A7 AF               XOR A
 758+ 53A8 C9               RET
 759+ 53A9              .ERROR:
 760+ 53A9 37               SCF
 761+ 53AA C9               RET
 762+ 53AB              ; *******************************************************************************************************
 763+ 53AB
 764+ 53AB              ; *******************************************************************************************************
 765+ 53AB              ; function will display currect item and set up expiry time
 766+ 53AB              ; it will also stop the animation if expired
 767+ 53AB              ; sets sprite update flag if any changes in sprite data made
 768+ 53AB              ; input IX=current sprite animation
 769+ 53AB              SETUP_ANIM_STEP:
 770+ 53AB DD 4E 04         LD C,(IX+4) ; animation definition ID
 771+ 53AE 0C               INC C
 772+ 53AF 3A D0 4F         LD A,(ANIMDEFNUM)
 773+ 53B2 B9               CP C
 774+ 53B3 30 05            JR NC,.L2
 775+ 53B5                  ; given animation item is outside of bounds, deactivate animation
 776+ 53B5              .STOPANIM:
 777+ 53B5 DD 36 06 00      LD (IX+6),0
 778+ 53B9 C9               RET
 779+ 53BA              .L2:
 780+ 53BA 0D               DEC C
 781+ 53BB 79               LD A,C
 782+ 53BC CD 6D 53         CALL INIT_CURRENT_ANIMATION
 783+ 53BF 38 F4            JR C, .STOPANIM
 784+ 53C1 FD 7E 00         LD A,(IY) ; type of animation item
 785+ 53C4 B7               OR A
 786+ 53C5 CA FB 53         JP Z,.L4 ; change pattern and/or color
 787+ 53C8              .PAT:
 788+ 53C8                  ; change sprite pattern definition
 789+ 53C8 DD 7E 00         LD A,(IX) ; sprite number
 790+ 53CB CD 86 4D         CALL GETnthSPRATTR
 791+ 53CE 23          > INC HL ; skip y and x
 791+ 53CF 23          > INC HL
 791+ 53D0 23          > INC HL
 791+ 53D1 23          > INC HL
 792+ 53D2 7E               LD A,(HL); current pattern
 793+ 53D3 26 00            LD H,0
 794+ 53D5 6F               LD L,A
 795+ 53D6 3A E0 F3         LD A,(REG1SAV)
 796+ 53D9 E6 02            AND 2
 797+ 53DB 20 07            JR NZ,.L6
 798+ 53DD                  ; 8x8 sprite
 799+ 53DD CD B2 55         CALL HLx8
 800+ 53E0 06 08            LD B,8
 801+ 53E2 18 05            JR .L5
 802+ 53E4              .L6:
 803+ 53E4 CD B0 55         CALL HLx32
 804+ 53E7 06 20            LD B,32
 805+ 53E9              .L5:
 806+ 53E9 ED 5B 26 F9      LD DE,(PATBAS)
 807+ 53ED 19               ADD HL,DE
 808+ 53EE CD 9F 55         CALL SETWRT_LOCAL
 809+ 53F1 FD 6E 03         LD L,(IY+3)
 810+ 53F4 FD 66 04         LD H,(IY+4) ; pointer to sprite patter data
 811+ 53F7 CD AA 55         CALL BBYTECOPY
 812+ 53FA C9               RET
 813+ 53FB              .L4:
 814+ 53FB                  ; change pattern and color in sprite attributes table
 815+ 53FB DD 7E 00         LD A,(IX) ; sprite number
 816+ 53FE CD 86 4D         CALL GETnthSPRATTR
 817+ 5401 23          > INC HL ; skip y and x
 817+ 5402 23          > INC HL
 817+ 5403 23          > INC HL
 817+ 5404 23          > INC HL
 818+ 5405 FD 7E 03         LD A,(IY+3) ; new pattern
 819+ 5408 77               LD (HL),A
 820+ 5409 23          > INC HL
 820+ 540A 23          > INC HL
 821+ 540B FD 7E 04         LD A,(IY+4) ; new color
 822+ 540E 77               LD (HL),A
 823+ 540F 2A 7E 4D         LD HL,(SPRATR_UPDATE_FLAG)
 824+ 5412 36 01            LD (HL),1
 825+ 5414 C9               RET
 826+ 5415              ; *******************************************************************************************************
 827+ 5415
# file closed: asm\ANIMATION.asm
 129  5415               ENDIF
 130  5415
 131  5415              ; temp variables for BLIT, TILE functions
 132  5415               IF (BLIT_CMDS + TILE_CMDS > 0)
 133  5415              BLIT_TMP:
 134  5415              TILETMP1:
 135  5415              BLIT_TMP1:
 136  5415 00 00         DW 0
 137  5417              TILETMP2:
 138  5417              BLIT_TMP2:
 139  5417 00 00         DW 0
 140  5419                IFDEF CMDS_WITH_PARAMETERS
 141  5419              BLIT_STRUCT:
 142  5419 00 00 00...   DS 17
 143  541D                ENDIF
 144  541D               ENDIF
 145  542A
 146  542A               IF (VRAM_CMDS + TILE_CMDS + BOX_CMDS > 0)
 147  542A              VRAM_UPDATE_IN_PROGRESS:
 148  542A 00            DB 0
 149  542B               ENDIF
 150  542B
 151  542B              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 152  542B              ; per starting letter, if no commands with this letter, NULL value
 153  542B              CMDS:
 154  542B               IF (ANIM_CMDS == 1)
 155  542B 54 55        	DW CMDS_A ;
 156  542D               ELSE
 157  542D ~                DW 0 ; A
 158  542D               ENDIF
 159  542D               IF (BLIT_CMDS + BOX_CMDS > 0)
 160  542D 1F 55            DW CMDS_B ; B
 161  542F               ELSE
 162  542F ~            	DW 0
 163  542F               ENDIF
 164  542F 00 00            DW 0 ; C
 165  5431 00 00            DW 0 ; D
 166  5433 00 00            DW 0 ; E
 167  5435               IF (VRAM_CMDS + RAM_CMDS > 0)
 168  5435 9D 54            DW CMDS_F; F
 169  5437               ELSE
 170  5437 ~            	DW 0
 171  5437               ENDIF
 172  5437               IF (GENCAL_CMD > 0)
 173  5437 B0 54            DW CMDS_G; G
 174  5439               ELSE
 175  5439 ~            	DW 0
 176  5439               ENDIF
 177  5439 00 00            DW 0 ; H
 178  543B 00 00            DW 0 ; I
 179  543D 00 00            DW 0 ; J
 180  543F 00 00            DW 0 ; K
 181  5441 00 00            DW 0 ; L
 182  5443               IF (VRAM_CMDS + RAM_CMDS + ANIM_CMDS > 0)
 183  5443 5F 54            DW CMDS_M ; M
 184  5445               ELSE
 185  5445 ~            	DW 0
 186  5445               ENDIF
 187  5445 00 00            DW 0 ; N
 188  5447 00 00            DW 0 ; O
 189  5449 00 00            DW 0 ; P
 190  544B 00 00            DW 0 ; Q
 191  544D 00 00            DW 0 ; R
 192  544F               IF (SOUND_CMDS + SPRITE_CMDS > 0)
 193  544F C4 54            DW CMDS_S ; S
 194  5451               ELSE
 195  5451 ~            	DW 0
 196  5451               ENDIF
 197  5451               IF (TILE_CMDS > 0)
 198  5451 3F 55            DW CMDS_T ; T
 199  5453               ELSE
 200  5453 ~            	DW 0
 201  5453               ENDIF
 202  5453 00 00            DW 0 ; U
 203  5455               IF (VRAM_CMDS > 0)
 204  5455 BA 54            DW CMDS_V ; V
 205  5457               ELSE
 206  5457 ~            	DW 0
 207  5457               ENDIF
 208  5457 00 00            DW 0 ; W
 209  5459 00 00            DW 0 ; X
 210  545B 00 00            DW 0 ; Y
 211  545D 00 00            DW 0 ; Z
 212  545F
 213  545F              CMDS_M:
 214  545F               IF (VRAM_CMDS == 1)
 215  545F 4D 45 4D 56      DB "MEMVRM", 0
 215  5463 52 4D 00
 216  5466 64 58            DW MEMVRM
 217  5468               ENDIF
 218  5468               IF (RAM_CMDS == 1)
 219  5468 4D 45 4D 43  	DB "MEMCPY", 0
 219  546C 50 59 00
 220  546F 1A 57        	DW MEMCPY
 221  5471               ENDIF
 222  5471               IF (ANIM_CMDS == 1)
 223  5471 4D 41 58 41  	DB "MAXANIMITEMS",0
 223  5475 4E 49 4D 49
 223  5479 54 45 4D 53
 223  547D 00
 224  547E 00 50        	DW MAXANIMITEMS
 225  5480 4D 41 58 41  	DB "MAXANIMDEFS",0
 225  5484 4E 49 4D 44
 225  5488 45 46 53 00
 226  548C 75 51        	DW MAXANIMDEFS
 227  548E 4D 41 58 41  	DB "MAXANIMSPRS",0
 227  5492 4E 49 4D 53
 227  5496 50 52 53 00
 228  549A 0D 52        	DW MAXANIMSPRS
 229  549C               ENDIF
 230  549C               IF (VRAM_CMDS + RAM_CMDS + ANIM_CMDS > 0)
 231  549C 00           	DB 0
 232  549D               ENDIF
 233  549D              CMDS_F:
 234  549D               IF (VRAM_CMDS == 1)
 235  549D 46 49 4C 56      DB "FILVRM", 0
 235  54A1 52 4D 00
 236  54A4 5D 57            DW FILVRM
 237  54A6               ENDIF
 238  54A6               IF (RAM_CMDS == 1)
 239  54A6 46 49 4C 52      DB "FILRAM", 0
 239  54AA 41 4D 00
 240  54AD AD 57            DW FILRAM
 241  54AF               ENDIF
 242  54AF               IF (VRAM_CMDS + RAM_CMDS > 0)
 243  54AF 00               DB 0
 244  54B0               ENDIF
 245  54B0              CMDS_G:
 246  54B0               IF (GENCAL_CMD == 1)
 247  54B0 47 45 4E 43      DB "GENCAL", 0
 247  54B4 41 4C 00
 248  54B7 0B 58            DW GENCAL
 249  54B9               ENDIF
 250  54B9               IF (GENCAL_CMD > 0)
 251  54B9 00           	DB	0
 252  54BA               ENDIF
 253  54BA              CMDS_V:
 254  54BA               IF (VRAM_CMDS == 1)
 255  54BA 56 52 4D 4D  	DB "VRMMEM", 0
 255  54BE 45 4D 00
 256  54C1 E5 58        	DW VRMMEM
 257  54C3               ENDIF
 258  54C3               IF (VRAM_CMDS > 0)
 259  54C3 00           	DB 0
 260  54C4               ENDIF
 261  54C4              CMDS_S:
 262  54C4               IF (SPRITE_CMDS == 1)
 263  54C4 53 50 52 53  	DB "SPRSET", 0
 263  54C8 45 54 00
 264  54CB 9B 4E        	DW SPRSET
 265  54CD 53 50 52 47  	DB "SPRGRPMOV", 0
 265  54D1 52 50 4D 4F
 265  54D5 56 00
 266  54D7 4C 4F        	DW SPRGRPMOV
 267  54D9               ENDIF
 268  54D9               IF (SOUND_CMDS == 1)
 269  54D9 53 4E 44 53  	DB "SNDSFX", 0
 269  54DD 46 58 00
 270  54E0 C6 59        	DW SNDSFX
 271  54E2 53 4E 44 50  	DB "SNDPLYON", 0
 271  54E6 4C 59 4F 4E
 271  54EA 00
 272  54EB 90 59        	DW SNDPLYON
 273  54ED 53 4E 44 50  	DB "SNDPLYOFF", 0
 273  54F1 4C 59 4F 46
 273  54F5 46 00
 274  54F7 A3 59        	DW SNDPLYOFF
 275  54F9 53 4E 44 50  	DB "SNDPLYINI", 0
 275  54FD 4C 59 49 4E
 275  5501 49 00
 276  5503 46 59        	DW SNDPLYINIT
 277  5505               ENDIF
 278  5505               IF (SPRITE_CMDS == 1)
 279  5505 53 50 52 45  	DB "SPRENABLE", 0
 279  5509 4E 41 42 4C
 279  550D 45 00
 280  550F 46 4E        	DW SPRENABLE
 281  5511 53 50 52 44  	DB "SPRDISABLE", 0
 281  5515 49 53 41 42
 281  5519 4C 45 00
 282  551C 96 4E        	DW SPRDISABLE
 283  551E               ENDIF
 284  551E               IF (SOUND_CMDS + SPRITE_CMDS > 0)
 285  551E 00           	DB 0
 286  551F               ENDIF
 287  551F              CMDS_B:
 288  551F               IF (BLIT_CMDS == 1)
 289  551F 42 4C 49 54  	DB "BLIT", 0
 289  5523 00
 290  5524 9D 5B        	DW BLIT
 291  5526               ENDIF
 292  5526               IF (BOX_CMDS == 1)
 293  5526 42 4F 58 4D  	DB "BOXMEMCPY", 0
 293  552A 45 4D 43 50
 293  552E 59 00
 294  5530 D5 5E        	DW BOXMEMCPY
 295  5532 42 4F 58 4D  	DB "BOXMEMVRM", 0
 295  5536 45 4D 56 52
 295  553A 4D 00
 296  553C 09 5F        	DW BOXMEMVRM
 297  553E               ENDIF
 298  553E               IF (BLIT_CMDS + BOX_CMDS > 0)
 299  553E 00           	DB 0
 300  553F               ENDIF
 301  553F              CMDS_T:
 302  553F               IF (TILE_CMDS == 1)
 303  553F 54 49 4C 45  	DB "TILERAM", 0
 303  5543 52 41 4D 00
 304  5547 E1 5C        	DW TILERAM
 305  5549 54 49 4C 45  	DB "TILEVRM", 0
 305  554D 56 52 4D 00
 306  5551 E4 5D        	DW TILEVRM
 307  5553               ENDIF
 308  5553               IF (TILE_CMDS > 0)
 309  5553 00           	DB 0
 310  5554               ENDIF
 311  5554              CMDS_A:
 312  5554               IF (ANIM_CMDS == 1)
 313  5554 41 4E 49 4D  	DB "ANIMSTART",0
 313  5558 53 54 41 52
 313  555C 54 00
 314  555E CB 52        	DW ANIMSTART
 315  5560 41 4E 49 4D  	DB "ANIMSTOP",0
 315  5564 53 54 4F 50
 315  5568 00
 316  5569 CF 52        	DW ANIMSTOP
 317  556B 41 4E 49 4D  	DB "ANIMITEMPAT",0
 317  556F 49 54 45 4D
 317  5573 50 41 54 00
 318  5577 C0 50        	DW ANIMITEMPAT
 319  5579 41 4E 49 4D  	DB "ANIMITEMPTR",0
 319  557D 49 54 45 4D
 319  5581 50 54 52 00
 320  5585 21 51        	DW ANIMITEMPTR_CMD
 321  5587 41 4E 49 4D  	DB "ANIMDEF",0
 321  558B 44 45 46 00
 322  558F B7 51        	DW ANIMDEF
 323  5591 41 4E 49 4D  	DB "ANIMSPRITE",0
 323  5595 53 50 52 49
 323  5599 54 45 00
 324  559C 63 52        	DW ANIMSPRITE
 325  559E 00           	DB 0
 326  559F               ENDIF
 327  559F
 328  559F               IF (VRAM_CMDS + TILE_CMDS + SPRITE_CMDS > 0)
 329  559F              ; ****************************************************************************************************
 330  559F              ; function sets VRAM address
 331  559F              ; input HL=address
 332  559F              ; modifies AF
 333  559F              SETWRT_LOCAL:
 334  559F 7D           	LD	A, L
 335  55A0 D3 99        	OUT	(099H), A
 336  55A2 7C           	LD	A, H
 337  55A3 E6 3F        	AND	03FH
 338  55A5 F6 40        	OR	040H
 339  55A7 D3 99        	OUT	(099H), A
 340  55A9 C9           	RET
 341  55AA              ; ****************************************************************************************************
 342  55AA               ENDIF
 343  55AA
 344  55AA               IF (VRAM_CMDS + TILE_CMDS > 0)
 345  55AA              ; ****************************************************************************************************
 346  55AA              ; function copies data from RAM to VRAM
 347  55AA              ; input HL=address in RAM
 348  55AA              ; input B=count
 349  55AA              ; modifies AF
 350  55AA              BBYTECOPY:
 351  55AA ED A3        	OUTI
 352  55AC C2 AA 55     	JP	NZ, BBYTECOPY
 353  55AF C9           	RET
 354  55B0              ; ****************************************************************************************************
 355  55B0               ENDIF
 356  55B0
 357  55B0              ; ****************************************************************************************************
 358  55B0              ; function multiplies HL by 32
 359  55B0              HLx32:
 360  55B0 29           	ADD HL,HL
 361  55B1              ; ****************************************************************************************************
 362  55B1              ; function multiplies HL by 16
 363  55B1              HLx16:
 364  55B1 29           	ADD HL,HL
 365  55B2              ; ****************************************************************************************************
 366  55B2              ; function multiplies HL by 8
 367  55B2              HLx8:
 368  55B2 29          > ADD HL, HL
 368  55B3 29          > ADD HL, HL
 368  55B4 29          > ADD HL, HL
 369  55B5 C9           	RET
 370  55B6              ; ****************************************************************************************************
 371  55B6
 372  55B6              ; ****************************************************************************************************
 373  55B6              ; function gets slot and subslot data for specific page
 374  55B6              ; input A=page (0, 1 or 2)
 375  55B6              ; output B = 0A8H register value
 376  55B6              ; output D = 0 is no subslots, 1 if yes
 377  55B6              ; output C = 0A8H value when page 3 slot equals to requested page slot
 378  55B6              ; output E = subslot value if present
 379  55B6              ; modifies AF, BC, DE, HL
 380  55B6              GET_PAGE_INFO:
 381  55B6 6F               LD L, A
 382  55B7 C6 C1            ADD A, low (EXPTBL)
 383  55B9 32 C3 55         LD (GET_PAGE_INFO_L1+1), A
 384  55BC DB A8            IN A, (0A8H)
 385  55BE 47               LD B, A
 386  55BF E6 3F            AND 03FH
 387  55C1 4F               LD C, A
 388  55C2              GET_PAGE_INFO_L1:
 389  55C2 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 390  55C5 E6 80            AND 080H
 391  55C7 28 1B            JR Z, GET_PAGE_INFO_L2
 392  55C9                  ; expanded
 393  55C9 2D               DEC L
 394  55CA FA E9 55         JP M, GET_PAGE_INFO_L3
 395  55CD 2D               DEC L
 396  55CE FA E7 55         JP M, GET_PAGE_INFO_L4
 397  55D1                  ; page 2
 398  55D1 07               RLCA
 399  55D2 07               RLCA
 400  55D3              GET_PAGE_INFO_L5:
 401  55D3 E6 C0            AND 0C0H
 402  55D5 B1               OR C
 403  55D6 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 404  55D8 4F               LD C, A
 405  55D9 3A FF FF         LD A, (0FFFFH)
 406  55DC 2F               CPL
 407  55DD 5F               LD E, A
 408  55DE 16 01            LD D, 1
 409  55E0 78               LD A, B ; return stack
 410  55E1 D3 A8            OUT (0A8H), A
 411  55E3 C9               RET
 412  55E4              GET_PAGE_INFO_L2:
 413  55E4                  ; not expanded
 414  55E4 16 00            LD D, 0
 415  55E6 C9               RET
 416  55E7              GET_PAGE_INFO_L4:
 417  55E7                  ; page 1
 418  55E7 0F               RRCA
 419  55E8 0F               RRCA
 420  55E9              GET_PAGE_INFO_L3:
 421  55E9                  ; page 0
 422  55E9 0F               RRCA
 423  55EA 0F               RRCA
 424  55EB 18 E6            JR GET_PAGE_INFO_L5
 425  55ED              ; ****************************************************************************************************
 426  55ED
 427  55ED              ; ****************************************************************************************************
 428  55ED              ; function returns original slot and subslot info
 429  55ED              ; input B = 0A8H register value
 430  55ED              ; input D = 0 is no subslots, 1 if yes
 431  55ED              ; input C = 0A8H value when page 3 slot equals to requested page slot
 432  55ED              ; input E = subslot value if present
 433  55ED              ; modifies AF, disables interrupts
 434  55ED              RESTORE_PAGE_INFO:
 435  55ED 7A               LD A, D
 436  55EE B7               OR A
 437  55EF 28 08            JR Z, RESTORE_PAGE_INFO_L1
 438  55F1 79               LD A, C
 439  55F2 F3           	DI
 440  55F3 D3 A8            OUT (0A8H), A
 441  55F5 7B               LD A, E
 442  55F6 32 FF FF         LD (0FFFFH), A
 443  55F9              RESTORE_PAGE_INFO_L1:
 444  55F9 78               LD A, B
 445  55FA D3 A8            OUT (0A8H), A
 446  55FC C9               RET
 447  55FD              ; ****************************************************************************************************
 448  55FD
 449  55FD              ; *******************************************************************************************************
 450  55FD              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 451  55FD              ; INPUT:  A = SLOT ID: EXXXSSPP
 452  55FD              ; E = EXPANDED FLAG
 453  55FD              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 454  55FD              ; PP = PRIMARY SLOT NUMBER
 455  55FD              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 456  55FD              ; CHANGES: AF, BC, DE
 457  55FD
 458  55FD              LOCAL_ENASLT:
 459  55FD CD 1D 56         CALL L0353
 460  5600 FA 0A 56         JP M, L0340
 461  5603 DB A8            IN A, (0A8H)
 462  5605 A1               AND C
 463  5606 B0               OR B
 464  5607 D3 A8            OUT (0A8H), A
 465  5609 C9               RET
 466  560A              L0340:
 467  560A E5               PUSH HL
 468  560B CD 42 56         CALL L0378
 469  560E 4F               LD C, A
 470  560F 06 00            LD B, 0
 471  5611 7D               LD A, L
 472  5612 A4               AND H
 473  5613 B2               OR D
 474  5614 21 C5 FC         LD HL, 0FCC5H
 475  5617 09               ADD HL, BC
 476  5618 77               LD (HL), A
 477  5619 E1               POP HL
 478  561A 79               LD A, C
 479  561B 18 E0            JR LOCAL_ENASLT
 480  561D              L0353:
 481  561D F3               DI
 482  561E F5               PUSH AF
 483  561F 7C               LD A, H
 484  5620 07               RLCA
 485  5621 07               RLCA
 486  5622 E6 03            AND 3
 487  5624 5F               LD E, A
 488  5625 3E C0            LD A, 0C0H
 489  5627              L035D:
 490  5627 07               RLCA
 491  5628 07               RLCA
 492  5629 1D               DEC E
 493  562A F2 27 56         JP P, L035D
 494  562D 5F               LD E, A
 495  562E 2F               CPL
 496  562F 4F               LD C, A
 497  5630 F1               POP AF
 498  5631 F5               PUSH AF
 499  5632 E6 03            AND 3
 500  5634 3C               INC A
 501  5635 47               LD B, A
 502  5636 3E AB            LD A, 0ABH
 503  5638              L036E:
 504  5638 C6 55            ADD A, 055H
 505  563A 10 FC            DJNZ L036E
 506  563C 57               LD D, A
 507  563D A3               AND E
 508  563E 47               LD B, A
 509  563F F1               POP AF
 510  5640 A7               AND A
 511  5641 C9               RET
 512  5642              L0378:
 513  5642 F5               PUSH AF
 514  5643 7A               LD A, D
 515  5644 E6 C0            AND 0C0H
 516  5646 4F               LD C, A
 517  5647 F1               POP AF
 518  5648 F5               PUSH AF
 519  5649 57               LD D, A
 520  564A DB A8            IN A, (0A8H)
 521  564C 47               LD B, A
 522  564D E6 3F            AND 03FH
 523  564F B1               OR C
 524  5650 D3 A8            OUT (0A8H), A
 525  5652 7A               LD A, D
 526  5653 0F               RRCA
 527  5654 0F               RRCA
 528  5655 E6 03            AND 3
 529  5657 57               LD D, A
 530  5658 3E AB            LD A, 0ABH
 531  565A              L0390:
 532  565A C6 55            ADD A, 055H
 533  565C 15               DEC D
 534  565D F2 5A 56         JP P, L0390
 535  5660 A3               AND E
 536  5661 57               LD D, A
 537  5662 7B               LD A, E
 538  5663 2F               CPL
 539  5664 67               LD H, A
 540  5665 3A FF FF         LD A, (0FFFFH)
 541  5668 2F               CPL
 542  5669 6F               LD L, A
 543  566A A4               AND H
 544  566B B2               OR D
 545  566C 32 FF FF         LD (0FFFFH), A
 546  566F 78               LD A, B
 547  5670 D3 A8            OUT (0A8H), A
 548  5672 F1               POP AF
 549  5673 E6 03            AND 3
 550  5675 C9               RET
 551  5676              ; *******************************************************************************************************
 552  5676
 553  5676              ; *******************************************************************************************************
 554  5676              ; some common code to activate page 0 and place values needed to restore original page on stack
 555  5676              ; input IY=return address
 556  5676              ENABLE_PAGE0:
 557  5676 AF               XOR A
 558  5677 CD B6 55         CALL GET_PAGE_INFO
 559  567A C5               PUSH BC
 560  567B D5               PUSH DE
 561  567C 3A 41 F3         LD A, (RAMAD0)
 562  567F 26 00            LD H, 0
 563  5681 CD FD 55         CALL LOCAL_ENASLT
 564  5684 FD E9        	JP (IY)
 565  5686              ; *******************************************************************************************************
 566  5686
 567  5686              ; General BASIC CALL-instruction handler
 568  5686              CALLHAND:
 569  5686 E5           	PUSH HL
 570  5687 21 2B 54     	LD	HL, CMDS ; pointer table based on starting letter
 571  568A 3A 89 FD         LD A, (PROCNM)
 572  568D D6 41            SUB 'A'
 573  568F 87               ADD A, A
 574  5690 16 00            LD D, 0
 575  5692 5F               LD E, A
 576  5693 19               ADD HL, DE
 577  5694 5E               LD E, (HL)
 578  5695 23               INC HL
 579  5696 56               LD D, (HL)
 580  5697 7A               LD A, D
 581  5698 B3               OR E
 582  5699 28 23            JR Z, .CMDNOTRECOGNIZED
 583  569B EB               EX DE, HL
 584  569C              .CHKCMD:
 585  569C 11 89 FD     	LD	DE, PROCNM
 586  569F 1A           .LOOP:	LD	A,(DE)
 587  56A0 BE           	CP	(HL)
 588  56A1 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 589  56A3 13           	INC	DE
 590  56A4 23           	INC	HL
 591  56A5 A7           	AND	A
 592  56A6 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 593  56A8 5E           	LD	E,(HL)
 594  56A9 23           	INC	HL
 595  56AA 56           	LD	D,(HL)
 596  56AB E1           	POP	HL		; routine address
 597  56AC CD CD 56     	CALL	GETPREVCHAR
 598  56AF CD C1 56     	CALL	.CALLDE		; Call routine
 599  56B2 A7           	AND	A
 600  56B3 C9           	RET
 601  56B4
 602  56B4              .TONEXTCMD:
 603  56B4 0E FF        	LD	C,0FFH
 604  56B6 AF           	XOR	A
 605  56B7 ED B1        	CPIR			; Skip to end of instruction name
 606  56B9 23           	INC	HL
 607  56BA 23           	INC	HL		; Skip address
 608  56BB BE           	CP	(HL)
 609  56BC 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 610  56BE              .CMDNOTRECOGNIZED:
 611  56BE E1           	POP	HL
 612  56BF 37               SCF
 613  56C0 C9           	RET
 614  56C1
 615  56C1              .CALLDE:
 616  56C1 D5           	PUSH	DE
 617  56C2 C9           	RET
 618  56C3
 619  56C3              ;---------------------------
 620  56C3
 621  56C3              ;GETSTRPNT:
 622  56C3              ; OUT:
 623  56C3              ; HL = String Address
 624  56C3              ; B  = Lenght
 625  56C3              ;        LD      HL,(USR)
 626  56C3              ;        LD      B,(HL)
 627  56C3              ;        INC     HL
 628  56C3              ;        LD      E,(HL)
 629  56C3              ;        INC     HL
 630  56C3              ;        LD      D,(HL)
 631  56C3              ;        EX      DE,HL
 632  56C3              ;        RET
 633  56C3
 634  56C3              ;EVALTXTPARAM:
 635  56C3              ;	CALL	CHKCHAR
 636  56C3              ;	DEFB	"("             ; Check for (
 637  56C3              ;	LD	IX,FRMEVL
 638  56C3              ;	CALL	CALBAS		; Evaluate expression
 639  56C3              ;       LD      A,(VALTYP)
 640  56C3              ;        CP      3               ; Text type?
 641  56C3              ;        JP      NZ,TYPE_MISMATCH
 642  56C3              ;        PUSH	HL
 643  56C3              ;        LD	IX,FRESTR         ; Free the temporary string
 644  56C3              ;        CALL	CALBAS
 645  56C3              ;        POP	HL
 646  56C3              ;	CALL	CHKCHAR
 647  56C3              ;	DEFB	")"             ; Check for )
 648  56C3              ;        RET
 649  56C3
 650  56C3
 651  56C3              CHKCHAR:
 652  56C3 CD CD 56     	CALL	GETPREVCHAR	; Get previous basic char
 653  56C6 E3           	EX	(SP),HL
 654  56C7 BE           	CP	(HL) 	        ; Check if good char
 655  56C8 20 17        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 656  56CA 23           	INC	HL
 657  56CB E3           	EX	(SP),HL
 658  56CC 23           	INC	HL		; Get next basic char
 659  56CD
 660  56CD              GETPREVCHAR:
 661  56CD 2B           	DEC	HL
 662  56CE DD 21 66 46  	LD	IX,CHRGTR
 663  56D2 C3 59 01     	JP      CALBAS
 664  56D5
 665  56D5
 666  56D5              TYPE_MISMATCH:
 667  56D5 1E 0D            LD E, 13 ; Type mismatch
 668  56D7 18 0A            JR THROW_ERROR
 669  56D9              SUBSCRIPT_OUT_OF_RANGE:
 670  56D9 1E 09            LD E,9 ; subscript out of range
 671  56DB 18 06        	JR THROW_ERROR
 672  56DD              OVERFLOW:
 673  56DD 1E 06        	LD E,6
 674  56DF 18 02        	JR THROW_ERROR
 675  56E1              SYNTAX_ERROR:
 676  56E1 1E 02            LD E, 2 ; Syntax error
 677  56E3              THROW_ERROR:
 678  56E3 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 679  56E7 C3 59 01     	JP	CALBAS
 680  56EA
 681  56EA              ;---------------------------
 682  56EA
 683  56EA              ; *******************************************************************************************************
 684  56EA              ; helper function to get pointer to BASIC array data
 685  56EA              ; input A=data type (2=INT,4=SINGLE,8=DOUBLE)
 686  56EA              ; input B=dimensions (1 or 2)
 687  56EA              ; input D=minimal first dimension
 688  56EA              ; input E=minimal second dimension
 689  56EA              ; returns BC=pointer to first data element
 690  56EA              ; throws BASIC error if invalid type
 691  56EA              GET_BASIC_ARRAY_DATA_POINTER:
 692  56EA D5           	PUSH DE
 693  56EB C5           	PUSH BC
 694  56EC F5           	PUSH AF
 695  56ED 3E 01            LD A,1
 696  56EF 32 A5 F6         LD (SUBFLG),A ; search for arrays only
 697  56F2 DD 21 A4 5E  	LD IX, PTRGET
 698  56F6 CD 59 01     	CALL CALBAS
 699  56F9 AF               XOR A
 700  56FA 32 A5 F6         LD (SUBFLG),A ; if not reset will cause syntax errors
 701  56FD 3A 63 F6     	LD A,(VALTYP)
 702  5700 D1           	POP DE ; required type
 703  5701 BA           	CP D
 704  5702 C2 D5 56     	JP NZ,TYPE_MISMATCH
 705  5705 0A           	LD A,(BC)
 706  5706 03           	INC BC
 707  5707 D1           	POP DE ; required number of dimensions
 708  5708 BA           	CP D
 709  5709 C2 D5 56     	JP NZ,TYPE_MISMATCH
 710  570C 0A           	LD A,(BC)
 711  570D 03           	INC BC
 712  570E D1           	POP DE ; required minimal array dimensions
 713  570F BA           	CP D
 714  5710 DA D9 56     	JP C,SUBSCRIPT_OUT_OF_RANGE
 715  5713 0A           	LD A,(BC)
 716  5714 03           	INC BC
 717  5715 BB           	CP E
 718  5716 DA D9 56     	JP C,SUBSCRIPT_OUT_OF_RANGE
 719  5719 C9           	RET
 720  571A              ; *******************************************************************************************************
 721  571A
 722  571A               IF (RAM_CMDS == 1)
 723  571A              ; *******************************************************************************************************
 724  571A              ; function to handle CALL MEMCPY basic extension
 725  571A              ; _MEMCPY ( INT source,
 726  571A              ;			INT destination,
 727  571A              ;			INT count,
 728  571A              ; will put ram in page 0 also, page 1 is already there
 729  571A              MEMCPY:
 730  571A              	; opening (
 731  571A CD C3 56     	CALL CHKCHAR
 732  571D 28           	DB '('
 733  571E              	; get source address
 734  571E DD 21 2F 54  	LD IX, FRMQNT
 735  5722 CD 59 01     	CALL CALBAS
 736  5725 D5           	PUSH DE
 737  5726              	; comma
 738  5726 CD C3 56     	CALL CHKCHAR
 739  5729 2C           	DB ','
 740  572A              	; get destination address
 741  572A DD 21 2F 54  	LD IX, FRMQNT
 742  572E CD 59 01     	CALL CALBAS
 743  5731 D5           	PUSH DE
 744  5732              	; comma
 745  5732 CD C3 56     	CALL CHKCHAR
 746  5735 2C           	DB ','
 747  5736              	; get length
 748  5736 DD 21 2F 54  	LD IX, FRMQNT
 749  573A CD 59 01     	CALL CALBAS
 750  573D D5           	PUSH DE
 751  573E              	; ending )
 752  573E CD C3 56     	CALL CHKCHAR
 753  5741 29           	DB ')'
 754  5742
 755  5742              	; save position
 756  5742 E5           	PUSH HL
 757  5743 DD E1        	POP IX
 758  5745
 759  5745 C1           	POP BC ; count
 760  5746 D1           	POP DE ; destination
 761  5747 E1           	POP HL ; source
 762  5748 D9           	EXX
 763  5749              	; enable page 0
 764  5749 FD 21 50 57  	LD IY, .RET
 765  574D C3 76 56     	JP ENABLE_PAGE0
 766  5750              .RET:
 767  5750 FB           	EI
 768  5751 D9           	EXX
 769  5752 ED B0        	LDIR
 770  5754 D1               POP DE
 771  5755 C1               POP BC
 772  5756 CD ED 55         CALL RESTORE_PAGE_INFO
 773  5759 DD E5        	PUSH IX
 774  575B E1           	POP HL
 775  575C C9           	RET
 776  575D              ; *******************************************************************************************************
 777  575D               ENDIF
 778  575D
 779  575D               IF (VRAM_CMDS == 1)
 780  575D              ; *******************************************************************************************************
 781  575D              ; function to handle CALL FILVRM basic extension
 782  575D              ; FILVRM ( INT offset,
 783  575D              ;		   INT count,
 784  575D              ;		   BYTE value,
 785  575D              ;		   BYTE wait_vsync) >0 = true
 786  575D              ; wait_vsync will issue HALT before copying
 787  575D              FILVRM:
 788  575D              	; opening (
 789  575D CD C3 56     	CALL CHKCHAR
 790  5760 28           	DB '('
 791  5761              	; get offset address
 792  5761 DD 21 2F 54  	LD IX, FRMQNT
 793  5765 CD 59 01     	CALL CALBAS
 794  5768 D5           	PUSH DE
 795  5769              	; comma
 796  5769 CD C3 56     	CALL CHKCHAR
 797  576C 2C           	DB ','
 798  576D              	; get count
 799  576D DD 21 2F 54  	LD IX, FRMQNT
 800  5771 CD 59 01     	CALL CALBAS
 801  5774 D5           	PUSH DE
 802  5775              	; comma
 803  5775 CD C3 56     	CALL CHKCHAR
 804  5778 2C           	DB ','
 805  5779              	; get value
 806  5779 DD 21 1C 52  	LD IX, GETBYT
 807  577D CD 59 01     	CALL CALBAS
 808  5780 F5           	PUSH AF
 809  5781              	; comma
 810  5781 CD C3 56     	CALL CHKCHAR
 811  5784 2C           	DB ','
 812  5785              	; get vsync wait
 813  5785 DD 21 1C 52  	LD IX, GETBYT
 814  5789 CD 59 01     	CALL CALBAS
 815  578C F5           	PUSH AF
 816  578D              	; ending )
 817  578D CD C3 56     	CALL CHKCHAR
 818  5790 29           	DB ')'
 819  5791
 820  5791 FB               EI
 821  5792              	; save position
 822  5792 E5           	PUSH HL
 823  5793 DD E1        	POP IX
 824  5795
 825  5795              	; syntax ok
 826  5795              	; wait for vsync if needed
 827  5795 F1           	POP AF
 828  5796 B7           	OR A
 829  5797 28 01        	JR Z, .L1
 830  5799 76           	HALT
 831  579A
 832  579A              .L1:
 833  579A F1               POP AF ; value
 834  579B C1               POP BC ; count
 835  579C E1               POP HL ; offset
 836  579D 3E 01        	LD A,1
 837  579F 32 2A 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
 838  57A2 CD 56 00         CALL BIOS_FILVRM
 839  57A5 AF           	XOR A
 840  57A6 32 2A 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
 841  57A9
 842  57A9              .L3:
 843  57A9 DD E5        	PUSH IX
 844  57AB E1           	POP HL
 845  57AC C9           	RET
 846  57AD              ; *******************************************************************************************************
 847  57AD               ENDIF
 848  57AD
 849  57AD               IF (RAM_CMDS == 1)
 850  57AD              ; *******************************************************************************************************
 851  57AD              ; function to handle CALL FILRAM basic extension
 852  57AD              ; FILRAM ( INT start address,
 853  57AD              ;		   INT count,
 854  57AD              ;		   BYTE value,
 855  57AD              ; will put ram in page 0 also, page 1 is already there
 856  57AD              FILRAM:
 857  57AD              	; opening (
 858  57AD CD C3 56     	CALL CHKCHAR
 859  57B0 28           	DB '('
 860  57B1              	; get start address
 861  57B1 DD 21 2F 54  	LD IX, FRMQNT
 862  57B5 CD 59 01     	CALL CALBAS
 863  57B8 D5           	PUSH DE
 864  57B9              	; comma
 865  57B9 CD C3 56     	CALL CHKCHAR
 866  57BC 2C           	DB ','
 867  57BD              	; get count
 868  57BD DD 21 2F 54  	LD IX, FRMQNT
 869  57C1 CD 59 01     	CALL CALBAS
 870  57C4 D5           	PUSH DE
 871  57C5              	; comma
 872  57C5 CD C3 56     	CALL CHKCHAR
 873  57C8 2C           	DB ','
 874  57C9              	; get value
 875  57C9 DD 21 1C 52  	LD IX, GETBYT
 876  57CD CD 59 01     	CALL CALBAS
 877  57D0 F5           	PUSH AF
 878  57D1              	; ending )
 879  57D1 CD C3 56     	CALL CHKCHAR
 880  57D4 29           	DB ')'
 881  57D5
 882  57D5              	; save position
 883  57D5 E5           	PUSH HL
 884  57D6 DD E1        	POP IX
 885  57D8
 886  57D8 D1           	POP DE ; actually AF
 887  57D9 C1           	POP BC ; count
 888  57DA E1           	POP HL ; start address
 889  57DB 78           	LD A, B
 890  57DC B7           	OR A
 891  57DD 20 0A        	JR NZ, .L1 ; >=256 bytes to fill
 892  57DF B1           	OR C
 893  57E0 28 19        	JR Z, .EXIT ; 0 bytes to fill, skip
 894  57E2 79           	LD A, C
 895  57E3 3D           	DEC A
 896  57E4 20 03        	JR NZ, .L1 ; ; >1 byte to fill
 897  57E6              	; one byte to fill
 898  57E6 72           	LD (HL), D
 899  57E7 18 12        	JR .EXIT
 900  57E9              .L1:
 901  57E9 D9           	EXX
 902  57EA              	; enable page 0
 903  57EA FD 21 F1 57  	LD IY, .RET
 904  57EE C3 76 56     	JP ENABLE_PAGE0
 905  57F1              .RET:
 906  57F1 FB           	EI
 907  57F2 D9           	EXX
 908  57F3 CD FF 57     	CALL .FILLVALUE
 909  57F6 D1               POP DE
 910  57F7 C1               POP BC
 911  57F8 CD ED 55         CALL RESTORE_PAGE_INFO
 912  57FB              .EXIT:
 913  57FB DD E5        	PUSH IX
 914  57FD E1           	POP HL
 915  57FE C9           	RET
 916  57FF
 917  57FF              .FILLVALUE:
 918  57FF 72               LD (HL), D
 919  5800 54               LD D, H
 920  5801 5D               LD E, L
 921  5802 13               INC DE
 922  5803 0B               DEC BC
 923  5804 ED B0            LDIR
 924  5806 C9               RET
 925  5807              ; *******************************************************************************************************
 926  5807               ENDIF
 927  5807
 928  5807               IF (GENCAL_CMD == 1)
 929  5807              ; *******************************************************************************************************
 930  5807              ; function to handle CALL GENCAL basic extension
 931  5807              ; GENCAL ( INT fn_addr, = address of the function to call
 932  5807              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 933  5807              ; output values of reristers will also be stored at reg_list_ptr
 934  5807              GENCAL_VAR_SP:
 935  5807 00 00            DW 0
 936  5809              GENCAL_VAR_SP2:
 937  5809 00 00            DW 0
 938  580B              GENCAL:
 939  580B              	; opening (
 940  580B CD C3 56     	CALL CHKCHAR
 941  580E 28           	DB '('
 942  580F              	; get function address
 943  580F DD 21 2F 54  	LD IX, FRMQNT
 944  5813 CD 59 01     	CALL CALBAS
 945  5816 D5           	PUSH DE
 946  5817              	; comma
 947  5817 CD C3 56     	CALL CHKCHAR
 948  581A 2C           	DB ','
 949  581B              	; get pointer to register list
 950  581B DD 21 2F 54  	LD IX, FRMQNT
 951  581F CD 59 01     	CALL CALBAS
 952  5822 D5           	PUSH DE
 953  5823              	; ending )
 954  5823 CD C3 56     	CALL CHKCHAR
 955  5826 29           	DB ')'
 956  5827
 957  5827              	; save BASIC token position
 958  5827 E5           	PUSH HL
 959  5828 D9               EXX
 960  5829 E1           	POP HL ; HL'=next basic token
 961  582A D9               EXX
 962  582B
 963  582B E1               POP HL ; get pointer to register values
 964  582C F3           	DI
 965  582D ED 73 07 58      LD (GENCAL_VAR_SP), SP
 966  5831 F9               LD SP, HL
 967  5832 F1               POP AF
 968  5833 C1               POP BC
 969  5834 D1               POP DE
 970  5835 E1               POP HL
 971  5836 DD E1            POP IX
 972  5838 FD E1            POP IY
 973  583A D9               EXX
 974  583B ED 73 09 58      LD (GENCAL_VAR_SP2), SP
 975  583F ED 7B 07 58      LD SP, (GENCAL_VAR_SP)
 976  5843 FB               EI
 977  5844 D1               POP DE ; get function to call
 978  5845 E5               PUSH HL
 979  5846 CD 61 58         CALL .EXXDECALL
 980  5849 F3               DI
 981  584A ED 73 07 58      LD (GENCAL_VAR_SP), SP
 982  584E ED 7B 09 58      LD SP, (GENCAL_VAR_SP2)
 983  5852 FD E5            PUSH IY
 984  5854 DD E5            PUSH IX
 985  5856 E5               PUSH HL
 986  5857 D5               PUSH DE
 987  5858 C5               PUSH BC
 988  5859 F5               PUSH AF
 989  585A ED 7B 07 58      LD SP, (GENCAL_VAR_SP)
 990  585E FB               EI
 991  585F E1               POP HL
 992  5860 C9           	RET
 993  5861
 994  5861              .EXXDECALL:
 995  5861 D5               PUSH DE
 996  5862 D9               EXX
 997  5863 C9               RET
 998  5864              ; *******************************************************************************************************
 999  5864               ENDIF
1000  5864
1001  5864               IF (VRAM_CMDS == 1)
1002  5864              ; *******************************************************************************************************
1003  5864              ; function to handle CALL MEMVRM basic extension
1004  5864              ; copies from RAM to VRAM
1005  5864              ; _MEMVRM ( INT source,
1006  5864              ;			INT destination,
1007  5864              ;			INT count,
1008  5864              ;			BYTE wait_vsync) >0 = true
1009  5864              ; will put ram in page 0 also, page 1 is already there
1010  5864              ; wait_vsync will issue HALT before copying
1011  5864              MEMVRM:
1012  5864              	; opening (
1013  5864 CD C3 56     	CALL CHKCHAR
1014  5867 28           	DB '('
1015  5868              	; get source address
1016  5868 DD 21 2F 54  	LD IX, FRMQNT
1017  586C CD 59 01     	CALL CALBAS
1018  586F D5           	PUSH DE
1019  5870              	; comma
1020  5870 CD C3 56     	CALL CHKCHAR
1021  5873 2C           	DB ','
1022  5874              	; get destination address
1023  5874 DD 21 2F 54  	LD IX, FRMQNT
1024  5878 CD 59 01     	CALL CALBAS
1025  587B D5           	PUSH DE
1026  587C              	; comma
1027  587C CD C3 56     	CALL CHKCHAR
1028  587F 2C           	DB ','
1029  5880              	; get length
1030  5880 DD 21 2F 54  	LD IX, FRMQNT
1031  5884 CD 59 01     	CALL CALBAS
1032  5887 D5           	PUSH DE
1033  5888              	; comma
1034  5888 CD C3 56     	CALL CHKCHAR
1035  588B 2C           	DB ','
1036  588C              	; get vsync wait
1037  588C DD 21 1C 52  	LD IX, GETBYT
1038  5890 CD 59 01     	CALL CALBAS
1039  5893 F5           	PUSH AF
1040  5894              	; ending )
1041  5894 CD C3 56     	CALL CHKCHAR
1042  5897 29           	DB ')'
1043  5898
1044  5898                  ; save position in BASIC text
1045  5898 E5           	PUSH HL
1046  5899 DD E1        	POP IX
1047  589B
1048  589B F1           	POP AF ; wait vsync
1049  589C B7           	OR A
1050  589D 28 03        	JR Z, .L1
1051  589F FB               EI
1052  58A0 76           	HALT
1053  58A1 F3           	DI
1054  58A2              .L1:
1055  58A2              	; pop LDIR parameters and store away for later
1056  58A2 C1           	POP BC ; count
1057  58A3 D1           	POP DE ; vram destination
1058  58A4 E1           	POP HL ; ram source
1059  58A5 D9           	EXX
1060  58A6 FD 21 AD 58   	LD IY, .RET
1061  58AA C3 76 56     	JP ENABLE_PAGE0
1062  58AD              .RET:
1063  58AD FB           	EI
1064  58AE D9           	EXX
1065  58AF 3E 01        	LD A,1
1066  58B1 32 2A 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
1067  58B4 CD C4 58     	CALL .LDIRVM
1068  58B7 AF           	XOR A
1069  58B8 32 2A 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
1070  58BB D1               POP DE
1071  58BC C1               POP BC
1072  58BD CD ED 55         CALL RESTORE_PAGE_INFO
1073  58C0 DD E5        	PUSH IX
1074  58C2 E1           	POP HL
1075  58C3 C9           	RET
1076  58C4
1077  58C4              .LDIRVM:
1078  58C4 EB           	EX DE, HL
1079  58C5 F3           	DI
1080  58C6 CD 9F 55     	CALL SETWRT_LOCAL
1081  58C9 FB           	EI
1082  58CA EB           	EX DE, HL
1083  58CB 78           	LD A, B
1084  58CC B7           	OR A
1085  58CD 28 0D        	JR Z, .L3
1086  58CF C5           	PUSH BC
1087  58D0 0E 98        	LD C, #98
1088  58D2              .L2:
1089  58D2 50           	LD D, B
1090  58D3 06 00        	LD B, 0
1091  58D5 CD AA 55     	CALL BBYTECOPY
1092  58D8 42           	LD B, D
1093  58D9 10 F7        	DJNZ .L2
1094  58DB C1           	POP BC
1095  58DC              .L3:
1096  58DC 79           	LD A, C
1097  58DD B7           	OR A
1098  58DE C8           	RET Z
1099  58DF 41           	LD B, C
1100  58E0 0E 98        	LD C, #98
1101  58E2 C3 AA 55     	JP BBYTECOPY
1102  58E5              ; *******************************************************************************************************
1103  58E5               ENDIF
1104  58E5
1105  58E5               IF (VRAM_CMDS == 1)
1106  58E5              ; *******************************************************************************************************
1107  58E5              ; function to handle CALL VRMMEM basic extension
1108  58E5              ; copies from RAM to VRAM
1109  58E5              ; _VRMMEM ( INT source,
1110  58E5              ;			INT destination,
1111  58E5              ;			INT count
1112  58E5              ; will put ram in page 0 also, page 1 is already there
1113  58E5              VRMMEM:
1114  58E5              	; opening (
1115  58E5 CD C3 56     	CALL CHKCHAR
1116  58E8 28           	DB '('
1117  58E9              	; get source address
1118  58E9 DD 21 2F 54  	LD IX, FRMQNT
1119  58ED CD 59 01     	CALL CALBAS
1120  58F0 D5           	PUSH DE
1121  58F1              	; comma
1122  58F1 CD C3 56     	CALL CHKCHAR
1123  58F4 2C           	DB ','
1124  58F5              	; get destination address
1125  58F5 DD 21 2F 54  	LD IX, FRMQNT
1126  58F9 CD 59 01     	CALL CALBAS
1127  58FC D5           	PUSH DE
1128  58FD              	; comma
1129  58FD CD C3 56     	CALL CHKCHAR
1130  5900 2C           	DB ','
1131  5901              	; get length
1132  5901 DD 21 2F 54  	LD IX, FRMQNT
1133  5905 CD 59 01     	CALL CALBAS
1134  5908 D5           	PUSH DE
1135  5909              	; ending )
1136  5909 CD C3 56     	CALL CHKCHAR
1137  590C 29           	DB ')'
1138  590D
1139  590D                  ; save position in BASIC text
1140  590D E5           	PUSH HL
1141  590E DD E1        	POP IX
1142  5910
1143  5910 C1           	POP BC ; count
1144  5911 D1           	POP DE ; destination
1145  5912 E1           	POP HL ; source
1146  5913 D9           	EXX
1147  5914 FD 21 1B 59  	LD IY, .RET
1148  5918 C3 76 56     	JP ENABLE_PAGE0
1149  591B              .RET:
1150  591B FB           	EI
1151  591C D9           	EXX
1152  591D 3E 01        	LD A,1
1153  591F 32 2A 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
1154  5922 CD 32 59     	CALL .LDIRMV
1155  5925 AF           	XOR A
1156  5926 32 2A 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
1157  5929 D1               POP DE
1158  592A C1               POP BC
1159  592B CD ED 55         CALL RESTORE_PAGE_INFO
1160  592E DD E5        	PUSH IX
1161  5930 E1           	POP HL
1162  5931 C9           	RET
1163  5932
1164  5932              .LDIRMV:
1165  5932              	; set VRAM address *exactly* as in ROM, otherwise corruption
1166  5932 7D           	LD	A, L
1167  5933 F3           	DI
1168  5934 D3 99        	OUT	(099H), A
1169  5936 7C           	LD	A, H
1170  5937 E6 3F        	AND	03FH
1171  5939 D3 99        	OUT	(099H), A
1172  593B FB           	EI
1173  593C              	;EX (SP), HL
1174  593C              	;EX (SP), HL
1175  593C              	;NOP
1176  593C              	;NOP
1177  593C              .L4:
1178  593C DB 98            IN A, (#98)
1179  593E 12           	LD (DE), A
1180  593F 13               INC DE
1181  5940 0B               DEC BC
1182  5941 79               LD A, C
1183  5942 B0               OR B
1184  5943 20 F7            JR NZ, .L4
1185  5945 C9               RET
1186  5946              ; *******************************************************************************************************
1187  5946               ENDIF
1188  5946
1189  5946               IF (SOUND_CMDS == 1)
1190  5946              ; *******************************************************************************************************
1191  5946              ; function to handle CALL SNDPLYINIT basic extension
1192  5946              ; initializes sound player
1193  5946              ; _SNDPLYINIT ( INT music_offset,
1194  5946              ;				INT sfx_offset, can be -1 if no SFX
1195  5946              ; will put ram in page 0 also, page 1 is already there
1196  5946              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1197  5946              SNDPLYINIT:
1198  5946              	; opening (
1199  5946 CD C3 56     	CALL CHKCHAR
1200  5949 28           	DB '('
1201  594A              	; get music address
1202  594A DD 21 2F 54  	LD IX, FRMQNT
1203  594E CD 59 01     	CALL CALBAS
1204  5951 D5           	PUSH DE
1205  5952              	; comma
1206  5952 CD C3 56     	CALL CHKCHAR
1207  5955 2C           	DB ','
1208  5956              	; get sfx address
1209  5956 DD 21 2F 54  	LD IX, FRMQNT
1210  595A CD 59 01     	CALL CALBAS
1211  595D D5           	PUSH DE
1212  595E              	; ending )
1213  595E CD C3 56     	CALL CHKCHAR
1214  5961 29           	DB ')'
1215  5962
1216  5962                  ; save position in BASIC text
1217  5962 44           	LD B, H
1218  5963 4D           	LD C, L
1219  5964
1220  5964              	; pop LDIR parameters and store away for later
1221  5964 D1           	POP DE ; sfx address
1222  5965 E1           	POP HL ; music address
1223  5966 C5           	PUSH BC ; basic text location
1224  5967 D9           	EXX
1225  5968 FD 21 6F 59  	LD IY, .RET
1226  596C C3 76 56     	JP ENABLE_PAGE0
1227  596F              .RET:
1228  596F D9           	EXX
1229  5970
1230  5970 D5           	PUSH DE
1231  5971 AF           	XOR A
1232  5972              	; HL = music location
1233  5972 CD 62 41     	CALL PLY_AKG_INIT
1234  5975 3E 01        	LD A, 1
1235  5977 32 7A 4D     	LD (MUSIC_INIT_STATUS), A
1236  597A
1237  597A E1           	POP HL ; SFX
1238  597B              	; check if SFX address -1
1239  597B 23           	INC HL
1240  597C 7D           	LD A, L
1241  597D B4           	OR H
1242  597E 28 09        	JR Z,.L1
1243  5980 2B           	DEC HL
1244  5981 CD 1D 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1245  5984 3E 01        	LD A, 1
1246  5986 32 7B 4D     	LD (SFX_INIT_STATUS), A
1247  5989              .L1:
1248  5989 D1               POP DE
1249  598A C1               POP BC
1250  598B CD ED 55         CALL RESTORE_PAGE_INFO
1251  598E
1252  598E E1           	POP HL
1253  598F C9           	RET
1254  5990              ; *******************************************************************************************************
1255  5990
1256  5990              ; *******************************************************************************************************
1257  5990              ; function to handle CALL SNDPLYON basic extension
1258  5990              ; enables sound player
1259  5990              ; _SNDPLYON
1260  5990              ; sets SOUND_ENABLED variable to 1 if init call was done
1261  5990              ; if not throws out of data error
1262  5990              SNDPLYON:
1263  5990 3A 7A 4D     	LD A, (MUSIC_INIT_STATUS)
1264  5993 B7           	OR A
1265  5994 20 05        	JR NZ, .L1
1266  5996              	; player not initialized, throw error
1267  5996 1E 04        	LD E, 04 ; Out of DATA
1268  5998 C3 E3 56     	JP THROW_ERROR
1269  599B              .L1:
1270  599B 32 7C 4D     	LD (SOUND_ENABLED), A
1271  599E              	; disable key click
1272  599E AF           	XOR A
1273  599F 32 DB F3     	LD (CLIKSW), A
1274  59A2 C9           	RET
1275  59A3              ; *******************************************************************************************************
1276  59A3
1277  59A3              ; *******************************************************************************************************
1278  59A3              ; function to handle CALL SNDPLYOFF basic extension
1279  59A3              ; disables sound player
1280  59A3              ; _SNDPLYOFF
1281  59A3              ; sets SOUND_ENABLED variable to 0
1282  59A3              ; calls AKG to stop music and SFX on all channels if initialized
1283  59A3              SNDPLYOFF:
1284  59A3 3A 7C 4D     	LD A, (SOUND_ENABLED)
1285  59A6 B7           	OR A
1286  59A7 C8           	RET Z ; already stopped
1287  59A8 AF           	XOR A
1288  59A9 32 7C 4D     	LD (SOUND_ENABLED), A
1289  59AC E5           	PUSH HL
1290  59AD CD 21 42     	CALL PLY_AKG_STOP
1291  59B0 3A 7B 4D     	LD A, (SFX_INIT_STATUS)
1292  59B3 B7           	OR A
1293  59B4 28 0E        	JR Z, .EXIT ; SFX not in use
1294  59B6 AF           	XOR A
1295  59B7 CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1296  59BA 3E 01        	LD A, 1
1297  59BC CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1298  59BF 3E 02        	LD A, 2
1299  59C1 CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1300  59C4              .EXIT:
1301  59C4 E1           	POP HL
1302  59C5 C9           	RET
1303  59C6              ; *******************************************************************************************************
1304  59C6
1305  59C6              ; *******************************************************************************************************
1306  59C6              ; function to handle CALL SNDSFX basic extension
1307  59C6              ; plays a sound effect
1308  59C6              ; _SNDSFX ( BYTE sfx_number, >0
1309  59C6              ;			BYTE channel, = 0,1 or 2
1310  59C6              ;			BYTE inverted_volume = 0-16, 0 being full volume
1311  59C6              ; will put ram in page 0 also, page 1 is already there
1312  59C6              ; if sound off throws illegal function call
1313  59C6              ; if sfx not initialized, throws out of data
1314  59C6              SNDSFX:
1315  59C6              	; opening (
1316  59C6 CD C3 56     	CALL CHKCHAR
1317  59C9 28           	DB '('
1318  59CA              	; get sfx_number
1319  59CA DD 21 1C 52  	LD IX, GETBYT
1320  59CE CD 59 01     	CALL CALBAS
1321  59D1 D5           	PUSH DE
1322  59D2              	; comma
1323  59D2 CD C3 56     	CALL CHKCHAR
1324  59D5 2C           	DB ','
1325  59D6              	; get sfx address
1326  59D6 DD 21 1C 52  	LD IX, GETBYT
1327  59DA CD 59 01     	CALL CALBAS
1328  59DD D5           	PUSH DE
1329  59DE              	; comma
1330  59DE CD C3 56     	CALL CHKCHAR
1331  59E1 2C           	DB ','
1332  59E2              	; get inverted volume
1333  59E2 DD 21 1C 52  	LD IX, GETBYT
1334  59E6 CD 59 01     	CALL CALBAS
1335  59E9 D5           	PUSH DE
1336  59EA              	; ending )
1337  59EA CD C3 56     	CALL CHKCHAR
1338  59ED 29           	DB ')'
1339  59EE
1340  59EE 3A 7C 4D     	LD A, (SOUND_ENABLED)
1341  59F1 B7           	OR A
1342  59F2 20 05        	JR NZ, .L1
1343  59F4              	; sound disabled, throw illegal function call
1344  59F4 1E 05        	LD E, 5
1345  59F6 C3 E3 56     	JP THROW_ERROR
1346  59F9              .L1:
1347  59F9 3A 7B 4D     	LD A, (SFX_INIT_STATUS)
1348  59FC B7           	OR A
1349  59FD 20 05        	JR NZ, .L2
1350  59FF              	; sfx data not initialized, throw out of data
1351  59FF 1E 04        	LD E, 4
1352  5A01 C3 E3 56     	JP THROW_ERROR
1353  5A04              .L2:
1354  5A04              	; pop  parameters and store away for later
1355  5A04 D1           	POP DE ; inverted volume
1356  5A05 43           	LD B, E
1357  5A06 D1           	POP DE ; channel
1358  5A07 4B           	LD C, E
1359  5A08 D1           	POP DE
1360  5A09 7B           	LD A, E
1361  5A0A 08           	EX AF, AF'
1362  5A0B E5           	PUSH HL ; basic text location
1363  5A0C D9           	EXX
1364  5A0D FD 21 14 5A  	LD IY, .RET
1365  5A11 C3 76 56     	JP ENABLE_PAGE0
1366  5A14              .RET:
1367  5A14 D9           	EXX
1368  5A15 08           	EX AF, AF'
1369  5A16 CD 21 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1370  5A19
1371  5A19 D1               POP DE
1372  5A1A C1               POP BC
1373  5A1B CD ED 55         CALL RESTORE_PAGE_INFO
1374  5A1E
1375  5A1E E1           	POP HL
1376  5A1F C9           	RET
1377  5A20              ; *******************************************************************************************************
1378  5A20               ENDIF
1379  5A20
1380  5A20               IF (BLIT_CMDS == 1)
1381  5A20              ; *******************************************************************************************************
1382  5A20              ; function rotates mask and data of several characters and applies to background data
1383  5A20              ; this handles x-shift from 0 to 4
1384  5A20              ; contains self-modifying code that is set-up from external function
1385  5A20              ; input HL=pointer to mask data
1386  5A20              ; input HL'=pointer to character data
1387  5A20              ; input DE=output buffer containing background data
1388  5A20              ; input BC=DE+8
1389  5A20              ; input A=number of characters to process
1390  5A20              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1391  5A20              SHIFT04:
1392  5A20 08           	EX AF, AF'
1393  5A21 7E           	LD A, (HL) ; get mask
1394  5A22 D9           	EXX
1395  5A23 57           	LD D, A
1396  5A24 1E FF        	LD E, #FF
1397  5A26 37           	SCF
1398  5A27              .M1:
1399  5A27 18 FE        	JR .M1 ; this is self-modifying part
1400  5A29 CB 1A        	RR D
1401  5A2B CB 1B        	RR E
1402  5A2D CB 1A        	RR D
1403  5A2F CB 1B        	RR E
1404  5A31 CB 1A        	RR D
1405  5A33 CB 1B        	RR E
1406  5A35 CB 1A        	RR D
1407  5A37 CB 1B        	RR E
1408  5A39
1409  5A39 46           	LD B, (HL) ; get data
1410  5A3A 0E 00        	LD C, 0
1411  5A3C              .M2:
1412  5A3C 18 FE        	JR .M2 ; also self-modifying part
1413  5A3E CB 38        	SRL B
1414  5A40 CB 19        	RR C
1415  5A42 CB 38        	SRL B
1416  5A44 CB 19        	RR C
1417  5A46 CB 38        	SRL B
1418  5A48 CB 19        	RR C
1419  5A4A CB 38        	SRL B
1420  5A4C CB 19        	RR C
1421  5A4E
1422  5A4E D9           	EXX
1423  5A4F 1A           	LD A, (DE) ; background
1424  5A50 D9           	EXX
1425  5A51 A2           	AND D
1426  5A52 B0           	OR B
1427  5A53 D9           	EXX
1428  5A54 12           	LD (DE), A
1429  5A55
1430  5A55 0A           	LD A, (BC)
1431  5A56 D9           	EXX
1432  5A57 A3           	AND E
1433  5A58 B1           	OR C
1434  5A59 23           	INC HL
1435  5A5A D9           	EXX
1436  5A5B 02           	LD (BC), A
1437  5A5C
1438  5A5C 23           	INC HL
1439  5A5D 13           	INC DE
1440  5A5E 03           	INC BC
1441  5A5F
1442  5A5F 08           	EX AF, AF'
1443  5A60 3D           	DEC A
1444  5A61 C2 20 5A     	JP NZ, SHIFT04
1445  5A64 C9           	RET
1446  5A65              ; *******************************************************************************************************
1447  5A65
1448  5A65              ; *******************************************************************************************************
1449  5A65              ; function rotates mask and data of several characters and applies to background data
1450  5A65              ; this handles x-shift from 5 to 8
1451  5A65              ; contains self-modifying code that is set-up from external function
1452  5A65              ; input HL=pointer to mask data
1453  5A65              ; input HL'=pointer to character data
1454  5A65              ; input DE=output buffer containing background data
1455  5A65              ; input BC=DE+8
1456  5A65              ; input A=number of characters to process
1457  5A65              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1458  5A65              SHIFT58:
1459  5A65 08           	EX AF, AF'
1460  5A66 7E           	LD A, (HL) ; get mask
1461  5A67 D9           	EXX
1462  5A68 57           	LD D, A
1463  5A69 1E FF        	LD E, #FF
1464  5A6B 37           	SCF
1465  5A6C              .M1:
1466  5A6C 18 FE        	JR .M1 ; this is self-modifying part
1467  5A6E CB 12        	RL D
1468  5A70 CB 13        	RL E
1469  5A72 CB 12        	RL D
1470  5A74 CB 13        	RL E
1471  5A76 CB 12        	RL D
1472  5A78 CB 13        	RL E
1473  5A7A
1474  5A7A 46           	LD B, (HL)
1475  5A7B 0E 00        	LD C, 0
1476  5A7D              .M2:
1477  5A7D 18 FE        	JR .M2 ; also self-modifying part
1478  5A7F CB 20        	SLA B
1479  5A81 CB 11        	RL C
1480  5A83 CB 20        	SLA B
1481  5A85 CB 11        	RL C
1482  5A87 CB 20        	SLA B
1483  5A89 CB 11        	RL C
1484  5A8B
1485  5A8B D9           	EXX
1486  5A8C 1A           	LD A, (DE) ; background
1487  5A8D D9           	EXX
1488  5A8E A3           	AND E
1489  5A8F B1           	OR C
1490  5A90 D9           	EXX
1491  5A91 12           	LD (DE), A
1492  5A92
1493  5A92 0A           	LD A, (BC)
1494  5A93 D9           	EXX
1495  5A94 A2           	AND D
1496  5A95 B0           	OR B
1497  5A96 23           	INC HL
1498  5A97 D9           	EXX
1499  5A98 02           	LD (BC), A
1500  5A99
1501  5A99 23           	INC HL
1502  5A9A 13           	INC DE
1503  5A9B 03           	INC BC
1504  5A9C
1505  5A9C 08           	EX AF, AF'
1506  5A9D 3D           	DEC A
1507  5A9E C2 65 5A     	JP NZ, SHIFT58
1508  5AA1 C9           	RET
1509  5AA2              ; *******************************************************************************************************
1510  5AA2
1511  5AA2              ; *******************************************************************************************************
1512  5AA2              ; routine that shifts one row of characters
1513  5AA2              ; contains self-modifying code that is set-up from external function
1514  5AA2              ; input HL=pointer to mask data
1515  5AA2              ; input HL'=pointer to character data
1516  5AA2              ; input DE=output buffer containing background data
1517  5AA2              ; input A=number of characters to process
1518  5AA2              ; input IX=pointer to structure describing input data
1519  5AA2              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1520  5AA2              SHIFT_ROW:
1521  5AA2 F5           	PUSH AF
1522  5AA3 ED 53 15 54  		LD (BLIT_TMP1), DE
1523  5AA7 E5           		PUSH HL
1524  5AA8 CD EB 5A     			CALL .ADDYSHIFT
1525  5AAB E1           		POP HL
1526  5AAC ED 53 17 54  		LD (BLIT_TMP2), DE ; DE+vertical shift
1527  5AB0              .L1:
1528  5AB0 3E 08        		LD A, 8
1529  5AB2 DD 96 02     		SUB (IX+2) ; y shift
1530  5AB5              .CALL1:
1531  5AB5 CD 00 00     		CALL 0
1532  5AB8 DD 7E 02     		LD A, (IX+2); y shift
1533  5ABB B7           		OR A
1534  5ABC 28 26        		JR Z, .DONE
1535  5ABE ED 5B 15 54  		LD DE, (BLIT_TMP1)
1536  5AC2 E5           		PUSH HL
1537  5AC3 CD F9 5A     			CALL .DETONEXTROW
1538  5AC6 E1           		POP HL
1539  5AC7              .CALL2:
1540  5AC7 CD 00 00     		CALL 0
1541  5ACA ED 5B 15 54  		LD DE, (BLIT_TMP1)
1542  5ACE E5           		PUSH HL
1543  5ACF CD F3 5A     			CALL .ADD8
1544  5AD2 E1           		POP HL
1545  5AD3 ED 53 15 54  		LD (BLIT_TMP1), DE
1546  5AD7 ED 5B 17 54  		LD DE, (BLIT_TMP2)
1547  5ADB E5           		PUSH HL
1548  5ADC CD F3 5A     			CALL .ADD8
1549  5ADF E1           		POP HL
1550  5AE0 ED 53 17 54  		LD (BLIT_TMP2), DE ; DE+vertical shift
1551  5AE4              .DONE:
1552  5AE4 F1           	POP AF
1553  5AE5 3D           	DEC A
1554  5AE6 C8           	RET Z
1555  5AE7 F5           	PUSH AF
1556  5AE8 C3 B0 5A     	JP .L1
1557  5AEB              .ADDYSHIFT:
1558  5AEB EB           	EX DE, HL
1559  5AEC 16 00        	LD D, 0
1560  5AEE DD 5E 02     	LD E, (IX+2); y shift
1561  5AF1 18 0C        	JR .MOVDEBC
1562  5AF3              .ADD8:
1563  5AF3 21 08 00     	LD HL, 8
1564  5AF6 C3 FF 5A     	JP .MOVDEBC
1565  5AF9              .DETONEXTROW:
1566  5AF9 DD 6E 06     	LD L, (IX+6)
1567  5AFC DD 66 07     	LD H, (IX+7) ; bkg add to value
1568  5AFF              .MOVDEBC:
1569  5AFF 19           	ADD HL, DE
1570  5B00 54           	LD D, H
1571  5B01 5D           	LD E, L
1572  5B02 01 08 00     	LD BC, 8
1573  5B05 09           	ADD HL, BC
1574  5B06 44           	LD B, H
1575  5B07 4D           	LD C, L
1576  5B08 C9           	RET
1577  5B09              ; *******************************************************************************************************
1578  5B09
1579  5B09              ; *******************************************************************************************************
1580  5B09              ; function rotates mask and character data and applies it to background
1581  5B09              ; input IX=pointer to structure describing input data
1582  5B09              ; +0  DW horizontal shift count 0-7 (low byte used)
1583  5B09              ; +2  DW vertical shift count 0-7 (low byte used)
1584  5B09              ; +4  DW background data start;
1585  5B09              ; +6  DW background add to value to next row of background data
1586  5B09              ; +8  DW mask data start;
1587  5B09              ; +10  DW character data start;
1588  5B09              ; +12 DW character&mask add to value to next row of data
1589  5B09              ; +14 DW columns (low byte used)
1590  5B09              ; +16 DW rows (low byte used)
1591  5B09              SHIFT_MERGE_CHARACTER:
1592  5B09 DD 7E 00     	LD A, (IX) ; shift
1593  5B0C FE 05        	CP 5
1594  5B0E 38 25        	JR C, .RIGHT
1595  5B10              	; shifts 5-7, use rotate towards left 1-3
1596  5B10 21 65 5A     	LD HL, SHIFT58
1597  5B13 22 B6 5A     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1598  5B16 22 C8 5A     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1599  5B19 D6 05        	SUB 5
1600  5B1B 28 0D        	JR Z, .L1
1601  5B1D 87           	ADD A, A
1602  5B1E 87           	ADD A, A
1603  5B1F 67           	LD H, A
1604  5B20 2E 18        	LD L, #18 ; JR opcode
1605  5B22 22 6C 5A     	LD (SHIFT58.M1), HL
1606  5B25 22 7D 5A     	LD (SHIFT58.M2), HL
1607  5B28 18 32        	JR .DO
1608  5B2A              .L1:
1609  5B2A 21 00 00     	LD HL, 0 ; 2xNOP opcode
1610  5B2D 22 6C 5A     	LD (SHIFT58.M1), HL
1611  5B30 22 7D 5A     	LD (SHIFT58.M2), HL
1612  5B33 18 27        	JR .DO
1613  5B35              .RIGHT:
1614  5B35              	; shifts 0-4, rotate towards right
1615  5B35 21 20 5A     	LD HL, SHIFT04
1616  5B38 22 B6 5A     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1617  5B3B 22 C8 5A     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1618  5B3E FE 04        	CP 4
1619  5B40 28 11        	JR Z, .R1
1620  5B42 D6 04        	SUB 4
1621  5B44 ED 44        	NEG
1622  5B46 87           	ADD A, A
1623  5B47 87           	ADD A, A
1624  5B48 67           	LD H, A
1625  5B49 2E 18        	LD L, #18 ; JR opcode
1626  5B4B 22 27 5A     	LD (SHIFT04.M1), HL
1627  5B4E 22 3C 5A     	LD (SHIFT04.M2), HL
1628  5B51 18 09        	JR .DO
1629  5B53              .R1:
1630  5B53 21 00 00     	LD HL, 0 ; 2xNOP opcode
1631  5B56 22 27 5A     	LD (SHIFT04.M1), HL
1632  5B59 22 3C 5A     	LD (SHIFT04.M2), HL
1633  5B5C              .DO:
1634  5B5C DD 46 10     	LD B, (IX+16) ; rows
1635  5B5F DD 6E 08     	LD L, (IX+8)
1636  5B62 DD 66 09     	LD H, (IX+9) ; mask data
1637  5B65 DD 5E 04     	LD E, (IX+4)
1638  5B68 DD 56 05     	LD D, (IX+5) ; background data
1639  5B6B D9           	EXX
1640  5B6C DD 6E 0A     	LD L, (IX+10)
1641  5B6F DD 66 0B     	LD H, (IX+11) ; character data
1642  5B72 D9           	EXX
1643  5B73              .LOOP:
1644  5B73 C5           	PUSH BC
1645  5B74 E5           		PUSH HL
1646  5B75 D5           			PUSH DE
1647  5B76 D9           				EXX
1648  5B77 E5           				PUSH HL
1649  5B78 D9           					EXX
1650  5B79 DD 7E 0E     					LD A, (IX+14) ; columns
1651  5B7C              .CALL:
1652  5B7C CD A2 5A     					CALL SHIFT_ROW
1653  5B7F E1           				POP HL
1654  5B80 DD 5E 0C     				LD E, (IX+12)
1655  5B83 DD 56 0D     				LD D, (IX+13) ; char data to next row
1656  5B86 19           				ADD HL, DE
1657  5B87 D9           				EXX
1658  5B88 E1           			POP HL
1659  5B89 DD 5E 06     			LD E, (IX+6)
1660  5B8C DD 56 07     			LD D, (IX+7) ; background to next row
1661  5B8F 19           			ADD HL, DE
1662  5B90 EB           			EX DE, HL
1663  5B91 E1           		POP HL
1664  5B92 DD 4E 0C     		LD C, (IX+12)
1665  5B95 DD 46 0D     		LD B, (IX+13) ; char data to next row
1666  5B98 09           		ADD HL, BC
1667  5B99 C1           	POP BC
1668  5B9A 10 D7        	DJNZ .LOOP
1669  5B9C C9           	RET
1670  5B9D              ; *******************************************************************************************************
1671  5B9D
1672  5B9D               IFNDEF CMDS_WITH_PARAMETERS
1673  5B9D ~            ; *******************************************************************************************************
1674  5B9D ~            ; function to handle CALL BLIT basic extension
1675  5B9D ~            ; rotates 1-bit character drawing horizontally with mask and character data and
1676  5B9D ~            ; fuses with background data and applies vertical shift too
1677  5B9D ~            ; BLIT ( INT request_data_ptr )
1678  5B9D ~            ; request_data_ptr described in SHIFT_MERGE_CHARACTER
1679  5B9D ~            ; will put ram in page 0 also, page 1 is already there
1680  5B9D ~            BLIT:
1681  5B9D ~            	; opening (
1682  5B9D ~            	CALL CHKCHAR
1683  5B9D ~            	DB '('
1684  5B9D ~            	; get pointer to request struct
1685  5B9D ~            	LD IX, FRMQNT
1686  5B9D ~            	CALL CALBAS
1687  5B9D ~            	PUSH DE
1688  5B9D ~            	; ending )
1689  5B9D ~            	CALL CHKCHAR
1690  5B9D ~            	DB ')'
1691  5B9D ~
1692  5B9D ~            	POP IX ; pointer to request struct
1693  5B9D ~
1694  5B9D ~            	PUSH HL ; save position in BASIC buffer
1695  5B9D ~
1696  5B9D ~            	LD IY, .RET
1697  5B9D ~            	JP ENABLE_PAGE0
1698  5B9D ~            .RET:
1699  5B9D ~            	EI
1700  5B9D ~            	CALL SHIFT_MERGE_CHARACTER
1701  5B9D ~
1702  5B9D ~                POP DE
1703  5B9D ~                POP BC
1704  5B9D ~                CALL RESTORE_PAGE_INFO
1705  5B9D ~
1706  5B9D ~            	POP HL
1707  5B9D ~            	RET
1708  5B9D ~            ; *******************************************************************************************************
1709  5B9D               ENDIF
1710  5B9D
1711  5B9D               IFDEF CMDS_WITH_PARAMETERS
1712  5B9D              ; *******************************************************************************************************
1713  5B9D              ; function to handle CALL BLIT basic extension
1714  5B9D              ; rotates 1-bit character drawing horizontally with mask and character data and
1715  5B9D              ; fuses with background data and applies vertical shift too
1716  5B9D              ; in form without pointers
1717  5B9D              ; BLIT ( INT x,
1718  5B9D              ;		 INT y,
1719  5B9D              ;		 INT char_data_pointer,
1720  5B9D              ;		 INT mask_data_pointer,
1721  5B9D              ;		 INT width (in characters),
1722  5B9D              ;		 INT height (in characters),
1723  5B9D              ;		 INT background_pointer (top left),
1724  5B9D              ;		 INT background_width (in characters),
1725  5B9D              ;		 INT background_height (in characters))
1726  5B9D              ; will put ram in page 0 also, page 1 is already there
1727  5B9D              BLIT:
1728  5B9D              	; opening (
1729  5B9D CD C3 56     	CALL CHKCHAR
1730  5BA0 28           	DB '('
1731  5BA1              	; get x coordinate
1732  5BA1 DD 21 2F 54  	LD IX, FRMQNT
1733  5BA5 CD 59 01     	CALL CALBAS
1734  5BA8 7B           	LD A, E
1735  5BA9 E6 07        	AND 7
1736  5BAB 32 19 54     	LD (BLIT_STRUCT+0), A
1737  5BAE CD 8B 5C     	CALL .DAdiv8
1738  5BB1 32 15 54     	LD (BLIT_TMP+0),A
1739  5BB4              	; comma
1740  5BB4 CD C3 56     	CALL CHKCHAR
1741  5BB7 2C           	DB ','
1742  5BB8              	; get y coordinate
1743  5BB8 DD 21 2F 54  	LD IX, FRMQNT
1744  5BBC CD 59 01     	CALL CALBAS
1745  5BBF 7B           	LD A, E
1746  5BC0 E6 07        	AND 7
1747  5BC2 32 1B 54     	LD (BLIT_STRUCT+2), A
1748  5BC5 CD 8B 5C     	CALL .DAdiv8
1749  5BC8 32 16 54     	LD (BLIT_TMP+1),A
1750  5BCB              	; comma
1751  5BCB CD C3 56     	CALL CHKCHAR
1752  5BCE 2C           	DB ','
1753  5BCF              	; get char data pointer
1754  5BCF DD 21 2F 54  	LD IX, FRMQNT
1755  5BD3 CD 59 01     	CALL CALBAS
1756  5BD6 ED 53 23 54  	LD (BLIT_STRUCT+10), DE
1757  5BDA              	; comma
1758  5BDA CD C3 56     	CALL CHKCHAR
1759  5BDD 2C           	DB ','
1760  5BDE              	; get mask data pointer
1761  5BDE DD 21 2F 54  	LD IX, FRMQNT
1762  5BE2 CD 59 01     	CALL CALBAS
1763  5BE5 ED 53 21 54  	LD (BLIT_STRUCT+8), DE
1764  5BE9              	; comma
1765  5BE9 CD C3 56     	CALL CHKCHAR
1766  5BEC 2C           	DB ','
1767  5BED              	; get width
1768  5BED DD 21 2F 54  	LD IX, FRMQNT
1769  5BF1 CD 59 01     	CALL CALBAS
1770  5BF4 7B           	LD A, E
1771  5BF5 32 27 54     	LD (BLIT_STRUCT+14), A
1772  5BF8              	; comma
1773  5BF8 CD C3 56     	CALL CHKCHAR
1774  5BFB 2C           	DB ','
1775  5BFC              	; get height
1776  5BFC DD 21 2F 54  	LD IX, FRMQNT
1777  5C00 CD 59 01     	CALL CALBAS
1778  5C03 7B           	LD A, E
1779  5C04 32 29 54     	LD (BLIT_STRUCT+16), A
1780  5C07              	; comma
1781  5C07 CD C3 56     	CALL CHKCHAR
1782  5C0A 2C           	DB ','
1783  5C0B              	; get background pointer
1784  5C0B DD 21 2F 54  	LD IX, FRMQNT
1785  5C0F CD 59 01     	CALL CALBAS
1786  5C12 ED 53 1D 54  	LD (BLIT_STRUCT+4), DE
1787  5C16              	; comma
1788  5C16 CD C3 56     	CALL CHKCHAR
1789  5C19 2C           	DB ','
1790  5C1A              	; get background width
1791  5C1A DD 21 2F 54  	LD IX, FRMQNT
1792  5C1E CD 59 01     	CALL CALBAS
1793  5C21 7B           	LD A, E
1794  5C22 32 17 54     	LD (BLIT_TMP+2), A
1795  5C25              	; comma
1796  5C25 CD C3 56     	CALL CHKCHAR
1797  5C28 2C           	DB ','
1798  5C29              	; get background height
1799  5C29 DD 21 2F 54  	LD IX, FRMQNT
1800  5C2D CD 59 01     	CALL CALBAS
1801  5C30 7B           	LD A, E
1802  5C31 32 18 54     	LD (BLIT_TMP+3), A
1803  5C34              	; ending )
1804  5C34 CD C3 56     	CALL CHKCHAR
1805  5C37 29           	DB ')'
1806  5C38
1807  5C38 E5           	PUSH HL ; save position in BASIC buffer
1808  5C39
1809  5C39              	; calculate char&mask add to value
1810  5C39 26 00        	LD H, 0
1811  5C3B 3A 27 54     	LD A, (BLIT_STRUCT+14)
1812  5C3E 6F           	LD L, A
1813  5C3F CD B2 55     	CALL HLx8
1814  5C42 22 25 54     	LD (BLIT_STRUCT+12), HL
1815  5C45              	; calculate background add to value
1816  5C45 26 00        	LD H, 0
1817  5C47 3A 17 54     	LD A, (BLIT_TMP+2)
1818  5C4A 6F           	LD L, A
1819  5C4B CD B2 55     	CALL HLx8
1820  5C4E 22 1F 54     	LD (BLIT_STRUCT+6), HL
1821  5C51              	; calculate pointer to background location
1822  5C51 21 00 00     	LD HL, 0
1823  5C54 3A 16 54     	LD A,(BLIT_TMP+1)
1824  5C57 B7           	OR A
1825  5C58 28 08        	JR Z, .L1
1826  5C5A 47           	LD B,A
1827  5C5B ED 5B 1F 54  	LD DE,(BLIT_STRUCT+6)
1828  5C5F              .L0:
1829  5C5F 19           	ADD HL, DE
1830  5C60 10 FD        	DJNZ .L0
1831  5C62              .L1:
1832  5C62 EB           	EX DE,HL
1833  5C63 26 00        	LD H,0
1834  5C65 3A 15 54     	LD A,(BLIT_TMP+0)
1835  5C68 6F           	LD L,A
1836  5C69 CD B2 55     	CALL HLx8
1837  5C6C 19           	ADD HL,DE
1838  5C6D ED 5B 1D 54  	LD DE,(BLIT_STRUCT+4)
1839  5C71 19           	ADD HL,DE
1840  5C72 22 1D 54     	LD (BLIT_STRUCT+4),HL
1841  5C75
1842  5C75 FD 21 7C 5C  	LD IY, .RET
1843  5C79 C3 76 56     	JP ENABLE_PAGE0
1844  5C7C              .RET:
1845  5C7C FB           	EI
1846  5C7D DD 21 19 54  	LD IX, BLIT_STRUCT
1847  5C81 CD 09 5B     	CALL SHIFT_MERGE_CHARACTER
1848  5C84
1849  5C84 D1               POP DE
1850  5C85 C1               POP BC
1851  5C86 CD ED 55         CALL RESTORE_PAGE_INFO
1852  5C89
1853  5C89 E1           	POP HL
1854  5C8A C9           	RET
1855  5C8B              .DAdiv8:
1856  5C8B 7B           	LD A,E
1857  5C8C CB 2A        	SRA D
1858  5C8E CB 1F            RR  A
1859  5C90 CB 2A            SRA D
1860  5C92 CB 1F            RR  A
1861  5C94 CB 2A            SRA D
1862  5C96 CB 1F            RR  A
1863  5C98 C9           	RET
1864  5C99              ; *******************************************************************************************************
1865  5C99               ENDIF
1866  5C99               ENDIF
1867  5C99
1868  5C99               IF (TILE_CMDS == 1)
1869  5C99              ; *******************************************************************************************************
1870  5C99              ; generic function to implement tiling
1871  5C99              ; should be modified to call appropriate function for memory or vram
1872  5C99              ; input IX=pointer to following structure
1873  5C99              ; +00 tile_data_ptr
1874  5C99              ; +02 tile_rows
1875  5C99              ; +04 tile_columns
1876  5C99              ; +06 destination_address
1877  5C99              ; +08 dest_to_next_row_add_to_value
1878  5C99              ; +10 num_horizontal_tiles
1879  5C99              ; +12 num_vertical_tiles
1880  5C99              ; modifies AF, BC, DE, HL
1881  5C99              TILE:
1882  5C99 DD 6E 06     	LD L, (IX+6)
1883  5C9C DD 66 07     	LD H, (IX+7) ; destination address
1884  5C9F 22 15 54     	LD (TILETMP1), HL
1885  5CA2 DD 46 0C     	LD B, (IX+12) ; vertical tile number
1886  5CA5              .L1:
1887  5CA5 C5           	PUSH BC
1888  5CA6 DD 6E 00     		LD L, (IX+0)
1889  5CA9 DD 66 01     		LD H, (IX+1) ; tile address
1890  5CAC 22 17 54     		LD (TILETMP2), HL
1891  5CAF DD 46 02     		LD B, (IX+2) ; tile rows
1892  5CB2              .L2:
1893  5CB2 C5           		PUSH BC
1894  5CB3              .CALL1:
1895  5CB3 CD 00 00     			CALL 0
1896  5CB6 DD 46 0A     			LD B, (IX+10) ; horizontal tile num
1897  5CB9              .L3:
1898  5CB9 C5           			PUSH BC
1899  5CBA 2A 17 54     				LD HL, (TILETMP2)
1900  5CBD DD 46 04     				LD B, (IX+4) ; tile columns
1901  5CC0              .L4:
1902  5CC0 C5           				PUSH BC
1903  5CC1              .CALL2:
1904  5CC1 CD 00 00     					CALL 0
1905  5CC4 C1           				POP BC
1906  5CC5 10 F9        				DJNZ .L4
1907  5CC7 C1           			POP BC
1908  5CC8 10 EF        			DJNZ .L3
1909  5CCA 22 17 54     			LD (TILETMP2), HL
1910  5CCD 2A 15 54     			LD HL, (TILETMP1)
1911  5CD0 DD 5E 08     			LD E, (IX+8)
1912  5CD3 DD 56 09     			LD D, (IX+9) ; add to value for dest next row
1913  5CD6 19           			ADD HL, DE
1914  5CD7 22 15 54     			LD (TILETMP1), HL
1915  5CDA C1           		POP BC
1916  5CDB 10 D5        		DJNZ .L2
1917  5CDD C1           	POP BC
1918  5CDE 10 C5        	DJNZ .L1
1919  5CE0 C9           	RET
1920  5CE1              ; *******************************************************************************************************
1921  5CE1
1922  5CE1               IFNDEF CMDS_WITH_PARAMETERS
1923  5CE1 ~            ; *******************************************************************************************************
1924  5CE1 ~            ; function to handle CALL TILERAM basic extension
1925  5CE1 ~            ; fills memory with tiles
1926  5CE1 ~            ; TILERAM ( INT request_data_ptr )
1927  5CE1 ~            ; request_data_ptr described in TILE
1928  5CE1 ~            ; will put ram in page 0 also, page 1 is already there
1929  5CE1 ~            TILERAM:
1930  5CE1 ~            	; opening (
1931  5CE1 ~            	CALL CHKCHAR
1932  5CE1 ~            	DB '('
1933  5CE1 ~            	; get pointer to request struct
1934  5CE1 ~            	LD IX, FRMQNT
1935  5CE1 ~            	CALL CALBAS
1936  5CE1 ~            	PUSH DE
1937  5CE1 ~            	; ending )
1938  5CE1 ~            	CALL CHKCHAR
1939  5CE1 ~            	DB ')'
1940  5CE1 ~
1941  5CE1 ~            	POP IX ; pointer to request struct
1942  5CE1 ~
1943  5CE1 ~            	PUSH HL ; save position in BASIC buffer
1944  5CE1 ~
1945  5CE1 ~            	LD IY, .RET
1946  5CE1 ~            	JP ENABLE_PAGE0
1947  5CE1 ~            .RET:
1948  5CE1 ~            	EI
1949  5CE1 ~            	; set RAM functions to call
1950  5CE1 ~            	LD HL, .TILECOPY
1951  5CE1 ~            	LD (TILE.CALL2+1), HL
1952  5CE1 ~            	LD HL, .SETDESTROW
1953  5CE1 ~            	LD (TILE.CALL1+1), HL
1954  5CE1 ~            	LD A,1
1955  5CE1 ~            	LD (VRAM_UPDATE_IN_PROGRESS),A
1956  5CE1 ~            	CALL TILE
1957  5CE1 ~            	XOR A
1958  5CE1 ~            	LD (VRAM_UPDATE_IN_PROGRESS),A
1959  5CE1 ~
1960  5CE1 ~                POP DE
1961  5CE1 ~                POP BC
1962  5CE1 ~                CALL RESTORE_PAGE_INFO
1963  5CE1 ~
1964  5CE1 ~            	POP HL
1965  5CE1 ~            	RET
1966  5CE1 ~            .TILECOPY:
1967  5CE1 ~            	.8 LDI
1968  5CE1 ~            	RET
1969  5CE1 ~            .SETDESTROW:
1970  5CE1 ~            	LD DE, (TILETMP1)
1971  5CE1 ~            	RET
1972  5CE1 ~            ; *******************************************************************************************************
1973  5CE1               ENDIF
1974  5CE1
1975  5CE1               IFDEF CMDS_WITH_PARAMETERS
1976  5CE1              ; *******************************************************************************************************
1977  5CE1              ; function to handle CALL TILERAM basic extension
1978  5CE1              ; fills memory with tiles
1979  5CE1              ; TILERAM ( INT tile_data_pointer,
1980  5CE1              ;			INT tile_columns,
1981  5CE1              ;			INT tile_rows,
1982  5CE1              ;			INT destination_pointer,
1983  5CE1              ;			INT destination_columns,
1984  5CE1              ;			INT destination_rows,
1985  5CE1              ;			INT destination_begin_column,
1986  5CE1              ;			INT destination_begin_row,
1987  5CE1              ;			INT number_of_tiles_horizontally,
1988  5CE1              ;			INT	number_of_tiles_vertically )
1989  5CE1              ; will put ram in page 0 also, page 1 is already there
1990  5CE1              TILERAM:
1991  5CE1              	; opening (
1992  5CE1 CD C3 56     	CALL CHKCHAR
1993  5CE4 28           	DB '('
1994  5CE5              	; get tile data pointer coordinate
1995  5CE5 DD 21 2F 54  	LD IX, FRMQNT
1996  5CE9 CD 59 01     	CALL CALBAS
1997  5CEC ED 53 19 54  	LD (BLIT_STRUCT+0), DE
1998  5CF0              	; comma
1999  5CF0 CD C3 56     	CALL CHKCHAR
2000  5CF3 2C           	DB ','
2001  5CF4              	; get tile columns
2002  5CF4 DD 21 2F 54  	LD IX, FRMQNT
2003  5CF8 CD 59 01     	CALL CALBAS
2004  5CFB ED 53 1D 54  	LD (BLIT_STRUCT+4), DE
2005  5CFF              	; comma
2006  5CFF CD C3 56     	CALL CHKCHAR
2007  5D02 2C           	DB ','
2008  5D03              	; get tile columns
2009  5D03 DD 21 2F 54  	LD IX, FRMQNT
2010  5D07 CD 59 01     	CALL CALBAS
2011  5D0A ED 53 1B 54  	LD (BLIT_STRUCT+2), DE
2012  5D0E              	; comma
2013  5D0E CD C3 56     	CALL CHKCHAR
2014  5D11 2C           	DB ','
2015  5D12              	; get destintion pointer
2016  5D12 DD 21 2F 54  	LD IX, FRMQNT
2017  5D16 CD 59 01     	CALL CALBAS
2018  5D19 ED 53 1F 54  	LD (BLIT_STRUCT+6), DE
2019  5D1D              	; comma
2020  5D1D CD C3 56     	CALL CHKCHAR
2021  5D20 2C           	DB ','
2022  5D21              	; get destination columns
2023  5D21 DD 21 2F 54  	LD IX, FRMQNT
2024  5D25 CD 59 01     	CALL CALBAS
2025  5D28 7B           	LD A, E
2026  5D29 32 15 54     	LD (BLIT_TMP+0), A
2027  5D2C              	; comma
2028  5D2C CD C3 56     	CALL CHKCHAR
2029  5D2F 2C           	DB ','
2030  5D30              	; get destination rows
2031  5D30 DD 21 2F 54  	LD IX, FRMQNT
2032  5D34 CD 59 01     	CALL CALBAS
2033  5D37 7B           	LD A, E
2034  5D38 32 16 54     	LD (BLIT_TMP+1), A
2035  5D3B              	; comma
2036  5D3B CD C3 56     	CALL CHKCHAR
2037  5D3E 2C           	DB ','
2038  5D3F              	; get destination begin column
2039  5D3F DD 21 2F 54  	LD IX, FRMQNT
2040  5D43 CD 59 01     	CALL CALBAS
2041  5D46 7B           	LD A, E
2042  5D47 32 17 54     	LD (BLIT_TMP+2), A
2043  5D4A              	; comma
2044  5D4A CD C3 56     	CALL CHKCHAR
2045  5D4D 2C           	DB ','
2046  5D4E              	; get destination begin row
2047  5D4E DD 21 2F 54  	LD IX, FRMQNT
2048  5D52 CD 59 01     	CALL CALBAS
2049  5D55 7B           	LD A, E
2050  5D56 32 18 54     	LD (BLIT_TMP+3), A
2051  5D59              	; comma
2052  5D59 CD C3 56     	CALL CHKCHAR
2053  5D5C 2C           	DB ','
2054  5D5D              	; get number of tiles horizontally
2055  5D5D DD 21 2F 54  	LD IX, FRMQNT
2056  5D61 CD 59 01     	CALL CALBAS
2057  5D64 ED 53 23 54  	LD (BLIT_STRUCT+10), DE
2058  5D68              	; comma
2059  5D68 CD C3 56     	CALL CHKCHAR
2060  5D6B 2C           	DB ','
2061  5D6C              	; get number of tiles vertically
2062  5D6C DD 21 2F 54  	LD IX, FRMQNT
2063  5D70 CD 59 01     	CALL CALBAS
2064  5D73 ED 53 25 54  	LD (BLIT_STRUCT+12), DE
2065  5D77              	; ending )
2066  5D77 CD C3 56     	CALL CHKCHAR
2067  5D7A 29           	DB ')'
2068  5D7B
2069  5D7B E5           	PUSH HL ; save position in BASIC buffer
2070  5D7C
2071  5D7C              	; calculate destination add to value
2072  5D7C 26 00        	LD H, 0
2073  5D7E 3A 15 54     	LD A, (BLIT_TMP+0)
2074  5D81 6F           	LD L, A
2075  5D82 CD B2 55     	CALL HLx8
2076  5D85 22 21 54     	LD (BLIT_STRUCT+8), HL
2077  5D88              	; calculate pointer to background location
2078  5D88 21 00 00     	LD HL, 0
2079  5D8B 3A 18 54     	LD A,(BLIT_TMP+3)
2080  5D8E B7           	OR A
2081  5D8F 28 08        	JR Z, .L1
2082  5D91 47           	LD B,A
2083  5D92 ED 5B 21 54  	LD DE,(BLIT_STRUCT+8)
2084  5D96              .L0:
2085  5D96 19           	ADD HL, DE
2086  5D97 10 FD        	DJNZ .L0
2087  5D99              .L1:
2088  5D99 EB           	EX DE,HL
2089  5D9A 26 00        	LD H,0
2090  5D9C 3A 17 54     	LD A,(BLIT_TMP+2)
2091  5D9F 6F           	LD L,A
2092  5DA0 CD B2 55     	CALL HLx8
2093  5DA3 19           	ADD HL,DE
2094  5DA4 ED 5B 1F 54  	LD DE,(BLIT_STRUCT+6)
2095  5DA8 19           	ADD HL,DE
2096  5DA9 22 1F 54     	LD (BLIT_STRUCT+6),HL
2097  5DAC
2098  5DAC FD 21 B3 5D  	LD IY, .RET
2099  5DB0 C3 76 56     	JP ENABLE_PAGE0
2100  5DB3              .RET:
2101  5DB3 FB           	EI
2102  5DB4              	; set RAM functions to call
2103  5DB4 21 CE 5D     	LD HL, .TILECOPY
2104  5DB7 22 C2 5C     	LD (TILE.CALL2+1), HL
2105  5DBA 21 DF 5D     	LD HL, .SETDESTROW
2106  5DBD 22 B4 5C     	LD (TILE.CALL1+1), HL
2107  5DC0 DD 21 19 54  	LD IX,BLIT_STRUCT
2108  5DC4 CD 99 5C     	CALL TILE
2109  5DC7
2110  5DC7 D1               POP DE
2111  5DC8 C1               POP BC
2112  5DC9 CD ED 55         CALL RESTORE_PAGE_INFO
2113  5DCC
2114  5DCC E1           	POP HL
2115  5DCD C9           	RET
2116  5DCE              .TILECOPY:
2117  5DCE ED A0       > LDI
2117  5DD0 ED A0       > LDI
2117  5DD2 ED A0       > LDI
2117  5DD4 ED A0       > LDI
2117  5DD6 ED A0       > LDI
2117  5DD8 ED A0       > LDI
2117  5DDA ED A0       > LDI
2117  5DDC ED A0       > LDI
2118  5DDE C9           	RET
2119  5DDF              .SETDESTROW:
2120  5DDF ED 5B 15 54  	LD DE, (TILETMP1)
2121  5DE3 C9           	RET
2122  5DE4              ; *******************************************************************************************************
2123  5DE4               ENDIF
2124  5DE4
2125  5DE4               IFDEF CMDS_WITH_PARAMETERS
2126  5DE4              ; *******************************************************************************************************
2127  5DE4              ; function to handle CALL TILEVRM basic extension
2128  5DE4              ; fills vram with tiles
2129  5DE4              ; TILEVRM ( INT tile_data_pointer,
2130  5DE4              ;			INT tile_columns,
2131  5DE4              ;			INT tile_rows,
2132  5DE4              ;			INT destination_begin_column,
2133  5DE4              ;			INT destination_begin_row,
2134  5DE4              ;			INT number_of_tiles_horizontally,
2135  5DE4              ;			INT	number_of_tiles_vertically )
2136  5DE4              ; will put ram in page 0 also, page 1 is already there
2137  5DE4              ; for destination uses address of SCREEN 2 pattern buffer and 32x24 size
2138  5DE4              TILEVRM:
2139  5DE4              	; opening (
2140  5DE4 CD C3 56     	CALL CHKCHAR
2141  5DE7 28           	DB '('
2142  5DE8              	; get tile data pointer coordinate
2143  5DE8 DD 21 2F 54  	LD IX, FRMQNT
2144  5DEC CD 59 01     	CALL CALBAS
2145  5DEF ED 53 19 54  	LD (BLIT_STRUCT+0), DE
2146  5DF3              	; comma
2147  5DF3 CD C3 56     	CALL CHKCHAR
2148  5DF6 2C           	DB ','
2149  5DF7              	; get tile columns
2150  5DF7 DD 21 2F 54  	LD IX, FRMQNT
2151  5DFB CD 59 01     	CALL CALBAS
2152  5DFE ED 53 1D 54  	LD (BLIT_STRUCT+4), DE
2153  5E02              	; comma
2154  5E02 CD C3 56     	CALL CHKCHAR
2155  5E05 2C           	DB ','
2156  5E06              	; get tile columns
2157  5E06 DD 21 2F 54  	LD IX, FRMQNT
2158  5E0A CD 59 01     	CALL CALBAS
2159  5E0D ED 53 1B 54  	LD (BLIT_STRUCT+2), DE
2160  5E11              	; comma
2161  5E11 CD C3 56     	CALL CHKCHAR
2162  5E14 2C           	DB ','
2163  5E15              	; get destination begin column
2164  5E15 DD 21 2F 54  	LD IX, FRMQNT
2165  5E19 CD 59 01     	CALL CALBAS
2166  5E1C 7B           	LD A, E
2167  5E1D 32 17 54     	LD (BLIT_TMP+2), A
2168  5E20              	; comma
2169  5E20 CD C3 56     	CALL CHKCHAR
2170  5E23 2C           	DB ','
2171  5E24              	; get destination begin row
2172  5E24 DD 21 2F 54  	LD IX, FRMQNT
2173  5E28 CD 59 01     	CALL CALBAS
2174  5E2B 7B           	LD A, E
2175  5E2C 32 18 54     	LD (BLIT_TMP+3), A
2176  5E2F              	; comma
2177  5E2F CD C3 56     	CALL CHKCHAR
2178  5E32 2C           	DB ','
2179  5E33              	; get number of tiles horizontally
2180  5E33 DD 21 2F 54  	LD IX, FRMQNT
2181  5E37 CD 59 01     	CALL CALBAS
2182  5E3A ED 53 23 54  	LD (BLIT_STRUCT+10), DE
2183  5E3E              	; comma
2184  5E3E CD C3 56     	CALL CHKCHAR
2185  5E41 2C           	DB ','
2186  5E42              	; get number of tiles vertically
2187  5E42 DD 21 2F 54  	LD IX, FRMQNT
2188  5E46 CD 59 01     	CALL CALBAS
2189  5E49 ED 53 25 54  	LD (BLIT_STRUCT+12), DE
2190  5E4D              	; ending )
2191  5E4D CD C3 56     	CALL CHKCHAR
2192  5E50 29           	DB ')'
2193  5E51
2194  5E51 E5           	PUSH HL ; save position in BASIC buffer
2195  5E52
2196  5E52              	; calculate destination add to value
2197  5E52 21 00 01     	LD HL, 256
2198  5E55 22 21 54     	LD (BLIT_STRUCT+8), HL
2199  5E58              	; calculate pointer to background location
2200  5E58 3A 18 54     	LD A,(BLIT_TMP+3)
2201  5E5B 67           	LD H,A
2202  5E5C 2E 00        	LD L,0
2203  5E5E EB           	EX DE,HL
2204  5E5F 26 00        	LD H,0
2205  5E61 3A 17 54     	LD A,(BLIT_TMP+2)
2206  5E64 6F           	LD L,A
2207  5E65 CD B2 55     	CALL HLx8
2208  5E68 19           	ADD HL,DE
2209  5E69 ED 5B CB F3  	LD DE,(GRPCGP)
2210  5E6D 19           	ADD HL,DE
2211  5E6E 22 1F 54     	LD (BLIT_STRUCT+6),HL
2212  5E71
2213  5E71 FD 21 78 5E  	LD IY, .RET
2214  5E75 C3 76 56     	JP ENABLE_PAGE0
2215  5E78              .RET:
2216  5E78 FB           	EI
2217  5E79              	; set RAM functions to call
2218  5E79 21 93 5E     	LD HL, .TILECOPY
2219  5E7C 22 C2 5C     	LD (TILE.CALL2+1), HL
2220  5E7F 21 99 5E     	LD HL, .SETDESTROW
2221  5E82 22 B4 5C     	LD (TILE.CALL1+1), HL
2222  5E85 DD 21 19 54  	LD IX,BLIT_STRUCT
2223  5E89 CD 99 5C     	CALL TILE
2224  5E8C
2225  5E8C D1               POP DE
2226  5E8D C1               POP BC
2227  5E8E CD ED 55         CALL RESTORE_PAGE_INFO
2228  5E91
2229  5E91 E1           	POP HL
2230  5E92 C9           	RET
2231  5E93              .TILECOPY:
2232  5E93 01 98 08     	LD BC, #0898
2233  5E96 C3 AA 55     	JP BBYTECOPY
2234  5E99              .SETDESTROW:
2235  5E99 2A 15 54     	LD HL, (TILETMP1)
2236  5E9C F3           	DI
2237  5E9D CD 9F 55     	CALL SETWRT_LOCAL
2238  5EA0 FB           	EI
2239  5EA1 C9           	RET
2240  5EA2              ; *******************************************************************************************************
2241  5EA2               ENDIF
2242  5EA2
2243  5EA2               IFNDEF CMDS_WITH_PARAMETERS
2244  5EA2 ~            ; *******************************************************************************************************
2245  5EA2 ~            ; function to handle CALL TILEVRM basic extension
2246  5EA2 ~            ; fills vram with tiles
2247  5EA2 ~            ; TILEVRM ( INT request_data_ptr )
2248  5EA2 ~            ; request_data_ptr described in TILE
2249  5EA2 ~            ; will put ram in page 0 also, page 1 is already there
2250  5EA2 ~            TILEVRM:
2251  5EA2 ~            	; opening (
2252  5EA2 ~            	CALL CHKCHAR
2253  5EA2 ~            	DB '('
2254  5EA2 ~            	; get pointer to request struct
2255  5EA2 ~            	LD IX, FRMQNT
2256  5EA2 ~            	CALL CALBAS
2257  5EA2 ~            	PUSH DE
2258  5EA2 ~            	; ending )
2259  5EA2 ~            	CALL CHKCHAR
2260  5EA2 ~            	DB ')'
2261  5EA2 ~
2262  5EA2 ~            	POP IX ; pointer to request struct
2263  5EA2 ~
2264  5EA2 ~            	PUSH HL ; save position in BASIC buffer
2265  5EA2 ~
2266  5EA2 ~            	LD IY, .RET
2267  5EA2 ~            	JP ENABLE_PAGE0
2268  5EA2 ~            .RET:
2269  5EA2 ~            	EI
2270  5EA2 ~            	; set RAM functions to call
2271  5EA2 ~            	LD HL, .TILECOPY
2272  5EA2 ~            	LD (TILE.CALL2+1), HL
2273  5EA2 ~            	LD HL, .SETDESTROW
2274  5EA2 ~            	LD (TILE.CALL1+1), HL
2275  5EA2 ~            	CALL TILE
2276  5EA2 ~
2277  5EA2 ~                POP DE
2278  5EA2 ~                POP BC
2279  5EA2 ~                CALL RESTORE_PAGE_INFO
2280  5EA2 ~
2281  5EA2 ~            	POP HL
2282  5EA2 ~            	RET
2283  5EA2 ~            .TILECOPY:
2284  5EA2 ~            	LD BC, #0898
2285  5EA2 ~            	JP BBYTECOPY
2286  5EA2 ~            .SETDESTROW:
2287  5EA2 ~            	LD HL, (TILETMP1)
2288  5EA2 ~            	DI
2289  5EA2 ~            	CALL SETWRT_LOCAL
2290  5EA2 ~            	EI
2291  5EA2 ~            	RET
2292  5EA2 ~            ; *******************************************************************************************************
2293  5EA2               ENDIF
2294  5EA2               ENDIF
2295  5EA2
2296  5EA2               IF (BOX_CMDS == 1)
2297  5EA2              ; *******************************************************************************************************
2298  5EA2              ; generic function to implement rectangle data copy
2299  5EA2              ; should be modified to call appropriate function for memory or vram
2300  5EA2              ; input IX=pointer to following structure
2301  5EA2              ; +00 source data pointer
2302  5EA2              ; +02 num bytes in a row
2303  5EA2              ; +04 number of rows
2304  5EA2              ; +06 source add-to value till next row
2305  5EA2              ; +08 destination address
2306  5EA2              ; +10 destination add-to value till next row
2307  5EA2              ; modifies AF, BC, DE, HL
2308  5EA2              RECTANGLE_COPY:
2309  5EA2 DD 6E 00     	LD L, (IX+0)
2310  5EA5 DD 66 01     	LD H, (IX+1) ; source address
2311  5EA8 DD 5E 08     	LD E, (IX+8)
2312  5EAB DD 56 09     	LD D, (IX+9) ; destination
2313  5EAE DD 46 04     	LD B, (IX+4) ; row number
2314  5EB1              .L1:
2315  5EB1 C5           	PUSH BC
2316  5EB2 E5           		PUSH HL
2317  5EB3 D5           			PUSH DE
2318  5EB4 DD 4E 02     				LD C, (IX+2)
2319  5EB7 DD 46 03     				LD B, (IX+3) ; num bytes in a row
2320  5EBA              .CALL1:
2321  5EBA CD 00 00     				CALL 0 ; set destination address from DE
2322  5EBD              .CALL2:
2323  5EBD CD 00 00     				CALL 0 ; copy data fn
2324  5EC0 E1           			POP HL
2325  5EC1 DD 4E 0A     			LD C, (IX+10)
2326  5EC4 DD 46 0B     			LD B, (IX+11) ; destination add-to
2327  5EC7 09           			ADD HL, BC
2328  5EC8 EB           			EX DE, HL
2329  5EC9 E1           		POP HL
2330  5ECA DD 4E 06     		LD C, (IX+6)
2331  5ECD DD 46 07     		LD B, (IX+7) ; src add-to
2332  5ED0 09           		ADD HL, BC
2333  5ED1 C1           	POP BC
2334  5ED2 10 DD        	DJNZ .L1
2335  5ED4 C9           	RET
2336  5ED5              ; *******************************************************************************************************
2337  5ED5
2338  5ED5              ; *******************************************************************************************************
2339  5ED5              ; function to handle CALL BOXMEMCPY basic extension
2340  5ED5              ; copies data with window like boundaries to ram
2341  5ED5              ; BOXMEMCPY ( INT request_data_ptr )
2342  5ED5              ; request_data_ptr described in RECTANGLE_COPY
2343  5ED5              ; will put ram in page 0 also, page 1 is already there
2344  5ED5              BOXMEMCPY:
2345  5ED5              	; opening (
2346  5ED5 CD C3 56     	CALL CHKCHAR
2347  5ED8 28           	DB '('
2348  5ED9              	; get pointer to request struct
2349  5ED9 DD 21 2F 54  	LD IX, FRMQNT
2350  5EDD CD 59 01     	CALL CALBAS
2351  5EE0 D5           	PUSH DE
2352  5EE1              	; ending )
2353  5EE1 CD C3 56     	CALL CHKCHAR
2354  5EE4 29           	DB ')'
2355  5EE5
2356  5EE5 DD E1        	POP IX ; pointer to request struct
2357  5EE7
2358  5EE7 E5           	PUSH HL ; save position in BASIC buffer
2359  5EE8
2360  5EE8 FD 21 EF 5E  	LD IY, .RET
2361  5EEC C3 76 56     	JP ENABLE_PAGE0
2362  5EEF              .RET:
2363  5EEF FB           	EI
2364  5EF0              	; set RAM functions to call
2365  5EF0 21 00 00     	LD HL, 0
2366  5EF3 22 BA 5E     	LD (RECTANGLE_COPY.CALL1), HL ; NOP NOP
2367  5EF6 22 BC 5E     	LD (RECTANGLE_COPY.CALL1+2), HL ; NOP NOP
2368  5EF9 21 ED B0     	LD HL, #B0ED ; LDIR
2369  5EFC 22 BE 5E     	LD (RECTANGLE_COPY.CALL1+4), HL
2370  5EFF CD A2 5E     	CALL RECTANGLE_COPY
2371  5F02
2372  5F02 D1               POP DE
2373  5F03 C1               POP BC
2374  5F04 CD ED 55         CALL RESTORE_PAGE_INFO
2375  5F07
2376  5F07 E1           	POP HL
2377  5F08 C9           	RET
2378  5F09              ; *******************************************************************************************************
2379  5F09
2380  5F09              ; *******************************************************************************************************
2381  5F09              ; function to handle CALL BOXMEMVRM basic extension
2382  5F09              ; copies data with window like boundaries to ram
2383  5F09              ; BOXMEMVRM ( INT request_data_ptr )
2384  5F09              ; request_data_ptr described in RECTANGLE_COPY
2385  5F09              ; will put ram in page 0 also, page 1 is already there
2386  5F09              BOXMEMVRM:
2387  5F09              	; opening (
2388  5F09 CD C3 56     	CALL CHKCHAR
2389  5F0C 28           	DB '('
2390  5F0D              	; get pointer to request struct
2391  5F0D DD 21 2F 54  	LD IX, FRMQNT
2392  5F11 CD 59 01     	CALL CALBAS
2393  5F14 D5           	PUSH DE
2394  5F15              	; ending )
2395  5F15 CD C3 56     	CALL CHKCHAR
2396  5F18 29           	DB ')'
2397  5F19
2398  5F19 DD E1        	POP IX ; pointer to request struct
2399  5F1B
2400  5F1B E5           	PUSH HL ; save position in BASIC buffer
2401  5F1C
2402  5F1C FD 21 23 5F  	LD IY, .RET
2403  5F20 C3 76 56     	JP ENABLE_PAGE0
2404  5F23              .RET:
2405  5F23 FB           	EI
2406  5F24              	; set RAM functions to call
2407  5F24 21 4B 5F     	LD HL, .SETDEST
2408  5F27 22 BB 5E     	LD (RECTANGLE_COPY.CALL1+1), HL
2409  5F2A 21 53 5F     	LD HL, .COPYDATA
2410  5F2D 22 BE 5E     	LD (RECTANGLE_COPY.CALL2+1), HL
2411  5F30 3E CD        	LD A, #CD ; CALL
2412  5F32 32 BA 5E     	LD (RECTANGLE_COPY.CALL1), A
2413  5F35 32 BD 5E     	LD (RECTANGLE_COPY.CALL2), A
2414  5F38 3E 01        	LD A,1
2415  5F3A 32 2A 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
2416  5F3D CD A2 5E     	CALL RECTANGLE_COPY
2417  5F40 AF           	XOR A
2418  5F41 32 2A 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
2419  5F44
2420  5F44 D1               POP DE
2421  5F45 C1               POP BC
2422  5F46 CD ED 55         CALL RESTORE_PAGE_INFO
2423  5F49
2424  5F49 E1           	POP HL
2425  5F4A C9           	RET
2426  5F4B              .SETDEST:
2427  5F4B EB           	EX DE, HL
2428  5F4C F3           	DI
2429  5F4D CD 9F 55     	CALL SETWRT_LOCAL
2430  5F50 FB           	EI
2431  5F51 EB           	EX DE, HL
2432  5F52 C9           	RET
2433  5F53              .COPYDATA:
2434  5F53 41           	LD B, C
2435  5F54 0E 98        	LD C, #98
2436  5F56 C3 AA 55     	JP BBYTECOPY
2437  5F59              ; *******************************************************************************************************
2438  5F59               ENDIF
2439  5F59
2440  5F59              EXT_END:
2441  5F59
# file closed: asm\main.asm
