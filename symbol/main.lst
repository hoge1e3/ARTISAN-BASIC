# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; INCLUDE "system_variables.inc"
   4  4000              ; INCLUDE "system_hooks.inc"
   5  4000              ; INCLUDE "bios_calls.inc"
   6  4000
   7  4000              CHPUT   EQU     #A2
   8  4000              CALBAS	EQU		#159
   9  4000              ERRHAND EQU     #406F
  10  4000              FRMEVL  EQU     #4C64
  11  4000              FRESTR	EQU		#67D0
  12  4000              ; FRMQNT = formula quantificator
  13  4000              ; input HL=pointer to current program expression
  14  4000              ; output HL=next address
  15  4000              ; output DE=integer datum
  16  4000              FRMQNT	EQU		#542F
  17  4000              ; GETBYT = get byte parameter
  18  4000              ; input HL=pointer to current program expression
  19  4000              ; output HL=next address
  20  4000              ; output A=E=byte read
  21  4000              GETBYT	EQU		#521C
  22  4000              CHRGTR  EQU     #4666
  23  4000              SYNCHR	EQU		#558C
  24  4000              VALTYP  EQU     #F663
  25  4000              USR     EQU     #F7F8
  26  4000              PROCNM	EQU		#FD89
  27  4000              BIOS_FILVRM  EQU     #56
  28  4000              CLIKSW	EQU		#F3DB
  29  4000              ATRBAS	EQU		#F928
  30  4000
  31  4000              RAMAD0	EQU	0F341h	; Main-RAM Slot (00000h~03FFFh)
  32  4000              RAMAD1	EQU	0F342h	; Main-RAM Slot (04000h~07FFFh)
  33  4000              RAMAD2	EQU	0F343h	; Main-RAM Slot (08000h~0BFFFh)
  34  4000              RAMAD3	EQU	0F344h	; Main-RAM Slot (0C000h~0FFFFh)
  35  4000              EXPTBL	EQU #FCC1
  36  4000              SCRMOD	EQU #FCAF ; current screen mode
  37  4000
  38  4000              ; BASIC error codes
  39  4000              ;01 NEXT without FOR
  40  4000              ;02 Syntax error
  41  4000              ;03 RETURN without GOSUB
  42  4000              ;04 Out of DATA
  43  4000              ;05 Illegal function call
  44  4000              ;06 Overflow
  45  4000              ;07 Out of memory
  46  4000              ;08 Undefined line number
  47  4000              ;09 Subscript out of range
  48  4000              ;10 Redimensioned array
  49  4000              ;11 Division by zero
  50  4000              ;12 Illegal direct
  51  4000              ;13 Type mismatch
  52  4000              ;14 Out of string space
  53  4000              ;15 String too long
  54  4000              ;16 String formula too complex
  55  4000              ;17 Can't CONTINUE
  56  4000              ;18 Undefined user function
  57  4000              ;19 Device I/O error
  58  4000              ;20 Verify error
  59  4000              ;21 No RESUME
  60  4000              ;22 RESUME without error
  61  4000              ;23 Unprintable error
  62  4000              ;24 Missing operand
  63  4000              ;25 Line buffer overflow
  64  4000              ;50 FIELD overflow
  65  4000              ;51 Internal error
  66  4000              ;52 Bad file number
  67  4000              ;53 File not found
  68  4000              ;54 File already open
  69  4000              ;55 Input past end
  70  4000              ;56 Bad file name
  71  4000              ;57 Direct statement in file
  72  4000              ;58 Sequential I/O only
  73  4000              ;59 File not OPEN
  74  4000
  75  4000
  76  4000               ; simulate cartridge with BASIC extension
  77  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  77  4004 60 4F 00 00
  77  4008 00 00 00 00
  77  400C 00 00 00 00
  78  4010
  79  4010              ; this location #400A stores last location used by basic extension
  80  4010              ; free memory after that point
  81  4010 88 56         DW EXT_END
  82  4012
  83  4012              ; binary included AKG player compiled at #4012
  84  4012               INCBIN "bin/AKG.bin"
  85  4CEE               INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CEE              MAIN_PLAYER_START EQU 04012H
   2+ 4CEE              PLY_AKG_START EQU 04012H
   3+ 4CEE              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401BH
   4+ 4CEE              PLY_AKG_INITSOUNDEFFECTS EQU 0401BH
   5+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 0401FH
   6+ 4CEE              PLY_AKG_PLAYSOUNDEFFECT EQU 0401FH
   7+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04020H
   8+ 4CEE              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04020H
   9+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04047H
  10+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04047H
  11+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04055H
  12+ 4CEE              PLY_AKG_PSES_PLAY EQU 0408EH
  13+ 4CEE              PLY_AKG_PSES_READFIRSTBYTE EQU 04097H
  14+ 4CEE              PLY_AKG_PSES_S_ENDORLOOP EQU 040AFH
  15+ 4CEE              PLY_AKG_PSES_S_LOOP EQU 040BAH
  16+ 4CEE              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C0H
  17+ 4CEE              PLY_AKG_PSES_NOTREACHED EQU 040D3H
  18+ 4CEE              PLY_AKG_PSES_HARDWAREONLY EQU 040D7H
  19+ 4CEE              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040DEH
  20+ 4CEE              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F0H
  21+ 4CEE              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FAH
  22+ 4CEE              PLY_AKG_PSES_H_AFTERRETRIG EQU 04104H
  23+ 4CEE              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 04118H
  24+ 4CEE              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411DH
  25+ 4CEE              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04125H
  26+ 4CEE              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04130H
  27+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413CH
  28+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 0413EH
  29+ 4CEE              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04144H
  30+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 04148H
  31+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 04148H
  32+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414AH
  33+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414AH
  34+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414AH
  35+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414BH
  36+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414CH
  37+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04150H
  38+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04150H
  39+ 4CEE              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04150H
  40+ 4CEE              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 04158H
  41+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04160H
  42+ 4CEE              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04160H
  43+ 4CEE              PLY_AKG_INIT EQU 04160H
  44+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04160H
  45+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 0418EH
  46+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A2H
  47+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B4H
  48+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D3H
  49+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E0H
  50+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL EQU 041E6H
  51+ 4CEE              PLY_AKG_INITTABLE0 EQU 041E9H
  52+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041E9H
  53+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04203H
  54+ 4CEE              PLY_AKG_INITTABLE0_END EQU 04203H
  55+ 4CEE              PLY_AKG_INITTABLE1 EQU 04203H
  56+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04203H
  57+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04207H
  58+ 4CEE              PLY_AKG_INITTABLE1_END EQU 04207H
  59+ 4CEE              PLY_AKG_INITTABLEORA EQU 04207H
  60+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04207H
  61+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 0421FH
  62+ 4CEE              PLY_AKG_INITTABLEORA_END EQU 0421FH
  63+ 4CEE              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 0421FH
  64+ 4CEE              PLY_AKG_STOP EQU 0421FH
  65+ 4CEE              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04231H
  66+ 4CEE              PLY_AKG_PLAY EQU 04231H
  67+ 4CEE              PLY_AKG_TICKDECREASINGCOUNTER EQU 04239H
  68+ 4CEE              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 0423FH
  69+ 4CEE              PLY_AKG_READLINKER EQU 04244H
  70+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04244H
  71+ 4CEE              PLY_AKG_READLINKER_PTLINKER EQU 04244H
  72+ 4CEE              PLY_AKG_READLINKER_NOLOOP EQU 0424FH
  73+ 4CEE              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 04288H
  74+ 4CEE              PLY_AKG_READLINE EQU 0428BH
  75+ 4CEE              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428BH
  76+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04291H
  77+ 4CEE              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04291H
  78+ 4CEE              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 0429EH
  79+ 4CEE              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A2H
  80+ 4CEE              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A5H
  81+ 4CEE              PLY_AKG_SPEEDTRACK_END EQU 042A8H
  82+ 4CEE              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042A8H
  83+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042AEH
  84+ 4CEE              PLY_AKG_EVENTTRACK_PTTRACK EQU 042AEH
  85+ 4CEE              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BBH
  86+ 4CEE              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042BFH
  87+ 4CEE              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C2H
  88+ 4CEE              PLY_AKG_EVENTTRACK_END EQU 042C5H
  89+ 4CEE              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C5H
  90+ 4CEE              PLY_AKG_CHANNEL1_READTRACK EQU 042D1H
  91+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D1H
  92+ 4CEE              PLY_AKG_CHANNEL1_PTTRACK EQU 042D1H
  93+ 4CEE              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042ECH
  94+ 4CEE              PLY_AKG_CHANNEL1_WAIT EQU 042F7H
  95+ 4CEE              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 042FEH
  96+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 042FEH
  97+ 4CEE              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 042FEH
  98+ 4CEE              PLY_AKG_CHANNEL1_NOTE EQU 04307H
  99+ 4CEE              PLY_AKG_BASENOTEINDEX EQU 04307H
 100+ 4CEE              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 04309H
 101+ 4CEE              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 04309H
 102+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 04319H
 103+ 4CEE              PLY_AKG_INSTRUMENTSTABLE EQU 04319H
 104+ 4CEE              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432BH
 105+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433BH
 106+ 4CEE              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04363H
 107+ 4CEE              PLY_AKG_CHANNEL1_READCELLEND EQU 04366H
 108+ 4CEE              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04366H
 109+ 4CEE              PLY_AKG_CHANNEL2_READTRACK EQU 04372H
 110+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04372H
 111+ 4CEE              PLY_AKG_CHANNEL2_PTTRACK EQU 04372H
 112+ 4CEE              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438DH
 113+ 4CEE              PLY_AKG_CHANNEL2_WAIT EQU 04398H
 114+ 4CEE              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 0439FH
 115+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 0439FH
 116+ 4CEE              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 0439FH
 117+ 4CEE              PLY_AKG_CHANNEL2_NOTE EQU 043A8H
 118+ 4CEE              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043ADH
 119+ 4CEE              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043ADH
 120+ 4CEE              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043CFH
 121+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043DFH
 122+ 4CEE              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04407H
 123+ 4CEE              PLY_AKG_CHANNEL2_READCELLEND EQU 0440AH
 124+ 4CEE              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440AH
 125+ 4CEE              PLY_AKG_CHANNEL3_READTRACK EQU 04416H
 126+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04416H
 127+ 4CEE              PLY_AKG_CHANNEL3_PTTRACK EQU 04416H
 128+ 4CEE              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04431H
 129+ 4CEE              PLY_AKG_CHANNEL3_WAIT EQU 0443CH
 130+ 4CEE              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04443H
 131+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04443H
 132+ 4CEE              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04443H
 133+ 4CEE              PLY_AKG_CHANNEL3_NOTE EQU 0444CH
 134+ 4CEE              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04451H
 135+ 4CEE              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04451H
 136+ 4CEE              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04473H
 137+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04483H
 138+ 4CEE              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ABH
 139+ 4CEE              PLY_AKG_CHANNEL3_READCELLEND EQU 044AEH
 140+ 4CEE              PLY_AKG_CURRENTSPEED EQU 044AEH
 141+ 4CEE              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B0H
 142+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B3H
 143+ 4CEE              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B3H
 144+ 4CEE              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B6H
 145+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044B9H
 146+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044B9H
 147+ 4CEE              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C5H
 148+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CCH
 149+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044CFH
 150+ 4CEE              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D5H
 151+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044D8H
 152+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044D8H
 153+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E6H
 154+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EBH
 155+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F6H
 156+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044F9H
 157+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044F9H
 158+ 4CEE              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FCH
 159+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 044FFH
 160+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE EQU 044FFH
 161+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 04508H
 162+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04512H
 163+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04515H
 164+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04515H
 165+ 4CEE              PLY_AKG_CHANNEL1_PITCH EQU 04515H
 166+ 4CEE              PLY_AKG_CHANNEL1_ISPITCH EQU 04518H
 167+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451DH
 168+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451DH
 169+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04521H
 170+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04523H
 171+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04525H
 172+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452CH
 173+ 4CEE              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452DH
 174+ 4CEE              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04530H
 175+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04530H
 176+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454CH
 177+ 4CEE              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454CH
 178+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 04559H
 179+ 4CEE              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455DH
 180+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456DH
 181+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456DH
 182+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 0456EH
 183+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 0456FH
 184+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04571H
 185+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04571H
 186+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04571H
 187+ 4CEE              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04572H
 188+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04573H
 189+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04575H
 190+ 4CEE              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04575H
 191+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04575H
 192+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04575H
 193+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04575H
 194+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_END EQU 04578H
 195+ 4CEE              PLY_AKG_CHANNEL1_PITCH_END EQU 0457AH
 196+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04582H
 197+ 4CEE              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04582H
 198+ 4CEE              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04585H
 199+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 04588H
 200+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 04588H
 201+ 4CEE              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04594H
 202+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459BH
 203+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 0459EH
 204+ 4CEE              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A4H
 205+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A7H
 206+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A7H
 207+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B5H
 208+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BAH
 209+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C5H
 210+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045C8H
 211+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045C8H
 212+ 4CEE              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CBH
 213+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045CEH
 214+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045CEH
 215+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D7H
 216+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E1H
 217+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E4H
 218+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E4H
 219+ 4CEE              PLY_AKG_CHANNEL2_PITCH EQU 045E4H
 220+ 4CEE              PLY_AKG_CHANNEL2_ISPITCH EQU 045E7H
 221+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045ECH
 222+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045ECH
 223+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F0H
 224+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F2H
 225+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F4H
 226+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FBH
 227+ 4CEE              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FCH
 228+ 4CEE              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 045FFH
 229+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 045FFH
 230+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461BH
 231+ 4CEE              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461BH
 232+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 04628H
 233+ 4CEE              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462CH
 234+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463CH
 235+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463CH
 236+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463DH
 237+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 0463EH
 238+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04640H
 239+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04640H
 240+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04640H
 241+ 4CEE              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04641H
 242+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04642H
 243+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04644H
 244+ 4CEE              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04644H
 245+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04644H
 246+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04644H
 247+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04644H
 248+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_END EQU 04647H
 249+ 4CEE              PLY_AKG_CHANNEL2_PITCH_END EQU 04649H
 250+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04651H
 251+ 4CEE              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04651H
 252+ 4CEE              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04654H
 253+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04657H
 254+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04657H
 255+ 4CEE              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04663H
 256+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466AH
 257+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466DH
 258+ 4CEE              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04673H
 259+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04676H
 260+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04676H
 261+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04684H
 262+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 04689H
 263+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04694H
 264+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04697H
 265+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04697H
 266+ 4CEE              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469AH
 267+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469DH
 268+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469DH
 269+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A6H
 270+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B0H
 271+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B3H
 272+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B3H
 273+ 4CEE              PLY_AKG_CHANNEL3_PITCH EQU 046B3H
 274+ 4CEE              PLY_AKG_CHANNEL3_ISPITCH EQU 046B6H
 275+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BBH
 276+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BBH
 277+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046BFH
 278+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C1H
 279+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C3H
 280+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CAH
 281+ 4CEE              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CBH
 282+ 4CEE              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046CEH
 283+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046CEH
 284+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046EAH
 285+ 4CEE              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046EAH
 286+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F7H
 287+ 4CEE              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FBH
 288+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470BH
 289+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470BH
 290+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470CH
 291+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470DH
 292+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 0470FH
 293+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 0470FH
 294+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 0470FH
 295+ 4CEE              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04710H
 296+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04711H
 297+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04713H
 298+ 4CEE              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04713H
 299+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04713H
 300+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04713H
 301+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04713H
 302+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_END EQU 04716H
 303+ 4CEE              PLY_AKG_CHANNEL3_PITCH_END EQU 04718H
 304+ 4CEE              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04724H
 305+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04724H
 306+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04724H
 307+ 4CEE              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04727H
 308+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 04729H
 309+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 0472FH
 310+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04732H
 311+ 4CEE              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04732H
 312+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04735H
 313+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 0473EH
 314+ 4CEE              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04746H
 315+ 4CEE              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04753H
 316+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04753H
 317+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04753H
 318+ 4CEE              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04756H
 319+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 04758H
 320+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 0475EH
 321+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04761H
 322+ 4CEE              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04761H
 323+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04764H
 324+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476DH
 325+ 4CEE              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04775H
 326+ 4CEE              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04783H
 327+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04783H
 328+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04783H
 329+ 4CEE              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04786H
 330+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 04788H
 331+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 0478EH
 332+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04791H
 333+ 4CEE              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04791H
 334+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04794H
 335+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479DH
 336+ 4CEE              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A5H
 337+ 4CEE              PLY_AKG_SENDPSGREGISTERS EQU 047B4H
 338+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BCH
 339+ 4CEE              PLY_AKG_PSGREG01_INSTR EQU 047BCH
 340+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CCH
 341+ 4CEE              PLY_AKG_PSGREG23_INSTR EQU 047CCH
 342+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DDH
 343+ 4CEE              PLY_AKG_PSGREG45_INSTR EQU 047DDH
 344+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047EEH
 345+ 4CEE              PLY_AKG_PSGREG6_8_INSTR EQU 047EEH
 346+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 047FFH
 347+ 4CEE              PLY_AKG_PSGREG9_10_INSTR EQU 047FFH
 348+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04810H
 349+ 4CEE              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04810H
 350+ 4CEE              PLY_AKG_PSGREG13_OLDVALUE EQU 04825H
 351+ 4CEE              PLY_AKG_RETRIG EQU 04827H
 352+ 4CEE              PLY_AKG_PSGREG13_INSTR EQU 04829H
 353+ 4CEE              PLY_AKG_PSGREG13_END EQU 04838H
 354+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 04838H
 355+ 4CEE              PLY_AKG_SAVESP EQU 04838H
 356+ 4CEE              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483CH
 357+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTS EQU 04844H
 358+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04851H
 359+ 4CEE              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04851H
 360+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTS EQU 04859H
 361+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04866H
 362+ 4CEE              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04866H
 363+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTS EQU 0486EH
 364+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 04879H
 365+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS EQU 04879H
 366+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 04888H
 367+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 04888H
 368+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 0488FH
 369+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 0489FH
 370+ 4CEE              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 0489FH
 371+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A6H
 372+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A6H
 373+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048A9H
 374+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B2H
 375+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B2H
 376+ 4CEE              PLY_AKG_READINSTRUMENTCELL EQU 048B8H
 377+ 4CEE              PLY_AKG_NOSOFTNOHARD EQU 048C5H
 378+ 4CEE              PLY_AKG_NSNH_NONOISE EQU 048DAH
 379+ 4CEE              PLY_AKG_SOFT EQU 048DDH
 380+ 4CEE              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E4H
 381+ 4CEE              PLY_AKG_S_NOTSIMPLE EQU 048ECH
 382+ 4CEE              PLY_AKG_S_AFTERSIMPLETEST EQU 048EFH
 383+ 4CEE              PLY_AKG_HARDTOSOFT EQU 048FCH
 384+ 4CEE              PLY_AKG_HS_JUMPRATIO EQU 04907H
 385+ 4CEE              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04934H
 386+ 4CEE              PLY_AKG_ENDWITHOUTLOOP EQU 04936H
 387+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04936H
 388+ 4CEE              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04936H
 389+ 4CEE              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 0493EH
 390+ 4CEE              PLY_AKG_SH_JUMPRATIO EQU 0494BH
 391+ 4CEE              PLY_AKG_SH_JUMPRATIOEND EQU 0496CH
 392+ 4CEE              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497BH
 393+ 4CEE              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04981H
 394+ 4CEE              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499BH
 395+ 4CEE              PLY_AKG_H_RETRIGEND EQU 049ADH
 396+ 4CEE              PLY_AKG_H_AFTERRETRIG EQU 049AEH
 397+ 4CEE              PLY_AKG_ENDWITHLOOP EQU 049C0H
 398+ 4CEE              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C7H
 399+ 4CEE              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DDH
 400+ 4CEE              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EBH
 401+ 4CEE              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FBH
 402+ 4CEE              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A09H
 403+ 4CEE              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A18H
 404+ 4CEE              PLY_AKG_SHOHS_RETRIGEND EQU 04A27H
 405+ 4CEE              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A28H
 406+ 4CEE              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3AH
 407+ 4CEE              PLY_AKG_EFFECTTABLE EQU 04A48H
 408+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A48H
 409+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6CH
 410+ 4CEE              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6CH
 411+ 4CEE              PLY_AKG_EFFECT_RESET EQU 04A6FH
 412+ 4CEE              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A71H
 413+ 4CEE              PLY_AKG_EFFECT_VOLUME EQU 04A8CH
 414+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A98H
 415+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04A9EH
 416+ 4CEE              PLY_AKG_ARPEGGIOSTABLE EQU 04A9EH
 417+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC5H
 418+ 4CEE              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACCH
 419+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD2H
 420+ 4CEE              PLY_AKG_PITCHESTABLE EQU 04AD2H
 421+ 4CEE              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AF9H
 422+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B00H
 423+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B11H
 424+ 4CEE              PLY_AKG_EFFECT_PITCHDOWN EQU 04B18H
 425+ 4CEE              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B28H
 426+ 4CEE              PLY_AKG_EFFECT_PITCHUP EQU 04B3DH
 427+ 4CEE              PLY_AKG_EFFECT_PITCHSTOP EQU 04B4FH
 428+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B56H
 429+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B80H
 430+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B80H
 431+ 4CEE              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B99H
 432+ 4CEE              PLY_AKG_EFFECT_GLIDESPEED EQU 04B99H
 433+ 4CEE              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BABH
 434+ 4CEE              PLY_AKG_EFFECT_LEGATO EQU 04BC1H
 435+ 4CEE              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD5H
 436+ 4CEE              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDDH
 437+ 4CEE              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE5H
 438+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEDH
 439+ 4CEE              PLY_AKG_EVENT EQU 04BEDH
 440+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BEEH
 441+ 4CEE              PLY_AKG_PERIODTABLE EQU 04BEEH
 442+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BEEH
 443+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CEEH
 444+ 4CEE              PLY_AKG_PERIODTABLE_END EQU 04CEEH
 445+ 4CEE              PLY_AKG_END EQU 04CEEH
 446+ 4CEE              MAIN_PLAYER_END EQU 04CEEH
 447+ 4CEE              TESTEREND EQU 04CEEH
 448+ 4CEE
# file closed: ./symbol/AKG.sym
  86  4CEE
  87  4CEE              ORIG.HTIMI:
  88  4CEE 00 00 00 00  	DB 0, 0, 0, 0, 0
  88  4CF2 00
  89  4CF3               EXPORT ORIG.HTIMI
  90  4CF3
  91  4CF3              MUSIC_INIT_STATUS:
  92  4CF3 00            DB 0
  93  4CF4              SFX_INIT_STATUS:
  94  4CF4 00            DB 0
  95  4CF5              SOUND_ENABLED:
  96  4CF5 00            DB 0
  97  4CF6
  98  4CF6              SPRATR_INIT_STATUS:
  99  4CF6 00            DB 0
 100  4CF7              SPRATR_UPDATE_FLAG:
 101  4CF7 00 00         DW 0
 102  4CF9              SPRATR_DATA:
 103  4CF9 00 00         DW 0
 104  4CFB
 105  4CFB              ; to temporarily store stack pointer
 106  4CFB              TMPSP:
 107  4CFB 00 00         DW 0
 108  4CFD              ; to support sprite flicker
 109  4CFD              FLICKER:
 110  4CFD 00            DB 0
 111  4CFE
 112  4CFE              ; temp variables for BLIT functions
 113  4CFE              BLIT_TMP1:
 114  4CFE 00 00         DW 0
 115  4D00              BLIT_TMP2:
 116  4D00 00 00         DW 0
 117  4D02
 118  4D02              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 119  4D02              ; per starting letter, if no commands with this letter, NULL value
 120  4D02              CMDS:
 121  4D02 00 00            DW 0 ; A
 122  4D04 D2 4D            DW CMDS_B ; B
 123  4D06 00 00            DW 0 ; C
 124  4D08 00 00            DW 0 ; D
 125  4D0A 00 00            DW 0 ; E
 126  4D0C 5D 4D            DW CMDS_F; F
 127  4D0E 70 4D            DW CMDS_G; G
 128  4D10 00 00            DW 0 ; H
 129  4D12 00 00            DW 0 ; I
 130  4D14 00 00            DW 0 ; J
 131  4D16 00 00            DW 0 ; K
 132  4D18 40 4D            DW CMDS_L ; L
 133  4D1A 4A 4D            DW CMDS_M ; M
 134  4D1C 00 00            DW 0 ; N
 135  4D1E 00 00            DW 0 ; O
 136  4D20 00 00            DW 0 ; P
 137  4D22 00 00            DW 0 ; Q
 138  4D24 00 00            DW 0 ; R
 139  4D26 84 4D            DW CMDS_S ; S
 140  4D28 00 00            DW 0 ; T
 141  4D2A 36 4D            DW CMDS_U ; U
 142  4D2C 7A 4D            DW CMDS_V ; V
 143  4D2E 00 00            DW 0 ; W
 144  4D30 00 00            DW 0 ; X
 145  4D32 00 00            DW 0 ; Y
 146  4D34 00 00            DW 0 ; Z
 147  4D36
 148  4D36              CMDS_U:
 149  4D36 55 50 52 49  	DEFB	"UPRINT",0      ; Print upper case string
 149  4D3A 4E 54 00
 150  4D3D 9D 4F        	DEFW	UPRINT
 151  4D3F 00               DB 0
 152  4D40              CMDS_L:
 153  4D40 4C 50 52 49  	DEFB	"LPRINT",0      ; Print lower case string
 153  4D44 4E 54 00
 154  4D47 BA 4F        	DEFW	LPRINT
 155  4D49 00               DB 0
 156  4D4A              CMDS_M:
 157  4D4A 4D 45 4D 56      DB "MEMVRM", 0
 157  4D4E 52 4D 00
 158  4D51 62 51            DW MEMVRM
 159  4D53 4D 45 4D 43  	DB "MEMCPY", 0
 159  4D57 50 59 00
 160  4D5A 21 50        	DW MEMCPY
 161  4D5C 00           	DB 0
 162  4D5D              CMDS_F:
 163  4D5D 46 49 4C 56      DB "FILVRM", 0
 163  4D61 52 4D 00
 164  4D64 64 50            DW FILVRM
 165  4D66 46 49 4C 52      DB "FILRAM", 0
 165  4D6A 41 4D 00
 166  4D6D AB 50            DW FILRAM
 167  4D6F 00               DB 0
 168  4D70              CMDS_G:
 169  4D70 47 45 4E 43      DB "GENCAL", 0
 169  4D74 41 4C 00
 170  4D77 09 51            DW GENCAL
 171  4D79 00           	DB	0
 172  4D7A              CMDS_V:
 173  4D7A 56 52 4D 4D  	DB "VRMMEM", 0
 173  4D7E 45 4D 00
 174  4D81 DB 51        	DW VRMMEM
 175  4D83 00           	DB 0
 176  4D84              CMDS_S:
 177  4D84 53 50 52 53  	DB "SPRSET", 0
 177  4D88 45 54 00
 178  4D8B AB 53        	DW SPRSET
 179  4D8D 53 50 52 47  	DB "SPRGRPMOV", 0
 179  4D91 52 50 4D 4F
 179  4D95 56 00
 180  4D97 69 54        	DW SPRGRPMOV
 181  4D99 53 4E 44 53  	DB "SNDSFX", 0
 181  4D9D 46 58 00
 182  4DA0 13 53        	DW SNDSFX
 183  4DA2 53 4E 44 50  	DB "SNDPLYON", 0
 183  4DA6 4C 59 4F 4E
 183  4DAA 00
 184  4DAB DD 52        	DW SNDPLYON
 185  4DAD 53 4E 44 50  	DB "SNDPLYOFF", 0
 185  4DB1 4C 59 4F 46
 185  4DB5 46 00
 186  4DB7 F0 52        	DW SNDPLYOFF
 187  4DB9 53 4E 44 50  	DB "SNDPLYINI", 0
 187  4DBD 4C 59 49 4E
 187  4DC1 49 00
 188  4DC3 93 52        	DW SNDPLYINIT
 189  4DC5 53 50 52 41  	DB "SPRATRINI", 0
 189  4DC9 54 52 49 4E
 189  4DCD 49 00
 190  4DCF 6D 53        	DW SPRATRINI
 191  4DD1 00           	DB 0
 192  4DD2              CMDS_B:
 193  4DD2 42 4C 49 54  	DB "BLIT", 0
 193  4DD6 00
 194  4DD7 63 56        	DW BLIT
 195  4DD9 00           	DB 0
 196  4DDA
 197  4DDA              ; ****************************************************************************************************
 198  4DDA              ; function sets VRAM address
 199  4DDA              ; input HL=address
 200  4DDA              ; modifies AF
 201  4DDA              SETWRT_LOCAL:
 202  4DDA 7D           	LD	A, L
 203  4DDB D3 99        	OUT	(099H), A
 204  4DDD 7C           	LD	A, H
 205  4DDE E6 3F        	AND	03FH
 206  4DE0 F6 40        	OR	040H
 207  4DE2 D3 99        	OUT	(099H), A
 208  4DE4 C9           	RET
 209  4DE5              ; ****************************************************************************************************
 210  4DE5
 211  4DE5              ; ****************************************************************************************************
 212  4DE5              ; function gets slot and subslot data for specific page
 213  4DE5              ; input A=page (0, 1 or 2)
 214  4DE5              ; output B = 0A8H register value
 215  4DE5              ; output D = 0 is no subslots, 1 if yes
 216  4DE5              ; output C = 0A8H value when page 3 slot equals to requested page slot
 217  4DE5              ; output E = subslot value if present
 218  4DE5              ; modifies AF, BC, DE, HL
 219  4DE5              GET_PAGE_INFO:
 220  4DE5 6F               LD L, A
 221  4DE6 C6 C1            ADD A, low (EXPTBL)
 222  4DE8 32 F2 4D         LD (GET_PAGE_INFO_L1+1), A
 223  4DEB DB A8            IN A, (0A8H)
 224  4DED 47               LD B, A
 225  4DEE E6 3F            AND 03FH
 226  4DF0 4F               LD C, A
 227  4DF1              GET_PAGE_INFO_L1:
 228  4DF1 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 229  4DF4 E6 80            AND 080H
 230  4DF6 28 1B            JR Z, GET_PAGE_INFO_L2
 231  4DF8                  ; expanded
 232  4DF8 2D               DEC L
 233  4DF9 FA 18 4E         JP M, GET_PAGE_INFO_L3
 234  4DFC 2D               DEC L
 235  4DFD FA 16 4E         JP M, GET_PAGE_INFO_L4
 236  4E00                  ; page 2
 237  4E00 07               RLCA
 238  4E01 07               RLCA
 239  4E02              GET_PAGE_INFO_L5:
 240  4E02 E6 C0            AND 0C0H
 241  4E04 B1               OR C
 242  4E05 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 243  4E07 4F               LD C, A
 244  4E08 3A FF FF         LD A, (0FFFFH)
 245  4E0B 2F               CPL
 246  4E0C 5F               LD E, A
 247  4E0D 16 01            LD D, 1
 248  4E0F 78               LD A, B ; return stack
 249  4E10 D3 A8            OUT (0A8H), A
 250  4E12 C9               RET
 251  4E13              GET_PAGE_INFO_L2:
 252  4E13                  ; not expanded
 253  4E13 16 00            LD D, 0
 254  4E15 C9               RET
 255  4E16              GET_PAGE_INFO_L4:
 256  4E16                  ; page 1
 257  4E16 0F               RRCA
 258  4E17 0F               RRCA
 259  4E18              GET_PAGE_INFO_L3:
 260  4E18                  ; page 0
 261  4E18 0F               RRCA
 262  4E19 0F               RRCA
 263  4E1A 18 E6            JR GET_PAGE_INFO_L5
 264  4E1C              ; ****************************************************************************************************
 265  4E1C
 266  4E1C              ; ****************************************************************************************************
 267  4E1C              ; function returns original slot and subslot info
 268  4E1C              ; input B = 0A8H register value
 269  4E1C              ; input D = 0 is no subslots, 1 if yes
 270  4E1C              ; input C = 0A8H value when page 3 slot equals to requested page slot
 271  4E1C              ; input E = subslot value if present
 272  4E1C              ; modifies AF, disables interrupts
 273  4E1C              RESTORE_PAGE_INFO:
 274  4E1C 7A               LD A, D
 275  4E1D B7               OR A
 276  4E1E 28 08            JR Z, RESTORE_PAGE_INFO_L1
 277  4E20 79               LD A, C
 278  4E21 F3           	DI
 279  4E22 D3 A8            OUT (0A8H), A
 280  4E24 7B               LD A, E
 281  4E25 32 FF FF         LD (0FFFFH), A
 282  4E28              RESTORE_PAGE_INFO_L1:
 283  4E28 78               LD A, B
 284  4E29 D3 A8            OUT (0A8H), A
 285  4E2B C9               RET
 286  4E2C              ; ****************************************************************************************************
 287  4E2C
 288  4E2C              ; *******************************************************************************************************
 289  4E2C              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 290  4E2C              ; INPUT:  A = SLOT ID: EXXXSSPP
 291  4E2C              ; E = EXPANDED FLAG
 292  4E2C              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 293  4E2C              ; PP = PRIMARY SLOT NUMBER
 294  4E2C              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 295  4E2C              ; CHANGES: AF, BC, DE
 296  4E2C
 297  4E2C              LOCAL_ENASLT:
 298  4E2C CD 4C 4E         CALL L0353
 299  4E2F FA 39 4E         JP M, L0340
 300  4E32 DB A8            IN A, (0A8H)
 301  4E34 A1               AND C
 302  4E35 B0               OR B
 303  4E36 D3 A8            OUT (0A8H), A
 304  4E38 C9               RET
 305  4E39              L0340:
 306  4E39 E5               PUSH HL
 307  4E3A CD 71 4E         CALL L0378
 308  4E3D 4F               LD C, A
 309  4E3E 06 00            LD B, 0
 310  4E40 7D               LD A, L
 311  4E41 A4               AND H
 312  4E42 B2               OR D
 313  4E43 21 C5 FC         LD HL, 0FCC5H
 314  4E46 09               ADD HL, BC
 315  4E47 77               LD (HL), A
 316  4E48 E1               POP HL
 317  4E49 79               LD A, C
 318  4E4A 18 E0            JR LOCAL_ENASLT
 319  4E4C              L0353:
 320  4E4C F3               DI
 321  4E4D F5               PUSH AF
 322  4E4E 7C               LD A, H
 323  4E4F 07               RLCA
 324  4E50 07               RLCA
 325  4E51 E6 03            AND 3
 326  4E53 5F               LD E, A
 327  4E54 3E C0            LD A, 0C0H
 328  4E56              L035D:
 329  4E56 07               RLCA
 330  4E57 07               RLCA
 331  4E58 1D               DEC E
 332  4E59 F2 56 4E         JP P, L035D
 333  4E5C 5F               LD E, A
 334  4E5D 2F               CPL
 335  4E5E 4F               LD C, A
 336  4E5F F1               POP AF
 337  4E60 F5               PUSH AF
 338  4E61 E6 03            AND 3
 339  4E63 3C               INC A
 340  4E64 47               LD B, A
 341  4E65 3E AB            LD A, 0ABH
 342  4E67              L036E:
 343  4E67 C6 55            ADD A, 055H
 344  4E69 10 FC            DJNZ L036E
 345  4E6B 57               LD D, A
 346  4E6C A3               AND E
 347  4E6D 47               LD B, A
 348  4E6E F1               POP AF
 349  4E6F A7               AND A
 350  4E70 C9               RET
 351  4E71              L0378:
 352  4E71 F5               PUSH AF
 353  4E72 7A               LD A, D
 354  4E73 E6 C0            AND 0C0H
 355  4E75 4F               LD C, A
 356  4E76 F1               POP AF
 357  4E77 F5               PUSH AF
 358  4E78 57               LD D, A
 359  4E79 DB A8            IN A, (0A8H)
 360  4E7B 47               LD B, A
 361  4E7C E6 3F            AND 03FH
 362  4E7E B1               OR C
 363  4E7F D3 A8            OUT (0A8H), A
 364  4E81 7A               LD A, D
 365  4E82 0F               RRCA
 366  4E83 0F               RRCA
 367  4E84 E6 03            AND 3
 368  4E86 57               LD D, A
 369  4E87 3E AB            LD A, 0ABH
 370  4E89              L0390:
 371  4E89 C6 55            ADD A, 055H
 372  4E8B 15               DEC D
 373  4E8C F2 89 4E         JP P, L0390
 374  4E8F A3               AND E
 375  4E90 57               LD D, A
 376  4E91 7B               LD A, E
 377  4E92 2F               CPL
 378  4E93 67               LD H, A
 379  4E94 3A FF FF         LD A, (0FFFFH)
 380  4E97 2F               CPL
 381  4E98 6F               LD L, A
 382  4E99 A4               AND H
 383  4E9A B2               OR D
 384  4E9B 32 FF FF         LD (0FFFFH), A
 385  4E9E 78               LD A, B
 386  4E9F D3 A8            OUT (0A8H), A
 387  4EA1 F1               POP AF
 388  4EA2 E6 03            AND 3
 389  4EA4 C9               RET
 390  4EA5              ; *******************************************************************************************************
 391  4EA5
 392  4EA5              ; *******************************************************************************************************
 393  4EA5              ; some common code to activate page 0 and place values needed to restore original page on stack
 394  4EA5              ; input IY=return address
 395  4EA5              ENABLE_PAGE0:
 396  4EA5 AF               XOR A
 397  4EA6 CD E5 4D         CALL GET_PAGE_INFO
 398  4EA9 C5               PUSH BC
 399  4EAA D5               PUSH DE
 400  4EAB 3A 41 F3         LD A, (RAMAD0)
 401  4EAE 26 00            LD H, 0
 402  4EB0 CD 2C 4E         CALL LOCAL_ENASLT
 403  4EB3 FD E9        	JP (IY)
 404  4EB5              ; *******************************************************************************************************
 405  4EB5
 406  4EB5              ; *******************************************************************************************************
 407  4EB5              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
 408  4EB5              ; struct {
 409  4EB5              ; DW y
 410  4EB5              ; DW x
 411  4EB5              ; DW pattern (0-31)
 412  4EB5              ; DW color
 413  4EB5              ; } [32]
 414  4EB5              ; will hide sprites whose location is outside of visible area
 415  4EB5              ; works in screen 1 and 2
 416  4EB5              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
 417  4EB5              ; modifies AF, AF', BC, DE, HL
 418  4EB5              SPRATR_UPDATE:
 419  4EB5              	; check if initialized
 420  4EB5 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
 421  4EB8 B7           	OR A
 422  4EB9 C8           	RET Z
 423  4EBA              	; check if update requested
 424  4EBA 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 425  4EBD 7E           	LD A, (HL)
 426  4EBE B7           	OR A
 427  4EBF C8           	RET Z
 428  4EC0              	; check screen mode
 429  4EC0 3A AF FC     	LD A, (SCRMOD)
 430  4EC3 3D           	DEC A
 431  4EC4 28 02        	JR Z, .L0 ; screen 1
 432  4EC6 3D           	DEC A
 433  4EC7 C0           	RET NZ ; not screen 2
 434  4EC8              .L0:
 435  4EC8 06 20        	LD B, 32 ; sprite number
 436  4ECA 0E 98        	LD C, #98 ; register for vpd data output
 437  4ECC              	; set VDP address
 438  4ECC 2A 28 F9     	LD HL, (ATRBAS)
 439  4ECF 3A FD 4C     	LD A, (FLICKER)
 440  4ED2 5F           	LD E, A
 441  4ED3 08           	EX AF, AF'
 442  4ED4 7B           	LD A, E
 443  4ED5 87           	ADD A, A
 444  4ED6 87           	ADD A, A
 445  4ED7 16 00        	LD D, 0
 446  4ED9 5F           	LD E, A
 447  4EDA 19           	ADD HL, DE
 448  4EDB CD DA 4D     	CALL SETWRT_LOCAL
 449  4EDE ED 73 FB 4C  	LD (TMPSP), SP
 450  4EE2 ED 7B F9 4C  	LD SP, (SPRATR_DATA)
 451  4EE6
 452  4EE6              .LOOP:
 453  4EE6 E1           	POP HL
 454  4EE7 24           	INC H
 455  4EE8 28 0D        	JR Z, .L1 ; negative number above -256
 456  4EEA 25           	DEC H
 457  4EEB 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
 458  4EED 7D           	LD A, L
 459  4EEE FE C0        	CP 192
 460  4EF0 30 10        	JR NC, .OUT3
 461  4EF2 3D           	DEC A ; due to VDP rule that top of screen is -1
 462  4EF3 57           	LD D, A
 463  4EF4 C3 12 4F     	JP .X
 464  4EF7              .L1:
 465  4EF7 7D           	LD A, L
 466  4EF8 C6 10        	ADD 16
 467  4EFA FA 02 4F     	JP M, .OUT3 ; below -16
 468  4EFD 2D           	DEC L ; due to VDP rule that top of screen is -1
 469  4EFE 55           	LD D, L
 470  4EFF C3 12 4F     	JP .X
 471  4F02              .OUT3:
 472  4F02 E1           	POP HL ; skip x value
 473  4F03              .OUT2:
 474  4F03 E1           	POP HL ; skip pattern
 475  4F04 E1           	POP HL ; skip color
 476  4F05 3E D1        	LD A, #D1
 477  4F07 D3 98        	OUT (#98), A ; sprite hidden
 478  4F09 D3 98        	OUT (#98), A ; value unimportant
 479  4F0B D3 98        	OUT (#98), A ; value unimportant
 480  4F0D D3 98        	OUT (#98), A ; value unimportant
 481  4F0F C3 36 4F     	JP .NEXT
 482  4F12              .X:
 483  4F12 E1           	POP HL
 484  4F13 24           	INC H
 485  4F14 28 08        	JR Z, .L2
 486  4F16 25           	DEC H
 487  4F17 20 EA        	JR NZ, .OUT2
 488  4F19 1E 00        	LD E, 0 ; EC bit
 489  4F1B C3 27 4F     	JP .XY
 490  4F1E              .L2:
 491  4F1E 7D           	LD A, L
 492  4F1F C6 20        	ADD 32
 493  4F21 FA 03 4F     	JP M, .OUT2
 494  4F24 6F           	LD L, A
 495  4F25 1E 80        	LD E, #80
 496  4F27              .XY:
 497  4F27 ED 51        	OUT (C), D
 498  4F29 ED 69        	OUT (C), L
 499  4F2B E1           	POP HL ; pattern
 500  4F2C 7D           	LD A, L
 501  4F2D 87           	ADD A, A
 502  4F2E 87           	ADD A, A ; needs to go at 4x
 503  4F2F D3 98        	OUT (#98), A
 504  4F31 E1           	POP HL ; color
 505  4F32 7D           	LD A, L
 506  4F33 B3           	OR E
 507  4F34 D3 98        	OUT (#98), A
 508  4F36              .NEXT:
 509  4F36 08           	EX AF, AF'
 510  4F37 3C           	INC A
 511  4F38 E6 1F        	AND 31
 512  4F3A C2 4E 4F     	JP NZ, .NEXT2
 513  4F3D 08           	EX AF, AF'
 514  4F3E 2A 28 F9     	LD HL, (ATRBAS)
 515  4F41              	; CALL SETWRT_LOCAL not allowed as SP modified
 516  4F41 7D           	LD	A, L
 517  4F42 D3 99        	OUT	(099H), A
 518  4F44 7C           	LD	A, H
 519  4F45 E6 3F        	AND	03FH
 520  4F47 F6 40        	OR	040H
 521  4F49 D3 99        	OUT	(099H), A
 522  4F4B C3 4F 4F     	JP .NEXT3
 523  4F4E              .NEXT2:
 524  4F4E 08           	EX AF, AF'
 525  4F4F              .NEXT3:
 526  4F4F 10 95        	DJNZ .LOOP
 527  4F51 08           	EX AF, AF'
 528  4F52 3C           	INC A
 529  4F53 32 FD 4C     	LD (FLICKER), A
 530  4F56
 531  4F56 ED 7B FB 4C  	LD SP, (TMPSP)
 532  4F5A 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 533  4F5D 36 00        	LD (HL), 0 ; zero out update flag
 534  4F5F C9           	RET
 535  4F60              ; *******************************************************************************************************
 536  4F60
 537  4F60              ; General BASIC CALL-instruction handler
 538  4F60              CALLHAND:
 539  4F60 E5           	PUSH HL
 540  4F61 21 02 4D     	LD	HL, CMDS ; pointer table based on starting letter
 541  4F64 3A 89 FD         LD A, (PROCNM)
 542  4F67 D6 41            SUB 'A'
 543  4F69 87               ADD A, A
 544  4F6A 16 00            LD D, 0
 545  4F6C 5F               LD E, A
 546  4F6D 19               ADD HL, DE
 547  4F6E 5E               LD E, (HL)
 548  4F6F 23               INC HL
 549  4F70 56               LD D, (HL)
 550  4F71 7A               LD A, D
 551  4F72 B3               OR E
 552  4F73 28 24            JR Z, .CMDNOTRECOGNIZED
 553  4F75 EB               EX DE, HL
 554  4F76              .CHKCMD:
 555  4F76 11 89 FD     	LD	DE, PROCNM
 556  4F79 1A           .LOOP:	LD	A,(DE)
 557  4F7A BE           	CP	(HL)
 558  4F7B 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 559  4F7D 13           	INC	DE
 560  4F7E 23           	INC	HL
 561  4F7F A7           	AND	A
 562  4F80 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 563  4F82 5E           	LD	E,(HL)
 564  4F83 23           	INC	HL
 565  4F84 56           	LD	D,(HL)
 566  4F85 E1           	POP	HL		; routine address
 567  4F86 CD 0C 50     	CALL	GETPREVCHAR
 568  4F89 CD 9B 4F     	CALL	.CALLDE		; Call routine
 569  4F8C A7           	AND	A
 570  4F8D C9           	RET
 571  4F8E
 572  4F8E              .TONEXTCMD:
 573  4F8E 0E FF        	LD	C,0FFH
 574  4F90 AF           	XOR	A
 575  4F91 ED B1        	CPIR			; Skip to end of instruction name
 576  4F93 23           	INC	HL
 577  4F94 23           	INC	HL		; Skip address
 578  4F95 BE           	CP	(HL)
 579  4F96 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 580  4F98 E1           	POP	HL
 581  4F99              .CMDNOTRECOGNIZED:
 582  4F99 37               SCF
 583  4F9A C9           	RET
 584  4F9B
 585  4F9B              .CALLDE:
 586  4F9B D5           	PUSH	DE
 587  4F9C C9           	RET
 588  4F9D
 589  4F9D              ;---------------------------
 590  4F9D
 591  4F9D              ;---------------------------
 592  4F9D              UPRINT:
 593  4F9D CD E1 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 594  4FA0 E5           	PUSH	HL
 595  4FA1 CD D7 4F             CALL    GETSTRPNT
 596  4FA4              .LOOP
 597  4FA4 7E                   LD      A,(HL)
 598  4FA5 CD B1 4F             CALL    .UCASE
 599  4FA8 CD A2 00             CALL    CHPUT  ;Print
 600  4FAB 23                   INC     HL
 601  4FAC 10 F6                DJNZ    .LOOP
 602  4FAE
 603  4FAE E1           	POP	HL
 604  4FAF B7           	OR      A
 605  4FB0 C9           	RET
 606  4FB1
 607  4FB1              .UCASE:
 608  4FB1 FE 61                CP      "a"
 609  4FB3 D8                   RET     C
 610  4FB4 FE 7B                CP      "z"+1
 611  4FB6 D0                   RET     NC
 612  4FB7 E6 DF                AND     %11011111
 613  4FB9 C9                   RET
 614  4FBA              ;---------------------------
 615  4FBA              LPRINT:
 616  4FBA CD E1 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 617  4FBD E5           	PUSH	HL
 618  4FBE CD D7 4F             CALL    GETSTRPNT
 619  4FC1              .LOOP
 620  4FC1 7E                   LD      A,(HL)
 621  4FC2 CD CE 4F             CALL    .LCASE
 622  4FC5 CD A2 00             CALL    CHPUT  ;Print
 623  4FC8 23                   INC     HL
 624  4FC9 10 F6                DJNZ    .LOOP
 625  4FCB
 626  4FCB E1           	POP	HL
 627  4FCC B7           	OR      A
 628  4FCD C9           	RET
 629  4FCE
 630  4FCE              .LCASE:
 631  4FCE FE 41                CP      "A"
 632  4FD0 D8                   RET     C
 633  4FD1 FE 5B                CP      "Z"+1
 634  4FD3 D0                   RET     NC
 635  4FD4 F6 20                OR      %00100000
 636  4FD6 C9                   RET
 637  4FD7              ;---------------------------
 638  4FD7
 639  4FD7              GETSTRPNT:
 640  4FD7              ; OUT:
 641  4FD7              ; HL = String Address
 642  4FD7              ; B  = Lenght
 643  4FD7
 644  4FD7 2A F8 F7             LD      HL,(USR)
 645  4FDA 46                   LD      B,(HL)
 646  4FDB 23                   INC     HL
 647  4FDC 5E                   LD      E,(HL)
 648  4FDD 23                   INC     HL
 649  4FDE 56                   LD      D,(HL)
 650  4FDF EB                   EX      DE,HL
 651  4FE0 C9                   RET
 652  4FE1
 653  4FE1              EVALTXTPARAM:
 654  4FE1 CD 02 50     	CALL	CHKCHAR
 655  4FE4 28           	DEFB	"("             ; Check for (
 656  4FE5 DD 21 64 4C  	LD	IX,FRMEVL
 657  4FE9 CD 59 01     	CALL	CALBAS		; Evaluate expression
 658  4FEC 3A 63 F6             LD      A,(VALTYP)
 659  4FEF FE 03                CP      3               ; Text type?
 660  4FF1 C2 14 50             JP      NZ,TYPE_MISMATCH
 661  4FF4 E5                   PUSH	HL
 662  4FF5 DD 21 D0 67          LD	IX,FRESTR         ; Free the temporary string
 663  4FF9 CD 59 01             CALL	CALBAS
 664  4FFC E1                   POP	HL
 665  4FFD CD 02 50     	CALL	CHKCHAR
 666  5000 29           	DEFB	")"             ; Check for )
 667  5001 C9                   RET
 668  5002
 669  5002
 670  5002              CHKCHAR:
 671  5002 CD 0C 50     	CALL	GETPREVCHAR	; Get previous basic char
 672  5005 E3           	EX	(SP),HL
 673  5006 BE           	CP	(HL) 	        ; Check if good char
 674  5007 20 0F        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 675  5009 23           	INC	HL
 676  500A E3           	EX	(SP),HL
 677  500B 23           	INC	HL		; Get next basic char
 678  500C
 679  500C              GETPREVCHAR:
 680  500C 2B           	DEC	HL
 681  500D DD 21 66 46  	LD	IX,CHRGTR
 682  5011 C3 59 01     	JP      CALBAS
 683  5014
 684  5014
 685  5014              TYPE_MISMATCH:
 686  5014 1E 0D            LD E, 13 ; Type mismatch
 687  5016 18 02            JR THROW_ERROR
 688  5018
 689  5018              SYNTAX_ERROR:
 690  5018 1E 02            LD E, 2 ; Syntax error
 691  501A              THROW_ERROR:
 692  501A DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 693  501E C3 59 01     	JP	CALBAS
 694  5021
 695  5021              ;---------------------------
 696  5021
 697  5021              ; *******************************************************************************************************
 698  5021              ; function to handle CALL MEMCPY basic extension
 699  5021              ; _MEMCPY ( INT source,
 700  5021              ;			INT destination,
 701  5021              ;			INT count,
 702  5021              ; will put ram in page 0 also, page 1 is already there
 703  5021              MEMCPY:
 704  5021              	; opening (
 705  5021 CD 02 50     	CALL CHKCHAR
 706  5024 28           	DB '('
 707  5025              	; get source address
 708  5025 DD 21 2F 54  	LD IX, FRMQNT
 709  5029 CD 59 01     	CALL CALBAS
 710  502C D5           	PUSH DE
 711  502D              	; comma
 712  502D CD 02 50     	CALL CHKCHAR
 713  5030 2C           	DB ','
 714  5031              	; get destination address
 715  5031 DD 21 2F 54  	LD IX, FRMQNT
 716  5035 CD 59 01     	CALL CALBAS
 717  5038 D5           	PUSH DE
 718  5039              	; comma
 719  5039 CD 02 50     	CALL CHKCHAR
 720  503C 2C           	DB ','
 721  503D              	; get length
 722  503D DD 21 2F 54  	LD IX, FRMQNT
 723  5041 CD 59 01     	CALL CALBAS
 724  5044 D5           	PUSH DE
 725  5045              	; ending )
 726  5045 CD 02 50     	CALL CHKCHAR
 727  5048 29           	DB ')'
 728  5049
 729  5049              	; save position
 730  5049 E5           	PUSH HL
 731  504A DD E1        	POP IX
 732  504C
 733  504C C1           	POP BC ; count
 734  504D D1           	POP DE ; destination
 735  504E E1           	POP HL ; source
 736  504F D9           	EXX
 737  5050              	; enable page 0
 738  5050 FD 21 57 50  	LD IY, .RET
 739  5054 C3 A5 4E     	JP ENABLE_PAGE0
 740  5057              .RET:
 741  5057 FB           	EI
 742  5058 D9           	EXX
 743  5059 ED B0        	LDIR
 744  505B D1               POP DE
 745  505C C1               POP BC
 746  505D CD 1C 4E         CALL RESTORE_PAGE_INFO
 747  5060 DD E5        	PUSH IX
 748  5062 E1           	POP HL
 749  5063 C9           	RET
 750  5064              ; *******************************************************************************************************
 751  5064
 752  5064              ; *******************************************************************************************************
 753  5064              ; function to handle CALL FILVRM basic extension
 754  5064              ; FILVRM ( INT offset,
 755  5064              ;		   INT count,
 756  5064              ;		   BYTE value,
 757  5064              ;		   BYTE wait_vsync) >0 = true
 758  5064              ; wait_vsync will issue HALT before copying
 759  5064              FILVRM:
 760  5064              	; opening (
 761  5064 CD 02 50     	CALL CHKCHAR
 762  5067 28           	DB '('
 763  5068              	; get offset address
 764  5068 DD 21 2F 54  	LD IX, FRMQNT
 765  506C CD 59 01     	CALL CALBAS
 766  506F D5           	PUSH DE
 767  5070              	; comma
 768  5070 CD 02 50     	CALL CHKCHAR
 769  5073 2C           	DB ','
 770  5074              	; get count
 771  5074 DD 21 2F 54  	LD IX, FRMQNT
 772  5078 CD 59 01     	CALL CALBAS
 773  507B D5           	PUSH DE
 774  507C              	; comma
 775  507C CD 02 50     	CALL CHKCHAR
 776  507F 2C           	DB ','
 777  5080              	; get value
 778  5080 DD 21 1C 52  	LD IX, GETBYT
 779  5084 CD 59 01     	CALL CALBAS
 780  5087 F5           	PUSH AF
 781  5088              	; comma
 782  5088 CD 02 50     	CALL CHKCHAR
 783  508B 2C           	DB ','
 784  508C              	; get vsync wait
 785  508C DD 21 1C 52  	LD IX, GETBYT
 786  5090 CD 59 01     	CALL CALBAS
 787  5093 F5           	PUSH AF
 788  5094              	; ending )
 789  5094 CD 02 50     	CALL CHKCHAR
 790  5097 29           	DB ')'
 791  5098
 792  5098 FB               EI
 793  5099              	; save position
 794  5099 E5           	PUSH HL
 795  509A DD E1        	POP IX
 796  509C
 797  509C              	; syntax ok
 798  509C              	; wait for vsync if needed
 799  509C F1           	POP AF
 800  509D B7           	OR A
 801  509E 28 01        	JR Z, .L1
 802  50A0 76           	HALT
 803  50A1
 804  50A1              .L1:
 805  50A1 F1               POP AF ; value
 806  50A2 C1               POP BC ; count
 807  50A3 E1               POP HL ; offset
 808  50A4 CD 56 00         CALL BIOS_FILVRM
 809  50A7
 810  50A7              .L3:
 811  50A7 DD E5        	PUSH IX
 812  50A9 E1           	POP HL
 813  50AA C9           	RET
 814  50AB              ; *******************************************************************************************************
 815  50AB
 816  50AB              ; *******************************************************************************************************
 817  50AB              ; function to handle CALL FILRAM basic extension
 818  50AB              ; FILRAM ( INT start address,
 819  50AB              ;		   INT count,
 820  50AB              ;		   BYTE value,
 821  50AB              ; will put ram in page 0 also, page 1 is already there
 822  50AB              FILRAM:
 823  50AB              	; opening (
 824  50AB CD 02 50     	CALL CHKCHAR
 825  50AE 28           	DB '('
 826  50AF              	; get start address
 827  50AF DD 21 2F 54  	LD IX, FRMQNT
 828  50B3 CD 59 01     	CALL CALBAS
 829  50B6 D5           	PUSH DE
 830  50B7              	; comma
 831  50B7 CD 02 50     	CALL CHKCHAR
 832  50BA 2C           	DB ','
 833  50BB              	; get count
 834  50BB DD 21 2F 54  	LD IX, FRMQNT
 835  50BF CD 59 01     	CALL CALBAS
 836  50C2 D5           	PUSH DE
 837  50C3              	; comma
 838  50C3 CD 02 50     	CALL CHKCHAR
 839  50C6 2C           	DB ','
 840  50C7              	; get value
 841  50C7 DD 21 1C 52  	LD IX, GETBYT
 842  50CB CD 59 01     	CALL CALBAS
 843  50CE F5           	PUSH AF
 844  50CF              	; ending )
 845  50CF CD 02 50     	CALL CHKCHAR
 846  50D2 29           	DB ')'
 847  50D3
 848  50D3              	; save position
 849  50D3 E5           	PUSH HL
 850  50D4 DD E1        	POP IX
 851  50D6
 852  50D6 D1           	POP DE ; actually AF
 853  50D7 C1           	POP BC ; count
 854  50D8 E1           	POP HL ; start address
 855  50D9 78           	LD A, B
 856  50DA B7           	OR A
 857  50DB 20 0A        	JR NZ, .L1 ; >=256 bytes to fill
 858  50DD B1           	OR C
 859  50DE 28 19        	JR Z, .EXIT ; 0 bytes to fill, skip
 860  50E0 79           	LD A, C
 861  50E1 3D           	DEC A
 862  50E2 20 03        	JR NZ, .L1 ; ; >1 byte to fill
 863  50E4              	; one byte to fill
 864  50E4 72           	LD (HL), D
 865  50E5 18 12        	JR .EXIT
 866  50E7              .L1:
 867  50E7 D9           	EXX
 868  50E8              	; enable page 0
 869  50E8 FD 21 EF 50  	LD IY, .RET
 870  50EC C3 A5 4E     	JP ENABLE_PAGE0
 871  50EF              .RET:
 872  50EF FB           	EI
 873  50F0 D9           	EXX
 874  50F1 CD FD 50     	CALL .FILLVALUE
 875  50F4 D1               POP DE
 876  50F5 C1               POP BC
 877  50F6 CD 1C 4E         CALL RESTORE_PAGE_INFO
 878  50F9              .EXIT:
 879  50F9 DD E5        	PUSH IX
 880  50FB E1           	POP HL
 881  50FC C9           	RET
 882  50FD
 883  50FD              .FILLVALUE:
 884  50FD 72               LD (HL), D
 885  50FE 54               LD D, H
 886  50FF 5D               LD E, L
 887  5100 13               INC DE
 888  5101 0B               DEC BC
 889  5102 ED B0            LDIR
 890  5104 C9               RET
 891  5105              ; *******************************************************************************************************
 892  5105
 893  5105              ; *******************************************************************************************************
 894  5105              ; function to handle CALL GENCAL basic extension
 895  5105              ; GENCAL ( INT fn_addr, = address of the function to call
 896  5105              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 897  5105              ; output values of reristers will also be stored at reg_list_ptr
 898  5105              GENCAL_VAR_SP:
 899  5105 00 00            DW 0
 900  5107              GENCAL_VAR_SP2:
 901  5107 00 00            DW 0
 902  5109              GENCAL:
 903  5109              	; opening (
 904  5109 CD 02 50     	CALL CHKCHAR
 905  510C 28           	DB '('
 906  510D              	; get function address
 907  510D DD 21 2F 54  	LD IX, FRMQNT
 908  5111 CD 59 01     	CALL CALBAS
 909  5114 D5           	PUSH DE
 910  5115              	; comma
 911  5115 CD 02 50     	CALL CHKCHAR
 912  5118 2C           	DB ','
 913  5119              	; get pointer to register list
 914  5119 DD 21 2F 54  	LD IX, FRMQNT
 915  511D CD 59 01     	CALL CALBAS
 916  5120 D5           	PUSH DE
 917  5121              	; ending )
 918  5121 CD 02 50     	CALL CHKCHAR
 919  5124 29           	DB ')'
 920  5125
 921  5125              	; save BASIC token position
 922  5125 E5           	PUSH HL
 923  5126 D9               EXX
 924  5127 E1           	POP HL ; HL'=next basic token
 925  5128 D9               EXX
 926  5129
 927  5129 E1               POP HL ; get pointer to register values
 928  512A ED 73 05 51      LD (GENCAL_VAR_SP), SP
 929  512E F3               DI
 930  512F F9               LD SP, HL
 931  5130 F1               POP AF
 932  5131 C1               POP BC
 933  5132 D1               POP DE
 934  5133 E1               POP HL
 935  5134 DD E1            POP IX
 936  5136 FD E1            POP IY
 937  5138 D9               EXX
 938  5139 ED 73 07 51      LD (GENCAL_VAR_SP2), SP
 939  513D ED 7B 05 51      LD SP, (GENCAL_VAR_SP)
 940  5141 FB               EI
 941  5142 D1               POP DE ; get function to call
 942  5143 E5               PUSH HL
 943  5144 CD 5F 51         CALL .EXXDECALL
 944  5147 F3               DI
 945  5148 ED 73 05 51      LD (GENCAL_VAR_SP), SP
 946  514C ED 7B 07 51      LD SP, (GENCAL_VAR_SP2)
 947  5150 FD E5            PUSH IY
 948  5152 DD E5            PUSH IX
 949  5154 E5               PUSH HL
 950  5155 D5               PUSH DE
 951  5156 C5               PUSH BC
 952  5157 F5               PUSH AF
 953  5158 ED 7B 05 51      LD SP, (GENCAL_VAR_SP)
 954  515C FB               EI
 955  515D E1               POP HL
 956  515E C9           	RET
 957  515F
 958  515F              .EXXDECALL:
 959  515F D5               PUSH DE
 960  5160 D9               EXX
 961  5161 C9               RET
 962  5162              ; *******************************************************************************************************
 963  5162
 964  5162              ; *******************************************************************************************************
 965  5162              ; function to handle CALL MEMVRM basic extension
 966  5162              ; copies from RAM to VRAM
 967  5162              ; _MEMVRM ( INT source,
 968  5162              ;			INT destination,
 969  5162              ;			INT count,
 970  5162              ;			BYTE wait_vsync) >0 = treu
 971  5162              ; will put ram in page 0 also, page 1 is already there
 972  5162              ; wait_vsync will issue HALT before copying
 973  5162              MEMVRM:
 974  5162              	; opening (
 975  5162 CD 02 50     	CALL CHKCHAR
 976  5165 28           	DB '('
 977  5166              	; get source address
 978  5166 DD 21 2F 54  	LD IX, FRMQNT
 979  516A CD 59 01     	CALL CALBAS
 980  516D D5           	PUSH DE
 981  516E              	; comma
 982  516E CD 02 50     	CALL CHKCHAR
 983  5171 2C           	DB ','
 984  5172              	; get destination address
 985  5172 DD 21 2F 54  	LD IX, FRMQNT
 986  5176 CD 59 01     	CALL CALBAS
 987  5179 D5           	PUSH DE
 988  517A              	; comma
 989  517A CD 02 50     	CALL CHKCHAR
 990  517D 2C           	DB ','
 991  517E              	; get length
 992  517E DD 21 2F 54  	LD IX, FRMQNT
 993  5182 CD 59 01     	CALL CALBAS
 994  5185 D5           	PUSH DE
 995  5186              	; comma
 996  5186 CD 02 50     	CALL CHKCHAR
 997  5189 2C           	DB ','
 998  518A              	; get vsync wait
 999  518A DD 21 1C 52  	LD IX, GETBYT
1000  518E CD 59 01     	CALL CALBAS
1001  5191 F5           	PUSH AF
1002  5192              	; ending )
1003  5192 CD 02 50     	CALL CHKCHAR
1004  5195 29           	DB ')'
1005  5196
1006  5196                  ; save position in BASIC text
1007  5196 E5           	PUSH HL
1008  5197 DD E1        	POP IX
1009  5199
1010  5199 F1           	POP AF ; wait vsync
1011  519A B7           	OR A
1012  519B 28 03        	JR Z, .L1
1013  519D FB               EI
1014  519E 76           	HALT
1015  519F F3           	DI
1016  51A0              .L1:
1017  51A0              	; pop LDIR parameters and store away for later
1018  51A0 C1           	POP BC ; count
1019  51A1 D1           	POP DE ; vram destination
1020  51A2 E1           	POP HL ; ram source
1021  51A3 D9           	EXX
1022  51A4 FD 21 AB 51   	LD IY, .RET
1023  51A8 C3 A5 4E     	JP ENABLE_PAGE0
1024  51AB              .RET:
1025  51AB FB           	EI
1026  51AC D9           	EXX
1027  51AD CD B9 51     	CALL .LDIRVM
1028  51B0 D1               POP DE
1029  51B1 C1               POP BC
1030  51B2 CD 1C 4E         CALL RESTORE_PAGE_INFO
1031  51B5 DD E5        	PUSH IX
1032  51B7 E1           	POP HL
1033  51B8 C9           	RET
1034  51B9
1035  51B9              .LDIRVM:
1036  51B9 EB           	EX DE, HL
1037  51BA CD DA 4D     	CALL SETWRT_LOCAL
1038  51BD EB           	EX DE, HL
1039  51BE 78           	LD A, B
1040  51BF B7           	OR A
1041  51C0 28 0D        	JR Z, .L3
1042  51C2 C5           	PUSH BC
1043  51C3 0E 98        	LD C, #98
1044  51C5              .L2:
1045  51C5 50           	LD D, B
1046  51C6 06 00        	LD B, 0
1047  51C8 CD D5 51     	CALL .BBYTECOPY
1048  51CB 42           	LD B, D
1049  51CC 10 F7        	DJNZ .L2
1050  51CE C1           	POP BC
1051  51CF              .L3:
1052  51CF 79           	LD A, C
1053  51D0 B7           	OR A
1054  51D1 C8           	RET Z
1055  51D2 41           	LD B, C
1056  51D3 0E 98        	LD C, #98
1057  51D5              .BBYTECOPY:
1058  51D5 ED A3        	OUTI
1059  51D7 C2 D5 51     	JP	NZ, .BBYTECOPY
1060  51DA C9           	RET
1061  51DB              ; *******************************************************************************************************
1062  51DB
1063  51DB              ; *******************************************************************************************************
1064  51DB              ; function to handle CALL VRMMEM basic extension
1065  51DB              ; copies from RAM to VRAM
1066  51DB              ; _VRMMEM ( INT source,
1067  51DB              ;			INT destination,
1068  51DB              ;			INT count
1069  51DB              ; will put ram in page 0 also, page 1 is already there
1070  51DB              VRMMEM:
1071  51DB              	; opening (
1072  51DB CD 02 50     	CALL CHKCHAR
1073  51DE 28           	DB '('
1074  51DF              	; get source address
1075  51DF DD 21 2F 54  	LD IX, FRMQNT
1076  51E3 CD 59 01     	CALL CALBAS
1077  51E6 D5           	PUSH DE
1078  51E7              	; comma
1079  51E7 CD 02 50     	CALL CHKCHAR
1080  51EA 2C           	DB ','
1081  51EB              	; get destination address
1082  51EB DD 21 2F 54  	LD IX, FRMQNT
1083  51EF CD 59 01     	CALL CALBAS
1084  51F2 D5           	PUSH DE
1085  51F3              	; comma
1086  51F3 CD 02 50     	CALL CHKCHAR
1087  51F6 2C           	DB ','
1088  51F7              	; get length
1089  51F7 DD 21 2F 54  	LD IX, FRMQNT
1090  51FB CD 59 01     	CALL CALBAS
1091  51FE D5           	PUSH DE
1092  51FF              	; ending )
1093  51FF CD 02 50     	CALL CHKCHAR
1094  5202 29           	DB ')'
1095  5203
1096  5203                  ; save position in BASIC text
1097  5203 E5           	PUSH HL
1098  5204 DD E1        	POP IX
1099  5206
1100  5206 C1           	POP BC ; count
1101  5207 D1           	POP DE ; destination
1102  5208 E1           	POP HL ; source
1103  5209 D9           	EXX
1104  520A FD 21 11 52  	LD IY, .RET
1105  520E C3 A5 4E     	JP ENABLE_PAGE0
1106  5211              .RET:
1107  5211 FB           	EI
1108  5212 D9           	EXX
1109  5213 CD 1F 52     	CALL .LDIRMV
1110  5216 D1               POP DE
1111  5217 C1               POP BC
1112  5218 CD 1C 4E         CALL RESTORE_PAGE_INFO
1113  521B DD E5        	PUSH IX
1114  521D E1           	POP HL
1115  521E C9           	RET
1116  521F
1117  521F              .LDIRMV:
1118  521F CD DA 4D     	CALL SETWRT_LOCAL
1119  5222              .L4:
1120  5222 DB 98            IN A, (#98)
1121  5224 12           	LD (DE), A
1122  5225 13               INC DE
1123  5226 0B               DEC BC
1124  5227 79               LD A, C
1125  5228 B0               OR B
1126  5229 C2 22 52         JP NZ, .L4
1127  522C C9               RET
1128  522D              ; *******************************************************************************************************
1129  522D
1130  522D              ; *******************************************************************************************************
1131  522D              ; H.TIMI function
1132  522D              MBGE_HTIMI:
1133  522D               EXPORT MBGE_HTIMI
1134  522D F5           	PUSH AF
1135  522E
1136  522E CD B5 4E     	CALL SPRATR_UPDATE
1137  5231
1138  5231 3A F5 4C     	LD A, (SOUND_ENABLED)
1139  5234 B7           	OR A
1140  5235 28 2A        	JR Z, .EXIT
1141  5237
1142  5237              	; enable page 2
1143  5237 3E 02            LD A, 2
1144  5239 CD E5 4D         CALL GET_PAGE_INFO
1145  523C C5               PUSH BC
1146  523D D5               PUSH DE
1147  523E 3A 43 F3         LD A, (RAMAD2)
1148  5241 26 80            LD H, 080H
1149  5243 CD 2C 4E         CALL LOCAL_ENASLT
1150  5246              	; enable page 0
1151  5246 AF               XOR A
1152  5247 CD E5 4D         CALL GET_PAGE_INFO
1153  524A C5               PUSH BC
1154  524B D5               PUSH DE
1155  524C 3A 41 F3         LD A, (RAMAD0)
1156  524F 26 00            LD H, 0
1157  5251 CD 2C 4E         CALL LOCAL_ENASLT
1158  5254
1159  5254 CD 31 42     	CALL PLY_AKG_PLAY
1160  5257
1161  5257              	; restore page 0
1162  5257 D1               POP DE
1163  5258 C1               POP BC
1164  5259 CD 1C 4E         CALL RESTORE_PAGE_INFO
1165  525C              	; restore page 2
1166  525C D1               POP DE
1167  525D C1               POP BC
1168  525E CD 1C 4E         CALL RESTORE_PAGE_INFO
1169  5261
1170  5261              .EXIT:
1171  5261 F1           	POP AF
1172  5262 C3 EE 4C     	JP ORIG.HTIMI
1173  5265              ; *******************************************************************************************************
1174  5265
1175  5265              ; *******************************************************************************************************
1176  5265              ; interrupt handler when page 0 enabled
1177  5265              VBLANK:
1178  5265              	EXPORT VBLANK
1179  5265
1180  5265 F5               PUSH AF
1181  5266              	; is VDP originator ?
1182  5266 DB 99        	IN	A, (099H)
1183  5268 A7           	AND	A
1184  5269 F2 8F 52     	JP P, .EXIT
1185  526C 3A F5 4C     	LD A, (SOUND_ENABLED)
1186  526F B7           	OR A
1187  5270 28 1D        	JR Z, .EXIT
1188  5272
1189  5272 C5               PUSH BC
1190  5273 D5               PUSH DE
1191  5274 E5               PUSH HL
1192  5275 08               EX AF, AF'
1193  5276 D9               EXX
1194  5277 F5               PUSH AF
1195  5278 C5               PUSH BC
1196  5279 D5               PUSH DE
1197  527A E5               PUSH HL
1198  527B DD E5            PUSH IX
1199  527D FD E5            PUSH IY
1200  527F
1201  527F CD 31 42     	CALL PLY_AKG_PLAY
1202  5282
1203  5282 FD E1            POP IY
1204  5284 DD E1            POP IX
1205  5286 E1               POP HL
1206  5287 D1               POP DE
1207  5288 C1               POP BC
1208  5289 F1               POP AF
1209  528A 08               EX AF, AF'
1210  528B D9               EXX
1211  528C E1               POP HL
1212  528D D1               POP DE
1213  528E C1               POP BC
1214  528F              .EXIT:
1215  528F F1           	POP AF
1216  5290 FB           	EI
1217  5291 ED 4D        	RETI
1218  5293              ; *******************************************************************************************************
1219  5293
1220  5293              ; *******************************************************************************************************
1221  5293              ; function to handle CALL SNDPLYINIT basic extension
1222  5293              ; initializes sound player
1223  5293              ; _SNDPLYINIT ( INT music_offset,
1224  5293              ;				INT sfx_offset, can be -1 if no SFX
1225  5293              ; will put ram in page 0 also, page 1 is already there
1226  5293              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1227  5293              SNDPLYINIT:
1228  5293              	; opening (
1229  5293 CD 02 50     	CALL CHKCHAR
1230  5296 28           	DB '('
1231  5297              	; get music address
1232  5297 DD 21 2F 54  	LD IX, FRMQNT
1233  529B CD 59 01     	CALL CALBAS
1234  529E D5           	PUSH DE
1235  529F              	; comma
1236  529F CD 02 50     	CALL CHKCHAR
1237  52A2 2C           	DB ','
1238  52A3              	; get sfx address
1239  52A3 DD 21 2F 54  	LD IX, FRMQNT
1240  52A7 CD 59 01     	CALL CALBAS
1241  52AA D5           	PUSH DE
1242  52AB              	; ending )
1243  52AB CD 02 50     	CALL CHKCHAR
1244  52AE 29           	DB ')'
1245  52AF
1246  52AF                  ; save position in BASIC text
1247  52AF 44           	LD B, H
1248  52B0 4D           	LD C, L
1249  52B1
1250  52B1              	; pop LDIR parameters and store away for later
1251  52B1 D1           	POP DE ; sfx address
1252  52B2 E1           	POP HL ; music address
1253  52B3 C5           	PUSH BC ; basic text location
1254  52B4 D9           	EXX
1255  52B5 FD 21 BC 52  	LD IY, .RET
1256  52B9 C3 A5 4E     	JP ENABLE_PAGE0
1257  52BC              .RET:
1258  52BC D9           	EXX
1259  52BD
1260  52BD D5           	PUSH DE
1261  52BE AF           	XOR A
1262  52BF              	; HL = music location
1263  52BF CD 60 41     	CALL PLY_AKG_INIT
1264  52C2 3E 01        	LD A, 1
1265  52C4 32 F3 4C     	LD (MUSIC_INIT_STATUS), A
1266  52C7
1267  52C7 E1           	POP HL ; SFX
1268  52C8              	; check if SFX address -1
1269  52C8 23           	INC HL
1270  52C9 7D           	LD A, L
1271  52CA B4           	OR H
1272  52CB 28 09        	JR Z,.L1
1273  52CD 2B           	DEC HL
1274  52CE CD 1B 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1275  52D1 3E 01        	LD A, 1
1276  52D3 32 F4 4C     	LD (SFX_INIT_STATUS), A
1277  52D6              .L1:
1278  52D6 D1               POP DE
1279  52D7 C1               POP BC
1280  52D8 CD 1C 4E         CALL RESTORE_PAGE_INFO
1281  52DB
1282  52DB E1           	POP HL
1283  52DC C9           	RET
1284  52DD              ; *******************************************************************************************************
1285  52DD
1286  52DD              ; *******************************************************************************************************
1287  52DD              ; function to handle CALL SNDPLYON basic extension
1288  52DD              ; enables sound player
1289  52DD              ; _SNDPLYON
1290  52DD              ; sets SOUND_ENABLED variable to 1 if init call was done
1291  52DD              ; if not throws out of data error
1292  52DD              SNDPLYON:
1293  52DD 3A F3 4C     	LD A, (MUSIC_INIT_STATUS)
1294  52E0 B7           	OR A
1295  52E1 20 05        	JR NZ, .L1
1296  52E3              	; player not initialized, throw error
1297  52E3 1E 04        	LD E, 04 ; Out of DATA
1298  52E5 C3 1A 50     	JP THROW_ERROR
1299  52E8              .L1:
1300  52E8 32 F5 4C     	LD (SOUND_ENABLED), A
1301  52EB              	; disable key click
1302  52EB AF           	XOR A
1303  52EC 32 DB F3     	LD (CLIKSW), A
1304  52EF C9           	RET
1305  52F0              ; *******************************************************************************************************
1306  52F0
1307  52F0              ; *******************************************************************************************************
1308  52F0              ; function to handle CALL SNDPLYOFF basic extension
1309  52F0              ; disables sound player
1310  52F0              ; _SNDPLYOFF
1311  52F0              ; sets SOUND_ENABLED variable to 0
1312  52F0              ; calls AKG to stop music and SFX on all channels if initialized
1313  52F0              SNDPLYOFF:
1314  52F0 3A F5 4C     	LD A, (SOUND_ENABLED)
1315  52F3 B7           	OR A
1316  52F4 C8           	RET Z ; already stopped
1317  52F5 AF           	XOR A
1318  52F6 32 F5 4C     	LD (SOUND_ENABLED), A
1319  52F9 E5           	PUSH HL
1320  52FA CD 1F 42     	CALL PLY_AKG_STOP
1321  52FD 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1322  5300 B7           	OR A
1323  5301 28 0E        	JR Z, .EXIT ; SFX not in use
1324  5303 AF           	XOR A
1325  5304 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1326  5307 3E 01        	LD A, 1
1327  5309 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1328  530C 3E 02        	LD A, 2
1329  530E CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1330  5311              .EXIT:
1331  5311 E1           	POP HL
1332  5312 C9           	RET
1333  5313              ; *******************************************************************************************************
1334  5313
1335  5313              ; *******************************************************************************************************
1336  5313              ; function to handle CALL SNDSFX basic extension
1337  5313              ; plays a sound effect
1338  5313              ; _SNDSFX ( BYTE sfx_number, >0
1339  5313              ;			BYTE channel, = 0,1 or 2
1340  5313              ;			BYTE inverted_volume = 0-16, 0 being full volume
1341  5313              ; will put ram in page 0 also, page 1 is already there
1342  5313              ; if sound off throws illegal function call
1343  5313              ; if sfx not initialized, throws out of data
1344  5313              SNDSFX:
1345  5313              	; opening (
1346  5313 CD 02 50     	CALL CHKCHAR
1347  5316 28           	DB '('
1348  5317              	; get sfx_number
1349  5317 DD 21 1C 52  	LD IX, GETBYT
1350  531B CD 59 01     	CALL CALBAS
1351  531E D5           	PUSH DE
1352  531F              	; comma
1353  531F CD 02 50     	CALL CHKCHAR
1354  5322 2C           	DB ','
1355  5323              	; get sfx address
1356  5323 DD 21 1C 52  	LD IX, GETBYT
1357  5327 CD 59 01     	CALL CALBAS
1358  532A D5           	PUSH DE
1359  532B              	; comma
1360  532B CD 02 50     	CALL CHKCHAR
1361  532E 2C           	DB ','
1362  532F              	; get inverted volume
1363  532F DD 21 1C 52  	LD IX, GETBYT
1364  5333 CD 59 01     	CALL CALBAS
1365  5336 D5           	PUSH DE
1366  5337              	; ending )
1367  5337 CD 02 50     	CALL CHKCHAR
1368  533A 29           	DB ')'
1369  533B
1370  533B 3A F5 4C     	LD A, (SOUND_ENABLED)
1371  533E B7           	OR A
1372  533F 20 05        	JR NZ, .L1
1373  5341              	; sound disabled, throw illegal function call
1374  5341 1E 05        	LD E, 5
1375  5343 C3 1A 50     	JP THROW_ERROR
1376  5346              .L1:
1377  5346 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1378  5349 B7           	OR A
1379  534A 20 05        	JR NZ, .L2
1380  534C              	; sfx data not initialized, throw out of data
1381  534C 1E 04        	LD E, 4
1382  534E C3 1A 50     	JP THROW_ERROR
1383  5351              .L2:
1384  5351              	; pop  parameters and store away for later
1385  5351 D1           	POP DE ; inverted volume
1386  5352 43           	LD B, E
1387  5353 D1           	POP DE ; channel
1388  5354 4B           	LD C, E
1389  5355 D1           	POP DE
1390  5356 7B           	LD A, E
1391  5357 08           	EX AF, AF'
1392  5358 E5           	PUSH HL ; basic text location
1393  5359 D9           	EXX
1394  535A FD 21 61 53  	LD IY, .RET
1395  535E C3 A5 4E     	JP ENABLE_PAGE0
1396  5361              .RET:
1397  5361 D9           	EXX
1398  5362 08           	EX AF, AF'
1399  5363 CD 1F 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1400  5366
1401  5366 D1               POP DE
1402  5367 C1               POP BC
1403  5368 CD 1C 4E         CALL RESTORE_PAGE_INFO
1404  536B
1405  536B E1           	POP HL
1406  536C C9           	RET
1407  536D              ; *******************************************************************************************************
1408  536D
1409  536D              ; *******************************************************************************************************
1410  536D              ; function to handle CALL SPRATRINI basic extension
1411  536D              ; initializes sprites handler
1412  536D              ; _SPRATRINI ( INT sprites_attributes_data,
1413  536D              ;			   INT update_variable_location )
1414  536D              ; expects both locations to be in range #8000+ or throws an error
1415  536D              ; since these should be BASIC variables
1416  536D              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA
1417  536D              SPRATRINI:
1418  536D              	; opening (
1419  536D CD 02 50     	CALL CHKCHAR
1420  5370 28           	DB '('
1421  5371              	; get address of sprite attribute table DIM SA%(3,31)
1422  5371 DD 21 2F 54  	LD IX, FRMQNT
1423  5375 CD 59 01     	CALL CALBAS
1424  5378 D5           	PUSH DE
1425  5379              	; comma
1426  5379 CD 02 50     	CALL CHKCHAR
1427  537C 2C           	DB ','
1428  537D              	; get update variable location SU%
1429  537D DD 21 2F 54  	LD IX, FRMQNT
1430  5381 CD 59 01     	CALL CALBAS
1431  5384 D5           	PUSH DE
1432  5385              	; ending )
1433  5385 CD 02 50     	CALL CHKCHAR
1434  5388 29           	DB ')'
1435  5389
1436  5389 D1           	POP DE ; update variable location
1437  538A CB 7A        	BIT 7, D ; is address >= &h8000
1438  538C 20 05        	JR NZ, .L1
1439  538E 1E 05        	LD E, 5 ; illegal function call
1440  5390 C3 1A 50     	JP THROW_ERROR
1441  5393              .L1:
1442  5393 ED 53 F7 4C  	LD (SPRATR_UPDATE_FLAG), DE
1443  5397 D1           	POP DE ; address of sprite attribute table
1444  5398 CB 7A        	BIT 7, D ; is address >= &h8000
1445  539A 20 05        	JR NZ, .L2
1446  539C 1E 05        	LD E, 5 ; illegal function call
1447  539E C3 1A 50     	JP THROW_ERROR
1448  53A1              .L2:
1449  53A1 ED 53 F9 4C  	LD (SPRATR_DATA), DE
1450  53A5 3E 01        	LD A, 1
1451  53A7 32 F6 4C     	LD (SPRATR_INIT_STATUS), A
1452  53AA C9           	RET
1453  53AB              ; *******************************************************************************************************
1454  53AB
1455  53AB              ; *******************************************************************************************************
1456  53AB              ; function to handle CALL SPRSET basic extension
1457  53AB              ; sets position, and optionally pattern and color of sprite
1458  53AB              ; _SPRSET ( BYTE sprite_num , valid 0-31
1459  53AB              ;			INT x,
1460  53AB              ;			INT y,
1461  53AB              ;			INT pattern, valid 0-31, otherwise ignored
1462  53AB              ;			INT color, valid 0-15, otherwise ignored
1463  53AB              SPRSET:
1464  53AB 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1465  53AE B7           	OR A
1466  53AF 20 05        	JR NZ, .L1
1467  53B1 1E 05        	LD E, 5 ; illegal function call
1468  53B3 C3 1A 50     	JP THROW_ERROR
1469  53B6              .L1:
1470  53B6              	; opening (
1471  53B6 CD 02 50     	CALL CHKCHAR
1472  53B9 28           	DB '('
1473  53BA              	; get sprite number
1474  53BA DD 21 1C 52  	LD IX, GETBYT
1475  53BE CD 59 01     	CALL CALBAS
1476  53C1 F5           	PUSH AF
1477  53C2              	; comma
1478  53C2 CD 02 50     	CALL CHKCHAR
1479  53C5 2C           	DB ','
1480  53C6              	; get x
1481  53C6 DD 21 2F 54  	LD IX, FRMQNT
1482  53CA CD 59 01     	CALL CALBAS
1483  53CD D5           	PUSH DE
1484  53CE              	; comma
1485  53CE CD 02 50     	CALL CHKCHAR
1486  53D1 2C           	DB ','
1487  53D2              	; get y
1488  53D2 DD 21 2F 54  	LD IX, FRMQNT
1489  53D6 CD 59 01     	CALL CALBAS
1490  53D9 D5           	PUSH DE
1491  53DA              	; comma
1492  53DA CD 02 50     	CALL CHKCHAR
1493  53DD 2C           	DB ','
1494  53DE              	; get pattern
1495  53DE DD 21 2F 54  	LD IX, FRMQNT
1496  53E2 CD 59 01     	CALL CALBAS
1497  53E5 D5           	PUSH DE
1498  53E6              	; comma
1499  53E6 CD 02 50     	CALL CHKCHAR
1500  53E9 2C           	DB ','
1501  53EA              	; get color
1502  53EA DD 21 2F 54  	LD IX, FRMQNT
1503  53EE CD 59 01     	CALL CALBAS
1504  53F1 D5           	PUSH DE
1505  53F2              	; ending )
1506  53F2 CD 02 50     	CALL CHKCHAR
1507  53F5 29           	DB ')'
1508  53F6
1509  53F6                  ; save position in BASIC text
1510  53F6 E5           	PUSH HL
1511  53F7 DD E1        	POP IX
1512  53F9
1513  53F9 C1           	POP BC ; color
1514  53FA D1           	POP DE ; pattern
1515  53FB D9           	EXX
1516  53FC C1           	POP BC ; y
1517  53FD D1           	POP DE ; x
1518  53FE F1           	POP AF ; sprite number
1519  53FF FE 20        	CP 32
1520  5401 38 05        	JR C, .L2
1521  5403 1E 05        	LD E, 5 ; illegal function call
1522  5405 C3 1A 50     	JP THROW_ERROR
1523  5408              .L2:
1524  5408              	; find location in sprite attributes table
1525  5408 87          > ADD A, A
1525  5409 87          > ADD A, A
1525  540A 87          > ADD A, A
1526  540B D5           	PUSH DE
1527  540C 16 00        	LD D, 0
1528  540E 5F           	LD E, A
1529  540F 2A F9 4C     	LD HL, (SPRATR_DATA)
1530  5412 19           	ADD HL, DE
1531  5413 D1           	POP DE
1532  5414              	; set y
1533  5414 71           	LD (HL), C
1534  5415 23           	INC HL
1535  5416 70           	LD (HL), B
1536  5417 23           	INC HL
1537  5418              	; set x
1538  5418 73           	LD (HL), E
1539  5419 23           	INC HL
1540  541A 72           	LD (HL), D
1541  541B 23           	INC HL
1542  541C E5           	PUSH HL
1543  541D D9           	EXX
1544  541E E1           	POP HL
1545  541F              	; check if 0<=pattern<32
1546  541F 7A           	LD A, D
1547  5420 B7           	OR A
1548  5421 20 0B        	JR NZ, .L3
1549  5423 7D           	LD A, L
1550  5424 FE 20        	CP 32
1551  5426 30 06        	JR NC, .L3
1552  5428              	; set pattern
1553  5428 73           	LD (HL), E
1554  5429 23           	INC HL
1555  542A 72           	LD (HL), D
1556  542B 23           	INC HL
1557  542C 18 02        	JR .L4
1558  542E              .L3:
1559  542E              	; skip pattern
1560  542E 23          > INC HL
1560  542F 23          > INC HL
1561  5430              .L4:
1562  5430              	; check if 0<=color<16
1563  5430 78           	LD A, B
1564  5431 B7           	OR A
1565  5432 20 08        	JR NZ, .L5
1566  5434 79           	LD A, C
1567  5435 FE 10        	CP 16
1568  5437 30 03        	JR NC, .L5
1569  5439              	; set color
1570  5439 71           	LD (HL), C
1571  543A 23           	INC HL
1572  543B 70           	LD (HL), B
1573  543C
1574  543C              .L5:
1575  543C DD E5        	PUSH IX
1576  543E E1           	POP HL
1577  543F C9           	RET
1578  5440              ; *******************************************************************************************************
1579  5440
1580  5440              ; *******************************************************************************************************
1581  5440              ; function sets sprite location based on initial coordinates and offset provided
1582  5440              ; input A=sprite number in SPRATR_DATA , 0-31
1583  5440              ; input DE=initial x
1584  5440              ; input BC=initial y
1585  5440              ; input IY=location where delta y,x are located
1586  5440              ; modifies AF, HL, IX
1587  5440              SPRSET_DELTA_POS:
1588  5440 87          > ADD A, A
1588  5441 87          > ADD A, A
1588  5442 87          > ADD A, A
1589  5443 D5           	PUSH DE
1590  5444 16 00        	LD D, 0
1591  5446 5F           	LD E, A
1592  5447 DD 2A F9 4C  	LD IX, (SPRATR_DATA)
1593  544B DD 19        	ADD IX, DE
1594  544D D1           	POP DE
1595  544E              	; IX=sprite's y location
1596  544E FD 6E 00     	LD L, (IY)
1597  5451 FD 66 01     	LD H, (IY+1)
1598  5454 09           	ADD HL, BC
1599  5455 DD 75 00     	LD (IX), L
1600  5458 DD 74 01     	LD (IX+1), H
1601  545B FD 6E 02     	LD L, (IY+2)
1602  545E FD 66 03     	LD H, (IY+3)
1603  5461 19           	ADD HL, DE
1604  5462 DD 75 02     	LD (IX+2), L
1605  5465 DD 74 03     	LD (IX+3), H
1606  5468 C9           	RET
1607  5469              ; *******************************************************************************************************
1608  5469
1609  5469              ; *******************************************************************************************************
1610  5469              ; function to handle CALL SPRGRPMOV basic extension
1611  5469              ; sets position of a group of sprites described with
1612  5469              ; { int sprite_num, int delta_y, int delta_x } [count]
1613  5469              ; _SPRGRPMOV ( INT x,
1614  5469              ;			   INT y,
1615  5469              ;			   INT data_ptr,
1616  5469              ;			   BYTE count,
1617  5469              ; will put ram in page 0 also, page 1 is already there
1618  5469              SPRGRPMOV:
1619  5469 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1620  546C B7           	OR A
1621  546D 20 05        	JR NZ, .L1
1622  546F 1E 05        	LD E, 5 ; illegal function call
1623  5471 C3 1A 50     	JP THROW_ERROR
1624  5474              .L1:
1625  5474              	; opening (
1626  5474 CD 02 50     	CALL CHKCHAR
1627  5477 28           	DB '('
1628  5478              	; get x
1629  5478 DD 21 2F 54  	LD IX, FRMQNT
1630  547C CD 59 01     	CALL CALBAS
1631  547F D5           	PUSH DE
1632  5480              	; comma
1633  5480 CD 02 50     	CALL CHKCHAR
1634  5483 2C           	DB ','
1635  5484              	; get y
1636  5484 DD 21 2F 54  	LD IX, FRMQNT
1637  5488 CD 59 01     	CALL CALBAS
1638  548B D5           	PUSH DE
1639  548C              	; comma
1640  548C CD 02 50     	CALL CHKCHAR
1641  548F 2C           	DB ','
1642  5490              	; get data pointer
1643  5490 DD 21 2F 54  	LD IX, FRMQNT
1644  5494 CD 59 01     	CALL CALBAS
1645  5497 D5           	PUSH DE
1646  5498              	; comma
1647  5498 CD 02 50     	CALL CHKCHAR
1648  549B 2C           	DB ','
1649  549C              	; get count
1650  549C DD 21 1C 52  	LD IX, GETBYT
1651  54A0 CD 59 01     	CALL CALBAS
1652  54A3 F5           	PUSH AF
1653  54A4              	; ending )
1654  54A4 CD 02 50     	CALL CHKCHAR
1655  54A7 29           	DB ')'
1656  54A8
1657  54A8 E5           	PUSH HL
1658  54A9 DD E1        	POP IX
1659  54AB
1660  54AB C1           	POP BC ; count
1661  54AC E1           	POP HL ; data pointer
1662  54AD D9           	EXX
1663  54AE C1           	POP BC ; y
1664  54AF D1           	POP DE ; x
1665  54B0 D9           	EXX
1666  54B1
1667  54B1 DD E5        	PUSH IX ; save position in BASIC buffer
1668  54B3
1669  54B3 C5           	PUSH BC
1670  54B4 E5           	PUSH HL
1671  54B5 AF               XOR A
1672  54B6 CD E5 4D         CALL GET_PAGE_INFO
1673  54B9 D9           	EXX
1674  54BA E1           	POP HL
1675  54BB F1           	POP AF
1676  54BC D9           	EXX
1677  54BD C5               PUSH BC
1678  54BE D5               PUSH DE
1679  54BF D9           	EXX
1680  54C0 F5           	PUSH AF
1681  54C1 E5           	PUSH HL
1682  54C2 D9           	EXX
1683  54C3 3A 41 F3         LD A, (RAMAD0)
1684  54C6 26 00            LD H, 0
1685  54C8 CD 2C 4E         CALL LOCAL_ENASLT
1686  54CB FB           	EI
1687  54CC E1           	POP HL
1688  54CD C1           	POP BC
1689  54CE CD D8 54     	CALL .UPDATE_LOC
1690  54D1 D1               POP DE
1691  54D2 C1               POP BC
1692  54D3 CD 1C 4E         CALL RESTORE_PAGE_INFO
1693  54D6 E1           	POP HL
1694  54D7 C9           	RET
1695  54D8
1696  54D8              .UPDATE_LOC:
1697  54D8              .L4:
1698  54D8 7E           	LD A, (HL)
1699  54D9 23           	INC HL
1700  54DA 23           	INC HL
1701  54DB E5           	PUSH HL
1702  54DC FD E1        	POP IY
1703  54DE D9           	EXX
1704  54DF CD 40 54     	CALL SPRSET_DELTA_POS
1705  54E2 D9           	EXX
1706  54E3 23          > INC HL
1706  54E4 23          > INC HL
1706  54E5 23          > INC HL
1706  54E6 23          > INC HL
1707  54E7 10 EF        	DJNZ .L4
1708  54E9 C9           	RET
1709  54EA              ; *******************************************************************************************************
1710  54EA
1711  54EA              ; *******************************************************************************************************
1712  54EA              ; function rotates mask and data of several characters and applies to background data
1713  54EA              ; this handles x-shift from 0 to 4
1714  54EA              ; contains self-modifying code that is set-up from external function
1715  54EA              ; input HL=pointer to mask data
1716  54EA              ; input HL'=pointer to character data
1717  54EA              ; input DE=output buffer containing background data
1718  54EA              ; input BC=DE+8
1719  54EA              ; input A=number of characters to process
1720  54EA              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1721  54EA              SHIFT04:
1722  54EA 08           	EX AF, AF'
1723  54EB 7E           	LD A, (HL) ; get mask
1724  54EC D9           	EXX
1725  54ED 57           	LD D, A
1726  54EE 1E FF        	LD E, #FF
1727  54F0 37           	SCF
1728  54F1              .M1:
1729  54F1 18 FE        	JR .M1 ; this is self-modifying part
1730  54F3 CB 1A        	RR D
1731  54F5 CB 1B        	RR E
1732  54F7 CB 1A        	RR D
1733  54F9 CB 1B        	RR E
1734  54FB CB 1A        	RR D
1735  54FD CB 1B        	RR E
1736  54FF CB 1A        	RR D
1737  5501 CB 1B        	RR E
1738  5503
1739  5503 46           	LD B, (HL)
1740  5504 0E 00        	LD C, 0
1741  5506              .M2:
1742  5506 18 FE        	JR .M2 ; also self-modifying part
1743  5508 CB 38        	SRL B
1744  550A CB 19        	RR C
1745  550C CB 38        	SRL B
1746  550E CB 19        	RR C
1747  5510 CB 38        	SRL B
1748  5512 CB 19        	RR C
1749  5514 CB 38        	SRL B
1750  5516 CB 19        	RR C
1751  5518
1752  5518 D9           	EXX
1753  5519 1A           	LD A, (DE) ; background
1754  551A D9           	EXX
1755  551B A2           	AND D
1756  551C B0           	OR B
1757  551D D9           	EXX
1758  551E 12           	LD (DE), A
1759  551F
1760  551F 0A           	LD A, (BC)
1761  5520 D9           	EXX
1762  5521 A3           	AND E
1763  5522 B1           	OR C
1764  5523 23           	INC HL
1765  5524 D9           	EXX
1766  5525 02           	LD (BC), A
1767  5526
1768  5526 23           	INC HL
1769  5527 13           	INC DE
1770  5528 03           	INC BC
1771  5529
1772  5529 08           	EX AF, AF'
1773  552A 3D           	DEC A
1774  552B C2 EA 54     	JP NZ, SHIFT04
1775  552E C9           	RET
1776  552F              ; *******************************************************************************************************
1777  552F
1778  552F              ; *******************************************************************************************************
1779  552F              ; function rotates mask and data of several characters and applies to background data
1780  552F              ; this handles x-shift from 5 to 8
1781  552F              ; contains self-modifying code that is set-up from external function
1782  552F              ; input HL=pointer to mask data
1783  552F              ; input HL'=pointer to character data
1784  552F              ; input DE=output buffer containing background data
1785  552F              ; input BC=DE+8
1786  552F              ; input A=number of characters to process
1787  552F              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1788  552F              SHIFT58:
1789  552F 08           	EX AF, AF'
1790  5530 7E           	LD A, (HL) ; get mask
1791  5531 D9           	EXX
1792  5532 57           	LD D, A
1793  5533 1E FF        	LD E, #FF
1794  5535 37           	SCF
1795  5536              .M1:
1796  5536 18 FE        	JR .M1 ; this is self-modifying part
1797  5538 CB 12        	RL D
1798  553A CB 13        	RL E
1799  553C CB 12        	RL D
1800  553E CB 13        	RL E
1801  5540 CB 12        	RL D
1802  5542 CB 13        	RL E
1803  5544
1804  5544 46           	LD B, (HL)
1805  5545 0E 00        	LD C, 0
1806  5547              .M2:
1807  5547 18 FE        	JR .M2 ; also self-modifying part
1808  5549 CB 20        	SLA B
1809  554B CB 11        	RL C
1810  554D CB 20        	SLA B
1811  554F CB 11        	RL C
1812  5551 CB 20        	SLA B
1813  5553 CB 11        	RL C
1814  5555
1815  5555 D9           	EXX
1816  5556 1A           	LD A, (DE) ; background
1817  5557 D9           	EXX
1818  5558 A3           	AND E
1819  5559 B1           	OR C
1820  555A D9           	EXX
1821  555B 12           	LD (DE), A
1822  555C
1823  555C 0A           	LD A, (BC)
1824  555D D9           	EXX
1825  555E A2           	AND D
1826  555F B0           	OR B
1827  5560 23           	INC HL
1828  5561 D9           	EXX
1829  5562 02           	LD (BC), A
1830  5563
1831  5563 23           	INC HL
1832  5564 13           	INC DE
1833  5565 03           	INC BC
1834  5566
1835  5566 08           	EX AF, AF'
1836  5567 3D           	DEC A
1837  5568 C2 2F 55     	JP NZ, SHIFT58
1838  556B C9           	RET
1839  556C              ; *******************************************************************************************************
1840  556C
1841  556C              ; *******************************************************************************************************
1842  556C              ; routine that shifts one row of characters
1843  556C              ; contains self-modifying code that is set-up from external function
1844  556C              ; input HL=pointer to mask data
1845  556C              ; input HL'=pointer to character data
1846  556C              ; input DE=output buffer containing background data
1847  556C              ; input A=number of characters to process
1848  556C              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1849  556C              SHIFT_ROW:
1850  556C F5           	PUSH AF
1851  556D ED 53 FE 4C  		LD (BLIT_TMP1), DE
1852  5571 E5           		PUSH HL
1853  5572 CD B1 55     			CALL .ADDYSHIFT
1854  5575 E1           		POP HL
1855  5576 ED 53 00 4D  		LD (BLIT_TMP2), DE ; DE+vertical shift
1856  557A              .L1:
1857  557A 3E 08        		LD A, 8
1858  557C DD 96 02     		SUB (IX+2) ; y shift
1859  557F              .CALL1:
1860  557F CD 00 00     		CALL 0
1861  5582 DD 7E 02     		LD A, (IX+2); y shift
1862  5585 B7           		OR A
1863  5586 28 22        		JR Z, .DONE
1864  5588 ED 5B FE 4C  		LD DE, (BLIT_TMP1)
1865  558C E5           		PUSH HL
1866  558D CD BF 55     			CALL .DETONEXTROW
1867  5590 E1           		POP HL
1868  5591              .CALL2:
1869  5591 CD 00 00     		CALL 0
1870  5594 ED 5B FE 4C  		LD DE, (BLIT_TMP1)
1871  5598 E5           		PUSH HL
1872  5599 CD B9 55     			CALL .ADD8
1873  559C E1           		POP HL
1874  559D ED 53 FE 4C  		LD (BLIT_TMP1), DE
1875  55A1 ED 5B 00 4D  		LD DE, (BLIT_TMP2)
1876  55A5 E5           		PUSH HL
1877  55A6 CD B9 55     			CALL .ADD8
1878  55A9 E1           		POP HL
1879  55AA              .DONE:
1880  55AA F1           	POP AF
1881  55AB 3D           	DEC A
1882  55AC C8           	RET Z
1883  55AD F5           	PUSH AF
1884  55AE C3 7A 55     	JP .L1
1885  55B1              .ADDYSHIFT:
1886  55B1 EB           	EX DE, HL
1887  55B2 16 00        	LD D, 0
1888  55B4 DD 5E 02     	LD E, (IX+2); y shift
1889  55B7 18 0C        	JR .MOVDEBC
1890  55B9              .ADD8:
1891  55B9 21 08 00     	LD HL, 8
1892  55BC C3 C5 55     	JP .MOVDEBC
1893  55BF              .DETONEXTROW:
1894  55BF DD 6E 06     	LD L, (IX+6)
1895  55C2 DD 66 07     	LD H, (IX+7) ; bkg add to value
1896  55C5              .MOVDEBC:
1897  55C5 19           	ADD HL, DE
1898  55C6 54           	LD D, H
1899  55C7 5D           	LD E, L
1900  55C8 01 08 00     	LD BC, 8
1901  55CB 09           	ADD HL, BC
1902  55CC 44           	LD B, H
1903  55CD 4D           	LD C, L
1904  55CE C9           	RET
1905  55CF              ; *******************************************************************************************************
1906  55CF
1907  55CF              ; *******************************************************************************************************
1908  55CF              ; function rotates mask and character data and applies it to background
1909  55CF              ; input IX=pointer to structure describing input data
1910  55CF              ; +0  DW horizontal shift count 0-7
1911  55CF              ; +2  DW vertical shift count 0-7
1912  55CF              ; +4  DW background data start;
1913  55CF              ; +6  DW background add to value to next row of background data
1914  55CF              ; +8  DW mask data start;
1915  55CF              ; +10  DW character data start;
1916  55CF              ; +12 DW character&mask add to value to next row of data
1917  55CF              ; +14 DW columns (low byte used)
1918  55CF              ; +16 DW rows (low byte used)
1919  55CF              SHIFT_MERGE_CHARACTER:
1920  55CF DD 7E 00     	LD A, (IX) ; shift
1921  55D2 FE 05        	CP 5
1922  55D4 38 25        	JR C, .RIGHT
1923  55D6              	; shifts 5-7, use rotate towards left 1-3
1924  55D6 21 2F 55     	LD HL, SHIFT58
1925  55D9 22 80 55     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1926  55DC 22 92 55     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1927  55DF D6 05        	SUB 5
1928  55E1 28 0D        	JR Z, .L1
1929  55E3 87           	ADD A, A
1930  55E4 87           	ADD A, A
1931  55E5 67           	LD H, A
1932  55E6 2E 18        	LD L, #18 ; JR opcode
1933  55E8 22 36 55     	LD (SHIFT58.M1), HL
1934  55EB 22 47 55     	LD (SHIFT58.M2), HL
1935  55EE 18 32        	JR .DO
1936  55F0              .L1:
1937  55F0 21 00 00     	LD HL, 0 ; 2xNOP opcode
1938  55F3 22 36 55     	LD (SHIFT58.M1), HL
1939  55F6 22 47 55     	LD (SHIFT58.M2), HL
1940  55F9 18 27        	JR .DO
1941  55FB              .RIGHT:
1942  55FB              	; shifts 0-4, rotate towards right
1943  55FB 21 EA 54     	LD HL, SHIFT04
1944  55FE 22 80 55     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1945  5601 22 92 55     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1946  5604 FE 04        	CP 4
1947  5606 28 11        	JR Z, .R1
1948  5608 D6 04        	SUB 4
1949  560A ED 44        	NEG
1950  560C 87           	ADD A, A
1951  560D 87           	ADD A, A
1952  560E 67           	LD H, A
1953  560F 2E 18        	LD L, #18 ; JR opcode
1954  5611 22 F1 54     	LD (SHIFT04.M1), HL
1955  5614 22 06 55     	LD (SHIFT04.M2), HL
1956  5617 18 09        	JR .DO
1957  5619              .R1:
1958  5619 21 00 00     	LD HL, 0 ; 2xNOP opcode
1959  561C 22 F1 54     	LD (SHIFT04.M1), HL
1960  561F 22 06 55     	LD (SHIFT04.M2), HL
1961  5622              .DO:
1962  5622 DD 46 10     	LD B, (IX+16) ; rows
1963  5625 DD 6E 08     	LD L, (IX+8)
1964  5628 DD 66 09     	LD H, (IX+9) ; mask data
1965  562B DD 5E 04     	LD E, (IX+4)
1966  562E DD 56 05     	LD D, (IX+5) ; background data
1967  5631 D9           	EXX
1968  5632 DD 6E 0A     	LD L, (IX+10)
1969  5635 DD 66 0B     	LD H, (IX+11) ; character data
1970  5638 D9           	EXX
1971  5639              .LOOP:
1972  5639 C5           	PUSH BC
1973  563A E5           		PUSH HL
1974  563B D5           			PUSH DE
1975  563C D9           				EXX
1976  563D E5           				PUSH HL
1977  563E D9           					EXX
1978  563F DD 7E 0E     					LD A, (IX+14) ; columns
1979  5642              .CALL:
1980  5642 CD 6C 55     					CALL SHIFT_ROW
1981  5645 E1           				POP HL
1982  5646 DD 5E 0C     				LD E, (IX+12)
1983  5649 DD 56 0D     				LD D, (IX+13) ; char data to next row
1984  564C 19           				ADD HL, DE
1985  564D D9           				EXX
1986  564E E1           			POP HL
1987  564F DD 5E 06     			LD E, (IX+6)
1988  5652 DD 56 07     			LD D, (IX+7) ; background to next row
1989  5655 19           			ADD HL, DE
1990  5656 EB           			EX DE, HL
1991  5657 E1           		POP HL
1992  5658 DD 4E 0C     		LD C, (IX+12)
1993  565B DD 46 0D     		LD B, (IX+13) ; char data to next row
1994  565E 09           		ADD HL, BC
1995  565F C1           	POP BC
1996  5660 10 D7        	DJNZ .LOOP
1997  5662 C9           	RET
1998  5663              ; *******************************************************************************************************
1999  5663
2000  5663              ; *******************************************************************************************************
2001  5663              ; function to handle CALL BLIT basic extension
2002  5663              ; rotates 1-bit character drawing horizontally with mask and character data and
2003  5663              ; fuses with background data
2004  5663              ; BLIT ( INT request_data_ptr )
2005  5663              ; request_data_ptr described in SHIFT_MERGE_CHARACTER
2006  5663              ; will put ram in page 0 also, page 1 is already there
2007  5663              BLIT:
2008  5663              	; opening (
2009  5663 CD 02 50     	CALL CHKCHAR
2010  5666 28           	DB '('
2011  5667              	; get pointer to request struct
2012  5667 DD 21 2F 54  	LD IX, FRMQNT
2013  566B CD 59 01     	CALL CALBAS
2014  566E D5           	PUSH DE
2015  566F              	; ending )
2016  566F CD 02 50     	CALL CHKCHAR
2017  5672 29           	DB ')'
2018  5673
2019  5673 DD E1        	POP IX ; pointer to request struct
2020  5675
2021  5675 E5           	PUSH HL ; save position in BASIC buffer
2022  5676
2023  5676 FD 21 7D 56  	LD IY, .RET
2024  567A C3 A5 4E     	JP ENABLE_PAGE0
2025  567D              .RET:
2026  567D FB           	EI
2027  567E CD CF 55     	CALL SHIFT_MERGE_CHARACTER
2028  5681
2029  5681 D1               POP DE
2030  5682 C1               POP BC
2031  5683 CD 1C 4E         CALL RESTORE_PAGE_INFO
2032  5686
2033  5686 E1           	POP HL
2034  5687 C9           	RET
2035  5688              ; *******************************************************************************************************
2036  5688
2037  5688
2038  5688              EXT_END:
2039  5688
# file closed: asm\main.asm
