# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; INCLUDE "system_variables.inc"
   4  4000              ; INCLUDE "system_hooks.inc"
   5  4000              ; INCLUDE "bios_calls.inc"
   6  4000
   7  4000              CHPUT   EQU     #A2
   8  4000              CALBAS	EQU		#159
   9  4000              ERRHAND EQU     #406F
  10  4000              FRMEVL  EQU     #4C64
  11  4000              FRESTR	EQU		#67D0
  12  4000              ; FRMQNT = formula quantificator
  13  4000              ; input HL=pointer to current program expression
  14  4000              ; output HL=next address
  15  4000              ; output DE=integer datum
  16  4000              FRMQNT	EQU		#542F
  17  4000              ; GETBYT = get byte parameter
  18  4000              ; input HL=pointer to current program expression
  19  4000              ; output HL=next address
  20  4000              ; output A=E=byte read
  21  4000              GETBYT	EQU		#521C
  22  4000              CHRGTR  EQU     #4666
  23  4000              SYNCHR	EQU		#558C
  24  4000              VALTYP  EQU     #F663
  25  4000              USR     EQU     #F7F8
  26  4000              PROCNM	EQU		#FD89
  27  4000              BIOS_FILVRM  EQU     #56
  28  4000              CLIKSW	EQU		#F3DB
  29  4000              ATRBAS	EQU		#F928
  30  4000
  31  4000              RAMAD0	EQU	0F341h	; Main-RAM Slot (00000h~03FFFh)
  32  4000              RAMAD1	EQU	0F342h	; Main-RAM Slot (04000h~07FFFh)
  33  4000              RAMAD2	EQU	0F343h	; Main-RAM Slot (08000h~0BFFFh)
  34  4000              RAMAD3	EQU	0F344h	; Main-RAM Slot (0C000h~0FFFFh)
  35  4000              EXPTBL	EQU #FCC1
  36  4000              SCRMOD	EQU #FCAF ; current screen mode
  37  4000
  38  4000              ; BASIC error codes
  39  4000              ;01 NEXT without FOR
  40  4000              ;02 Syntax error
  41  4000              ;03 RETURN without GOSUB
  42  4000              ;04 Out of DATA
  43  4000              ;05 Illegal function call
  44  4000              ;06 Overflow
  45  4000              ;07 Out of memory
  46  4000              ;08 Undefined line number
  47  4000              ;09 Subscript out of range
  48  4000              ;10 Redimensioned array
  49  4000              ;11 Division by zero
  50  4000              ;12 Illegal direct
  51  4000              ;13 Type mismatch
  52  4000              ;14 Out of string space
  53  4000              ;15 String too long
  54  4000              ;16 String formula too complex
  55  4000              ;17 Can't CONTINUE
  56  4000              ;18 Undefined user function
  57  4000              ;19 Device I/O error
  58  4000              ;20 Verify error
  59  4000              ;21 No RESUME
  60  4000              ;22 RESUME without error
  61  4000              ;23 Unprintable error
  62  4000              ;24 Missing operand
  63  4000              ;25 Line buffer overflow
  64  4000              ;50 FIELD overflow
  65  4000              ;51 Internal error
  66  4000              ;52 Bad file number
  67  4000              ;53 File not found
  68  4000              ;54 File already open
  69  4000              ;55 Input past end
  70  4000              ;56 Bad file name
  71  4000              ;57 Direct statement in file
  72  4000              ;58 Sequential I/O only
  73  4000              ;59 File not OPEN
  74  4000
  75  4000
  76  4000               ; simulate cartridge with BASIC extension
  77  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  77  4004 F9 4E 00 00
  77  4008 00 00 00 00
  77  400C 00 00 00 00
  78  4010
  79  4010              ; this location #400A stores last location used by basic extension
  80  4010              ; free memory after that point
  81  4010 6A 53         DW EXT_END
  82  4012
  83  4012              ; binary included AKG player compiled at #4012
  84  4012               INCBIN "bin/AKG.bin"
  85  4CEE               INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CEE              MAIN_PLAYER_START EQU 04012H
   2+ 4CEE              PLY_AKG_START EQU 04012H
   3+ 4CEE              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401BH
   4+ 4CEE              PLY_AKG_INITSOUNDEFFECTS EQU 0401BH
   5+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 0401FH
   6+ 4CEE              PLY_AKG_PLAYSOUNDEFFECT EQU 0401FH
   7+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04020H
   8+ 4CEE              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04020H
   9+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04047H
  10+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04047H
  11+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04055H
  12+ 4CEE              PLY_AKG_PSES_PLAY EQU 0408EH
  13+ 4CEE              PLY_AKG_PSES_READFIRSTBYTE EQU 04097H
  14+ 4CEE              PLY_AKG_PSES_S_ENDORLOOP EQU 040AFH
  15+ 4CEE              PLY_AKG_PSES_S_LOOP EQU 040BAH
  16+ 4CEE              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C0H
  17+ 4CEE              PLY_AKG_PSES_NOTREACHED EQU 040D3H
  18+ 4CEE              PLY_AKG_PSES_HARDWAREONLY EQU 040D7H
  19+ 4CEE              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040DEH
  20+ 4CEE              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F0H
  21+ 4CEE              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FAH
  22+ 4CEE              PLY_AKG_PSES_H_AFTERRETRIG EQU 04104H
  23+ 4CEE              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 04118H
  24+ 4CEE              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411DH
  25+ 4CEE              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04125H
  26+ 4CEE              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04130H
  27+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413CH
  28+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 0413EH
  29+ 4CEE              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04144H
  30+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 04148H
  31+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 04148H
  32+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414AH
  33+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414AH
  34+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414AH
  35+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414BH
  36+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414CH
  37+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04150H
  38+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04150H
  39+ 4CEE              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04150H
  40+ 4CEE              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 04158H
  41+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04160H
  42+ 4CEE              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04160H
  43+ 4CEE              PLY_AKG_INIT EQU 04160H
  44+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04160H
  45+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 0418EH
  46+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A2H
  47+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B4H
  48+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D3H
  49+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E0H
  50+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL EQU 041E6H
  51+ 4CEE              PLY_AKG_INITTABLE0 EQU 041E9H
  52+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041E9H
  53+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04203H
  54+ 4CEE              PLY_AKG_INITTABLE0_END EQU 04203H
  55+ 4CEE              PLY_AKG_INITTABLE1 EQU 04203H
  56+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04203H
  57+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04207H
  58+ 4CEE              PLY_AKG_INITTABLE1_END EQU 04207H
  59+ 4CEE              PLY_AKG_INITTABLEORA EQU 04207H
  60+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04207H
  61+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 0421FH
  62+ 4CEE              PLY_AKG_INITTABLEORA_END EQU 0421FH
  63+ 4CEE              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 0421FH
  64+ 4CEE              PLY_AKG_STOP EQU 0421FH
  65+ 4CEE              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04231H
  66+ 4CEE              PLY_AKG_PLAY EQU 04231H
  67+ 4CEE              PLY_AKG_TICKDECREASINGCOUNTER EQU 04239H
  68+ 4CEE              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 0423FH
  69+ 4CEE              PLY_AKG_READLINKER EQU 04244H
  70+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04244H
  71+ 4CEE              PLY_AKG_READLINKER_PTLINKER EQU 04244H
  72+ 4CEE              PLY_AKG_READLINKER_NOLOOP EQU 0424FH
  73+ 4CEE              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 04288H
  74+ 4CEE              PLY_AKG_READLINE EQU 0428BH
  75+ 4CEE              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428BH
  76+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04291H
  77+ 4CEE              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04291H
  78+ 4CEE              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 0429EH
  79+ 4CEE              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A2H
  80+ 4CEE              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A5H
  81+ 4CEE              PLY_AKG_SPEEDTRACK_END EQU 042A8H
  82+ 4CEE              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042A8H
  83+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042AEH
  84+ 4CEE              PLY_AKG_EVENTTRACK_PTTRACK EQU 042AEH
  85+ 4CEE              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BBH
  86+ 4CEE              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042BFH
  87+ 4CEE              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C2H
  88+ 4CEE              PLY_AKG_EVENTTRACK_END EQU 042C5H
  89+ 4CEE              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C5H
  90+ 4CEE              PLY_AKG_CHANNEL1_READTRACK EQU 042D1H
  91+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D1H
  92+ 4CEE              PLY_AKG_CHANNEL1_PTTRACK EQU 042D1H
  93+ 4CEE              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042ECH
  94+ 4CEE              PLY_AKG_CHANNEL1_WAIT EQU 042F7H
  95+ 4CEE              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 042FEH
  96+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 042FEH
  97+ 4CEE              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 042FEH
  98+ 4CEE              PLY_AKG_CHANNEL1_NOTE EQU 04307H
  99+ 4CEE              PLY_AKG_BASENOTEINDEX EQU 04307H
 100+ 4CEE              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 04309H
 101+ 4CEE              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 04309H
 102+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 04319H
 103+ 4CEE              PLY_AKG_INSTRUMENTSTABLE EQU 04319H
 104+ 4CEE              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432BH
 105+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433BH
 106+ 4CEE              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04363H
 107+ 4CEE              PLY_AKG_CHANNEL1_READCELLEND EQU 04366H
 108+ 4CEE              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04366H
 109+ 4CEE              PLY_AKG_CHANNEL2_READTRACK EQU 04372H
 110+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04372H
 111+ 4CEE              PLY_AKG_CHANNEL2_PTTRACK EQU 04372H
 112+ 4CEE              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438DH
 113+ 4CEE              PLY_AKG_CHANNEL2_WAIT EQU 04398H
 114+ 4CEE              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 0439FH
 115+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 0439FH
 116+ 4CEE              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 0439FH
 117+ 4CEE              PLY_AKG_CHANNEL2_NOTE EQU 043A8H
 118+ 4CEE              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043ADH
 119+ 4CEE              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043ADH
 120+ 4CEE              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043CFH
 121+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043DFH
 122+ 4CEE              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04407H
 123+ 4CEE              PLY_AKG_CHANNEL2_READCELLEND EQU 0440AH
 124+ 4CEE              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440AH
 125+ 4CEE              PLY_AKG_CHANNEL3_READTRACK EQU 04416H
 126+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04416H
 127+ 4CEE              PLY_AKG_CHANNEL3_PTTRACK EQU 04416H
 128+ 4CEE              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04431H
 129+ 4CEE              PLY_AKG_CHANNEL3_WAIT EQU 0443CH
 130+ 4CEE              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04443H
 131+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04443H
 132+ 4CEE              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04443H
 133+ 4CEE              PLY_AKG_CHANNEL3_NOTE EQU 0444CH
 134+ 4CEE              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04451H
 135+ 4CEE              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04451H
 136+ 4CEE              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04473H
 137+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04483H
 138+ 4CEE              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ABH
 139+ 4CEE              PLY_AKG_CHANNEL3_READCELLEND EQU 044AEH
 140+ 4CEE              PLY_AKG_CURRENTSPEED EQU 044AEH
 141+ 4CEE              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B0H
 142+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B3H
 143+ 4CEE              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B3H
 144+ 4CEE              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B6H
 145+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044B9H
 146+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044B9H
 147+ 4CEE              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C5H
 148+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CCH
 149+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044CFH
 150+ 4CEE              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D5H
 151+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044D8H
 152+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044D8H
 153+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E6H
 154+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EBH
 155+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F6H
 156+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044F9H
 157+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044F9H
 158+ 4CEE              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FCH
 159+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 044FFH
 160+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE EQU 044FFH
 161+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 04508H
 162+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04512H
 163+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04515H
 164+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04515H
 165+ 4CEE              PLY_AKG_CHANNEL1_PITCH EQU 04515H
 166+ 4CEE              PLY_AKG_CHANNEL1_ISPITCH EQU 04518H
 167+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451DH
 168+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451DH
 169+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04521H
 170+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04523H
 171+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04525H
 172+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452CH
 173+ 4CEE              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452DH
 174+ 4CEE              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04530H
 175+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04530H
 176+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454CH
 177+ 4CEE              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454CH
 178+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 04559H
 179+ 4CEE              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455DH
 180+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456DH
 181+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456DH
 182+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 0456EH
 183+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 0456FH
 184+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04571H
 185+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04571H
 186+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04571H
 187+ 4CEE              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04572H
 188+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04573H
 189+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04575H
 190+ 4CEE              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04575H
 191+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04575H
 192+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04575H
 193+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04575H
 194+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_END EQU 04578H
 195+ 4CEE              PLY_AKG_CHANNEL1_PITCH_END EQU 0457AH
 196+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04582H
 197+ 4CEE              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04582H
 198+ 4CEE              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04585H
 199+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 04588H
 200+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 04588H
 201+ 4CEE              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04594H
 202+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459BH
 203+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 0459EH
 204+ 4CEE              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A4H
 205+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A7H
 206+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A7H
 207+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B5H
 208+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BAH
 209+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C5H
 210+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045C8H
 211+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045C8H
 212+ 4CEE              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CBH
 213+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045CEH
 214+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045CEH
 215+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D7H
 216+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E1H
 217+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E4H
 218+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E4H
 219+ 4CEE              PLY_AKG_CHANNEL2_PITCH EQU 045E4H
 220+ 4CEE              PLY_AKG_CHANNEL2_ISPITCH EQU 045E7H
 221+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045ECH
 222+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045ECH
 223+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F0H
 224+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F2H
 225+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F4H
 226+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FBH
 227+ 4CEE              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FCH
 228+ 4CEE              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 045FFH
 229+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 045FFH
 230+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461BH
 231+ 4CEE              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461BH
 232+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 04628H
 233+ 4CEE              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462CH
 234+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463CH
 235+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463CH
 236+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463DH
 237+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 0463EH
 238+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04640H
 239+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04640H
 240+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04640H
 241+ 4CEE              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04641H
 242+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04642H
 243+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04644H
 244+ 4CEE              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04644H
 245+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04644H
 246+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04644H
 247+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04644H
 248+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_END EQU 04647H
 249+ 4CEE              PLY_AKG_CHANNEL2_PITCH_END EQU 04649H
 250+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04651H
 251+ 4CEE              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04651H
 252+ 4CEE              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04654H
 253+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04657H
 254+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04657H
 255+ 4CEE              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04663H
 256+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466AH
 257+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466DH
 258+ 4CEE              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04673H
 259+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04676H
 260+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04676H
 261+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04684H
 262+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 04689H
 263+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04694H
 264+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04697H
 265+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04697H
 266+ 4CEE              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469AH
 267+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469DH
 268+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469DH
 269+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A6H
 270+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B0H
 271+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B3H
 272+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B3H
 273+ 4CEE              PLY_AKG_CHANNEL3_PITCH EQU 046B3H
 274+ 4CEE              PLY_AKG_CHANNEL3_ISPITCH EQU 046B6H
 275+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BBH
 276+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BBH
 277+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046BFH
 278+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C1H
 279+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C3H
 280+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CAH
 281+ 4CEE              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CBH
 282+ 4CEE              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046CEH
 283+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046CEH
 284+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046EAH
 285+ 4CEE              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046EAH
 286+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F7H
 287+ 4CEE              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FBH
 288+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470BH
 289+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470BH
 290+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470CH
 291+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470DH
 292+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 0470FH
 293+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 0470FH
 294+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 0470FH
 295+ 4CEE              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04710H
 296+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04711H
 297+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04713H
 298+ 4CEE              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04713H
 299+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04713H
 300+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04713H
 301+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04713H
 302+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_END EQU 04716H
 303+ 4CEE              PLY_AKG_CHANNEL3_PITCH_END EQU 04718H
 304+ 4CEE              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04724H
 305+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04724H
 306+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04724H
 307+ 4CEE              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04727H
 308+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 04729H
 309+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 0472FH
 310+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04732H
 311+ 4CEE              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04732H
 312+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04735H
 313+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 0473EH
 314+ 4CEE              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04746H
 315+ 4CEE              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04753H
 316+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04753H
 317+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04753H
 318+ 4CEE              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04756H
 319+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 04758H
 320+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 0475EH
 321+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04761H
 322+ 4CEE              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04761H
 323+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04764H
 324+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476DH
 325+ 4CEE              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04775H
 326+ 4CEE              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04783H
 327+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04783H
 328+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04783H
 329+ 4CEE              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04786H
 330+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 04788H
 331+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 0478EH
 332+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04791H
 333+ 4CEE              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04791H
 334+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04794H
 335+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479DH
 336+ 4CEE              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A5H
 337+ 4CEE              PLY_AKG_SENDPSGREGISTERS EQU 047B4H
 338+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BCH
 339+ 4CEE              PLY_AKG_PSGREG01_INSTR EQU 047BCH
 340+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CCH
 341+ 4CEE              PLY_AKG_PSGREG23_INSTR EQU 047CCH
 342+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DDH
 343+ 4CEE              PLY_AKG_PSGREG45_INSTR EQU 047DDH
 344+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047EEH
 345+ 4CEE              PLY_AKG_PSGREG6_8_INSTR EQU 047EEH
 346+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 047FFH
 347+ 4CEE              PLY_AKG_PSGREG9_10_INSTR EQU 047FFH
 348+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04810H
 349+ 4CEE              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04810H
 350+ 4CEE              PLY_AKG_PSGREG13_OLDVALUE EQU 04825H
 351+ 4CEE              PLY_AKG_RETRIG EQU 04827H
 352+ 4CEE              PLY_AKG_PSGREG13_INSTR EQU 04829H
 353+ 4CEE              PLY_AKG_PSGREG13_END EQU 04838H
 354+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 04838H
 355+ 4CEE              PLY_AKG_SAVESP EQU 04838H
 356+ 4CEE              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483CH
 357+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTS EQU 04844H
 358+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04851H
 359+ 4CEE              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04851H
 360+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTS EQU 04859H
 361+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04866H
 362+ 4CEE              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04866H
 363+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTS EQU 0486EH
 364+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 04879H
 365+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS EQU 04879H
 366+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 04888H
 367+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 04888H
 368+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 0488FH
 369+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 0489FH
 370+ 4CEE              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 0489FH
 371+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A6H
 372+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A6H
 373+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048A9H
 374+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B2H
 375+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B2H
 376+ 4CEE              PLY_AKG_READINSTRUMENTCELL EQU 048B8H
 377+ 4CEE              PLY_AKG_NOSOFTNOHARD EQU 048C5H
 378+ 4CEE              PLY_AKG_NSNH_NONOISE EQU 048DAH
 379+ 4CEE              PLY_AKG_SOFT EQU 048DDH
 380+ 4CEE              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E4H
 381+ 4CEE              PLY_AKG_S_NOTSIMPLE EQU 048ECH
 382+ 4CEE              PLY_AKG_S_AFTERSIMPLETEST EQU 048EFH
 383+ 4CEE              PLY_AKG_HARDTOSOFT EQU 048FCH
 384+ 4CEE              PLY_AKG_HS_JUMPRATIO EQU 04907H
 385+ 4CEE              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04934H
 386+ 4CEE              PLY_AKG_ENDWITHOUTLOOP EQU 04936H
 387+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04936H
 388+ 4CEE              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04936H
 389+ 4CEE              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 0493EH
 390+ 4CEE              PLY_AKG_SH_JUMPRATIO EQU 0494BH
 391+ 4CEE              PLY_AKG_SH_JUMPRATIOEND EQU 0496CH
 392+ 4CEE              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497BH
 393+ 4CEE              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04981H
 394+ 4CEE              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499BH
 395+ 4CEE              PLY_AKG_H_RETRIGEND EQU 049ADH
 396+ 4CEE              PLY_AKG_H_AFTERRETRIG EQU 049AEH
 397+ 4CEE              PLY_AKG_ENDWITHLOOP EQU 049C0H
 398+ 4CEE              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C7H
 399+ 4CEE              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DDH
 400+ 4CEE              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EBH
 401+ 4CEE              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FBH
 402+ 4CEE              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A09H
 403+ 4CEE              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A18H
 404+ 4CEE              PLY_AKG_SHOHS_RETRIGEND EQU 04A27H
 405+ 4CEE              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A28H
 406+ 4CEE              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3AH
 407+ 4CEE              PLY_AKG_EFFECTTABLE EQU 04A48H
 408+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A48H
 409+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6CH
 410+ 4CEE              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6CH
 411+ 4CEE              PLY_AKG_EFFECT_RESET EQU 04A6FH
 412+ 4CEE              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A71H
 413+ 4CEE              PLY_AKG_EFFECT_VOLUME EQU 04A8CH
 414+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A98H
 415+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04A9EH
 416+ 4CEE              PLY_AKG_ARPEGGIOSTABLE EQU 04A9EH
 417+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC5H
 418+ 4CEE              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACCH
 419+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD2H
 420+ 4CEE              PLY_AKG_PITCHESTABLE EQU 04AD2H
 421+ 4CEE              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AF9H
 422+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B00H
 423+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B11H
 424+ 4CEE              PLY_AKG_EFFECT_PITCHDOWN EQU 04B18H
 425+ 4CEE              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B28H
 426+ 4CEE              PLY_AKG_EFFECT_PITCHUP EQU 04B3DH
 427+ 4CEE              PLY_AKG_EFFECT_PITCHSTOP EQU 04B4FH
 428+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B56H
 429+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B80H
 430+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B80H
 431+ 4CEE              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B99H
 432+ 4CEE              PLY_AKG_EFFECT_GLIDESPEED EQU 04B99H
 433+ 4CEE              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BABH
 434+ 4CEE              PLY_AKG_EFFECT_LEGATO EQU 04BC1H
 435+ 4CEE              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD5H
 436+ 4CEE              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDDH
 437+ 4CEE              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE5H
 438+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEDH
 439+ 4CEE              PLY_AKG_EVENT EQU 04BEDH
 440+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BEEH
 441+ 4CEE              PLY_AKG_PERIODTABLE EQU 04BEEH
 442+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BEEH
 443+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CEEH
 444+ 4CEE              PLY_AKG_PERIODTABLE_END EQU 04CEEH
 445+ 4CEE              PLY_AKG_END EQU 04CEEH
 446+ 4CEE              MAIN_PLAYER_END EQU 04CEEH
 447+ 4CEE              TESTEREND EQU 04CEEH
 448+ 4CEE
# file closed: ./symbol/AKG.sym
  86  4CEE
  87  4CEE              ORIG.HTIMI:
  88  4CEE 00 00 00 00  	DB 0, 0, 0, 0, 0
  88  4CF2 00
  89  4CF3               EXPORT ORIG.HTIMI
  90  4CF3
  91  4CF3              MUSIC_INIT_STATUS:
  92  4CF3 00            DB 0
  93  4CF4              SFX_INIT_STATUS:
  94  4CF4 00            DB 0
  95  4CF5              SOUND_ENABLED:
  96  4CF5 00            DB 0
  97  4CF6
  98  4CF6              SPRATR_INIT_STATUS:
  99  4CF6 00            DB 0
 100  4CF7              SPRATR_UPDATE_FLAG:
 101  4CF7 00 00         DW 0
 102  4CF9              SPRATR_DATA:
 103  4CF9 00 00         DW 0
 104  4CFB              SPRATR_SPRITE_NUM:
 105  4CFB 00            DB 0
 106  4CFC
 107  4CFC              ; to temporarily store stack pointer
 108  4CFC              TMPSP:
 109  4CFC 00 00         DW 0
 110  4CFE
 111  4CFE              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 112  4CFE              ; per starting letter, if no commands with this letter, NULL value
 113  4CFE              CMDS:
 114  4CFE 00 00            DW 0 ; A
 115  4D00 00 00            DW 0 ; B
 116  4D02 00 00            DW 0 ; C
 117  4D04 00 00            DW 0 ; D
 118  4D06 00 00            DW 0 ; E
 119  4D08 59 4D            DW CMDS_F; F
 120  4D0A 6C 4D            DW CMDS_G; G
 121  4D0C 00 00            DW 0 ; H
 122  4D0E 00 00            DW 0 ; I
 123  4D10 00 00            DW 0 ; J
 124  4D12 00 00            DW 0 ; K
 125  4D14 3C 4D            DW CMDS_L ; L
 126  4D16 46 4D            DW CMDS_M ; M
 127  4D18 00 00            DW 0 ; N
 128  4D1A 00 00            DW 0 ; O
 129  4D1C 00 00            DW 0 ; P
 130  4D1E 00 00            DW 0 ; Q
 131  4D20 00 00            DW 0 ; R
 132  4D22 80 4D            DW CMDS_S ; S
 133  4D24 00 00            DW 0 ; T
 134  4D26 32 4D            DW CMDS_U ; U
 135  4D28 76 4D            DW CMDS_V ; V
 136  4D2A 00 00            DW 0 ; W
 137  4D2C 00 00            DW 0 ; X
 138  4D2E 00 00            DW 0 ; Y
 139  4D30 00 00            DW 0 ; Z
 140  4D32
 141  4D32              CMDS_U:
 142  4D32 55 50 52 49  	DEFB	"UPRINT",0      ; Print upper case string
 142  4D36 4E 54 00
 143  4D39 36 4F        	DEFW	UPRINT
 144  4D3B 00               DB 0
 145  4D3C              CMDS_L:
 146  4D3C 4C 50 52 49  	DEFB	"LPRINT",0      ; Print lower case string
 146  4D40 4E 54 00
 147  4D43 53 4F        	DEFW	LPRINT
 148  4D45 00               DB 0
 149  4D46              CMDS_M:
 150  4D46 4D 45 4D 56      DB "MEMVRM", 0
 150  4D4A 52 4D 00
 151  4D4D 48 51            DW MEMVRM
 152  4D4F 4D 45 4D 43  	DB "MEMCPY", 0
 152  4D53 50 59 00
 153  4D56 BA 4F        	DW MEMCPY
 154  4D58 00               DB 0
 155  4D59              CMDS_F:
 156  4D59 46 49 4C 56      DB "FILVRM", 0
 156  4D5D 52 4D 00
 157  4D60 2A 50            DW FILVRM
 158  4D62 46 49 4C 52      DB "FILRAM", 0
 158  4D66 41 4D 00
 159  4D69 71 50            DW FILRAM
 160  4D6B 00               DB 0
 161  4D6C              CMDS_G:
 162  4D6C 47 45 4E 43      DB "GENCAL", 0
 162  4D70 41 4C 00
 163  4D73 EF 50            DW GENCAL
 164  4D75 00           	DB	0
 165  4D76              CMDS_V:
 166  4D76 56 52 4D 4D  	DB "VRMMEM", 0
 166  4D7A 45 4D 00
 167  4D7D CA 51        	DW VRMMEM
 168  4D7F 00           	DB 0
 169  4D80              CMDS_S:
 170  4D80 53 4E 44 53  	DB "SNDSFX", 0
 170  4D84 46 58 00
 171  4D87 09 53        	DW SNDSFX
 172  4D89 53 4E 44 50  	DB "SNDPLYINI", 0
 172  4D8D 4C 59 49 4E
 172  4D91 49 00
 173  4D93 82 52        	DW SNDPLYINIT
 174  4D95 53 4E 44 50  	DB "SNDPLYON", 0
 174  4D99 4C 59 4F 4E
 174  4D9D 00
 175  4D9E D3 52        	DW SNDPLYON
 176  4DA0 53 4E 44 50  	DB "SNDPLYOFF", 0
 176  4DA4 4C 59 4F 46
 176  4DA8 46 00
 177  4DAA E6 52        	DW SNDPLYOFF
 178  4DAC 00           	DB 0
 179  4DAD
 180  4DAD              ; ****************************************************************************************************
 181  4DAD              ; function sets VRAM address
 182  4DAD              ; input HL=address
 183  4DAD              ; modifies AF
 184  4DAD              SETWRT_LOCAL:
 185  4DAD 7D           	LD	A, L
 186  4DAE D3 99        	OUT	(099H), A
 187  4DB0 7C           	LD	A, H
 188  4DB1 E6 3F        	AND	03FH
 189  4DB3 F6 40        	OR	040H
 190  4DB5 D3 99        	OUT	(099H), A
 191  4DB7 C9           	RET
 192  4DB8              ; ****************************************************************************************************
 193  4DB8
 194  4DB8              ; ****************************************************************************************************
 195  4DB8              ; function gets slot and subslot data for specific page
 196  4DB8              ; input A=page (0, 1 or 2)
 197  4DB8              ; output B = 0A8H register value
 198  4DB8              ; output D = 0 is no subslots, 1 if yes
 199  4DB8              ; output C = 0A8H value when page 3 slot equals to requested page slot
 200  4DB8              ; output E = subslot value if present
 201  4DB8              ; modifies AF, BC, DE, HL
 202  4DB8              GET_PAGE_INFO:
 203  4DB8 6F               LD L, A
 204  4DB9 C6 C1            ADD A, low (EXPTBL)
 205  4DBB 32 C5 4D         LD (GET_PAGE_INFO_L1+1), A
 206  4DBE DB A8            IN A, (0A8H)
 207  4DC0 47               LD B, A
 208  4DC1 E6 3F            AND 03FH
 209  4DC3 4F               LD C, A
 210  4DC4              GET_PAGE_INFO_L1:
 211  4DC4 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 212  4DC7 E6 80            AND 080H
 213  4DC9 28 1B            JR Z, GET_PAGE_INFO_L2
 214  4DCB                  ; expanded
 215  4DCB 2D               DEC L
 216  4DCC FA EB 4D         JP M, GET_PAGE_INFO_L3
 217  4DCF 2D               DEC L
 218  4DD0 FA E9 4D         JP M, GET_PAGE_INFO_L4
 219  4DD3                  ; page 2
 220  4DD3 07               RLCA
 221  4DD4 07               RLCA
 222  4DD5              GET_PAGE_INFO_L5:
 223  4DD5 E6 C0            AND 0C0H
 224  4DD7 B1               OR C
 225  4DD8 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 226  4DDA 4F               LD C, A
 227  4DDB 3A FF FF         LD A, (0FFFFH)
 228  4DDE 2F               CPL
 229  4DDF 5F               LD E, A
 230  4DE0 16 01            LD D, 1
 231  4DE2 78               LD A, B ; return stack
 232  4DE3 D3 A8            OUT (0A8H), A
 233  4DE5 C9               RET
 234  4DE6              GET_PAGE_INFO_L2:
 235  4DE6                  ; not expanded
 236  4DE6 16 00            LD D, 0
 237  4DE8 C9               RET
 238  4DE9              GET_PAGE_INFO_L4:
 239  4DE9                  ; page 1
 240  4DE9 0F               RRCA
 241  4DEA 0F               RRCA
 242  4DEB              GET_PAGE_INFO_L3:
 243  4DEB                  ; page 0
 244  4DEB 0F               RRCA
 245  4DEC 0F               RRCA
 246  4DED 18 E6            JR GET_PAGE_INFO_L5
 247  4DEF              ; ****************************************************************************************************
 248  4DEF
 249  4DEF              ; ****************************************************************************************************
 250  4DEF              ; function returns original slot and subslot info
 251  4DEF              ; input B = 0A8H register value
 252  4DEF              ; input D = 0 is no subslots, 1 if yes
 253  4DEF              ; input C = 0A8H value when page 3 slot equals to requested page slot
 254  4DEF              ; input E = subslot value if present
 255  4DEF              ; modifies AF
 256  4DEF              RESTORE_PAGE_INFO:
 257  4DEF 7A               LD A, D
 258  4DF0 B7               OR A
 259  4DF1 28 07            JR Z, RESTORE_PAGE_INFO_L1
 260  4DF3 79               LD A, C
 261  4DF4 D3 A8            OUT (0A8H), A
 262  4DF6 7B               LD A, E
 263  4DF7 32 FF FF         LD (0FFFFH), A
 264  4DFA              RESTORE_PAGE_INFO_L1:
 265  4DFA 78               LD A, B
 266  4DFB D3 A8            OUT (0A8H), A
 267  4DFD C9               RET
 268  4DFE              ; ****************************************************************************************************
 269  4DFE
 270  4DFE              ; *******************************************************************************************************
 271  4DFE              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 272  4DFE              ; INPUT:  A = SLOT ID: EXXXSSPP
 273  4DFE              ; E = EXPANDED FLAG
 274  4DFE              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 275  4DFE              ; PP = PRIMARY SLOT NUMBER
 276  4DFE              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 277  4DFE              ; CHANGES: AF, BC, DE
 278  4DFE
 279  4DFE              LOCAL_ENASLT:
 280  4DFE CD 1E 4E         CALL L0353
 281  4E01 FA 0B 4E         JP M, L0340
 282  4E04 DB A8            IN A, (0A8H)
 283  4E06 A1               AND C
 284  4E07 B0               OR B
 285  4E08 D3 A8            OUT (0A8H), A
 286  4E0A C9               RET
 287  4E0B              L0340:
 288  4E0B E5               PUSH HL
 289  4E0C CD 43 4E         CALL L0378
 290  4E0F 4F               LD C, A
 291  4E10 06 00            LD B, 0
 292  4E12 7D               LD A, L
 293  4E13 A4               AND H
 294  4E14 B2               OR D
 295  4E15 21 C5 FC         LD HL, 0FCC5H
 296  4E18 09               ADD HL, BC
 297  4E19 77               LD (HL), A
 298  4E1A E1               POP HL
 299  4E1B 79               LD A, C
 300  4E1C 18 E0            JR LOCAL_ENASLT
 301  4E1E              L0353:
 302  4E1E F3               DI
 303  4E1F F5               PUSH AF
 304  4E20 7C               LD A, H
 305  4E21 07               RLCA
 306  4E22 07               RLCA
 307  4E23 E6 03            AND 3
 308  4E25 5F               LD E, A
 309  4E26 3E C0            LD A, 0C0H
 310  4E28              L035D:
 311  4E28 07               RLCA
 312  4E29 07               RLCA
 313  4E2A 1D               DEC E
 314  4E2B F2 28 4E         JP P, L035D
 315  4E2E 5F               LD E, A
 316  4E2F 2F               CPL
 317  4E30 4F               LD C, A
 318  4E31 F1               POP AF
 319  4E32 F5               PUSH AF
 320  4E33 E6 03            AND 3
 321  4E35 3C               INC A
 322  4E36 47               LD B, A
 323  4E37 3E AB            LD A, 0ABH
 324  4E39              L036E:
 325  4E39 C6 55            ADD A, 055H
 326  4E3B 10 FC            DJNZ L036E
 327  4E3D 57               LD D, A
 328  4E3E A3               AND E
 329  4E3F 47               LD B, A
 330  4E40 F1               POP AF
 331  4E41 A7               AND A
 332  4E42 C9               RET
 333  4E43              L0378:
 334  4E43 F5               PUSH AF
 335  4E44 7A               LD A, D
 336  4E45 E6 C0            AND 0C0H
 337  4E47 4F               LD C, A
 338  4E48 F1               POP AF
 339  4E49 F5               PUSH AF
 340  4E4A 57               LD D, A
 341  4E4B DB A8            IN A, (0A8H)
 342  4E4D 47               LD B, A
 343  4E4E E6 3F            AND 03FH
 344  4E50 B1               OR C
 345  4E51 D3 A8            OUT (0A8H), A
 346  4E53 7A               LD A, D
 347  4E54 0F               RRCA
 348  4E55 0F               RRCA
 349  4E56 E6 03            AND 3
 350  4E58 57               LD D, A
 351  4E59 3E AB            LD A, 0ABH
 352  4E5B              L0390:
 353  4E5B C6 55            ADD A, 055H
 354  4E5D 15               DEC D
 355  4E5E F2 5B 4E         JP P, L0390
 356  4E61 A3               AND E
 357  4E62 57               LD D, A
 358  4E63 7B               LD A, E
 359  4E64 2F               CPL
 360  4E65 67               LD H, A
 361  4E66 3A FF FF         LD A, (0FFFFH)
 362  4E69 2F               CPL
 363  4E6A 6F               LD L, A
 364  4E6B A4               AND H
 365  4E6C B2               OR D
 366  4E6D 32 FF FF         LD (0FFFFH), A
 367  4E70 78               LD A, B
 368  4E71 D3 A8            OUT (0A8H), A
 369  4E73 F1               POP AF
 370  4E74 E6 03            AND 3
 371  4E76 C9               RET
 372  4E77              ; *******************************************************************************************************
 373  4E77
 374  4E77              ; *******************************************************************************************************
 375  4E77              ; function updates sprite attribute table in VRAM based on buffer of the form
 376  4E77              ; struct {
 377  4E77              ; DW y
 378  4E77              ; DW x
 379  4E77              ; DW pattern (0-31)
 380  4E77              ; DW color
 381  4E77              ; } [SPRATR_SPRITE_NUM]
 382  4E77              ; will hide sprites whose location is outside of visible area
 383  4E77              ; works in screen 1 and 2
 384  4E77              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
 385  4E77              SPRATR_UPDATE:
 386  4E77              	; check if initialized
 387  4E77 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
 388  4E7A B7           	OR A
 389  4E7B C8           	RET Z
 390  4E7C              	; check if update requested
 391  4E7C 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 392  4E7F 7E           	LD A, (HL)
 393  4E80 B7           	OR A
 394  4E81 C8           	RET Z
 395  4E82              	; check screen mode
 396  4E82 3A AF FC     	LD A, (SCRMOD)
 397  4E85 3D           	DEC A
 398  4E86 28 02        	JR Z, .L0 ; screen 1
 399  4E88 3D           	DEC A
 400  4E89 C0           	RET NZ ; not screen 2
 401  4E8A              .L0:
 402  4E8A              	; get number of sprites to process
 403  4E8A 3A FB 4C     	LD A, (SPRATR_SPRITE_NUM)
 404  4E8D 47           	LD B, A
 405  4E8E 0E 98        	LD C, #98 ; register for vpd data output
 406  4E90              	; set VDP address
 407  4E90 2A 28 F9     	LD HL, (ATRBAS)
 408  4E93 CD AD 4D     	CALL SETWRT_LOCAL
 409  4E96 ED 73 FC 4C  	LD (TMPSP), SP
 410  4E9A ED 7B F9 4C  	LD SP, (SPRATR_DATA)
 411  4E9E
 412  4E9E              .LOOP:
 413  4E9E E1           	POP HL
 414  4E9F 24           	INC H
 415  4EA0 28 0D        	JR Z, .L1 ; negative number above -256
 416  4EA2 25           	DEC H
 417  4EA3 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
 418  4EA5 7D           	LD A, L
 419  4EA6 FE C0        	CP 192
 420  4EA8 30 10        	JR NC, .OUT3
 421  4EAA 3D           	DEC A ; due to VDP rule that top of screen is -1
 422  4EAB 57           	LD D, A
 423  4EAC C3 C9 4E     	JP .X
 424  4EAF              .L1:
 425  4EAF 7D           	LD A, L
 426  4EB0 C6 10        	ADD 16
 427  4EB2 FA BA 4E     	JP M, .OUT3 ; below -16
 428  4EB5 2D           	DEC L ; due to VDP rule that top of screen is -1
 429  4EB6 55           	LD D, L
 430  4EB7 C3 C9 4E     	JP .X
 431  4EBA              .OUT3:
 432  4EBA E1           	POP HL ; skip x value
 433  4EBB              .OUT2:
 434  4EBB E1           	POP HL ; skip pattern
 435  4EBC E1           	POP HL ; skip color
 436  4EBD 3E D1        	LD A, #D1
 437  4EBF D3 98        	OUT (#98), A ; sprite hidden
 438  4EC1 D3 98        	OUT (#98), A ; value unimportant
 439  4EC3 D3 98        	OUT (#98), A ; value unimportant
 440  4EC5 D3 98        	OUT (#98), A ; value unimportant
 441  4EC7 10 D5        	DJNZ .LOOP
 442  4EC9              .X:
 443  4EC9 E1           	POP HL
 444  4ECA 24           	INC H
 445  4ECB 28 08        	JR Z, .L2
 446  4ECD 25           	DEC H
 447  4ECE 20 EB        	JR NZ, .OUT2
 448  4ED0 1E 00        	LD E, 0 ; EC bit
 449  4ED2 C3 DE 4E     	JP .XY
 450  4ED5              .L2:
 451  4ED5 7D           	LD A, L
 452  4ED6 C6 20        	ADD 32
 453  4ED8 FA BB 4E     	JP M, .OUT2
 454  4EDB 6F           	LD L, A
 455  4EDC 1E 80        	LD E, #80
 456  4EDE              .XY:
 457  4EDE ED 51        	OUT (C), D
 458  4EE0 ED 69        	OUT (C), L
 459  4EE2 E1           	POP HL ; pattern
 460  4EE3 7D           	LD A, L
 461  4EE4 87           	ADD A, A
 462  4EE5 87           	ADD A, A ; needs to go at 4x
 463  4EE6 D3 98        	OUT (#98), A
 464  4EE8 E1           	POP HL ; color
 465  4EE9 7D           	LD A, L
 466  4EEA B3           	OR E
 467  4EEB D3 98        	OUT (#98), A
 468  4EED 10 AF        	DJNZ .LOOP
 469  4EEF
 470  4EEF ED 7B FC 4C  	LD SP, (TMPSP)
 471  4EF3 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 472  4EF6 36 00        	LD (HL), 0 ; zero out update flag
 473  4EF8 C9           	RET
 474  4EF9              ; *******************************************************************************************************
 475  4EF9
 476  4EF9              ; General BASIC CALL-instruction handler
 477  4EF9              CALLHAND:
 478  4EF9 E5           	PUSH HL
 479  4EFA 21 FE 4C     	LD	HL, CMDS ; pointer table based on starting letter
 480  4EFD 3A 89 FD         LD A, (PROCNM)
 481  4F00 D6 41            SUB 'A'
 482  4F02 87               ADD A, A
 483  4F03 16 00            LD D, 0
 484  4F05 5F               LD E, A
 485  4F06 19               ADD HL, DE
 486  4F07 5E               LD E, (HL)
 487  4F08 23               INC HL
 488  4F09 56               LD D, (HL)
 489  4F0A 7A               LD A, D
 490  4F0B B3               OR E
 491  4F0C 28 24            JR Z, .CMDNOTRECOGNIZED
 492  4F0E EB               EX DE, HL
 493  4F0F              .CHKCMD:
 494  4F0F 11 89 FD     	LD	DE, PROCNM
 495  4F12 1A           .LOOP:	LD	A,(DE)
 496  4F13 BE           	CP	(HL)
 497  4F14 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 498  4F16 13           	INC	DE
 499  4F17 23           	INC	HL
 500  4F18 A7           	AND	A
 501  4F19 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 502  4F1B 5E           	LD	E,(HL)
 503  4F1C 23           	INC	HL
 504  4F1D 56           	LD	D,(HL)
 505  4F1E E1           	POP	HL		; routine address
 506  4F1F CD A5 4F     	CALL	GETPREVCHAR
 507  4F22 CD 34 4F     	CALL	.CALLDE		; Call routine
 508  4F25 A7           	AND	A
 509  4F26 C9           	RET
 510  4F27
 511  4F27              .TONEXTCMD:
 512  4F27 0E FF        	LD	C,0FFH
 513  4F29 AF           	XOR	A
 514  4F2A ED B1        	CPIR			; Skip to end of instruction name
 515  4F2C 23           	INC	HL
 516  4F2D 23           	INC	HL		; Skip address
 517  4F2E BE           	CP	(HL)
 518  4F2F 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 519  4F31 E1           	POP	HL
 520  4F32              .CMDNOTRECOGNIZED:
 521  4F32 37               SCF
 522  4F33 C9           	RET
 523  4F34
 524  4F34              .CALLDE:
 525  4F34 D5           	PUSH	DE
 526  4F35 C9           	RET
 527  4F36
 528  4F36              ;---------------------------
 529  4F36
 530  4F36              ;---------------------------
 531  4F36              UPRINT:
 532  4F36 CD 7A 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 533  4F39 E5           	PUSH	HL
 534  4F3A CD 70 4F             CALL    GETSTRPNT
 535  4F3D              .LOOP
 536  4F3D 7E                   LD      A,(HL)
 537  4F3E CD 4A 4F             CALL    .UCASE
 538  4F41 CD A2 00             CALL    CHPUT  ;Print
 539  4F44 23                   INC     HL
 540  4F45 10 F6                DJNZ    .LOOP
 541  4F47
 542  4F47 E1           	POP	HL
 543  4F48 B7           	OR      A
 544  4F49 C9           	RET
 545  4F4A
 546  4F4A              .UCASE:
 547  4F4A FE 61                CP      "a"
 548  4F4C D8                   RET     C
 549  4F4D FE 7B                CP      "z"+1
 550  4F4F D0                   RET     NC
 551  4F50 E6 DF                AND     %11011111
 552  4F52 C9                   RET
 553  4F53              ;---------------------------
 554  4F53              LPRINT:
 555  4F53 CD 7A 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 556  4F56 E5           	PUSH	HL
 557  4F57 CD 70 4F             CALL    GETSTRPNT
 558  4F5A              .LOOP
 559  4F5A 7E                   LD      A,(HL)
 560  4F5B CD 67 4F             CALL    .LCASE
 561  4F5E CD A2 00             CALL    CHPUT  ;Print
 562  4F61 23                   INC     HL
 563  4F62 10 F6                DJNZ    .LOOP
 564  4F64
 565  4F64 E1           	POP	HL
 566  4F65 B7           	OR      A
 567  4F66 C9           	RET
 568  4F67
 569  4F67              .LCASE:
 570  4F67 FE 41                CP      "A"
 571  4F69 D8                   RET     C
 572  4F6A FE 5B                CP      "Z"+1
 573  4F6C D0                   RET     NC
 574  4F6D F6 20                OR      %00100000
 575  4F6F C9                   RET
 576  4F70              ;---------------------------
 577  4F70
 578  4F70              GETSTRPNT:
 579  4F70              ; OUT:
 580  4F70              ; HL = String Address
 581  4F70              ; B  = Lenght
 582  4F70
 583  4F70 2A F8 F7             LD      HL,(USR)
 584  4F73 46                   LD      B,(HL)
 585  4F74 23                   INC     HL
 586  4F75 5E                   LD      E,(HL)
 587  4F76 23                   INC     HL
 588  4F77 56                   LD      D,(HL)
 589  4F78 EB                   EX      DE,HL
 590  4F79 C9                   RET
 591  4F7A
 592  4F7A              EVALTXTPARAM:
 593  4F7A CD 9B 4F     	CALL	CHKCHAR
 594  4F7D 28           	DEFB	"("             ; Check for (
 595  4F7E DD 21 64 4C  	LD	IX,FRMEVL
 596  4F82 CD 59 01     	CALL	CALBAS		; Evaluate expression
 597  4F85 3A 63 F6             LD      A,(VALTYP)
 598  4F88 FE 03                CP      3               ; Text type?
 599  4F8A C2 AD 4F             JP      NZ,TYPE_MISMATCH
 600  4F8D E5                   PUSH	HL
 601  4F8E DD 21 D0 67          LD	IX,FRESTR         ; Free the temporary string
 602  4F92 CD 59 01             CALL	CALBAS
 603  4F95 E1                   POP	HL
 604  4F96 CD 9B 4F     	CALL	CHKCHAR
 605  4F99 29           	DEFB	")"             ; Check for )
 606  4F9A C9                   RET
 607  4F9B
 608  4F9B
 609  4F9B              CHKCHAR:
 610  4F9B CD A5 4F     	CALL	GETPREVCHAR	; Get previous basic char
 611  4F9E E3           	EX	(SP),HL
 612  4F9F BE           	CP	(HL) 	        ; Check if good char
 613  4FA0 20 0F        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 614  4FA2 23           	INC	HL
 615  4FA3 E3           	EX	(SP),HL
 616  4FA4 23           	INC	HL		; Get next basic char
 617  4FA5
 618  4FA5              GETPREVCHAR:
 619  4FA5 2B           	DEC	HL
 620  4FA6 DD 21 66 46  	LD	IX,CHRGTR
 621  4FAA C3 59 01     	JP      CALBAS
 622  4FAD
 623  4FAD
 624  4FAD              TYPE_MISMATCH:
 625  4FAD 1E 0D            LD E, 13 ; Type mismatch
 626  4FAF 18 02            JR THROW_ERROR
 627  4FB1
 628  4FB1              SYNTAX_ERROR:
 629  4FB1 1E 02            LD E, 2 ; Syntax error
 630  4FB3              THROW_ERROR:
 631  4FB3 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 632  4FB7 C3 59 01     	JP	CALBAS
 633  4FBA
 634  4FBA              ;---------------------------
 635  4FBA
 636  4FBA              ; *******************************************************************************************************
 637  4FBA              ; function to handle CALL MEMCPY basic extension
 638  4FBA              ; _MEMCPY ( INT source,
 639  4FBA              ;			INT destination,
 640  4FBA              ;			INT count,
 641  4FBA              ;			BYTE enable_ram, >0 = true
 642  4FBA              ;			BYTE wait_vsync) >0 = treu
 643  4FBA              ; enable_ram will put ram in page 0 also, page 1 is already there
 644  4FBA              ; wait_vsync will issue HALT before copying
 645  4FBA              MEMCPY:
 646  4FBA              	; opening (
 647  4FBA CD 9B 4F     	CALL CHKCHAR
 648  4FBD 28           	DB '('
 649  4FBE              	; get source address
 650  4FBE DD 21 2F 54  	LD IX, FRMQNT
 651  4FC2 CD 59 01     	CALL CALBAS
 652  4FC5 D5           	PUSH DE
 653  4FC6              	; comma
 654  4FC6 CD 9B 4F     	CALL CHKCHAR
 655  4FC9 2C           	DB ','
 656  4FCA              	; get destination address
 657  4FCA DD 21 2F 54  	LD IX, FRMQNT
 658  4FCE CD 59 01     	CALL CALBAS
 659  4FD1 D5           	PUSH DE
 660  4FD2              	; comma
 661  4FD2 CD 9B 4F     	CALL CHKCHAR
 662  4FD5 2C           	DB ','
 663  4FD6              	; get length
 664  4FD6 DD 21 2F 54  	LD IX, FRMQNT
 665  4FDA CD 59 01     	CALL CALBAS
 666  4FDD D5           	PUSH DE
 667  4FDE              	; comma
 668  4FDE CD 9B 4F     	CALL CHKCHAR
 669  4FE1 2C           	DB ','
 670  4FE2              	; get ROM/RAM
 671  4FE2 DD 21 1C 52  	LD IX, GETBYT
 672  4FE6 CD 59 01     	CALL CALBAS
 673  4FE9 F5           	PUSH AF
 674  4FEA              	; comma
 675  4FEA CD 9B 4F     	CALL CHKCHAR
 676  4FED 2C           	DB ','
 677  4FEE              	; get vsync wait
 678  4FEE DD 21 1C 52  	LD IX, GETBYT
 679  4FF2 CD 59 01     	CALL CALBAS
 680  4FF5 F5           	PUSH AF
 681  4FF6              	; ending )
 682  4FF6 CD 9B 4F     	CALL CHKCHAR
 683  4FF9 29           	DB ')'
 684  4FFA
 685  4FFA FB               EI
 686  4FFB              	; save position
 687  4FFB E5           	PUSH HL
 688  4FFC DD E1        	POP IX
 689  4FFE
 690  4FFE              	; syntax ok
 691  4FFE              	; wait for vsync if needed
 692  4FFE F1           	POP AF
 693  4FFF B7           	OR A
 694  5000 28 01        	JR Z, .L1
 695  5002 76           	HALT
 696  5003
 697  5003              .L1:
 698  5003              	; enable RAM in page 0 if needed
 699  5003 F1           	POP AF
 700  5004 B7           	OR A
 701  5005              	; pop LDIR parameters and store away for later
 702  5005 C1           	POP BC
 703  5006 D1           	POP DE
 704  5007 E1           	POP HL
 705  5008 28 1A        	JR Z, .L2
 706  500A D9           	EXX
 707  500B AF               XOR A
 708  500C CD B8 4D         CALL GET_PAGE_INFO
 709  500F C5               PUSH BC
 710  5010 D5               PUSH DE
 711  5011 3A 41 F3         LD A, (RAMAD0)
 712  5014 26 00            LD H, 0
 713  5016 F3           	DI
 714  5017 CD FE 4D         CALL LOCAL_ENASLT
 715  501A D9           	EXX
 716  501B ED B0        	LDIR
 717  501D D1               POP DE
 718  501E C1               POP BC
 719  501F CD EF 4D         CALL RESTORE_PAGE_INFO
 720  5022 18 02        	JR .L3
 721  5024
 722  5024              .L2:
 723  5024 ED B0        	LDIR
 724  5026
 725  5026              .L3:
 726  5026 DD E5        	PUSH IX
 727  5028 E1           	POP HL
 728  5029 C9           	RET
 729  502A              ; *******************************************************************************************************
 730  502A
 731  502A              ; *******************************************************************************************************
 732  502A              ; function to handle CALL FILVRM basic extension
 733  502A              ; FILVRM ( INT offset,
 734  502A              ;		   INT count,
 735  502A              ;		   BYTE value,
 736  502A              ;		   BYTE wait_vsync) >0 = true
 737  502A              ; wait_vsync will issue HALT before copying
 738  502A              FILVRM:
 739  502A              	; opening (
 740  502A CD 9B 4F     	CALL CHKCHAR
 741  502D 28           	DB '('
 742  502E              	; get offset address
 743  502E DD 21 2F 54  	LD IX, FRMQNT
 744  5032 CD 59 01     	CALL CALBAS
 745  5035 D5           	PUSH DE
 746  5036              	; comma
 747  5036 CD 9B 4F     	CALL CHKCHAR
 748  5039 2C           	DB ','
 749  503A              	; get count
 750  503A DD 21 2F 54  	LD IX, FRMQNT
 751  503E CD 59 01     	CALL CALBAS
 752  5041 D5           	PUSH DE
 753  5042              	; comma
 754  5042 CD 9B 4F     	CALL CHKCHAR
 755  5045 2C           	DB ','
 756  5046              	; get value
 757  5046 DD 21 1C 52  	LD IX, GETBYT
 758  504A CD 59 01     	CALL CALBAS
 759  504D F5           	PUSH AF
 760  504E              	; comma
 761  504E CD 9B 4F     	CALL CHKCHAR
 762  5051 2C           	DB ','
 763  5052              	; get vsync wait
 764  5052 DD 21 1C 52  	LD IX, GETBYT
 765  5056 CD 59 01     	CALL CALBAS
 766  5059 F5           	PUSH AF
 767  505A              	; ending )
 768  505A CD 9B 4F     	CALL CHKCHAR
 769  505D 29           	DB ')'
 770  505E
 771  505E FB               EI
 772  505F              	; save position
 773  505F E5           	PUSH HL
 774  5060 DD E1        	POP IX
 775  5062
 776  5062              	; syntax ok
 777  5062              	; wait for vsync if needed
 778  5062 F1           	POP AF
 779  5063 B7           	OR A
 780  5064 28 01        	JR Z, .L1
 781  5066 76           	HALT
 782  5067
 783  5067              .L1:
 784  5067 F1               POP AF ; value
 785  5068 C1               POP BC ; count
 786  5069 E1               POP HL ; offset
 787  506A CD 56 00         CALL BIOS_FILVRM
 788  506D
 789  506D              .L3:
 790  506D DD E5        	PUSH IX
 791  506F E1           	POP HL
 792  5070 C9           	RET
 793  5071              ; *******************************************************************************************************
 794  5071
 795  5071              ; *******************************************************************************************************
 796  5071              ; function to handle CALL FILRAM basic extension
 797  5071              ; FILRAM ( INT start address,
 798  5071              ;		   INT count,
 799  5071              ;		   BYTE value,
 800  5071              ;	   	   BYTE enable_ram, >0 = true
 801  5071              ;		   BYTE wait_vsync) >0 = true
 802  5071              ; enable_ram will put ram in page 0 also, page 1 is already there
 803  5071              ; wait_vsync will issue HALT before copying
 804  5071              FILRAM:
 805  5071              	; opening (
 806  5071 CD 9B 4F     	CALL CHKCHAR
 807  5074 28           	DB '('
 808  5075              	; get start address
 809  5075 DD 21 2F 54  	LD IX, FRMQNT
 810  5079 CD 59 01     	CALL CALBAS
 811  507C D5           	PUSH DE
 812  507D              	; comma
 813  507D CD 9B 4F     	CALL CHKCHAR
 814  5080 2C           	DB ','
 815  5081              	; get count
 816  5081 DD 21 2F 54  	LD IX, FRMQNT
 817  5085 CD 59 01     	CALL CALBAS
 818  5088 D5           	PUSH DE
 819  5089              	; comma
 820  5089 CD 9B 4F     	CALL CHKCHAR
 821  508C 2C           	DB ','
 822  508D              	; get value
 823  508D DD 21 1C 52  	LD IX, GETBYT
 824  5091 CD 59 01     	CALL CALBAS
 825  5094 F5           	PUSH AF
 826  5095              	; comma
 827  5095 CD 9B 4F     	CALL CHKCHAR
 828  5098 2C           	DB ','
 829  5099              	; get ROM/RAM
 830  5099 DD 21 1C 52  	LD IX, GETBYT
 831  509D CD 59 01     	CALL CALBAS
 832  50A0 F5           	PUSH AF
 833  50A1              	; comma
 834  50A1 CD 9B 4F     	CALL CHKCHAR
 835  50A4 2C           	DB ','
 836  50A5              	; get vsync wait
 837  50A5 DD 21 1C 52  	LD IX, GETBYT
 838  50A9 CD 59 01     	CALL CALBAS
 839  50AC F5           	PUSH AF
 840  50AD              	; ending )
 841  50AD CD 9B 4F     	CALL CHKCHAR
 842  50B0 29           	DB ')'
 843  50B1
 844  50B1 FB               EI
 845  50B2              	; save position
 846  50B2 E5           	PUSH HL
 847  50B3 DD E1        	POP IX
 848  50B5
 849  50B5              	; syntax ok
 850  50B5              	; wait for vsync if needed
 851  50B5 F1           	POP AF
 852  50B6 B7           	OR A
 853  50B7 28 01        	JR Z, .L1
 854  50B9 76           	HALT
 855  50BA
 856  50BA              .L1:
 857  50BA              	; enable RAM in page 0 if needed
 858  50BA F1           	POP AF
 859  50BB B7           	OR A
 860  50BC              	; pop LDIR parameters and store away for later
 861  50BC D1           	POP DE ; actually AF
 862  50BD C1           	POP BC ; count
 863  50BE E1           	POP HL ; start address
 864  50BF 28 1B        	JR Z, .L2
 865  50C1 D9           	EXX
 866  50C2 AF               XOR A
 867  50C3 CD B8 4D         CALL GET_PAGE_INFO
 868  50C6 C5               PUSH BC
 869  50C7 D5               PUSH DE
 870  50C8 3A 41 F3         LD A, (RAMAD0)
 871  50CB 26 00            LD H, 0
 872  50CD F3           	DI
 873  50CE CD FE 4D         CALL LOCAL_ENASLT
 874  50D1 D9           	EXX
 875  50D2 CD E3 50     	CALL .FILLVALUE
 876  50D5 D1               POP DE
 877  50D6 C1               POP BC
 878  50D7 CD EF 4D         CALL RESTORE_PAGE_INFO
 879  50DA 18 03        	JR .L3
 880  50DC
 881  50DC              .L2:
 882  50DC CD E3 50     	CALL .FILLVALUE
 883  50DF
 884  50DF              .L3:
 885  50DF DD E5        	PUSH IX
 886  50E1 E1           	POP HL
 887  50E2 C9           	RET
 888  50E3
 889  50E3              .FILLVALUE:
 890  50E3 72               LD (HL), D
 891  50E4 54               LD D, H
 892  50E5 5D               LD E, L
 893  50E6 13               INC DE
 894  50E7 0B               DEC BC
 895  50E8 ED B0            LDIR
 896  50EA C9               RET
 897  50EB              ; *******************************************************************************************************
 898  50EB
 899  50EB              ; *******************************************************************************************************
 900  50EB              ; function to handle CALL GENCAL basic extension
 901  50EB              ; GENCAL ( INT fn_addr, = address of the function to call
 902  50EB              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 903  50EB              ; output values of reristers will also be stored at reg_list_ptr
 904  50EB              GENCAL_VAR_SP:
 905  50EB 00 00            DW 0
 906  50ED              GENCAL_VAR_SP2:
 907  50ED 00 00            DW 0
 908  50EF              GENCAL:
 909  50EF              	; opening (
 910  50EF CD 9B 4F     	CALL CHKCHAR
 911  50F2 28           	DB '('
 912  50F3              	; get function address
 913  50F3 DD 21 2F 54  	LD IX, FRMQNT
 914  50F7 CD 59 01     	CALL CALBAS
 915  50FA D5           	PUSH DE
 916  50FB              	; comma
 917  50FB CD 9B 4F     	CALL CHKCHAR
 918  50FE 2C           	DB ','
 919  50FF              	; get pointer to register list
 920  50FF DD 21 2F 54  	LD IX, FRMQNT
 921  5103 CD 59 01     	CALL CALBAS
 922  5106 D5           	PUSH DE
 923  5107              	; ending )
 924  5107 CD 9B 4F     	CALL CHKCHAR
 925  510A 29           	DB ')'
 926  510B
 927  510B              	; save BASIC token position
 928  510B E5           	PUSH HL
 929  510C D9               EXX
 930  510D E1           	POP HL ; HL'=next basic token
 931  510E D9               EXX
 932  510F
 933  510F E1               POP HL ; get pointer to register values
 934  5110 ED 73 EB 50      LD (GENCAL_VAR_SP), SP
 935  5114 F3               DI
 936  5115 F9               LD SP, HL
 937  5116 F1               POP AF
 938  5117 C1               POP BC
 939  5118 D1               POP DE
 940  5119 E1               POP HL
 941  511A DD E1            POP IX
 942  511C FD E1            POP IY
 943  511E D9               EXX
 944  511F ED 73 ED 50      LD (GENCAL_VAR_SP2), SP
 945  5123 ED 7B EB 50      LD SP, (GENCAL_VAR_SP)
 946  5127 FB               EI
 947  5128 D1               POP DE ; get function to call
 948  5129 E5               PUSH HL
 949  512A CD 45 51         CALL .EXXDECALL
 950  512D F3               DI
 951  512E ED 73 EB 50      LD (GENCAL_VAR_SP), SP
 952  5132 ED 7B ED 50      LD SP, (GENCAL_VAR_SP2)
 953  5136 FD E5            PUSH IY
 954  5138 DD E5            PUSH IX
 955  513A E5               PUSH HL
 956  513B D5               PUSH DE
 957  513C C5               PUSH BC
 958  513D F5               PUSH AF
 959  513E ED 7B EB 50      LD SP, (GENCAL_VAR_SP)
 960  5142 FB               EI
 961  5143 E1               POP HL
 962  5144 C9           	RET
 963  5145
 964  5145              .EXXDECALL:
 965  5145 D5               PUSH DE
 966  5146 D9               EXX
 967  5147 C9               RET
 968  5148              ; *******************************************************************************************************
 969  5148
 970  5148              ; *******************************************************************************************************
 971  5148              ; function to handle CALL MEMVRM basic extension
 972  5148              ; copies from RAM to VRAM
 973  5148              ; _MEMVRM ( INT source,
 974  5148              ;			INT destination,
 975  5148              ;			INT count,
 976  5148              ;			BYTE enable_ram, >0 = true
 977  5148              ;			BYTE wait_vsync) >0 = treu
 978  5148              ; enable_ram will put ram in page 0 also, page 1 is already there
 979  5148              ; wait_vsync will issue HALT before copying
 980  5148              MEMVRM:
 981  5148              	; opening (
 982  5148 CD 9B 4F     	CALL CHKCHAR
 983  514B 28           	DB '('
 984  514C              	; get source address
 985  514C DD 21 2F 54  	LD IX, FRMQNT
 986  5150 CD 59 01     	CALL CALBAS
 987  5153 D5           	PUSH DE
 988  5154              	; comma
 989  5154 CD 9B 4F     	CALL CHKCHAR
 990  5157 2C           	DB ','
 991  5158              	; get destination address
 992  5158 DD 21 2F 54  	LD IX, FRMQNT
 993  515C CD 59 01     	CALL CALBAS
 994  515F D5           	PUSH DE
 995  5160              	; comma
 996  5160 CD 9B 4F     	CALL CHKCHAR
 997  5163 2C           	DB ','
 998  5164              	; get length
 999  5164 DD 21 2F 54  	LD IX, FRMQNT
1000  5168 CD 59 01     	CALL CALBAS
1001  516B D5           	PUSH DE
1002  516C              	; comma
1003  516C CD 9B 4F     	CALL CHKCHAR
1004  516F 2C           	DB ','
1005  5170              	; get ROM/RAM
1006  5170 DD 21 1C 52  	LD IX, GETBYT
1007  5174 CD 59 01     	CALL CALBAS
1008  5177 F5           	PUSH AF
1009  5178              	; comma
1010  5178 CD 9B 4F     	CALL CHKCHAR
1011  517B 2C           	DB ','
1012  517C              	; get vsync wait
1013  517C DD 21 1C 52  	LD IX, GETBYT
1014  5180 CD 59 01     	CALL CALBAS
1015  5183 F5           	PUSH AF
1016  5184              	; ending )
1017  5184 CD 9B 4F     	CALL CHKCHAR
1018  5187 29           	DB ')'
1019  5188
1020  5188                  ; save position in BASIC text
1021  5188 E5           	PUSH HL
1022  5189 DD E1        	POP IX
1023  518B
1024  518B              	; syntax ok
1025  518B              	; wait for vsync if needed
1026  518B F1           	POP AF
1027  518C B7           	OR A
1028  518D 28 03        	JR Z, .L1
1029  518F FB               EI
1030  5190 76           	HALT
1031  5191 F3               DI ; since interrupt can modify vram address
1032  5192
1033  5192              .L1:
1034  5192              	; enable RAM in page 0 if needed
1035  5192 F1           	POP AF
1036  5193 B7           	OR A
1037  5194              	; pop LDIR parameters and store away for later
1038  5194 C1           	POP BC
1039  5195 D1           	POP DE
1040  5196 E1           	POP HL
1041  5197 28 1A        	JR Z, .L2
1042  5199 D9           	EXX
1043  519A AF               XOR A
1044  519B CD B8 4D         CALL GET_PAGE_INFO
1045  519E C5               PUSH BC
1046  519F D5               PUSH DE
1047  51A0 3A 41 F3         LD A, (RAMAD0)
1048  51A3 26 00            LD H, 0
1049  51A5 CD FE 4D         CALL LOCAL_ENASLT
1050  51A8 D9           	EXX
1051  51A9 CD BA 51     	CALL .LDIRVM
1052  51AC D1               POP DE
1053  51AD C1               POP BC
1054  51AE CD EF 4D         CALL RESTORE_PAGE_INFO
1055  51B1 18 03        	JR .L3
1056  51B3
1057  51B3              .L2:
1058  51B3 CD BA 51     	CALL .LDIRVM
1059  51B6
1060  51B6              .L3:
1061  51B6 DD E5        	PUSH IX
1062  51B8 E1           	POP HL
1063  51B9 C9           	RET
1064  51BA
1065  51BA              .LDIRVM:
1066  51BA EB           	EX DE, HL
1067  51BB CD AD 4D     	CALL SETWRT_LOCAL
1068  51BE EB           	EX DE, HL
1069  51BF
1070  51BF              .L4:
1071  51BF 7E               LD A, (HL)
1072  51C0 D3 98            OUT (#98), A
1073  51C2 23               INC HL
1074  51C3 0B               DEC BC
1075  51C4 79               LD A, C
1076  51C5 B0               OR B
1077  51C6 C2 BF 51         JP NZ, .L4
1078  51C9 C9               RET
1079  51CA              ; *******************************************************************************************************
1080  51CA
1081  51CA              ; *******************************************************************************************************
1082  51CA              ; function to handle CALL VRMMEM basic extension
1083  51CA              ; copies from RAM to VRAM
1084  51CA              ; _VRMMEM ( INT source,
1085  51CA              ;			INT destination,
1086  51CA              ;			INT count,
1087  51CA              ;			BYTE enable_ram, >0 = true
1088  51CA              ;			BYTE wait_vsync) >0 = true
1089  51CA              ; enable_ram will put ram in page 0 also, page 1 is already there
1090  51CA              ; wait_vsync will issue HALT before copying
1091  51CA              VRMMEM:
1092  51CA              	; opening (
1093  51CA CD 9B 4F     	CALL CHKCHAR
1094  51CD 28           	DB '('
1095  51CE              	; get source address
1096  51CE DD 21 2F 54  	LD IX, FRMQNT
1097  51D2 CD 59 01     	CALL CALBAS
1098  51D5 D5           	PUSH DE
1099  51D6              	; comma
1100  51D6 CD 9B 4F     	CALL CHKCHAR
1101  51D9 2C           	DB ','
1102  51DA              	; get destination address
1103  51DA DD 21 2F 54  	LD IX, FRMQNT
1104  51DE CD 59 01     	CALL CALBAS
1105  51E1 D5           	PUSH DE
1106  51E2              	; comma
1107  51E2 CD 9B 4F     	CALL CHKCHAR
1108  51E5 2C           	DB ','
1109  51E6              	; get length
1110  51E6 DD 21 2F 54  	LD IX, FRMQNT
1111  51EA CD 59 01     	CALL CALBAS
1112  51ED D5           	PUSH DE
1113  51EE              	; comma
1114  51EE CD 9B 4F     	CALL CHKCHAR
1115  51F1 2C           	DB ','
1116  51F2              	; get ROM/RAM
1117  51F2 DD 21 1C 52  	LD IX, GETBYT
1118  51F6 CD 59 01     	CALL CALBAS
1119  51F9 F5           	PUSH AF
1120  51FA              	; comma
1121  51FA CD 9B 4F     	CALL CHKCHAR
1122  51FD 2C           	DB ','
1123  51FE              	; get vsync wait
1124  51FE DD 21 1C 52  	LD IX, GETBYT
1125  5202 CD 59 01     	CALL CALBAS
1126  5205 F5           	PUSH AF
1127  5206              	; ending )
1128  5206 CD 9B 4F     	CALL CHKCHAR
1129  5209 29           	DB ')'
1130  520A
1131  520A                  ; save position in BASIC text
1132  520A E5           	PUSH HL
1133  520B DD E1        	POP IX
1134  520D
1135  520D              	; syntax ok
1136  520D              	; wait for vsync if needed
1137  520D F1           	POP AF
1138  520E B7           	OR A
1139  520F 28 03        	JR Z, .L1
1140  5211 FB               EI
1141  5212 76           	HALT
1142  5213 F3               DI ; since interrupt can modify vram address
1143  5214
1144  5214              .L1:
1145  5214              	; enable RAM in page 0 if needed
1146  5214 F1           	POP AF
1147  5215 B7           	OR A
1148  5216              	; pop LDIR parameters and store away for later
1149  5216 C1           	POP BC
1150  5217 D1           	POP DE
1151  5218 E1           	POP HL
1152  5219 28 1A        	JR Z, .L2
1153  521B D9           	EXX
1154  521C AF               XOR A
1155  521D CD B8 4D         CALL GET_PAGE_INFO
1156  5220 C5               PUSH BC
1157  5221 D5               PUSH DE
1158  5222 3A 41 F3         LD A, (RAMAD0)
1159  5225 26 00            LD H, 0
1160  5227 CD FE 4D         CALL LOCAL_ENASLT
1161  522A D9           	EXX
1162  522B CD 3C 52     	CALL .LDIRMV
1163  522E D1               POP DE
1164  522F C1               POP BC
1165  5230 CD EF 4D         CALL RESTORE_PAGE_INFO
1166  5233 18 03        	JR .L3
1167  5235
1168  5235              .L2:
1169  5235 CD 3C 52     	CALL .LDIRMV
1170  5238
1171  5238              .L3:
1172  5238 DD E5        	PUSH IX
1173  523A E1           	POP HL
1174  523B C9           	RET
1175  523C
1176  523C              .LDIRMV:
1177  523C CD AD 4D     	CALL SETWRT_LOCAL
1178  523F              .L4:
1179  523F DB 98            IN A, (#98)
1180  5241 12           	LD (DE), A
1181  5242 13               INC DE
1182  5243 0B               DEC BC
1183  5244 79               LD A, C
1184  5245 B0               OR B
1185  5246 C2 3F 52         JP NZ, .L4
1186  5249 C9               RET
1187  524A              ; *******************************************************************************************************
1188  524A
1189  524A              ; *******************************************************************************************************
1190  524A              ; H.TIMI function
1191  524A              MBGE_HTIMI:
1192  524A               EXPORT MBGE_HTIMI
1193  524A F5           	PUSH AF
1194  524B
1195  524B CD 77 4E     	CALL SPRATR_UPDATE
1196  524E
1197  524E 3A F5 4C     	LD A, (SOUND_ENABLED)
1198  5251 B7           	OR A
1199  5252 28 2A        	JR Z, .EXIT
1200  5254
1201  5254              	; enable page 2
1202  5254 3E 02            LD A, 2
1203  5256 CD B8 4D         CALL GET_PAGE_INFO
1204  5259 C5               PUSH BC
1205  525A D5               PUSH DE
1206  525B 3A 43 F3         LD A, (RAMAD2)
1207  525E 26 80            LD H, 080H
1208  5260 CD FE 4D         CALL LOCAL_ENASLT
1209  5263              	; enable page 0
1210  5263 AF               XOR A
1211  5264 CD B8 4D         CALL GET_PAGE_INFO
1212  5267 C5               PUSH BC
1213  5268 D5               PUSH DE
1214  5269 3A 41 F3         LD A, (RAMAD0)
1215  526C 26 00            LD H, 0
1216  526E CD FE 4D         CALL LOCAL_ENASLT
1217  5271
1218  5271 CD 31 42     	CALL PLY_AKG_PLAY
1219  5274
1220  5274              	; restore page 0
1221  5274 D1               POP DE
1222  5275 C1               POP BC
1223  5276 CD EF 4D         CALL RESTORE_PAGE_INFO
1224  5279              	; restore page 2
1225  5279 D1               POP DE
1226  527A C1               POP BC
1227  527B CD EF 4D         CALL RESTORE_PAGE_INFO
1228  527E
1229  527E              .EXIT:
1230  527E F1           	POP AF
1231  527F C3 EE 4C     	JP ORIG.HTIMI
1232  5282              ; *******************************************************************************************************
1233  5282
1234  5282              ; *******************************************************************************************************
1235  5282              ; function to handle CALL SNDPLYINIT basic extension
1236  5282              ; initializes sound player
1237  5282              ; _SNDPLYINIT ( INT music_offset,
1238  5282              ;				INT sfx_offset, can be -1 if no SFX
1239  5282              ; will put ram in page 0 also, page 1 is already there
1240  5282              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1241  5282              SNDPLYINIT:
1242  5282              	; opening (
1243  5282 CD 9B 4F     	CALL CHKCHAR
1244  5285 28           	DB '('
1245  5286              	; get music address
1246  5286 DD 21 2F 54  	LD IX, FRMQNT
1247  528A CD 59 01     	CALL CALBAS
1248  528D D5           	PUSH DE
1249  528E              	; comma
1250  528E CD 9B 4F     	CALL CHKCHAR
1251  5291 2C           	DB ','
1252  5292              	; get sfx address
1253  5292 DD 21 2F 54  	LD IX, FRMQNT
1254  5296 CD 59 01     	CALL CALBAS
1255  5299 D5           	PUSH DE
1256  529A              	; ending )
1257  529A CD 9B 4F     	CALL CHKCHAR
1258  529D 29           	DB ')'
1259  529E
1260  529E                  ; save position in BASIC text
1261  529E 44           	LD B, H
1262  529F 4D           	LD C, L
1263  52A0
1264  52A0              	; pop LDIR parameters and store away for later
1265  52A0 D1           	POP DE ; sfx address
1266  52A1 E1           	POP HL ; music address
1267  52A2 C5           	PUSH BC ; basic text location
1268  52A3 D9           	EXX
1269  52A4 AF               XOR A
1270  52A5 CD B8 4D         CALL GET_PAGE_INFO
1271  52A8 C5               PUSH BC
1272  52A9 D5               PUSH DE
1273  52AA 3A 41 F3         LD A, (RAMAD0)
1274  52AD 26 00            LD H, 0
1275  52AF CD FE 4D         CALL LOCAL_ENASLT
1276  52B2 D9           	EXX
1277  52B3
1278  52B3 D5           	PUSH DE
1279  52B4 AF           	XOR A
1280  52B5              	; HL = music location
1281  52B5 CD 60 41     	CALL PLY_AKG_INIT
1282  52B8 3E 01        	LD A, 1
1283  52BA 32 F3 4C     	LD (MUSIC_INIT_STATUS), A
1284  52BD
1285  52BD E1           	POP HL
1286  52BE 23           	INC HL
1287  52BF 7D           	LD A, L
1288  52C0 B4           	OR H
1289  52C1 28 09        	JR Z,.L1
1290  52C3 2B           	DEC HL
1291  52C4 CD 1B 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1292  52C7 3E 01        	LD A, 1
1293  52C9 32 F4 4C     	LD (SFX_INIT_STATUS), A
1294  52CC              .L1:
1295  52CC D1               POP DE
1296  52CD C1               POP BC
1297  52CE CD EF 4D         CALL RESTORE_PAGE_INFO
1298  52D1
1299  52D1 E1           	POP HL
1300  52D2 C9           	RET
1301  52D3              ; *******************************************************************************************************
1302  52D3
1303  52D3              ; *******************************************************************************************************
1304  52D3              ; function to handle CALL SNDPLYON basic extension
1305  52D3              ; enables sound player
1306  52D3              ; _SNDPLYON
1307  52D3              ; sets SOUND_ENABLED variable to 1 if init call was done
1308  52D3              ; if not throws out of data error
1309  52D3              SNDPLYON:
1310  52D3 3A F3 4C     	LD A, (MUSIC_INIT_STATUS)
1311  52D6 B7           	OR A
1312  52D7 20 05        	JR NZ, .L1
1313  52D9              	; player not initialized, throw error
1314  52D9 1E 04        	LD E, 04 ; Out of DATA
1315  52DB C3 B3 4F     	JP THROW_ERROR
1316  52DE              .L1:
1317  52DE 32 F5 4C     	LD (SOUND_ENABLED), A
1318  52E1              	; disable key click
1319  52E1 AF           	XOR A
1320  52E2 32 DB F3     	LD (CLIKSW), A
1321  52E5 C9           	RET
1322  52E6              ; *******************************************************************************************************
1323  52E6
1324  52E6              ; *******************************************************************************************************
1325  52E6              ; function to handle CALL SNDPLYOFF basic extension
1326  52E6              ; disables sound player
1327  52E6              ; _SNDPLYOFF
1328  52E6              ; sets SOUND_ENABLED variable to 0
1329  52E6              ; calls AKG to stop music and SFX on all channels if initialized
1330  52E6              SNDPLYOFF:
1331  52E6 3A F5 4C     	LD A, (SOUND_ENABLED)
1332  52E9 B7           	OR A
1333  52EA C8           	RET Z ; already stopped
1334  52EB AF           	XOR A
1335  52EC 32 F5 4C     	LD (SOUND_ENABLED), A
1336  52EF E5           	PUSH HL
1337  52F0 CD 1F 42     	CALL PLY_AKG_STOP
1338  52F3 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1339  52F6 B7           	OR A
1340  52F7 28 0E        	JR Z, .EXIT ; SFX not in use
1341  52F9 AF           	XOR A
1342  52FA CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1343  52FD 3E 01        	LD A, 1
1344  52FF CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1345  5302 3E 02        	LD A, 2
1346  5304 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1347  5307              .EXIT:
1348  5307 E1           	POP HL
1349  5308 C9           	RET
1350  5309              ; *******************************************************************************************************
1351  5309
1352  5309              ; *******************************************************************************************************
1353  5309              ; function to handle CALL SNDSFX basic extension
1354  5309              ; plays a sound effect
1355  5309              ; _SNDSFX ( BYTE sfx_number, >0
1356  5309              ;			BYTE channel, = 0,1 or 2
1357  5309              ;			BYTE inverted_volume = 0-16, 0 being full volume
1358  5309              ; will put ram in page 0 also, page 1 is already there
1359  5309              ; if sound off throws illegal function call
1360  5309              ; if sfx not initialized, throws out of data
1361  5309              SNDSFX:
1362  5309              	; opening (
1363  5309 CD 9B 4F     	CALL CHKCHAR
1364  530C 28           	DB '('
1365  530D              	; get sfx_number
1366  530D DD 21 1C 52  	LD IX, GETBYT
1367  5311 CD 59 01     	CALL CALBAS
1368  5314 D5           	PUSH DE
1369  5315              	; comma
1370  5315 CD 9B 4F     	CALL CHKCHAR
1371  5318 2C           	DB ','
1372  5319              	; get sfx address
1373  5319 DD 21 1C 52  	LD IX, GETBYT
1374  531D CD 59 01     	CALL CALBAS
1375  5320 D5           	PUSH DE
1376  5321              	; comma
1377  5321 CD 9B 4F     	CALL CHKCHAR
1378  5324 2C           	DB ','
1379  5325              	; get inverted volume
1380  5325 DD 21 1C 52  	LD IX, GETBYT
1381  5329 CD 59 01     	CALL CALBAS
1382  532C D5           	PUSH DE
1383  532D              	; ending )
1384  532D CD 9B 4F     	CALL CHKCHAR
1385  5330 29           	DB ')'
1386  5331
1387  5331 3A F5 4C     	LD A, (SOUND_ENABLED)
1388  5334 B7           	OR A
1389  5335 20 05        	JR NZ, .L1
1390  5337              	; sound disabled, throw illegal function call
1391  5337 1E 05        	LD E, 5
1392  5339 C3 B3 4F     	JP THROW_ERROR
1393  533C              .L1:
1394  533C 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1395  533F B7           	OR A
1396  5340 20 05        	JR NZ, .L2
1397  5342              	; sfx data not initialized, throw out of data
1398  5342 1E 04        	LD E, 4
1399  5344 C3 B3 4F     	JP THROW_ERROR
1400  5347              .L2:
1401  5347              	; pop  parameters and store away for later
1402  5347 D1           	POP DE ; inverted volume
1403  5348 43           	LD B, E
1404  5349 D1           	POP DE ; channel
1405  534A 4B           	LD C, E
1406  534B D1           	POP DE
1407  534C 7B           	LD A, E
1408  534D 08           	EX AF, AF'
1409  534E E5           	PUSH HL ; basic text location
1410  534F D9           	EXX
1411  5350 AF               XOR A
1412  5351 CD B8 4D         CALL GET_PAGE_INFO
1413  5354 C5               PUSH BC
1414  5355 D5               PUSH DE
1415  5356 3A 41 F3         LD A, (RAMAD0)
1416  5359 26 00            LD H, 0
1417  535B CD FE 4D         CALL LOCAL_ENASLT
1418  535E D9           	EXX
1419  535F 08           	EX AF, AF'
1420  5360 CD 1F 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1421  5363
1422  5363 D1               POP DE
1423  5364 C1               POP BC
1424  5365 CD EF 4D         CALL RESTORE_PAGE_INFO
1425  5368
1426  5368 E1           	POP HL
1427  5369 C9           	RET
1428  536A              ; *******************************************************************************************************
1429  536A
1430  536A              EXT_END:
1431  536A
# file closed: asm\main.asm
