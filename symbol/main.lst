# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; INCLUDE "system_variables.inc"
   4  4000              ; INCLUDE "system_hooks.inc"
   5  4000              ; INCLUDE "bios_calls.inc"
   6  4000
   7  4000              CHPUT   EQU     #A2
   8  4000              CALBAS	EQU		#159
   9  4000              ERRHAND EQU     #406F
  10  4000              FRMEVL  EQU     #4C64
  11  4000              FRESTR	EQU		#67D0
  12  4000              ; FRMQNT = formula quantificator
  13  4000              ; input HL=pointer to current program expression
  14  4000              ; output HL=next address
  15  4000              ; output DE=integer datum
  16  4000              FRMQNT	EQU		#542F
  17  4000              ; GETBYT = get byte parameter
  18  4000              ; input HL=pointer to current program expression
  19  4000              ; output HL=next address
  20  4000              ; output A=E=byte read
  21  4000              GETBYT	EQU		#521C
  22  4000              CHRGTR  EQU     #4666
  23  4000              SYNCHR	EQU		#558C
  24  4000              VALTYP  EQU     #F663
  25  4000              USR     EQU     #F7F8
  26  4000              PROCNM	EQU		#FD89
  27  4000              BIOS_FILVRM  EQU     #56
  28  4000              CLIKSW	EQU		#F3DB
  29  4000              ATRBAS	EQU		#F928
  30  4000
  31  4000              RAMAD0	EQU	0F341h	; Main-RAM Slot (00000h~03FFFh)
  32  4000              RAMAD1	EQU	0F342h	; Main-RAM Slot (04000h~07FFFh)
  33  4000              RAMAD2	EQU	0F343h	; Main-RAM Slot (08000h~0BFFFh)
  34  4000              RAMAD3	EQU	0F344h	; Main-RAM Slot (0C000h~0FFFFh)
  35  4000              EXPTBL	EQU #FCC1
  36  4000              SCRMOD	EQU #FCAF ; current screen mode
  37  4000
  38  4000              ; BASIC error codes
  39  4000              ;01 NEXT without FOR
  40  4000              ;02 Syntax error
  41  4000              ;03 RETURN without GOSUB
  42  4000              ;04 Out of DATA
  43  4000              ;05 Illegal function call
  44  4000              ;06 Overflow
  45  4000              ;07 Out of memory
  46  4000              ;08 Undefined line number
  47  4000              ;09 Subscript out of range
  48  4000              ;10 Redimensioned array
  49  4000              ;11 Division by zero
  50  4000              ;12 Illegal direct
  51  4000              ;13 Type mismatch
  52  4000              ;14 Out of string space
  53  4000              ;15 String too long
  54  4000              ;16 String formula too complex
  55  4000              ;17 Can't CONTINUE
  56  4000              ;18 Undefined user function
  57  4000              ;19 Device I/O error
  58  4000              ;20 Verify error
  59  4000              ;21 No RESUME
  60  4000              ;22 RESUME without error
  61  4000              ;23 Unprintable error
  62  4000              ;24 Missing operand
  63  4000              ;25 Line buffer overflow
  64  4000              ;50 FIELD overflow
  65  4000              ;51 Internal error
  66  4000              ;52 Bad file number
  67  4000              ;53 File not found
  68  4000              ;54 File already open
  69  4000              ;55 Input past end
  70  4000              ;56 Bad file name
  71  4000              ;57 Direct statement in file
  72  4000              ;58 Sequential I/O only
  73  4000              ;59 File not OPEN
  74  4000
  75  4000
  76  4000               ; simulate cartridge with BASIC extension
  77  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  77  4004 75 4F 00 00
  77  4008 00 00 00 00
  77  400C 00 00 00 00
  78  4010
  79  4010              ; this location #400A stores last location used by basic extension
  80  4010              ; free memory after that point
  81  4010 69 57         DW EXT_END
  82  4012
  83  4012              ; binary included AKG player compiled at #4012
  84  4012               INCBIN "bin/AKG.bin"
  85  4CEE               INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CEE              MAIN_PLAYER_START EQU 04012H
   2+ 4CEE              PLY_AKG_START EQU 04012H
   3+ 4CEE              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401BH
   4+ 4CEE              PLY_AKG_INITSOUNDEFFECTS EQU 0401BH
   5+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 0401FH
   6+ 4CEE              PLY_AKG_PLAYSOUNDEFFECT EQU 0401FH
   7+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04020H
   8+ 4CEE              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04020H
   9+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04047H
  10+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04047H
  11+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04055H
  12+ 4CEE              PLY_AKG_PSES_PLAY EQU 0408EH
  13+ 4CEE              PLY_AKG_PSES_READFIRSTBYTE EQU 04097H
  14+ 4CEE              PLY_AKG_PSES_S_ENDORLOOP EQU 040AFH
  15+ 4CEE              PLY_AKG_PSES_S_LOOP EQU 040BAH
  16+ 4CEE              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C0H
  17+ 4CEE              PLY_AKG_PSES_NOTREACHED EQU 040D3H
  18+ 4CEE              PLY_AKG_PSES_HARDWAREONLY EQU 040D7H
  19+ 4CEE              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040DEH
  20+ 4CEE              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F0H
  21+ 4CEE              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FAH
  22+ 4CEE              PLY_AKG_PSES_H_AFTERRETRIG EQU 04104H
  23+ 4CEE              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 04118H
  24+ 4CEE              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411DH
  25+ 4CEE              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04125H
  26+ 4CEE              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04130H
  27+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413CH
  28+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 0413EH
  29+ 4CEE              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04144H
  30+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 04148H
  31+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 04148H
  32+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414AH
  33+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414AH
  34+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414AH
  35+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414BH
  36+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414CH
  37+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04150H
  38+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04150H
  39+ 4CEE              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04150H
  40+ 4CEE              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 04158H
  41+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04160H
  42+ 4CEE              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04160H
  43+ 4CEE              PLY_AKG_INIT EQU 04160H
  44+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04160H
  45+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 0418EH
  46+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A2H
  47+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B4H
  48+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D3H
  49+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E0H
  50+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL EQU 041E6H
  51+ 4CEE              PLY_AKG_INITTABLE0 EQU 041E9H
  52+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041E9H
  53+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04203H
  54+ 4CEE              PLY_AKG_INITTABLE0_END EQU 04203H
  55+ 4CEE              PLY_AKG_INITTABLE1 EQU 04203H
  56+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04203H
  57+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04207H
  58+ 4CEE              PLY_AKG_INITTABLE1_END EQU 04207H
  59+ 4CEE              PLY_AKG_INITTABLEORA EQU 04207H
  60+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04207H
  61+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 0421FH
  62+ 4CEE              PLY_AKG_INITTABLEORA_END EQU 0421FH
  63+ 4CEE              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 0421FH
  64+ 4CEE              PLY_AKG_STOP EQU 0421FH
  65+ 4CEE              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04231H
  66+ 4CEE              PLY_AKG_PLAY EQU 04231H
  67+ 4CEE              PLY_AKG_TICKDECREASINGCOUNTER EQU 04239H
  68+ 4CEE              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 0423FH
  69+ 4CEE              PLY_AKG_READLINKER EQU 04244H
  70+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04244H
  71+ 4CEE              PLY_AKG_READLINKER_PTLINKER EQU 04244H
  72+ 4CEE              PLY_AKG_READLINKER_NOLOOP EQU 0424FH
  73+ 4CEE              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 04288H
  74+ 4CEE              PLY_AKG_READLINE EQU 0428BH
  75+ 4CEE              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428BH
  76+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04291H
  77+ 4CEE              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04291H
  78+ 4CEE              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 0429EH
  79+ 4CEE              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A2H
  80+ 4CEE              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A5H
  81+ 4CEE              PLY_AKG_SPEEDTRACK_END EQU 042A8H
  82+ 4CEE              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042A8H
  83+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042AEH
  84+ 4CEE              PLY_AKG_EVENTTRACK_PTTRACK EQU 042AEH
  85+ 4CEE              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BBH
  86+ 4CEE              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042BFH
  87+ 4CEE              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C2H
  88+ 4CEE              PLY_AKG_EVENTTRACK_END EQU 042C5H
  89+ 4CEE              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C5H
  90+ 4CEE              PLY_AKG_CHANNEL1_READTRACK EQU 042D1H
  91+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D1H
  92+ 4CEE              PLY_AKG_CHANNEL1_PTTRACK EQU 042D1H
  93+ 4CEE              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042ECH
  94+ 4CEE              PLY_AKG_CHANNEL1_WAIT EQU 042F7H
  95+ 4CEE              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 042FEH
  96+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 042FEH
  97+ 4CEE              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 042FEH
  98+ 4CEE              PLY_AKG_CHANNEL1_NOTE EQU 04307H
  99+ 4CEE              PLY_AKG_BASENOTEINDEX EQU 04307H
 100+ 4CEE              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 04309H
 101+ 4CEE              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 04309H
 102+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 04319H
 103+ 4CEE              PLY_AKG_INSTRUMENTSTABLE EQU 04319H
 104+ 4CEE              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432BH
 105+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433BH
 106+ 4CEE              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04363H
 107+ 4CEE              PLY_AKG_CHANNEL1_READCELLEND EQU 04366H
 108+ 4CEE              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04366H
 109+ 4CEE              PLY_AKG_CHANNEL2_READTRACK EQU 04372H
 110+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04372H
 111+ 4CEE              PLY_AKG_CHANNEL2_PTTRACK EQU 04372H
 112+ 4CEE              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438DH
 113+ 4CEE              PLY_AKG_CHANNEL2_WAIT EQU 04398H
 114+ 4CEE              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 0439FH
 115+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 0439FH
 116+ 4CEE              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 0439FH
 117+ 4CEE              PLY_AKG_CHANNEL2_NOTE EQU 043A8H
 118+ 4CEE              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043ADH
 119+ 4CEE              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043ADH
 120+ 4CEE              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043CFH
 121+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043DFH
 122+ 4CEE              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04407H
 123+ 4CEE              PLY_AKG_CHANNEL2_READCELLEND EQU 0440AH
 124+ 4CEE              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440AH
 125+ 4CEE              PLY_AKG_CHANNEL3_READTRACK EQU 04416H
 126+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04416H
 127+ 4CEE              PLY_AKG_CHANNEL3_PTTRACK EQU 04416H
 128+ 4CEE              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04431H
 129+ 4CEE              PLY_AKG_CHANNEL3_WAIT EQU 0443CH
 130+ 4CEE              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04443H
 131+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04443H
 132+ 4CEE              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04443H
 133+ 4CEE              PLY_AKG_CHANNEL3_NOTE EQU 0444CH
 134+ 4CEE              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04451H
 135+ 4CEE              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04451H
 136+ 4CEE              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04473H
 137+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04483H
 138+ 4CEE              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ABH
 139+ 4CEE              PLY_AKG_CHANNEL3_READCELLEND EQU 044AEH
 140+ 4CEE              PLY_AKG_CURRENTSPEED EQU 044AEH
 141+ 4CEE              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B0H
 142+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B3H
 143+ 4CEE              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B3H
 144+ 4CEE              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B6H
 145+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044B9H
 146+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044B9H
 147+ 4CEE              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C5H
 148+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CCH
 149+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044CFH
 150+ 4CEE              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D5H
 151+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044D8H
 152+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044D8H
 153+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E6H
 154+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EBH
 155+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F6H
 156+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044F9H
 157+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044F9H
 158+ 4CEE              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FCH
 159+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 044FFH
 160+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE EQU 044FFH
 161+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 04508H
 162+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04512H
 163+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04515H
 164+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04515H
 165+ 4CEE              PLY_AKG_CHANNEL1_PITCH EQU 04515H
 166+ 4CEE              PLY_AKG_CHANNEL1_ISPITCH EQU 04518H
 167+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451DH
 168+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451DH
 169+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04521H
 170+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04523H
 171+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04525H
 172+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452CH
 173+ 4CEE              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452DH
 174+ 4CEE              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04530H
 175+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04530H
 176+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454CH
 177+ 4CEE              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454CH
 178+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 04559H
 179+ 4CEE              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455DH
 180+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456DH
 181+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456DH
 182+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 0456EH
 183+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 0456FH
 184+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04571H
 185+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04571H
 186+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04571H
 187+ 4CEE              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04572H
 188+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04573H
 189+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04575H
 190+ 4CEE              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04575H
 191+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04575H
 192+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04575H
 193+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04575H
 194+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_END EQU 04578H
 195+ 4CEE              PLY_AKG_CHANNEL1_PITCH_END EQU 0457AH
 196+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04582H
 197+ 4CEE              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04582H
 198+ 4CEE              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04585H
 199+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 04588H
 200+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 04588H
 201+ 4CEE              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04594H
 202+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459BH
 203+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 0459EH
 204+ 4CEE              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A4H
 205+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A7H
 206+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A7H
 207+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B5H
 208+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BAH
 209+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C5H
 210+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045C8H
 211+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045C8H
 212+ 4CEE              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CBH
 213+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045CEH
 214+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045CEH
 215+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D7H
 216+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E1H
 217+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E4H
 218+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E4H
 219+ 4CEE              PLY_AKG_CHANNEL2_PITCH EQU 045E4H
 220+ 4CEE              PLY_AKG_CHANNEL2_ISPITCH EQU 045E7H
 221+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045ECH
 222+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045ECH
 223+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F0H
 224+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F2H
 225+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F4H
 226+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FBH
 227+ 4CEE              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FCH
 228+ 4CEE              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 045FFH
 229+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 045FFH
 230+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461BH
 231+ 4CEE              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461BH
 232+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 04628H
 233+ 4CEE              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462CH
 234+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463CH
 235+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463CH
 236+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463DH
 237+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 0463EH
 238+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04640H
 239+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04640H
 240+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04640H
 241+ 4CEE              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04641H
 242+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04642H
 243+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04644H
 244+ 4CEE              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04644H
 245+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04644H
 246+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04644H
 247+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04644H
 248+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_END EQU 04647H
 249+ 4CEE              PLY_AKG_CHANNEL2_PITCH_END EQU 04649H
 250+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04651H
 251+ 4CEE              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04651H
 252+ 4CEE              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04654H
 253+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04657H
 254+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04657H
 255+ 4CEE              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04663H
 256+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466AH
 257+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466DH
 258+ 4CEE              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04673H
 259+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04676H
 260+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04676H
 261+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04684H
 262+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 04689H
 263+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04694H
 264+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04697H
 265+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04697H
 266+ 4CEE              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469AH
 267+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469DH
 268+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469DH
 269+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A6H
 270+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B0H
 271+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B3H
 272+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B3H
 273+ 4CEE              PLY_AKG_CHANNEL3_PITCH EQU 046B3H
 274+ 4CEE              PLY_AKG_CHANNEL3_ISPITCH EQU 046B6H
 275+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BBH
 276+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BBH
 277+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046BFH
 278+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C1H
 279+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C3H
 280+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CAH
 281+ 4CEE              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CBH
 282+ 4CEE              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046CEH
 283+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046CEH
 284+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046EAH
 285+ 4CEE              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046EAH
 286+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F7H
 287+ 4CEE              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FBH
 288+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470BH
 289+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470BH
 290+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470CH
 291+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470DH
 292+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 0470FH
 293+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 0470FH
 294+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 0470FH
 295+ 4CEE              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04710H
 296+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04711H
 297+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04713H
 298+ 4CEE              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04713H
 299+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04713H
 300+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04713H
 301+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04713H
 302+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_END EQU 04716H
 303+ 4CEE              PLY_AKG_CHANNEL3_PITCH_END EQU 04718H
 304+ 4CEE              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04724H
 305+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04724H
 306+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04724H
 307+ 4CEE              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04727H
 308+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 04729H
 309+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 0472FH
 310+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04732H
 311+ 4CEE              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04732H
 312+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04735H
 313+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 0473EH
 314+ 4CEE              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04746H
 315+ 4CEE              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04753H
 316+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04753H
 317+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04753H
 318+ 4CEE              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04756H
 319+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 04758H
 320+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 0475EH
 321+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04761H
 322+ 4CEE              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04761H
 323+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04764H
 324+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476DH
 325+ 4CEE              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04775H
 326+ 4CEE              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04783H
 327+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04783H
 328+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04783H
 329+ 4CEE              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04786H
 330+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 04788H
 331+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 0478EH
 332+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04791H
 333+ 4CEE              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04791H
 334+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04794H
 335+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479DH
 336+ 4CEE              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A5H
 337+ 4CEE              PLY_AKG_SENDPSGREGISTERS EQU 047B4H
 338+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BCH
 339+ 4CEE              PLY_AKG_PSGREG01_INSTR EQU 047BCH
 340+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CCH
 341+ 4CEE              PLY_AKG_PSGREG23_INSTR EQU 047CCH
 342+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DDH
 343+ 4CEE              PLY_AKG_PSGREG45_INSTR EQU 047DDH
 344+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047EEH
 345+ 4CEE              PLY_AKG_PSGREG6_8_INSTR EQU 047EEH
 346+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 047FFH
 347+ 4CEE              PLY_AKG_PSGREG9_10_INSTR EQU 047FFH
 348+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04810H
 349+ 4CEE              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04810H
 350+ 4CEE              PLY_AKG_PSGREG13_OLDVALUE EQU 04825H
 351+ 4CEE              PLY_AKG_RETRIG EQU 04827H
 352+ 4CEE              PLY_AKG_PSGREG13_INSTR EQU 04829H
 353+ 4CEE              PLY_AKG_PSGREG13_END EQU 04838H
 354+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 04838H
 355+ 4CEE              PLY_AKG_SAVESP EQU 04838H
 356+ 4CEE              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483CH
 357+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTS EQU 04844H
 358+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04851H
 359+ 4CEE              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04851H
 360+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTS EQU 04859H
 361+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04866H
 362+ 4CEE              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04866H
 363+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTS EQU 0486EH
 364+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 04879H
 365+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS EQU 04879H
 366+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 04888H
 367+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 04888H
 368+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 0488FH
 369+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 0489FH
 370+ 4CEE              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 0489FH
 371+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A6H
 372+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A6H
 373+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048A9H
 374+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B2H
 375+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B2H
 376+ 4CEE              PLY_AKG_READINSTRUMENTCELL EQU 048B8H
 377+ 4CEE              PLY_AKG_NOSOFTNOHARD EQU 048C5H
 378+ 4CEE              PLY_AKG_NSNH_NONOISE EQU 048DAH
 379+ 4CEE              PLY_AKG_SOFT EQU 048DDH
 380+ 4CEE              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E4H
 381+ 4CEE              PLY_AKG_S_NOTSIMPLE EQU 048ECH
 382+ 4CEE              PLY_AKG_S_AFTERSIMPLETEST EQU 048EFH
 383+ 4CEE              PLY_AKG_HARDTOSOFT EQU 048FCH
 384+ 4CEE              PLY_AKG_HS_JUMPRATIO EQU 04907H
 385+ 4CEE              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04934H
 386+ 4CEE              PLY_AKG_ENDWITHOUTLOOP EQU 04936H
 387+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04936H
 388+ 4CEE              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04936H
 389+ 4CEE              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 0493EH
 390+ 4CEE              PLY_AKG_SH_JUMPRATIO EQU 0494BH
 391+ 4CEE              PLY_AKG_SH_JUMPRATIOEND EQU 0496CH
 392+ 4CEE              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497BH
 393+ 4CEE              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04981H
 394+ 4CEE              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499BH
 395+ 4CEE              PLY_AKG_H_RETRIGEND EQU 049ADH
 396+ 4CEE              PLY_AKG_H_AFTERRETRIG EQU 049AEH
 397+ 4CEE              PLY_AKG_ENDWITHLOOP EQU 049C0H
 398+ 4CEE              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C7H
 399+ 4CEE              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DDH
 400+ 4CEE              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EBH
 401+ 4CEE              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FBH
 402+ 4CEE              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A09H
 403+ 4CEE              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A18H
 404+ 4CEE              PLY_AKG_SHOHS_RETRIGEND EQU 04A27H
 405+ 4CEE              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A28H
 406+ 4CEE              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3AH
 407+ 4CEE              PLY_AKG_EFFECTTABLE EQU 04A48H
 408+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A48H
 409+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6CH
 410+ 4CEE              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6CH
 411+ 4CEE              PLY_AKG_EFFECT_RESET EQU 04A6FH
 412+ 4CEE              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A71H
 413+ 4CEE              PLY_AKG_EFFECT_VOLUME EQU 04A8CH
 414+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A98H
 415+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04A9EH
 416+ 4CEE              PLY_AKG_ARPEGGIOSTABLE EQU 04A9EH
 417+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC5H
 418+ 4CEE              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACCH
 419+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD2H
 420+ 4CEE              PLY_AKG_PITCHESTABLE EQU 04AD2H
 421+ 4CEE              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AF9H
 422+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B00H
 423+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B11H
 424+ 4CEE              PLY_AKG_EFFECT_PITCHDOWN EQU 04B18H
 425+ 4CEE              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B28H
 426+ 4CEE              PLY_AKG_EFFECT_PITCHUP EQU 04B3DH
 427+ 4CEE              PLY_AKG_EFFECT_PITCHSTOP EQU 04B4FH
 428+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B56H
 429+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B80H
 430+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B80H
 431+ 4CEE              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B99H
 432+ 4CEE              PLY_AKG_EFFECT_GLIDESPEED EQU 04B99H
 433+ 4CEE              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BABH
 434+ 4CEE              PLY_AKG_EFFECT_LEGATO EQU 04BC1H
 435+ 4CEE              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD5H
 436+ 4CEE              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDDH
 437+ 4CEE              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE5H
 438+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEDH
 439+ 4CEE              PLY_AKG_EVENT EQU 04BEDH
 440+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BEEH
 441+ 4CEE              PLY_AKG_PERIODTABLE EQU 04BEEH
 442+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BEEH
 443+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CEEH
 444+ 4CEE              PLY_AKG_PERIODTABLE_END EQU 04CEEH
 445+ 4CEE              PLY_AKG_END EQU 04CEEH
 446+ 4CEE              MAIN_PLAYER_END EQU 04CEEH
 447+ 4CEE              TESTEREND EQU 04CEEH
 448+ 4CEE
# file closed: ./symbol/AKG.sym
  86  4CEE
  87  4CEE              ORIG.HTIMI:
  88  4CEE 00 00 00 00  	DB 0, 0, 0, 0, 0
  88  4CF2 00
  89  4CF3               EXPORT ORIG.HTIMI
  90  4CF3
  91  4CF3              MUSIC_INIT_STATUS:
  92  4CF3 00            DB 0
  93  4CF4              SFX_INIT_STATUS:
  94  4CF4 00            DB 0
  95  4CF5              SOUND_ENABLED:
  96  4CF5 00            DB 0
  97  4CF6
  98  4CF6              SPRATR_INIT_STATUS:
  99  4CF6 00            DB 0
 100  4CF7              SPRATR_UPDATE_FLAG:
 101  4CF7 00 00         DW 0
 102  4CF9              SPRATR_DATA:
 103  4CF9 00 00         DW 0
 104  4CFB
 105  4CFB              ; to temporarily store stack pointer
 106  4CFB              TMPSP:
 107  4CFB 00 00         DW 0
 108  4CFD              ; to support sprite flicker
 109  4CFD              FLICKER:
 110  4CFD 00            DB 0
 111  4CFE
 112  4CFE              ; temp variables for BLIT, TILE functions
 113  4CFE              TILETMP1:
 114  4CFE              BLIT_TMP1:
 115  4CFE 00 00         DW 0
 116  4D00              TILETMP2:
 117  4D00              BLIT_TMP2:
 118  4D00 00 00         DW 0
 119  4D02
 120  4D02              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 121  4D02              ; per starting letter, if no commands with this letter, NULL value
 122  4D02              CMDS:
 123  4D02 00 00            DW 0 ; A
 124  4D04 D2 4D            DW CMDS_B ; B
 125  4D06 00 00            DW 0 ; C
 126  4D08 00 00            DW 0 ; D
 127  4D0A 00 00            DW 0 ; E
 128  4D0C 5D 4D            DW CMDS_F; F
 129  4D0E 70 4D            DW CMDS_G; G
 130  4D10 00 00            DW 0 ; H
 131  4D12 00 00            DW 0 ; I
 132  4D14 00 00            DW 0 ; J
 133  4D16 00 00            DW 0 ; K
 134  4D18 40 4D            DW CMDS_L ; L
 135  4D1A 4A 4D            DW CMDS_M ; M
 136  4D1C 00 00            DW 0 ; N
 137  4D1E 00 00            DW 0 ; O
 138  4D20 00 00            DW 0 ; P
 139  4D22 00 00            DW 0 ; Q
 140  4D24 00 00            DW 0 ; R
 141  4D26 84 4D            DW CMDS_S ; S
 142  4D28 DA 4D            DW CMDS_T ; T
 143  4D2A 36 4D            DW CMDS_U ; U
 144  4D2C 7A 4D            DW CMDS_V ; V
 145  4D2E 00 00            DW 0 ; W
 146  4D30 00 00            DW 0 ; X
 147  4D32 00 00            DW 0 ; Y
 148  4D34 00 00            DW 0 ; Z
 149  4D36
 150  4D36              CMDS_U:
 151  4D36 55 50 52 49  	DEFB	"UPRINT",0      ; Print upper case string
 151  4D3A 4E 54 00
 152  4D3D B2 4F        	DEFW	UPRINT
 153  4D3F 00               DB 0
 154  4D40              CMDS_L:
 155  4D40 4C 50 52 49  	DEFB	"LPRINT",0      ; Print lower case string
 155  4D44 4E 54 00
 156  4D47 CF 4F        	DEFW	LPRINT
 157  4D49 00               DB 0
 158  4D4A              CMDS_M:
 159  4D4A 4D 45 4D 56      DB "MEMVRM", 0
 159  4D4E 52 4D 00
 160  4D51 77 51            DW MEMVRM
 161  4D53 4D 45 4D 43  	DB "MEMCPY", 0
 161  4D57 50 59 00
 162  4D5A 36 50        	DW MEMCPY
 163  4D5C 00           	DB 0
 164  4D5D              CMDS_F:
 165  4D5D 46 49 4C 56      DB "FILVRM", 0
 165  4D61 52 4D 00
 166  4D64 79 50            DW FILVRM
 167  4D66 46 49 4C 52      DB "FILRAM", 0
 167  4D6A 41 4D 00
 168  4D6D C0 50            DW FILRAM
 169  4D6F 00               DB 0
 170  4D70              CMDS_G:
 171  4D70 47 45 4E 43      DB "GENCAL", 0
 171  4D74 41 4C 00
 172  4D77 1E 51            DW GENCAL
 173  4D79 00           	DB	0
 174  4D7A              CMDS_V:
 175  4D7A 56 52 4D 4D  	DB "VRMMEM", 0
 175  4D7E 45 4D 00
 176  4D81 F0 51        	DW VRMMEM
 177  4D83 00           	DB 0
 178  4D84              CMDS_S:
 179  4D84 53 50 52 53  	DB "SPRSET", 0
 179  4D88 45 54 00
 180  4D8B C0 53        	DW SPRSET
 181  4D8D 53 50 52 47  	DB "SPRGRPMOV", 0
 181  4D91 52 50 4D 4F
 181  4D95 56 00
 182  4D97 7E 54        	DW SPRGRPMOV
 183  4D99 53 4E 44 53  	DB "SNDSFX", 0
 183  4D9D 46 58 00
 184  4DA0 28 53        	DW SNDSFX
 185  4DA2 53 4E 44 50  	DB "SNDPLYON", 0
 185  4DA6 4C 59 4F 4E
 185  4DAA 00
 186  4DAB F2 52        	DW SNDPLYON
 187  4DAD 53 4E 44 50  	DB "SNDPLYOFF", 0
 187  4DB1 4C 59 4F 46
 187  4DB5 46 00
 188  4DB7 05 53        	DW SNDPLYOFF
 189  4DB9 53 4E 44 50  	DB "SNDPLYINI", 0
 189  4DBD 4C 59 49 4E
 189  4DC1 49 00
 190  4DC3 A8 52        	DW SNDPLYINIT
 191  4DC5 53 50 52 41  	DB "SPRATRINI", 0
 191  4DC9 54 52 49 4E
 191  4DCD 49 00
 192  4DCF 82 53        	DW SPRATRINI
 193  4DD1 00           	DB 0
 194  4DD2              CMDS_B:
 195  4DD2 42 4C 49 54  	DB "BLIT", 0
 195  4DD6 00
 196  4DD7 78 56        	DW BLIT
 197  4DD9 00           	DB 0
 198  4DDA              CMDS_T:
 199  4DDA 54 49 4C 45  	DB "TILERAM", 0
 199  4DDE 52 41 4D 00
 200  4DE2 E5 56        	DW TILERAM
 201  4DE4 54 49 4C 45  	DB "TILEVRM", 0
 201  4DE8 56 52 4D 00
 202  4DEC 2C 57        	DW TILEVRM
 203  4DEE 00           	DB 0
 204  4DEF
 205  4DEF              ; ****************************************************************************************************
 206  4DEF              ; function sets VRAM address
 207  4DEF              ; input HL=address
 208  4DEF              ; modifies AF
 209  4DEF              SETWRT_LOCAL:
 210  4DEF 7D           	LD	A, L
 211  4DF0 D3 99        	OUT	(099H), A
 212  4DF2 7C           	LD	A, H
 213  4DF3 E6 3F        	AND	03FH
 214  4DF5 F6 40        	OR	040H
 215  4DF7 D3 99        	OUT	(099H), A
 216  4DF9 C9           	RET
 217  4DFA              ; ****************************************************************************************************
 218  4DFA
 219  4DFA              ; ****************************************************************************************************
 220  4DFA              ; function gets slot and subslot data for specific page
 221  4DFA              ; input A=page (0, 1 or 2)
 222  4DFA              ; output B = 0A8H register value
 223  4DFA              ; output D = 0 is no subslots, 1 if yes
 224  4DFA              ; output C = 0A8H value when page 3 slot equals to requested page slot
 225  4DFA              ; output E = subslot value if present
 226  4DFA              ; modifies AF, BC, DE, HL
 227  4DFA              GET_PAGE_INFO:
 228  4DFA 6F               LD L, A
 229  4DFB C6 C1            ADD A, low (EXPTBL)
 230  4DFD 32 07 4E         LD (GET_PAGE_INFO_L1+1), A
 231  4E00 DB A8            IN A, (0A8H)
 232  4E02 47               LD B, A
 233  4E03 E6 3F            AND 03FH
 234  4E05 4F               LD C, A
 235  4E06              GET_PAGE_INFO_L1:
 236  4E06 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 237  4E09 E6 80            AND 080H
 238  4E0B 28 1B            JR Z, GET_PAGE_INFO_L2
 239  4E0D                  ; expanded
 240  4E0D 2D               DEC L
 241  4E0E FA 2D 4E         JP M, GET_PAGE_INFO_L3
 242  4E11 2D               DEC L
 243  4E12 FA 2B 4E         JP M, GET_PAGE_INFO_L4
 244  4E15                  ; page 2
 245  4E15 07               RLCA
 246  4E16 07               RLCA
 247  4E17              GET_PAGE_INFO_L5:
 248  4E17 E6 C0            AND 0C0H
 249  4E19 B1               OR C
 250  4E1A D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 251  4E1C 4F               LD C, A
 252  4E1D 3A FF FF         LD A, (0FFFFH)
 253  4E20 2F               CPL
 254  4E21 5F               LD E, A
 255  4E22 16 01            LD D, 1
 256  4E24 78               LD A, B ; return stack
 257  4E25 D3 A8            OUT (0A8H), A
 258  4E27 C9               RET
 259  4E28              GET_PAGE_INFO_L2:
 260  4E28                  ; not expanded
 261  4E28 16 00            LD D, 0
 262  4E2A C9               RET
 263  4E2B              GET_PAGE_INFO_L4:
 264  4E2B                  ; page 1
 265  4E2B 0F               RRCA
 266  4E2C 0F               RRCA
 267  4E2D              GET_PAGE_INFO_L3:
 268  4E2D                  ; page 0
 269  4E2D 0F               RRCA
 270  4E2E 0F               RRCA
 271  4E2F 18 E6            JR GET_PAGE_INFO_L5
 272  4E31              ; ****************************************************************************************************
 273  4E31
 274  4E31              ; ****************************************************************************************************
 275  4E31              ; function returns original slot and subslot info
 276  4E31              ; input B = 0A8H register value
 277  4E31              ; input D = 0 is no subslots, 1 if yes
 278  4E31              ; input C = 0A8H value when page 3 slot equals to requested page slot
 279  4E31              ; input E = subslot value if present
 280  4E31              ; modifies AF, disables interrupts
 281  4E31              RESTORE_PAGE_INFO:
 282  4E31 7A               LD A, D
 283  4E32 B7               OR A
 284  4E33 28 08            JR Z, RESTORE_PAGE_INFO_L1
 285  4E35 79               LD A, C
 286  4E36 F3           	DI
 287  4E37 D3 A8            OUT (0A8H), A
 288  4E39 7B               LD A, E
 289  4E3A 32 FF FF         LD (0FFFFH), A
 290  4E3D              RESTORE_PAGE_INFO_L1:
 291  4E3D 78               LD A, B
 292  4E3E D3 A8            OUT (0A8H), A
 293  4E40 C9               RET
 294  4E41              ; ****************************************************************************************************
 295  4E41
 296  4E41              ; *******************************************************************************************************
 297  4E41              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 298  4E41              ; INPUT:  A = SLOT ID: EXXXSSPP
 299  4E41              ; E = EXPANDED FLAG
 300  4E41              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 301  4E41              ; PP = PRIMARY SLOT NUMBER
 302  4E41              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 303  4E41              ; CHANGES: AF, BC, DE
 304  4E41
 305  4E41              LOCAL_ENASLT:
 306  4E41 CD 61 4E         CALL L0353
 307  4E44 FA 4E 4E         JP M, L0340
 308  4E47 DB A8            IN A, (0A8H)
 309  4E49 A1               AND C
 310  4E4A B0               OR B
 311  4E4B D3 A8            OUT (0A8H), A
 312  4E4D C9               RET
 313  4E4E              L0340:
 314  4E4E E5               PUSH HL
 315  4E4F CD 86 4E         CALL L0378
 316  4E52 4F               LD C, A
 317  4E53 06 00            LD B, 0
 318  4E55 7D               LD A, L
 319  4E56 A4               AND H
 320  4E57 B2               OR D
 321  4E58 21 C5 FC         LD HL, 0FCC5H
 322  4E5B 09               ADD HL, BC
 323  4E5C 77               LD (HL), A
 324  4E5D E1               POP HL
 325  4E5E 79               LD A, C
 326  4E5F 18 E0            JR LOCAL_ENASLT
 327  4E61              L0353:
 328  4E61 F3               DI
 329  4E62 F5               PUSH AF
 330  4E63 7C               LD A, H
 331  4E64 07               RLCA
 332  4E65 07               RLCA
 333  4E66 E6 03            AND 3
 334  4E68 5F               LD E, A
 335  4E69 3E C0            LD A, 0C0H
 336  4E6B              L035D:
 337  4E6B 07               RLCA
 338  4E6C 07               RLCA
 339  4E6D 1D               DEC E
 340  4E6E F2 6B 4E         JP P, L035D
 341  4E71 5F               LD E, A
 342  4E72 2F               CPL
 343  4E73 4F               LD C, A
 344  4E74 F1               POP AF
 345  4E75 F5               PUSH AF
 346  4E76 E6 03            AND 3
 347  4E78 3C               INC A
 348  4E79 47               LD B, A
 349  4E7A 3E AB            LD A, 0ABH
 350  4E7C              L036E:
 351  4E7C C6 55            ADD A, 055H
 352  4E7E 10 FC            DJNZ L036E
 353  4E80 57               LD D, A
 354  4E81 A3               AND E
 355  4E82 47               LD B, A
 356  4E83 F1               POP AF
 357  4E84 A7               AND A
 358  4E85 C9               RET
 359  4E86              L0378:
 360  4E86 F5               PUSH AF
 361  4E87 7A               LD A, D
 362  4E88 E6 C0            AND 0C0H
 363  4E8A 4F               LD C, A
 364  4E8B F1               POP AF
 365  4E8C F5               PUSH AF
 366  4E8D 57               LD D, A
 367  4E8E DB A8            IN A, (0A8H)
 368  4E90 47               LD B, A
 369  4E91 E6 3F            AND 03FH
 370  4E93 B1               OR C
 371  4E94 D3 A8            OUT (0A8H), A
 372  4E96 7A               LD A, D
 373  4E97 0F               RRCA
 374  4E98 0F               RRCA
 375  4E99 E6 03            AND 3
 376  4E9B 57               LD D, A
 377  4E9C 3E AB            LD A, 0ABH
 378  4E9E              L0390:
 379  4E9E C6 55            ADD A, 055H
 380  4EA0 15               DEC D
 381  4EA1 F2 9E 4E         JP P, L0390
 382  4EA4 A3               AND E
 383  4EA5 57               LD D, A
 384  4EA6 7B               LD A, E
 385  4EA7 2F               CPL
 386  4EA8 67               LD H, A
 387  4EA9 3A FF FF         LD A, (0FFFFH)
 388  4EAC 2F               CPL
 389  4EAD 6F               LD L, A
 390  4EAE A4               AND H
 391  4EAF B2               OR D
 392  4EB0 32 FF FF         LD (0FFFFH), A
 393  4EB3 78               LD A, B
 394  4EB4 D3 A8            OUT (0A8H), A
 395  4EB6 F1               POP AF
 396  4EB7 E6 03            AND 3
 397  4EB9 C9               RET
 398  4EBA              ; *******************************************************************************************************
 399  4EBA
 400  4EBA              ; *******************************************************************************************************
 401  4EBA              ; some common code to activate page 0 and place values needed to restore original page on stack
 402  4EBA              ; input IY=return address
 403  4EBA              ENABLE_PAGE0:
 404  4EBA AF               XOR A
 405  4EBB CD FA 4D         CALL GET_PAGE_INFO
 406  4EBE C5               PUSH BC
 407  4EBF D5               PUSH DE
 408  4EC0 3A 41 F3         LD A, (RAMAD0)
 409  4EC3 26 00            LD H, 0
 410  4EC5 CD 41 4E         CALL LOCAL_ENASLT
 411  4EC8 FD E9        	JP (IY)
 412  4ECA              ; *******************************************************************************************************
 413  4ECA
 414  4ECA              ; *******************************************************************************************************
 415  4ECA              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
 416  4ECA              ; struct {
 417  4ECA              ; DW y
 418  4ECA              ; DW x
 419  4ECA              ; DW pattern (0-31)
 420  4ECA              ; DW color
 421  4ECA              ; } [32]
 422  4ECA              ; will hide sprites whose location is outside of visible area
 423  4ECA              ; works in screen 1 and 2
 424  4ECA              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
 425  4ECA              ; modifies AF, AF', BC, DE, HL
 426  4ECA              SPRATR_UPDATE:
 427  4ECA              	; check if initialized
 428  4ECA 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
 429  4ECD B7           	OR A
 430  4ECE C8           	RET Z
 431  4ECF              	; check if update requested
 432  4ECF 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 433  4ED2 7E           	LD A, (HL)
 434  4ED3 B7           	OR A
 435  4ED4 C8           	RET Z
 436  4ED5              	; check screen mode
 437  4ED5 3A AF FC     	LD A, (SCRMOD)
 438  4ED8 3D           	DEC A
 439  4ED9 28 02        	JR Z, .L0 ; screen 1
 440  4EDB 3D           	DEC A
 441  4EDC C0           	RET NZ ; not screen 2
 442  4EDD              .L0:
 443  4EDD 06 20        	LD B, 32 ; sprite number
 444  4EDF 0E 98        	LD C, #98 ; register for vpd data output
 445  4EE1              	; set VDP address
 446  4EE1 2A 28 F9     	LD HL, (ATRBAS)
 447  4EE4 3A FD 4C     	LD A, (FLICKER)
 448  4EE7 5F           	LD E, A
 449  4EE8 08           	EX AF, AF'
 450  4EE9 7B           	LD A, E
 451  4EEA 87           	ADD A, A
 452  4EEB 87           	ADD A, A
 453  4EEC 16 00        	LD D, 0
 454  4EEE 5F           	LD E, A
 455  4EEF 19           	ADD HL, DE
 456  4EF0 CD EF 4D     	CALL SETWRT_LOCAL
 457  4EF3 ED 73 FB 4C  	LD (TMPSP), SP
 458  4EF7 ED 7B F9 4C  	LD SP, (SPRATR_DATA)
 459  4EFB
 460  4EFB              .LOOP:
 461  4EFB E1           	POP HL
 462  4EFC 24           	INC H
 463  4EFD 28 0D        	JR Z, .L1 ; negative number above -256
 464  4EFF 25           	DEC H
 465  4F00 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
 466  4F02 7D           	LD A, L
 467  4F03 FE C0        	CP 192
 468  4F05 30 10        	JR NC, .OUT3
 469  4F07 3D           	DEC A ; due to VDP rule that top of screen is -1
 470  4F08 57           	LD D, A
 471  4F09 C3 27 4F     	JP .X
 472  4F0C              .L1:
 473  4F0C 7D           	LD A, L
 474  4F0D C6 10        	ADD 16
 475  4F0F FA 17 4F     	JP M, .OUT3 ; below -16
 476  4F12 2D           	DEC L ; due to VDP rule that top of screen is -1
 477  4F13 55           	LD D, L
 478  4F14 C3 27 4F     	JP .X
 479  4F17              .OUT3:
 480  4F17 E1           	POP HL ; skip x value
 481  4F18              .OUT2:
 482  4F18 E1           	POP HL ; skip pattern
 483  4F19 E1           	POP HL ; skip color
 484  4F1A 3E D1        	LD A, #D1
 485  4F1C D3 98        	OUT (#98), A ; sprite hidden
 486  4F1E D3 98        	OUT (#98), A ; value unimportant
 487  4F20 D3 98        	OUT (#98), A ; value unimportant
 488  4F22 D3 98        	OUT (#98), A ; value unimportant
 489  4F24 C3 4B 4F     	JP .NEXT
 490  4F27              .X:
 491  4F27 E1           	POP HL
 492  4F28 24           	INC H
 493  4F29 28 08        	JR Z, .L2
 494  4F2B 25           	DEC H
 495  4F2C 20 EA        	JR NZ, .OUT2
 496  4F2E 1E 00        	LD E, 0 ; EC bit
 497  4F30 C3 3C 4F     	JP .XY
 498  4F33              .L2:
 499  4F33 7D           	LD A, L
 500  4F34 C6 20        	ADD 32
 501  4F36 FA 18 4F     	JP M, .OUT2
 502  4F39 6F           	LD L, A
 503  4F3A 1E 80        	LD E, #80
 504  4F3C              .XY:
 505  4F3C ED 51        	OUT (C), D
 506  4F3E ED 69        	OUT (C), L
 507  4F40 E1           	POP HL ; pattern
 508  4F41 7D           	LD A, L
 509  4F42 87           	ADD A, A
 510  4F43 87           	ADD A, A ; needs to go at 4x
 511  4F44 D3 98        	OUT (#98), A
 512  4F46 E1           	POP HL ; color
 513  4F47 7D           	LD A, L
 514  4F48 B3           	OR E
 515  4F49 D3 98        	OUT (#98), A
 516  4F4B              .NEXT:
 517  4F4B 08           	EX AF, AF'
 518  4F4C 3C           	INC A
 519  4F4D E6 1F        	AND 31
 520  4F4F C2 63 4F     	JP NZ, .NEXT2
 521  4F52 08           	EX AF, AF'
 522  4F53 2A 28 F9     	LD HL, (ATRBAS)
 523  4F56              	; CALL SETWRT_LOCAL not allowed as SP modified
 524  4F56 7D           	LD	A, L
 525  4F57 D3 99        	OUT	(099H), A
 526  4F59 7C           	LD	A, H
 527  4F5A E6 3F        	AND	03FH
 528  4F5C F6 40        	OR	040H
 529  4F5E D3 99        	OUT	(099H), A
 530  4F60 C3 64 4F     	JP .NEXT3
 531  4F63              .NEXT2:
 532  4F63 08           	EX AF, AF'
 533  4F64              .NEXT3:
 534  4F64 10 95        	DJNZ .LOOP
 535  4F66 08           	EX AF, AF'
 536  4F67 3C           	INC A
 537  4F68 32 FD 4C     	LD (FLICKER), A
 538  4F6B
 539  4F6B ED 7B FB 4C  	LD SP, (TMPSP)
 540  4F6F 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 541  4F72 36 00        	LD (HL), 0 ; zero out update flag
 542  4F74 C9           	RET
 543  4F75              ; *******************************************************************************************************
 544  4F75
 545  4F75              ; General BASIC CALL-instruction handler
 546  4F75              CALLHAND:
 547  4F75 E5           	PUSH HL
 548  4F76 21 02 4D     	LD	HL, CMDS ; pointer table based on starting letter
 549  4F79 3A 89 FD         LD A, (PROCNM)
 550  4F7C D6 41            SUB 'A'
 551  4F7E 87               ADD A, A
 552  4F7F 16 00            LD D, 0
 553  4F81 5F               LD E, A
 554  4F82 19               ADD HL, DE
 555  4F83 5E               LD E, (HL)
 556  4F84 23               INC HL
 557  4F85 56               LD D, (HL)
 558  4F86 7A               LD A, D
 559  4F87 B3               OR E
 560  4F88 28 24            JR Z, .CMDNOTRECOGNIZED
 561  4F8A EB               EX DE, HL
 562  4F8B              .CHKCMD:
 563  4F8B 11 89 FD     	LD	DE, PROCNM
 564  4F8E 1A           .LOOP:	LD	A,(DE)
 565  4F8F BE           	CP	(HL)
 566  4F90 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 567  4F92 13           	INC	DE
 568  4F93 23           	INC	HL
 569  4F94 A7           	AND	A
 570  4F95 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 571  4F97 5E           	LD	E,(HL)
 572  4F98 23           	INC	HL
 573  4F99 56           	LD	D,(HL)
 574  4F9A E1           	POP	HL		; routine address
 575  4F9B CD 21 50     	CALL	GETPREVCHAR
 576  4F9E CD B0 4F     	CALL	.CALLDE		; Call routine
 577  4FA1 A7           	AND	A
 578  4FA2 C9           	RET
 579  4FA3
 580  4FA3              .TONEXTCMD:
 581  4FA3 0E FF        	LD	C,0FFH
 582  4FA5 AF           	XOR	A
 583  4FA6 ED B1        	CPIR			; Skip to end of instruction name
 584  4FA8 23           	INC	HL
 585  4FA9 23           	INC	HL		; Skip address
 586  4FAA BE           	CP	(HL)
 587  4FAB 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 588  4FAD E1           	POP	HL
 589  4FAE              .CMDNOTRECOGNIZED:
 590  4FAE 37               SCF
 591  4FAF C9           	RET
 592  4FB0
 593  4FB0              .CALLDE:
 594  4FB0 D5           	PUSH	DE
 595  4FB1 C9           	RET
 596  4FB2
 597  4FB2              ;---------------------------
 598  4FB2
 599  4FB2              ;---------------------------
 600  4FB2              UPRINT:
 601  4FB2 CD F6 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 602  4FB5 E5           	PUSH	HL
 603  4FB6 CD EC 4F             CALL    GETSTRPNT
 604  4FB9              .LOOP
 605  4FB9 7E                   LD      A,(HL)
 606  4FBA CD C6 4F             CALL    .UCASE
 607  4FBD CD A2 00             CALL    CHPUT  ;Print
 608  4FC0 23                   INC     HL
 609  4FC1 10 F6                DJNZ    .LOOP
 610  4FC3
 611  4FC3 E1           	POP	HL
 612  4FC4 B7           	OR      A
 613  4FC5 C9           	RET
 614  4FC6
 615  4FC6              .UCASE:
 616  4FC6 FE 61                CP      "a"
 617  4FC8 D8                   RET     C
 618  4FC9 FE 7B                CP      "z"+1
 619  4FCB D0                   RET     NC
 620  4FCC E6 DF                AND     %11011111
 621  4FCE C9                   RET
 622  4FCF              ;---------------------------
 623  4FCF              LPRINT:
 624  4FCF CD F6 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 625  4FD2 E5           	PUSH	HL
 626  4FD3 CD EC 4F             CALL    GETSTRPNT
 627  4FD6              .LOOP
 628  4FD6 7E                   LD      A,(HL)
 629  4FD7 CD E3 4F             CALL    .LCASE
 630  4FDA CD A2 00             CALL    CHPUT  ;Print
 631  4FDD 23                   INC     HL
 632  4FDE 10 F6                DJNZ    .LOOP
 633  4FE0
 634  4FE0 E1           	POP	HL
 635  4FE1 B7           	OR      A
 636  4FE2 C9           	RET
 637  4FE3
 638  4FE3              .LCASE:
 639  4FE3 FE 41                CP      "A"
 640  4FE5 D8                   RET     C
 641  4FE6 FE 5B                CP      "Z"+1
 642  4FE8 D0                   RET     NC
 643  4FE9 F6 20                OR      %00100000
 644  4FEB C9                   RET
 645  4FEC              ;---------------------------
 646  4FEC
 647  4FEC              GETSTRPNT:
 648  4FEC              ; OUT:
 649  4FEC              ; HL = String Address
 650  4FEC              ; B  = Lenght
 651  4FEC
 652  4FEC 2A F8 F7             LD      HL,(USR)
 653  4FEF 46                   LD      B,(HL)
 654  4FF0 23                   INC     HL
 655  4FF1 5E                   LD      E,(HL)
 656  4FF2 23                   INC     HL
 657  4FF3 56                   LD      D,(HL)
 658  4FF4 EB                   EX      DE,HL
 659  4FF5 C9                   RET
 660  4FF6
 661  4FF6              EVALTXTPARAM:
 662  4FF6 CD 17 50     	CALL	CHKCHAR
 663  4FF9 28           	DEFB	"("             ; Check for (
 664  4FFA DD 21 64 4C  	LD	IX,FRMEVL
 665  4FFE CD 59 01     	CALL	CALBAS		; Evaluate expression
 666  5001 3A 63 F6             LD      A,(VALTYP)
 667  5004 FE 03                CP      3               ; Text type?
 668  5006 C2 29 50             JP      NZ,TYPE_MISMATCH
 669  5009 E5                   PUSH	HL
 670  500A DD 21 D0 67          LD	IX,FRESTR         ; Free the temporary string
 671  500E CD 59 01             CALL	CALBAS
 672  5011 E1                   POP	HL
 673  5012 CD 17 50     	CALL	CHKCHAR
 674  5015 29           	DEFB	")"             ; Check for )
 675  5016 C9                   RET
 676  5017
 677  5017
 678  5017              CHKCHAR:
 679  5017 CD 21 50     	CALL	GETPREVCHAR	; Get previous basic char
 680  501A E3           	EX	(SP),HL
 681  501B BE           	CP	(HL) 	        ; Check if good char
 682  501C 20 0F        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 683  501E 23           	INC	HL
 684  501F E3           	EX	(SP),HL
 685  5020 23           	INC	HL		; Get next basic char
 686  5021
 687  5021              GETPREVCHAR:
 688  5021 2B           	DEC	HL
 689  5022 DD 21 66 46  	LD	IX,CHRGTR
 690  5026 C3 59 01     	JP      CALBAS
 691  5029
 692  5029
 693  5029              TYPE_MISMATCH:
 694  5029 1E 0D            LD E, 13 ; Type mismatch
 695  502B 18 02            JR THROW_ERROR
 696  502D
 697  502D              SYNTAX_ERROR:
 698  502D 1E 02            LD E, 2 ; Syntax error
 699  502F              THROW_ERROR:
 700  502F DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 701  5033 C3 59 01     	JP	CALBAS
 702  5036
 703  5036              ;---------------------------
 704  5036
 705  5036              ; *******************************************************************************************************
 706  5036              ; function to handle CALL MEMCPY basic extension
 707  5036              ; _MEMCPY ( INT source,
 708  5036              ;			INT destination,
 709  5036              ;			INT count,
 710  5036              ; will put ram in page 0 also, page 1 is already there
 711  5036              MEMCPY:
 712  5036              	; opening (
 713  5036 CD 17 50     	CALL CHKCHAR
 714  5039 28           	DB '('
 715  503A              	; get source address
 716  503A DD 21 2F 54  	LD IX, FRMQNT
 717  503E CD 59 01     	CALL CALBAS
 718  5041 D5           	PUSH DE
 719  5042              	; comma
 720  5042 CD 17 50     	CALL CHKCHAR
 721  5045 2C           	DB ','
 722  5046              	; get destination address
 723  5046 DD 21 2F 54  	LD IX, FRMQNT
 724  504A CD 59 01     	CALL CALBAS
 725  504D D5           	PUSH DE
 726  504E              	; comma
 727  504E CD 17 50     	CALL CHKCHAR
 728  5051 2C           	DB ','
 729  5052              	; get length
 730  5052 DD 21 2F 54  	LD IX, FRMQNT
 731  5056 CD 59 01     	CALL CALBAS
 732  5059 D5           	PUSH DE
 733  505A              	; ending )
 734  505A CD 17 50     	CALL CHKCHAR
 735  505D 29           	DB ')'
 736  505E
 737  505E              	; save position
 738  505E E5           	PUSH HL
 739  505F DD E1        	POP IX
 740  5061
 741  5061 C1           	POP BC ; count
 742  5062 D1           	POP DE ; destination
 743  5063 E1           	POP HL ; source
 744  5064 D9           	EXX
 745  5065              	; enable page 0
 746  5065 FD 21 6C 50  	LD IY, .RET
 747  5069 C3 BA 4E     	JP ENABLE_PAGE0
 748  506C              .RET:
 749  506C FB           	EI
 750  506D D9           	EXX
 751  506E ED B0        	LDIR
 752  5070 D1               POP DE
 753  5071 C1               POP BC
 754  5072 CD 31 4E         CALL RESTORE_PAGE_INFO
 755  5075 DD E5        	PUSH IX
 756  5077 E1           	POP HL
 757  5078 C9           	RET
 758  5079              ; *******************************************************************************************************
 759  5079
 760  5079              ; *******************************************************************************************************
 761  5079              ; function to handle CALL FILVRM basic extension
 762  5079              ; FILVRM ( INT offset,
 763  5079              ;		   INT count,
 764  5079              ;		   BYTE value,
 765  5079              ;		   BYTE wait_vsync) >0 = true
 766  5079              ; wait_vsync will issue HALT before copying
 767  5079              FILVRM:
 768  5079              	; opening (
 769  5079 CD 17 50     	CALL CHKCHAR
 770  507C 28           	DB '('
 771  507D              	; get offset address
 772  507D DD 21 2F 54  	LD IX, FRMQNT
 773  5081 CD 59 01     	CALL CALBAS
 774  5084 D5           	PUSH DE
 775  5085              	; comma
 776  5085 CD 17 50     	CALL CHKCHAR
 777  5088 2C           	DB ','
 778  5089              	; get count
 779  5089 DD 21 2F 54  	LD IX, FRMQNT
 780  508D CD 59 01     	CALL CALBAS
 781  5090 D5           	PUSH DE
 782  5091              	; comma
 783  5091 CD 17 50     	CALL CHKCHAR
 784  5094 2C           	DB ','
 785  5095              	; get value
 786  5095 DD 21 1C 52  	LD IX, GETBYT
 787  5099 CD 59 01     	CALL CALBAS
 788  509C F5           	PUSH AF
 789  509D              	; comma
 790  509D CD 17 50     	CALL CHKCHAR
 791  50A0 2C           	DB ','
 792  50A1              	; get vsync wait
 793  50A1 DD 21 1C 52  	LD IX, GETBYT
 794  50A5 CD 59 01     	CALL CALBAS
 795  50A8 F5           	PUSH AF
 796  50A9              	; ending )
 797  50A9 CD 17 50     	CALL CHKCHAR
 798  50AC 29           	DB ')'
 799  50AD
 800  50AD FB               EI
 801  50AE              	; save position
 802  50AE E5           	PUSH HL
 803  50AF DD E1        	POP IX
 804  50B1
 805  50B1              	; syntax ok
 806  50B1              	; wait for vsync if needed
 807  50B1 F1           	POP AF
 808  50B2 B7           	OR A
 809  50B3 28 01        	JR Z, .L1
 810  50B5 76           	HALT
 811  50B6
 812  50B6              .L1:
 813  50B6 F1               POP AF ; value
 814  50B7 C1               POP BC ; count
 815  50B8 E1               POP HL ; offset
 816  50B9 CD 56 00         CALL BIOS_FILVRM
 817  50BC
 818  50BC              .L3:
 819  50BC DD E5        	PUSH IX
 820  50BE E1           	POP HL
 821  50BF C9           	RET
 822  50C0              ; *******************************************************************************************************
 823  50C0
 824  50C0              ; *******************************************************************************************************
 825  50C0              ; function to handle CALL FILRAM basic extension
 826  50C0              ; FILRAM ( INT start address,
 827  50C0              ;		   INT count,
 828  50C0              ;		   BYTE value,
 829  50C0              ; will put ram in page 0 also, page 1 is already there
 830  50C0              FILRAM:
 831  50C0              	; opening (
 832  50C0 CD 17 50     	CALL CHKCHAR
 833  50C3 28           	DB '('
 834  50C4              	; get start address
 835  50C4 DD 21 2F 54  	LD IX, FRMQNT
 836  50C8 CD 59 01     	CALL CALBAS
 837  50CB D5           	PUSH DE
 838  50CC              	; comma
 839  50CC CD 17 50     	CALL CHKCHAR
 840  50CF 2C           	DB ','
 841  50D0              	; get count
 842  50D0 DD 21 2F 54  	LD IX, FRMQNT
 843  50D4 CD 59 01     	CALL CALBAS
 844  50D7 D5           	PUSH DE
 845  50D8              	; comma
 846  50D8 CD 17 50     	CALL CHKCHAR
 847  50DB 2C           	DB ','
 848  50DC              	; get value
 849  50DC DD 21 1C 52  	LD IX, GETBYT
 850  50E0 CD 59 01     	CALL CALBAS
 851  50E3 F5           	PUSH AF
 852  50E4              	; ending )
 853  50E4 CD 17 50     	CALL CHKCHAR
 854  50E7 29           	DB ')'
 855  50E8
 856  50E8              	; save position
 857  50E8 E5           	PUSH HL
 858  50E9 DD E1        	POP IX
 859  50EB
 860  50EB D1           	POP DE ; actually AF
 861  50EC C1           	POP BC ; count
 862  50ED E1           	POP HL ; start address
 863  50EE 78           	LD A, B
 864  50EF B7           	OR A
 865  50F0 20 0A        	JR NZ, .L1 ; >=256 bytes to fill
 866  50F2 B1           	OR C
 867  50F3 28 19        	JR Z, .EXIT ; 0 bytes to fill, skip
 868  50F5 79           	LD A, C
 869  50F6 3D           	DEC A
 870  50F7 20 03        	JR NZ, .L1 ; ; >1 byte to fill
 871  50F9              	; one byte to fill
 872  50F9 72           	LD (HL), D
 873  50FA 18 12        	JR .EXIT
 874  50FC              .L1:
 875  50FC D9           	EXX
 876  50FD              	; enable page 0
 877  50FD FD 21 04 51  	LD IY, .RET
 878  5101 C3 BA 4E     	JP ENABLE_PAGE0
 879  5104              .RET:
 880  5104 FB           	EI
 881  5105 D9           	EXX
 882  5106 CD 12 51     	CALL .FILLVALUE
 883  5109 D1               POP DE
 884  510A C1               POP BC
 885  510B CD 31 4E         CALL RESTORE_PAGE_INFO
 886  510E              .EXIT:
 887  510E DD E5        	PUSH IX
 888  5110 E1           	POP HL
 889  5111 C9           	RET
 890  5112
 891  5112              .FILLVALUE:
 892  5112 72               LD (HL), D
 893  5113 54               LD D, H
 894  5114 5D               LD E, L
 895  5115 13               INC DE
 896  5116 0B               DEC BC
 897  5117 ED B0            LDIR
 898  5119 C9               RET
 899  511A              ; *******************************************************************************************************
 900  511A
 901  511A              ; *******************************************************************************************************
 902  511A              ; function to handle CALL GENCAL basic extension
 903  511A              ; GENCAL ( INT fn_addr, = address of the function to call
 904  511A              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 905  511A              ; output values of reristers will also be stored at reg_list_ptr
 906  511A              GENCAL_VAR_SP:
 907  511A 00 00            DW 0
 908  511C              GENCAL_VAR_SP2:
 909  511C 00 00            DW 0
 910  511E              GENCAL:
 911  511E              	; opening (
 912  511E CD 17 50     	CALL CHKCHAR
 913  5121 28           	DB '('
 914  5122              	; get function address
 915  5122 DD 21 2F 54  	LD IX, FRMQNT
 916  5126 CD 59 01     	CALL CALBAS
 917  5129 D5           	PUSH DE
 918  512A              	; comma
 919  512A CD 17 50     	CALL CHKCHAR
 920  512D 2C           	DB ','
 921  512E              	; get pointer to register list
 922  512E DD 21 2F 54  	LD IX, FRMQNT
 923  5132 CD 59 01     	CALL CALBAS
 924  5135 D5           	PUSH DE
 925  5136              	; ending )
 926  5136 CD 17 50     	CALL CHKCHAR
 927  5139 29           	DB ')'
 928  513A
 929  513A              	; save BASIC token position
 930  513A E5           	PUSH HL
 931  513B D9               EXX
 932  513C E1           	POP HL ; HL'=next basic token
 933  513D D9               EXX
 934  513E
 935  513E E1               POP HL ; get pointer to register values
 936  513F ED 73 1A 51      LD (GENCAL_VAR_SP), SP
 937  5143 F3               DI
 938  5144 F9               LD SP, HL
 939  5145 F1               POP AF
 940  5146 C1               POP BC
 941  5147 D1               POP DE
 942  5148 E1               POP HL
 943  5149 DD E1            POP IX
 944  514B FD E1            POP IY
 945  514D D9               EXX
 946  514E ED 73 1C 51      LD (GENCAL_VAR_SP2), SP
 947  5152 ED 7B 1A 51      LD SP, (GENCAL_VAR_SP)
 948  5156 FB               EI
 949  5157 D1               POP DE ; get function to call
 950  5158 E5               PUSH HL
 951  5159 CD 74 51         CALL .EXXDECALL
 952  515C F3               DI
 953  515D ED 73 1A 51      LD (GENCAL_VAR_SP), SP
 954  5161 ED 7B 1C 51      LD SP, (GENCAL_VAR_SP2)
 955  5165 FD E5            PUSH IY
 956  5167 DD E5            PUSH IX
 957  5169 E5               PUSH HL
 958  516A D5               PUSH DE
 959  516B C5               PUSH BC
 960  516C F5               PUSH AF
 961  516D ED 7B 1A 51      LD SP, (GENCAL_VAR_SP)
 962  5171 FB               EI
 963  5172 E1               POP HL
 964  5173 C9           	RET
 965  5174
 966  5174              .EXXDECALL:
 967  5174 D5               PUSH DE
 968  5175 D9               EXX
 969  5176 C9               RET
 970  5177              ; *******************************************************************************************************
 971  5177
 972  5177              ; *******************************************************************************************************
 973  5177              ; function to handle CALL MEMVRM basic extension
 974  5177              ; copies from RAM to VRAM
 975  5177              ; _MEMVRM ( INT source,
 976  5177              ;			INT destination,
 977  5177              ;			INT count,
 978  5177              ;			BYTE wait_vsync) >0 = treu
 979  5177              ; will put ram in page 0 also, page 1 is already there
 980  5177              ; wait_vsync will issue HALT before copying
 981  5177              MEMVRM:
 982  5177              	; opening (
 983  5177 CD 17 50     	CALL CHKCHAR
 984  517A 28           	DB '('
 985  517B              	; get source address
 986  517B DD 21 2F 54  	LD IX, FRMQNT
 987  517F CD 59 01     	CALL CALBAS
 988  5182 D5           	PUSH DE
 989  5183              	; comma
 990  5183 CD 17 50     	CALL CHKCHAR
 991  5186 2C           	DB ','
 992  5187              	; get destination address
 993  5187 DD 21 2F 54  	LD IX, FRMQNT
 994  518B CD 59 01     	CALL CALBAS
 995  518E D5           	PUSH DE
 996  518F              	; comma
 997  518F CD 17 50     	CALL CHKCHAR
 998  5192 2C           	DB ','
 999  5193              	; get length
1000  5193 DD 21 2F 54  	LD IX, FRMQNT
1001  5197 CD 59 01     	CALL CALBAS
1002  519A D5           	PUSH DE
1003  519B              	; comma
1004  519B CD 17 50     	CALL CHKCHAR
1005  519E 2C           	DB ','
1006  519F              	; get vsync wait
1007  519F DD 21 1C 52  	LD IX, GETBYT
1008  51A3 CD 59 01     	CALL CALBAS
1009  51A6 F5           	PUSH AF
1010  51A7              	; ending )
1011  51A7 CD 17 50     	CALL CHKCHAR
1012  51AA 29           	DB ')'
1013  51AB
1014  51AB                  ; save position in BASIC text
1015  51AB E5           	PUSH HL
1016  51AC DD E1        	POP IX
1017  51AE
1018  51AE F1           	POP AF ; wait vsync
1019  51AF B7           	OR A
1020  51B0 28 03        	JR Z, .L1
1021  51B2 FB               EI
1022  51B3 76           	HALT
1023  51B4 F3           	DI
1024  51B5              .L1:
1025  51B5              	; pop LDIR parameters and store away for later
1026  51B5 C1           	POP BC ; count
1027  51B6 D1           	POP DE ; vram destination
1028  51B7 E1           	POP HL ; ram source
1029  51B8 D9           	EXX
1030  51B9 FD 21 C0 51   	LD IY, .RET
1031  51BD C3 BA 4E     	JP ENABLE_PAGE0
1032  51C0              .RET:
1033  51C0 FB           	EI
1034  51C1 D9           	EXX
1035  51C2 CD CE 51     	CALL .LDIRVM
1036  51C5 D1               POP DE
1037  51C6 C1               POP BC
1038  51C7 CD 31 4E         CALL RESTORE_PAGE_INFO
1039  51CA DD E5        	PUSH IX
1040  51CC E1           	POP HL
1041  51CD C9           	RET
1042  51CE
1043  51CE              .LDIRVM:
1044  51CE EB           	EX DE, HL
1045  51CF CD EF 4D     	CALL SETWRT_LOCAL
1046  51D2 EB           	EX DE, HL
1047  51D3 78           	LD A, B
1048  51D4 B7           	OR A
1049  51D5 28 0D        	JR Z, .L3
1050  51D7 C5           	PUSH BC
1051  51D8 0E 98        	LD C, #98
1052  51DA              .L2:
1053  51DA 50           	LD D, B
1054  51DB 06 00        	LD B, 0
1055  51DD CD EA 51     	CALL .BBYTECOPY
1056  51E0 42           	LD B, D
1057  51E1 10 F7        	DJNZ .L2
1058  51E3 C1           	POP BC
1059  51E4              .L3:
1060  51E4 79           	LD A, C
1061  51E5 B7           	OR A
1062  51E6 C8           	RET Z
1063  51E7 41           	LD B, C
1064  51E8 0E 98        	LD C, #98
1065  51EA              .BBYTECOPY:
1066  51EA ED A3        	OUTI
1067  51EC C2 EA 51     	JP	NZ, .BBYTECOPY
1068  51EF C9           	RET
1069  51F0              ; *******************************************************************************************************
1070  51F0
1071  51F0              ; *******************************************************************************************************
1072  51F0              ; function to handle CALL VRMMEM basic extension
1073  51F0              ; copies from RAM to VRAM
1074  51F0              ; _VRMMEM ( INT source,
1075  51F0              ;			INT destination,
1076  51F0              ;			INT count
1077  51F0              ; will put ram in page 0 also, page 1 is already there
1078  51F0              VRMMEM:
1079  51F0              	; opening (
1080  51F0 CD 17 50     	CALL CHKCHAR
1081  51F3 28           	DB '('
1082  51F4              	; get source address
1083  51F4 DD 21 2F 54  	LD IX, FRMQNT
1084  51F8 CD 59 01     	CALL CALBAS
1085  51FB D5           	PUSH DE
1086  51FC              	; comma
1087  51FC CD 17 50     	CALL CHKCHAR
1088  51FF 2C           	DB ','
1089  5200              	; get destination address
1090  5200 DD 21 2F 54  	LD IX, FRMQNT
1091  5204 CD 59 01     	CALL CALBAS
1092  5207 D5           	PUSH DE
1093  5208              	; comma
1094  5208 CD 17 50     	CALL CHKCHAR
1095  520B 2C           	DB ','
1096  520C              	; get length
1097  520C DD 21 2F 54  	LD IX, FRMQNT
1098  5210 CD 59 01     	CALL CALBAS
1099  5213 D5           	PUSH DE
1100  5214              	; ending )
1101  5214 CD 17 50     	CALL CHKCHAR
1102  5217 29           	DB ')'
1103  5218
1104  5218                  ; save position in BASIC text
1105  5218 E5           	PUSH HL
1106  5219 DD E1        	POP IX
1107  521B
1108  521B C1           	POP BC ; count
1109  521C D1           	POP DE ; destination
1110  521D E1           	POP HL ; source
1111  521E D9           	EXX
1112  521F FD 21 26 52  	LD IY, .RET
1113  5223 C3 BA 4E     	JP ENABLE_PAGE0
1114  5226              .RET:
1115  5226 FB           	EI
1116  5227 D9           	EXX
1117  5228 CD 34 52     	CALL .LDIRMV
1118  522B D1               POP DE
1119  522C C1               POP BC
1120  522D CD 31 4E         CALL RESTORE_PAGE_INFO
1121  5230 DD E5        	PUSH IX
1122  5232 E1           	POP HL
1123  5233 C9           	RET
1124  5234
1125  5234              .LDIRMV:
1126  5234 CD EF 4D     	CALL SETWRT_LOCAL
1127  5237              .L4:
1128  5237 DB 98            IN A, (#98)
1129  5239 12           	LD (DE), A
1130  523A 13               INC DE
1131  523B 0B               DEC BC
1132  523C 79               LD A, C
1133  523D B0               OR B
1134  523E C2 37 52         JP NZ, .L4
1135  5241 C9               RET
1136  5242              ; *******************************************************************************************************
1137  5242
1138  5242              ; *******************************************************************************************************
1139  5242              ; H.TIMI function
1140  5242              MBGE_HTIMI:
1141  5242               EXPORT MBGE_HTIMI
1142  5242 F5           	PUSH AF
1143  5243
1144  5243 CD CA 4E     	CALL SPRATR_UPDATE
1145  5246
1146  5246 3A F5 4C     	LD A, (SOUND_ENABLED)
1147  5249 B7           	OR A
1148  524A 28 2A        	JR Z, .EXIT
1149  524C
1150  524C              	; enable page 2
1151  524C 3E 02            LD A, 2
1152  524E CD FA 4D         CALL GET_PAGE_INFO
1153  5251 C5               PUSH BC
1154  5252 D5               PUSH DE
1155  5253 3A 43 F3         LD A, (RAMAD2)
1156  5256 26 80            LD H, 080H
1157  5258 CD 41 4E         CALL LOCAL_ENASLT
1158  525B              	; enable page 0
1159  525B AF               XOR A
1160  525C CD FA 4D         CALL GET_PAGE_INFO
1161  525F C5               PUSH BC
1162  5260 D5               PUSH DE
1163  5261 3A 41 F3         LD A, (RAMAD0)
1164  5264 26 00            LD H, 0
1165  5266 CD 41 4E         CALL LOCAL_ENASLT
1166  5269
1167  5269 CD 31 42     	CALL PLY_AKG_PLAY
1168  526C
1169  526C              	; restore page 0
1170  526C D1               POP DE
1171  526D C1               POP BC
1172  526E CD 31 4E         CALL RESTORE_PAGE_INFO
1173  5271              	; restore page 2
1174  5271 D1               POP DE
1175  5272 C1               POP BC
1176  5273 CD 31 4E         CALL RESTORE_PAGE_INFO
1177  5276
1178  5276              .EXIT:
1179  5276 F1           	POP AF
1180  5277 C3 EE 4C     	JP ORIG.HTIMI
1181  527A              ; *******************************************************************************************************
1182  527A
1183  527A              ; *******************************************************************************************************
1184  527A              ; interrupt handler when page 0 enabled
1185  527A              VBLANK:
1186  527A              	EXPORT VBLANK
1187  527A
1188  527A F5               PUSH AF
1189  527B              	; is VDP originator ?
1190  527B DB 99        	IN	A, (099H)
1191  527D A7           	AND	A
1192  527E F2 A4 52     	JP P, .EXIT
1193  5281 3A F5 4C     	LD A, (SOUND_ENABLED)
1194  5284 B7           	OR A
1195  5285 28 1D        	JR Z, .EXIT
1196  5287
1197  5287 C5               PUSH BC
1198  5288 D5               PUSH DE
1199  5289 E5               PUSH HL
1200  528A 08               EX AF, AF'
1201  528B D9               EXX
1202  528C F5               PUSH AF
1203  528D C5               PUSH BC
1204  528E D5               PUSH DE
1205  528F E5               PUSH HL
1206  5290 DD E5            PUSH IX
1207  5292 FD E5            PUSH IY
1208  5294
1209  5294 CD 31 42     	CALL PLY_AKG_PLAY
1210  5297
1211  5297 FD E1            POP IY
1212  5299 DD E1            POP IX
1213  529B E1               POP HL
1214  529C D1               POP DE
1215  529D C1               POP BC
1216  529E F1               POP AF
1217  529F 08               EX AF, AF'
1218  52A0 D9               EXX
1219  52A1 E1               POP HL
1220  52A2 D1               POP DE
1221  52A3 C1               POP BC
1222  52A4              .EXIT:
1223  52A4 F1           	POP AF
1224  52A5 FB           	EI
1225  52A6 ED 4D        	RETI
1226  52A8              ; *******************************************************************************************************
1227  52A8
1228  52A8              ; *******************************************************************************************************
1229  52A8              ; function to handle CALL SNDPLYINIT basic extension
1230  52A8              ; initializes sound player
1231  52A8              ; _SNDPLYINIT ( INT music_offset,
1232  52A8              ;				INT sfx_offset, can be -1 if no SFX
1233  52A8              ; will put ram in page 0 also, page 1 is already there
1234  52A8              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1235  52A8              SNDPLYINIT:
1236  52A8              	; opening (
1237  52A8 CD 17 50     	CALL CHKCHAR
1238  52AB 28           	DB '('
1239  52AC              	; get music address
1240  52AC DD 21 2F 54  	LD IX, FRMQNT
1241  52B0 CD 59 01     	CALL CALBAS
1242  52B3 D5           	PUSH DE
1243  52B4              	; comma
1244  52B4 CD 17 50     	CALL CHKCHAR
1245  52B7 2C           	DB ','
1246  52B8              	; get sfx address
1247  52B8 DD 21 2F 54  	LD IX, FRMQNT
1248  52BC CD 59 01     	CALL CALBAS
1249  52BF D5           	PUSH DE
1250  52C0              	; ending )
1251  52C0 CD 17 50     	CALL CHKCHAR
1252  52C3 29           	DB ')'
1253  52C4
1254  52C4                  ; save position in BASIC text
1255  52C4 44           	LD B, H
1256  52C5 4D           	LD C, L
1257  52C6
1258  52C6              	; pop LDIR parameters and store away for later
1259  52C6 D1           	POP DE ; sfx address
1260  52C7 E1           	POP HL ; music address
1261  52C8 C5           	PUSH BC ; basic text location
1262  52C9 D9           	EXX
1263  52CA FD 21 D1 52  	LD IY, .RET
1264  52CE C3 BA 4E     	JP ENABLE_PAGE0
1265  52D1              .RET:
1266  52D1 D9           	EXX
1267  52D2
1268  52D2 D5           	PUSH DE
1269  52D3 AF           	XOR A
1270  52D4              	; HL = music location
1271  52D4 CD 60 41     	CALL PLY_AKG_INIT
1272  52D7 3E 01        	LD A, 1
1273  52D9 32 F3 4C     	LD (MUSIC_INIT_STATUS), A
1274  52DC
1275  52DC E1           	POP HL ; SFX
1276  52DD              	; check if SFX address -1
1277  52DD 23           	INC HL
1278  52DE 7D           	LD A, L
1279  52DF B4           	OR H
1280  52E0 28 09        	JR Z,.L1
1281  52E2 2B           	DEC HL
1282  52E3 CD 1B 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1283  52E6 3E 01        	LD A, 1
1284  52E8 32 F4 4C     	LD (SFX_INIT_STATUS), A
1285  52EB              .L1:
1286  52EB D1               POP DE
1287  52EC C1               POP BC
1288  52ED CD 31 4E         CALL RESTORE_PAGE_INFO
1289  52F0
1290  52F0 E1           	POP HL
1291  52F1 C9           	RET
1292  52F2              ; *******************************************************************************************************
1293  52F2
1294  52F2              ; *******************************************************************************************************
1295  52F2              ; function to handle CALL SNDPLYON basic extension
1296  52F2              ; enables sound player
1297  52F2              ; _SNDPLYON
1298  52F2              ; sets SOUND_ENABLED variable to 1 if init call was done
1299  52F2              ; if not throws out of data error
1300  52F2              SNDPLYON:
1301  52F2 3A F3 4C     	LD A, (MUSIC_INIT_STATUS)
1302  52F5 B7           	OR A
1303  52F6 20 05        	JR NZ, .L1
1304  52F8              	; player not initialized, throw error
1305  52F8 1E 04        	LD E, 04 ; Out of DATA
1306  52FA C3 2F 50     	JP THROW_ERROR
1307  52FD              .L1:
1308  52FD 32 F5 4C     	LD (SOUND_ENABLED), A
1309  5300              	; disable key click
1310  5300 AF           	XOR A
1311  5301 32 DB F3     	LD (CLIKSW), A
1312  5304 C9           	RET
1313  5305              ; *******************************************************************************************************
1314  5305
1315  5305              ; *******************************************************************************************************
1316  5305              ; function to handle CALL SNDPLYOFF basic extension
1317  5305              ; disables sound player
1318  5305              ; _SNDPLYOFF
1319  5305              ; sets SOUND_ENABLED variable to 0
1320  5305              ; calls AKG to stop music and SFX on all channels if initialized
1321  5305              SNDPLYOFF:
1322  5305 3A F5 4C     	LD A, (SOUND_ENABLED)
1323  5308 B7           	OR A
1324  5309 C8           	RET Z ; already stopped
1325  530A AF           	XOR A
1326  530B 32 F5 4C     	LD (SOUND_ENABLED), A
1327  530E E5           	PUSH HL
1328  530F CD 1F 42     	CALL PLY_AKG_STOP
1329  5312 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1330  5315 B7           	OR A
1331  5316 28 0E        	JR Z, .EXIT ; SFX not in use
1332  5318 AF           	XOR A
1333  5319 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1334  531C 3E 01        	LD A, 1
1335  531E CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1336  5321 3E 02        	LD A, 2
1337  5323 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1338  5326              .EXIT:
1339  5326 E1           	POP HL
1340  5327 C9           	RET
1341  5328              ; *******************************************************************************************************
1342  5328
1343  5328              ; *******************************************************************************************************
1344  5328              ; function to handle CALL SNDSFX basic extension
1345  5328              ; plays a sound effect
1346  5328              ; _SNDSFX ( BYTE sfx_number, >0
1347  5328              ;			BYTE channel, = 0,1 or 2
1348  5328              ;			BYTE inverted_volume = 0-16, 0 being full volume
1349  5328              ; will put ram in page 0 also, page 1 is already there
1350  5328              ; if sound off throws illegal function call
1351  5328              ; if sfx not initialized, throws out of data
1352  5328              SNDSFX:
1353  5328              	; opening (
1354  5328 CD 17 50     	CALL CHKCHAR
1355  532B 28           	DB '('
1356  532C              	; get sfx_number
1357  532C DD 21 1C 52  	LD IX, GETBYT
1358  5330 CD 59 01     	CALL CALBAS
1359  5333 D5           	PUSH DE
1360  5334              	; comma
1361  5334 CD 17 50     	CALL CHKCHAR
1362  5337 2C           	DB ','
1363  5338              	; get sfx address
1364  5338 DD 21 1C 52  	LD IX, GETBYT
1365  533C CD 59 01     	CALL CALBAS
1366  533F D5           	PUSH DE
1367  5340              	; comma
1368  5340 CD 17 50     	CALL CHKCHAR
1369  5343 2C           	DB ','
1370  5344              	; get inverted volume
1371  5344 DD 21 1C 52  	LD IX, GETBYT
1372  5348 CD 59 01     	CALL CALBAS
1373  534B D5           	PUSH DE
1374  534C              	; ending )
1375  534C CD 17 50     	CALL CHKCHAR
1376  534F 29           	DB ')'
1377  5350
1378  5350 3A F5 4C     	LD A, (SOUND_ENABLED)
1379  5353 B7           	OR A
1380  5354 20 05        	JR NZ, .L1
1381  5356              	; sound disabled, throw illegal function call
1382  5356 1E 05        	LD E, 5
1383  5358 C3 2F 50     	JP THROW_ERROR
1384  535B              .L1:
1385  535B 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1386  535E B7           	OR A
1387  535F 20 05        	JR NZ, .L2
1388  5361              	; sfx data not initialized, throw out of data
1389  5361 1E 04        	LD E, 4
1390  5363 C3 2F 50     	JP THROW_ERROR
1391  5366              .L2:
1392  5366              	; pop  parameters and store away for later
1393  5366 D1           	POP DE ; inverted volume
1394  5367 43           	LD B, E
1395  5368 D1           	POP DE ; channel
1396  5369 4B           	LD C, E
1397  536A D1           	POP DE
1398  536B 7B           	LD A, E
1399  536C 08           	EX AF, AF'
1400  536D E5           	PUSH HL ; basic text location
1401  536E D9           	EXX
1402  536F FD 21 76 53  	LD IY, .RET
1403  5373 C3 BA 4E     	JP ENABLE_PAGE0
1404  5376              .RET:
1405  5376 D9           	EXX
1406  5377 08           	EX AF, AF'
1407  5378 CD 1F 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1408  537B
1409  537B D1               POP DE
1410  537C C1               POP BC
1411  537D CD 31 4E         CALL RESTORE_PAGE_INFO
1412  5380
1413  5380 E1           	POP HL
1414  5381 C9           	RET
1415  5382              ; *******************************************************************************************************
1416  5382
1417  5382              ; *******************************************************************************************************
1418  5382              ; function to handle CALL SPRATRINI basic extension
1419  5382              ; initializes sprites handler
1420  5382              ; _SPRATRINI ( INT sprites_attributes_data,
1421  5382              ;			   INT update_variable_location )
1422  5382              ; expects both locations to be in range #8000+ or throws an error
1423  5382              ; since these should be BASIC variables
1424  5382              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA
1425  5382              SPRATRINI:
1426  5382              	; opening (
1427  5382 CD 17 50     	CALL CHKCHAR
1428  5385 28           	DB '('
1429  5386              	; get address of sprite attribute table DIM SA%(3,31)
1430  5386 DD 21 2F 54  	LD IX, FRMQNT
1431  538A CD 59 01     	CALL CALBAS
1432  538D D5           	PUSH DE
1433  538E              	; comma
1434  538E CD 17 50     	CALL CHKCHAR
1435  5391 2C           	DB ','
1436  5392              	; get update variable location SU%
1437  5392 DD 21 2F 54  	LD IX, FRMQNT
1438  5396 CD 59 01     	CALL CALBAS
1439  5399 D5           	PUSH DE
1440  539A              	; ending )
1441  539A CD 17 50     	CALL CHKCHAR
1442  539D 29           	DB ')'
1443  539E
1444  539E D1           	POP DE ; update variable location
1445  539F CB 7A        	BIT 7, D ; is address >= &h8000
1446  53A1 20 05        	JR NZ, .L1
1447  53A3 1E 05        	LD E, 5 ; illegal function call
1448  53A5 C3 2F 50     	JP THROW_ERROR
1449  53A8              .L1:
1450  53A8 ED 53 F7 4C  	LD (SPRATR_UPDATE_FLAG), DE
1451  53AC D1           	POP DE ; address of sprite attribute table
1452  53AD CB 7A        	BIT 7, D ; is address >= &h8000
1453  53AF 20 05        	JR NZ, .L2
1454  53B1 1E 05        	LD E, 5 ; illegal function call
1455  53B3 C3 2F 50     	JP THROW_ERROR
1456  53B6              .L2:
1457  53B6 ED 53 F9 4C  	LD (SPRATR_DATA), DE
1458  53BA 3E 01        	LD A, 1
1459  53BC 32 F6 4C     	LD (SPRATR_INIT_STATUS), A
1460  53BF C9           	RET
1461  53C0              ; *******************************************************************************************************
1462  53C0
1463  53C0              ; *******************************************************************************************************
1464  53C0              ; function to handle CALL SPRSET basic extension
1465  53C0              ; sets position, and optionally pattern and color of sprite
1466  53C0              ; _SPRSET ( BYTE sprite_num , valid 0-31
1467  53C0              ;			INT x,
1468  53C0              ;			INT y,
1469  53C0              ;			INT pattern, valid 0-31, otherwise ignored
1470  53C0              ;			INT color, valid 0-15, otherwise ignored
1471  53C0              SPRSET:
1472  53C0 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1473  53C3 B7           	OR A
1474  53C4 20 05        	JR NZ, .L1
1475  53C6 1E 05        	LD E, 5 ; illegal function call
1476  53C8 C3 2F 50     	JP THROW_ERROR
1477  53CB              .L1:
1478  53CB              	; opening (
1479  53CB CD 17 50     	CALL CHKCHAR
1480  53CE 28           	DB '('
1481  53CF              	; get sprite number
1482  53CF DD 21 1C 52  	LD IX, GETBYT
1483  53D3 CD 59 01     	CALL CALBAS
1484  53D6 F5           	PUSH AF
1485  53D7              	; comma
1486  53D7 CD 17 50     	CALL CHKCHAR
1487  53DA 2C           	DB ','
1488  53DB              	; get x
1489  53DB DD 21 2F 54  	LD IX, FRMQNT
1490  53DF CD 59 01     	CALL CALBAS
1491  53E2 D5           	PUSH DE
1492  53E3              	; comma
1493  53E3 CD 17 50     	CALL CHKCHAR
1494  53E6 2C           	DB ','
1495  53E7              	; get y
1496  53E7 DD 21 2F 54  	LD IX, FRMQNT
1497  53EB CD 59 01     	CALL CALBAS
1498  53EE D5           	PUSH DE
1499  53EF              	; comma
1500  53EF CD 17 50     	CALL CHKCHAR
1501  53F2 2C           	DB ','
1502  53F3              	; get pattern
1503  53F3 DD 21 2F 54  	LD IX, FRMQNT
1504  53F7 CD 59 01     	CALL CALBAS
1505  53FA D5           	PUSH DE
1506  53FB              	; comma
1507  53FB CD 17 50     	CALL CHKCHAR
1508  53FE 2C           	DB ','
1509  53FF              	; get color
1510  53FF DD 21 2F 54  	LD IX, FRMQNT
1511  5403 CD 59 01     	CALL CALBAS
1512  5406 D5           	PUSH DE
1513  5407              	; ending )
1514  5407 CD 17 50     	CALL CHKCHAR
1515  540A 29           	DB ')'
1516  540B
1517  540B                  ; save position in BASIC text
1518  540B E5           	PUSH HL
1519  540C DD E1        	POP IX
1520  540E
1521  540E C1           	POP BC ; color
1522  540F D1           	POP DE ; pattern
1523  5410 D9           	EXX
1524  5411 C1           	POP BC ; y
1525  5412 D1           	POP DE ; x
1526  5413 F1           	POP AF ; sprite number
1527  5414 FE 20        	CP 32
1528  5416 38 05        	JR C, .L2
1529  5418 1E 05        	LD E, 5 ; illegal function call
1530  541A C3 2F 50     	JP THROW_ERROR
1531  541D              .L2:
1532  541D              	; find location in sprite attributes table
1533  541D 87          > ADD A, A
1533  541E 87          > ADD A, A
1533  541F 87          > ADD A, A
1534  5420 D5           	PUSH DE
1535  5421 16 00        	LD D, 0
1536  5423 5F           	LD E, A
1537  5424 2A F9 4C     	LD HL, (SPRATR_DATA)
1538  5427 19           	ADD HL, DE
1539  5428 D1           	POP DE
1540  5429              	; set y
1541  5429 71           	LD (HL), C
1542  542A 23           	INC HL
1543  542B 70           	LD (HL), B
1544  542C 23           	INC HL
1545  542D              	; set x
1546  542D 73           	LD (HL), E
1547  542E 23           	INC HL
1548  542F 72           	LD (HL), D
1549  5430 23           	INC HL
1550  5431 E5           	PUSH HL
1551  5432 D9           	EXX
1552  5433 E1           	POP HL
1553  5434              	; check if 0<=pattern<32
1554  5434 7A           	LD A, D
1555  5435 B7           	OR A
1556  5436 20 0B        	JR NZ, .L3
1557  5438 7D           	LD A, L
1558  5439 FE 20        	CP 32
1559  543B 30 06        	JR NC, .L3
1560  543D              	; set pattern
1561  543D 73           	LD (HL), E
1562  543E 23           	INC HL
1563  543F 72           	LD (HL), D
1564  5440 23           	INC HL
1565  5441 18 02        	JR .L4
1566  5443              .L3:
1567  5443              	; skip pattern
1568  5443 23          > INC HL
1568  5444 23          > INC HL
1569  5445              .L4:
1570  5445              	; check if 0<=color<16
1571  5445 78           	LD A, B
1572  5446 B7           	OR A
1573  5447 20 08        	JR NZ, .L5
1574  5449 79           	LD A, C
1575  544A FE 10        	CP 16
1576  544C 30 03        	JR NC, .L5
1577  544E              	; set color
1578  544E 71           	LD (HL), C
1579  544F 23           	INC HL
1580  5450 70           	LD (HL), B
1581  5451
1582  5451              .L5:
1583  5451 DD E5        	PUSH IX
1584  5453 E1           	POP HL
1585  5454 C9           	RET
1586  5455              ; *******************************************************************************************************
1587  5455
1588  5455              ; *******************************************************************************************************
1589  5455              ; function sets sprite location based on initial coordinates and offset provided
1590  5455              ; input A=sprite number in SPRATR_DATA , 0-31
1591  5455              ; input DE=initial x
1592  5455              ; input BC=initial y
1593  5455              ; input IY=location where delta y,x are located
1594  5455              ; modifies AF, HL, IX
1595  5455              SPRSET_DELTA_POS:
1596  5455 87          > ADD A, A
1596  5456 87          > ADD A, A
1596  5457 87          > ADD A, A
1597  5458 D5           	PUSH DE
1598  5459 16 00        	LD D, 0
1599  545B 5F           	LD E, A
1600  545C DD 2A F9 4C  	LD IX, (SPRATR_DATA)
1601  5460 DD 19        	ADD IX, DE
1602  5462 D1           	POP DE
1603  5463              	; IX=sprite's y location
1604  5463 FD 6E 00     	LD L, (IY)
1605  5466 FD 66 01     	LD H, (IY+1)
1606  5469 09           	ADD HL, BC
1607  546A DD 75 00     	LD (IX), L
1608  546D DD 74 01     	LD (IX+1), H
1609  5470 FD 6E 02     	LD L, (IY+2)
1610  5473 FD 66 03     	LD H, (IY+3)
1611  5476 19           	ADD HL, DE
1612  5477 DD 75 02     	LD (IX+2), L
1613  547A DD 74 03     	LD (IX+3), H
1614  547D C9           	RET
1615  547E              ; *******************************************************************************************************
1616  547E
1617  547E              ; *******************************************************************************************************
1618  547E              ; function to handle CALL SPRGRPMOV basic extension
1619  547E              ; sets position of a group of sprites described with
1620  547E              ; { int sprite_num, int delta_y, int delta_x } [count]
1621  547E              ; _SPRGRPMOV ( INT x,
1622  547E              ;			   INT y,
1623  547E              ;			   INT data_ptr,
1624  547E              ;			   BYTE count,
1625  547E              ; will put ram in page 0 also, page 1 is already there
1626  547E              SPRGRPMOV:
1627  547E 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
1628  5481 B7           	OR A
1629  5482 20 05        	JR NZ, .L1
1630  5484 1E 05        	LD E, 5 ; illegal function call
1631  5486 C3 2F 50     	JP THROW_ERROR
1632  5489              .L1:
1633  5489              	; opening (
1634  5489 CD 17 50     	CALL CHKCHAR
1635  548C 28           	DB '('
1636  548D              	; get x
1637  548D DD 21 2F 54  	LD IX, FRMQNT
1638  5491 CD 59 01     	CALL CALBAS
1639  5494 D5           	PUSH DE
1640  5495              	; comma
1641  5495 CD 17 50     	CALL CHKCHAR
1642  5498 2C           	DB ','
1643  5499              	; get y
1644  5499 DD 21 2F 54  	LD IX, FRMQNT
1645  549D CD 59 01     	CALL CALBAS
1646  54A0 D5           	PUSH DE
1647  54A1              	; comma
1648  54A1 CD 17 50     	CALL CHKCHAR
1649  54A4 2C           	DB ','
1650  54A5              	; get data pointer
1651  54A5 DD 21 2F 54  	LD IX, FRMQNT
1652  54A9 CD 59 01     	CALL CALBAS
1653  54AC D5           	PUSH DE
1654  54AD              	; comma
1655  54AD CD 17 50     	CALL CHKCHAR
1656  54B0 2C           	DB ','
1657  54B1              	; get count
1658  54B1 DD 21 1C 52  	LD IX, GETBYT
1659  54B5 CD 59 01     	CALL CALBAS
1660  54B8 F5           	PUSH AF
1661  54B9              	; ending )
1662  54B9 CD 17 50     	CALL CHKCHAR
1663  54BC 29           	DB ')'
1664  54BD
1665  54BD E5           	PUSH HL
1666  54BE DD E1        	POP IX
1667  54C0
1668  54C0 C1           	POP BC ; count
1669  54C1 E1           	POP HL ; data pointer
1670  54C2 D9           	EXX
1671  54C3 C1           	POP BC ; y
1672  54C4 D1           	POP DE ; x
1673  54C5 D9           	EXX
1674  54C6
1675  54C6 DD E5        	PUSH IX ; save position in BASIC buffer
1676  54C8
1677  54C8 C5           	PUSH BC
1678  54C9 E5           	PUSH HL
1679  54CA AF               XOR A
1680  54CB CD FA 4D         CALL GET_PAGE_INFO
1681  54CE D9           	EXX
1682  54CF E1           	POP HL
1683  54D0 F1           	POP AF
1684  54D1 D9           	EXX
1685  54D2 C5               PUSH BC
1686  54D3 D5               PUSH DE
1687  54D4 D9           	EXX
1688  54D5 F5           	PUSH AF
1689  54D6 E5           	PUSH HL
1690  54D7 D9           	EXX
1691  54D8 3A 41 F3         LD A, (RAMAD0)
1692  54DB 26 00            LD H, 0
1693  54DD CD 41 4E         CALL LOCAL_ENASLT
1694  54E0 FB           	EI
1695  54E1 E1           	POP HL
1696  54E2 C1           	POP BC
1697  54E3 CD ED 54     	CALL .UPDATE_LOC
1698  54E6 D1               POP DE
1699  54E7 C1               POP BC
1700  54E8 CD 31 4E         CALL RESTORE_PAGE_INFO
1701  54EB E1           	POP HL
1702  54EC C9           	RET
1703  54ED
1704  54ED              .UPDATE_LOC:
1705  54ED              .L4:
1706  54ED 7E           	LD A, (HL)
1707  54EE 23           	INC HL
1708  54EF 23           	INC HL
1709  54F0 E5           	PUSH HL
1710  54F1 FD E1        	POP IY
1711  54F3 D9           	EXX
1712  54F4 CD 55 54     	CALL SPRSET_DELTA_POS
1713  54F7 D9           	EXX
1714  54F8 23          > INC HL
1714  54F9 23          > INC HL
1714  54FA 23          > INC HL
1714  54FB 23          > INC HL
1715  54FC 10 EF        	DJNZ .L4
1716  54FE C9           	RET
1717  54FF              ; *******************************************************************************************************
1718  54FF
1719  54FF              ; *******************************************************************************************************
1720  54FF              ; function rotates mask and data of several characters and applies to background data
1721  54FF              ; this handles x-shift from 0 to 4
1722  54FF              ; contains self-modifying code that is set-up from external function
1723  54FF              ; input HL=pointer to mask data
1724  54FF              ; input HL'=pointer to character data
1725  54FF              ; input DE=output buffer containing background data
1726  54FF              ; input BC=DE+8
1727  54FF              ; input A=number of characters to process
1728  54FF              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1729  54FF              SHIFT04:
1730  54FF 08           	EX AF, AF'
1731  5500 7E           	LD A, (HL) ; get mask
1732  5501 D9           	EXX
1733  5502 57           	LD D, A
1734  5503 1E FF        	LD E, #FF
1735  5505 37           	SCF
1736  5506              .M1:
1737  5506 18 FE        	JR .M1 ; this is self-modifying part
1738  5508 CB 1A        	RR D
1739  550A CB 1B        	RR E
1740  550C CB 1A        	RR D
1741  550E CB 1B        	RR E
1742  5510 CB 1A        	RR D
1743  5512 CB 1B        	RR E
1744  5514 CB 1A        	RR D
1745  5516 CB 1B        	RR E
1746  5518
1747  5518 46           	LD B, (HL)
1748  5519 0E 00        	LD C, 0
1749  551B              .M2:
1750  551B 18 FE        	JR .M2 ; also self-modifying part
1751  551D CB 38        	SRL B
1752  551F CB 19        	RR C
1753  5521 CB 38        	SRL B
1754  5523 CB 19        	RR C
1755  5525 CB 38        	SRL B
1756  5527 CB 19        	RR C
1757  5529 CB 38        	SRL B
1758  552B CB 19        	RR C
1759  552D
1760  552D D9           	EXX
1761  552E 1A           	LD A, (DE) ; background
1762  552F D9           	EXX
1763  5530 A2           	AND D
1764  5531 B0           	OR B
1765  5532 D9           	EXX
1766  5533 12           	LD (DE), A
1767  5534
1768  5534 0A           	LD A, (BC)
1769  5535 D9           	EXX
1770  5536 A3           	AND E
1771  5537 B1           	OR C
1772  5538 23           	INC HL
1773  5539 D9           	EXX
1774  553A 02           	LD (BC), A
1775  553B
1776  553B 23           	INC HL
1777  553C 13           	INC DE
1778  553D 03           	INC BC
1779  553E
1780  553E 08           	EX AF, AF'
1781  553F 3D           	DEC A
1782  5540 C2 FF 54     	JP NZ, SHIFT04
1783  5543 C9           	RET
1784  5544              ; *******************************************************************************************************
1785  5544
1786  5544              ; *******************************************************************************************************
1787  5544              ; function rotates mask and data of several characters and applies to background data
1788  5544              ; this handles x-shift from 5 to 8
1789  5544              ; contains self-modifying code that is set-up from external function
1790  5544              ; input HL=pointer to mask data
1791  5544              ; input HL'=pointer to character data
1792  5544              ; input DE=output buffer containing background data
1793  5544              ; input BC=DE+8
1794  5544              ; input A=number of characters to process
1795  5544              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1796  5544              SHIFT58:
1797  5544 08           	EX AF, AF'
1798  5545 7E           	LD A, (HL) ; get mask
1799  5546 D9           	EXX
1800  5547 57           	LD D, A
1801  5548 1E FF        	LD E, #FF
1802  554A 37           	SCF
1803  554B              .M1:
1804  554B 18 FE        	JR .M1 ; this is self-modifying part
1805  554D CB 12        	RL D
1806  554F CB 13        	RL E
1807  5551 CB 12        	RL D
1808  5553 CB 13        	RL E
1809  5555 CB 12        	RL D
1810  5557 CB 13        	RL E
1811  5559
1812  5559 46           	LD B, (HL)
1813  555A 0E 00        	LD C, 0
1814  555C              .M2:
1815  555C 18 FE        	JR .M2 ; also self-modifying part
1816  555E CB 20        	SLA B
1817  5560 CB 11        	RL C
1818  5562 CB 20        	SLA B
1819  5564 CB 11        	RL C
1820  5566 CB 20        	SLA B
1821  5568 CB 11        	RL C
1822  556A
1823  556A D9           	EXX
1824  556B 1A           	LD A, (DE) ; background
1825  556C D9           	EXX
1826  556D A3           	AND E
1827  556E B1           	OR C
1828  556F D9           	EXX
1829  5570 12           	LD (DE), A
1830  5571
1831  5571 0A           	LD A, (BC)
1832  5572 D9           	EXX
1833  5573 A2           	AND D
1834  5574 B0           	OR B
1835  5575 23           	INC HL
1836  5576 D9           	EXX
1837  5577 02           	LD (BC), A
1838  5578
1839  5578 23           	INC HL
1840  5579 13           	INC DE
1841  557A 03           	INC BC
1842  557B
1843  557B 08           	EX AF, AF'
1844  557C 3D           	DEC A
1845  557D C2 44 55     	JP NZ, SHIFT58
1846  5580 C9           	RET
1847  5581              ; *******************************************************************************************************
1848  5581
1849  5581              ; *******************************************************************************************************
1850  5581              ; routine that shifts one row of characters
1851  5581              ; contains self-modifying code that is set-up from external function
1852  5581              ; input HL=pointer to mask data
1853  5581              ; input HL'=pointer to character data
1854  5581              ; input DE=output buffer containing background data
1855  5581              ; input A=number of characters to process
1856  5581              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1857  5581              SHIFT_ROW:
1858  5581 F5           	PUSH AF
1859  5582 ED 53 FE 4C  		LD (BLIT_TMP1), DE
1860  5586 E5           		PUSH HL
1861  5587 CD C6 55     			CALL .ADDYSHIFT
1862  558A E1           		POP HL
1863  558B ED 53 00 4D  		LD (BLIT_TMP2), DE ; DE+vertical shift
1864  558F              .L1:
1865  558F 3E 08        		LD A, 8
1866  5591 DD 96 02     		SUB (IX+2) ; y shift
1867  5594              .CALL1:
1868  5594 CD 00 00     		CALL 0
1869  5597 DD 7E 02     		LD A, (IX+2); y shift
1870  559A B7           		OR A
1871  559B 28 22        		JR Z, .DONE
1872  559D ED 5B FE 4C  		LD DE, (BLIT_TMP1)
1873  55A1 E5           		PUSH HL
1874  55A2 CD D4 55     			CALL .DETONEXTROW
1875  55A5 E1           		POP HL
1876  55A6              .CALL2:
1877  55A6 CD 00 00     		CALL 0
1878  55A9 ED 5B FE 4C  		LD DE, (BLIT_TMP1)
1879  55AD E5           		PUSH HL
1880  55AE CD CE 55     			CALL .ADD8
1881  55B1 E1           		POP HL
1882  55B2 ED 53 FE 4C  		LD (BLIT_TMP1), DE
1883  55B6 ED 5B 00 4D  		LD DE, (BLIT_TMP2)
1884  55BA E5           		PUSH HL
1885  55BB CD CE 55     			CALL .ADD8
1886  55BE E1           		POP HL
1887  55BF              .DONE:
1888  55BF F1           	POP AF
1889  55C0 3D           	DEC A
1890  55C1 C8           	RET Z
1891  55C2 F5           	PUSH AF
1892  55C3 C3 8F 55     	JP .L1
1893  55C6              .ADDYSHIFT:
1894  55C6 EB           	EX DE, HL
1895  55C7 16 00        	LD D, 0
1896  55C9 DD 5E 02     	LD E, (IX+2); y shift
1897  55CC 18 0C        	JR .MOVDEBC
1898  55CE              .ADD8:
1899  55CE 21 08 00     	LD HL, 8
1900  55D1 C3 DA 55     	JP .MOVDEBC
1901  55D4              .DETONEXTROW:
1902  55D4 DD 6E 06     	LD L, (IX+6)
1903  55D7 DD 66 07     	LD H, (IX+7) ; bkg add to value
1904  55DA              .MOVDEBC:
1905  55DA 19           	ADD HL, DE
1906  55DB 54           	LD D, H
1907  55DC 5D           	LD E, L
1908  55DD 01 08 00     	LD BC, 8
1909  55E0 09           	ADD HL, BC
1910  55E1 44           	LD B, H
1911  55E2 4D           	LD C, L
1912  55E3 C9           	RET
1913  55E4              ; *******************************************************************************************************
1914  55E4
1915  55E4              ; *******************************************************************************************************
1916  55E4              ; function rotates mask and character data and applies it to background
1917  55E4              ; input IX=pointer to structure describing input data
1918  55E4              ; +0  DW horizontal shift count 0-7
1919  55E4              ; +2  DW vertical shift count 0-7
1920  55E4              ; +4  DW background data start;
1921  55E4              ; +6  DW background add to value to next row of background data
1922  55E4              ; +8  DW mask data start;
1923  55E4              ; +10  DW character data start;
1924  55E4              ; +12 DW character&mask add to value to next row of data
1925  55E4              ; +14 DW columns (low byte used)
1926  55E4              ; +16 DW rows (low byte used)
1927  55E4              SHIFT_MERGE_CHARACTER:
1928  55E4 DD 7E 00     	LD A, (IX) ; shift
1929  55E7 FE 05        	CP 5
1930  55E9 38 25        	JR C, .RIGHT
1931  55EB              	; shifts 5-7, use rotate towards left 1-3
1932  55EB 21 44 55     	LD HL, SHIFT58
1933  55EE 22 95 55     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1934  55F1 22 A7 55     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1935  55F4 D6 05        	SUB 5
1936  55F6 28 0D        	JR Z, .L1
1937  55F8 87           	ADD A, A
1938  55F9 87           	ADD A, A
1939  55FA 67           	LD H, A
1940  55FB 2E 18        	LD L, #18 ; JR opcode
1941  55FD 22 4B 55     	LD (SHIFT58.M1), HL
1942  5600 22 5C 55     	LD (SHIFT58.M2), HL
1943  5603 18 32        	JR .DO
1944  5605              .L1:
1945  5605 21 00 00     	LD HL, 0 ; 2xNOP opcode
1946  5608 22 4B 55     	LD (SHIFT58.M1), HL
1947  560B 22 5C 55     	LD (SHIFT58.M2), HL
1948  560E 18 27        	JR .DO
1949  5610              .RIGHT:
1950  5610              	; shifts 0-4, rotate towards right
1951  5610 21 FF 54     	LD HL, SHIFT04
1952  5613 22 95 55     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1953  5616 22 A7 55     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1954  5619 FE 04        	CP 4
1955  561B 28 11        	JR Z, .R1
1956  561D D6 04        	SUB 4
1957  561F ED 44        	NEG
1958  5621 87           	ADD A, A
1959  5622 87           	ADD A, A
1960  5623 67           	LD H, A
1961  5624 2E 18        	LD L, #18 ; JR opcode
1962  5626 22 06 55     	LD (SHIFT04.M1), HL
1963  5629 22 1B 55     	LD (SHIFT04.M2), HL
1964  562C 18 09        	JR .DO
1965  562E              .R1:
1966  562E 21 00 00     	LD HL, 0 ; 2xNOP opcode
1967  5631 22 06 55     	LD (SHIFT04.M1), HL
1968  5634 22 1B 55     	LD (SHIFT04.M2), HL
1969  5637              .DO:
1970  5637 DD 46 10     	LD B, (IX+16) ; rows
1971  563A DD 6E 08     	LD L, (IX+8)
1972  563D DD 66 09     	LD H, (IX+9) ; mask data
1973  5640 DD 5E 04     	LD E, (IX+4)
1974  5643 DD 56 05     	LD D, (IX+5) ; background data
1975  5646 D9           	EXX
1976  5647 DD 6E 0A     	LD L, (IX+10)
1977  564A DD 66 0B     	LD H, (IX+11) ; character data
1978  564D D9           	EXX
1979  564E              .LOOP:
1980  564E C5           	PUSH BC
1981  564F E5           		PUSH HL
1982  5650 D5           			PUSH DE
1983  5651 D9           				EXX
1984  5652 E5           				PUSH HL
1985  5653 D9           					EXX
1986  5654 DD 7E 0E     					LD A, (IX+14) ; columns
1987  5657              .CALL:
1988  5657 CD 81 55     					CALL SHIFT_ROW
1989  565A E1           				POP HL
1990  565B DD 5E 0C     				LD E, (IX+12)
1991  565E DD 56 0D     				LD D, (IX+13) ; char data to next row
1992  5661 19           				ADD HL, DE
1993  5662 D9           				EXX
1994  5663 E1           			POP HL
1995  5664 DD 5E 06     			LD E, (IX+6)
1996  5667 DD 56 07     			LD D, (IX+7) ; background to next row
1997  566A 19           			ADD HL, DE
1998  566B EB           			EX DE, HL
1999  566C E1           		POP HL
2000  566D DD 4E 0C     		LD C, (IX+12)
2001  5670 DD 46 0D     		LD B, (IX+13) ; char data to next row
2002  5673 09           		ADD HL, BC
2003  5674 C1           	POP BC
2004  5675 10 D7        	DJNZ .LOOP
2005  5677 C9           	RET
2006  5678              ; *******************************************************************************************************
2007  5678
2008  5678              ; *******************************************************************************************************
2009  5678              ; function to handle CALL BLIT basic extension
2010  5678              ; rotates 1-bit character drawing horizontally with mask and character data and
2011  5678              ; fuses with background data and applies vertical shift too
2012  5678              ; BLIT ( INT request_data_ptr )
2013  5678              ; request_data_ptr described in SHIFT_MERGE_CHARACTER
2014  5678              ; will put ram in page 0 also, page 1 is already there
2015  5678              BLIT:
2016  5678              	; opening (
2017  5678 CD 17 50     	CALL CHKCHAR
2018  567B 28           	DB '('
2019  567C              	; get pointer to request struct
2020  567C DD 21 2F 54  	LD IX, FRMQNT
2021  5680 CD 59 01     	CALL CALBAS
2022  5683 D5           	PUSH DE
2023  5684              	; ending )
2024  5684 CD 17 50     	CALL CHKCHAR
2025  5687 29           	DB ')'
2026  5688
2027  5688 DD E1        	POP IX ; pointer to request struct
2028  568A
2029  568A E5           	PUSH HL ; save position in BASIC buffer
2030  568B
2031  568B FD 21 92 56  	LD IY, .RET
2032  568F C3 BA 4E     	JP ENABLE_PAGE0
2033  5692              .RET:
2034  5692 FB           	EI
2035  5693 CD E4 55     	CALL SHIFT_MERGE_CHARACTER
2036  5696
2037  5696 D1               POP DE
2038  5697 C1               POP BC
2039  5698 CD 31 4E         CALL RESTORE_PAGE_INFO
2040  569B
2041  569B E1           	POP HL
2042  569C C9           	RET
2043  569D              ; *******************************************************************************************************
2044  569D
2045  569D              ; *******************************************************************************************************
2046  569D              ; generic function to implement tiling
2047  569D              ; should be modified to call appropriate function for memory or vram
2048  569D              ; input IX=pointer to following structure
2049  569D              ; +00 tile_data_ptr
2050  569D              ; +02 tile_rows
2051  569D              ; +04 tile_columns
2052  569D              ; +06 destination_address
2053  569D              ; +08 dest_to_next_row_add_to_value
2054  569D              ; +10 num_horizontal_tiles
2055  569D              ; +12 num_vertical_tiles
2056  569D              ; modifies AF, BC, DE, HL
2057  569D              TILE:
2058  569D DD 6E 06     	LD L, (IX+6)
2059  56A0 DD 66 07     	LD H, (IX+7) ; destination address
2060  56A3 22 FE 4C     	LD (TILETMP1), HL
2061  56A6 DD 46 0C     	LD B, (IX+12) ; vertical tile number
2062  56A9              .L1:
2063  56A9 C5           	PUSH BC
2064  56AA DD 6E 00     		LD L, (IX+0)
2065  56AD DD 66 01     		LD H, (IX+1) ; tile address
2066  56B0 22 00 4D     		LD (TILETMP2), HL
2067  56B3 DD 46 02     		LD B, (IX+2) ; tile rows
2068  56B6              .L2:
2069  56B6 C5           		PUSH BC
2070  56B7              .CALL1:
2071  56B7 CD 00 00     			CALL 0
2072  56BA DD 46 0A     			LD B, (IX+10) ; horizontal tile num
2073  56BD              .L3:
2074  56BD C5           			PUSH BC
2075  56BE 2A 00 4D     				LD HL, (TILETMP2)
2076  56C1 DD 46 04     				LD B, (IX+4) ; tile columns
2077  56C4              .L4:
2078  56C4 C5           				PUSH BC
2079  56C5              .CALL2:
2080  56C5 CD 00 00     					CALL 0
2081  56C8 C1           				POP BC
2082  56C9 10 F9        				DJNZ .L4
2083  56CB C1           			POP BC
2084  56CC 10 EF        			DJNZ .L3
2085  56CE 22 00 4D     			LD (TILETMP2), HL
2086  56D1 2A FE 4C     			LD HL, (TILETMP1)
2087  56D4 DD 5E 08     			LD E, (IX+8)
2088  56D7 DD 56 09     			LD D, (IX+9) ; add to value for dest next row
2089  56DA 19           			ADD HL, DE
2090  56DB 22 FE 4C     			LD (TILETMP1), HL
2091  56DE C1           		POP BC
2092  56DF 10 D5        		DJNZ .L2
2093  56E1 C1           	POP BC
2094  56E2 10 C5        	DJNZ .L1
2095  56E4 C9           	RET
2096  56E5              ; *******************************************************************************************************
2097  56E5
2098  56E5              ; *******************************************************************************************************
2099  56E5              ; function to handle CALL TILERAM basic extension
2100  56E5              ; rotates 1-bit character drawing horizontally with mask and character data and
2101  56E5              ; fuses with background data and applies vertical shift too
2102  56E5              ; TILERAM ( INT request_data_ptr )
2103  56E5              ; request_data_ptr described in TILE
2104  56E5              ; will put ram in page 0 also, page 1 is already there
2105  56E5              TILERAM:
2106  56E5              	; opening (
2107  56E5 CD 17 50     	CALL CHKCHAR
2108  56E8 28           	DB '('
2109  56E9              	; get pointer to request struct
2110  56E9 DD 21 2F 54  	LD IX, FRMQNT
2111  56ED CD 59 01     	CALL CALBAS
2112  56F0 D5           	PUSH DE
2113  56F1              	; ending )
2114  56F1 CD 17 50     	CALL CHKCHAR
2115  56F4 29           	DB ')'
2116  56F5
2117  56F5 DD E1        	POP IX ; pointer to request struct
2118  56F7
2119  56F7 E5           	PUSH HL ; save position in BASIC buffer
2120  56F8
2121  56F8 FD 21 FF 56  	LD IY, .RET
2122  56FC C3 BA 4E     	JP ENABLE_PAGE0
2123  56FF              .RET:
2124  56FF FB           	EI
2125  5700              	; set RAM functions to call
2126  5700 21 16 57     	LD HL, .TILECOPY
2127  5703 22 C6 56     	LD (TILE.CALL2+1), HL
2128  5706 21 27 57     	LD HL, .SETDESTROW
2129  5709 22 B8 56     	LD (TILE.CALL1+1), HL
2130  570C CD 9D 56     	CALL TILE
2131  570F
2132  570F D1               POP DE
2133  5710 C1               POP BC
2134  5711 CD 31 4E         CALL RESTORE_PAGE_INFO
2135  5714
2136  5714 E1           	POP HL
2137  5715 C9           	RET
2138  5716              .TILECOPY:
2139  5716 ED A0       > LDI
2139  5718 ED A0       > LDI
2139  571A ED A0       > LDI
2139  571C ED A0       > LDI
2139  571E ED A0       > LDI
2139  5720 ED A0       > LDI
2139  5722 ED A0       > LDI
2139  5724 ED A0       > LDI
2140  5726 C9           	RET
2141  5727              .SETDESTROW:
2142  5727 ED 5B FE 4C  	LD DE, (TILETMP1)
2143  572B C9           	RET
2144  572C              ; *******************************************************************************************************
2145  572C
2146  572C              ; *******************************************************************************************************
2147  572C              ; function to handle CALL TILEVRM basic extension
2148  572C              ; rotates 1-bit character drawing horizontally with mask and character data and
2149  572C              ; fuses with background data and applies vertical shift too
2150  572C              ; TILEVRM ( INT request_data_ptr )
2151  572C              ; request_data_ptr described in TILE
2152  572C              ; will put ram in page 0 also, page 1 is already there
2153  572C              TILEVRM:
2154  572C              	; opening (
2155  572C CD 17 50     	CALL CHKCHAR
2156  572F 28           	DB '('
2157  5730              	; get pointer to request struct
2158  5730 DD 21 2F 54  	LD IX, FRMQNT
2159  5734 CD 59 01     	CALL CALBAS
2160  5737 D5           	PUSH DE
2161  5738              	; ending )
2162  5738 CD 17 50     	CALL CHKCHAR
2163  573B 29           	DB ')'
2164  573C
2165  573C DD E1        	POP IX ; pointer to request struct
2166  573E
2167  573E E5           	PUSH HL ; save position in BASIC buffer
2168  573F
2169  573F FD 21 46 57  	LD IY, .RET
2170  5743 C3 BA 4E     	JP ENABLE_PAGE0
2171  5746              .RET:
2172  5746 FB           	EI
2173  5747              	; set RAM functions to call
2174  5747 21 5D 57     	LD HL, .TILECOPY
2175  574A 22 C6 56     	LD (TILE.CALL2+1), HL
2176  574D 21 63 57     	LD HL, .SETDESTROW
2177  5750 22 B8 56     	LD (TILE.CALL1+1), HL
2178  5753 CD 9D 56     	CALL TILE
2179  5756
2180  5756 D1               POP DE
2181  5757 C1               POP BC
2182  5758 CD 31 4E         CALL RESTORE_PAGE_INFO
2183  575B
2184  575B E1           	POP HL
2185  575C C9           	RET
2186  575D              .TILECOPY:
2187  575D 01 98 08     	LD BC, #0898
2188  5760 C3 EA 51     	JP MEMVRM.BBYTECOPY
2189  5763              .SETDESTROW:
2190  5763 2A FE 4C     	LD HL, (TILETMP1)
2191  5766 C3 EF 4D     	JP SETWRT_LOCAL
2192  5769              ; *******************************************************************************************************
2193  5769
2194  5769
2195  5769              EXT_END:
2196  5769
# file closed: asm\main.asm
