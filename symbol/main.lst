# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; control variables to include/exclude parts of code
   4  4000              SOUND_CMDS	 	EQU 1
   5  4000              RAM_CMDS 		EQU 1
   6  4000              VRAM_CMDS 		EQU 1
   7  4000              BLIT_CMDS		EQU 1
   8  4000              SPRITE_CMDS 	EQU 1
   9  4000              GENCAL_CMD		EQU 1
  10  4000              TILE_CMDS		EQU 1
  11  4000              BOX_CMDS		EQU 1
  12  4000              ANIM_CMDS		EQU 1
  13  4000
  14  4000               DEFINE CMDS_WITH_PARAMETERS
  15  4000
  16  4000              CHPUT   EQU     #A2
  17  4000              CALBAS	EQU		#159
  18  4000              ERRHAND EQU     #406F
  19  4000              FRMEVL  EQU     #4C64
  20  4000              FRESTR	EQU		#67D0
  21  4000              ; FRMQNT = formula quantificator
  22  4000              ; input HL=pointer to current program expression
  23  4000              ; output HL=next address
  24  4000              ; output DE=integer datum
  25  4000              FRMQNT	EQU		#542F
  26  4000              ; GETBYT = get byte parameter
  27  4000              ; input HL=pointer to current program expression
  28  4000              ; output HL=next address
  29  4000              ; output A=E=byte read
  30  4000              GETBYT		EQU		#521C
  31  4000              CHRGTR  	EQU     #4666
  32  4000              PTRGET		EQU 	#5EA4
  33  4000              SUBFLG		EQU		#F6A5
  34  4000              SYNCHR		EQU		#558C
  35  4000              VALTYP  	EQU     #F663
  36  4000              USR     	EQU     #F7F8
  37  4000              PROCNM		EQU		#FD89
  38  4000              BIOS_FILVRM EQU     #0056
  39  4000              CLIKSW		EQU		#F3DB
  40  4000              ATRBAS		EQU		#F928
  41  4000              GRPCGP		EQU		#F3CB
  42  4000
  43  4000              RAMAD0	EQU	#F341	; Main-RAM Slot (00000h~03FFFh)
  44  4000              RAMAD1	EQU	#F342	; Main-RAM Slot (04000h~07FFFh)
  45  4000              RAMAD2	EQU	#F343	; Main-RAM Slot (08000h~0BFFFh)
  46  4000              RAMAD3	EQU	#F344	; Main-RAM Slot (0C000h~0FFFFh)
  47  4000              EXPTBL	EQU #FCC1
  48  4000              SCRMOD	EQU #FCAF ; current screen mode
  49  4000              REG1SAV EQU #F3E0 ; VDP(1)
  50  4000              JIFFY	EQU #FC9E
  51  4000              GRPPAT	EQU #F3CF ; SCREEN 2 sprite generator table address
  52  4000              T32PAT	EQU #F3C5 ; SCREEN 1 sprite generator table address
  53  4000              PATBAS  EQU #F926 ; current sprite generator table address
  54  4000
  55  4000              ; BASIC error codes
  56  4000              ;01 NEXT without FOR
  57  4000              ;02 Syntax error
  58  4000              ;03 RETURN without GOSUB
  59  4000              ;04 Out of DATA
  60  4000              ;05 Illegal function call
  61  4000              ;06 Overflow
  62  4000              ;07 Out of memory
  63  4000              ;08 Undefined line number
  64  4000              ;09 Subscript out of range
  65  4000              ;10 Redimensioned array
  66  4000              ;11 Division by zero
  67  4000              ;12 Illegal direct
  68  4000              ;13 Type mismatch
  69  4000              ;14 Out of string space
  70  4000              ;15 String too long
  71  4000              ;16 String formula too complex
  72  4000              ;17 Can't CONTINUE
  73  4000              ;18 Undefined user function
  74  4000              ;19 Device I/O error
  75  4000              ;20 Verify error
  76  4000              ;21 No RESUME
  77  4000              ;22 RESUME without error
  78  4000              ;23 Unprintable error
  79  4000              ;24 Missing operand
  80  4000              ;25 Line buffer overflow
  81  4000              ;50 FIELD overflow
  82  4000              ;51 Internal error
  83  4000              ;52 Bad file number
  84  4000              ;53 File not found
  85  4000              ;54 File already open
  86  4000              ;55 Input past end
  87  4000              ;56 Bad file name
  88  4000              ;57 Direct statement in file
  89  4000              ;58 Sequential I/O only
  90  4000              ;59 File not OPEN
  91  4000
  92  4000
  93  4000               ; simulate cartridge with BASIC extension
  94  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  94  4004 C0 56 00 00
  94  4008 00 00 00 00
  94  400C 00 00 00 00
  95  4010
  96  4010              ; this location #4010 stores last location used by basic extension
  97  4010              ; free memory after that point
  98  4010              FREEMEMPTR:
  99  4010 63 5F         DW EXT_END
 100  4012
 101  4012              ; this location #4012 stores extension version in DAA format
 102  4012              ; first byte is major version and second minor
 103  4012              VERSION:
 104  4012 00 70         DB #00, #70
 105  4014
 106  4014              ; binary included AKG player compiled at #4014
 107  4014               IF (SOUND_CMDS == 1)
 108  4014              	INCBIN "bin/AKG.bin"
 109  4CF0              	INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CF0              MAIN_PLAYER_START EQU 04014H
   2+ 4CF0              PLY_AKG_START EQU 04014H
   3+ 4CF0              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401DH
   4+ 4CF0              PLY_AKG_INITSOUNDEFFECTS EQU 0401DH
   5+ 4CF0              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 04021H
   6+ 4CF0              PLY_AKG_PLAYSOUNDEFFECT EQU 04021H
   7+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04022H
   8+ 4CF0              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04022H
   9+ 4CF0              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04049H
  10+ 4CF0              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04049H
  11+ 4CF0              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04057H
  12+ 4CF0              PLY_AKG_PSES_PLAY EQU 04090H
  13+ 4CF0              PLY_AKG_PSES_READFIRSTBYTE EQU 04099H
  14+ 4CF0              PLY_AKG_PSES_S_ENDORLOOP EQU 040B1H
  15+ 4CF0              PLY_AKG_PSES_S_LOOP EQU 040BCH
  16+ 4CF0              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C2H
  17+ 4CF0              PLY_AKG_PSES_NOTREACHED EQU 040D5H
  18+ 4CF0              PLY_AKG_PSES_HARDWAREONLY EQU 040D9H
  19+ 4CF0              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040E0H
  20+ 4CF0              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F2H
  21+ 4CF0              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FCH
  22+ 4CF0              PLY_AKG_PSES_H_AFTERRETRIG EQU 04106H
  23+ 4CF0              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 0411AH
  24+ 4CF0              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411FH
  25+ 4CF0              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04127H
  26+ 4CF0              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04132H
  27+ 4CF0              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413EH
  28+ 4CF0              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 04140H
  29+ 4CF0              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04146H
  30+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 0414AH
  31+ 4CF0              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 0414AH
  32+ 4CF0              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414CH
  33+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414CH
  34+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414CH
  35+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414DH
  36+ 4CF0              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414EH
  37+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04152H
  38+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04152H
  39+ 4CF0              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04152H
  40+ 4CF0              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 0415AH
  41+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04162H
  42+ 4CF0              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04162H
  43+ 4CF0              PLY_AKG_INIT EQU 04162H
  44+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04162H
  45+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 04190H
  46+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A4H
  47+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B6H
  48+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D5H
  49+ 4CF0              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E2H
  50+ 4CF0              PLY_AKG_INIT_READWORDSANDFILL EQU 041E8H
  51+ 4CF0              PLY_AKG_INITTABLE0 EQU 041EBH
  52+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041EBH
  53+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04205H
  54+ 4CF0              PLY_AKG_INITTABLE0_END EQU 04205H
  55+ 4CF0              PLY_AKG_INITTABLE1 EQU 04205H
  56+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04205H
  57+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04209H
  58+ 4CF0              PLY_AKG_INITTABLE1_END EQU 04209H
  59+ 4CF0              PLY_AKG_INITTABLEORA EQU 04209H
  60+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04209H
  61+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 04221H
  62+ 4CF0              PLY_AKG_INITTABLEORA_END EQU 04221H
  63+ 4CF0              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 04221H
  64+ 4CF0              PLY_AKG_STOP EQU 04221H
  65+ 4CF0              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04233H
  66+ 4CF0              PLY_AKG_PLAY EQU 04233H
  67+ 4CF0              PLY_AKG_TICKDECREASINGCOUNTER EQU 0423BH
  68+ 4CF0              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 04241H
  69+ 4CF0              PLY_AKG_READLINKER EQU 04246H
  70+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04246H
  71+ 4CF0              PLY_AKG_READLINKER_PTLINKER EQU 04246H
  72+ 4CF0              PLY_AKG_READLINKER_NOLOOP EQU 04251H
  73+ 4CF0              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 0428AH
  74+ 4CF0              PLY_AKG_READLINE EQU 0428DH
  75+ 4CF0              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428DH
  76+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04293H
  77+ 4CF0              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04293H
  78+ 4CF0              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 042A0H
  79+ 4CF0              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A4H
  80+ 4CF0              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A7H
  81+ 4CF0              PLY_AKG_SPEEDTRACK_END EQU 042AAH
  82+ 4CF0              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042AAH
  83+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042B0H
  84+ 4CF0              PLY_AKG_EVENTTRACK_PTTRACK EQU 042B0H
  85+ 4CF0              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BDH
  86+ 4CF0              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042C1H
  87+ 4CF0              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C4H
  88+ 4CF0              PLY_AKG_EVENTTRACK_END EQU 042C7H
  89+ 4CF0              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C7H
  90+ 4CF0              PLY_AKG_CHANNEL1_READTRACK EQU 042D3H
  91+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D3H
  92+ 4CF0              PLY_AKG_CHANNEL1_PTTRACK EQU 042D3H
  93+ 4CF0              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042EEH
  94+ 4CF0              PLY_AKG_CHANNEL1_WAIT EQU 042F9H
  95+ 4CF0              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 04300H
  96+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 04300H
  97+ 4CF0              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 04300H
  98+ 4CF0              PLY_AKG_CHANNEL1_NOTE EQU 04309H
  99+ 4CF0              PLY_AKG_BASENOTEINDEX EQU 04309H
 100+ 4CF0              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 0430BH
 101+ 4CF0              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 0430BH
 102+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 0431BH
 103+ 4CF0              PLY_AKG_INSTRUMENTSTABLE EQU 0431BH
 104+ 4CF0              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432DH
 105+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433DH
 106+ 4CF0              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04365H
 107+ 4CF0              PLY_AKG_CHANNEL1_READCELLEND EQU 04368H
 108+ 4CF0              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04368H
 109+ 4CF0              PLY_AKG_CHANNEL2_READTRACK EQU 04374H
 110+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04374H
 111+ 4CF0              PLY_AKG_CHANNEL2_PTTRACK EQU 04374H
 112+ 4CF0              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438FH
 113+ 4CF0              PLY_AKG_CHANNEL2_WAIT EQU 0439AH
 114+ 4CF0              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 043A1H
 115+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 043A1H
 116+ 4CF0              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 043A1H
 117+ 4CF0              PLY_AKG_CHANNEL2_NOTE EQU 043AAH
 118+ 4CF0              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043AFH
 119+ 4CF0              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043AFH
 120+ 4CF0              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043D1H
 121+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043E1H
 122+ 4CF0              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04409H
 123+ 4CF0              PLY_AKG_CHANNEL2_READCELLEND EQU 0440CH
 124+ 4CF0              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440CH
 125+ 4CF0              PLY_AKG_CHANNEL3_READTRACK EQU 04418H
 126+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04418H
 127+ 4CF0              PLY_AKG_CHANNEL3_PTTRACK EQU 04418H
 128+ 4CF0              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04433H
 129+ 4CF0              PLY_AKG_CHANNEL3_WAIT EQU 0443EH
 130+ 4CF0              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04445H
 131+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04445H
 132+ 4CF0              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04445H
 133+ 4CF0              PLY_AKG_CHANNEL3_NOTE EQU 0444EH
 134+ 4CF0              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04453H
 135+ 4CF0              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04453H
 136+ 4CF0              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04475H
 137+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04485H
 138+ 4CF0              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ADH
 139+ 4CF0              PLY_AKG_CHANNEL3_READCELLEND EQU 044B0H
 140+ 4CF0              PLY_AKG_CURRENTSPEED EQU 044B0H
 141+ 4CF0              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B2H
 142+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B5H
 143+ 4CF0              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B5H
 144+ 4CF0              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B8H
 145+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044BBH
 146+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044BBH
 147+ 4CF0              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C7H
 148+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CEH
 149+ 4CF0              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044D1H
 150+ 4CF0              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D7H
 151+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044DAH
 152+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044DAH
 153+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E8H
 154+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EDH
 155+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F8H
 156+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044FBH
 157+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044FBH
 158+ 4CF0              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FEH
 159+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 04501H
 160+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE EQU 04501H
 161+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 0450AH
 162+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04514H
 163+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04517H
 164+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04517H
 165+ 4CF0              PLY_AKG_CHANNEL1_PITCH EQU 04517H
 166+ 4CF0              PLY_AKG_CHANNEL1_ISPITCH EQU 0451AH
 167+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451FH
 168+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451FH
 169+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04523H
 170+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04525H
 171+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04527H
 172+ 4CF0              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452EH
 173+ 4CF0              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452FH
 174+ 4CF0              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04532H
 175+ 4CF0              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04532H
 176+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454EH
 177+ 4CF0              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454EH
 178+ 4CF0              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 0455BH
 179+ 4CF0              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455FH
 180+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456FH
 181+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456FH
 182+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 04570H
 183+ 4CF0              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 04571H
 184+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04573H
 185+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04573H
 186+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04573H
 187+ 4CF0              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04574H
 188+ 4CF0              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04575H
 189+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04577H
 190+ 4CF0              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04577H
 191+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04577H
 192+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04577H
 193+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04577H
 194+ 4CF0              PLY_AKG_CHANNEL1_GLIDE_END EQU 0457AH
 195+ 4CF0              PLY_AKG_CHANNEL1_PITCH_END EQU 0457CH
 196+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04584H
 197+ 4CF0              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04584H
 198+ 4CF0              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04587H
 199+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 0458AH
 200+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 0458AH
 201+ 4CF0              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04596H
 202+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459DH
 203+ 4CF0              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 045A0H
 204+ 4CF0              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A6H
 205+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A9H
 206+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A9H
 207+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B7H
 208+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BCH
 209+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C7H
 210+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045CAH
 211+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045CAH
 212+ 4CF0              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CDH
 213+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045D0H
 214+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045D0H
 215+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D9H
 216+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E3H
 217+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E6H
 218+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E6H
 219+ 4CF0              PLY_AKG_CHANNEL2_PITCH EQU 045E6H
 220+ 4CF0              PLY_AKG_CHANNEL2_ISPITCH EQU 045E9H
 221+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045EEH
 222+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045EEH
 223+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F2H
 224+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F4H
 225+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F6H
 226+ 4CF0              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FDH
 227+ 4CF0              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FEH
 228+ 4CF0              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04601H
 229+ 4CF0              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 04601H
 230+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461DH
 231+ 4CF0              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461DH
 232+ 4CF0              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 0462AH
 233+ 4CF0              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462EH
 234+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463EH
 235+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463EH
 236+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463FH
 237+ 4CF0              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 04640H
 238+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04642H
 239+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04642H
 240+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04642H
 241+ 4CF0              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04643H
 242+ 4CF0              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04644H
 243+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04646H
 244+ 4CF0              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04646H
 245+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04646H
 246+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04646H
 247+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04646H
 248+ 4CF0              PLY_AKG_CHANNEL2_GLIDE_END EQU 04649H
 249+ 4CF0              PLY_AKG_CHANNEL2_PITCH_END EQU 0464BH
 250+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04653H
 251+ 4CF0              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04653H
 252+ 4CF0              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04656H
 253+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04659H
 254+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04659H
 255+ 4CF0              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04665H
 256+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466CH
 257+ 4CF0              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466FH
 258+ 4CF0              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04675H
 259+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04678H
 260+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04678H
 261+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04686H
 262+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 0468BH
 263+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04696H
 264+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04699H
 265+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04699H
 266+ 4CF0              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469CH
 267+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469FH
 268+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469FH
 269+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A8H
 270+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B2H
 271+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B5H
 272+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B5H
 273+ 4CF0              PLY_AKG_CHANNEL3_PITCH EQU 046B5H
 274+ 4CF0              PLY_AKG_CHANNEL3_ISPITCH EQU 046B8H
 275+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BDH
 276+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BDH
 277+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046C1H
 278+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C3H
 279+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C5H
 280+ 4CF0              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CCH
 281+ 4CF0              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CDH
 282+ 4CF0              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046D0H
 283+ 4CF0              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046D0H
 284+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046ECH
 285+ 4CF0              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046ECH
 286+ 4CF0              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F9H
 287+ 4CF0              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FDH
 288+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470DH
 289+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470DH
 290+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470EH
 291+ 4CF0              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470FH
 292+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 04711H
 293+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 04711H
 294+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 04711H
 295+ 4CF0              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04712H
 296+ 4CF0              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04713H
 297+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04715H
 298+ 4CF0              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04715H
 299+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04715H
 300+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04715H
 301+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04715H
 302+ 4CF0              PLY_AKG_CHANNEL3_GLIDE_END EQU 04718H
 303+ 4CF0              PLY_AKG_CHANNEL3_PITCH_END EQU 0471AH
 304+ 4CF0              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04726H
 305+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04726H
 306+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04726H
 307+ 4CF0              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04729H
 308+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 0472BH
 309+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 04731H
 310+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04734H
 311+ 4CF0              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04734H
 312+ 4CF0              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04737H
 313+ 4CF0              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 04740H
 314+ 4CF0              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04748H
 315+ 4CF0              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04755H
 316+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04755H
 317+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04755H
 318+ 4CF0              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04758H
 319+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 0475AH
 320+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 04760H
 321+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04763H
 322+ 4CF0              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04763H
 323+ 4CF0              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04766H
 324+ 4CF0              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476FH
 325+ 4CF0              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04777H
 326+ 4CF0              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04785H
 327+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04785H
 328+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04785H
 329+ 4CF0              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04788H
 330+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 0478AH
 331+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 04790H
 332+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04793H
 333+ 4CF0              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04793H
 334+ 4CF0              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04796H
 335+ 4CF0              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479FH
 336+ 4CF0              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A7H
 337+ 4CF0              PLY_AKG_SENDPSGREGISTERS EQU 047B6H
 338+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BEH
 339+ 4CF0              PLY_AKG_PSGREG01_INSTR EQU 047BEH
 340+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CEH
 341+ 4CF0              PLY_AKG_PSGREG23_INSTR EQU 047CEH
 342+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DFH
 343+ 4CF0              PLY_AKG_PSGREG45_INSTR EQU 047DFH
 344+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047F0H
 345+ 4CF0              PLY_AKG_PSGREG6_8_INSTR EQU 047F0H
 346+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 04801H
 347+ 4CF0              PLY_AKG_PSGREG9_10_INSTR EQU 04801H
 348+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04812H
 349+ 4CF0              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04812H
 350+ 4CF0              PLY_AKG_PSGREG13_OLDVALUE EQU 04827H
 351+ 4CF0              PLY_AKG_RETRIG EQU 04829H
 352+ 4CF0              PLY_AKG_PSGREG13_INSTR EQU 0482BH
 353+ 4CF0              PLY_AKG_PSGREG13_END EQU 0483AH
 354+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 0483AH
 355+ 4CF0              PLY_AKG_SAVESP EQU 0483AH
 356+ 4CF0              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483EH
 357+ 4CF0              PLY_AKG_CHANNEL1_READEFFECTS EQU 04846H
 358+ 4CF0              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04853H
 359+ 4CF0              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04853H
 360+ 4CF0              PLY_AKG_CHANNEL2_READEFFECTS EQU 0485BH
 361+ 4CF0              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04868H
 362+ 4CF0              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04868H
 363+ 4CF0              PLY_AKG_CHANNEL3_READEFFECTS EQU 04870H
 364+ 4CF0              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 0487BH
 365+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS EQU 0487BH
 366+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 0488AH
 367+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 0488AH
 368+ 4CF0              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 04891H
 369+ 4CF0              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 048A1H
 370+ 4CF0              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 048A1H
 371+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A8H
 372+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A8H
 373+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048ABH
 374+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B4H
 375+ 4CF0              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B4H
 376+ 4CF0              PLY_AKG_READINSTRUMENTCELL EQU 048BAH
 377+ 4CF0              PLY_AKG_NOSOFTNOHARD EQU 048C7H
 378+ 4CF0              PLY_AKG_NSNH_NONOISE EQU 048DCH
 379+ 4CF0              PLY_AKG_SOFT EQU 048DFH
 380+ 4CF0              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E6H
 381+ 4CF0              PLY_AKG_S_NOTSIMPLE EQU 048EEH
 382+ 4CF0              PLY_AKG_S_AFTERSIMPLETEST EQU 048F1H
 383+ 4CF0              PLY_AKG_HARDTOSOFT EQU 048FEH
 384+ 4CF0              PLY_AKG_HS_JUMPRATIO EQU 04909H
 385+ 4CF0              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04936H
 386+ 4CF0              PLY_AKG_ENDWITHOUTLOOP EQU 04938H
 387+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04938H
 388+ 4CF0              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04938H
 389+ 4CF0              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 04940H
 390+ 4CF0              PLY_AKG_SH_JUMPRATIO EQU 0494DH
 391+ 4CF0              PLY_AKG_SH_JUMPRATIOEND EQU 0496EH
 392+ 4CF0              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497DH
 393+ 4CF0              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04983H
 394+ 4CF0              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499DH
 395+ 4CF0              PLY_AKG_H_RETRIGEND EQU 049AFH
 396+ 4CF0              PLY_AKG_H_AFTERRETRIG EQU 049B0H
 397+ 4CF0              PLY_AKG_ENDWITHLOOP EQU 049C2H
 398+ 4CF0              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C9H
 399+ 4CF0              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DFH
 400+ 4CF0              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EDH
 401+ 4CF0              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FDH
 402+ 4CF0              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A0BH
 403+ 4CF0              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A1AH
 404+ 4CF0              PLY_AKG_SHOHS_RETRIGEND EQU 04A29H
 405+ 4CF0              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A2AH
 406+ 4CF0              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3CH
 407+ 4CF0              PLY_AKG_EFFECTTABLE EQU 04A4AH
 408+ 4CF0              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A4AH
 409+ 4CF0              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6EH
 410+ 4CF0              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6EH
 411+ 4CF0              PLY_AKG_EFFECT_RESET EQU 04A71H
 412+ 4CF0              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A73H
 413+ 4CF0              PLY_AKG_EFFECT_VOLUME EQU 04A8EH
 414+ 4CF0              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A9AH
 415+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04AA0H
 416+ 4CF0              PLY_AKG_ARPEGGIOSTABLE EQU 04AA0H
 417+ 4CF0              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC7H
 418+ 4CF0              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACEH
 419+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD4H
 420+ 4CF0              PLY_AKG_PITCHESTABLE EQU 04AD4H
 421+ 4CF0              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AFBH
 422+ 4CF0              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B02H
 423+ 4CF0              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B13H
 424+ 4CF0              PLY_AKG_EFFECT_PITCHDOWN EQU 04B1AH
 425+ 4CF0              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B2AH
 426+ 4CF0              PLY_AKG_EFFECT_PITCHUP EQU 04B3FH
 427+ 4CF0              PLY_AKG_EFFECT_PITCHSTOP EQU 04B51H
 428+ 4CF0              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B58H
 429+ 4CF0              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B82H
 430+ 4CF0              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B82H
 431+ 4CF0              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B9BH
 432+ 4CF0              PLY_AKG_EFFECT_GLIDESPEED EQU 04B9BH
 433+ 4CF0              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BADH
 434+ 4CF0              PLY_AKG_EFFECT_LEGATO EQU 04BC3H
 435+ 4CF0              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD7H
 436+ 4CF0              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDFH
 437+ 4CF0              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE7H
 438+ 4CF0              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEFH
 439+ 4CF0              PLY_AKG_EVENT EQU 04BEFH
 440+ 4CF0              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BF0H
 441+ 4CF0              PLY_AKG_PERIODTABLE EQU 04BF0H
 442+ 4CF0              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BF0H
 443+ 4CF0              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CF0H
 444+ 4CF0              PLY_AKG_PERIODTABLE_END EQU 04CF0H
 445+ 4CF0              PLY_AKG_END EQU 04CF0H
 446+ 4CF0              MAIN_PLAYER_END EQU 04CF0H
 447+ 4CF0              TESTEREND EQU 04CF0H
 448+ 4CF0
# file closed: ./symbol/AKG.sym
 110  4CF0               ENDIF
 111  4CF0
 112  4CF0               INCLUDE "VBLANK.asm"
# file opened: asm\VBLANK.asm
   1+ 4CF0              ORIG.HTIMI:
   2+ 4CF0 00 00 00 00  	DB 0, 0, 0, 0, 0
   2+ 4CF4 00
   3+ 4CF5               EXPORT ORIG.HTIMI
   4+ 4CF5
   5+ 4CF5              ; *******************************************************************************************************
   6+ 4CF5              ; interrupt handler when page 0 enabled
   7+ 4CF5              ; we are here only if one of the extended basic commands have paged in page 0
   8+ 4CF5              ; which means we arrived from BASIC so page 2 is already good
   9+ 4CF5              VBLANK:
  10+ 4CF5              	EXPORT VBLANK
  11+ 4CF5
  12+ 4CF5 F5               PUSH AF
  13+ 4CF6              	; is VDP originator ?
  14+ 4CF6 DB 99        	IN	A, (099H)
  15+ 4CF8 A7           	AND	A
  16+ 4CF9 F2 27 4D     	JP P, .EXIT
  17+ 4CFC
  18+ 4CFC               IF (SOUND_CMDS + SPRITE_CMDS > 0)
  19+ 4CFC C5               PUSH BC
  20+ 4CFD D5               PUSH DE
  21+ 4CFE E5               PUSH HL
  22+ 4CFF 08               EX AF, AF'
  23+ 4D00 D9               EXX
  24+ 4D01 F5               PUSH AF
  25+ 4D02 C5               PUSH BC
  26+ 4D03 D5               PUSH DE
  27+ 4D04 E5               PUSH HL
  28+ 4D05 DD E5            PUSH IX
  29+ 4D07 FD E5            PUSH IY
  30+ 4D09
  31+ 4D09               IF (SPRITE_CMDS == 1)
  32+ 4D09 CD 61 4D     	CALL PROCESS_SPRITES_AND_ANIMATIONS
  33+ 4D0C               ENDIF
  34+ 4D0C
  35+ 4D0C               IF (SOUND_CMDS == 1)
  36+ 4D0C 3A 7C 4D     	LD A, (SOUND_ENABLED)
  37+ 4D0F B7           	OR A
  38+ 4D10 C4 33 42     	CALL NZ,PLY_AKG_PLAY
  39+ 4D13               ENDIF
  40+ 4D13
  41+ 4D13                  ; increase JIFFY
  42+ 4D13 2A 9E FC         LD HL,(JIFFY)
  43+ 4D16 23               INC HL
  44+ 4D17 22 9E FC         LD (JIFFY),HL
  45+ 4D1A
  46+ 4D1A FD E1            POP IY
  47+ 4D1C DD E1            POP IX
  48+ 4D1E E1               POP HL
  49+ 4D1F D1               POP DE
  50+ 4D20 C1               POP BC
  51+ 4D21 F1               POP AF
  52+ 4D22 08               EX AF, AF'
  53+ 4D23 D9               EXX
  54+ 4D24 E1               POP HL
  55+ 4D25 D1               POP DE
  56+ 4D26 C1               POP BC
  57+ 4D27               ENDIF
  58+ 4D27
  59+ 4D27              .EXIT:
  60+ 4D27 F1           	POP AF
  61+ 4D28 FB           	EI
  62+ 4D29 ED 4D        	RETI
  63+ 4D2B              ; *******************************************************************************************************
  64+ 4D2B
  65+ 4D2B              ; *******************************************************************************************************
  66+ 4D2B              ; H.TIMI function
  67+ 4D2B              ; we can end up here from anywhere so page in both page 0 and 2
  68+ 4D2B              MBGE_HTIMI:
  69+ 4D2B               EXPORT MBGE_HTIMI
  70+ 4D2B
  71+ 4D2B               IF (SOUND_CMDS + SPRITE_CMDS > 0)
  72+ 4D2B
  73+ 4D2B F5           	PUSH AF
  74+ 4D2C
  75+ 4D2C              	; enable page 2
  76+ 4D2C 3E 02            LD A, 2
  77+ 4D2E CD F0 55         CALL GET_PAGE_INFO
  78+ 4D31 C5               PUSH BC
  79+ 4D32 D5               PUSH DE
  80+ 4D33 3A 43 F3         LD A, (RAMAD2)
  81+ 4D36 26 80            LD H, 080H
  82+ 4D38 CD 37 56         CALL LOCAL_ENASLT
  83+ 4D3B              	; enable page 0
  84+ 4D3B AF               XOR A
  85+ 4D3C CD F0 55         CALL GET_PAGE_INFO
  86+ 4D3F C5               PUSH BC
  87+ 4D40 D5               PUSH DE
  88+ 4D41 3A 41 F3         LD A, (RAMAD0)
  89+ 4D44 26 00            LD H, 0
  90+ 4D46 CD 37 56         CALL LOCAL_ENASLT
  91+ 4D49
  92+ 4D49               IF (SPRITE_CMDS == 1)
  93+ 4D49 CD 61 4D     	CALL PROCESS_SPRITES_AND_ANIMATIONS
  94+ 4D4C               ENDIF
  95+ 4D4C
  96+ 4D4C               IF (SOUND_CMDS == 1)
  97+ 4D4C 3A 7C 4D     	LD A, (SOUND_ENABLED)
  98+ 4D4F B7           	OR A
  99+ 4D50 C4 33 42     	CALL NZ,PLY_AKG_PLAY
 100+ 4D53               ENDIF
 101+ 4D53
 102+ 4D53              	; restore page 0
 103+ 4D53 D1               POP DE
 104+ 4D54 C1               POP BC
 105+ 4D55 CD 27 56         CALL RESTORE_PAGE_INFO
 106+ 4D58              	; restore page 2
 107+ 4D58 D1               POP DE
 108+ 4D59 C1               POP BC
 109+ 4D5A CD 27 56         CALL RESTORE_PAGE_INFO
 110+ 4D5D
 111+ 4D5D F1           	POP AF
 112+ 4D5E               ENDIF
 113+ 4D5E C3 F0 4C     	JP ORIG.HTIMI
 114+ 4D61              ; *******************************************************************************************************
 115+ 4D61
 116+ 4D61              ; *******************************************************************************************************
 117+ 4D61              ; function checks if the sprite system is initialized and what screen mode we are running
 118+ 4D61              ; also checks if some VRAM modifying command is running
 119+ 4D61              ; when that checks out calls sprite updates and animation processing
 120+ 4D61              PROCESS_SPRITES_AND_ANIMATIONS:
 121+ 4D61              	; check if initialized
 122+ 4D61 3A 7D 4D     	LD A, (SPRATR_INIT_STATUS)
 123+ 4D64 B7           	OR A
 124+ 4D65 C8           	RET Z
 125+ 4D66              	; check screen mode
 126+ 4D66 3A AF FC     	LD A, (SCRMOD)
 127+ 4D69 3D           	DEC A
 128+ 4D6A 28 02        	JR Z, .L0 ; screen 1
 129+ 4D6C 3D           	DEC A
 130+ 4D6D C0           	RET NZ ; not screen 2
 131+ 4D6E              .L0:
 132+ 4D6E                  ; check if anyone else is working with VRAM
 133+ 4D6E 3A 64 54         LD A,(VRAM_UPDATE_IN_PROGRESS)
 134+ 4D71 B7               OR A
 135+ 4D72 C0               RET NZ
 136+ 4D73
 137+ 4D73 CD 92 4D         CALL SPRATR_UPDATE
 138+ 4D76
 139+ 4D76               IF (ANIM_CMDS == 1)
 140+ 4D76 CD 77 53         CALL PROCESS_ANIMATIONS
 141+ 4D79               ENDIF
 142+ 4D79 C9               RET
 143+ 4D7A              ; *******************************************************************************************************
# file closed: asm\VBLANK.asm
 113  4D7A
 114  4D7A               IF (SOUND_CMDS == 1)
 115  4D7A              MUSIC_INIT_STATUS:
 116  4D7A 00            DB 0
 117  4D7B              SFX_INIT_STATUS:
 118  4D7B 00            DB 0
 119  4D7C              SOUND_ENABLED:
 120  4D7C 00            DB 0
 121  4D7D               ENDIF
 122  4D7D
 123  4D7D               IF (SPRITE_CMDS == 1)
 124  4D7D               INCLUDE "SPRITES.asm"
# file opened: asm\SPRITES.asm
   1+ 4D7D              ; commands and variables related to sprites
   2+ 4D7D
   3+ 4D7D              SPRATR_INIT_STATUS:
   4+ 4D7D 00            DB 0
   5+ 4D7E              SPRATR_UPDATE_FLAG:
   6+ 4D7E 00 00         DW 0
   7+ 4D80              SPRATR_DATA:
   8+ 4D80 00 00         DW 0
   9+ 4D82              SPRFLICKER_ENABLED:
  10+ 4D82 00            DB 0
  11+ 4D83              ; to support sprite flicker
  12+ 4D83              FLICKER:
  13+ 4D83 00            DB 0
  14+ 4D84
  15+ 4D84              ; to temporarily store stack pointer
  16+ 4D84              TMPSP:
  17+ 4D84 00 00         DW 0
  18+ 4D86
  19+ 4D86              ; *******************************************************************************************************
  20+ 4D86              ; helper function gets pointer to n-th entry in sprite attributes
  21+ 4D86              ; changes HL,DE;
  22+ 4D86              GETnthSPRATTR:
  23+ 4D86 26 00            LD H,0
  24+ 4D88 6F               LD L,A
  25+ 4D89 CD EC 55         CALL HLx8
  26+ 4D8C ED 5B 80 4D      LD DE,(SPRATR_DATA)
  27+ 4D90 19               ADD HL,DE
  28+ 4D91 C9               RET
  29+ 4D92              ; *******************************************************************************************************
  30+ 4D92
  31+ 4D92              ; *******************************************************************************************************
  32+ 4D92              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
  33+ 4D92              ; struct {
  34+ 4D92              ; DW y
  35+ 4D92              ; DW x
  36+ 4D92              ; DW pattern (0-63)
  37+ 4D92              ; DW color
  38+ 4D92              ; } [32]
  39+ 4D92              ; will hide sprites whose location is outside of visible area
  40+ 4D92              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
  41+ 4D92              ; modifies AF, AF', BC, DE, HL
  42+ 4D92              SPRATR_UPDATE:
  43+ 4D92              	; check if update requested
  44+ 4D92 2A 7E 4D     	LD HL, (SPRATR_UPDATE_FLAG)
  45+ 4D95 7E           	LD A, (HL)
  46+ 4D96 B7           	OR A
  47+ 4D97 C8           	RET Z
  48+ 4D98              .L0:
  49+ 4D98 06 20        	LD B, 32 ; sprite number
  50+ 4D9A 0E 98        	LD C, #98 ; register for vdp data output
  51+ 4D9C              	; set VDP address
  52+ 4D9C 2A 28 F9     	LD HL, (ATRBAS)
  53+ 4D9F 3A 82 4D     	LD A, (SPRFLICKER_ENABLED)
  54+ 4DA2 B7           	OR A
  55+ 4DA3 28 03        	JR Z, .L3
  56+ 4DA5 3A 83 4D     	LD A, (FLICKER)
  57+ 4DA8              .L3:
  58+ 4DA8 5F           	LD E, A
  59+ 4DA9 08           	EX AF, AF'
  60+ 4DAA 7B           	LD A, E
  61+ 4DAB 87           	ADD A, A
  62+ 4DAC 87           	ADD A, A
  63+ 4DAD 16 00        	LD D, 0
  64+ 4DAF 5F           	LD E, A
  65+ 4DB0 19           	ADD HL, DE
  66+ 4DB1 CD D9 55     	CALL SETWRT_LOCAL
  67+ 4DB4 ED 73 84 4D  	LD (TMPSP), SP
  68+ 4DB8 ED 7B 80 4D  	LD SP, (SPRATR_DATA)
  69+ 4DBC
  70+ 4DBC              .LOOP:
  71+ 4DBC E1           	POP HL
  72+ 4DBD 24           	INC H
  73+ 4DBE 28 0D        	JR Z, .L1 ; negative number above -256
  74+ 4DC0 25           	DEC H
  75+ 4DC1 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
  76+ 4DC3 7D           	LD A, L
  77+ 4DC4 FE C0        	CP 192
  78+ 4DC6 30 10        	JR NC, .OUT3
  79+ 4DC8 3D           	DEC A ; due to VDP rule that top of screen is -1
  80+ 4DC9 57           	LD D, A
  81+ 4DCA C3 F1 4D     	JP .X
  82+ 4DCD              .L1:
  83+ 4DCD 7D           	LD A, L
  84+ 4DCE C6 10        	ADD 16
  85+ 4DD0 FA D8 4D     	JP M, .OUT3 ; below -16
  86+ 4DD3 2D           	DEC L ; due to VDP rule that top of screen is -1
  87+ 4DD4 55           	LD D, L
  88+ 4DD5 C3 F1 4D     	JP .X
  89+ 4DD8              .OUT3:
  90+ 4DD8 E1           	POP HL ; skip x value
  91+ 4DD9              .OUT2:
  92+ 4DD9 E1           	POP HL ; skip pattern
  93+ 4DDA E1           	POP HL ; skip color
  94+ 4DDB 3E D1        	LD A, #D1
  95+ 4DDD ED 79        	OUT (C), A ; sprite hidden
  96+ 4DDF 00          > NOP
  96+ 4DE0 00          > NOP
  96+ 4DE1 00          > NOP
  97+ 4DE2 ED 79        	OUT (C), A ; value unimportant
  98+ 4DE4 00          > NOP
  98+ 4DE5 00          > NOP
  98+ 4DE6 00          > NOP
  99+ 4DE7 ED 79        	OUT (C), A ; value unimportant
 100+ 4DE9 00          > NOP
 100+ 4DEA 00          > NOP
 100+ 4DEB 00          > NOP
 101+ 4DEC ED 79        	OUT (C), A ; value unimportant
 102+ 4DEE C3 1C 4E     	JP .NEXT
 103+ 4DF1              .X:
 104+ 4DF1 E1           	POP HL
 105+ 4DF2 24           	INC H
 106+ 4DF3 28 08        	JR Z, .L2
 107+ 4DF5 25           	DEC H
 108+ 4DF6 20 E1        	JR NZ, .OUT2
 109+ 4DF8 1E 00        	LD E, 0 ; EC bit
 110+ 4DFA C3 06 4E     	JP .XY
 111+ 4DFD              .L2:
 112+ 4DFD 7D           	LD A, L
 113+ 4DFE C6 20        	ADD 32
 114+ 4E00 FA D9 4D     	JP M, .OUT2
 115+ 4E03 6F           	LD L, A
 116+ 4E04 1E 80        	LD E, #80
 117+ 4E06              .XY:
 118+ 4E06 ED 51        	OUT (C), D
 119+ 4E08 3A E0 F3     	LD A, (REG1SAV)
 120+ 4E0B E6 02        	AND 2
 121+ 4E0D ED 69        	OUT (C), L
 122+ 4E0F E1           	POP HL ; pattern
 123+ 4E10 7D           	LD A, L
 124+ 4E11 28 02        	JR Z, .SMALLSPRITES
 125+ 4E13 87           	ADD A, A
 126+ 4E14 87           	ADD A, A ; needs to go at 4x
 127+ 4E15              .SMALLSPRITES:
 128+ 4E15 D3 98        	OUT (#98), A
 129+ 4E17 E1           	POP HL ; color
 130+ 4E18 7D           	LD A, L
 131+ 4E19 B3           	OR E
 132+ 4E1A D3 98        	OUT (#98), A
 133+ 4E1C              .NEXT:
 134+ 4E1C 08           	EX AF, AF'
 135+ 4E1D 3C           	INC A
 136+ 4E1E E6 1F        	AND 31
 137+ 4E20 C2 34 4E     	JP NZ, .NEXT2
 138+ 4E23 08           	EX AF, AF'
 139+ 4E24 2A 28 F9     	LD HL, (ATRBAS)
 140+ 4E27              	; CALL SETWRT_LOCAL not allowed as SP modified
 141+ 4E27 7D           	LD	A, L
 142+ 4E28 D3 99        	OUT	(099H), A
 143+ 4E2A 7C           	LD	A, H
 144+ 4E2B E6 3F        	AND	03FH
 145+ 4E2D F6 40        	OR	040H
 146+ 4E2F D3 99        	OUT	(099H), A
 147+ 4E31 C3 35 4E     	JP .NEXT3
 148+ 4E34              .NEXT2:
 149+ 4E34 08           	EX AF, AF'
 150+ 4E35              .NEXT3:
 151+ 4E35 10 85        	DJNZ .LOOP
 152+ 4E37 08           	EX AF, AF'
 153+ 4E38 3C           	INC A
 154+ 4E39 32 83 4D     	LD (FLICKER), A
 155+ 4E3C
 156+ 4E3C ED 7B 84 4D  	LD SP, (TMPSP)
 157+ 4E40 2A 7E 4D     	LD HL, (SPRATR_UPDATE_FLAG)
 158+ 4E43 36 00        	LD (HL), 0 ; zero out update flag
 159+ 4E45 C9           	RET
 160+ 4E46              ; *******************************************************************************************************
 161+ 4E46
 162+ 4E46              ; *******************************************************************************************************
 163+ 4E46              ; function to handle CALL SPRENABLE basic extension
 164+ 4E46              ; initializes sprites handler
 165+ 4E46              ; _SPRENABLE ( INT sprites_attributes_data,
 166+ 4E46              ;			   INT update_variable_location,
 167+ 4E46              ;			   INT sprite_flicker_enabled )
 168+ 4E46              ; expects both locations to be in range #8000+ or throws an error
 169+ 4E46              ; since these should be BASIC variables
 170+ 4E46              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA and SPRFLICKER_ENABLED
 171+ 4E46              SPRENABLE:
 172+ 4E46              	; opening (
 173+ 4E46 CD FD 56     	CALL CHKCHAR
 174+ 4E49 28           	DB '('
 175+ 4E4A              	; get address of sprite attribute table DIM SA%(3,31)
 176+ 4E4A DD 21 2F 54  	LD IX, FRMQNT
 177+ 4E4E CD 59 01     	CALL CALBAS
 178+ 4E51 D5           	PUSH DE
 179+ 4E52              	; comma
 180+ 4E52 CD FD 56     	CALL CHKCHAR
 181+ 4E55 2C           	DB ','
 182+ 4E56              	; get address of sprite update flag location
 183+ 4E56 DD 21 2F 54  	LD IX, FRMQNT
 184+ 4E5A CD 59 01     	CALL CALBAS
 185+ 4E5D D5           	PUSH DE
 186+ 4E5E              	; comma
 187+ 4E5E CD FD 56     	CALL CHKCHAR
 188+ 4E61 2C           	DB ','
 189+ 4E62              	; get flicker enabled flag
 190+ 4E62 DD 21 2F 54  	LD IX, FRMQNT
 191+ 4E66 CD 59 01     	CALL CALBAS
 192+ 4E69 D5           	PUSH DE
 193+ 4E6A              	; ending )
 194+ 4E6A CD FD 56     	CALL CHKCHAR
 195+ 4E6D 29           	DB ')'
 196+ 4E6E
 197+ 4E6E D1           	POP DE ; get flicker flag
 198+ 4E6F 7A           	LD A, D
 199+ 4E70 B3           	OR E
 200+ 4E71 32 82 4D     	LD (SPRFLICKER_ENABLED), A
 201+ 4E74
 202+ 4E74 D1           	POP DE ; update variable location
 203+ 4E75 CB 7A        	BIT 7, D ; is address >= &h8000
 204+ 4E77 20 05        	JR NZ, .L1
 205+ 4E79 1E 05        	LD E, 5 ; illegal function call
 206+ 4E7B C3 1D 57     	JP THROW_ERROR
 207+ 4E7E              .L1:
 208+ 4E7E ED 53 7E 4D  	LD (SPRATR_UPDATE_FLAG), DE
 209+ 4E82 D1           	POP DE ; address of sprite attribute table
 210+ 4E83 CB 7A        	BIT 7, D ; is address >= &h8000
 211+ 4E85 20 05        	JR NZ, .L2
 212+ 4E87 1E 05        	LD E, 5 ; illegal function call
 213+ 4E89 C3 1D 57     	JP THROW_ERROR
 214+ 4E8C              .L2:
 215+ 4E8C ED 53 80 4D  	LD (SPRATR_DATA), DE
 216+ 4E90 3E 01        	LD A, 1
 217+ 4E92 32 7D 4D     	LD (SPRATR_INIT_STATUS), A
 218+ 4E95 C9           	RET
 219+ 4E96              ; *******************************************************************************************************
 220+ 4E96
 221+ 4E96              ; *******************************************************************************************************
 222+ 4E96              ; function to handle CALL SPRDISABLE basic extension
 223+ 4E96              ; disables sprites handling
 224+ 4E96              ; _SPRDISABLE
 225+ 4E96              ; resets variable SPRATR_INIT_STATUS
 226+ 4E96              SPRDISABLE:
 227+ 4E96 AF           	XOR A
 228+ 4E97 32 7D 4D     	LD (SPRATR_INIT_STATUS), A
 229+ 4E9A C9           	RET
 230+ 4E9B              ; *******************************************************************************************************
 231+ 4E9B
 232+ 4E9B              ; *******************************************************************************************************
 233+ 4E9B              ; function to handle CALL SPRSET basic extension
 234+ 4E9B              ; sets position, and optionally pattern and color of sprite
 235+ 4E9B              ; _SPRSET ( BYTE sprite_num , valid 0-31
 236+ 4E9B              ;			INT x,
 237+ 4E9B              ;			INT y,
 238+ 4E9B              ;			INT pattern, valid 0-63, otherwise ignored
 239+ 4E9B              ;			INT color, valid 0-15, otherwise ignored
 240+ 4E9B              SPRSET:
 241+ 4E9B 3A 7D 4D     	LD A, (SPRATR_INIT_STATUS)
 242+ 4E9E B7           	OR A
 243+ 4E9F 20 05        	JR NZ, .L1
 244+ 4EA1 1E 05        	LD E, 5 ; illegal function call
 245+ 4EA3 C3 1D 57     	JP THROW_ERROR
 246+ 4EA6              .L1:
 247+ 4EA6              	; opening (
 248+ 4EA6 CD FD 56     	CALL CHKCHAR
 249+ 4EA9 28           	DB '('
 250+ 4EAA              	; get sprite number
 251+ 4EAA DD 21 1C 52  	LD IX, GETBYT
 252+ 4EAE CD 59 01     	CALL CALBAS
 253+ 4EB1 F5           	PUSH AF
 254+ 4EB2              	; comma
 255+ 4EB2 CD FD 56     	CALL CHKCHAR
 256+ 4EB5 2C           	DB ','
 257+ 4EB6              	; get x
 258+ 4EB6 DD 21 2F 54  	LD IX, FRMQNT
 259+ 4EBA CD 59 01     	CALL CALBAS
 260+ 4EBD D5           	PUSH DE
 261+ 4EBE              	; comma
 262+ 4EBE CD FD 56     	CALL CHKCHAR
 263+ 4EC1 2C           	DB ','
 264+ 4EC2              	; get y
 265+ 4EC2 DD 21 2F 54  	LD IX, FRMQNT
 266+ 4EC6 CD 59 01     	CALL CALBAS
 267+ 4EC9 D5           	PUSH DE
 268+ 4ECA              	; comma
 269+ 4ECA CD FD 56     	CALL CHKCHAR
 270+ 4ECD 2C           	DB ','
 271+ 4ECE              	; get pattern
 272+ 4ECE DD 21 2F 54  	LD IX, FRMQNT
 273+ 4ED2 CD 59 01     	CALL CALBAS
 274+ 4ED5 D5           	PUSH DE
 275+ 4ED6              	; comma
 276+ 4ED6 CD FD 56     	CALL CHKCHAR
 277+ 4ED9 2C           	DB ','
 278+ 4EDA              	; get color
 279+ 4EDA DD 21 2F 54  	LD IX, FRMQNT
 280+ 4EDE CD 59 01     	CALL CALBAS
 281+ 4EE1 D5           	PUSH DE
 282+ 4EE2              	; ending )
 283+ 4EE2 CD FD 56     	CALL CHKCHAR
 284+ 4EE5 29           	DB ')'
 285+ 4EE6
 286+ 4EE6                  ; save position in BASIC text
 287+ 4EE6 E5           	PUSH HL
 288+ 4EE7 DD E1        	POP IX
 289+ 4EE9
 290+ 4EE9 C1           	POP BC ; color
 291+ 4EEA D1           	POP DE ; pattern
 292+ 4EEB D9           	EXX
 293+ 4EEC C1           	POP BC ; y
 294+ 4EED D1           	POP DE ; x
 295+ 4EEE F1           	POP AF ; sprite number
 296+ 4EEF FE 20        	CP 32
 297+ 4EF1 38 05        	JR C, .L2
 298+ 4EF3 1E 05        	LD E, 5 ; illegal function call
 299+ 4EF5 C3 1D 57     	JP THROW_ERROR
 300+ 4EF8              .L2:
 301+ 4EF8              	; find location in sprite attributes table
 302+ 4EF8 D5           	PUSH DE
 303+ 4EF9 CD 86 4D     	CALL GETnthSPRATTR
 304+ 4EFC D1           	POP DE
 305+ 4EFD              	; set y
 306+ 4EFD 71           	LD (HL), C
 307+ 4EFE 23           	INC HL
 308+ 4EFF 70           	LD (HL), B
 309+ 4F00 23           	INC HL
 310+ 4F01              	; set x
 311+ 4F01 73           	LD (HL), E
 312+ 4F02 23           	INC HL
 313+ 4F03 72           	LD (HL), D
 314+ 4F04 23           	INC HL
 315+ 4F05 E5           	PUSH HL
 316+ 4F06 D9           	EXX
 317+ 4F07 E1           	POP HL
 318+ 4F08              	; check if 0<=pattern<64
 319+ 4F08 7A           	LD A, D
 320+ 4F09 B7           	OR A
 321+ 4F0A 20 0B        	JR NZ, .L3
 322+ 4F0C 7B           	LD A, E
 323+ 4F0D FE 40        	CP 64
 324+ 4F0F 30 06        	JR NC, .L3
 325+ 4F11              	; set pattern
 326+ 4F11              	;ADD A, A
 327+ 4F11              	;ADD A, A
 328+ 4F11              	;ADD A, A
 329+ 4F11 77           	LD (HL), A
 330+ 4F12 23           	INC HL
 331+ 4F13 72           	LD (HL), D
 332+ 4F14 23           	INC HL
 333+ 4F15 18 02        	JR .L4
 334+ 4F17              .L3:
 335+ 4F17              	; skip pattern
 336+ 4F17 23          > INC HL
 336+ 4F18 23          > INC HL
 337+ 4F19              .L4:
 338+ 4F19              	; check if 0<=color<16
 339+ 4F19 78           	LD A, B
 340+ 4F1A B7           	OR A
 341+ 4F1B 20 08        	JR NZ, .L5
 342+ 4F1D 79           	LD A, C
 343+ 4F1E FE 10        	CP 16
 344+ 4F20 30 03        	JR NC, .L5
 345+ 4F22              	; set color
 346+ 4F22 71           	LD (HL), C
 347+ 4F23 23           	INC HL
 348+ 4F24 70           	LD (HL), B
 349+ 4F25
 350+ 4F25              .L5:
 351+ 4F25 DD E5        	PUSH IX
 352+ 4F27 E1           	POP HL
 353+ 4F28 C9           	RET
 354+ 4F29              ; *******************************************************************************************************
 355+ 4F29
 356+ 4F29              ; *******************************************************************************************************
 357+ 4F29              ; function sets sprite location based on initial coordinates and offset provided
 358+ 4F29              ; input A=sprite number in SPRATR_DATA , 0-31
 359+ 4F29              ; input DE=initial x
 360+ 4F29              ; input BC=initial y
 361+ 4F29              ; input IY=location where delta y,x are located
 362+ 4F29              ; modifies AF, HL, IX
 363+ 4F29              SPRSET_DELTA_POS:
 364+ 4F29 D5           	PUSH DE
 365+ 4F2A CD 86 4D     	CALL GETnthSPRATTR
 366+ 4F2D E5           	PUSH HL
 367+ 4F2E DD E1        	POP IX
 368+ 4F30 D1           	POP DE
 369+ 4F31              	; IX=sprite's y location
 370+ 4F31 FD 6E 00     	LD L, (IY)
 371+ 4F34 FD 66 01     	LD H, (IY+1)
 372+ 4F37 09           	ADD HL, BC
 373+ 4F38 DD 75 00     	LD (IX), L
 374+ 4F3B DD 74 01     	LD (IX+1), H
 375+ 4F3E FD 6E 02     	LD L, (IY+2)
 376+ 4F41 FD 66 03     	LD H, (IY+3)
 377+ 4F44 19           	ADD HL, DE
 378+ 4F45 DD 75 02     	LD (IX+2), L
 379+ 4F48 DD 74 03     	LD (IX+3), H
 380+ 4F4B C9           	RET
 381+ 4F4C              ; *******************************************************************************************************
 382+ 4F4C
 383+ 4F4C              ; *******************************************************************************************************
 384+ 4F4C              ; function to handle CALL SPRGRPMOV basic extension
 385+ 4F4C              ; sets position of a group of sprites described with
 386+ 4F4C              ; { int sprite_num, int delta_y, int delta_x } [count]
 387+ 4F4C              ; _SPRGRPMOV ( INT x,
 388+ 4F4C              ;			   INT y,
 389+ 4F4C              ;			   INT data_ptr,
 390+ 4F4C              ;			   BYTE count,
 391+ 4F4C              ; will put ram in page 0 also, page 1 is already there
 392+ 4F4C              SPRGRPMOV:
 393+ 4F4C 3A 7D 4D     	LD A, (SPRATR_INIT_STATUS)
 394+ 4F4F B7           	OR A
 395+ 4F50 20 05        	JR NZ, .L1
 396+ 4F52 1E 05        	LD E, 5 ; illegal function call
 397+ 4F54 C3 1D 57     	JP THROW_ERROR
 398+ 4F57              .L1:
 399+ 4F57              	; opening (
 400+ 4F57 CD FD 56     	CALL CHKCHAR
 401+ 4F5A 28           	DB '('
 402+ 4F5B              	; get x
 403+ 4F5B DD 21 2F 54  	LD IX, FRMQNT
 404+ 4F5F CD 59 01     	CALL CALBAS
 405+ 4F62 D5           	PUSH DE
 406+ 4F63              	; comma
 407+ 4F63 CD FD 56     	CALL CHKCHAR
 408+ 4F66 2C           	DB ','
 409+ 4F67              	; get y
 410+ 4F67 DD 21 2F 54  	LD IX, FRMQNT
 411+ 4F6B CD 59 01     	CALL CALBAS
 412+ 4F6E D5           	PUSH DE
 413+ 4F6F              	; comma
 414+ 4F6F CD FD 56     	CALL CHKCHAR
 415+ 4F72 2C           	DB ','
 416+ 4F73              	; get data pointer
 417+ 4F73 DD 21 2F 54  	LD IX, FRMQNT
 418+ 4F77 CD 59 01     	CALL CALBAS
 419+ 4F7A D5           	PUSH DE
 420+ 4F7B              	; comma
 421+ 4F7B CD FD 56     	CALL CHKCHAR
 422+ 4F7E 2C           	DB ','
 423+ 4F7F              	; get count
 424+ 4F7F DD 21 1C 52  	LD IX, GETBYT
 425+ 4F83 CD 59 01     	CALL CALBAS
 426+ 4F86 F5           	PUSH AF
 427+ 4F87              	; ending )
 428+ 4F87 CD FD 56     	CALL CHKCHAR
 429+ 4F8A 29           	DB ')'
 430+ 4F8B
 431+ 4F8B E5           	PUSH HL
 432+ 4F8C DD E1        	POP IX
 433+ 4F8E
 434+ 4F8E C1           	POP BC ; count
 435+ 4F8F E1           	POP HL ; data pointer
 436+ 4F90 D9           	EXX
 437+ 4F91 C1           	POP BC ; y
 438+ 4F92 D1           	POP DE ; x
 439+ 4F93 D9           	EXX
 440+ 4F94
 441+ 4F94 DD E5        	PUSH IX ; save position in BASIC buffer
 442+ 4F96
 443+ 4F96 C5           	PUSH BC
 444+ 4F97 E5           	PUSH HL
 445+ 4F98 AF               XOR A
 446+ 4F99 CD F0 55         CALL GET_PAGE_INFO
 447+ 4F9C D9           	EXX
 448+ 4F9D E1           	POP HL
 449+ 4F9E F1           	POP AF
 450+ 4F9F D9           	EXX
 451+ 4FA0 C5               PUSH BC
 452+ 4FA1 D5               PUSH DE
 453+ 4FA2 D9           	EXX
 454+ 4FA3 F5           	PUSH AF
 455+ 4FA4 E5           	PUSH HL
 456+ 4FA5 D9           	EXX
 457+ 4FA6 3A 41 F3         LD A, (RAMAD0)
 458+ 4FA9 26 00            LD H, 0
 459+ 4FAB CD 37 56         CALL LOCAL_ENASLT
 460+ 4FAE FB           	EI
 461+ 4FAF E1           	POP HL
 462+ 4FB0 C1           	POP BC
 463+ 4FB1 CD BB 4F     	CALL .UPDATE_LOC
 464+ 4FB4 D1               POP DE
 465+ 4FB5 C1               POP BC
 466+ 4FB6 CD 27 56         CALL RESTORE_PAGE_INFO
 467+ 4FB9 E1           	POP HL
 468+ 4FBA C9           	RET
 469+ 4FBB
 470+ 4FBB              .UPDATE_LOC:
 471+ 4FBB              .L4:
 472+ 4FBB 7E           	LD A, (HL)
 473+ 4FBC 23           	INC HL
 474+ 4FBD 23           	INC HL
 475+ 4FBE E5           	PUSH HL
 476+ 4FBF FD E1        	POP IY
 477+ 4FC1 D9           	EXX
 478+ 4FC2 CD 29 4F     	CALL SPRSET_DELTA_POS
 479+ 4FC5 D9           	EXX
 480+ 4FC6 23          > INC HL
 480+ 4FC7 23          > INC HL
 480+ 4FC8 23          > INC HL
 480+ 4FC9 23          > INC HL
 481+ 4FCA 10 EF        	DJNZ .L4
 482+ 4FCC C9           	RET
 483+ 4FCD              ; *******************************************************************************************************
 484+ 4FCD
# file closed: asm\SPRITES.asm
 125  4FCD               ENDIF
 126  4FCD
 127  4FCD               IF (ANIM_CMDS == 1)
 128  4FCD               INCLUDE "ANIMATION.asm"
# file opened: asm\ANIMATION.asm
   1+ 4FCD              ; sprite animation routines
   2+ 4FCD
   3+ 4FCD              ; number of animation items and pointer
   4+ 4FCD              ANIMITEMNUM:
   5+ 4FCD 00            DB 0
   6+ 4FCE              ANIMITEMPTR:
   7+ 4FCE 63 5F         DW EXT_END
   8+ 4FD0              ; number of animation definitions and pointer
   9+ 4FD0              ANIMDEFNUM:
  10+ 4FD0 00            DB 0
  11+ 4FD1              ANIMDEFPTR:
  12+ 4FD1 63 5F         DW EXT_END
  13+ 4FD3              ; number of links between sprite and animation definitions
  14+ 4FD3              ANIMSPRNUM:
  15+ 4FD3 00            DB 0
  16+ 4FD4              ANIMSPRPTR:
  17+ 4FD4 63 5F         DW EXT_END
  18+ 4FD6
  19+ 4FD6              ; ANIMATION ITEM
  20+ 4FD6              ; byte type = [0 - pattern and color change
  21+ 4FD6              ;              1 - pattern definition change ]
  22+ 4FD6              ; word ticks - number of ticks to hold this state
  23+ 4FD6              ; for type = 0
  24+ 4FD6              ;   byte pattern;
  25+ 4FD6              ;   byte color;
  26+ 4FD6              ; for type = 1
  27+ 4FD6              ;   work data_pointer;
  28+ 4FD6              ; total size = 5b
  29+ 4FD6
  30+ 4FD6              ; ANIMATION DEFINITION
  31+ 4FD6              ; byte number of items 1-15
  32+ 4FD6              ; byte[15] anim_item;
  33+ 4FD6              ; total size = 16b
  34+ 4FD6
  35+ 4FD6              ; SPRITE ANIMATION
  36+ 4FD6              ; +00 byte sprite number;
  37+ 4FD6              ; +01 word time;
  38+ 4FD6              ; +03 byte current item;
  39+ 4FD6              ; +04 byte animation definition;
  40+ 4FD6              ; +05 byte cyclic;
  41+ 4FD6              ; +06 byte active;
  42+ 4FD6              ; +07 byte reserved
  43+ 4FD6              ; total size = 8b
  44+ 4FD6
  45+ 4FD6              ; *******************************************************************************************************
  46+ 4FD6              ; helper function HL=A*5
  47+ 4FD6              ; changes HL,DE;
  48+ 4FD6              Ax5:
  49+ 4FD6 26 00            LD H,0
  50+ 4FD8 6F               LD L,A
  51+ 4FD9 54               LD D,H
  52+ 4FDA 5D               LD E,L
  53+ 4FDB 29               ADD HL,HL
  54+ 4FDC 29               ADD HL,HL
  55+ 4FDD 19               ADD HL,DE
  56+ 4FDE C9               RET
  57+ 4FDF              ; *******************************************************************************************************
  58+ 4FDF
  59+ 4FDF              ; *******************************************************************************************************
  60+ 4FDF              ; helper function gets pointer to n-th animation item
  61+ 4FDF              ; changes HL,DE;
  62+ 4FDF              GETnthANIMITEM:
  63+ 4FDF CD D6 4F         CALL Ax5
  64+ 4FE2 ED 5B CE 4F      LD DE,(ANIMITEMPTR)
  65+ 4FE6 19               ADD HL,DE
  66+ 4FE7 C9               RET
  67+ 4FE8              ; *******************************************************************************************************
  68+ 4FE8
  69+ 4FE8              ; *******************************************************************************************************
  70+ 4FE8              ; helper function gets pointer to n-th entry in animation definition
  71+ 4FE8              ; changes HL,DE;
  72+ 4FE8              GETnthANIMDEF:
  73+ 4FE8 26 00            LD H,0
  74+ 4FEA 6F               LD L,A
  75+ 4FEB CD EC 55         CALL HLx8
  76+ 4FEE ED 5B D1 4F      LD DE,(ANIMDEFPTR)
  77+ 4FF2 19               ADD HL,DE
  78+ 4FF3 C9               RET
  79+ 4FF4              ; *******************************************************************************************************
  80+ 4FF4
  81+ 4FF4              ; *******************************************************************************************************
  82+ 4FF4              ; helper function gets pointer to n-th entry in sprite animation
  83+ 4FF4              ; changes HL,DE;
  84+ 4FF4              GETnthSPRANIM:
  85+ 4FF4 26 00            LD H,0
  86+ 4FF6 6F               LD L,A
  87+ 4FF7 CD EB 55         CALL HLx16
  88+ 4FFA ED 5B D4 4F      LD DE,(ANIMSPRPTR)
  89+ 4FFE 19               ADD HL,DE
  90+ 4FFF C9               RET
  91+ 5000              ; *******************************************************************************************************
  92+ 5000
  93+ 5000              ; *******************************************************************************************************
  94+ 5000              ; function to handle CALL MAXANIMITEMS basic extension
  95+ 5000              ; MAXANIMITEMS (BYTE number)
  96+ 5000              ; sets new number and moves memory buffers as needed
  97+ 5000              MAXANIMITEMS:
  98+ 5000              	; opening (
  99+ 5000 CD FD 56     	CALL CHKCHAR
 100+ 5003 28           	DB '('
 101+ 5004              	; get value
 102+ 5004 DD 21 1C 52  	LD IX, GETBYT
 103+ 5008 CD 59 01     	CALL CALBAS
 104+ 500B F5               PUSH AF
 105+ 500C              	; ending )
 106+ 500C CD FD 56     	CALL CHKCHAR
 107+ 500F 29           	DB ')'
 108+ 5010 F1               POP AF
 109+ 5011
 110+ 5011              	; save position
 111+ 5011 E5           	PUSH HL
 112+ 5012              .ENTRY:
 113+ 5012 47               LD B,A
 114+ 5013 3A CD 4F         LD A,(ANIMITEMNUM)
 115+ 5016 90               SUB B
 116+ 5017 28 1F            JR Z, .EXIT; same value as before
 117+ 5019 FD 21 D1 4F      LD IY,ANIMDEFPTR
 118+ 501D FA 3B 50         JP M, .INCREASE
 119+ 5020                  ; new value is lower than previous one
 120+ 5020 CD 53 50         CALL .SIZEDIFF
 121+ 5023 CD 6E 50         CALL .DECREASE_COMMON
 122+ 5026 2A D4 4F         LD HL,(ANIMSPRPTR)
 123+ 5029 AF               XOR A
 124+ 502A ED 42            SBC HL,BC
 125+ 502C 22 D4 4F         LD (ANIMSPRPTR),HL
 126+ 502F              .E1:
 127+ 502F 2A 10 40         LD HL,(FREEMEMPTR)
 128+ 5032 AF               XOR A
 129+ 5033 ED 42            SBC HL,BC
 130+ 5035 22 10 40         LD (FREEMEMPTR),HL
 131+ 5038              .EXIT:
 132+ 5038 FB               EI
 133+ 5039 E1           	POP HL
 134+ 503A C9           	RET
 135+ 503B              .INCREASE:
 136+ 503B ED 44            NEG
 137+ 503D CD 53 50         CALL .SIZEDIFF
 138+ 5040 CD 9A 50         CALL .INCREASE_COMMON
 139+ 5043 2A D4 4F         LD HL,(ANIMSPRPTR)
 140+ 5046 09               ADD HL,BC
 141+ 5047 22 D4 4F         LD (ANIMSPRPTR),HL
 142+ 504A              .E2:
 143+ 504A 2A 10 40         LD HL,(FREEMEMPTR)
 144+ 504D 09               ADD HL,BC
 145+ 504E 22 10 40         LD (FREEMEMPTR),HL
 146+ 5051 18 E5            JR .EXIT
 147+ 5053              .SIZEDIFF:
 148+ 5053 CD D6 4F         CALL Ax5
 149+ 5056 78               LD A,B
 150+ 5057 32 CD 4F         LD (ANIMITEMNUM),A
 151+ 505A 44               LD B,H
 152+ 505B 4D               LD C,L
 153+ 505C C9               RET ; BC=size difference in bytes
 154+ 505D              .SIZETOMOVE:
 155+ 505D D5               PUSH DE
 156+ 505E 2A 10 40         LD HL,(FREEMEMPTR)
 157+ 5061 FD 5E 00         LD E,(IY)
 158+ 5064 FD 56 01         LD D,(IY+1)
 159+ 5067 AF               XOR A
 160+ 5068 ED 52            SBC HL,DE
 161+ 506A 44               LD B,H
 162+ 506B 4D               LD C,L
 163+ 506C D1               POP DE
 164+ 506D C9               RET
 165+ 506E              .DECREASE_COMMON:
 166+ 506E FD 6E 00         LD L,(IY)
 167+ 5071 FD 66 01         LD H,(IY+1)
 168+ 5074 AF               XOR A
 169+ 5075 ED 42            SBC HL,BC
 170+ 5077 EB               EX DE,HL
 171+ 5078 C5               PUSH BC
 172+ 5079 CD 5D 50         CALL .SIZETOMOVE
 173+ 507C F3               DI
 174+ 507D 78               LD A,B
 175+ 507E B1               OR C
 176+ 507F 28 08            JR Z,.L1
 177+ 5081 FD 6E 00         LD L,(IY)
 178+ 5084 FD 66 01         LD H,(IY+1)
 179+ 5087 ED B0            LDIR
 180+ 5089              .L1:
 181+ 5089 C1               POP BC
 182+ 508A FD 6E 00         LD L,(IY)
 183+ 508D FD 66 01         LD H,(IY+1)
 184+ 5090 AF               XOR A
 185+ 5091 ED 42            SBC HL,BC
 186+ 5093 FD 75 00         LD (IY),L
 187+ 5096 FD 74 01         LD (IY+1),H
 188+ 5099 C9               RET
 189+ 509A              .INCREASE_COMMON:
 190+ 509A 2A 10 40         LD HL,(FREEMEMPTR)
 191+ 509D 2B               DEC HL
 192+ 509E AF               XOR A
 193+ 509F ED 42            SBC HL,BC
 194+ 50A1 EB               EX DE,HL
 195+ 50A2 C5               PUSH BC
 196+ 50A3 CD 5D 50         CALL .SIZETOMOVE
 197+ 50A6 F3               DI
 198+ 50A7 78               LD A,B
 199+ 50A8 B1               OR C
 200+ 50A9 28 06            JR Z,.L2
 201+ 50AB 2A 10 40         LD HL,(FREEMEMPTR)
 202+ 50AE 2B               DEC HL
 203+ 50AF ED B8            LDDR
 204+ 50B1              .L2:
 205+ 50B1 C1               POP BC
 206+ 50B2 FD 6E 00         LD L,(IY)
 207+ 50B5 FD 66 01         LD H,(IY+1)
 208+ 50B8 09               ADD HL,BC
 209+ 50B9 FD 75 00         LD (IY),L
 210+ 50BC FD 74 01         LD (IY+1),H
 211+ 50BF C9               RET
 212+ 50C0              ; *******************************************************************************************************
 213+ 50C0
 214+ 50C0              ; *******************************************************************************************************
 215+ 50C0              ; function to handle CALL ANIMITEMPAT basic extension
 216+ 50C0              ; ANIMITEMPAT ( BYTE id,
 217+ 50C0              ;               INT ticks,
 218+ 50C0              ;               BYTE pattern,
 219+ 50C0              ;               BYTE color )
 220+ 50C0              ; fills animation item data, returns an error if out of bounds
 221+ 50C0              ANIMITEMPAT:
 222+ 50C0                  ; opening (
 223+ 50C0 CD FD 56     	CALL CHKCHAR
 224+ 50C3 28           	DB '('
 225+ 50C4              	; get id
 226+ 50C4 DD 21 1C 52  	LD IX, GETBYT
 227+ 50C8 CD 59 01     	CALL CALBAS
 228+ 50CB F5               PUSH AF
 229+ 50CC                  ; check if out of bounds
 230+ 50CC 3C               INC A
 231+ 50CD 4F               LD C,A
 232+ 50CE 3A CD 4F         LD A,(ANIMITEMNUM)
 233+ 50D1 B9               CP C
 234+ 50D2 DA 13 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 235+ 50D5              	; comma
 236+ 50D5 CD FD 56     	CALL CHKCHAR
 237+ 50D8 2C           	DB ','
 238+ 50D9              	; get ticks
 239+ 50D9 DD 21 2F 54  	LD IX, FRMQNT
 240+ 50DD CD 59 01     	CALL CALBAS
 241+ 50E0 D5           	PUSH DE
 242+ 50E1              	; comma
 243+ 50E1 CD FD 56     	CALL CHKCHAR
 244+ 50E4 2C           	DB ','
 245+ 50E5              	; get pattern
 246+ 50E5 DD 21 1C 52  	LD IX, GETBYT
 247+ 50E9 CD 59 01     	CALL CALBAS
 248+ 50EC F5               PUSH AF
 249+ 50ED              	; comma
 250+ 50ED CD FD 56     	CALL CHKCHAR
 251+ 50F0 2C           	DB ','
 252+ 50F1              	; get color
 253+ 50F1 DD 21 1C 52  	LD IX, GETBYT
 254+ 50F5 CD 59 01     	CALL CALBAS
 255+ 50F8 F5               PUSH AF
 256+ 50F9              	; ending )
 257+ 50F9 CD FD 56     	CALL CHKCHAR
 258+ 50FC 29           	DB ')'
 259+ 50FD              .ENTRY:
 260+ 50FD E5               PUSH HL
 261+ 50FE DD E1            POP IX
 262+ 5100 D9               EXX
 263+ 5101 C1               POP BC ; color
 264+ 5102 D1               POP DE ; pattern
 265+ 5103 E1               POP HL ; ticks
 266+ 5104 D9               EXX
 267+ 5105 F1               POP AF
 268+ 5106 CD DF 4F         CALL GETnthANIMITEM
 269+ 5109 E5               PUSH HL
 270+ 510A FD E1            POP IY
 271+ 510C D9               EXX
 272+ 510D FD 36 00 00      LD (IY),0 ; type=0
 273+ 5111 FD 75 01         LD (IY+1),L
 274+ 5114 FD 74 02         LD (IY+2),H
 275+ 5117 FD 72 03         LD (IY+3),D
 276+ 511A FD 70 04         LD (IY+4),B
 277+ 511D
 278+ 511D DD E5            PUSH IX
 279+ 511F E1               POP HL
 280+ 5120 C9               RET
 281+ 5121              ; *******************************************************************************************************
 282+ 5121
 283+ 5121              ; *******************************************************************************************************
 284+ 5121              ; function to handle CALL ANIMITEMPTR basic extension
 285+ 5121              ; ANIMITEMPTR ( BYTE id,
 286+ 5121              ;               INT ticks,
 287+ 5121              ;               INT pointer,
 288+ 5121              ; fills animation item data, returns an error if out of bounds
 289+ 5121              ANIMITEMPTR_CMD:
 290+ 5121                  ; opening (
 291+ 5121 CD FD 56     	CALL CHKCHAR
 292+ 5124 28           	DB '('
 293+ 5125              	; get id
 294+ 5125 DD 21 1C 52  	LD IX, GETBYT
 295+ 5129 CD 59 01     	CALL CALBAS
 296+ 512C F5               PUSH AF
 297+ 512D                  ; check if out of bounds
 298+ 512D 3C               INC A
 299+ 512E 4F               LD C,A
 300+ 512F 3A CD 4F         LD A,(ANIMITEMNUM)
 301+ 5132 B9               CP C
 302+ 5133 DA 13 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 303+ 5136              	; comma
 304+ 5136 CD FD 56     	CALL CHKCHAR
 305+ 5139 2C           	DB ','
 306+ 513A              	; get ticks
 307+ 513A DD 21 2F 54  	LD IX, FRMQNT
 308+ 513E CD 59 01     	CALL CALBAS
 309+ 5141 D5           	PUSH DE
 310+ 5142              	; comma
 311+ 5142 CD FD 56     	CALL CHKCHAR
 312+ 5145 2C           	DB ','
 313+ 5146              	; get pointer
 314+ 5146 DD 21 2F 54  	LD IX, FRMQNT
 315+ 514A CD 59 01     	CALL CALBAS
 316+ 514D D5           	PUSH DE
 317+ 514E              	; ending )
 318+ 514E CD FD 56     	CALL CHKCHAR
 319+ 5151 29           	DB ')'
 320+ 5152              .ENTRY:
 321+ 5152 E5               PUSH HL
 322+ 5153 DD E1            POP IX
 323+ 5155 D9               EXX
 324+ 5156 D1               POP DE ; pointer
 325+ 5157 E1               POP HL ; ticks
 326+ 5158 D9               EXX
 327+ 5159 F1               POP AF
 328+ 515A CD DF 4F         CALL GETnthANIMITEM
 329+ 515D E5               PUSH HL
 330+ 515E FD E1            POP IY
 331+ 5160 D9               EXX
 332+ 5161 FD 36 00 01      LD (IY),1 ; type=1
 333+ 5165 FD 75 01         LD (IY+1),L
 334+ 5168 FD 74 02         LD (IY+2),H
 335+ 516B FD 73 03         LD (IY+3),E
 336+ 516E FD 72 04         LD (IY+4),D
 337+ 5171
 338+ 5171 DD E5            PUSH IX
 339+ 5173 E1               POP HL
 340+ 5174 C9               RET
 341+ 5175              ; *******************************************************************************************************
 342+ 5175
 343+ 5175              ; *******************************************************************************************************
 344+ 5175              ; function to handle CALL MAXANIMDEFS basic extension
 345+ 5175              ; MAXANIMDEFS (BYTE number)
 346+ 5175              ; sets new number and moves memory buffers as needed
 347+ 5175              MAXANIMDEFS:
 348+ 5175              	; opening (
 349+ 5175 CD FD 56     	CALL CHKCHAR
 350+ 5178 28           	DB '('
 351+ 5179              	; get value
 352+ 5179 DD 21 1C 52  	LD IX, GETBYT
 353+ 517D CD 59 01     	CALL CALBAS
 354+ 5180 F5               PUSH AF
 355+ 5181              	; ending )
 356+ 5181 CD FD 56     	CALL CHKCHAR
 357+ 5184 29           	DB ')'
 358+ 5185 F1               POP AF
 359+ 5186
 360+ 5186              	; save position
 361+ 5186 E5           	PUSH HL
 362+ 5187              .ENTRY:
 363+ 5187 47               LD B,A
 364+ 5188 3A D0 4F         LD A,(ANIMDEFNUM)
 365+ 518B 90               SUB B
 366+ 518C CA 38 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 367+ 518F FD 21 D4 4F      LD IY,ANIMSPRPTR
 368+ 5193 FA 9F 51         JP M, .INCREASE
 369+ 5196                  ; new value is lower than previous one
 370+ 5196 CD AA 51         CALL .SIZEDIFF
 371+ 5199 CD 6E 50         CALL MAXANIMITEMS.DECREASE_COMMON
 372+ 519C C3 2F 50         JP MAXANIMITEMS.E1
 373+ 519F              .INCREASE:
 374+ 519F ED 44            NEG
 375+ 51A1 CD AA 51         CALL .SIZEDIFF
 376+ 51A4 CD 9A 50         CALL MAXANIMITEMS.INCREASE_COMMON
 377+ 51A7 C3 4A 50         JP MAXANIMITEMS.E2
 378+ 51AA              .SIZEDIFF:
 379+ 51AA 26 00            LD H,0
 380+ 51AC 6F               LD L,A
 381+ 51AD CD EB 55         CALL HLx16
 382+ 51B0 78               LD A,B
 383+ 51B1 32 D0 4F         LD (ANIMDEFNUM),A
 384+ 51B4 44               LD B,H
 385+ 51B5 4D               LD C,L
 386+ 51B6 C9               RET ; BC=size difference in bytes
 387+ 51B7              ; *******************************************************************************************************
 388+ 51B7
 389+ 51B7              ; *******************************************************************************************************
 390+ 51B7              ; function to handle CALL ANIMDEF basic extension
 391+ 51B7              ; ANIMITEMPAT ( BYTE id,
 392+ 51B7              ;               BYTE size,
 393+ 51B7              ;               INT[] list )
 394+ 51B7              ; fills animation definition data, returns an error if out of bounds, or invalid type
 395+ 51B7              ANIMDEF:
 396+ 51B7                  ; opening (
 397+ 51B7 CD FD 56     	CALL CHKCHAR
 398+ 51BA 28           	DB '('
 399+ 51BB              	; get id
 400+ 51BB DD 21 1C 52  	LD IX, GETBYT
 401+ 51BF CD 59 01     	CALL CALBAS
 402+ 51C2 F5               PUSH AF
 403+ 51C3                  ; check if out of bounds
 404+ 51C3 3C               INC A
 405+ 51C4 4F               LD C,A
 406+ 51C5 3A D0 4F         LD A,(ANIMDEFNUM)
 407+ 51C8 B9               CP C
 408+ 51C9 DA 13 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 409+ 51CC              	; comma
 410+ 51CC CD FD 56     	CALL CHKCHAR
 411+ 51CF 2C           	DB ','
 412+ 51D0              	; get size
 413+ 51D0 DD 21 1C 52  	LD IX, GETBYT
 414+ 51D4 CD 59 01     	CALL CALBAS
 415+ 51D7 FE 10            CP 16
 416+ 51D9 D2 17 57         JP NC, OVERFLOW
 417+ 51DC B7               OR A
 418+ 51DD CA 17 57         JP Z, OVERFLOW
 419+ 51E0 F5           	PUSH AF
 420+ 51E1              	; comma
 421+ 51E1 CD FD 56     	CALL CHKCHAR
 422+ 51E4 2C           	DB ','
 423+ 51E5              	; get pointer to a list of animation items in integer array format
 424+ 51E5 3E 01            LD A,1
 425+ 51E7 32 A5 F6         LD (SUBFLG),A ; search for arrays only
 426+ 51EA DD 21 A4 5E  	LD IX, PTRGET
 427+ 51EE CD 59 01     	CALL CALBAS
 428+ 51F1                  ; contrary to documentation we get a pointer to array dimension in BC
 429+ 51F1                  ; and type in VALTYP
 430+ 51F1 AF               XOR A
 431+ 51F2 32 A5 F6         LD (SUBFLG),A ; if not reset will cause syntax errors
 432+ 51F5 3A 63 F6         LD A,(VALTYP)
 433+ 51F8 FE 02            CP 2
 434+ 51FA C2 0F 57         JP NZ,TYPE_MISMATCH
 435+ 51FD 0A               LD A,(BC)
 436+ 51FE FE 01            CP 1
 437+ 5200 C2 0F 57         JP NZ,TYPE_MISMATCH
 438+ 5203 03               INC BC
 439+ 5204 0A               LD A,(BC)
 440+ 5205 D1               POP DE
 441+ 5206 D5               PUSH DE
 442+ 5207 3C               INC A
 443+ 5208 BA               CP D
 444+ 5209 DA 13 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 445+ 520C 03          > INC BC
 445+ 520D 03          > INC BC
 446+ 520E C5               PUSH BC
 447+ 520F              	; ending )
 448+ 520F CD FD 56     	CALL CHKCHAR
 449+ 5212 29           	DB ')'
 450+ 5213              .ENTRY:
 451+ 5213 E5               PUSH HL
 452+ 5214 DD E1            POP IX
 453+ 5216 D1               POP DE ; pointer to INT array
 454+ 5217 C1               POP BC ; B=item number
 455+ 5218 F1               POP AF ; id
 456+ 5219 D5               PUSH DE
 457+ 521A CD E8 4F         CALL GETnthANIMDEF
 458+ 521D D1               POP DE
 459+ 521E 70               LD (HL),B
 460+ 521F              .L1:
 461+ 521F 23               INC HL
 462+ 5220 1A               LD A,(DE)
 463+ 5221 13          > INC DE
 463+ 5222 13          > INC DE
 464+ 5223 77               LD (HL),A
 465+ 5224 10 F9            DJNZ .L1
 466+ 5226 DD E5            PUSH IX
 467+ 5228 E1               POP HL
 468+ 5229 C9               RET
 469+ 522A              ; *******************************************************************************************************
 470+ 522A
 471+ 522A              ; *******************************************************************************************************
 472+ 522A              ; function to handle CALL MAXANIMSPRS basic extension
 473+ 522A              ; MAXANIMSPRS (BYTE number)
 474+ 522A              ; sets new number and moves memory buffers as needed
 475+ 522A              MAXANIMSPRS:
 476+ 522A              	; opening (
 477+ 522A CD FD 56     	CALL CHKCHAR
 478+ 522D 28           	DB '('
 479+ 522E              	; get value
 480+ 522E DD 21 1C 52  	LD IX, GETBYT
 481+ 5232 CD 59 01     	CALL CALBAS
 482+ 5235 F5               PUSH AF
 483+ 5236              	; ending )
 484+ 5236 CD FD 56     	CALL CHKCHAR
 485+ 5239 29           	DB ')'
 486+ 523A F1               POP AF
 487+ 523B
 488+ 523B              	; save position
 489+ 523B E5           	PUSH HL
 490+ 523C              .ENTRY:
 491+ 523C 47               LD B,A
 492+ 523D 3A D3 4F         LD A,(ANIMSPRNUM)
 493+ 5240 90               SUB B
 494+ 5241 CA 38 50         JP Z, MAXANIMITEMS.EXIT; same value as before
 495+ 5244 FD 21 10 40      LD IY,FREEMEMPTR
 496+ 5248 FA 54 52         JP M, .INCREASE
 497+ 524B                  ; new value is lower than previous one
 498+ 524B CD 73 52         CALL .SIZEDIFF
 499+ 524E CD 6E 50         CALL MAXANIMITEMS.DECREASE_COMMON
 500+ 5251 C3 38 50         JP MAXANIMITEMS.EXIT
 501+ 5254              .INCREASE:
 502+ 5254 ED 44            NEG
 503+ 5256 F5               PUSH AF; save difference for later to set active flag to 0 of new entires
 504+ 5257 CD 73 52         CALL .SIZEDIFF
 505+ 525A CD 9A 50         CALL MAXANIMITEMS.INCREASE_COMMON
 506+ 525D AF               XOR A
 507+ 525E ED 42            SBC HL,BC ; location of new stuff
 508+ 5260 F1               POP AF
 509+ 5261 47               LD B,A
 510+ 5262 11 08 00         LD DE,8
 511+ 5265 E5               PUSH HL
 512+ 5266 DD E1            POP IX
 513+ 5268              .L1:
 514+ 5268 DD 36 06 00      LD (IX+6),0
 515+ 526C DD 19            ADD IX,DE
 516+ 526E 10 F8            DJNZ .L1
 517+ 5270 C3 38 50         JP MAXANIMITEMS.EXIT
 518+ 5273              .SIZEDIFF:
 519+ 5273 26 00            LD H,0
 520+ 5275 6F               LD L,A
 521+ 5276 CD EC 55         CALL HLx8
 522+ 5279 78               LD A,B
 523+ 527A 32 D3 4F         LD (ANIMSPRNUM),A
 524+ 527D 44               LD B,H
 525+ 527E 4D               LD C,L
 526+ 527F C9               RET ; BC=size difference in bytes
 527+ 5280              ; *******************************************************************************************************
 528+ 5280
 529+ 5280              ; *******************************************************************************************************
 530+ 5280              ; function to handle CALL ANIMSPRITE basic extension
 531+ 5280              ; ANIMSPRITE ( BYTE id,
 532+ 5280              ;              BYTE sprite_number,
 533+ 5280              ;              BYTE animation_definition_id,
 534+ 5280              ;              BYTE cyclic_flag )
 535+ 5280              ; fills sprite animation data, returns an error if out of bounds, or invalid type
 536+ 5280              ANIMSPRITE:
 537+ 5280                  ; opening (
 538+ 5280 CD FD 56     	CALL CHKCHAR
 539+ 5283 28           	DB '('
 540+ 5284              	; get sprite animation id
 541+ 5284 DD 21 1C 52  	LD IX, GETBYT
 542+ 5288 CD 59 01     	CALL CALBAS
 543+ 528B F5               PUSH AF
 544+ 528C 3C               INC A
 545+ 528D 4F               LD C,A
 546+ 528E 3A D3 4F         LD A,(ANIMSPRNUM)
 547+ 5291 B9               CP C
 548+ 5292 DA 13 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 549+ 5295              	; comma
 550+ 5295 CD FD 56     	CALL CHKCHAR
 551+ 5298 2C           	DB ','
 552+ 5299              	; get sprite number
 553+ 5299 DD 21 1C 52  	LD IX, GETBYT
 554+ 529D CD 59 01     	CALL CALBAS
 555+ 52A0 F5               PUSH AF
 556+ 52A1                  ; check if out of bounds
 557+ 52A1 FE 20            CP 32
 558+ 52A3 D2 13 57         JP NC, SUBSCRIPT_OUT_OF_RANGE
 559+ 52A6              	; comma
 560+ 52A6 CD FD 56     	CALL CHKCHAR
 561+ 52A9 2C           	DB ','
 562+ 52AA              	; get animation definition id
 563+ 52AA DD 21 1C 52  	LD IX, GETBYT
 564+ 52AE CD 59 01     	CALL CALBAS
 565+ 52B1 F5               PUSH AF
 566+ 52B2 3C               INC A
 567+ 52B3 4F               LD C,A
 568+ 52B4 3A D0 4F         LD A,(ANIMDEFNUM)
 569+ 52B7 B9               CP C
 570+ 52B8 DA 13 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 571+ 52BB              	; comma
 572+ 52BB CD FD 56     	CALL CHKCHAR
 573+ 52BE 2C           	DB ','
 574+ 52BF              	; get cyclic flag
 575+ 52BF DD 21 1C 52  	LD IX, GETBYT
 576+ 52C3 CD 59 01         CALL CALBAS
 577+ 52C6 F5           	PUSH AF
 578+ 52C7              	; ending )
 579+ 52C7 CD FD 56     	CALL CHKCHAR
 580+ 52CA 29           	DB ')'
 581+ 52CB              .ENTRY:
 582+ 52CB E5               PUSH HL
 583+ 52CC DD E1            POP IX
 584+ 52CE D9               EXX
 585+ 52CF D1               POP DE ; cyclic
 586+ 52D0 C1               POP BC ; animation definition id
 587+ 52D1 E1               POP HL ; sprite number
 588+ 52D2 D9               EXX
 589+ 52D3 F1               POP AF ; sprite animation id
 590+ 52D4 CD F4 4F         CALL GETnthSPRANIM
 591+ 52D7 E5               PUSH HL
 592+ 52D8 FD E1            POP IY
 593+ 52DA D9               EXX
 594+ 52DB FD 74 00         LD (IY),H
 595+ 52DE FD 70 04         LD (IY+4),B
 596+ 52E1 FD 72 05         LD (IY+5),D
 597+ 52E4                  ;LD (IY+6),0
 598+ 52E4 DD E5            PUSH IX
 599+ 52E6 E1               POP HL
 600+ 52E7 C9               RET
 601+ 52E8              ; *******************************************************************************************************
 602+ 52E8
 603+ 52E8              ; *******************************************************************************************************
 604+ 52E8              ; function to handle CALL ANIMSTART basic extension
 605+ 52E8              ; two forms
 606+ 52E8              ; ANIMSTART ( BYTE id )
 607+ 52E8              ; or
 608+ 52E8              ; ANIMSTART ( BYTE item_number,
 609+ 52E8              ;             INT[] sprite_animations )
 610+ 52E8              ; sets active flag to 1
 611+ 52E8              ANIMSTART:
 612+ 52E8 3E 01            LD A,1
 613+ 52EA 18 01            JR ANIMSTARTSTOP_COMMON
 614+ 52EC              ; *******************************************************************************************************
 615+ 52EC              ; *******************************************************************************************************
 616+ 52EC              ; function to handle CALL ANIMSTOP basic extension
 617+ 52EC              ; two forms
 618+ 52EC              ; ANIMSTOP ( BYTE id )
 619+ 52EC              ; or
 620+ 52EC              ; ANIMSTOP ( BYTE item_number,
 621+ 52EC              ;            INT[] sprite_animations )
 622+ 52EC              ; sets active flag to 1
 623+ 52EC              ANIMSTOP:
 624+ 52EC AF               XOR A
 625+ 52ED              ANIMSTARTSTOP_COMMON:
 626+ 52ED 32 6A 53         LD (ANIMSTARTSTOP_COMMON.VALUE+3),A
 627+ 52F0              ; *******************************************************************************************************
 628+ 52F0                  ; opening (
 629+ 52F0 CD FD 56     	CALL CHKCHAR
 630+ 52F3 28           	DB '('
 631+ 52F4              	; get sprite animation id or array size
 632+ 52F4 DD 21 1C 52  	LD IX,GETBYT
 633+ 52F8 CD 59 01     	CALL CALBAS
 634+ 52FB F5               PUSH AF
 635+ 52FC                  ; check if comma present
 636+ 52FC CD 07 57         CALL GETPREVCHAR
 637+ 52FF 23               INC HL
 638+ 5300 FE 2C            CP ','
 639+ 5302 28 0C            JR Z,.L1
 640+ 5304 FE 29            CP ')'
 641+ 5306 C2 1B 57         JP NZ,SYNTAX_ERROR
 642+ 5309                  ; ok so single argument variant
 643+ 5309 F1               POP AF
 644+ 530A E5               PUSH HL
 645+ 530B CD 56 53         CALL .SETVALUE
 646+ 530E E1               POP HL
 647+ 530F C9               RET
 648+ 5310              .L1:
 649+ 5310                  ; array of items
 650+ 5310              	; get pointer to a list of animation items in integer array format
 651+ 5310 3E 01            LD A,1
 652+ 5312 32 A5 F6         LD (SUBFLG),A ; search for arrays only
 653+ 5315 DD 21 A4 5E  	LD IX, PTRGET
 654+ 5319 CD 59 01     	CALL CALBAS
 655+ 531C                  ; contrary to documentation we get a pointer to array dimension in BC
 656+ 531C                  ; and type in VALTYP
 657+ 531C AF               XOR A
 658+ 531D 32 A5 F6         LD (SUBFLG),A ; if not reset will cause syntax errors
 659+ 5320 3A 63 F6         LD A,(VALTYP)
 660+ 5323 FE 02            CP 2
 661+ 5325 C2 0F 57         JP NZ,TYPE_MISMATCH
 662+ 5328 0A               LD A,(BC)
 663+ 5329 FE 01            CP 1
 664+ 532B C2 0F 57         JP NZ,TYPE_MISMATCH
 665+ 532E 03               INC BC
 666+ 532F 0A               LD A,(BC)
 667+ 5330 D1               POP DE
 668+ 5331 D5               PUSH DE
 669+ 5332 3C               INC A
 670+ 5333 BA               CP D
 671+ 5334 DA 13 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 672+ 5337 03          > INC BC
 672+ 5338 03          > INC BC
 673+ 5339 C5               PUSH BC
 674+ 533A              	; ending )
 675+ 533A CD FD 56     	CALL CHKCHAR
 676+ 533D 29           	DB ')'
 677+ 533E D1               POP DE ; array pointer
 678+ 533F C1               POP BC ; number of items
 679+ 5340 78               LD A,B
 680+ 5341 B7               OR A
 681+ 5342 CA 13 57         JP Z,SUBSCRIPT_OUT_OF_RANGE
 682+ 5345 E5               PUSH HL
 683+ 5346 F3               DI
 684+ 5347              .L2:
 685+ 5347 C5               PUSH BC
 686+ 5348 1A               LD A,(DE)
 687+ 5349 13          > INC DE
 687+ 534A 13          > INC DE
 688+ 534B D5               PUSH DE
 689+ 534C CD 56 53         CALL .SETVALUE
 690+ 534F D1               POP DE
 691+ 5350 C1               POP BC
 692+ 5351 10 F4            DJNZ .L2
 693+ 5353 FB               EI
 694+ 5354 E1               POP HL
 695+ 5355 C9               RET
 696+ 5356
 697+ 5356              .SETVALUE:
 698+ 5356 47               LD B,A
 699+ 5357 3C               INC A
 700+ 5358 4F               LD C,A
 701+ 5359 3A D3 4F         LD A,(ANIMSPRNUM)
 702+ 535C B9               CP C
 703+ 535D DA 13 57         JP C,SUBSCRIPT_OUT_OF_RANGE
 704+ 5360 78               LD A,B
 705+ 5361 CD F4 4F         CALL GETnthSPRANIM
 706+ 5364 E5               PUSH HL
 707+ 5365 DD E1            POP IX
 708+ 5367              .VALUE:
 709+ 5367 DD 36 06 01      LD (IX+6),1 ; active flag
 710+ 536B 3A 6A 53         LD A,(.VALUE+3)
 711+ 536E B7               OR A
 712+ 536F C8               RET Z
 713+ 5370 DD 36 03 00      LD (IX+3),0 ; current item
 714+ 5374 C3 E5 53         JP SETUP_ANIM_STEP
 715+ 5377              ; *******************************************************************************************************
 716+ 5377
 717+ 5377              ; *******************************************************************************************************
 718+ 5377              ; function processes animations during vblank period
 719+ 5377              PROCESS_ANIMATIONS:
 720+ 5377 3A D3 4F         LD A,(ANIMSPRNUM)
 721+ 537A B7               OR A
 722+ 537B C8               RET Z; no animations defined
 723+ 537C 47               LD B,A
 724+ 537D DD 2A D4 4F      LD IX,(ANIMSPRPTR)
 725+ 5381              .L1:
 726+ 5381 C5               PUSH BC
 727+ 5382 DD 7E 06         LD A,(IX+6); active
 728+ 5385 B7               OR A
 729+ 5386 28 16            JR Z,.SKIP ; inactive animation
 730+ 5388 DD 6E 01         LD L,(IX+1)
 731+ 538B DD 66 02         LD H,(IX+2) ; HL=end time
 732+ 538E ED 5B 9E FC      LD DE,(JIFFY)
 733+ 5392 AF               XOR A
 734+ 5393 ED 52            SBC HL,DE
 735+ 5395 F2 9E 53         JP P,.SKIP ; time until next animation item not yet reached
 736+ 5398 DD 34 03         INC (IX+3) ; current animation item
 737+ 539B CD E5 53         CALL SETUP_ANIM_STEP
 738+ 539E              .SKIP:
 739+ 539E 11 08 00         LD DE,8
 740+ 53A1 DD 19            ADD IX,DE
 741+ 53A3 C1               POP BC
 742+ 53A4 10 DB            DJNZ .L1
 743+ 53A6 C9               RET
 744+ 53A7              ; *******************************************************************************************************
 745+ 53A7
 746+ 53A7              ; *******************************************************************************************************
 747+ 53A7              ; function will setup sprite animation after current item change
 748+ 53A7              ; input A=current animation definition
 749+ 53A7              ; input IX=pointer to sprite animation
 750+ 53A7              ; output IY=pointer to animation item
 751+ 53A7              ; CF=1 error or non-cyclic animation ended, in both cases set active flag to 0
 752+ 53A7              ; basically sets new end time for current animation
 753+ 53A7              INIT_CURRENT_ANIMATION:
 754+ 53A7 CD E8 4F         CALL GETnthANIMDEF
 755+ 53AA 7E               LD A,(HL); number of animation items in the animation definition
 756+ 53AB DD BE 03         CP (IX+3) ; current animation item
 757+ 53AE 20 0A            JR NZ,.L3 ; last item not reached
 758+ 53B0                  ; last item reached
 759+ 53B0 DD 7E 05         LD A,(IX+5) ; cyclic flag
 760+ 53B3 B7               OR A
 761+ 53B4 28 2D            JR Z,.ERROR ; non-cyclic animation
 762+ 53B6                  ; cyclic animation, restart
 763+ 53B6 DD 36 03 00      LD (IX+3),0; current item
 764+ 53BA              .L3:
 765+ 53BA                  ; HL = animation definition
 766+ 53BA 23               INC HL ; skip animation definition size field
 767+ 53BB 16 00            LD D,0
 768+ 53BD DD 5E 03         LD E,(IX+3); current item
 769+ 53C0 19               ADD HL,DE
 770+ 53C1 4E               LD C,(HL) ; current animation item
 771+ 53C2 0C               INC C
 772+ 53C3 3A CD 4F         LD A,(ANIMITEMNUM)
 773+ 53C6 B9               CP C
 774+ 53C7 38 1A            JR C,.ERROR ; invalid animation item, stop animation
 775+ 53C9 0D               DEC C
 776+ 53CA 79               LD A,C
 777+ 53CB CD DF 4F         CALL GETnthANIMITEM
 778+ 53CE E5               PUSH HL
 779+ 53CF FD E1            POP IY ; IY=animation item
 780+ 53D1 2A 9E FC         LD HL,(JIFFY)
 781+ 53D4 FD 5E 01         LD E,(IY+1)
 782+ 53D7 FD 56 02         LD D,(IY+2) ; duration
 783+ 53DA 19               ADD HL,DE
 784+ 53DB DD 75 01         LD (IX+1),L
 785+ 53DE DD 74 02         LD (IX+2),H ; end time for current item
 786+ 53E1              .EXIT:
 787+ 53E1 AF               XOR A
 788+ 53E2 C9               RET
 789+ 53E3              .ERROR:
 790+ 53E3 37               SCF
 791+ 53E4 C9               RET
 792+ 53E5              ; *******************************************************************************************************
 793+ 53E5
 794+ 53E5              ; *******************************************************************************************************
 795+ 53E5              ; function will display currect item and set up expiry time
 796+ 53E5              ; it will also stop the animation if expired
 797+ 53E5              ; sets sprite update flag if any changes in sprite data made
 798+ 53E5              ; input IX=current sprite animation
 799+ 53E5              SETUP_ANIM_STEP:
 800+ 53E5 DD 4E 04         LD C,(IX+4) ; animation definition ID
 801+ 53E8 0C               INC C
 802+ 53E9 3A D0 4F         LD A,(ANIMDEFNUM)
 803+ 53EC B9               CP C
 804+ 53ED 30 05            JR NC,.L2
 805+ 53EF                  ; given animation item is outside of bounds, deactivate animation
 806+ 53EF              .STOPANIM:
 807+ 53EF DD 36 06 00      LD (IX+6),0
 808+ 53F3 C9               RET
 809+ 53F4              .L2:
 810+ 53F4 0D               DEC C
 811+ 53F5 79               LD A,C
 812+ 53F6 CD A7 53         CALL INIT_CURRENT_ANIMATION
 813+ 53F9 38 F4            JR C, .STOPANIM
 814+ 53FB FD 7E 00         LD A,(IY) ; type of animation item
 815+ 53FE B7               OR A
 816+ 53FF CA 35 54         JP Z,.L4 ; change pattern and/or color
 817+ 5402                  ; change sprite pattern definition
 818+ 5402 DD 7E 00         LD A,(IX) ; sprite number
 819+ 5405 CD 86 4D         CALL GETnthSPRATTR
 820+ 5408 23          > INC HL ; skip y and x
 820+ 5409 23          > INC HL
 820+ 540A 23          > INC HL
 820+ 540B 23          > INC HL
 821+ 540C 7E               LD A,(HL); current pattern
 822+ 540D 26 00            LD H,0
 823+ 540F 6F               LD L,A
 824+ 5410 3A E0 F3         LD A,(REG1SAV)
 825+ 5413 E6 02            AND 2
 826+ 5415 20 07            JR NZ,.L6
 827+ 5417                  ; 8x8 sprite
 828+ 5417 CD EC 55         CALL HLx8
 829+ 541A 06 08            LD B,8
 830+ 541C 18 05            JR .L5
 831+ 541E              .L6:
 832+ 541E CD EA 55         CALL HLx32
 833+ 5421 06 20            LD B,32
 834+ 5423              .L5:
 835+ 5423 ED 5B 26 F9      LD DE,(PATBAS)
 836+ 5427 19               ADD HL,DE
 837+ 5428 CD D9 55         CALL SETWRT_LOCAL
 838+ 542B FD 6E 03         LD L,(IY+3)
 839+ 542E FD 66 04         LD H,(IY+4) ; pointer to sprite patter data
 840+ 5431 CD E4 55         CALL BBYTECOPY
 841+ 5434 C9               RET
 842+ 5435              .L4:
 843+ 5435                  ; change pattern and color in sprite attributes table
 844+ 5435 DD 7E 00         LD A,(IX) ; sprite number
 845+ 5438 CD 86 4D         CALL GETnthSPRATTR
 846+ 543B 23          > INC HL ; skip y and x
 846+ 543C 23          > INC HL
 846+ 543D 23          > INC HL
 846+ 543E 23          > INC HL
 847+ 543F FD 7E 03         LD A,(IY+3) ; new pattern
 848+ 5442 77               LD (HL),A
 849+ 5443 23          > INC HL
 849+ 5444 23          > INC HL
 850+ 5445 FD 7E 04         LD A,(IY+4) ; new color
 851+ 5448 77               LD (HL),A
 852+ 5449 2A 7E 4D         LD HL,(SPRATR_UPDATE_FLAG)
 853+ 544C 36 01            LD (HL),1
 854+ 544E C9               RET
 855+ 544F              ; *******************************************************************************************************
 856+ 544F
# file closed: asm\ANIMATION.asm
 129  544F               ENDIF
 130  544F
 131  544F              ; temp variables for BLIT, TILE functions
 132  544F               IF (BLIT_CMDS + TILE_CMDS > 0)
 133  544F              BLIT_TMP:
 134  544F              TILETMP1:
 135  544F              BLIT_TMP1:
 136  544F 00 00         DW 0
 137  5451              TILETMP2:
 138  5451              BLIT_TMP2:
 139  5451 00 00         DW 0
 140  5453                IFDEF CMDS_WITH_PARAMETERS
 141  5453              BLIT_STRUCT:
 142  5453 00 00 00...   DS 17
 143  5457                ENDIF
 144  5457               ENDIF
 145  5464
 146  5464               IF (VRAM_CMDS + TILE_CMDS + BOX_CMDS > 0)
 147  5464              VRAM_UPDATE_IN_PROGRESS:
 148  5464 00            DB 0
 149  5465               ENDIF
 150  5465
 151  5465              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 152  5465              ; per starting letter, if no commands with this letter, NULL value
 153  5465              CMDS:
 154  5465               IF (ANIM_CMDS == 1)
 155  5465 8E 55        	DW CMDS_A ;
 156  5467               ELSE
 157  5467 ~                DW 0 ; A
 158  5467               ENDIF
 159  5467               IF (BLIT_CMDS + BOX_CMDS > 0)
 160  5467 59 55            DW CMDS_B ; B
 161  5469               ELSE
 162  5469 ~            	DW 0
 163  5469               ENDIF
 164  5469 00 00            DW 0 ; C
 165  546B 00 00            DW 0 ; D
 166  546D 00 00            DW 0 ; E
 167  546F               IF (VRAM_CMDS + RAM_CMDS > 0)
 168  546F D7 54            DW CMDS_F; F
 169  5471               ELSE
 170  5471 ~            	DW 0
 171  5471               ENDIF
 172  5471               IF (GENCAL_CMD > 0)
 173  5471 EA 54            DW CMDS_G; G
 174  5473               ELSE
 175  5473 ~            	DW 0
 176  5473               ENDIF
 177  5473 00 00            DW 0 ; H
 178  5475 00 00            DW 0 ; I
 179  5477 00 00            DW 0 ; J
 180  5479 00 00            DW 0 ; K
 181  547B 00 00            DW 0 ; L
 182  547D               IF (VRAM_CMDS + RAM_CMDS + ANIM_CMDS > 0)
 183  547D 99 54            DW CMDS_M ; M
 184  547F               ELSE
 185  547F ~            	DW 0
 186  547F               ENDIF
 187  547F 00 00            DW 0 ; N
 188  5481 00 00            DW 0 ; O
 189  5483 00 00            DW 0 ; P
 190  5485 00 00            DW 0 ; Q
 191  5487 00 00            DW 0 ; R
 192  5489               IF (SOUND_CMDS + SPRITE_CMDS > 0)
 193  5489 FE 54            DW CMDS_S ; S
 194  548B               ELSE
 195  548B ~            	DW 0
 196  548B               ENDIF
 197  548B               IF (TILE_CMDS > 0)
 198  548B 79 55            DW CMDS_T ; T
 199  548D               ELSE
 200  548D ~            	DW 0
 201  548D               ENDIF
 202  548D 00 00            DW 0 ; U
 203  548F               IF (VRAM_CMDS > 0)
 204  548F F4 54            DW CMDS_V ; V
 205  5491               ELSE
 206  5491 ~            	DW 0
 207  5491               ENDIF
 208  5491 00 00            DW 0 ; W
 209  5493 00 00            DW 0 ; X
 210  5495 00 00            DW 0 ; Y
 211  5497 00 00            DW 0 ; Z
 212  5499
 213  5499              CMDS_M:
 214  5499               IF (VRAM_CMDS == 1)
 215  5499 4D 45 4D 56      DB "MEMVRM", 0
 215  549D 52 4D 00
 216  54A0 6E 58            DW MEMVRM
 217  54A2               ENDIF
 218  54A2               IF (RAM_CMDS == 1)
 219  54A2 4D 45 4D 43  	DB "MEMCPY", 0
 219  54A6 50 59 00
 220  54A9 24 57        	DW MEMCPY
 221  54AB               ENDIF
 222  54AB               IF (ANIM_CMDS == 1)
 223  54AB 4D 41 58 41  	DB "MAXANIMITEMS",0
 223  54AF 4E 49 4D 49
 223  54B3 54 45 4D 53
 223  54B7 00
 224  54B8 00 50        	DW MAXANIMITEMS
 225  54BA 4D 41 58 41  	DB "MAXANIMDEFS",0
 225  54BE 4E 49 4D 44
 225  54C2 45 46 53 00
 226  54C6 75 51        	DW MAXANIMDEFS
 227  54C8 4D 41 58 41  	DB "MAXANIMSPRS",0
 227  54CC 4E 49 4D 53
 227  54D0 50 52 53 00
 228  54D4 2A 52        	DW MAXANIMSPRS
 229  54D6               ENDIF
 230  54D6               IF (VRAM_CMDS + RAM_CMDS + ANIM_CMDS > 0)
 231  54D6 00           	DB 0
 232  54D7               ENDIF
 233  54D7              CMDS_F:
 234  54D7               IF (VRAM_CMDS == 1)
 235  54D7 46 49 4C 56      DB "FILVRM", 0
 235  54DB 52 4D 00
 236  54DE 67 57            DW FILVRM
 237  54E0               ENDIF
 238  54E0               IF (RAM_CMDS == 1)
 239  54E0 46 49 4C 52      DB "FILRAM", 0
 239  54E4 41 4D 00
 240  54E7 B7 57            DW FILRAM
 241  54E9               ENDIF
 242  54E9               IF (VRAM_CMDS + RAM_CMDS > 0)
 243  54E9 00               DB 0
 244  54EA               ENDIF
 245  54EA              CMDS_G:
 246  54EA               IF (GENCAL_CMD == 1)
 247  54EA 47 45 4E 43      DB "GENCAL", 0
 247  54EE 41 4C 00
 248  54F1 15 58            DW GENCAL
 249  54F3               ENDIF
 250  54F3               IF (GENCAL_CMD > 0)
 251  54F3 00           	DB	0
 252  54F4               ENDIF
 253  54F4              CMDS_V:
 254  54F4               IF (VRAM_CMDS == 1)
 255  54F4 56 52 4D 4D  	DB "VRMMEM", 0
 255  54F8 45 4D 00
 256  54FB EF 58        	DW VRMMEM
 257  54FD               ENDIF
 258  54FD               IF (VRAM_CMDS > 0)
 259  54FD 00           	DB 0
 260  54FE               ENDIF
 261  54FE              CMDS_S:
 262  54FE               IF (SPRITE_CMDS == 1)
 263  54FE 53 50 52 53  	DB "SPRSET", 0
 263  5502 45 54 00
 264  5505 9B 4E        	DW SPRSET
 265  5507 53 50 52 47  	DB "SPRGRPMOV", 0
 265  550B 52 50 4D 4F
 265  550F 56 00
 266  5511 4C 4F        	DW SPRGRPMOV
 267  5513               ENDIF
 268  5513               IF (SOUND_CMDS == 1)
 269  5513 53 4E 44 53  	DB "SNDSFX", 0
 269  5517 46 58 00
 270  551A D0 59        	DW SNDSFX
 271  551C 53 4E 44 50  	DB "SNDPLYON", 0
 271  5520 4C 59 4F 4E
 271  5524 00
 272  5525 9A 59        	DW SNDPLYON
 273  5527 53 4E 44 50  	DB "SNDPLYOFF", 0
 273  552B 4C 59 4F 46
 273  552F 46 00
 274  5531 AD 59        	DW SNDPLYOFF
 275  5533 53 4E 44 50  	DB "SNDPLYINI", 0
 275  5537 4C 59 49 4E
 275  553B 49 00
 276  553D 50 59        	DW SNDPLYINIT
 277  553F               ENDIF
 278  553F               IF (SPRITE_CMDS == 1)
 279  553F 53 50 52 45  	DB "SPRENABLE", 0
 279  5543 4E 41 42 4C
 279  5547 45 00
 280  5549 46 4E        	DW SPRENABLE
 281  554B 53 50 52 44  	DB "SPRDISABLE", 0
 281  554F 49 53 41 42
 281  5553 4C 45 00
 282  5556 96 4E        	DW SPRDISABLE
 283  5558               ENDIF
 284  5558               IF (SOUND_CMDS + SPRITE_CMDS > 0)
 285  5558 00           	DB 0
 286  5559               ENDIF
 287  5559              CMDS_B:
 288  5559               IF (BLIT_CMDS == 1)
 289  5559 42 4C 49 54  	DB "BLIT", 0
 289  555D 00
 290  555E A7 5B        	DW BLIT
 291  5560               ENDIF
 292  5560               IF (BOX_CMDS == 1)
 293  5560 42 4F 58 4D  	DB "BOXMEMCPY", 0
 293  5564 45 4D 43 50
 293  5568 59 00
 294  556A DF 5E        	DW BOXMEMCPY
 295  556C 42 4F 58 4D  	DB "BOXMEMVRM", 0
 295  5570 45 4D 56 52
 295  5574 4D 00
 296  5576 13 5F        	DW BOXMEMVRM
 297  5578               ENDIF
 298  5578               IF (BLIT_CMDS + BOX_CMDS > 0)
 299  5578 00           	DB 0
 300  5579               ENDIF
 301  5579              CMDS_T:
 302  5579               IF (TILE_CMDS == 1)
 303  5579 54 49 4C 45  	DB "TILERAM", 0
 303  557D 52 41 4D 00
 304  5581 EB 5C        	DW TILERAM
 305  5583 54 49 4C 45  	DB "TILEVRM", 0
 305  5587 56 52 4D 00
 306  558B EE 5D        	DW TILEVRM
 307  558D               ENDIF
 308  558D               IF (TILE_CMDS > 0)
 309  558D 00           	DB 0
 310  558E               ENDIF
 311  558E              CMDS_A:
 312  558E               IF (ANIM_CMDS == 1)
 313  558E 41 4E 49 4D  	DB "ANIMSTART",0
 313  5592 53 54 41 52
 313  5596 54 00
 314  5598 E8 52        	DW ANIMSTART
 315  559A 41 4E 49 4D  	DB "ANIMSTOP",0
 315  559E 53 54 4F 50
 315  55A2 00
 316  55A3 EC 52        	DW ANIMSTOP
 317  55A5 41 4E 49 4D  	DB "ANIMITEMPAT",0
 317  55A9 49 54 45 4D
 317  55AD 50 41 54 00
 318  55B1 C0 50        	DW ANIMITEMPAT
 319  55B3 41 4E 49 4D  	DB "ANIMITEMPTR",0
 319  55B7 49 54 45 4D
 319  55BB 50 54 52 00
 320  55BF 21 51        	DW ANIMITEMPTR_CMD
 321  55C1 41 4E 49 4D  	DB "ANIMDEF",0
 321  55C5 44 45 46 00
 322  55C9 B7 51        	DW ANIMDEF
 323  55CB 41 4E 49 4D  	DB "ANIMSPRITE",0
 323  55CF 53 50 52 49
 323  55D3 54 45 00
 324  55D6 80 52        	DW ANIMSPRITE
 325  55D8 00           	DB 0
 326  55D9               ENDIF
 327  55D9
 328  55D9               IF (VRAM_CMDS + TILE_CMDS + SPRITE_CMDS > 0)
 329  55D9              ; ****************************************************************************************************
 330  55D9              ; function sets VRAM address
 331  55D9              ; input HL=address
 332  55D9              ; modifies AF
 333  55D9              SETWRT_LOCAL:
 334  55D9 7D           	LD	A, L
 335  55DA D3 99        	OUT	(099H), A
 336  55DC 7C           	LD	A, H
 337  55DD E6 3F        	AND	03FH
 338  55DF F6 40        	OR	040H
 339  55E1 D3 99        	OUT	(099H), A
 340  55E3 C9           	RET
 341  55E4              ; ****************************************************************************************************
 342  55E4               ENDIF
 343  55E4
 344  55E4               IF (VRAM_CMDS + TILE_CMDS > 0)
 345  55E4              ; ****************************************************************************************************
 346  55E4              ; function copies data from RAM to VRAM
 347  55E4              ; input HL=address in RAM
 348  55E4              ; input B=count
 349  55E4              ; modifies AF
 350  55E4              BBYTECOPY:
 351  55E4 ED A3        	OUTI
 352  55E6 C2 E4 55     	JP	NZ, BBYTECOPY
 353  55E9 C9           	RET
 354  55EA              ; ****************************************************************************************************
 355  55EA               ENDIF
 356  55EA
 357  55EA              ; ****************************************************************************************************
 358  55EA              ; function multiplies HL by 32
 359  55EA              HLx32:
 360  55EA 29           	ADD HL,HL
 361  55EB              ; ****************************************************************************************************
 362  55EB              ; function multiplies HL by 16
 363  55EB              HLx16:
 364  55EB 29           	ADD HL,HL
 365  55EC              ; ****************************************************************************************************
 366  55EC              ; function multiplies HL by 8
 367  55EC              HLx8:
 368  55EC 29          > ADD HL, HL
 368  55ED 29          > ADD HL, HL
 368  55EE 29          > ADD HL, HL
 369  55EF C9           	RET
 370  55F0              ; ****************************************************************************************************
 371  55F0
 372  55F0              ; ****************************************************************************************************
 373  55F0              ; function gets slot and subslot data for specific page
 374  55F0              ; input A=page (0, 1 or 2)
 375  55F0              ; output B = 0A8H register value
 376  55F0              ; output D = 0 is no subslots, 1 if yes
 377  55F0              ; output C = 0A8H value when page 3 slot equals to requested page slot
 378  55F0              ; output E = subslot value if present
 379  55F0              ; modifies AF, BC, DE, HL
 380  55F0              GET_PAGE_INFO:
 381  55F0 6F               LD L, A
 382  55F1 C6 C1            ADD A, low (EXPTBL)
 383  55F3 32 FD 55         LD (GET_PAGE_INFO_L1+1), A
 384  55F6 DB A8            IN A, (0A8H)
 385  55F8 47               LD B, A
 386  55F9 E6 3F            AND 03FH
 387  55FB 4F               LD C, A
 388  55FC              GET_PAGE_INFO_L1:
 389  55FC 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 390  55FF E6 80            AND 080H
 391  5601 28 1B            JR Z, GET_PAGE_INFO_L2
 392  5603                  ; expanded
 393  5603 2D               DEC L
 394  5604 FA 23 56         JP M, GET_PAGE_INFO_L3
 395  5607 2D               DEC L
 396  5608 FA 21 56         JP M, GET_PAGE_INFO_L4
 397  560B                  ; page 2
 398  560B 07               RLCA
 399  560C 07               RLCA
 400  560D              GET_PAGE_INFO_L5:
 401  560D E6 C0            AND 0C0H
 402  560F B1               OR C
 403  5610 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 404  5612 4F               LD C, A
 405  5613 3A FF FF         LD A, (0FFFFH)
 406  5616 2F               CPL
 407  5617 5F               LD E, A
 408  5618 16 01            LD D, 1
 409  561A 78               LD A, B ; return stack
 410  561B D3 A8            OUT (0A8H), A
 411  561D C9               RET
 412  561E              GET_PAGE_INFO_L2:
 413  561E                  ; not expanded
 414  561E 16 00            LD D, 0
 415  5620 C9               RET
 416  5621              GET_PAGE_INFO_L4:
 417  5621                  ; page 1
 418  5621 0F               RRCA
 419  5622 0F               RRCA
 420  5623              GET_PAGE_INFO_L3:
 421  5623                  ; page 0
 422  5623 0F               RRCA
 423  5624 0F               RRCA
 424  5625 18 E6            JR GET_PAGE_INFO_L5
 425  5627              ; ****************************************************************************************************
 426  5627
 427  5627              ; ****************************************************************************************************
 428  5627              ; function returns original slot and subslot info
 429  5627              ; input B = 0A8H register value
 430  5627              ; input D = 0 is no subslots, 1 if yes
 431  5627              ; input C = 0A8H value when page 3 slot equals to requested page slot
 432  5627              ; input E = subslot value if present
 433  5627              ; modifies AF, disables interrupts
 434  5627              RESTORE_PAGE_INFO:
 435  5627 7A               LD A, D
 436  5628 B7               OR A
 437  5629 28 08            JR Z, RESTORE_PAGE_INFO_L1
 438  562B 79               LD A, C
 439  562C F3           	DI
 440  562D D3 A8            OUT (0A8H), A
 441  562F 7B               LD A, E
 442  5630 32 FF FF         LD (0FFFFH), A
 443  5633              RESTORE_PAGE_INFO_L1:
 444  5633 78               LD A, B
 445  5634 D3 A8            OUT (0A8H), A
 446  5636 C9               RET
 447  5637              ; ****************************************************************************************************
 448  5637
 449  5637              ; *******************************************************************************************************
 450  5637              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 451  5637              ; INPUT:  A = SLOT ID: EXXXSSPP
 452  5637              ; E = EXPANDED FLAG
 453  5637              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 454  5637              ; PP = PRIMARY SLOT NUMBER
 455  5637              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 456  5637              ; CHANGES: AF, BC, DE
 457  5637
 458  5637              LOCAL_ENASLT:
 459  5637 CD 57 56         CALL L0353
 460  563A FA 44 56         JP M, L0340
 461  563D DB A8            IN A, (0A8H)
 462  563F A1               AND C
 463  5640 B0               OR B
 464  5641 D3 A8            OUT (0A8H), A
 465  5643 C9               RET
 466  5644              L0340:
 467  5644 E5               PUSH HL
 468  5645 CD 7C 56         CALL L0378
 469  5648 4F               LD C, A
 470  5649 06 00            LD B, 0
 471  564B 7D               LD A, L
 472  564C A4               AND H
 473  564D B2               OR D
 474  564E 21 C5 FC         LD HL, 0FCC5H
 475  5651 09               ADD HL, BC
 476  5652 77               LD (HL), A
 477  5653 E1               POP HL
 478  5654 79               LD A, C
 479  5655 18 E0            JR LOCAL_ENASLT
 480  5657              L0353:
 481  5657 F3               DI
 482  5658 F5               PUSH AF
 483  5659 7C               LD A, H
 484  565A 07               RLCA
 485  565B 07               RLCA
 486  565C E6 03            AND 3
 487  565E 5F               LD E, A
 488  565F 3E C0            LD A, 0C0H
 489  5661              L035D:
 490  5661 07               RLCA
 491  5662 07               RLCA
 492  5663 1D               DEC E
 493  5664 F2 61 56         JP P, L035D
 494  5667 5F               LD E, A
 495  5668 2F               CPL
 496  5669 4F               LD C, A
 497  566A F1               POP AF
 498  566B F5               PUSH AF
 499  566C E6 03            AND 3
 500  566E 3C               INC A
 501  566F 47               LD B, A
 502  5670 3E AB            LD A, 0ABH
 503  5672              L036E:
 504  5672 C6 55            ADD A, 055H
 505  5674 10 FC            DJNZ L036E
 506  5676 57               LD D, A
 507  5677 A3               AND E
 508  5678 47               LD B, A
 509  5679 F1               POP AF
 510  567A A7               AND A
 511  567B C9               RET
 512  567C              L0378:
 513  567C F5               PUSH AF
 514  567D 7A               LD A, D
 515  567E E6 C0            AND 0C0H
 516  5680 4F               LD C, A
 517  5681 F1               POP AF
 518  5682 F5               PUSH AF
 519  5683 57               LD D, A
 520  5684 DB A8            IN A, (0A8H)
 521  5686 47               LD B, A
 522  5687 E6 3F            AND 03FH
 523  5689 B1               OR C
 524  568A D3 A8            OUT (0A8H), A
 525  568C 7A               LD A, D
 526  568D 0F               RRCA
 527  568E 0F               RRCA
 528  568F E6 03            AND 3
 529  5691 57               LD D, A
 530  5692 3E AB            LD A, 0ABH
 531  5694              L0390:
 532  5694 C6 55            ADD A, 055H
 533  5696 15               DEC D
 534  5697 F2 94 56         JP P, L0390
 535  569A A3               AND E
 536  569B 57               LD D, A
 537  569C 7B               LD A, E
 538  569D 2F               CPL
 539  569E 67               LD H, A
 540  569F 3A FF FF         LD A, (0FFFFH)
 541  56A2 2F               CPL
 542  56A3 6F               LD L, A
 543  56A4 A4               AND H
 544  56A5 B2               OR D
 545  56A6 32 FF FF         LD (0FFFFH), A
 546  56A9 78               LD A, B
 547  56AA D3 A8            OUT (0A8H), A
 548  56AC F1               POP AF
 549  56AD E6 03            AND 3
 550  56AF C9               RET
 551  56B0              ; *******************************************************************************************************
 552  56B0
 553  56B0              ; *******************************************************************************************************
 554  56B0              ; some common code to activate page 0 and place values needed to restore original page on stack
 555  56B0              ; input IY=return address
 556  56B0              ENABLE_PAGE0:
 557  56B0 AF               XOR A
 558  56B1 CD F0 55         CALL GET_PAGE_INFO
 559  56B4 C5               PUSH BC
 560  56B5 D5               PUSH DE
 561  56B6 3A 41 F3         LD A, (RAMAD0)
 562  56B9 26 00            LD H, 0
 563  56BB CD 37 56         CALL LOCAL_ENASLT
 564  56BE FD E9        	JP (IY)
 565  56C0              ; *******************************************************************************************************
 566  56C0
 567  56C0              ; General BASIC CALL-instruction handler
 568  56C0              CALLHAND:
 569  56C0 E5           	PUSH HL
 570  56C1 21 65 54     	LD	HL, CMDS ; pointer table based on starting letter
 571  56C4 3A 89 FD         LD A, (PROCNM)
 572  56C7 D6 41            SUB 'A'
 573  56C9 87               ADD A, A
 574  56CA 16 00            LD D, 0
 575  56CC 5F               LD E, A
 576  56CD 19               ADD HL, DE
 577  56CE 5E               LD E, (HL)
 578  56CF 23               INC HL
 579  56D0 56               LD D, (HL)
 580  56D1 7A               LD A, D
 581  56D2 B3               OR E
 582  56D3 28 23            JR Z, .CMDNOTRECOGNIZED
 583  56D5 EB               EX DE, HL
 584  56D6              .CHKCMD:
 585  56D6 11 89 FD     	LD	DE, PROCNM
 586  56D9 1A           .LOOP:	LD	A,(DE)
 587  56DA BE           	CP	(HL)
 588  56DB 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 589  56DD 13           	INC	DE
 590  56DE 23           	INC	HL
 591  56DF A7           	AND	A
 592  56E0 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 593  56E2 5E           	LD	E,(HL)
 594  56E3 23           	INC	HL
 595  56E4 56           	LD	D,(HL)
 596  56E5 E1           	POP	HL		; routine address
 597  56E6 CD 07 57     	CALL	GETPREVCHAR
 598  56E9 CD FB 56     	CALL	.CALLDE		; Call routine
 599  56EC A7           	AND	A
 600  56ED C9           	RET
 601  56EE
 602  56EE              .TONEXTCMD:
 603  56EE 0E FF        	LD	C,0FFH
 604  56F0 AF           	XOR	A
 605  56F1 ED B1        	CPIR			; Skip to end of instruction name
 606  56F3 23           	INC	HL
 607  56F4 23           	INC	HL		; Skip address
 608  56F5 BE           	CP	(HL)
 609  56F6 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 610  56F8              .CMDNOTRECOGNIZED:
 611  56F8 E1           	POP	HL
 612  56F9 37               SCF
 613  56FA C9           	RET
 614  56FB
 615  56FB              .CALLDE:
 616  56FB D5           	PUSH	DE
 617  56FC C9           	RET
 618  56FD
 619  56FD              ;---------------------------
 620  56FD
 621  56FD              ;GETSTRPNT:
 622  56FD              ; OUT:
 623  56FD              ; HL = String Address
 624  56FD              ; B  = Lenght
 625  56FD              ;        LD      HL,(USR)
 626  56FD              ;        LD      B,(HL)
 627  56FD              ;        INC     HL
 628  56FD              ;        LD      E,(HL)
 629  56FD              ;        INC     HL
 630  56FD              ;        LD      D,(HL)
 631  56FD              ;        EX      DE,HL
 632  56FD              ;        RET
 633  56FD
 634  56FD              ;EVALTXTPARAM:
 635  56FD              ;	CALL	CHKCHAR
 636  56FD              ;	DEFB	"("             ; Check for (
 637  56FD              ;	LD	IX,FRMEVL
 638  56FD              ;	CALL	CALBAS		; Evaluate expression
 639  56FD              ;       LD      A,(VALTYP)
 640  56FD              ;        CP      3               ; Text type?
 641  56FD              ;        JP      NZ,TYPE_MISMATCH
 642  56FD              ;        PUSH	HL
 643  56FD              ;        LD	IX,FRESTR         ; Free the temporary string
 644  56FD              ;        CALL	CALBAS
 645  56FD              ;        POP	HL
 646  56FD              ;	CALL	CHKCHAR
 647  56FD              ;	DEFB	")"             ; Check for )
 648  56FD              ;        RET
 649  56FD
 650  56FD
 651  56FD              CHKCHAR:
 652  56FD CD 07 57     	CALL	GETPREVCHAR	; Get previous basic char
 653  5700 E3           	EX	(SP),HL
 654  5701 BE           	CP	(HL) 	        ; Check if good char
 655  5702 20 17        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 656  5704 23           	INC	HL
 657  5705 E3           	EX	(SP),HL
 658  5706 23           	INC	HL		; Get next basic char
 659  5707
 660  5707              GETPREVCHAR:
 661  5707 2B           	DEC	HL
 662  5708 DD 21 66 46  	LD	IX,CHRGTR
 663  570C C3 59 01     	JP      CALBAS
 664  570F
 665  570F
 666  570F              TYPE_MISMATCH:
 667  570F 1E 0D            LD E, 13 ; Type mismatch
 668  5711 18 0A            JR THROW_ERROR
 669  5713              SUBSCRIPT_OUT_OF_RANGE:
 670  5713 1E 09            LD E,9 ; subscript out of range
 671  5715 18 06        	JR THROW_ERROR
 672  5717              OVERFLOW:
 673  5717 1E 06        	LD E,6
 674  5719 18 02        	JR THROW_ERROR
 675  571B              SYNTAX_ERROR:
 676  571B 1E 02            LD E, 2 ; Syntax error
 677  571D              THROW_ERROR:
 678  571D DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 679  5721 C3 59 01     	JP	CALBAS
 680  5724
 681  5724              ;---------------------------
 682  5724
 683  5724               IF (RAM_CMDS == 1)
 684  5724              ; *******************************************************************************************************
 685  5724              ; function to handle CALL MEMCPY basic extension
 686  5724              ; _MEMCPY ( INT source,
 687  5724              ;			INT destination,
 688  5724              ;			INT count,
 689  5724              ; will put ram in page 0 also, page 1 is already there
 690  5724              MEMCPY:
 691  5724              	; opening (
 692  5724 CD FD 56     	CALL CHKCHAR
 693  5727 28           	DB '('
 694  5728              	; get source address
 695  5728 DD 21 2F 54  	LD IX, FRMQNT
 696  572C CD 59 01     	CALL CALBAS
 697  572F D5           	PUSH DE
 698  5730              	; comma
 699  5730 CD FD 56     	CALL CHKCHAR
 700  5733 2C           	DB ','
 701  5734              	; get destination address
 702  5734 DD 21 2F 54  	LD IX, FRMQNT
 703  5738 CD 59 01     	CALL CALBAS
 704  573B D5           	PUSH DE
 705  573C              	; comma
 706  573C CD FD 56     	CALL CHKCHAR
 707  573F 2C           	DB ','
 708  5740              	; get length
 709  5740 DD 21 2F 54  	LD IX, FRMQNT
 710  5744 CD 59 01     	CALL CALBAS
 711  5747 D5           	PUSH DE
 712  5748              	; ending )
 713  5748 CD FD 56     	CALL CHKCHAR
 714  574B 29           	DB ')'
 715  574C
 716  574C              	; save position
 717  574C E5           	PUSH HL
 718  574D DD E1        	POP IX
 719  574F
 720  574F C1           	POP BC ; count
 721  5750 D1           	POP DE ; destination
 722  5751 E1           	POP HL ; source
 723  5752 D9           	EXX
 724  5753              	; enable page 0
 725  5753 FD 21 5A 57  	LD IY, .RET
 726  5757 C3 B0 56     	JP ENABLE_PAGE0
 727  575A              .RET:
 728  575A FB           	EI
 729  575B D9           	EXX
 730  575C ED B0        	LDIR
 731  575E D1               POP DE
 732  575F C1               POP BC
 733  5760 CD 27 56         CALL RESTORE_PAGE_INFO
 734  5763 DD E5        	PUSH IX
 735  5765 E1           	POP HL
 736  5766 C9           	RET
 737  5767              ; *******************************************************************************************************
 738  5767               ENDIF
 739  5767
 740  5767               IF (VRAM_CMDS == 1)
 741  5767              ; *******************************************************************************************************
 742  5767              ; function to handle CALL FILVRM basic extension
 743  5767              ; FILVRM ( INT offset,
 744  5767              ;		   INT count,
 745  5767              ;		   BYTE value,
 746  5767              ;		   BYTE wait_vsync) >0 = true
 747  5767              ; wait_vsync will issue HALT before copying
 748  5767              FILVRM:
 749  5767              	; opening (
 750  5767 CD FD 56     	CALL CHKCHAR
 751  576A 28           	DB '('
 752  576B              	; get offset address
 753  576B DD 21 2F 54  	LD IX, FRMQNT
 754  576F CD 59 01     	CALL CALBAS
 755  5772 D5           	PUSH DE
 756  5773              	; comma
 757  5773 CD FD 56     	CALL CHKCHAR
 758  5776 2C           	DB ','
 759  5777              	; get count
 760  5777 DD 21 2F 54  	LD IX, FRMQNT
 761  577B CD 59 01     	CALL CALBAS
 762  577E D5           	PUSH DE
 763  577F              	; comma
 764  577F CD FD 56     	CALL CHKCHAR
 765  5782 2C           	DB ','
 766  5783              	; get value
 767  5783 DD 21 1C 52  	LD IX, GETBYT
 768  5787 CD 59 01     	CALL CALBAS
 769  578A F5           	PUSH AF
 770  578B              	; comma
 771  578B CD FD 56     	CALL CHKCHAR
 772  578E 2C           	DB ','
 773  578F              	; get vsync wait
 774  578F DD 21 1C 52  	LD IX, GETBYT
 775  5793 CD 59 01     	CALL CALBAS
 776  5796 F5           	PUSH AF
 777  5797              	; ending )
 778  5797 CD FD 56     	CALL CHKCHAR
 779  579A 29           	DB ')'
 780  579B
 781  579B FB               EI
 782  579C              	; save position
 783  579C E5           	PUSH HL
 784  579D DD E1        	POP IX
 785  579F
 786  579F              	; syntax ok
 787  579F              	; wait for vsync if needed
 788  579F F1           	POP AF
 789  57A0 B7           	OR A
 790  57A1 28 01        	JR Z, .L1
 791  57A3 76           	HALT
 792  57A4
 793  57A4              .L1:
 794  57A4 F1               POP AF ; value
 795  57A5 C1               POP BC ; count
 796  57A6 E1               POP HL ; offset
 797  57A7 3E 01        	LD A,1
 798  57A9 32 64 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
 799  57AC CD 56 00         CALL BIOS_FILVRM
 800  57AF AF           	XOR A
 801  57B0 32 64 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
 802  57B3
 803  57B3              .L3:
 804  57B3 DD E5        	PUSH IX
 805  57B5 E1           	POP HL
 806  57B6 C9           	RET
 807  57B7              ; *******************************************************************************************************
 808  57B7               ENDIF
 809  57B7
 810  57B7               IF (RAM_CMDS == 1)
 811  57B7              ; *******************************************************************************************************
 812  57B7              ; function to handle CALL FILRAM basic extension
 813  57B7              ; FILRAM ( INT start address,
 814  57B7              ;		   INT count,
 815  57B7              ;		   BYTE value,
 816  57B7              ; will put ram in page 0 also, page 1 is already there
 817  57B7              FILRAM:
 818  57B7              	; opening (
 819  57B7 CD FD 56     	CALL CHKCHAR
 820  57BA 28           	DB '('
 821  57BB              	; get start address
 822  57BB DD 21 2F 54  	LD IX, FRMQNT
 823  57BF CD 59 01     	CALL CALBAS
 824  57C2 D5           	PUSH DE
 825  57C3              	; comma
 826  57C3 CD FD 56     	CALL CHKCHAR
 827  57C6 2C           	DB ','
 828  57C7              	; get count
 829  57C7 DD 21 2F 54  	LD IX, FRMQNT
 830  57CB CD 59 01     	CALL CALBAS
 831  57CE D5           	PUSH DE
 832  57CF              	; comma
 833  57CF CD FD 56     	CALL CHKCHAR
 834  57D2 2C           	DB ','
 835  57D3              	; get value
 836  57D3 DD 21 1C 52  	LD IX, GETBYT
 837  57D7 CD 59 01     	CALL CALBAS
 838  57DA F5           	PUSH AF
 839  57DB              	; ending )
 840  57DB CD FD 56     	CALL CHKCHAR
 841  57DE 29           	DB ')'
 842  57DF
 843  57DF              	; save position
 844  57DF E5           	PUSH HL
 845  57E0 DD E1        	POP IX
 846  57E2
 847  57E2 D1           	POP DE ; actually AF
 848  57E3 C1           	POP BC ; count
 849  57E4 E1           	POP HL ; start address
 850  57E5 78           	LD A, B
 851  57E6 B7           	OR A
 852  57E7 20 0A        	JR NZ, .L1 ; >=256 bytes to fill
 853  57E9 B1           	OR C
 854  57EA 28 19        	JR Z, .EXIT ; 0 bytes to fill, skip
 855  57EC 79           	LD A, C
 856  57ED 3D           	DEC A
 857  57EE 20 03        	JR NZ, .L1 ; ; >1 byte to fill
 858  57F0              	; one byte to fill
 859  57F0 72           	LD (HL), D
 860  57F1 18 12        	JR .EXIT
 861  57F3              .L1:
 862  57F3 D9           	EXX
 863  57F4              	; enable page 0
 864  57F4 FD 21 FB 57  	LD IY, .RET
 865  57F8 C3 B0 56     	JP ENABLE_PAGE0
 866  57FB              .RET:
 867  57FB FB           	EI
 868  57FC D9           	EXX
 869  57FD CD 09 58     	CALL .FILLVALUE
 870  5800 D1               POP DE
 871  5801 C1               POP BC
 872  5802 CD 27 56         CALL RESTORE_PAGE_INFO
 873  5805              .EXIT:
 874  5805 DD E5        	PUSH IX
 875  5807 E1           	POP HL
 876  5808 C9           	RET
 877  5809
 878  5809              .FILLVALUE:
 879  5809 72               LD (HL), D
 880  580A 54               LD D, H
 881  580B 5D               LD E, L
 882  580C 13               INC DE
 883  580D 0B               DEC BC
 884  580E ED B0            LDIR
 885  5810 C9               RET
 886  5811              ; *******************************************************************************************************
 887  5811               ENDIF
 888  5811
 889  5811               IF (GENCAL_CMD == 1)
 890  5811              ; *******************************************************************************************************
 891  5811              ; function to handle CALL GENCAL basic extension
 892  5811              ; GENCAL ( INT fn_addr, = address of the function to call
 893  5811              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 894  5811              ; output values of reristers will also be stored at reg_list_ptr
 895  5811              GENCAL_VAR_SP:
 896  5811 00 00            DW 0
 897  5813              GENCAL_VAR_SP2:
 898  5813 00 00            DW 0
 899  5815              GENCAL:
 900  5815              	; opening (
 901  5815 CD FD 56     	CALL CHKCHAR
 902  5818 28           	DB '('
 903  5819              	; get function address
 904  5819 DD 21 2F 54  	LD IX, FRMQNT
 905  581D CD 59 01     	CALL CALBAS
 906  5820 D5           	PUSH DE
 907  5821              	; comma
 908  5821 CD FD 56     	CALL CHKCHAR
 909  5824 2C           	DB ','
 910  5825              	; get pointer to register list
 911  5825 DD 21 2F 54  	LD IX, FRMQNT
 912  5829 CD 59 01     	CALL CALBAS
 913  582C D5           	PUSH DE
 914  582D              	; ending )
 915  582D CD FD 56     	CALL CHKCHAR
 916  5830 29           	DB ')'
 917  5831
 918  5831              	; save BASIC token position
 919  5831 E5           	PUSH HL
 920  5832 D9               EXX
 921  5833 E1           	POP HL ; HL'=next basic token
 922  5834 D9               EXX
 923  5835
 924  5835 E1               POP HL ; get pointer to register values
 925  5836 F3           	DI
 926  5837 ED 73 11 58      LD (GENCAL_VAR_SP), SP
 927  583B F9               LD SP, HL
 928  583C F1               POP AF
 929  583D C1               POP BC
 930  583E D1               POP DE
 931  583F E1               POP HL
 932  5840 DD E1            POP IX
 933  5842 FD E1            POP IY
 934  5844 D9               EXX
 935  5845 ED 73 13 58      LD (GENCAL_VAR_SP2), SP
 936  5849 ED 7B 11 58      LD SP, (GENCAL_VAR_SP)
 937  584D FB               EI
 938  584E D1               POP DE ; get function to call
 939  584F E5               PUSH HL
 940  5850 CD 6B 58         CALL .EXXDECALL
 941  5853 F3               DI
 942  5854 ED 73 11 58      LD (GENCAL_VAR_SP), SP
 943  5858 ED 7B 13 58      LD SP, (GENCAL_VAR_SP2)
 944  585C FD E5            PUSH IY
 945  585E DD E5            PUSH IX
 946  5860 E5               PUSH HL
 947  5861 D5               PUSH DE
 948  5862 C5               PUSH BC
 949  5863 F5               PUSH AF
 950  5864 ED 7B 11 58      LD SP, (GENCAL_VAR_SP)
 951  5868 FB               EI
 952  5869 E1               POP HL
 953  586A C9           	RET
 954  586B
 955  586B              .EXXDECALL:
 956  586B D5               PUSH DE
 957  586C D9               EXX
 958  586D C9               RET
 959  586E              ; *******************************************************************************************************
 960  586E               ENDIF
 961  586E
 962  586E               IF (VRAM_CMDS == 1)
 963  586E              ; *******************************************************************************************************
 964  586E              ; function to handle CALL MEMVRM basic extension
 965  586E              ; copies from RAM to VRAM
 966  586E              ; _MEMVRM ( INT source,
 967  586E              ;			INT destination,
 968  586E              ;			INT count,
 969  586E              ;			BYTE wait_vsync) >0 = true
 970  586E              ; will put ram in page 0 also, page 1 is already there
 971  586E              ; wait_vsync will issue HALT before copying
 972  586E              MEMVRM:
 973  586E              	; opening (
 974  586E CD FD 56     	CALL CHKCHAR
 975  5871 28           	DB '('
 976  5872              	; get source address
 977  5872 DD 21 2F 54  	LD IX, FRMQNT
 978  5876 CD 59 01     	CALL CALBAS
 979  5879 D5           	PUSH DE
 980  587A              	; comma
 981  587A CD FD 56     	CALL CHKCHAR
 982  587D 2C           	DB ','
 983  587E              	; get destination address
 984  587E DD 21 2F 54  	LD IX, FRMQNT
 985  5882 CD 59 01     	CALL CALBAS
 986  5885 D5           	PUSH DE
 987  5886              	; comma
 988  5886 CD FD 56     	CALL CHKCHAR
 989  5889 2C           	DB ','
 990  588A              	; get length
 991  588A DD 21 2F 54  	LD IX, FRMQNT
 992  588E CD 59 01     	CALL CALBAS
 993  5891 D5           	PUSH DE
 994  5892              	; comma
 995  5892 CD FD 56     	CALL CHKCHAR
 996  5895 2C           	DB ','
 997  5896              	; get vsync wait
 998  5896 DD 21 1C 52  	LD IX, GETBYT
 999  589A CD 59 01     	CALL CALBAS
1000  589D F5           	PUSH AF
1001  589E              	; ending )
1002  589E CD FD 56     	CALL CHKCHAR
1003  58A1 29           	DB ')'
1004  58A2
1005  58A2                  ; save position in BASIC text
1006  58A2 E5           	PUSH HL
1007  58A3 DD E1        	POP IX
1008  58A5
1009  58A5 F1           	POP AF ; wait vsync
1010  58A6 B7           	OR A
1011  58A7 28 03        	JR Z, .L1
1012  58A9 FB               EI
1013  58AA 76           	HALT
1014  58AB F3           	DI
1015  58AC              .L1:
1016  58AC              	; pop LDIR parameters and store away for later
1017  58AC C1           	POP BC ; count
1018  58AD D1           	POP DE ; vram destination
1019  58AE E1           	POP HL ; ram source
1020  58AF D9           	EXX
1021  58B0 FD 21 B7 58   	LD IY, .RET
1022  58B4 C3 B0 56     	JP ENABLE_PAGE0
1023  58B7              .RET:
1024  58B7 FB           	EI
1025  58B8 D9           	EXX
1026  58B9 3E 01        	LD A,1
1027  58BB 32 64 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
1028  58BE CD CE 58     	CALL .LDIRVM
1029  58C1 AF           	XOR A
1030  58C2 32 64 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
1031  58C5 D1               POP DE
1032  58C6 C1               POP BC
1033  58C7 CD 27 56         CALL RESTORE_PAGE_INFO
1034  58CA DD E5        	PUSH IX
1035  58CC E1           	POP HL
1036  58CD C9           	RET
1037  58CE
1038  58CE              .LDIRVM:
1039  58CE EB           	EX DE, HL
1040  58CF F3           	DI
1041  58D0 CD D9 55     	CALL SETWRT_LOCAL
1042  58D3 FB           	EI
1043  58D4 EB           	EX DE, HL
1044  58D5 78           	LD A, B
1045  58D6 B7           	OR A
1046  58D7 28 0D        	JR Z, .L3
1047  58D9 C5           	PUSH BC
1048  58DA 0E 98        	LD C, #98
1049  58DC              .L2:
1050  58DC 50           	LD D, B
1051  58DD 06 00        	LD B, 0
1052  58DF CD E4 55     	CALL BBYTECOPY
1053  58E2 42           	LD B, D
1054  58E3 10 F7        	DJNZ .L2
1055  58E5 C1           	POP BC
1056  58E6              .L3:
1057  58E6 79           	LD A, C
1058  58E7 B7           	OR A
1059  58E8 C8           	RET Z
1060  58E9 41           	LD B, C
1061  58EA 0E 98        	LD C, #98
1062  58EC C3 E4 55     	JP BBYTECOPY
1063  58EF              ; *******************************************************************************************************
1064  58EF               ENDIF
1065  58EF
1066  58EF               IF (VRAM_CMDS == 1)
1067  58EF              ; *******************************************************************************************************
1068  58EF              ; function to handle CALL VRMMEM basic extension
1069  58EF              ; copies from RAM to VRAM
1070  58EF              ; _VRMMEM ( INT source,
1071  58EF              ;			INT destination,
1072  58EF              ;			INT count
1073  58EF              ; will put ram in page 0 also, page 1 is already there
1074  58EF              VRMMEM:
1075  58EF              	; opening (
1076  58EF CD FD 56     	CALL CHKCHAR
1077  58F2 28           	DB '('
1078  58F3              	; get source address
1079  58F3 DD 21 2F 54  	LD IX, FRMQNT
1080  58F7 CD 59 01     	CALL CALBAS
1081  58FA D5           	PUSH DE
1082  58FB              	; comma
1083  58FB CD FD 56     	CALL CHKCHAR
1084  58FE 2C           	DB ','
1085  58FF              	; get destination address
1086  58FF DD 21 2F 54  	LD IX, FRMQNT
1087  5903 CD 59 01     	CALL CALBAS
1088  5906 D5           	PUSH DE
1089  5907              	; comma
1090  5907 CD FD 56     	CALL CHKCHAR
1091  590A 2C           	DB ','
1092  590B              	; get length
1093  590B DD 21 2F 54  	LD IX, FRMQNT
1094  590F CD 59 01     	CALL CALBAS
1095  5912 D5           	PUSH DE
1096  5913              	; ending )
1097  5913 CD FD 56     	CALL CHKCHAR
1098  5916 29           	DB ')'
1099  5917
1100  5917                  ; save position in BASIC text
1101  5917 E5           	PUSH HL
1102  5918 DD E1        	POP IX
1103  591A
1104  591A C1           	POP BC ; count
1105  591B D1           	POP DE ; destination
1106  591C E1           	POP HL ; source
1107  591D D9           	EXX
1108  591E FD 21 25 59  	LD IY, .RET
1109  5922 C3 B0 56     	JP ENABLE_PAGE0
1110  5925              .RET:
1111  5925 FB           	EI
1112  5926 D9           	EXX
1113  5927 3E 01        	LD A,1
1114  5929 32 64 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
1115  592C CD 3C 59     	CALL .LDIRMV
1116  592F AF           	XOR A
1117  5930 32 64 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
1118  5933 D1               POP DE
1119  5934 C1               POP BC
1120  5935 CD 27 56         CALL RESTORE_PAGE_INFO
1121  5938 DD E5        	PUSH IX
1122  593A E1           	POP HL
1123  593B C9           	RET
1124  593C
1125  593C              .LDIRMV:
1126  593C              	; set VRAM address *exactly* as in ROM, otherwise corruption
1127  593C 7D           	LD	A, L
1128  593D F3           	DI
1129  593E D3 99        	OUT	(099H), A
1130  5940 7C           	LD	A, H
1131  5941 E6 3F        	AND	03FH
1132  5943 D3 99        	OUT	(099H), A
1133  5945 FB           	EI
1134  5946              	;EX (SP), HL
1135  5946              	;EX (SP), HL
1136  5946              	;NOP
1137  5946              	;NOP
1138  5946              .L4:
1139  5946 DB 98            IN A, (#98)
1140  5948 12           	LD (DE), A
1141  5949 13               INC DE
1142  594A 0B               DEC BC
1143  594B 79               LD A, C
1144  594C B0               OR B
1145  594D 20 F7            JR NZ, .L4
1146  594F C9               RET
1147  5950              ; *******************************************************************************************************
1148  5950               ENDIF
1149  5950
1150  5950               IF (SOUND_CMDS == 1)
1151  5950              ; *******************************************************************************************************
1152  5950              ; function to handle CALL SNDPLYINIT basic extension
1153  5950              ; initializes sound player
1154  5950              ; _SNDPLYINIT ( INT music_offset,
1155  5950              ;				INT sfx_offset, can be -1 if no SFX
1156  5950              ; will put ram in page 0 also, page 1 is already there
1157  5950              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1158  5950              SNDPLYINIT:
1159  5950              	; opening (
1160  5950 CD FD 56     	CALL CHKCHAR
1161  5953 28           	DB '('
1162  5954              	; get music address
1163  5954 DD 21 2F 54  	LD IX, FRMQNT
1164  5958 CD 59 01     	CALL CALBAS
1165  595B D5           	PUSH DE
1166  595C              	; comma
1167  595C CD FD 56     	CALL CHKCHAR
1168  595F 2C           	DB ','
1169  5960              	; get sfx address
1170  5960 DD 21 2F 54  	LD IX, FRMQNT
1171  5964 CD 59 01     	CALL CALBAS
1172  5967 D5           	PUSH DE
1173  5968              	; ending )
1174  5968 CD FD 56     	CALL CHKCHAR
1175  596B 29           	DB ')'
1176  596C
1177  596C                  ; save position in BASIC text
1178  596C 44           	LD B, H
1179  596D 4D           	LD C, L
1180  596E
1181  596E              	; pop LDIR parameters and store away for later
1182  596E D1           	POP DE ; sfx address
1183  596F E1           	POP HL ; music address
1184  5970 C5           	PUSH BC ; basic text location
1185  5971 D9           	EXX
1186  5972 FD 21 79 59  	LD IY, .RET
1187  5976 C3 B0 56     	JP ENABLE_PAGE0
1188  5979              .RET:
1189  5979 D9           	EXX
1190  597A
1191  597A D5           	PUSH DE
1192  597B AF           	XOR A
1193  597C              	; HL = music location
1194  597C CD 62 41     	CALL PLY_AKG_INIT
1195  597F 3E 01        	LD A, 1
1196  5981 32 7A 4D     	LD (MUSIC_INIT_STATUS), A
1197  5984
1198  5984 E1           	POP HL ; SFX
1199  5985              	; check if SFX address -1
1200  5985 23           	INC HL
1201  5986 7D           	LD A, L
1202  5987 B4           	OR H
1203  5988 28 09        	JR Z,.L1
1204  598A 2B           	DEC HL
1205  598B CD 1D 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1206  598E 3E 01        	LD A, 1
1207  5990 32 7B 4D     	LD (SFX_INIT_STATUS), A
1208  5993              .L1:
1209  5993 D1               POP DE
1210  5994 C1               POP BC
1211  5995 CD 27 56         CALL RESTORE_PAGE_INFO
1212  5998
1213  5998 E1           	POP HL
1214  5999 C9           	RET
1215  599A              ; *******************************************************************************************************
1216  599A
1217  599A              ; *******************************************************************************************************
1218  599A              ; function to handle CALL SNDPLYON basic extension
1219  599A              ; enables sound player
1220  599A              ; _SNDPLYON
1221  599A              ; sets SOUND_ENABLED variable to 1 if init call was done
1222  599A              ; if not throws out of data error
1223  599A              SNDPLYON:
1224  599A 3A 7A 4D     	LD A, (MUSIC_INIT_STATUS)
1225  599D B7           	OR A
1226  599E 20 05        	JR NZ, .L1
1227  59A0              	; player not initialized, throw error
1228  59A0 1E 04        	LD E, 04 ; Out of DATA
1229  59A2 C3 1D 57     	JP THROW_ERROR
1230  59A5              .L1:
1231  59A5 32 7C 4D     	LD (SOUND_ENABLED), A
1232  59A8              	; disable key click
1233  59A8 AF           	XOR A
1234  59A9 32 DB F3     	LD (CLIKSW), A
1235  59AC C9           	RET
1236  59AD              ; *******************************************************************************************************
1237  59AD
1238  59AD              ; *******************************************************************************************************
1239  59AD              ; function to handle CALL SNDPLYOFF basic extension
1240  59AD              ; disables sound player
1241  59AD              ; _SNDPLYOFF
1242  59AD              ; sets SOUND_ENABLED variable to 0
1243  59AD              ; calls AKG to stop music and SFX on all channels if initialized
1244  59AD              SNDPLYOFF:
1245  59AD 3A 7C 4D     	LD A, (SOUND_ENABLED)
1246  59B0 B7           	OR A
1247  59B1 C8           	RET Z ; already stopped
1248  59B2 AF           	XOR A
1249  59B3 32 7C 4D     	LD (SOUND_ENABLED), A
1250  59B6 E5           	PUSH HL
1251  59B7 CD 21 42     	CALL PLY_AKG_STOP
1252  59BA 3A 7B 4D     	LD A, (SFX_INIT_STATUS)
1253  59BD B7           	OR A
1254  59BE 28 0E        	JR Z, .EXIT ; SFX not in use
1255  59C0 AF           	XOR A
1256  59C1 CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1257  59C4 3E 01        	LD A, 1
1258  59C6 CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1259  59C9 3E 02        	LD A, 2
1260  59CB CD 49 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1261  59CE              .EXIT:
1262  59CE E1           	POP HL
1263  59CF C9           	RET
1264  59D0              ; *******************************************************************************************************
1265  59D0
1266  59D0              ; *******************************************************************************************************
1267  59D0              ; function to handle CALL SNDSFX basic extension
1268  59D0              ; plays a sound effect
1269  59D0              ; _SNDSFX ( BYTE sfx_number, >0
1270  59D0              ;			BYTE channel, = 0,1 or 2
1271  59D0              ;			BYTE inverted_volume = 0-16, 0 being full volume
1272  59D0              ; will put ram in page 0 also, page 1 is already there
1273  59D0              ; if sound off throws illegal function call
1274  59D0              ; if sfx not initialized, throws out of data
1275  59D0              SNDSFX:
1276  59D0              	; opening (
1277  59D0 CD FD 56     	CALL CHKCHAR
1278  59D3 28           	DB '('
1279  59D4              	; get sfx_number
1280  59D4 DD 21 1C 52  	LD IX, GETBYT
1281  59D8 CD 59 01     	CALL CALBAS
1282  59DB D5           	PUSH DE
1283  59DC              	; comma
1284  59DC CD FD 56     	CALL CHKCHAR
1285  59DF 2C           	DB ','
1286  59E0              	; get sfx address
1287  59E0 DD 21 1C 52  	LD IX, GETBYT
1288  59E4 CD 59 01     	CALL CALBAS
1289  59E7 D5           	PUSH DE
1290  59E8              	; comma
1291  59E8 CD FD 56     	CALL CHKCHAR
1292  59EB 2C           	DB ','
1293  59EC              	; get inverted volume
1294  59EC DD 21 1C 52  	LD IX, GETBYT
1295  59F0 CD 59 01     	CALL CALBAS
1296  59F3 D5           	PUSH DE
1297  59F4              	; ending )
1298  59F4 CD FD 56     	CALL CHKCHAR
1299  59F7 29           	DB ')'
1300  59F8
1301  59F8 3A 7C 4D     	LD A, (SOUND_ENABLED)
1302  59FB B7           	OR A
1303  59FC 20 05        	JR NZ, .L1
1304  59FE              	; sound disabled, throw illegal function call
1305  59FE 1E 05        	LD E, 5
1306  5A00 C3 1D 57     	JP THROW_ERROR
1307  5A03              .L1:
1308  5A03 3A 7B 4D     	LD A, (SFX_INIT_STATUS)
1309  5A06 B7           	OR A
1310  5A07 20 05        	JR NZ, .L2
1311  5A09              	; sfx data not initialized, throw out of data
1312  5A09 1E 04        	LD E, 4
1313  5A0B C3 1D 57     	JP THROW_ERROR
1314  5A0E              .L2:
1315  5A0E              	; pop  parameters and store away for later
1316  5A0E D1           	POP DE ; inverted volume
1317  5A0F 43           	LD B, E
1318  5A10 D1           	POP DE ; channel
1319  5A11 4B           	LD C, E
1320  5A12 D1           	POP DE
1321  5A13 7B           	LD A, E
1322  5A14 08           	EX AF, AF'
1323  5A15 E5           	PUSH HL ; basic text location
1324  5A16 D9           	EXX
1325  5A17 FD 21 1E 5A  	LD IY, .RET
1326  5A1B C3 B0 56     	JP ENABLE_PAGE0
1327  5A1E              .RET:
1328  5A1E D9           	EXX
1329  5A1F 08           	EX AF, AF'
1330  5A20 CD 21 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1331  5A23
1332  5A23 D1               POP DE
1333  5A24 C1               POP BC
1334  5A25 CD 27 56         CALL RESTORE_PAGE_INFO
1335  5A28
1336  5A28 E1           	POP HL
1337  5A29 C9           	RET
1338  5A2A              ; *******************************************************************************************************
1339  5A2A               ENDIF
1340  5A2A
1341  5A2A               IF (BLIT_CMDS == 1)
1342  5A2A              ; *******************************************************************************************************
1343  5A2A              ; function rotates mask and data of several characters and applies to background data
1344  5A2A              ; this handles x-shift from 0 to 4
1345  5A2A              ; contains self-modifying code that is set-up from external function
1346  5A2A              ; input HL=pointer to mask data
1347  5A2A              ; input HL'=pointer to character data
1348  5A2A              ; input DE=output buffer containing background data
1349  5A2A              ; input BC=DE+8
1350  5A2A              ; input A=number of characters to process
1351  5A2A              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1352  5A2A              SHIFT04:
1353  5A2A 08           	EX AF, AF'
1354  5A2B 7E           	LD A, (HL) ; get mask
1355  5A2C D9           	EXX
1356  5A2D 57           	LD D, A
1357  5A2E 1E FF        	LD E, #FF
1358  5A30 37           	SCF
1359  5A31              .M1:
1360  5A31 18 FE        	JR .M1 ; this is self-modifying part
1361  5A33 CB 1A        	RR D
1362  5A35 CB 1B        	RR E
1363  5A37 CB 1A        	RR D
1364  5A39 CB 1B        	RR E
1365  5A3B CB 1A        	RR D
1366  5A3D CB 1B        	RR E
1367  5A3F CB 1A        	RR D
1368  5A41 CB 1B        	RR E
1369  5A43
1370  5A43 46           	LD B, (HL) ; get data
1371  5A44 0E 00        	LD C, 0
1372  5A46              .M2:
1373  5A46 18 FE        	JR .M2 ; also self-modifying part
1374  5A48 CB 38        	SRL B
1375  5A4A CB 19        	RR C
1376  5A4C CB 38        	SRL B
1377  5A4E CB 19        	RR C
1378  5A50 CB 38        	SRL B
1379  5A52 CB 19        	RR C
1380  5A54 CB 38        	SRL B
1381  5A56 CB 19        	RR C
1382  5A58
1383  5A58 D9           	EXX
1384  5A59 1A           	LD A, (DE) ; background
1385  5A5A D9           	EXX
1386  5A5B A2           	AND D
1387  5A5C B0           	OR B
1388  5A5D D9           	EXX
1389  5A5E 12           	LD (DE), A
1390  5A5F
1391  5A5F 0A           	LD A, (BC)
1392  5A60 D9           	EXX
1393  5A61 A3           	AND E
1394  5A62 B1           	OR C
1395  5A63 23           	INC HL
1396  5A64 D9           	EXX
1397  5A65 02           	LD (BC), A
1398  5A66
1399  5A66 23           	INC HL
1400  5A67 13           	INC DE
1401  5A68 03           	INC BC
1402  5A69
1403  5A69 08           	EX AF, AF'
1404  5A6A 3D           	DEC A
1405  5A6B C2 2A 5A     	JP NZ, SHIFT04
1406  5A6E C9           	RET
1407  5A6F              ; *******************************************************************************************************
1408  5A6F
1409  5A6F              ; *******************************************************************************************************
1410  5A6F              ; function rotates mask and data of several characters and applies to background data
1411  5A6F              ; this handles x-shift from 5 to 8
1412  5A6F              ; contains self-modifying code that is set-up from external function
1413  5A6F              ; input HL=pointer to mask data
1414  5A6F              ; input HL'=pointer to character data
1415  5A6F              ; input DE=output buffer containing background data
1416  5A6F              ; input BC=DE+8
1417  5A6F              ; input A=number of characters to process
1418  5A6F              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1419  5A6F              SHIFT58:
1420  5A6F 08           	EX AF, AF'
1421  5A70 7E           	LD A, (HL) ; get mask
1422  5A71 D9           	EXX
1423  5A72 57           	LD D, A
1424  5A73 1E FF        	LD E, #FF
1425  5A75 37           	SCF
1426  5A76              .M1:
1427  5A76 18 FE        	JR .M1 ; this is self-modifying part
1428  5A78 CB 12        	RL D
1429  5A7A CB 13        	RL E
1430  5A7C CB 12        	RL D
1431  5A7E CB 13        	RL E
1432  5A80 CB 12        	RL D
1433  5A82 CB 13        	RL E
1434  5A84
1435  5A84 46           	LD B, (HL)
1436  5A85 0E 00        	LD C, 0
1437  5A87              .M2:
1438  5A87 18 FE        	JR .M2 ; also self-modifying part
1439  5A89 CB 20        	SLA B
1440  5A8B CB 11        	RL C
1441  5A8D CB 20        	SLA B
1442  5A8F CB 11        	RL C
1443  5A91 CB 20        	SLA B
1444  5A93 CB 11        	RL C
1445  5A95
1446  5A95 D9           	EXX
1447  5A96 1A           	LD A, (DE) ; background
1448  5A97 D9           	EXX
1449  5A98 A3           	AND E
1450  5A99 B1           	OR C
1451  5A9A D9           	EXX
1452  5A9B 12           	LD (DE), A
1453  5A9C
1454  5A9C 0A           	LD A, (BC)
1455  5A9D D9           	EXX
1456  5A9E A2           	AND D
1457  5A9F B0           	OR B
1458  5AA0 23           	INC HL
1459  5AA1 D9           	EXX
1460  5AA2 02           	LD (BC), A
1461  5AA3
1462  5AA3 23           	INC HL
1463  5AA4 13           	INC DE
1464  5AA5 03           	INC BC
1465  5AA6
1466  5AA6 08           	EX AF, AF'
1467  5AA7 3D           	DEC A
1468  5AA8 C2 6F 5A     	JP NZ, SHIFT58
1469  5AAB C9           	RET
1470  5AAC              ; *******************************************************************************************************
1471  5AAC
1472  5AAC              ; *******************************************************************************************************
1473  5AAC              ; routine that shifts one row of characters
1474  5AAC              ; contains self-modifying code that is set-up from external function
1475  5AAC              ; input HL=pointer to mask data
1476  5AAC              ; input HL'=pointer to character data
1477  5AAC              ; input DE=output buffer containing background data
1478  5AAC              ; input A=number of characters to process
1479  5AAC              ; input IX=pointer to structure describing input data
1480  5AAC              ; modifies AF, AF', HL, HL', DE, DE', BC, BC'
1481  5AAC              SHIFT_ROW:
1482  5AAC F5           	PUSH AF
1483  5AAD ED 53 4F 54  		LD (BLIT_TMP1), DE
1484  5AB1 E5           		PUSH HL
1485  5AB2 CD F5 5A     			CALL .ADDYSHIFT
1486  5AB5 E1           		POP HL
1487  5AB6 ED 53 51 54  		LD (BLIT_TMP2), DE ; DE+vertical shift
1488  5ABA              .L1:
1489  5ABA 3E 08        		LD A, 8
1490  5ABC DD 96 02     		SUB (IX+2) ; y shift
1491  5ABF              .CALL1:
1492  5ABF CD 00 00     		CALL 0
1493  5AC2 DD 7E 02     		LD A, (IX+2); y shift
1494  5AC5 B7           		OR A
1495  5AC6 28 26        		JR Z, .DONE
1496  5AC8 ED 5B 4F 54  		LD DE, (BLIT_TMP1)
1497  5ACC E5           		PUSH HL
1498  5ACD CD 03 5B     			CALL .DETONEXTROW
1499  5AD0 E1           		POP HL
1500  5AD1              .CALL2:
1501  5AD1 CD 00 00     		CALL 0
1502  5AD4 ED 5B 4F 54  		LD DE, (BLIT_TMP1)
1503  5AD8 E5           		PUSH HL
1504  5AD9 CD FD 5A     			CALL .ADD8
1505  5ADC E1           		POP HL
1506  5ADD ED 53 4F 54  		LD (BLIT_TMP1), DE
1507  5AE1 ED 5B 51 54  		LD DE, (BLIT_TMP2)
1508  5AE5 E5           		PUSH HL
1509  5AE6 CD FD 5A     			CALL .ADD8
1510  5AE9 E1           		POP HL
1511  5AEA ED 53 51 54  		LD (BLIT_TMP2), DE ; DE+vertical shift
1512  5AEE              .DONE:
1513  5AEE F1           	POP AF
1514  5AEF 3D           	DEC A
1515  5AF0 C8           	RET Z
1516  5AF1 F5           	PUSH AF
1517  5AF2 C3 BA 5A     	JP .L1
1518  5AF5              .ADDYSHIFT:
1519  5AF5 EB           	EX DE, HL
1520  5AF6 16 00        	LD D, 0
1521  5AF8 DD 5E 02     	LD E, (IX+2); y shift
1522  5AFB 18 0C        	JR .MOVDEBC
1523  5AFD              .ADD8:
1524  5AFD 21 08 00     	LD HL, 8
1525  5B00 C3 09 5B     	JP .MOVDEBC
1526  5B03              .DETONEXTROW:
1527  5B03 DD 6E 06     	LD L, (IX+6)
1528  5B06 DD 66 07     	LD H, (IX+7) ; bkg add to value
1529  5B09              .MOVDEBC:
1530  5B09 19           	ADD HL, DE
1531  5B0A 54           	LD D, H
1532  5B0B 5D           	LD E, L
1533  5B0C 01 08 00     	LD BC, 8
1534  5B0F 09           	ADD HL, BC
1535  5B10 44           	LD B, H
1536  5B11 4D           	LD C, L
1537  5B12 C9           	RET
1538  5B13              ; *******************************************************************************************************
1539  5B13
1540  5B13              ; *******************************************************************************************************
1541  5B13              ; function rotates mask and character data and applies it to background
1542  5B13              ; input IX=pointer to structure describing input data
1543  5B13              ; +0  DW horizontal shift count 0-7 (low byte used)
1544  5B13              ; +2  DW vertical shift count 0-7 (low byte used)
1545  5B13              ; +4  DW background data start;
1546  5B13              ; +6  DW background add to value to next row of background data
1547  5B13              ; +8  DW mask data start;
1548  5B13              ; +10  DW character data start;
1549  5B13              ; +12 DW character&mask add to value to next row of data
1550  5B13              ; +14 DW columns (low byte used)
1551  5B13              ; +16 DW rows (low byte used)
1552  5B13              SHIFT_MERGE_CHARACTER:
1553  5B13 DD 7E 00     	LD A, (IX) ; shift
1554  5B16 FE 05        	CP 5
1555  5B18 38 25        	JR C, .RIGHT
1556  5B1A              	; shifts 5-7, use rotate towards left 1-3
1557  5B1A 21 6F 5A     	LD HL, SHIFT58
1558  5B1D 22 C0 5A     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1559  5B20 22 D2 5A     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1560  5B23 D6 05        	SUB 5
1561  5B25 28 0D        	JR Z, .L1
1562  5B27 87           	ADD A, A
1563  5B28 87           	ADD A, A
1564  5B29 67           	LD H, A
1565  5B2A 2E 18        	LD L, #18 ; JR opcode
1566  5B2C 22 76 5A     	LD (SHIFT58.M1), HL
1567  5B2F 22 87 5A     	LD (SHIFT58.M2), HL
1568  5B32 18 32        	JR .DO
1569  5B34              .L1:
1570  5B34 21 00 00     	LD HL, 0 ; 2xNOP opcode
1571  5B37 22 76 5A     	LD (SHIFT58.M1), HL
1572  5B3A 22 87 5A     	LD (SHIFT58.M2), HL
1573  5B3D 18 27        	JR .DO
1574  5B3F              .RIGHT:
1575  5B3F              	; shifts 0-4, rotate towards right
1576  5B3F 21 2A 5A     	LD HL, SHIFT04
1577  5B42 22 C0 5A     	LD (SHIFT_ROW.CALL1+1), HL ; modify fn used
1578  5B45 22 D2 5A     	LD (SHIFT_ROW.CALL2+1), HL ; modify fn used
1579  5B48 FE 04        	CP 4
1580  5B4A 28 11        	JR Z, .R1
1581  5B4C D6 04        	SUB 4
1582  5B4E ED 44        	NEG
1583  5B50 87           	ADD A, A
1584  5B51 87           	ADD A, A
1585  5B52 67           	LD H, A
1586  5B53 2E 18        	LD L, #18 ; JR opcode
1587  5B55 22 31 5A     	LD (SHIFT04.M1), HL
1588  5B58 22 46 5A     	LD (SHIFT04.M2), HL
1589  5B5B 18 09        	JR .DO
1590  5B5D              .R1:
1591  5B5D 21 00 00     	LD HL, 0 ; 2xNOP opcode
1592  5B60 22 31 5A     	LD (SHIFT04.M1), HL
1593  5B63 22 46 5A     	LD (SHIFT04.M2), HL
1594  5B66              .DO:
1595  5B66 DD 46 10     	LD B, (IX+16) ; rows
1596  5B69 DD 6E 08     	LD L, (IX+8)
1597  5B6C DD 66 09     	LD H, (IX+9) ; mask data
1598  5B6F DD 5E 04     	LD E, (IX+4)
1599  5B72 DD 56 05     	LD D, (IX+5) ; background data
1600  5B75 D9           	EXX
1601  5B76 DD 6E 0A     	LD L, (IX+10)
1602  5B79 DD 66 0B     	LD H, (IX+11) ; character data
1603  5B7C D9           	EXX
1604  5B7D              .LOOP:
1605  5B7D C5           	PUSH BC
1606  5B7E E5           		PUSH HL
1607  5B7F D5           			PUSH DE
1608  5B80 D9           				EXX
1609  5B81 E5           				PUSH HL
1610  5B82 D9           					EXX
1611  5B83 DD 7E 0E     					LD A, (IX+14) ; columns
1612  5B86              .CALL:
1613  5B86 CD AC 5A     					CALL SHIFT_ROW
1614  5B89 E1           				POP HL
1615  5B8A DD 5E 0C     				LD E, (IX+12)
1616  5B8D DD 56 0D     				LD D, (IX+13) ; char data to next row
1617  5B90 19           				ADD HL, DE
1618  5B91 D9           				EXX
1619  5B92 E1           			POP HL
1620  5B93 DD 5E 06     			LD E, (IX+6)
1621  5B96 DD 56 07     			LD D, (IX+7) ; background to next row
1622  5B99 19           			ADD HL, DE
1623  5B9A EB           			EX DE, HL
1624  5B9B E1           		POP HL
1625  5B9C DD 4E 0C     		LD C, (IX+12)
1626  5B9F DD 46 0D     		LD B, (IX+13) ; char data to next row
1627  5BA2 09           		ADD HL, BC
1628  5BA3 C1           	POP BC
1629  5BA4 10 D7        	DJNZ .LOOP
1630  5BA6 C9           	RET
1631  5BA7              ; *******************************************************************************************************
1632  5BA7
1633  5BA7               IFNDEF CMDS_WITH_PARAMETERS
1634  5BA7 ~            ; *******************************************************************************************************
1635  5BA7 ~            ; function to handle CALL BLIT basic extension
1636  5BA7 ~            ; rotates 1-bit character drawing horizontally with mask and character data and
1637  5BA7 ~            ; fuses with background data and applies vertical shift too
1638  5BA7 ~            ; BLIT ( INT request_data_ptr )
1639  5BA7 ~            ; request_data_ptr described in SHIFT_MERGE_CHARACTER
1640  5BA7 ~            ; will put ram in page 0 also, page 1 is already there
1641  5BA7 ~            BLIT:
1642  5BA7 ~            	; opening (
1643  5BA7 ~            	CALL CHKCHAR
1644  5BA7 ~            	DB '('
1645  5BA7 ~            	; get pointer to request struct
1646  5BA7 ~            	LD IX, FRMQNT
1647  5BA7 ~            	CALL CALBAS
1648  5BA7 ~            	PUSH DE
1649  5BA7 ~            	; ending )
1650  5BA7 ~            	CALL CHKCHAR
1651  5BA7 ~            	DB ')'
1652  5BA7 ~
1653  5BA7 ~            	POP IX ; pointer to request struct
1654  5BA7 ~
1655  5BA7 ~            	PUSH HL ; save position in BASIC buffer
1656  5BA7 ~
1657  5BA7 ~            	LD IY, .RET
1658  5BA7 ~            	JP ENABLE_PAGE0
1659  5BA7 ~            .RET:
1660  5BA7 ~            	EI
1661  5BA7 ~            	CALL SHIFT_MERGE_CHARACTER
1662  5BA7 ~
1663  5BA7 ~                POP DE
1664  5BA7 ~                POP BC
1665  5BA7 ~                CALL RESTORE_PAGE_INFO
1666  5BA7 ~
1667  5BA7 ~            	POP HL
1668  5BA7 ~            	RET
1669  5BA7 ~            ; *******************************************************************************************************
1670  5BA7               ENDIF
1671  5BA7
1672  5BA7               IFDEF CMDS_WITH_PARAMETERS
1673  5BA7              ; *******************************************************************************************************
1674  5BA7              ; function to handle CALL BLIT basic extension
1675  5BA7              ; rotates 1-bit character drawing horizontally with mask and character data and
1676  5BA7              ; fuses with background data and applies vertical shift too
1677  5BA7              ; in form without pointers
1678  5BA7              ; BLIT ( INT x,
1679  5BA7              ;		 INT y,
1680  5BA7              ;		 INT char_data_pointer,
1681  5BA7              ;		 INT mask_data_pointer,
1682  5BA7              ;		 INT width (in characters),
1683  5BA7              ;		 INT height (in characters),
1684  5BA7              ;		 INT background_pointer (top left),
1685  5BA7              ;		 INT background_width (in characters),
1686  5BA7              ;		 INT background_height (in characters))
1687  5BA7              ; will put ram in page 0 also, page 1 is already there
1688  5BA7              BLIT:
1689  5BA7              	; opening (
1690  5BA7 CD FD 56     	CALL CHKCHAR
1691  5BAA 28           	DB '('
1692  5BAB              	; get x coordinate
1693  5BAB DD 21 2F 54  	LD IX, FRMQNT
1694  5BAF CD 59 01     	CALL CALBAS
1695  5BB2 7B           	LD A, E
1696  5BB3 E6 07        	AND 7
1697  5BB5 32 53 54     	LD (BLIT_STRUCT+0), A
1698  5BB8 CD 95 5C     	CALL .DAdiv8
1699  5BBB 32 4F 54     	LD (BLIT_TMP+0),A
1700  5BBE              	; comma
1701  5BBE CD FD 56     	CALL CHKCHAR
1702  5BC1 2C           	DB ','
1703  5BC2              	; get y coordinate
1704  5BC2 DD 21 2F 54  	LD IX, FRMQNT
1705  5BC6 CD 59 01     	CALL CALBAS
1706  5BC9 7B           	LD A, E
1707  5BCA E6 07        	AND 7
1708  5BCC 32 55 54     	LD (BLIT_STRUCT+2), A
1709  5BCF CD 95 5C     	CALL .DAdiv8
1710  5BD2 32 50 54     	LD (BLIT_TMP+1),A
1711  5BD5              	; comma
1712  5BD5 CD FD 56     	CALL CHKCHAR
1713  5BD8 2C           	DB ','
1714  5BD9              	; get char data pointer
1715  5BD9 DD 21 2F 54  	LD IX, FRMQNT
1716  5BDD CD 59 01     	CALL CALBAS
1717  5BE0 ED 53 5D 54  	LD (BLIT_STRUCT+10), DE
1718  5BE4              	; comma
1719  5BE4 CD FD 56     	CALL CHKCHAR
1720  5BE7 2C           	DB ','
1721  5BE8              	; get mask data pointer
1722  5BE8 DD 21 2F 54  	LD IX, FRMQNT
1723  5BEC CD 59 01     	CALL CALBAS
1724  5BEF ED 53 5B 54  	LD (BLIT_STRUCT+8), DE
1725  5BF3              	; comma
1726  5BF3 CD FD 56     	CALL CHKCHAR
1727  5BF6 2C           	DB ','
1728  5BF7              	; get width
1729  5BF7 DD 21 2F 54  	LD IX, FRMQNT
1730  5BFB CD 59 01     	CALL CALBAS
1731  5BFE 7B           	LD A, E
1732  5BFF 32 61 54     	LD (BLIT_STRUCT+14), A
1733  5C02              	; comma
1734  5C02 CD FD 56     	CALL CHKCHAR
1735  5C05 2C           	DB ','
1736  5C06              	; get height
1737  5C06 DD 21 2F 54  	LD IX, FRMQNT
1738  5C0A CD 59 01     	CALL CALBAS
1739  5C0D 7B           	LD A, E
1740  5C0E 32 63 54     	LD (BLIT_STRUCT+16), A
1741  5C11              	; comma
1742  5C11 CD FD 56     	CALL CHKCHAR
1743  5C14 2C           	DB ','
1744  5C15              	; get background pointer
1745  5C15 DD 21 2F 54  	LD IX, FRMQNT
1746  5C19 CD 59 01     	CALL CALBAS
1747  5C1C ED 53 57 54  	LD (BLIT_STRUCT+4), DE
1748  5C20              	; comma
1749  5C20 CD FD 56     	CALL CHKCHAR
1750  5C23 2C           	DB ','
1751  5C24              	; get background width
1752  5C24 DD 21 2F 54  	LD IX, FRMQNT
1753  5C28 CD 59 01     	CALL CALBAS
1754  5C2B 7B           	LD A, E
1755  5C2C 32 51 54     	LD (BLIT_TMP+2), A
1756  5C2F              	; comma
1757  5C2F CD FD 56     	CALL CHKCHAR
1758  5C32 2C           	DB ','
1759  5C33              	; get background height
1760  5C33 DD 21 2F 54  	LD IX, FRMQNT
1761  5C37 CD 59 01     	CALL CALBAS
1762  5C3A 7B           	LD A, E
1763  5C3B 32 52 54     	LD (BLIT_TMP+3), A
1764  5C3E              	; ending )
1765  5C3E CD FD 56     	CALL CHKCHAR
1766  5C41 29           	DB ')'
1767  5C42
1768  5C42 E5           	PUSH HL ; save position in BASIC buffer
1769  5C43
1770  5C43              	; calculate char&mask add to value
1771  5C43 26 00        	LD H, 0
1772  5C45 3A 61 54     	LD A, (BLIT_STRUCT+14)
1773  5C48 6F           	LD L, A
1774  5C49 CD EC 55     	CALL HLx8
1775  5C4C 22 5F 54     	LD (BLIT_STRUCT+12), HL
1776  5C4F              	; calculate background add to value
1777  5C4F 26 00        	LD H, 0
1778  5C51 3A 51 54     	LD A, (BLIT_TMP+2)
1779  5C54 6F           	LD L, A
1780  5C55 CD EC 55     	CALL HLx8
1781  5C58 22 59 54     	LD (BLIT_STRUCT+6), HL
1782  5C5B              	; calculate pointer to background location
1783  5C5B 21 00 00     	LD HL, 0
1784  5C5E 3A 50 54     	LD A,(BLIT_TMP+1)
1785  5C61 B7           	OR A
1786  5C62 28 08        	JR Z, .L1
1787  5C64 47           	LD B,A
1788  5C65 ED 5B 59 54  	LD DE,(BLIT_STRUCT+6)
1789  5C69              .L0:
1790  5C69 19           	ADD HL, DE
1791  5C6A 10 FD        	DJNZ .L0
1792  5C6C              .L1:
1793  5C6C EB           	EX DE,HL
1794  5C6D 26 00        	LD H,0
1795  5C6F 3A 4F 54     	LD A,(BLIT_TMP+0)
1796  5C72 6F           	LD L,A
1797  5C73 CD EC 55     	CALL HLx8
1798  5C76 19           	ADD HL,DE
1799  5C77 ED 5B 57 54  	LD DE,(BLIT_STRUCT+4)
1800  5C7B 19           	ADD HL,DE
1801  5C7C 22 57 54     	LD (BLIT_STRUCT+4),HL
1802  5C7F
1803  5C7F FD 21 86 5C  	LD IY, .RET
1804  5C83 C3 B0 56     	JP ENABLE_PAGE0
1805  5C86              .RET:
1806  5C86 FB           	EI
1807  5C87 DD 21 53 54  	LD IX, BLIT_STRUCT
1808  5C8B CD 13 5B     	CALL SHIFT_MERGE_CHARACTER
1809  5C8E
1810  5C8E D1               POP DE
1811  5C8F C1               POP BC
1812  5C90 CD 27 56         CALL RESTORE_PAGE_INFO
1813  5C93
1814  5C93 E1           	POP HL
1815  5C94 C9           	RET
1816  5C95              .DAdiv8:
1817  5C95 7B           	LD A,E
1818  5C96 CB 2A        	SRA D
1819  5C98 CB 1F            RR  A
1820  5C9A CB 2A            SRA D
1821  5C9C CB 1F            RR  A
1822  5C9E CB 2A            SRA D
1823  5CA0 CB 1F            RR  A
1824  5CA2 C9           	RET
1825  5CA3              ; *******************************************************************************************************
1826  5CA3               ENDIF
1827  5CA3               ENDIF
1828  5CA3
1829  5CA3               IF (TILE_CMDS == 1)
1830  5CA3              ; *******************************************************************************************************
1831  5CA3              ; generic function to implement tiling
1832  5CA3              ; should be modified to call appropriate function for memory or vram
1833  5CA3              ; input IX=pointer to following structure
1834  5CA3              ; +00 tile_data_ptr
1835  5CA3              ; +02 tile_rows
1836  5CA3              ; +04 tile_columns
1837  5CA3              ; +06 destination_address
1838  5CA3              ; +08 dest_to_next_row_add_to_value
1839  5CA3              ; +10 num_horizontal_tiles
1840  5CA3              ; +12 num_vertical_tiles
1841  5CA3              ; modifies AF, BC, DE, HL
1842  5CA3              TILE:
1843  5CA3 DD 6E 06     	LD L, (IX+6)
1844  5CA6 DD 66 07     	LD H, (IX+7) ; destination address
1845  5CA9 22 4F 54     	LD (TILETMP1), HL
1846  5CAC DD 46 0C     	LD B, (IX+12) ; vertical tile number
1847  5CAF              .L1:
1848  5CAF C5           	PUSH BC
1849  5CB0 DD 6E 00     		LD L, (IX+0)
1850  5CB3 DD 66 01     		LD H, (IX+1) ; tile address
1851  5CB6 22 51 54     		LD (TILETMP2), HL
1852  5CB9 DD 46 02     		LD B, (IX+2) ; tile rows
1853  5CBC              .L2:
1854  5CBC C5           		PUSH BC
1855  5CBD              .CALL1:
1856  5CBD CD 00 00     			CALL 0
1857  5CC0 DD 46 0A     			LD B, (IX+10) ; horizontal tile num
1858  5CC3              .L3:
1859  5CC3 C5           			PUSH BC
1860  5CC4 2A 51 54     				LD HL, (TILETMP2)
1861  5CC7 DD 46 04     				LD B, (IX+4) ; tile columns
1862  5CCA              .L4:
1863  5CCA C5           				PUSH BC
1864  5CCB              .CALL2:
1865  5CCB CD 00 00     					CALL 0
1866  5CCE C1           				POP BC
1867  5CCF 10 F9        				DJNZ .L4
1868  5CD1 C1           			POP BC
1869  5CD2 10 EF        			DJNZ .L3
1870  5CD4 22 51 54     			LD (TILETMP2), HL
1871  5CD7 2A 4F 54     			LD HL, (TILETMP1)
1872  5CDA DD 5E 08     			LD E, (IX+8)
1873  5CDD DD 56 09     			LD D, (IX+9) ; add to value for dest next row
1874  5CE0 19           			ADD HL, DE
1875  5CE1 22 4F 54     			LD (TILETMP1), HL
1876  5CE4 C1           		POP BC
1877  5CE5 10 D5        		DJNZ .L2
1878  5CE7 C1           	POP BC
1879  5CE8 10 C5        	DJNZ .L1
1880  5CEA C9           	RET
1881  5CEB              ; *******************************************************************************************************
1882  5CEB
1883  5CEB               IFNDEF CMDS_WITH_PARAMETERS
1884  5CEB ~            ; *******************************************************************************************************
1885  5CEB ~            ; function to handle CALL TILERAM basic extension
1886  5CEB ~            ; fills memory with tiles
1887  5CEB ~            ; TILERAM ( INT request_data_ptr )
1888  5CEB ~            ; request_data_ptr described in TILE
1889  5CEB ~            ; will put ram in page 0 also, page 1 is already there
1890  5CEB ~            TILERAM:
1891  5CEB ~            	; opening (
1892  5CEB ~            	CALL CHKCHAR
1893  5CEB ~            	DB '('
1894  5CEB ~            	; get pointer to request struct
1895  5CEB ~            	LD IX, FRMQNT
1896  5CEB ~            	CALL CALBAS
1897  5CEB ~            	PUSH DE
1898  5CEB ~            	; ending )
1899  5CEB ~            	CALL CHKCHAR
1900  5CEB ~            	DB ')'
1901  5CEB ~
1902  5CEB ~            	POP IX ; pointer to request struct
1903  5CEB ~
1904  5CEB ~            	PUSH HL ; save position in BASIC buffer
1905  5CEB ~
1906  5CEB ~            	LD IY, .RET
1907  5CEB ~            	JP ENABLE_PAGE0
1908  5CEB ~            .RET:
1909  5CEB ~            	EI
1910  5CEB ~            	; set RAM functions to call
1911  5CEB ~            	LD HL, .TILECOPY
1912  5CEB ~            	LD (TILE.CALL2+1), HL
1913  5CEB ~            	LD HL, .SETDESTROW
1914  5CEB ~            	LD (TILE.CALL1+1), HL
1915  5CEB ~            	LD A,1
1916  5CEB ~            	LD (VRAM_UPDATE_IN_PROGRESS),A
1917  5CEB ~            	CALL TILE
1918  5CEB ~            	XOR A
1919  5CEB ~            	LD (VRAM_UPDATE_IN_PROGRESS),A
1920  5CEB ~
1921  5CEB ~                POP DE
1922  5CEB ~                POP BC
1923  5CEB ~                CALL RESTORE_PAGE_INFO
1924  5CEB ~
1925  5CEB ~            	POP HL
1926  5CEB ~            	RET
1927  5CEB ~            .TILECOPY:
1928  5CEB ~            	.8 LDI
1929  5CEB ~            	RET
1930  5CEB ~            .SETDESTROW:
1931  5CEB ~            	LD DE, (TILETMP1)
1932  5CEB ~            	RET
1933  5CEB ~            ; *******************************************************************************************************
1934  5CEB               ENDIF
1935  5CEB
1936  5CEB               IFDEF CMDS_WITH_PARAMETERS
1937  5CEB              ; *******************************************************************************************************
1938  5CEB              ; function to handle CALL TILERAM basic extension
1939  5CEB              ; fills memory with tiles
1940  5CEB              ; TILERAM ( INT tile_data_pointer,
1941  5CEB              ;			INT tile_columns,
1942  5CEB              ;			INT tile_rows,
1943  5CEB              ;			INT destination_pointer,
1944  5CEB              ;			INT destination_columns,
1945  5CEB              ;			INT destination_rows,
1946  5CEB              ;			INT destination_begin_column,
1947  5CEB              ;			INT destination_begin_row,
1948  5CEB              ;			INT number_of_tiles_horizontally,
1949  5CEB              ;			INT	number_of_tiles_vertically )
1950  5CEB              ; will put ram in page 0 also, page 1 is already there
1951  5CEB              TILERAM:
1952  5CEB              	; opening (
1953  5CEB CD FD 56     	CALL CHKCHAR
1954  5CEE 28           	DB '('
1955  5CEF              	; get tile data pointer coordinate
1956  5CEF DD 21 2F 54  	LD IX, FRMQNT
1957  5CF3 CD 59 01     	CALL CALBAS
1958  5CF6 ED 53 53 54  	LD (BLIT_STRUCT+0), DE
1959  5CFA              	; comma
1960  5CFA CD FD 56     	CALL CHKCHAR
1961  5CFD 2C           	DB ','
1962  5CFE              	; get tile columns
1963  5CFE DD 21 2F 54  	LD IX, FRMQNT
1964  5D02 CD 59 01     	CALL CALBAS
1965  5D05 ED 53 57 54  	LD (BLIT_STRUCT+4), DE
1966  5D09              	; comma
1967  5D09 CD FD 56     	CALL CHKCHAR
1968  5D0C 2C           	DB ','
1969  5D0D              	; get tile columns
1970  5D0D DD 21 2F 54  	LD IX, FRMQNT
1971  5D11 CD 59 01     	CALL CALBAS
1972  5D14 ED 53 55 54  	LD (BLIT_STRUCT+2), DE
1973  5D18              	; comma
1974  5D18 CD FD 56     	CALL CHKCHAR
1975  5D1B 2C           	DB ','
1976  5D1C              	; get destintion pointer
1977  5D1C DD 21 2F 54  	LD IX, FRMQNT
1978  5D20 CD 59 01     	CALL CALBAS
1979  5D23 ED 53 59 54  	LD (BLIT_STRUCT+6), DE
1980  5D27              	; comma
1981  5D27 CD FD 56     	CALL CHKCHAR
1982  5D2A 2C           	DB ','
1983  5D2B              	; get destination columns
1984  5D2B DD 21 2F 54  	LD IX, FRMQNT
1985  5D2F CD 59 01     	CALL CALBAS
1986  5D32 7B           	LD A, E
1987  5D33 32 4F 54     	LD (BLIT_TMP+0), A
1988  5D36              	; comma
1989  5D36 CD FD 56     	CALL CHKCHAR
1990  5D39 2C           	DB ','
1991  5D3A              	; get destination rows
1992  5D3A DD 21 2F 54  	LD IX, FRMQNT
1993  5D3E CD 59 01     	CALL CALBAS
1994  5D41 7B           	LD A, E
1995  5D42 32 50 54     	LD (BLIT_TMP+1), A
1996  5D45              	; comma
1997  5D45 CD FD 56     	CALL CHKCHAR
1998  5D48 2C           	DB ','
1999  5D49              	; get destination begin column
2000  5D49 DD 21 2F 54  	LD IX, FRMQNT
2001  5D4D CD 59 01     	CALL CALBAS
2002  5D50 7B           	LD A, E
2003  5D51 32 51 54     	LD (BLIT_TMP+2), A
2004  5D54              	; comma
2005  5D54 CD FD 56     	CALL CHKCHAR
2006  5D57 2C           	DB ','
2007  5D58              	; get destination begin row
2008  5D58 DD 21 2F 54  	LD IX, FRMQNT
2009  5D5C CD 59 01     	CALL CALBAS
2010  5D5F 7B           	LD A, E
2011  5D60 32 52 54     	LD (BLIT_TMP+3), A
2012  5D63              	; comma
2013  5D63 CD FD 56     	CALL CHKCHAR
2014  5D66 2C           	DB ','
2015  5D67              	; get number of tiles horizontally
2016  5D67 DD 21 2F 54  	LD IX, FRMQNT
2017  5D6B CD 59 01     	CALL CALBAS
2018  5D6E ED 53 5D 54  	LD (BLIT_STRUCT+10), DE
2019  5D72              	; comma
2020  5D72 CD FD 56     	CALL CHKCHAR
2021  5D75 2C           	DB ','
2022  5D76              	; get number of tiles vertically
2023  5D76 DD 21 2F 54  	LD IX, FRMQNT
2024  5D7A CD 59 01     	CALL CALBAS
2025  5D7D ED 53 5F 54  	LD (BLIT_STRUCT+12), DE
2026  5D81              	; ending )
2027  5D81 CD FD 56     	CALL CHKCHAR
2028  5D84 29           	DB ')'
2029  5D85
2030  5D85 E5           	PUSH HL ; save position in BASIC buffer
2031  5D86
2032  5D86              	; calculate destination add to value
2033  5D86 26 00        	LD H, 0
2034  5D88 3A 4F 54     	LD A, (BLIT_TMP+0)
2035  5D8B 6F           	LD L, A
2036  5D8C CD EC 55     	CALL HLx8
2037  5D8F 22 5B 54     	LD (BLIT_STRUCT+8), HL
2038  5D92              	; calculate pointer to background location
2039  5D92 21 00 00     	LD HL, 0
2040  5D95 3A 52 54     	LD A,(BLIT_TMP+3)
2041  5D98 B7           	OR A
2042  5D99 28 08        	JR Z, .L1
2043  5D9B 47           	LD B,A
2044  5D9C ED 5B 5B 54  	LD DE,(BLIT_STRUCT+8)
2045  5DA0              .L0:
2046  5DA0 19           	ADD HL, DE
2047  5DA1 10 FD        	DJNZ .L0
2048  5DA3              .L1:
2049  5DA3 EB           	EX DE,HL
2050  5DA4 26 00        	LD H,0
2051  5DA6 3A 51 54     	LD A,(BLIT_TMP+2)
2052  5DA9 6F           	LD L,A
2053  5DAA CD EC 55     	CALL HLx8
2054  5DAD 19           	ADD HL,DE
2055  5DAE ED 5B 59 54  	LD DE,(BLIT_STRUCT+6)
2056  5DB2 19           	ADD HL,DE
2057  5DB3 22 59 54     	LD (BLIT_STRUCT+6),HL
2058  5DB6
2059  5DB6 FD 21 BD 5D  	LD IY, .RET
2060  5DBA C3 B0 56     	JP ENABLE_PAGE0
2061  5DBD              .RET:
2062  5DBD FB           	EI
2063  5DBE              	; set RAM functions to call
2064  5DBE 21 D8 5D     	LD HL, .TILECOPY
2065  5DC1 22 CC 5C     	LD (TILE.CALL2+1), HL
2066  5DC4 21 E9 5D     	LD HL, .SETDESTROW
2067  5DC7 22 BE 5C     	LD (TILE.CALL1+1), HL
2068  5DCA DD 21 53 54  	LD IX,BLIT_STRUCT
2069  5DCE CD A3 5C     	CALL TILE
2070  5DD1
2071  5DD1 D1               POP DE
2072  5DD2 C1               POP BC
2073  5DD3 CD 27 56         CALL RESTORE_PAGE_INFO
2074  5DD6
2075  5DD6 E1           	POP HL
2076  5DD7 C9           	RET
2077  5DD8              .TILECOPY:
2078  5DD8 ED A0       > LDI
2078  5DDA ED A0       > LDI
2078  5DDC ED A0       > LDI
2078  5DDE ED A0       > LDI
2078  5DE0 ED A0       > LDI
2078  5DE2 ED A0       > LDI
2078  5DE4 ED A0       > LDI
2078  5DE6 ED A0       > LDI
2079  5DE8 C9           	RET
2080  5DE9              .SETDESTROW:
2081  5DE9 ED 5B 4F 54  	LD DE, (TILETMP1)
2082  5DED C9           	RET
2083  5DEE              ; *******************************************************************************************************
2084  5DEE               ENDIF
2085  5DEE
2086  5DEE               IFDEF CMDS_WITH_PARAMETERS
2087  5DEE              ; *******************************************************************************************************
2088  5DEE              ; function to handle CALL TILEVRM basic extension
2089  5DEE              ; fills vram with tiles
2090  5DEE              ; TILEVRM ( INT tile_data_pointer,
2091  5DEE              ;			INT tile_columns,
2092  5DEE              ;			INT tile_rows,
2093  5DEE              ;			INT destination_begin_column,
2094  5DEE              ;			INT destination_begin_row,
2095  5DEE              ;			INT number_of_tiles_horizontally,
2096  5DEE              ;			INT	number_of_tiles_vertically )
2097  5DEE              ; will put ram in page 0 also, page 1 is already there
2098  5DEE              ; for destination uses address of SCREEN 2 pattern buffer and 32x24 size
2099  5DEE              TILEVRM:
2100  5DEE              	; opening (
2101  5DEE CD FD 56     	CALL CHKCHAR
2102  5DF1 28           	DB '('
2103  5DF2              	; get tile data pointer coordinate
2104  5DF2 DD 21 2F 54  	LD IX, FRMQNT
2105  5DF6 CD 59 01     	CALL CALBAS
2106  5DF9 ED 53 53 54  	LD (BLIT_STRUCT+0), DE
2107  5DFD              	; comma
2108  5DFD CD FD 56     	CALL CHKCHAR
2109  5E00 2C           	DB ','
2110  5E01              	; get tile columns
2111  5E01 DD 21 2F 54  	LD IX, FRMQNT
2112  5E05 CD 59 01     	CALL CALBAS
2113  5E08 ED 53 57 54  	LD (BLIT_STRUCT+4), DE
2114  5E0C              	; comma
2115  5E0C CD FD 56     	CALL CHKCHAR
2116  5E0F 2C           	DB ','
2117  5E10              	; get tile columns
2118  5E10 DD 21 2F 54  	LD IX, FRMQNT
2119  5E14 CD 59 01     	CALL CALBAS
2120  5E17 ED 53 55 54  	LD (BLIT_STRUCT+2), DE
2121  5E1B              	; comma
2122  5E1B CD FD 56     	CALL CHKCHAR
2123  5E1E 2C           	DB ','
2124  5E1F              	; get destination begin column
2125  5E1F DD 21 2F 54  	LD IX, FRMQNT
2126  5E23 CD 59 01     	CALL CALBAS
2127  5E26 7B           	LD A, E
2128  5E27 32 51 54     	LD (BLIT_TMP+2), A
2129  5E2A              	; comma
2130  5E2A CD FD 56     	CALL CHKCHAR
2131  5E2D 2C           	DB ','
2132  5E2E              	; get destination begin row
2133  5E2E DD 21 2F 54  	LD IX, FRMQNT
2134  5E32 CD 59 01     	CALL CALBAS
2135  5E35 7B           	LD A, E
2136  5E36 32 52 54     	LD (BLIT_TMP+3), A
2137  5E39              	; comma
2138  5E39 CD FD 56     	CALL CHKCHAR
2139  5E3C 2C           	DB ','
2140  5E3D              	; get number of tiles horizontally
2141  5E3D DD 21 2F 54  	LD IX, FRMQNT
2142  5E41 CD 59 01     	CALL CALBAS
2143  5E44 ED 53 5D 54  	LD (BLIT_STRUCT+10), DE
2144  5E48              	; comma
2145  5E48 CD FD 56     	CALL CHKCHAR
2146  5E4B 2C           	DB ','
2147  5E4C              	; get number of tiles vertically
2148  5E4C DD 21 2F 54  	LD IX, FRMQNT
2149  5E50 CD 59 01     	CALL CALBAS
2150  5E53 ED 53 5F 54  	LD (BLIT_STRUCT+12), DE
2151  5E57              	; ending )
2152  5E57 CD FD 56     	CALL CHKCHAR
2153  5E5A 29           	DB ')'
2154  5E5B
2155  5E5B E5           	PUSH HL ; save position in BASIC buffer
2156  5E5C
2157  5E5C              	; calculate destination add to value
2158  5E5C 21 00 01     	LD HL, 256
2159  5E5F 22 5B 54     	LD (BLIT_STRUCT+8), HL
2160  5E62              	; calculate pointer to background location
2161  5E62 3A 52 54     	LD A,(BLIT_TMP+3)
2162  5E65 67           	LD H,A
2163  5E66 2E 00        	LD L,0
2164  5E68 EB           	EX DE,HL
2165  5E69 26 00        	LD H,0
2166  5E6B 3A 51 54     	LD A,(BLIT_TMP+2)
2167  5E6E 6F           	LD L,A
2168  5E6F CD EC 55     	CALL HLx8
2169  5E72 19           	ADD HL,DE
2170  5E73 ED 5B CB F3  	LD DE,(GRPCGP)
2171  5E77 19           	ADD HL,DE
2172  5E78 22 59 54     	LD (BLIT_STRUCT+6),HL
2173  5E7B
2174  5E7B FD 21 82 5E  	LD IY, .RET
2175  5E7F C3 B0 56     	JP ENABLE_PAGE0
2176  5E82              .RET:
2177  5E82 FB           	EI
2178  5E83              	; set RAM functions to call
2179  5E83 21 9D 5E     	LD HL, .TILECOPY
2180  5E86 22 CC 5C     	LD (TILE.CALL2+1), HL
2181  5E89 21 A3 5E     	LD HL, .SETDESTROW
2182  5E8C 22 BE 5C     	LD (TILE.CALL1+1), HL
2183  5E8F DD 21 53 54  	LD IX,BLIT_STRUCT
2184  5E93 CD A3 5C     	CALL TILE
2185  5E96
2186  5E96 D1               POP DE
2187  5E97 C1               POP BC
2188  5E98 CD 27 56         CALL RESTORE_PAGE_INFO
2189  5E9B
2190  5E9B E1           	POP HL
2191  5E9C C9           	RET
2192  5E9D              .TILECOPY:
2193  5E9D 01 98 08     	LD BC, #0898
2194  5EA0 C3 E4 55     	JP BBYTECOPY
2195  5EA3              .SETDESTROW:
2196  5EA3 2A 4F 54     	LD HL, (TILETMP1)
2197  5EA6 F3           	DI
2198  5EA7 CD D9 55     	CALL SETWRT_LOCAL
2199  5EAA FB           	EI
2200  5EAB C9           	RET
2201  5EAC              ; *******************************************************************************************************
2202  5EAC               ENDIF
2203  5EAC
2204  5EAC               IFNDEF CMDS_WITH_PARAMETERS
2205  5EAC ~            ; *******************************************************************************************************
2206  5EAC ~            ; function to handle CALL TILEVRM basic extension
2207  5EAC ~            ; fills vram with tiles
2208  5EAC ~            ; TILEVRM ( INT request_data_ptr )
2209  5EAC ~            ; request_data_ptr described in TILE
2210  5EAC ~            ; will put ram in page 0 also, page 1 is already there
2211  5EAC ~            TILEVRM:
2212  5EAC ~            	; opening (
2213  5EAC ~            	CALL CHKCHAR
2214  5EAC ~            	DB '('
2215  5EAC ~            	; get pointer to request struct
2216  5EAC ~            	LD IX, FRMQNT
2217  5EAC ~            	CALL CALBAS
2218  5EAC ~            	PUSH DE
2219  5EAC ~            	; ending )
2220  5EAC ~            	CALL CHKCHAR
2221  5EAC ~            	DB ')'
2222  5EAC ~
2223  5EAC ~            	POP IX ; pointer to request struct
2224  5EAC ~
2225  5EAC ~            	PUSH HL ; save position in BASIC buffer
2226  5EAC ~
2227  5EAC ~            	LD IY, .RET
2228  5EAC ~            	JP ENABLE_PAGE0
2229  5EAC ~            .RET:
2230  5EAC ~            	EI
2231  5EAC ~            	; set RAM functions to call
2232  5EAC ~            	LD HL, .TILECOPY
2233  5EAC ~            	LD (TILE.CALL2+1), HL
2234  5EAC ~            	LD HL, .SETDESTROW
2235  5EAC ~            	LD (TILE.CALL1+1), HL
2236  5EAC ~            	CALL TILE
2237  5EAC ~
2238  5EAC ~                POP DE
2239  5EAC ~                POP BC
2240  5EAC ~                CALL RESTORE_PAGE_INFO
2241  5EAC ~
2242  5EAC ~            	POP HL
2243  5EAC ~            	RET
2244  5EAC ~            .TILECOPY:
2245  5EAC ~            	LD BC, #0898
2246  5EAC ~            	JP BBYTECOPY
2247  5EAC ~            .SETDESTROW:
2248  5EAC ~            	LD HL, (TILETMP1)
2249  5EAC ~            	DI
2250  5EAC ~            	CALL SETWRT_LOCAL
2251  5EAC ~            	EI
2252  5EAC ~            	RET
2253  5EAC ~            ; *******************************************************************************************************
2254  5EAC               ENDIF
2255  5EAC               ENDIF
2256  5EAC
2257  5EAC               IF (BOX_CMDS == 1)
2258  5EAC              ; *******************************************************************************************************
2259  5EAC              ; generic function to implement rectangle data copy
2260  5EAC              ; should be modified to call appropriate function for memory or vram
2261  5EAC              ; input IX=pointer to following structure
2262  5EAC              ; +00 source data pointer
2263  5EAC              ; +02 num bytes in a row
2264  5EAC              ; +04 number of rows
2265  5EAC              ; +06 source add-to value till next row
2266  5EAC              ; +08 destination address
2267  5EAC              ; +10 destination add-to value till next row
2268  5EAC              ; modifies AF, BC, DE, HL
2269  5EAC              RECTANGLE_COPY:
2270  5EAC DD 6E 00     	LD L, (IX+0)
2271  5EAF DD 66 01     	LD H, (IX+1) ; source address
2272  5EB2 DD 5E 08     	LD E, (IX+8)
2273  5EB5 DD 56 09     	LD D, (IX+9) ; destination
2274  5EB8 DD 46 04     	LD B, (IX+4) ; row number
2275  5EBB              .L1:
2276  5EBB C5           	PUSH BC
2277  5EBC E5           		PUSH HL
2278  5EBD D5           			PUSH DE
2279  5EBE DD 4E 02     				LD C, (IX+2)
2280  5EC1 DD 46 03     				LD B, (IX+3) ; num bytes in a row
2281  5EC4              .CALL1:
2282  5EC4 CD 00 00     				CALL 0 ; set destination address from DE
2283  5EC7              .CALL2:
2284  5EC7 CD 00 00     				CALL 0 ; copy data fn
2285  5ECA E1           			POP HL
2286  5ECB DD 4E 0A     			LD C, (IX+10)
2287  5ECE DD 46 0B     			LD B, (IX+11) ; destination add-to
2288  5ED1 09           			ADD HL, BC
2289  5ED2 EB           			EX DE, HL
2290  5ED3 E1           		POP HL
2291  5ED4 DD 4E 06     		LD C, (IX+6)
2292  5ED7 DD 46 07     		LD B, (IX+7) ; src add-to
2293  5EDA 09           		ADD HL, BC
2294  5EDB C1           	POP BC
2295  5EDC 10 DD        	DJNZ .L1
2296  5EDE C9           	RET
2297  5EDF              ; *******************************************************************************************************
2298  5EDF
2299  5EDF              ; *******************************************************************************************************
2300  5EDF              ; function to handle CALL BOXMEMCPY basic extension
2301  5EDF              ; copies data with window like boundaries to ram
2302  5EDF              ; BOXMEMCPY ( INT request_data_ptr )
2303  5EDF              ; request_data_ptr described in RECTANGLE_COPY
2304  5EDF              ; will put ram in page 0 also, page 1 is already there
2305  5EDF              BOXMEMCPY:
2306  5EDF              	; opening (
2307  5EDF CD FD 56     	CALL CHKCHAR
2308  5EE2 28           	DB '('
2309  5EE3              	; get pointer to request struct
2310  5EE3 DD 21 2F 54  	LD IX, FRMQNT
2311  5EE7 CD 59 01     	CALL CALBAS
2312  5EEA D5           	PUSH DE
2313  5EEB              	; ending )
2314  5EEB CD FD 56     	CALL CHKCHAR
2315  5EEE 29           	DB ')'
2316  5EEF
2317  5EEF DD E1        	POP IX ; pointer to request struct
2318  5EF1
2319  5EF1 E5           	PUSH HL ; save position in BASIC buffer
2320  5EF2
2321  5EF2 FD 21 F9 5E  	LD IY, .RET
2322  5EF6 C3 B0 56     	JP ENABLE_PAGE0
2323  5EF9              .RET:
2324  5EF9 FB           	EI
2325  5EFA              	; set RAM functions to call
2326  5EFA 21 00 00     	LD HL, 0
2327  5EFD 22 C4 5E     	LD (RECTANGLE_COPY.CALL1), HL ; NOP NOP
2328  5F00 22 C6 5E     	LD (RECTANGLE_COPY.CALL1+2), HL ; NOP NOP
2329  5F03 21 ED B0     	LD HL, #B0ED ; LDIR
2330  5F06 22 C8 5E     	LD (RECTANGLE_COPY.CALL1+4), HL
2331  5F09 CD AC 5E     	CALL RECTANGLE_COPY
2332  5F0C
2333  5F0C D1               POP DE
2334  5F0D C1               POP BC
2335  5F0E CD 27 56         CALL RESTORE_PAGE_INFO
2336  5F11
2337  5F11 E1           	POP HL
2338  5F12 C9           	RET
2339  5F13              ; *******************************************************************************************************
2340  5F13
2341  5F13              ; *******************************************************************************************************
2342  5F13              ; function to handle CALL BOXMEMVRM basic extension
2343  5F13              ; copies data with window like boundaries to ram
2344  5F13              ; BOXMEMVRM ( INT request_data_ptr )
2345  5F13              ; request_data_ptr described in RECTANGLE_COPY
2346  5F13              ; will put ram in page 0 also, page 1 is already there
2347  5F13              BOXMEMVRM:
2348  5F13              	; opening (
2349  5F13 CD FD 56     	CALL CHKCHAR
2350  5F16 28           	DB '('
2351  5F17              	; get pointer to request struct
2352  5F17 DD 21 2F 54  	LD IX, FRMQNT
2353  5F1B CD 59 01     	CALL CALBAS
2354  5F1E D5           	PUSH DE
2355  5F1F              	; ending )
2356  5F1F CD FD 56     	CALL CHKCHAR
2357  5F22 29           	DB ')'
2358  5F23
2359  5F23 DD E1        	POP IX ; pointer to request struct
2360  5F25
2361  5F25 E5           	PUSH HL ; save position in BASIC buffer
2362  5F26
2363  5F26 FD 21 2D 5F  	LD IY, .RET
2364  5F2A C3 B0 56     	JP ENABLE_PAGE0
2365  5F2D              .RET:
2366  5F2D FB           	EI
2367  5F2E              	; set RAM functions to call
2368  5F2E 21 55 5F     	LD HL, .SETDEST
2369  5F31 22 C5 5E     	LD (RECTANGLE_COPY.CALL1+1), HL
2370  5F34 21 5D 5F     	LD HL, .COPYDATA
2371  5F37 22 C8 5E     	LD (RECTANGLE_COPY.CALL2+1), HL
2372  5F3A 3E CD        	LD A, #CD ; CALL
2373  5F3C 32 C4 5E     	LD (RECTANGLE_COPY.CALL1), A
2374  5F3F 32 C7 5E     	LD (RECTANGLE_COPY.CALL2), A
2375  5F42 3E 01        	LD A,1
2376  5F44 32 64 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
2377  5F47 CD AC 5E     	CALL RECTANGLE_COPY
2378  5F4A AF           	XOR A
2379  5F4B 32 64 54     	LD (VRAM_UPDATE_IN_PROGRESS),A
2380  5F4E
2381  5F4E D1               POP DE
2382  5F4F C1               POP BC
2383  5F50 CD 27 56         CALL RESTORE_PAGE_INFO
2384  5F53
2385  5F53 E1           	POP HL
2386  5F54 C9           	RET
2387  5F55              .SETDEST:
2388  5F55 EB           	EX DE, HL
2389  5F56 F3           	DI
2390  5F57 CD D9 55     	CALL SETWRT_LOCAL
2391  5F5A FB           	EI
2392  5F5B EB           	EX DE, HL
2393  5F5C C9           	RET
2394  5F5D              .COPYDATA:
2395  5F5D 41           	LD B, C
2396  5F5E 0E 98        	LD C, #98
2397  5F60 C3 E4 55     	JP BBYTECOPY
2398  5F63              ; *******************************************************************************************************
2399  5F63               ENDIF
2400  5F63
2401  5F63              EXT_END:
2402  5F63
# file closed: asm\main.asm
