# file opened: asm\main.asm
   1  0000               ORG 04000h
   2  4000
   3  4000              ; INCLUDE "system_variables.inc"
   4  4000              ; INCLUDE "system_hooks.inc"
   5  4000              ; INCLUDE "bios_calls.inc"
   6  4000
   7  4000              CHPUT   EQU     #A2
   8  4000              CALBAS	EQU		#159
   9  4000              ERRHAND EQU     #406F
  10  4000              FRMEVL  EQU     #4C64
  11  4000              FRESTR	EQU		#67D0
  12  4000              ; FRMQNT = formula quantificator
  13  4000              ; input HL=pointer to current program expression
  14  4000              ; output HL=next address
  15  4000              ; output DE=integer datum
  16  4000              FRMQNT	EQU		#542F
  17  4000              ; GETBYT = get byte parameter
  18  4000              ; input HL=pointer to current program expression
  19  4000              ; output HL=next address
  20  4000              ; output A=E=byte read
  21  4000              GETBYT	EQU		#521C
  22  4000              CHRGTR  EQU     #4666
  23  4000              SYNCHR	EQU		#558C
  24  4000              VALTYP  EQU     #F663
  25  4000              USR     EQU     #F7F8
  26  4000              PROCNM	EQU		#FD89
  27  4000              BIOS_FILVRM  EQU     #56
  28  4000              CLIKSW	EQU		#F3DB
  29  4000              ATRBAS	EQU		#F928
  30  4000
  31  4000              RAMAD0	EQU	0F341h	; Main-RAM Slot (00000h~03FFFh)
  32  4000              RAMAD1	EQU	0F342h	; Main-RAM Slot (04000h~07FFFh)
  33  4000              RAMAD2	EQU	0F343h	; Main-RAM Slot (08000h~0BFFFh)
  34  4000              RAMAD3	EQU	0F344h	; Main-RAM Slot (0C000h~0FFFFh)
  35  4000              EXPTBL	EQU #FCC1
  36  4000              SCRMOD	EQU #FCAF ; current screen mode
  37  4000
  38  4000              ; BASIC error codes
  39  4000              ;01 NEXT without FOR
  40  4000              ;02 Syntax error
  41  4000              ;03 RETURN without GOSUB
  42  4000              ;04 Out of DATA
  43  4000              ;05 Illegal function call
  44  4000              ;06 Overflow
  45  4000              ;07 Out of memory
  46  4000              ;08 Undefined line number
  47  4000              ;09 Subscript out of range
  48  4000              ;10 Redimensioned array
  49  4000              ;11 Division by zero
  50  4000              ;12 Illegal direct
  51  4000              ;13 Type mismatch
  52  4000              ;14 Out of string space
  53  4000              ;15 String too long
  54  4000              ;16 String formula too complex
  55  4000              ;17 Can't CONTINUE
  56  4000              ;18 Undefined user function
  57  4000              ;19 Device I/O error
  58  4000              ;20 Verify error
  59  4000              ;21 No RESUME
  60  4000              ;22 RESUME without error
  61  4000              ;23 Unprintable error
  62  4000              ;24 Missing operand
  63  4000              ;25 Line buffer overflow
  64  4000              ;50 FIELD overflow
  65  4000              ;51 Internal error
  66  4000              ;52 Bad file number
  67  4000              ;53 File not found
  68  4000              ;54 File already open
  69  4000              ;55 Input past end
  70  4000              ;56 Bad file name
  71  4000              ;57 Direct statement in file
  72  4000              ;58 Sequential I/O only
  73  4000              ;59 File not OPEN
  74  4000
  75  4000
  76  4000               ; simulate cartridge with BASIC extension
  77  4000 41 42 00 00   DW 04241H, 0, CALLHAND, 0, 0, 0, 0, 0
  77  4004 27 4F 00 00
  77  4008 00 00 00 00
  77  400C 00 00 00 00
  78  4010
  79  4010              ; this location #400A stores last location used by basic extension
  80  4010              ; free memory after that point
  81  4010 D6 53         DW EXT_END
  82  4012
  83  4012              ; binary included AKG player compiled at #4012
  84  4012               INCBIN "bin/AKG.bin"
  85  4CEE               INCLUDE "symbol/AKG.sym"
# file opened: ./symbol/AKG.sym
   1+ 4CEE              MAIN_PLAYER_START EQU 04012H
   2+ 4CEE              PLY_AKG_START EQU 04012H
   3+ 4CEE              PLY_AKG_INITSOUNDEFFECTSDISARKGENERATEEXTERNALLABEL EQU 0401BH
   4+ 4CEE              PLY_AKG_INITSOUNDEFFECTS EQU 0401BH
   5+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTDISARKGENERATEEXTERNALLABEL EQU 0401FH
   6+ 4CEE              PLY_AKG_PLAYSOUNDEFFECT EQU 0401FH
   7+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_0 EQU 04020H
   8+ 4CEE              PLY_AKG_PTSOUNDEFFECTTABLE EQU 04020H
   9+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNELDISARKGENERATEEXTERNALLABEL EQU 04047H
  10+ 4CEE              PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL EQU 04047H
  11+ 4CEE              PLY_AKG_PLAYSOUNDEFFECTSSTREAM EQU 04055H
  12+ 4CEE              PLY_AKG_PSES_PLAY EQU 0408EH
  13+ 4CEE              PLY_AKG_PSES_READFIRSTBYTE EQU 04097H
  14+ 4CEE              PLY_AKG_PSES_S_ENDORLOOP EQU 040AFH
  15+ 4CEE              PLY_AKG_PSES_S_LOOP EQU 040BAH
  16+ 4CEE              PLY_AKG_PSES_SAVEPOINTERANDEXIT EQU 040C0H
  17+ 4CEE              PLY_AKG_PSES_NOTREACHED EQU 040D3H
  18+ 4CEE              PLY_AKG_PSES_HARDWAREONLY EQU 040D7H
  19+ 4CEE              PLY_AKG_PSES_SOFTWAREORSOFTWAREANDHARDWARE EQU 040DEH
  20+ 4CEE              PLY_AKG_PSES_SOFTWAREANDHARDWARE EQU 040F0H
  21+ 4CEE              PLY_AKG_PSES_SHARED_READRETRIGHARDWAREENVPERIODNOISE EQU 040FAH
  22+ 4CEE              PLY_AKG_PSES_H_AFTERRETRIG EQU 04104H
  23+ 4CEE              PLY_AKG_PSES_READNOISEIFNEEDEDANDOPENORCLOSENOISECHANNEL EQU 04118H
  24+ 4CEE              PLY_AKG_PSES_READNOISEANDOPENNOISECHANNEL_OPENNOISE EQU 0411DH
  25+ 4CEE              PLY_AKG_PSES_READHARDWAREPERIOD EQU 04125H
  26+ 4CEE              PLY_AKG_PSES_READSOFTWAREPERIOD EQU 04130H
  27+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_FILTER4BITS EQU 0413CH
  28+ 4CEE              PLY_AKG_PSES_MANAGEVOLUMEFROMA_HARD EQU 0413EH
  29+ 4CEE              PLY_AKG_PSES_MVFA_NOOVERFLOW EQU 04144H
  30+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTDATA EQU 04148H
  31+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_1 EQU 04148H
  32+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_1 EQU 0414AH
  33+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_2 EQU 0414AH
  34+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTINVERTEDVOLUME EQU 0414AH
  35+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTCURRENTSTEP EQU 0414BH
  36+ 4CEE              PLY_AKG_CHANNEL1_SOUNDEFFECTSPEED EQU 0414CH
  37+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_2 EQU 04150H
  38+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_3 EQU 04150H
  39+ 4CEE              PLY_AKG_CHANNEL2_SOUNDEFFECTDATA EQU 04150H
  40+ 4CEE              PLY_AKG_CHANNEL3_SOUNDEFFECTDATA EQU 04158H
  41+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_3 EQU 04160H
  42+ 4CEE              PLY_AKG_INITDISARKGENERATEEXTERNALLABEL EQU 04160H
  43+ 4CEE              PLY_AKG_INIT EQU 04160H
  44+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_4 EQU 04160H
  45+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_5 EQU 0418EH
  46+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_6 EQU 041A2H
  47+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_7 EQU 041B4H
  48+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_8 EQU 041D3H
  49+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL_LOOP EQU 041E0H
  50+ 4CEE              PLY_AKG_INIT_READWORDSANDFILL EQU 041E6H
  51+ 4CEE              PLY_AKG_INITTABLE0 EQU 041E9H
  52+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_9 EQU 041E9H
  53+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_9 EQU 04203H
  54+ 4CEE              PLY_AKG_INITTABLE0_END EQU 04203H
  55+ 4CEE              PLY_AKG_INITTABLE1 EQU 04203H
  56+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_10 EQU 04203H
  57+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_10 EQU 04207H
  58+ 4CEE              PLY_AKG_INITTABLE1_END EQU 04207H
  59+ 4CEE              PLY_AKG_INITTABLEORA EQU 04207H
  60+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_11 EQU 04207H
  61+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_11 EQU 0421FH
  62+ 4CEE              PLY_AKG_INITTABLEORA_END EQU 0421FH
  63+ 4CEE              PLY_AKG_STOPDISARKGENERATEEXTERNALLABEL EQU 0421FH
  64+ 4CEE              PLY_AKG_STOP EQU 0421FH
  65+ 4CEE              PLY_AKG_PLAYDISARKGENERATEEXTERNALLABEL EQU 04231H
  66+ 4CEE              PLY_AKG_PLAY EQU 04231H
  67+ 4CEE              PLY_AKG_TICKDECREASINGCOUNTER EQU 04239H
  68+ 4CEE              PLY_AKG_PATTERNDECREASINGHEIGHT EQU 0423FH
  69+ 4CEE              PLY_AKG_READLINKER EQU 04244H
  70+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_12 EQU 04244H
  71+ 4CEE              PLY_AKG_READLINKER_PTLINKER EQU 04244H
  72+ 4CEE              PLY_AKG_READLINKER_NOLOOP EQU 0424FH
  73+ 4CEE              PLY_AKG_SETCURRENTLINEBEFOREREADLINE EQU 04288H
  74+ 4CEE              PLY_AKG_READLINE EQU 0428BH
  75+ 4CEE              PLY_AKG_SPEEDTRACK_WAITCOUNTER EQU 0428BH
  76+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_13 EQU 04291H
  77+ 4CEE              PLY_AKG_SPEEDTRACK_PTTRACK EQU 04291H
  78+ 4CEE              PLY_AKG_SPEEDTRACK_NORMALVALUE EQU 0429EH
  79+ 4CEE              PLY_AKG_SPEEDTRACK_STOREPOINTERANDWAITCOUNTER EQU 042A2H
  80+ 4CEE              PLY_AKG_SPEEDTRACK_MUSTWAIT EQU 042A5H
  81+ 4CEE              PLY_AKG_SPEEDTRACK_END EQU 042A8H
  82+ 4CEE              PLY_AKG_EVENTTRACK_WAITCOUNTER EQU 042A8H
  83+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_14 EQU 042AEH
  84+ 4CEE              PLY_AKG_EVENTTRACK_PTTRACK EQU 042AEH
  85+ 4CEE              PLY_AKG_EVENTTRACK_NORMALVALUE EQU 042BBH
  86+ 4CEE              PLY_AKG_EVENTTRACK_STOREPOINTERANDWAITCOUNTER EQU 042BFH
  87+ 4CEE              PLY_AKG_EVENTTRACK_MUSTWAIT EQU 042C2H
  88+ 4CEE              PLY_AKG_EVENTTRACK_END EQU 042C5H
  89+ 4CEE              PLY_AKG_CHANNEL1_WAITCOUNTER EQU 042C5H
  90+ 4CEE              PLY_AKG_CHANNEL1_READTRACK EQU 042D1H
  91+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_15 EQU 042D1H
  92+ 4CEE              PLY_AKG_CHANNEL1_PTTRACK EQU 042D1H
  93+ 4CEE              PLY_AKG_CHANNEL1_SMALLWAIT EQU 042ECH
  94+ 4CEE              PLY_AKG_CHANNEL1_WAIT EQU 042F7H
  95+ 4CEE              PLY_AKG_CHANNEL1_SAMEINSTRUMENT EQU 042FEH
  96+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_16 EQU 042FEH
  97+ 4CEE              PLY_AKG_CHANNEL1_PTBASEINSTRUMENT EQU 042FEH
  98+ 4CEE              PLY_AKG_CHANNEL1_NOTE EQU 04307H
  99+ 4CEE              PLY_AKG_BASENOTEINDEX EQU 04307H
 100+ 4CEE              PLY_AKG_CHANNEL1_AFTERNOTEKNOWN EQU 04309H
 101+ 4CEE              PLY_AKG_CHANNEL1_TRANSPOSITION EQU 04309H
 102+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_17 EQU 04319H
 103+ 4CEE              PLY_AKG_INSTRUMENTSTABLE EQU 04319H
 104+ 4CEE              PLY_AKG_CHANNEL1_AFTERINSTRUMENT EQU 0432BH
 105+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTORIGINALSPEED EQU 0433BH
 106+ 4CEE              PLY_AKG_CHANNEL1_BEFOREEND_STORECELLPOINTER EQU 04363H
 107+ 4CEE              PLY_AKG_CHANNEL1_READCELLEND EQU 04366H
 108+ 4CEE              PLY_AKG_CHANNEL2_WAITCOUNTER EQU 04366H
 109+ 4CEE              PLY_AKG_CHANNEL2_READTRACK EQU 04372H
 110+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_18 EQU 04372H
 111+ 4CEE              PLY_AKG_CHANNEL2_PTTRACK EQU 04372H
 112+ 4CEE              PLY_AKG_CHANNEL2_SMALLWAIT EQU 0438DH
 113+ 4CEE              PLY_AKG_CHANNEL2_WAIT EQU 04398H
 114+ 4CEE              PLY_AKG_CHANNEL2_SAMEINSTRUMENT EQU 0439FH
 115+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_19 EQU 0439FH
 116+ 4CEE              PLY_AKG_CHANNEL2_PTBASEINSTRUMENT EQU 0439FH
 117+ 4CEE              PLY_AKG_CHANNEL2_NOTE EQU 043A8H
 118+ 4CEE              PLY_AKG_CHANNEL2_AFTERNOTEKNOWN EQU 043ADH
 119+ 4CEE              PLY_AKG_CHANNEL2_TRANSPOSITION EQU 043ADH
 120+ 4CEE              PLY_AKG_CHANNEL2_AFTERINSTRUMENT EQU 043CFH
 121+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTORIGINALSPEED EQU 043DFH
 122+ 4CEE              PLY_AKG_CHANNEL2_BEFOREEND_STORECELLPOINTER EQU 04407H
 123+ 4CEE              PLY_AKG_CHANNEL2_READCELLEND EQU 0440AH
 124+ 4CEE              PLY_AKG_CHANNEL3_WAITCOUNTER EQU 0440AH
 125+ 4CEE              PLY_AKG_CHANNEL3_READTRACK EQU 04416H
 126+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_20 EQU 04416H
 127+ 4CEE              PLY_AKG_CHANNEL3_PTTRACK EQU 04416H
 128+ 4CEE              PLY_AKG_CHANNEL3_SMALLWAIT EQU 04431H
 129+ 4CEE              PLY_AKG_CHANNEL3_WAIT EQU 0443CH
 130+ 4CEE              PLY_AKG_CHANNEL3_SAMEINSTRUMENT EQU 04443H
 131+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_21 EQU 04443H
 132+ 4CEE              PLY_AKG_CHANNEL3_PTBASEINSTRUMENT EQU 04443H
 133+ 4CEE              PLY_AKG_CHANNEL3_NOTE EQU 0444CH
 134+ 4CEE              PLY_AKG_CHANNEL3_AFTERNOTEKNOWN EQU 04451H
 135+ 4CEE              PLY_AKG_CHANNEL3_TRANSPOSITION EQU 04451H
 136+ 4CEE              PLY_AKG_CHANNEL3_AFTERINSTRUMENT EQU 04473H
 137+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTORIGINALSPEED EQU 04483H
 138+ 4CEE              PLY_AKG_CHANNEL3_BEFOREEND_STORECELLPOINTER EQU 044ABH
 139+ 4CEE              PLY_AKG_CHANNEL3_READCELLEND EQU 044AEH
 140+ 4CEE              PLY_AKG_CURRENTSPEED EQU 044AEH
 141+ 4CEE              PLY_AKG_SETSPEEDBEFOREPLAYSTREAMS EQU 044B0H
 142+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_22 EQU 044B3H
 143+ 4CEE              PLY_AKG_CHANNEL1_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 044B3H
 144+ 4CEE              PLY_AKG_CHANNEL1_ISVOLUMESLIDE EQU 044B6H
 145+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_23 EQU 044B9H
 146+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDEVALUE EQU 044B9H
 147+ 4CEE              PLY_AKG_CHANNEL1_VOLUMENOTOVERFLOW EQU 044C5H
 148+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESETAGAIN EQU 044CCH
 149+ 4CEE              PLY_AKG_CHANNEL1_VOLUMESLIDE_END EQU 044CFH
 150+ 4CEE              PLY_AKG_CHANNEL1_ISARPEGGIOTABLE EQU 044D5H
 151+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_24 EQU 044D8H
 152+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE EQU 044D8H
 153+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_AFTERLOOPTEST EQU 044E6H
 154+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLECURRENTSTEP EQU 044EBH
 155+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 044F6H
 156+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLE_END EQU 044F9H
 157+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_25 EQU 044F9H
 158+ 4CEE              PLY_AKG_CHANNEL1_ISPITCHTABLE EQU 044FCH
 159+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_26 EQU 044FFH
 160+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE EQU 044FFH
 161+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLECURRENTSTEP EQU 04508H
 162+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_BEFOREEND_SAVESTEP EQU 04512H
 163+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLE_END EQU 04515H
 164+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_27 EQU 04515H
 165+ 4CEE              PLY_AKG_CHANNEL1_PITCH EQU 04515H
 166+ 4CEE              PLY_AKG_CHANNEL1_ISPITCH EQU 04518H
 167+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_28 EQU 0451DH
 168+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACK EQU 0451DH
 169+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKADDORSBC_16BITS EQU 04521H
 170+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALCOUNTER EQU 04523H
 171+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKDECIMALINSTR EQU 04525H
 172+ 4CEE              PLY_AKG_CHANNEL1_PITCHTRACKINTEGERADDORSUB EQU 0452CH
 173+ 4CEE              PLY_AKG_CHANNEL1_PITCHNOCARRY EQU 0452DH
 174+ 4CEE              PLY_AKG_CHANNEL1_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 04530H
 175+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDIRECTION EQU 04530H
 176+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_29 EQU 0454CH
 177+ 4CEE              PLY_AKG_CHANNEL1_GLIDETOREACH EQU 0454CH
 178+ 4CEE              PLY_AKG_CHANNEL1_GLIDEDOWNCHECK EQU 04559H
 179+ 4CEE              PLY_AKG_CHANNEL1_GLIDEOVER EQU 0455DH
 180+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_30 EQU 0456DH
 181+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLESPEED EQU 0456DH
 182+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOBASESPEED EQU 0456EH
 183+ 4CEE              PLY_AKG_CHANNEL1_ARPEGGIOTABLEBASE EQU 0456FH
 184+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_30 EQU 04571H
 185+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_31 EQU 04571H
 186+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLESPEED EQU 04571H
 187+ 4CEE              PLY_AKG_CHANNEL1_PITCHBASESPEED EQU 04572H
 188+ 4CEE              PLY_AKG_CHANNEL1_PITCHTABLEBASE EQU 04573H
 189+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_31 EQU 04575H
 190+ 4CEE              PLY_AKG_CHANNEL1_AFTERARPEGGIOPITCHVARIABLES EQU 04575H
 191+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_BEFOREEND EQU 04575H
 192+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_32 EQU 04575H
 193+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_SAVEHL EQU 04575H
 194+ 4CEE              PLY_AKG_CHANNEL1_GLIDE_END EQU 04578H
 195+ 4CEE              PLY_AKG_CHANNEL1_PITCH_END EQU 0457AH
 196+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_33 EQU 04582H
 197+ 4CEE              PLY_AKG_CHANNEL2_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04582H
 198+ 4CEE              PLY_AKG_CHANNEL2_ISVOLUMESLIDE EQU 04585H
 199+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_34 EQU 04588H
 200+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDEVALUE EQU 04588H
 201+ 4CEE              PLY_AKG_CHANNEL2_VOLUMENOTOVERFLOW EQU 04594H
 202+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESETAGAIN EQU 0459BH
 203+ 4CEE              PLY_AKG_CHANNEL2_VOLUMESLIDE_END EQU 0459EH
 204+ 4CEE              PLY_AKG_CHANNEL2_ISARPEGGIOTABLE EQU 045A4H
 205+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_35 EQU 045A7H
 206+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE EQU 045A7H
 207+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_AFTERLOOPTEST EQU 045B5H
 208+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLECURRENTSTEP EQU 045BAH
 209+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 045C5H
 210+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLE_END EQU 045C8H
 211+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_36 EQU 045C8H
 212+ 4CEE              PLY_AKG_CHANNEL2_ISPITCHTABLE EQU 045CBH
 213+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_37 EQU 045CEH
 214+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE EQU 045CEH
 215+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLECURRENTSTEP EQU 045D7H
 216+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_BEFOREEND_SAVESTEP EQU 045E1H
 217+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLE_END EQU 045E4H
 218+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_38 EQU 045E4H
 219+ 4CEE              PLY_AKG_CHANNEL2_PITCH EQU 045E4H
 220+ 4CEE              PLY_AKG_CHANNEL2_ISPITCH EQU 045E7H
 221+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_39 EQU 045ECH
 222+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACK EQU 045ECH
 223+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKADDORSBC_16BITS EQU 045F0H
 224+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALCOUNTER EQU 045F2H
 225+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKDECIMALINSTR EQU 045F4H
 226+ 4CEE              PLY_AKG_CHANNEL2_PITCHTRACKINTEGERADDORSUB EQU 045FBH
 227+ 4CEE              PLY_AKG_CHANNEL2_PITCHNOCARRY EQU 045FCH
 228+ 4CEE              PLY_AKG_CHANNEL2_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 045FFH
 229+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDIRECTION EQU 045FFH
 230+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_40 EQU 0461BH
 231+ 4CEE              PLY_AKG_CHANNEL2_GLIDETOREACH EQU 0461BH
 232+ 4CEE              PLY_AKG_CHANNEL2_GLIDEDOWNCHECK EQU 04628H
 233+ 4CEE              PLY_AKG_CHANNEL2_GLIDEOVER EQU 0462CH
 234+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_41 EQU 0463CH
 235+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLESPEED EQU 0463CH
 236+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOBASESPEED EQU 0463DH
 237+ 4CEE              PLY_AKG_CHANNEL2_ARPEGGIOTABLEBASE EQU 0463EH
 238+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_41 EQU 04640H
 239+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_42 EQU 04640H
 240+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLESPEED EQU 04640H
 241+ 4CEE              PLY_AKG_CHANNEL2_PITCHBASESPEED EQU 04641H
 242+ 4CEE              PLY_AKG_CHANNEL2_PITCHTABLEBASE EQU 04642H
 243+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_42 EQU 04644H
 244+ 4CEE              PLY_AKG_CHANNEL2_AFTERARPEGGIOPITCHVARIABLES EQU 04644H
 245+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_BEFOREEND EQU 04644H
 246+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_43 EQU 04644H
 247+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_SAVEHL EQU 04644H
 248+ 4CEE              PLY_AKG_CHANNEL2_GLIDE_END EQU 04647H
 249+ 4CEE              PLY_AKG_CHANNEL2_PITCH_END EQU 04649H
 250+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_44 EQU 04651H
 251+ 4CEE              PLY_AKG_CHANNEL3_INVERTEDVOLUMEINTEGERANDDECIMAL EQU 04651H
 252+ 4CEE              PLY_AKG_CHANNEL3_ISVOLUMESLIDE EQU 04654H
 253+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_45 EQU 04657H
 254+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDEVALUE EQU 04657H
 255+ 4CEE              PLY_AKG_CHANNEL3_VOLUMENOTOVERFLOW EQU 04663H
 256+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESETAGAIN EQU 0466AH
 257+ 4CEE              PLY_AKG_CHANNEL3_VOLUMESLIDE_END EQU 0466DH
 258+ 4CEE              PLY_AKG_CHANNEL3_ISARPEGGIOTABLE EQU 04673H
 259+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_46 EQU 04676H
 260+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE EQU 04676H
 261+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_AFTERLOOPTEST EQU 04684H
 262+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLECURRENTSTEP EQU 04689H
 263+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_BEFOREEND_SAVESTEP EQU 04694H
 264+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLE_END EQU 04697H
 265+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_47 EQU 04697H
 266+ 4CEE              PLY_AKG_CHANNEL3_ISPITCHTABLE EQU 0469AH
 267+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_48 EQU 0469DH
 268+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE EQU 0469DH
 269+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLECURRENTSTEP EQU 046A6H
 270+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_BEFOREEND_SAVESTEP EQU 046B0H
 271+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLE_END EQU 046B3H
 272+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_49 EQU 046B3H
 273+ 4CEE              PLY_AKG_CHANNEL3_PITCH EQU 046B3H
 274+ 4CEE              PLY_AKG_CHANNEL3_ISPITCH EQU 046B6H
 275+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_50 EQU 046BBH
 276+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACK EQU 046BBH
 277+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKADDORSBC_16BITS EQU 046BFH
 278+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALCOUNTER EQU 046C1H
 279+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKDECIMALINSTR EQU 046C3H
 280+ 4CEE              PLY_AKG_CHANNEL3_PITCHTRACKINTEGERADDORSUB EQU 046CAH
 281+ 4CEE              PLY_AKG_CHANNEL3_PITCHNOCARRY EQU 046CBH
 282+ 4CEE              PLY_AKG_CHANNEL3_SOUNDSTREAM_RELATIVEMODIFIERADDRESS EQU 046CEH
 283+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDIRECTION EQU 046CEH
 284+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_51 EQU 046EAH
 285+ 4CEE              PLY_AKG_CHANNEL3_GLIDETOREACH EQU 046EAH
 286+ 4CEE              PLY_AKG_CHANNEL3_GLIDEDOWNCHECK EQU 046F7H
 287+ 4CEE              PLY_AKG_CHANNEL3_GLIDEOVER EQU 046FBH
 288+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_52 EQU 0470BH
 289+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLESPEED EQU 0470BH
 290+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOBASESPEED EQU 0470CH
 291+ 4CEE              PLY_AKG_CHANNEL3_ARPEGGIOTABLEBASE EQU 0470DH
 292+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_52 EQU 0470FH
 293+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_53 EQU 0470FH
 294+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLESPEED EQU 0470FH
 295+ 4CEE              PLY_AKG_CHANNEL3_PITCHBASESPEED EQU 04710H
 296+ 4CEE              PLY_AKG_CHANNEL3_PITCHTABLEBASE EQU 04711H
 297+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_53 EQU 04713H
 298+ 4CEE              PLY_AKG_CHANNEL3_AFTERARPEGGIOPITCHVARIABLES EQU 04713H
 299+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_BEFOREEND EQU 04713H
 300+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_54 EQU 04713H
 301+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_SAVEHL EQU 04713H
 302+ 4CEE              PLY_AKG_CHANNEL3_GLIDE_END EQU 04716H
 303+ 4CEE              PLY_AKG_CHANNEL3_PITCH_END EQU 04718H
 304+ 4CEE              PLY_AKG_CHANNEL1_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04724H
 305+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_55 EQU 04724H
 306+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTPITCH EQU 04724H
 307+ 4CEE              PLY_AKG_CHANNEL1_TRACKNOTE EQU 04727H
 308+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTARPNOTE EQU 04729H
 309+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSTEP EQU 0472FH
 310+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_56 EQU 04732H
 311+ 4CEE              PLY_AKG_CHANNEL1_PTINSTRUMENT EQU 04732H
 312+ 4CEE              PLY_AKG_CHANNEL1_GENERATEDCURRENTINVERTEDVOLUME EQU 04735H
 313+ 4CEE              PLY_AKG_CHANNEL1_INSTRUMENTSPEED EQU 0473EH
 314+ 4CEE              PLY_AKG_CHANNEL1_SETINSTRUMENTSTEP EQU 04746H
 315+ 4CEE              PLY_AKG_CHANNEL2_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04753H
 316+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_57 EQU 04753H
 317+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTPITCH EQU 04753H
 318+ 4CEE              PLY_AKG_CHANNEL2_TRACKNOTE EQU 04756H
 319+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTARPNOTE EQU 04758H
 320+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSTEP EQU 0475EH
 321+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_58 EQU 04761H
 322+ 4CEE              PLY_AKG_CHANNEL2_PTINSTRUMENT EQU 04761H
 323+ 4CEE              PLY_AKG_CHANNEL2_GENERATEDCURRENTINVERTEDVOLUME EQU 04764H
 324+ 4CEE              PLY_AKG_CHANNEL2_INSTRUMENTSPEED EQU 0476DH
 325+ 4CEE              PLY_AKG_CHANNEL2_SETINSTRUMENTSTEP EQU 04775H
 326+ 4CEE              PLY_AKG_CHANNEL3_PLAYINSTRUMENT_RELATIVEMODIFIERADDRESS EQU 04783H
 327+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_59 EQU 04783H
 328+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTPITCH EQU 04783H
 329+ 4CEE              PLY_AKG_CHANNEL3_TRACKNOTE EQU 04786H
 330+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTARPNOTE EQU 04788H
 331+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSTEP EQU 0478EH
 332+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_60 EQU 04791H
 333+ 4CEE              PLY_AKG_CHANNEL3_PTINSTRUMENT EQU 04791H
 334+ 4CEE              PLY_AKG_CHANNEL3_GENERATEDCURRENTINVERTEDVOLUME EQU 04794H
 335+ 4CEE              PLY_AKG_CHANNEL3_INSTRUMENTSPEED EQU 0479DH
 336+ 4CEE              PLY_AKG_CHANNEL3_SETINSTRUMENTSTEP EQU 047A5H
 337+ 4CEE              PLY_AKG_SENDPSGREGISTERS EQU 047B4H
 338+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_61 EQU 047BCH
 339+ 4CEE              PLY_AKG_PSGREG01_INSTR EQU 047BCH
 340+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_62 EQU 047CCH
 341+ 4CEE              PLY_AKG_PSGREG23_INSTR EQU 047CCH
 342+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_63 EQU 047DDH
 343+ 4CEE              PLY_AKG_PSGREG45_INSTR EQU 047DDH
 344+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_64 EQU 047EEH
 345+ 4CEE              PLY_AKG_PSGREG6_8_INSTR EQU 047EEH
 346+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_65 EQU 047FFH
 347+ 4CEE              PLY_AKG_PSGREG9_10_INSTR EQU 047FFH
 348+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_66 EQU 04810H
 349+ 4CEE              PLY_AKG_PSGHARDWAREPERIOD_INSTR EQU 04810H
 350+ 4CEE              PLY_AKG_PSGREG13_OLDVALUE EQU 04825H
 351+ 4CEE              PLY_AKG_RETRIG EQU 04827H
 352+ 4CEE              PLY_AKG_PSGREG13_INSTR EQU 04829H
 353+ 4CEE              PLY_AKG_PSGREG13_END EQU 04838H
 354+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_67 EQU 04838H
 355+ 4CEE              PLY_AKG_SAVESP EQU 04838H
 356+ 4CEE              PLY_AKG_CHANNEL1_MAYBEEFFECTS EQU 0483CH
 357+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTS EQU 04844H
 358+ 4CEE              PLY_AKG_CHANNEL1_READEFFECTSEND EQU 04851H
 359+ 4CEE              PLY_AKG_CHANNEL2_MAYBEEFFECTS EQU 04851H
 360+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTS EQU 04859H
 361+ 4CEE              PLY_AKG_CHANNEL2_READEFFECTSEND EQU 04866H
 362+ 4CEE              PLY_AKG_CHANNEL3_MAYBEEFFECTS EQU 04866H
 363+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTS EQU 0486EH
 364+ 4CEE              PLY_AKG_CHANNEL3_READEFFECTSEND EQU 04879H
 365+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS EQU 04879H
 366+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_68 EQU 04888H
 367+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS1 EQU 04888H
 368+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTADDRESSKNOWN EQU 0488FH
 369+ 4CEE              PLY_AKG_CHANNEL_RE_EFFECTRETURN EQU 0489FH
 370+ 4CEE              PLY_AKG_CHANNEL_RE_READNEXTEFFECTINBLOCK EQU 0489FH
 371+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_69 EQU 048A6H
 372+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_ENDJUMP EQU 048A6H
 373+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_RELATIVEADDRESS EQU 048A9H
 374+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_70 EQU 048B2H
 375+ 4CEE              PLY_AKG_CHANNEL_READEFFECTS_EFFECTBLOCKS2 EQU 048B2H
 376+ 4CEE              PLY_AKG_READINSTRUMENTCELL EQU 048B8H
 377+ 4CEE              PLY_AKG_NOSOFTNOHARD EQU 048C5H
 378+ 4CEE              PLY_AKG_NSNH_NONOISE EQU 048DAH
 379+ 4CEE              PLY_AKG_SOFT EQU 048DDH
 380+ 4CEE              PLY_AKG_SOFTONLY_HARDONLY_TESTSIMPLE_COMMON EQU 048E4H
 381+ 4CEE              PLY_AKG_S_NOTSIMPLE EQU 048ECH
 382+ 4CEE              PLY_AKG_S_AFTERSIMPLETEST EQU 048EFH
 383+ 4CEE              PLY_AKG_HARDTOSOFT EQU 048FCH
 384+ 4CEE              PLY_AKG_HS_JUMPRATIO EQU 04907H
 385+ 4CEE              PLY_AKG_SH_NOSOFTWAREPITCHSHIFT EQU 04934H
 386+ 4CEE              PLY_AKG_ENDWITHOUTLOOP EQU 04936H
 387+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_71 EQU 04936H
 388+ 4CEE              PLY_AKG_EMPTYINSTRUMENTDATAPT EQU 04936H
 389+ 4CEE              PLY_AKG_STH_OR_ENDWITHOUTLOOP EQU 0493EH
 390+ 4CEE              PLY_AKG_SH_JUMPRATIO EQU 0494BH
 391+ 4CEE              PLY_AKG_SH_JUMPRATIOEND EQU 0496CH
 392+ 4CEE              PLY_AKG_SH_NOHARDWAREPITCHSHIFT EQU 0497BH
 393+ 4CEE              PLY_AKG_S_OR_H_OR_SAH_OR_ENDWITHLOOP EQU 04981H
 394+ 4CEE              PLY_AKG_H_OR_ENDWITHLOOP EQU 0499BH
 395+ 4CEE              PLY_AKG_H_RETRIGEND EQU 049ADH
 396+ 4CEE              PLY_AKG_H_AFTERRETRIG EQU 049AEH
 397+ 4CEE              PLY_AKG_ENDWITHLOOP EQU 049C0H
 398+ 4CEE              PLY_AKG_S_OR_H_CHECKIFSIMPLEFIRST_CALCULATEPERIOD EQU 049C7H
 399+ 4CEE              PLY_AKG_S_OR_H_NEXTBYTE EQU 049DDH
 400+ 4CEE              PLY_AKG_S_OR_H_AFTERARPEGGIO EQU 049EBH
 401+ 4CEE              PLY_AKG_S_OR_H_AFTERPITCH EQU 049FBH
 402+ 4CEE              PLY_AKG_S_OR_H_FORCEDPERIOD EQU 04A09H
 403+ 4CEE              PLY_AKG_STOH_HTOS_SANDH_COMMON EQU 04A18H
 404+ 4CEE              PLY_AKG_SHOHS_RETRIGEND EQU 04A27H
 405+ 4CEE              PLY_AKG_SHOHS_AFTERRETRIG EQU 04A28H
 406+ 4CEE              PLY_AKG_SHOHS_AFTERNOISE EQU 04A3AH
 407+ 4CEE              PLY_AKG_EFFECTTABLE EQU 04A48H
 408+ 4CEE              PLY_AKG_DISARKPOINTERREGIONSTART_72 EQU 04A48H
 409+ 4CEE              PLY_AKG_DISARKPOINTERREGIONEND_72 EQU 04A6CH
 410+ 4CEE              PLY_AKG_EFFECT_RESETFULLVOLUME EQU 04A6CH
 411+ 4CEE              PLY_AKG_EFFECT_RESET EQU 04A6FH
 412+ 4CEE              PLY_AKG_EFFECT_RESETVOLUME_AFTERREADING EQU 04A71H
 413+ 4CEE              PLY_AKG_EFFECT_VOLUME EQU 04A8CH
 414+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLE EQU 04A98H
 415+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_73 EQU 04A9EH
 416+ 4CEE              PLY_AKG_ARPEGGIOSTABLE EQU 04A9EH
 417+ 4CEE              PLY_AKG_EFFECT_ARPEGGIOTABLESTOP EQU 04AC5H
 418+ 4CEE              PLY_AKG_EFFECT_PITCHTABLE EQU 04ACCH
 419+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_74 EQU 04AD2H
 420+ 4CEE              PLY_AKG_PITCHESTABLE EQU 04AD2H
 421+ 4CEE              PLY_AKG_EFFECT_PITCHTABLESTOP EQU 04AF9H
 422+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDE EQU 04B00H
 423+ 4CEE              PLY_AKG_EFFECT_VOLUMESLIDESTOP EQU 04B11H
 424+ 4CEE              PLY_AKG_EFFECT_PITCHDOWN EQU 04B18H
 425+ 4CEE              PLY_AKG_EFFECT_PITCHUPDOWN_COMMON EQU 04B28H
 426+ 4CEE              PLY_AKG_EFFECT_PITCHUP EQU 04B3DH
 427+ 4CEE              PLY_AKG_EFFECT_PITCHSTOP EQU 04B4FH
 428+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTE EQU 04B56H
 429+ 4CEE              PLY_AKG_DISARKFORCENONREFERENCEDURING3_75 EQU 04B80H
 430+ 4CEE              PLY_AKG_EFFECT_GLIDEWITHNOTESAVEDE EQU 04B80H
 431+ 4CEE              PLY_AKG_EFFECT_GLIDE_READSPEED EQU 04B99H
 432+ 4CEE              PLY_AKG_EFFECT_GLIDESPEED EQU 04B99H
 433+ 4CEE              PLY_AKG_EFFECT_GLIDE_PITCHDOWN EQU 04BABH
 434+ 4CEE              PLY_AKG_EFFECT_LEGATO EQU 04BC1H
 435+ 4CEE              PLY_AKG_EFFECT_FORCEINSTRUMENTSPEED EQU 04BD5H
 436+ 4CEE              PLY_AKG_EFFECT_FORCEARPEGGIOSPEED EQU 04BDDH
 437+ 4CEE              PLY_AKG_EFFECT_FORCEPITCHSPEED EQU 04BE5H
 438+ 4CEE              PLY_AKG_DISARKBYTEREGIONSTART_76 EQU 04BEDH
 439+ 4CEE              PLY_AKG_EVENT EQU 04BEDH
 440+ 4CEE              PLY_AKG_DISARKBYTEREGIONEND_76 EQU 04BEEH
 441+ 4CEE              PLY_AKG_PERIODTABLE EQU 04BEEH
 442+ 4CEE              PLY_AKG_DISARKWORDREGIONSTART_77 EQU 04BEEH
 443+ 4CEE              PLY_AKG_DISARKWORDREGIONEND_77 EQU 04CEEH
 444+ 4CEE              PLY_AKG_PERIODTABLE_END EQU 04CEEH
 445+ 4CEE              PLY_AKG_END EQU 04CEEH
 446+ 4CEE              MAIN_PLAYER_END EQU 04CEEH
 447+ 4CEE              TESTEREND EQU 04CEEH
 448+ 4CEE
# file closed: ./symbol/AKG.sym
  86  4CEE
  87  4CEE              ORIG.HTIMI:
  88  4CEE 00 00 00 00  	DB 0, 0, 0, 0, 0
  88  4CF2 00
  89  4CF3               EXPORT ORIG.HTIMI
  90  4CF3
  91  4CF3              MUSIC_INIT_STATUS:
  92  4CF3 00            DB 0
  93  4CF4              SFX_INIT_STATUS:
  94  4CF4 00            DB 0
  95  4CF5              SOUND_ENABLED:
  96  4CF5 00            DB 0
  97  4CF6
  98  4CF6              SPRATR_INIT_STATUS:
  99  4CF6 00            DB 0
 100  4CF7              SPRATR_UPDATE_FLAG:
 101  4CF7 00 00         DW 0
 102  4CF9              SPRATR_DATA:
 103  4CF9 00 00         DW 0
 104  4CFB
 105  4CFB              ; to temporarily store stack pointer
 106  4CFB              TMPSP:
 107  4CFB 00 00         DW 0
 108  4CFD              ; to support sprite flicker
 109  4CFD              FLICKER:
 110  4CFD 00            DB 0
 111  4CFE
 112  4CFE              ; List of pointers to available instructions (as ASCIIZ) and execute address (as word)
 113  4CFE              ; per starting letter, if no commands with this letter, NULL value
 114  4CFE              CMDS:
 115  4CFE 00 00            DW 0 ; A
 116  4D00 00 00            DW 0 ; B
 117  4D02 00 00            DW 0 ; C
 118  4D04 00 00            DW 0 ; D
 119  4D06 00 00            DW 0 ; E
 120  4D08 59 4D            DW CMDS_F; F
 121  4D0A 6C 4D            DW CMDS_G; G
 122  4D0C 00 00            DW 0 ; H
 123  4D0E 00 00            DW 0 ; I
 124  4D10 00 00            DW 0 ; J
 125  4D12 00 00            DW 0 ; K
 126  4D14 3C 4D            DW CMDS_L ; L
 127  4D16 46 4D            DW CMDS_M ; M
 128  4D18 00 00            DW 0 ; N
 129  4D1A 00 00            DW 0 ; O
 130  4D1C 00 00            DW 0 ; P
 131  4D1E 00 00            DW 0 ; Q
 132  4D20 00 00            DW 0 ; R
 133  4D22 80 4D            DW CMDS_S ; S
 134  4D24 00 00            DW 0 ; T
 135  4D26 32 4D            DW CMDS_U ; U
 136  4D28 76 4D            DW CMDS_V ; V
 137  4D2A 00 00            DW 0 ; W
 138  4D2C 00 00            DW 0 ; X
 139  4D2E 00 00            DW 0 ; Y
 140  4D30 00 00            DW 0 ; Z
 141  4D32
 142  4D32              CMDS_U:
 143  4D32 55 50 52 49  	DEFB	"UPRINT",0      ; Print upper case string
 143  4D36 4E 54 00
 144  4D39 64 4F        	DEFW	UPRINT
 145  4D3B 00               DB 0
 146  4D3C              CMDS_L:
 147  4D3C 4C 50 52 49  	DEFB	"LPRINT",0      ; Print lower case string
 147  4D40 4E 54 00
 148  4D43 81 4F        	DEFW	LPRINT
 149  4D45 00               DB 0
 150  4D46              CMDS_M:
 151  4D46 4D 45 4D 56      DB "MEMVRM", 0
 151  4D4A 52 4D 00
 152  4D4D 76 51            DW MEMVRM
 153  4D4F 4D 45 4D 43  	DB "MEMCPY", 0
 153  4D53 50 59 00
 154  4D56 E8 4F        	DW MEMCPY
 155  4D58 00               DB 0
 156  4D59              CMDS_F:
 157  4D59 46 49 4C 56      DB "FILVRM", 0
 157  4D5D 52 4D 00
 158  4D60 58 50            DW FILVRM
 159  4D62 46 49 4C 52      DB "FILRAM", 0
 159  4D66 41 4D 00
 160  4D69 9F 50            DW FILRAM
 161  4D6B 00               DB 0
 162  4D6C              CMDS_G:
 163  4D6C 47 45 4E 43      DB "GENCAL", 0
 163  4D70 41 4C 00
 164  4D73 1D 51            DW GENCAL
 165  4D75 00           	DB	0
 166  4D76              CMDS_V:
 167  4D76 56 52 4D 4D  	DB "VRMMEM", 0
 167  4D7A 45 4D 00
 168  4D7D F8 51        	DW VRMMEM
 169  4D7F 00           	DB 0
 170  4D80              CMDS_S:
 171  4D80 53 4E 44 53  	DB "SNDSFX", 0
 171  4D84 46 58 00
 172  4D87 37 53        	DW SNDSFX
 173  4D89 53 4E 44 50  	DB "SNDPLYON", 0
 173  4D8D 4C 59 4F 4E
 173  4D91 00
 174  4D92 01 53        	DW SNDPLYON
 175  4D94 53 4E 44 50  	DB "SNDPLYOFF", 0
 175  4D98 4C 59 4F 46
 175  4D9C 46 00
 176  4D9E 14 53        	DW SNDPLYOFF
 177  4DA0 53 4E 44 50  	DB "SNDPLYINI", 0
 177  4DA4 4C 59 49 4E
 177  4DA8 49 00
 178  4DAA B0 52        	DW SNDPLYINIT
 179  4DAC 53 50 52 41  	DB "SPRATRINI", 0
 179  4DB0 54 52 49 4E
 179  4DB4 49 00
 180  4DB6 98 53        	DW SPRATRINI
 181  4DB8 00           	DB 0
 182  4DB9
 183  4DB9              ; ****************************************************************************************************
 184  4DB9              ; function sets VRAM address
 185  4DB9              ; input HL=address
 186  4DB9              ; modifies AF
 187  4DB9              SETWRT_LOCAL:
 188  4DB9 7D           	LD	A, L
 189  4DBA D3 99        	OUT	(099H), A
 190  4DBC 7C           	LD	A, H
 191  4DBD E6 3F        	AND	03FH
 192  4DBF F6 40        	OR	040H
 193  4DC1 D3 99        	OUT	(099H), A
 194  4DC3 C9           	RET
 195  4DC4              ; ****************************************************************************************************
 196  4DC4
 197  4DC4              ; ****************************************************************************************************
 198  4DC4              ; function gets slot and subslot data for specific page
 199  4DC4              ; input A=page (0, 1 or 2)
 200  4DC4              ; output B = 0A8H register value
 201  4DC4              ; output D = 0 is no subslots, 1 if yes
 202  4DC4              ; output C = 0A8H value when page 3 slot equals to requested page slot
 203  4DC4              ; output E = subslot value if present
 204  4DC4              ; modifies AF, BC, DE, HL
 205  4DC4              GET_PAGE_INFO:
 206  4DC4 6F               LD L, A
 207  4DC5 C6 C1            ADD A, low (EXPTBL)
 208  4DC7 32 D1 4D         LD (GET_PAGE_INFO_L1+1), A
 209  4DCA DB A8            IN A, (0A8H)
 210  4DCC 47               LD B, A
 211  4DCD E6 3F            AND 03FH
 212  4DCF 4F               LD C, A
 213  4DD0              GET_PAGE_INFO_L1:
 214  4DD0 3A C1 FC         LD A, (EXPTBL) ; modified by code above
 215  4DD3 E6 80            AND 080H
 216  4DD5 28 1B            JR Z, GET_PAGE_INFO_L2
 217  4DD7                  ; expanded
 218  4DD7 2D               DEC L
 219  4DD8 FA F7 4D         JP M, GET_PAGE_INFO_L3
 220  4DDB 2D               DEC L
 221  4DDC FA F5 4D         JP M, GET_PAGE_INFO_L4
 222  4DDF                  ; page 2
 223  4DDF 07               RLCA
 224  4DE0 07               RLCA
 225  4DE1              GET_PAGE_INFO_L5:
 226  4DE1 E6 C0            AND 0C0H
 227  4DE3 B1               OR C
 228  4DE4 D3 A8            OUT (0A8H), A ; slot 3 = slot of page requested
 229  4DE6 4F               LD C, A
 230  4DE7 3A FF FF         LD A, (0FFFFH)
 231  4DEA 2F               CPL
 232  4DEB 5F               LD E, A
 233  4DEC 16 01            LD D, 1
 234  4DEE 78               LD A, B ; return stack
 235  4DEF D3 A8            OUT (0A8H), A
 236  4DF1 C9               RET
 237  4DF2              GET_PAGE_INFO_L2:
 238  4DF2                  ; not expanded
 239  4DF2 16 00            LD D, 0
 240  4DF4 C9               RET
 241  4DF5              GET_PAGE_INFO_L4:
 242  4DF5                  ; page 1
 243  4DF5 0F               RRCA
 244  4DF6 0F               RRCA
 245  4DF7              GET_PAGE_INFO_L3:
 246  4DF7                  ; page 0
 247  4DF7 0F               RRCA
 248  4DF8 0F               RRCA
 249  4DF9 18 E6            JR GET_PAGE_INFO_L5
 250  4DFB              ; ****************************************************************************************************
 251  4DFB
 252  4DFB              ; ****************************************************************************************************
 253  4DFB              ; function returns original slot and subslot info
 254  4DFB              ; input B = 0A8H register value
 255  4DFB              ; input D = 0 is no subslots, 1 if yes
 256  4DFB              ; input C = 0A8H value when page 3 slot equals to requested page slot
 257  4DFB              ; input E = subslot value if present
 258  4DFB              ; modifies AF
 259  4DFB              RESTORE_PAGE_INFO:
 260  4DFB 7A               LD A, D
 261  4DFC B7               OR A
 262  4DFD 28 07            JR Z, RESTORE_PAGE_INFO_L1
 263  4DFF 79               LD A, C
 264  4E00 D3 A8            OUT (0A8H), A
 265  4E02 7B               LD A, E
 266  4E03 32 FF FF         LD (0FFFFH), A
 267  4E06              RESTORE_PAGE_INFO_L1:
 268  4E06 78               LD A, B
 269  4E07 D3 A8            OUT (0A8H), A
 270  4E09 C9               RET
 271  4E0A              ; ****************************************************************************************************
 272  4E0A
 273  4E0A              ; *******************************************************************************************************
 274  4E0A              ; SELECTS A SLOT IN THE PAGE SPECIFIED BY AN ADDRESS.
 275  4E0A              ; INPUT:  A = SLOT ID: EXXXSSPP
 276  4E0A              ; E = EXPANDED FLAG
 277  4E0A              ; SS = SECONDARY SLOT NUMBER (ONLY IF EXPANDED)
 278  4E0A              ; PP = PRIMARY SLOT NUMBER
 279  4E0A              ;     HL = ADDRESS INSIDE THE PAGE TO CHANGE
 280  4E0A              ; CHANGES: AF, BC, DE
 281  4E0A
 282  4E0A              LOCAL_ENASLT:
 283  4E0A CD 2A 4E         CALL L0353
 284  4E0D FA 17 4E         JP M, L0340
 285  4E10 DB A8            IN A, (0A8H)
 286  4E12 A1               AND C
 287  4E13 B0               OR B
 288  4E14 D3 A8            OUT (0A8H), A
 289  4E16 C9               RET
 290  4E17              L0340:
 291  4E17 E5               PUSH HL
 292  4E18 CD 4F 4E         CALL L0378
 293  4E1B 4F               LD C, A
 294  4E1C 06 00            LD B, 0
 295  4E1E 7D               LD A, L
 296  4E1F A4               AND H
 297  4E20 B2               OR D
 298  4E21 21 C5 FC         LD HL, 0FCC5H
 299  4E24 09               ADD HL, BC
 300  4E25 77               LD (HL), A
 301  4E26 E1               POP HL
 302  4E27 79               LD A, C
 303  4E28 18 E0            JR LOCAL_ENASLT
 304  4E2A              L0353:
 305  4E2A F3               DI
 306  4E2B F5               PUSH AF
 307  4E2C 7C               LD A, H
 308  4E2D 07               RLCA
 309  4E2E 07               RLCA
 310  4E2F E6 03            AND 3
 311  4E31 5F               LD E, A
 312  4E32 3E C0            LD A, 0C0H
 313  4E34              L035D:
 314  4E34 07               RLCA
 315  4E35 07               RLCA
 316  4E36 1D               DEC E
 317  4E37 F2 34 4E         JP P, L035D
 318  4E3A 5F               LD E, A
 319  4E3B 2F               CPL
 320  4E3C 4F               LD C, A
 321  4E3D F1               POP AF
 322  4E3E F5               PUSH AF
 323  4E3F E6 03            AND 3
 324  4E41 3C               INC A
 325  4E42 47               LD B, A
 326  4E43 3E AB            LD A, 0ABH
 327  4E45              L036E:
 328  4E45 C6 55            ADD A, 055H
 329  4E47 10 FC            DJNZ L036E
 330  4E49 57               LD D, A
 331  4E4A A3               AND E
 332  4E4B 47               LD B, A
 333  4E4C F1               POP AF
 334  4E4D A7               AND A
 335  4E4E C9               RET
 336  4E4F              L0378:
 337  4E4F F5               PUSH AF
 338  4E50 7A               LD A, D
 339  4E51 E6 C0            AND 0C0H
 340  4E53 4F               LD C, A
 341  4E54 F1               POP AF
 342  4E55 F5               PUSH AF
 343  4E56 57               LD D, A
 344  4E57 DB A8            IN A, (0A8H)
 345  4E59 47               LD B, A
 346  4E5A E6 3F            AND 03FH
 347  4E5C B1               OR C
 348  4E5D D3 A8            OUT (0A8H), A
 349  4E5F 7A               LD A, D
 350  4E60 0F               RRCA
 351  4E61 0F               RRCA
 352  4E62 E6 03            AND 3
 353  4E64 57               LD D, A
 354  4E65 3E AB            LD A, 0ABH
 355  4E67              L0390:
 356  4E67 C6 55            ADD A, 055H
 357  4E69 15               DEC D
 358  4E6A F2 67 4E         JP P, L0390
 359  4E6D A3               AND E
 360  4E6E 57               LD D, A
 361  4E6F 7B               LD A, E
 362  4E70 2F               CPL
 363  4E71 67               LD H, A
 364  4E72 3A FF FF         LD A, (0FFFFH)
 365  4E75 2F               CPL
 366  4E76 6F               LD L, A
 367  4E77 A4               AND H
 368  4E78 B2               OR D
 369  4E79 32 FF FF         LD (0FFFFH), A
 370  4E7C 78               LD A, B
 371  4E7D D3 A8            OUT (0A8H), A
 372  4E7F F1               POP AF
 373  4E80 E6 03            AND 3
 374  4E82 C9               RET
 375  4E83              ; *******************************************************************************************************
 376  4E83
 377  4E83              ; *******************************************************************************************************
 378  4E83              ; function updates sprite attribute table in VRAM based on buffer of the form with rotating for flicker
 379  4E83              ; struct {
 380  4E83              ; DW y
 381  4E83              ; DW x
 382  4E83              ; DW pattern (0-31)
 383  4E83              ; DW color
 384  4E83              ; } [32]
 385  4E83              ; will hide sprites whose location is outside of visible area
 386  4E83              ; works in screen 1 and 2
 387  4E83              ; triggered by value in (SPRATR_UPDATE_FLAG) != 0 and after being done resets it to 0
 388  4E83              ; modifies AF, AF', BC, DE, HL
 389  4E83              SPRATR_UPDATE:
 390  4E83              	; check if initialized
 391  4E83 3A F6 4C     	LD A, (SPRATR_INIT_STATUS)
 392  4E86 B7           	OR A
 393  4E87 C8           	RET Z
 394  4E88              	; check if update requested
 395  4E88 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 396  4E8B 7E           	LD A, (HL)
 397  4E8C B7           	OR A
 398  4E8D C8           	RET Z
 399  4E8E              	; check screen mode
 400  4E8E 3A AF FC     	LD A, (SCRMOD)
 401  4E91 3D           	DEC A
 402  4E92 28 02        	JR Z, .L0 ; screen 1
 403  4E94 3D           	DEC A
 404  4E95 C0           	RET NZ ; not screen 2
 405  4E96              .L0:
 406  4E96 06 20        	LD B, 32 ; sprite number
 407  4E98 0E 98        	LD C, #98 ; register for vpd data output
 408  4E9A              	; set VDP address
 409  4E9A 2A 28 F9     	LD HL, (ATRBAS)
 410  4E9D 3A FD 4C     	LD A, (FLICKER)
 411  4EA0 5F           	LD E, A
 412  4EA1 08           	EX AF, AF'
 413  4EA2 7B           	LD A, E
 414  4EA3 87           	ADD A, A
 415  4EA4 87           	ADD A, A
 416  4EA5 16 00        	LD D, 0
 417  4EA7 5F           	LD E, A
 418  4EA8 19           	ADD HL, DE
 419  4EA9 CD B9 4D     	CALL SETWRT_LOCAL
 420  4EAC ED 73 FB 4C  	LD (TMPSP), SP
 421  4EB0 ED 7B F9 4C  	LD SP, (SPRATR_DATA)
 422  4EB4
 423  4EB4              .LOOP:
 424  4EB4 E1           	POP HL
 425  4EB5 24           	INC H
 426  4EB6 28 0D        	JR Z, .L1 ; negative number above -256
 427  4EB8 25           	DEC H
 428  4EB9 20 15        	JR NZ, .OUT3 ; sprite verticall can't be visible
 429  4EBB 7D           	LD A, L
 430  4EBC FE C0        	CP 192
 431  4EBE 30 10        	JR NC, .OUT3
 432  4EC0 3D           	DEC A ; due to VDP rule that top of screen is -1
 433  4EC1 57           	LD D, A
 434  4EC2 C3 E0 4E     	JP .X
 435  4EC5              .L1:
 436  4EC5 7D           	LD A, L
 437  4EC6 C6 10        	ADD 16
 438  4EC8 FA D0 4E     	JP M, .OUT3 ; below -16
 439  4ECB 2D           	DEC L ; due to VDP rule that top of screen is -1
 440  4ECC 55           	LD D, L
 441  4ECD C3 E0 4E     	JP .X
 442  4ED0              .OUT3:
 443  4ED0 E1           	POP HL ; skip x value
 444  4ED1              .OUT2:
 445  4ED1 E1           	POP HL ; skip pattern
 446  4ED2 E1           	POP HL ; skip color
 447  4ED3 3E D1        	LD A, #D1
 448  4ED5 D3 98        	OUT (#98), A ; sprite hidden
 449  4ED7 D3 98        	OUT (#98), A ; value unimportant
 450  4ED9 D3 98        	OUT (#98), A ; value unimportant
 451  4EDB D3 98        	OUT (#98), A ; value unimportant
 452  4EDD C3 04 4F     	JP .NEXT
 453  4EE0              .X:
 454  4EE0 E1           	POP HL
 455  4EE1 24           	INC H
 456  4EE2 28 08        	JR Z, .L2
 457  4EE4 25           	DEC H
 458  4EE5 20 EA        	JR NZ, .OUT2
 459  4EE7 1E 00        	LD E, 0 ; EC bit
 460  4EE9 C3 F5 4E     	JP .XY
 461  4EEC              .L2:
 462  4EEC 7D           	LD A, L
 463  4EED C6 20        	ADD 32
 464  4EEF FA D1 4E     	JP M, .OUT2
 465  4EF2 6F           	LD L, A
 466  4EF3 1E 80        	LD E, #80
 467  4EF5              .XY:
 468  4EF5 ED 51        	OUT (C), D
 469  4EF7 ED 69        	OUT (C), L
 470  4EF9 E1           	POP HL ; pattern
 471  4EFA 7D           	LD A, L
 472  4EFB 87           	ADD A, A
 473  4EFC 87           	ADD A, A ; needs to go at 4x
 474  4EFD D3 98        	OUT (#98), A
 475  4EFF E1           	POP HL ; color
 476  4F00 7D           	LD A, L
 477  4F01 B3           	OR E
 478  4F02 D3 98        	OUT (#98), A
 479  4F04              .NEXT:
 480  4F04 08           	EX AF, AF'
 481  4F05 3C           	INC A
 482  4F06 E6 1F        	AND 31
 483  4F08 C2 15 4F     	JP NZ, .NEXT2
 484  4F0B 08           	EX AF, AF'
 485  4F0C 2A 28 F9     	LD HL, (ATRBAS)
 486  4F0F CD B9 4D     	CALL SETWRT_LOCAL
 487  4F12 C3 16 4F     	JP .NEXT3
 488  4F15              .NEXT2:
 489  4F15 08           	EX AF, AF'
 490  4F16              .NEXT3:
 491  4F16 10 9C        	DJNZ .LOOP
 492  4F18 08           	EX AF, AF'
 493  4F19 3C           	INC A
 494  4F1A 32 FD 4C     	LD (FLICKER), A
 495  4F1D
 496  4F1D ED 7B FB 4C  	LD SP, (TMPSP)
 497  4F21 2A F7 4C     	LD HL, (SPRATR_UPDATE_FLAG)
 498  4F24 36 00        	LD (HL), 0 ; zero out update flag
 499  4F26 C9           	RET
 500  4F27              ; *******************************************************************************************************
 501  4F27
 502  4F27              ; General BASIC CALL-instruction handler
 503  4F27              CALLHAND:
 504  4F27 E5           	PUSH HL
 505  4F28 21 FE 4C     	LD	HL, CMDS ; pointer table based on starting letter
 506  4F2B 3A 89 FD         LD A, (PROCNM)
 507  4F2E D6 41            SUB 'A'
 508  4F30 87               ADD A, A
 509  4F31 16 00            LD D, 0
 510  4F33 5F               LD E, A
 511  4F34 19               ADD HL, DE
 512  4F35 5E               LD E, (HL)
 513  4F36 23               INC HL
 514  4F37 56               LD D, (HL)
 515  4F38 7A               LD A, D
 516  4F39 B3               OR E
 517  4F3A 28 24            JR Z, .CMDNOTRECOGNIZED
 518  4F3C EB               EX DE, HL
 519  4F3D              .CHKCMD:
 520  4F3D 11 89 FD     	LD	DE, PROCNM
 521  4F40 1A           .LOOP:	LD	A,(DE)
 522  4F41 BE           	CP	(HL)
 523  4F42 20 11        	JR	NZ,.TONEXTCMD	; Not equal
 524  4F44 13           	INC	DE
 525  4F45 23           	INC	HL
 526  4F46 A7           	AND	A
 527  4F47 20 F7        	JR	NZ,.LOOP	; No end of instruction name, go checking
 528  4F49 5E           	LD	E,(HL)
 529  4F4A 23           	INC	HL
 530  4F4B 56           	LD	D,(HL)
 531  4F4C E1           	POP	HL		; routine address
 532  4F4D CD D3 4F     	CALL	GETPREVCHAR
 533  4F50 CD 62 4F     	CALL	.CALLDE		; Call routine
 534  4F53 A7           	AND	A
 535  4F54 C9           	RET
 536  4F55
 537  4F55              .TONEXTCMD:
 538  4F55 0E FF        	LD	C,0FFH
 539  4F57 AF           	XOR	A
 540  4F58 ED B1        	CPIR			; Skip to end of instruction name
 541  4F5A 23           	INC	HL
 542  4F5B 23           	INC	HL		; Skip address
 543  4F5C BE           	CP	(HL)
 544  4F5D 20 DE        	JR	NZ,.CHKCMD	; Not end of table, go checking
 545  4F5F E1           	POP	HL
 546  4F60              .CMDNOTRECOGNIZED:
 547  4F60 37               SCF
 548  4F61 C9           	RET
 549  4F62
 550  4F62              .CALLDE:
 551  4F62 D5           	PUSH	DE
 552  4F63 C9           	RET
 553  4F64
 554  4F64              ;---------------------------
 555  4F64
 556  4F64              ;---------------------------
 557  4F64              UPRINT:
 558  4F64 CD A8 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 559  4F67 E5           	PUSH	HL
 560  4F68 CD 9E 4F             CALL    GETSTRPNT
 561  4F6B              .LOOP
 562  4F6B 7E                   LD      A,(HL)
 563  4F6C CD 78 4F             CALL    .UCASE
 564  4F6F CD A2 00             CALL    CHPUT  ;Print
 565  4F72 23                   INC     HL
 566  4F73 10 F6                DJNZ    .LOOP
 567  4F75
 568  4F75 E1           	POP	HL
 569  4F76 B7           	OR      A
 570  4F77 C9           	RET
 571  4F78
 572  4F78              .UCASE:
 573  4F78 FE 61                CP      "a"
 574  4F7A D8                   RET     C
 575  4F7B FE 7B                CP      "z"+1
 576  4F7D D0                   RET     NC
 577  4F7E E6 DF                AND     %11011111
 578  4F80 C9                   RET
 579  4F81              ;---------------------------
 580  4F81              LPRINT:
 581  4F81 CD A8 4F     	CALL	EVALTXTPARAM	; Evaluate text parameter
 582  4F84 E5           	PUSH	HL
 583  4F85 CD 9E 4F             CALL    GETSTRPNT
 584  4F88              .LOOP
 585  4F88 7E                   LD      A,(HL)
 586  4F89 CD 95 4F             CALL    .LCASE
 587  4F8C CD A2 00             CALL    CHPUT  ;Print
 588  4F8F 23                   INC     HL
 589  4F90 10 F6                DJNZ    .LOOP
 590  4F92
 591  4F92 E1           	POP	HL
 592  4F93 B7           	OR      A
 593  4F94 C9           	RET
 594  4F95
 595  4F95              .LCASE:
 596  4F95 FE 41                CP      "A"
 597  4F97 D8                   RET     C
 598  4F98 FE 5B                CP      "Z"+1
 599  4F9A D0                   RET     NC
 600  4F9B F6 20                OR      %00100000
 601  4F9D C9                   RET
 602  4F9E              ;---------------------------
 603  4F9E
 604  4F9E              GETSTRPNT:
 605  4F9E              ; OUT:
 606  4F9E              ; HL = String Address
 607  4F9E              ; B  = Lenght
 608  4F9E
 609  4F9E 2A F8 F7             LD      HL,(USR)
 610  4FA1 46                   LD      B,(HL)
 611  4FA2 23                   INC     HL
 612  4FA3 5E                   LD      E,(HL)
 613  4FA4 23                   INC     HL
 614  4FA5 56                   LD      D,(HL)
 615  4FA6 EB                   EX      DE,HL
 616  4FA7 C9                   RET
 617  4FA8
 618  4FA8              EVALTXTPARAM:
 619  4FA8 CD C9 4F     	CALL	CHKCHAR
 620  4FAB 28           	DEFB	"("             ; Check for (
 621  4FAC DD 21 64 4C  	LD	IX,FRMEVL
 622  4FB0 CD 59 01     	CALL	CALBAS		; Evaluate expression
 623  4FB3 3A 63 F6             LD      A,(VALTYP)
 624  4FB6 FE 03                CP      3               ; Text type?
 625  4FB8 C2 DB 4F             JP      NZ,TYPE_MISMATCH
 626  4FBB E5                   PUSH	HL
 627  4FBC DD 21 D0 67          LD	IX,FRESTR         ; Free the temporary string
 628  4FC0 CD 59 01             CALL	CALBAS
 629  4FC3 E1                   POP	HL
 630  4FC4 CD C9 4F     	CALL	CHKCHAR
 631  4FC7 29           	DEFB	")"             ; Check for )
 632  4FC8 C9                   RET
 633  4FC9
 634  4FC9
 635  4FC9              CHKCHAR:
 636  4FC9 CD D3 4F     	CALL	GETPREVCHAR	; Get previous basic char
 637  4FCC E3           	EX	(SP),HL
 638  4FCD BE           	CP	(HL) 	        ; Check if good char
 639  4FCE 20 0F        	JR	NZ,SYNTAX_ERROR	; No, Syntax error
 640  4FD0 23           	INC	HL
 641  4FD1 E3           	EX	(SP),HL
 642  4FD2 23           	INC	HL		; Get next basic char
 643  4FD3
 644  4FD3              GETPREVCHAR:
 645  4FD3 2B           	DEC	HL
 646  4FD4 DD 21 66 46  	LD	IX,CHRGTR
 647  4FD8 C3 59 01     	JP      CALBAS
 648  4FDB
 649  4FDB
 650  4FDB              TYPE_MISMATCH:
 651  4FDB 1E 0D            LD E, 13 ; Type mismatch
 652  4FDD 18 02            JR THROW_ERROR
 653  4FDF
 654  4FDF              SYNTAX_ERROR:
 655  4FDF 1E 02            LD E, 2 ; Syntax error
 656  4FE1              THROW_ERROR:
 657  4FE1 DD 21 6F 40  	LD	IX,ERRHAND	; Call the Basic error handler
 658  4FE5 C3 59 01     	JP	CALBAS
 659  4FE8
 660  4FE8              ;---------------------------
 661  4FE8
 662  4FE8              ; *******************************************************************************************************
 663  4FE8              ; function to handle CALL MEMCPY basic extension
 664  4FE8              ; _MEMCPY ( INT source,
 665  4FE8              ;			INT destination,
 666  4FE8              ;			INT count,
 667  4FE8              ;			BYTE enable_ram, >0 = true
 668  4FE8              ;			BYTE wait_vsync) >0 = treu
 669  4FE8              ; enable_ram will put ram in page 0 also, page 1 is already there
 670  4FE8              ; wait_vsync will issue HALT before copying
 671  4FE8              MEMCPY:
 672  4FE8              	; opening (
 673  4FE8 CD C9 4F     	CALL CHKCHAR
 674  4FEB 28           	DB '('
 675  4FEC              	; get source address
 676  4FEC DD 21 2F 54  	LD IX, FRMQNT
 677  4FF0 CD 59 01     	CALL CALBAS
 678  4FF3 D5           	PUSH DE
 679  4FF4              	; comma
 680  4FF4 CD C9 4F     	CALL CHKCHAR
 681  4FF7 2C           	DB ','
 682  4FF8              	; get destination address
 683  4FF8 DD 21 2F 54  	LD IX, FRMQNT
 684  4FFC CD 59 01     	CALL CALBAS
 685  4FFF D5           	PUSH DE
 686  5000              	; comma
 687  5000 CD C9 4F     	CALL CHKCHAR
 688  5003 2C           	DB ','
 689  5004              	; get length
 690  5004 DD 21 2F 54  	LD IX, FRMQNT
 691  5008 CD 59 01     	CALL CALBAS
 692  500B D5           	PUSH DE
 693  500C              	; comma
 694  500C CD C9 4F     	CALL CHKCHAR
 695  500F 2C           	DB ','
 696  5010              	; get ROM/RAM
 697  5010 DD 21 1C 52  	LD IX, GETBYT
 698  5014 CD 59 01     	CALL CALBAS
 699  5017 F5           	PUSH AF
 700  5018              	; comma
 701  5018 CD C9 4F     	CALL CHKCHAR
 702  501B 2C           	DB ','
 703  501C              	; get vsync wait
 704  501C DD 21 1C 52  	LD IX, GETBYT
 705  5020 CD 59 01     	CALL CALBAS
 706  5023 F5           	PUSH AF
 707  5024              	; ending )
 708  5024 CD C9 4F     	CALL CHKCHAR
 709  5027 29           	DB ')'
 710  5028
 711  5028 FB               EI
 712  5029              	; save position
 713  5029 E5           	PUSH HL
 714  502A DD E1        	POP IX
 715  502C
 716  502C              	; syntax ok
 717  502C              	; wait for vsync if needed
 718  502C F1           	POP AF
 719  502D B7           	OR A
 720  502E 28 01        	JR Z, .L1
 721  5030 76           	HALT
 722  5031
 723  5031              .L1:
 724  5031              	; enable RAM in page 0 if needed
 725  5031 F1           	POP AF
 726  5032 B7           	OR A
 727  5033              	; pop LDIR parameters and store away for later
 728  5033 C1           	POP BC
 729  5034 D1           	POP DE
 730  5035 E1           	POP HL
 731  5036 28 1A        	JR Z, .L2
 732  5038 D9           	EXX
 733  5039 AF               XOR A
 734  503A CD C4 4D         CALL GET_PAGE_INFO
 735  503D C5               PUSH BC
 736  503E D5               PUSH DE
 737  503F 3A 41 F3         LD A, (RAMAD0)
 738  5042 26 00            LD H, 0
 739  5044 F3           	DI
 740  5045 CD 0A 4E         CALL LOCAL_ENASLT
 741  5048 D9           	EXX
 742  5049 ED B0        	LDIR
 743  504B D1               POP DE
 744  504C C1               POP BC
 745  504D CD FB 4D         CALL RESTORE_PAGE_INFO
 746  5050 18 02        	JR .L3
 747  5052
 748  5052              .L2:
 749  5052 ED B0        	LDIR
 750  5054
 751  5054              .L3:
 752  5054 DD E5        	PUSH IX
 753  5056 E1           	POP HL
 754  5057 C9           	RET
 755  5058              ; *******************************************************************************************************
 756  5058
 757  5058              ; *******************************************************************************************************
 758  5058              ; function to handle CALL FILVRM basic extension
 759  5058              ; FILVRM ( INT offset,
 760  5058              ;		   INT count,
 761  5058              ;		   BYTE value,
 762  5058              ;		   BYTE wait_vsync) >0 = true
 763  5058              ; wait_vsync will issue HALT before copying
 764  5058              FILVRM:
 765  5058              	; opening (
 766  5058 CD C9 4F     	CALL CHKCHAR
 767  505B 28           	DB '('
 768  505C              	; get offset address
 769  505C DD 21 2F 54  	LD IX, FRMQNT
 770  5060 CD 59 01     	CALL CALBAS
 771  5063 D5           	PUSH DE
 772  5064              	; comma
 773  5064 CD C9 4F     	CALL CHKCHAR
 774  5067 2C           	DB ','
 775  5068              	; get count
 776  5068 DD 21 2F 54  	LD IX, FRMQNT
 777  506C CD 59 01     	CALL CALBAS
 778  506F D5           	PUSH DE
 779  5070              	; comma
 780  5070 CD C9 4F     	CALL CHKCHAR
 781  5073 2C           	DB ','
 782  5074              	; get value
 783  5074 DD 21 1C 52  	LD IX, GETBYT
 784  5078 CD 59 01     	CALL CALBAS
 785  507B F5           	PUSH AF
 786  507C              	; comma
 787  507C CD C9 4F     	CALL CHKCHAR
 788  507F 2C           	DB ','
 789  5080              	; get vsync wait
 790  5080 DD 21 1C 52  	LD IX, GETBYT
 791  5084 CD 59 01     	CALL CALBAS
 792  5087 F5           	PUSH AF
 793  5088              	; ending )
 794  5088 CD C9 4F     	CALL CHKCHAR
 795  508B 29           	DB ')'
 796  508C
 797  508C FB               EI
 798  508D              	; save position
 799  508D E5           	PUSH HL
 800  508E DD E1        	POP IX
 801  5090
 802  5090              	; syntax ok
 803  5090              	; wait for vsync if needed
 804  5090 F1           	POP AF
 805  5091 B7           	OR A
 806  5092 28 01        	JR Z, .L1
 807  5094 76           	HALT
 808  5095
 809  5095              .L1:
 810  5095 F1               POP AF ; value
 811  5096 C1               POP BC ; count
 812  5097 E1               POP HL ; offset
 813  5098 CD 56 00         CALL BIOS_FILVRM
 814  509B
 815  509B              .L3:
 816  509B DD E5        	PUSH IX
 817  509D E1           	POP HL
 818  509E C9           	RET
 819  509F              ; *******************************************************************************************************
 820  509F
 821  509F              ; *******************************************************************************************************
 822  509F              ; function to handle CALL FILRAM basic extension
 823  509F              ; FILRAM ( INT start address,
 824  509F              ;		   INT count,
 825  509F              ;		   BYTE value,
 826  509F              ;	   	   BYTE enable_ram, >0 = true
 827  509F              ;		   BYTE wait_vsync) >0 = true
 828  509F              ; enable_ram will put ram in page 0 also, page 1 is already there
 829  509F              ; wait_vsync will issue HALT before copying
 830  509F              FILRAM:
 831  509F              	; opening (
 832  509F CD C9 4F     	CALL CHKCHAR
 833  50A2 28           	DB '('
 834  50A3              	; get start address
 835  50A3 DD 21 2F 54  	LD IX, FRMQNT
 836  50A7 CD 59 01     	CALL CALBAS
 837  50AA D5           	PUSH DE
 838  50AB              	; comma
 839  50AB CD C9 4F     	CALL CHKCHAR
 840  50AE 2C           	DB ','
 841  50AF              	; get count
 842  50AF DD 21 2F 54  	LD IX, FRMQNT
 843  50B3 CD 59 01     	CALL CALBAS
 844  50B6 D5           	PUSH DE
 845  50B7              	; comma
 846  50B7 CD C9 4F     	CALL CHKCHAR
 847  50BA 2C           	DB ','
 848  50BB              	; get value
 849  50BB DD 21 1C 52  	LD IX, GETBYT
 850  50BF CD 59 01     	CALL CALBAS
 851  50C2 F5           	PUSH AF
 852  50C3              	; comma
 853  50C3 CD C9 4F     	CALL CHKCHAR
 854  50C6 2C           	DB ','
 855  50C7              	; get ROM/RAM
 856  50C7 DD 21 1C 52  	LD IX, GETBYT
 857  50CB CD 59 01     	CALL CALBAS
 858  50CE F5           	PUSH AF
 859  50CF              	; comma
 860  50CF CD C9 4F     	CALL CHKCHAR
 861  50D2 2C           	DB ','
 862  50D3              	; get vsync wait
 863  50D3 DD 21 1C 52  	LD IX, GETBYT
 864  50D7 CD 59 01     	CALL CALBAS
 865  50DA F5           	PUSH AF
 866  50DB              	; ending )
 867  50DB CD C9 4F     	CALL CHKCHAR
 868  50DE 29           	DB ')'
 869  50DF
 870  50DF FB               EI
 871  50E0              	; save position
 872  50E0 E5           	PUSH HL
 873  50E1 DD E1        	POP IX
 874  50E3
 875  50E3              	; syntax ok
 876  50E3              	; wait for vsync if needed
 877  50E3 F1           	POP AF
 878  50E4 B7           	OR A
 879  50E5 28 01        	JR Z, .L1
 880  50E7 76           	HALT
 881  50E8
 882  50E8              .L1:
 883  50E8              	; enable RAM in page 0 if needed
 884  50E8 F1           	POP AF
 885  50E9 B7           	OR A
 886  50EA              	; pop LDIR parameters and store away for later
 887  50EA D1           	POP DE ; actually AF
 888  50EB C1           	POP BC ; count
 889  50EC E1           	POP HL ; start address
 890  50ED 28 1B        	JR Z, .L2
 891  50EF D9           	EXX
 892  50F0 AF               XOR A
 893  50F1 CD C4 4D         CALL GET_PAGE_INFO
 894  50F4 C5               PUSH BC
 895  50F5 D5               PUSH DE
 896  50F6 3A 41 F3         LD A, (RAMAD0)
 897  50F9 26 00            LD H, 0
 898  50FB F3           	DI
 899  50FC CD 0A 4E         CALL LOCAL_ENASLT
 900  50FF D9           	EXX
 901  5100 CD 11 51     	CALL .FILLVALUE
 902  5103 D1               POP DE
 903  5104 C1               POP BC
 904  5105 CD FB 4D         CALL RESTORE_PAGE_INFO
 905  5108 18 03        	JR .L3
 906  510A
 907  510A              .L2:
 908  510A CD 11 51     	CALL .FILLVALUE
 909  510D
 910  510D              .L3:
 911  510D DD E5        	PUSH IX
 912  510F E1           	POP HL
 913  5110 C9           	RET
 914  5111
 915  5111              .FILLVALUE:
 916  5111 72               LD (HL), D
 917  5112 54               LD D, H
 918  5113 5D               LD E, L
 919  5114 13               INC DE
 920  5115 0B               DEC BC
 921  5116 ED B0            LDIR
 922  5118 C9               RET
 923  5119              ; *******************************************************************************************************
 924  5119
 925  5119              ; *******************************************************************************************************
 926  5119              ; function to handle CALL GENCAL basic extension
 927  5119              ; GENCAL ( INT fn_addr, = address of the function to call
 928  5119              ;		   INT reg_list_ptr, = pointer to array holding register values (AF,BC,DE,HL,IX,IY)
 929  5119              ; output values of reristers will also be stored at reg_list_ptr
 930  5119              GENCAL_VAR_SP:
 931  5119 00 00            DW 0
 932  511B              GENCAL_VAR_SP2:
 933  511B 00 00            DW 0
 934  511D              GENCAL:
 935  511D              	; opening (
 936  511D CD C9 4F     	CALL CHKCHAR
 937  5120 28           	DB '('
 938  5121              	; get function address
 939  5121 DD 21 2F 54  	LD IX, FRMQNT
 940  5125 CD 59 01     	CALL CALBAS
 941  5128 D5           	PUSH DE
 942  5129              	; comma
 943  5129 CD C9 4F     	CALL CHKCHAR
 944  512C 2C           	DB ','
 945  512D              	; get pointer to register list
 946  512D DD 21 2F 54  	LD IX, FRMQNT
 947  5131 CD 59 01     	CALL CALBAS
 948  5134 D5           	PUSH DE
 949  5135              	; ending )
 950  5135 CD C9 4F     	CALL CHKCHAR
 951  5138 29           	DB ')'
 952  5139
 953  5139              	; save BASIC token position
 954  5139 E5           	PUSH HL
 955  513A D9               EXX
 956  513B E1           	POP HL ; HL'=next basic token
 957  513C D9               EXX
 958  513D
 959  513D E1               POP HL ; get pointer to register values
 960  513E ED 73 19 51      LD (GENCAL_VAR_SP), SP
 961  5142 F3               DI
 962  5143 F9               LD SP, HL
 963  5144 F1               POP AF
 964  5145 C1               POP BC
 965  5146 D1               POP DE
 966  5147 E1               POP HL
 967  5148 DD E1            POP IX
 968  514A FD E1            POP IY
 969  514C D9               EXX
 970  514D ED 73 1B 51      LD (GENCAL_VAR_SP2), SP
 971  5151 ED 7B 19 51      LD SP, (GENCAL_VAR_SP)
 972  5155 FB               EI
 973  5156 D1               POP DE ; get function to call
 974  5157 E5               PUSH HL
 975  5158 CD 73 51         CALL .EXXDECALL
 976  515B F3               DI
 977  515C ED 73 19 51      LD (GENCAL_VAR_SP), SP
 978  5160 ED 7B 1B 51      LD SP, (GENCAL_VAR_SP2)
 979  5164 FD E5            PUSH IY
 980  5166 DD E5            PUSH IX
 981  5168 E5               PUSH HL
 982  5169 D5               PUSH DE
 983  516A C5               PUSH BC
 984  516B F5               PUSH AF
 985  516C ED 7B 19 51      LD SP, (GENCAL_VAR_SP)
 986  5170 FB               EI
 987  5171 E1               POP HL
 988  5172 C9           	RET
 989  5173
 990  5173              .EXXDECALL:
 991  5173 D5               PUSH DE
 992  5174 D9               EXX
 993  5175 C9               RET
 994  5176              ; *******************************************************************************************************
 995  5176
 996  5176              ; *******************************************************************************************************
 997  5176              ; function to handle CALL MEMVRM basic extension
 998  5176              ; copies from RAM to VRAM
 999  5176              ; _MEMVRM ( INT source,
1000  5176              ;			INT destination,
1001  5176              ;			INT count,
1002  5176              ;			BYTE enable_ram, >0 = true
1003  5176              ;			BYTE wait_vsync) >0 = treu
1004  5176              ; enable_ram will put ram in page 0 also, page 1 is already there
1005  5176              ; wait_vsync will issue HALT before copying
1006  5176              MEMVRM:
1007  5176              	; opening (
1008  5176 CD C9 4F     	CALL CHKCHAR
1009  5179 28           	DB '('
1010  517A              	; get source address
1011  517A DD 21 2F 54  	LD IX, FRMQNT
1012  517E CD 59 01     	CALL CALBAS
1013  5181 D5           	PUSH DE
1014  5182              	; comma
1015  5182 CD C9 4F     	CALL CHKCHAR
1016  5185 2C           	DB ','
1017  5186              	; get destination address
1018  5186 DD 21 2F 54  	LD IX, FRMQNT
1019  518A CD 59 01     	CALL CALBAS
1020  518D D5           	PUSH DE
1021  518E              	; comma
1022  518E CD C9 4F     	CALL CHKCHAR
1023  5191 2C           	DB ','
1024  5192              	; get length
1025  5192 DD 21 2F 54  	LD IX, FRMQNT
1026  5196 CD 59 01     	CALL CALBAS
1027  5199 D5           	PUSH DE
1028  519A              	; comma
1029  519A CD C9 4F     	CALL CHKCHAR
1030  519D 2C           	DB ','
1031  519E              	; get ROM/RAM
1032  519E DD 21 1C 52  	LD IX, GETBYT
1033  51A2 CD 59 01     	CALL CALBAS
1034  51A5 F5           	PUSH AF
1035  51A6              	; comma
1036  51A6 CD C9 4F     	CALL CHKCHAR
1037  51A9 2C           	DB ','
1038  51AA              	; get vsync wait
1039  51AA DD 21 1C 52  	LD IX, GETBYT
1040  51AE CD 59 01     	CALL CALBAS
1041  51B1 F5           	PUSH AF
1042  51B2              	; ending )
1043  51B2 CD C9 4F     	CALL CHKCHAR
1044  51B5 29           	DB ')'
1045  51B6
1046  51B6                  ; save position in BASIC text
1047  51B6 E5           	PUSH HL
1048  51B7 DD E1        	POP IX
1049  51B9
1050  51B9              	; syntax ok
1051  51B9              	; wait for vsync if needed
1052  51B9 F1           	POP AF
1053  51BA B7           	OR A
1054  51BB 28 03        	JR Z, .L1
1055  51BD FB               EI
1056  51BE 76           	HALT
1057  51BF F3               DI ; since interrupt can modify vram address
1058  51C0
1059  51C0              .L1:
1060  51C0              	; enable RAM in page 0 if needed
1061  51C0 F1           	POP AF
1062  51C1 B7           	OR A
1063  51C2              	; pop LDIR parameters and store away for later
1064  51C2 C1           	POP BC
1065  51C3 D1           	POP DE
1066  51C4 E1           	POP HL
1067  51C5 28 1A        	JR Z, .L2
1068  51C7 D9           	EXX
1069  51C8 AF               XOR A
1070  51C9 CD C4 4D         CALL GET_PAGE_INFO
1071  51CC C5               PUSH BC
1072  51CD D5               PUSH DE
1073  51CE 3A 41 F3         LD A, (RAMAD0)
1074  51D1 26 00            LD H, 0
1075  51D3 CD 0A 4E         CALL LOCAL_ENASLT
1076  51D6 D9           	EXX
1077  51D7 CD E8 51     	CALL .LDIRVM
1078  51DA D1               POP DE
1079  51DB C1               POP BC
1080  51DC CD FB 4D         CALL RESTORE_PAGE_INFO
1081  51DF 18 03        	JR .L3
1082  51E1
1083  51E1              .L2:
1084  51E1 CD E8 51     	CALL .LDIRVM
1085  51E4
1086  51E4              .L3:
1087  51E4 DD E5        	PUSH IX
1088  51E6 E1           	POP HL
1089  51E7 C9           	RET
1090  51E8
1091  51E8              .LDIRVM:
1092  51E8 EB           	EX DE, HL
1093  51E9 CD B9 4D     	CALL SETWRT_LOCAL
1094  51EC EB           	EX DE, HL
1095  51ED
1096  51ED              .L4:
1097  51ED 7E               LD A, (HL)
1098  51EE D3 98            OUT (#98), A
1099  51F0 23               INC HL
1100  51F1 0B               DEC BC
1101  51F2 79               LD A, C
1102  51F3 B0               OR B
1103  51F4 C2 ED 51         JP NZ, .L4
1104  51F7 C9               RET
1105  51F8              ; *******************************************************************************************************
1106  51F8
1107  51F8              ; *******************************************************************************************************
1108  51F8              ; function to handle CALL VRMMEM basic extension
1109  51F8              ; copies from RAM to VRAM
1110  51F8              ; _VRMMEM ( INT source,
1111  51F8              ;			INT destination,
1112  51F8              ;			INT count,
1113  51F8              ;			BYTE enable_ram, >0 = true
1114  51F8              ;			BYTE wait_vsync) >0 = true
1115  51F8              ; enable_ram will put ram in page 0 also, page 1 is already there
1116  51F8              ; wait_vsync will issue HALT before copying
1117  51F8              VRMMEM:
1118  51F8              	; opening (
1119  51F8 CD C9 4F     	CALL CHKCHAR
1120  51FB 28           	DB '('
1121  51FC              	; get source address
1122  51FC DD 21 2F 54  	LD IX, FRMQNT
1123  5200 CD 59 01     	CALL CALBAS
1124  5203 D5           	PUSH DE
1125  5204              	; comma
1126  5204 CD C9 4F     	CALL CHKCHAR
1127  5207 2C           	DB ','
1128  5208              	; get destination address
1129  5208 DD 21 2F 54  	LD IX, FRMQNT
1130  520C CD 59 01     	CALL CALBAS
1131  520F D5           	PUSH DE
1132  5210              	; comma
1133  5210 CD C9 4F     	CALL CHKCHAR
1134  5213 2C           	DB ','
1135  5214              	; get length
1136  5214 DD 21 2F 54  	LD IX, FRMQNT
1137  5218 CD 59 01     	CALL CALBAS
1138  521B D5           	PUSH DE
1139  521C              	; comma
1140  521C CD C9 4F     	CALL CHKCHAR
1141  521F 2C           	DB ','
1142  5220              	; get ROM/RAM
1143  5220 DD 21 1C 52  	LD IX, GETBYT
1144  5224 CD 59 01     	CALL CALBAS
1145  5227 F5           	PUSH AF
1146  5228              	; comma
1147  5228 CD C9 4F     	CALL CHKCHAR
1148  522B 2C           	DB ','
1149  522C              	; get vsync wait
1150  522C DD 21 1C 52  	LD IX, GETBYT
1151  5230 CD 59 01     	CALL CALBAS
1152  5233 F5           	PUSH AF
1153  5234              	; ending )
1154  5234 CD C9 4F     	CALL CHKCHAR
1155  5237 29           	DB ')'
1156  5238
1157  5238                  ; save position in BASIC text
1158  5238 E5           	PUSH HL
1159  5239 DD E1        	POP IX
1160  523B
1161  523B              	; syntax ok
1162  523B              	; wait for vsync if needed
1163  523B F1           	POP AF
1164  523C B7           	OR A
1165  523D 28 03        	JR Z, .L1
1166  523F FB               EI
1167  5240 76           	HALT
1168  5241 F3               DI ; since interrupt can modify vram address
1169  5242
1170  5242              .L1:
1171  5242              	; enable RAM in page 0 if needed
1172  5242 F1           	POP AF
1173  5243 B7           	OR A
1174  5244              	; pop LDIR parameters and store away for later
1175  5244 C1           	POP BC
1176  5245 D1           	POP DE
1177  5246 E1           	POP HL
1178  5247 28 1A        	JR Z, .L2
1179  5249 D9           	EXX
1180  524A AF               XOR A
1181  524B CD C4 4D         CALL GET_PAGE_INFO
1182  524E C5               PUSH BC
1183  524F D5               PUSH DE
1184  5250 3A 41 F3         LD A, (RAMAD0)
1185  5253 26 00            LD H, 0
1186  5255 CD 0A 4E         CALL LOCAL_ENASLT
1187  5258 D9           	EXX
1188  5259 CD 6A 52     	CALL .LDIRMV
1189  525C D1               POP DE
1190  525D C1               POP BC
1191  525E CD FB 4D         CALL RESTORE_PAGE_INFO
1192  5261 18 03        	JR .L3
1193  5263
1194  5263              .L2:
1195  5263 CD 6A 52     	CALL .LDIRMV
1196  5266
1197  5266              .L3:
1198  5266 DD E5        	PUSH IX
1199  5268 E1           	POP HL
1200  5269 C9           	RET
1201  526A
1202  526A              .LDIRMV:
1203  526A CD B9 4D     	CALL SETWRT_LOCAL
1204  526D              .L4:
1205  526D DB 98            IN A, (#98)
1206  526F 12           	LD (DE), A
1207  5270 13               INC DE
1208  5271 0B               DEC BC
1209  5272 79               LD A, C
1210  5273 B0               OR B
1211  5274 C2 6D 52         JP NZ, .L4
1212  5277 C9               RET
1213  5278              ; *******************************************************************************************************
1214  5278
1215  5278              ; *******************************************************************************************************
1216  5278              ; H.TIMI function
1217  5278              MBGE_HTIMI:
1218  5278               EXPORT MBGE_HTIMI
1219  5278 F5           	PUSH AF
1220  5279
1221  5279 CD 83 4E     	CALL SPRATR_UPDATE
1222  527C
1223  527C 3A F5 4C     	LD A, (SOUND_ENABLED)
1224  527F B7           	OR A
1225  5280 28 2A        	JR Z, .EXIT
1226  5282
1227  5282              	; enable page 2
1228  5282 3E 02            LD A, 2
1229  5284 CD C4 4D         CALL GET_PAGE_INFO
1230  5287 C5               PUSH BC
1231  5288 D5               PUSH DE
1232  5289 3A 43 F3         LD A, (RAMAD2)
1233  528C 26 80            LD H, 080H
1234  528E CD 0A 4E         CALL LOCAL_ENASLT
1235  5291              	; enable page 0
1236  5291 AF               XOR A
1237  5292 CD C4 4D         CALL GET_PAGE_INFO
1238  5295 C5               PUSH BC
1239  5296 D5               PUSH DE
1240  5297 3A 41 F3         LD A, (RAMAD0)
1241  529A 26 00            LD H, 0
1242  529C CD 0A 4E         CALL LOCAL_ENASLT
1243  529F
1244  529F CD 31 42     	CALL PLY_AKG_PLAY
1245  52A2
1246  52A2              	; restore page 0
1247  52A2 D1               POP DE
1248  52A3 C1               POP BC
1249  52A4 CD FB 4D         CALL RESTORE_PAGE_INFO
1250  52A7              	; restore page 2
1251  52A7 D1               POP DE
1252  52A8 C1               POP BC
1253  52A9 CD FB 4D         CALL RESTORE_PAGE_INFO
1254  52AC
1255  52AC              .EXIT:
1256  52AC F1           	POP AF
1257  52AD C3 EE 4C     	JP ORIG.HTIMI
1258  52B0              ; *******************************************************************************************************
1259  52B0
1260  52B0              ; *******************************************************************************************************
1261  52B0              ; function to handle CALL SNDPLYINIT basic extension
1262  52B0              ; initializes sound player
1263  52B0              ; _SNDPLYINIT ( INT music_offset,
1264  52B0              ;				INT sfx_offset, can be -1 if no SFX
1265  52B0              ; will put ram in page 0 also, page 1 is already there
1266  52B0              ; sets variables MUSIC_INIT_STATUS and SFX_INIT_STATUS
1267  52B0              SNDPLYINIT:
1268  52B0              	; opening (
1269  52B0 CD C9 4F     	CALL CHKCHAR
1270  52B3 28           	DB '('
1271  52B4              	; get music address
1272  52B4 DD 21 2F 54  	LD IX, FRMQNT
1273  52B8 CD 59 01     	CALL CALBAS
1274  52BB D5           	PUSH DE
1275  52BC              	; comma
1276  52BC CD C9 4F     	CALL CHKCHAR
1277  52BF 2C           	DB ','
1278  52C0              	; get sfx address
1279  52C0 DD 21 2F 54  	LD IX, FRMQNT
1280  52C4 CD 59 01     	CALL CALBAS
1281  52C7 D5           	PUSH DE
1282  52C8              	; ending )
1283  52C8 CD C9 4F     	CALL CHKCHAR
1284  52CB 29           	DB ')'
1285  52CC
1286  52CC                  ; save position in BASIC text
1287  52CC 44           	LD B, H
1288  52CD 4D           	LD C, L
1289  52CE
1290  52CE              	; pop LDIR parameters and store away for later
1291  52CE D1           	POP DE ; sfx address
1292  52CF E1           	POP HL ; music address
1293  52D0 C5           	PUSH BC ; basic text location
1294  52D1 D9           	EXX
1295  52D2 AF               XOR A
1296  52D3 CD C4 4D         CALL GET_PAGE_INFO
1297  52D6 C5               PUSH BC
1298  52D7 D5               PUSH DE
1299  52D8 3A 41 F3         LD A, (RAMAD0)
1300  52DB 26 00            LD H, 0
1301  52DD CD 0A 4E         CALL LOCAL_ENASLT
1302  52E0 D9           	EXX
1303  52E1
1304  52E1 D5           	PUSH DE
1305  52E2 AF           	XOR A
1306  52E3              	; HL = music location
1307  52E3 CD 60 41     	CALL PLY_AKG_INIT
1308  52E6 3E 01        	LD A, 1
1309  52E8 32 F3 4C     	LD (MUSIC_INIT_STATUS), A
1310  52EB
1311  52EB E1           	POP HL
1312  52EC 23           	INC HL
1313  52ED 7D           	LD A, L
1314  52EE B4           	OR H
1315  52EF 28 09        	JR Z,.L1
1316  52F1 2B           	DEC HL
1317  52F2 CD 1B 40     	CALL PLY_AKG_INITSOUNDEFFECTS
1318  52F5 3E 01        	LD A, 1
1319  52F7 32 F4 4C     	LD (SFX_INIT_STATUS), A
1320  52FA              .L1:
1321  52FA D1               POP DE
1322  52FB C1               POP BC
1323  52FC CD FB 4D         CALL RESTORE_PAGE_INFO
1324  52FF
1325  52FF E1           	POP HL
1326  5300 C9           	RET
1327  5301              ; *******************************************************************************************************
1328  5301
1329  5301              ; *******************************************************************************************************
1330  5301              ; function to handle CALL SNDPLYON basic extension
1331  5301              ; enables sound player
1332  5301              ; _SNDPLYON
1333  5301              ; sets SOUND_ENABLED variable to 1 if init call was done
1334  5301              ; if not throws out of data error
1335  5301              SNDPLYON:
1336  5301 3A F3 4C     	LD A, (MUSIC_INIT_STATUS)
1337  5304 B7           	OR A
1338  5305 20 05        	JR NZ, .L1
1339  5307              	; player not initialized, throw error
1340  5307 1E 04        	LD E, 04 ; Out of DATA
1341  5309 C3 E1 4F     	JP THROW_ERROR
1342  530C              .L1:
1343  530C 32 F5 4C     	LD (SOUND_ENABLED), A
1344  530F              	; disable key click
1345  530F AF           	XOR A
1346  5310 32 DB F3     	LD (CLIKSW), A
1347  5313 C9           	RET
1348  5314              ; *******************************************************************************************************
1349  5314
1350  5314              ; *******************************************************************************************************
1351  5314              ; function to handle CALL SNDPLYOFF basic extension
1352  5314              ; disables sound player
1353  5314              ; _SNDPLYOFF
1354  5314              ; sets SOUND_ENABLED variable to 0
1355  5314              ; calls AKG to stop music and SFX on all channels if initialized
1356  5314              SNDPLYOFF:
1357  5314 3A F5 4C     	LD A, (SOUND_ENABLED)
1358  5317 B7           	OR A
1359  5318 C8           	RET Z ; already stopped
1360  5319 AF           	XOR A
1361  531A 32 F5 4C     	LD (SOUND_ENABLED), A
1362  531D E5           	PUSH HL
1363  531E CD 1F 42     	CALL PLY_AKG_STOP
1364  5321 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1365  5324 B7           	OR A
1366  5325 28 0E        	JR Z, .EXIT ; SFX not in use
1367  5327 AF           	XOR A
1368  5328 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1369  532B 3E 01        	LD A, 1
1370  532D CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1371  5330 3E 02        	LD A, 2
1372  5332 CD 47 40     	CALL PLY_AKG_STOPSOUNDEFFECTFROMCHANNEL
1373  5335              .EXIT:
1374  5335 E1           	POP HL
1375  5336 C9           	RET
1376  5337              ; *******************************************************************************************************
1377  5337
1378  5337              ; *******************************************************************************************************
1379  5337              ; function to handle CALL SNDSFX basic extension
1380  5337              ; plays a sound effect
1381  5337              ; _SNDSFX ( BYTE sfx_number, >0
1382  5337              ;			BYTE channel, = 0,1 or 2
1383  5337              ;			BYTE inverted_volume = 0-16, 0 being full volume
1384  5337              ; will put ram in page 0 also, page 1 is already there
1385  5337              ; if sound off throws illegal function call
1386  5337              ; if sfx not initialized, throws out of data
1387  5337              SNDSFX:
1388  5337              	; opening (
1389  5337 CD C9 4F     	CALL CHKCHAR
1390  533A 28           	DB '('
1391  533B              	; get sfx_number
1392  533B DD 21 1C 52  	LD IX, GETBYT
1393  533F CD 59 01     	CALL CALBAS
1394  5342 D5           	PUSH DE
1395  5343              	; comma
1396  5343 CD C9 4F     	CALL CHKCHAR
1397  5346 2C           	DB ','
1398  5347              	; get sfx address
1399  5347 DD 21 1C 52  	LD IX, GETBYT
1400  534B CD 59 01     	CALL CALBAS
1401  534E D5           	PUSH DE
1402  534F              	; comma
1403  534F CD C9 4F     	CALL CHKCHAR
1404  5352 2C           	DB ','
1405  5353              	; get inverted volume
1406  5353 DD 21 1C 52  	LD IX, GETBYT
1407  5357 CD 59 01     	CALL CALBAS
1408  535A D5           	PUSH DE
1409  535B              	; ending )
1410  535B CD C9 4F     	CALL CHKCHAR
1411  535E 29           	DB ')'
1412  535F
1413  535F 3A F5 4C     	LD A, (SOUND_ENABLED)
1414  5362 B7           	OR A
1415  5363 20 05        	JR NZ, .L1
1416  5365              	; sound disabled, throw illegal function call
1417  5365 1E 05        	LD E, 5
1418  5367 C3 E1 4F     	JP THROW_ERROR
1419  536A              .L1:
1420  536A 3A F4 4C     	LD A, (SFX_INIT_STATUS)
1421  536D B7           	OR A
1422  536E 20 05        	JR NZ, .L2
1423  5370              	; sfx data not initialized, throw out of data
1424  5370 1E 04        	LD E, 4
1425  5372 C3 E1 4F     	JP THROW_ERROR
1426  5375              .L2:
1427  5375              	; pop  parameters and store away for later
1428  5375 D1           	POP DE ; inverted volume
1429  5376 43           	LD B, E
1430  5377 D1           	POP DE ; channel
1431  5378 4B           	LD C, E
1432  5379 D1           	POP DE
1433  537A 7B           	LD A, E
1434  537B 08           	EX AF, AF'
1435  537C E5           	PUSH HL ; basic text location
1436  537D D9           	EXX
1437  537E AF               XOR A
1438  537F CD C4 4D         CALL GET_PAGE_INFO
1439  5382 C5               PUSH BC
1440  5383 D5               PUSH DE
1441  5384 3A 41 F3         LD A, (RAMAD0)
1442  5387 26 00            LD H, 0
1443  5389 CD 0A 4E         CALL LOCAL_ENASLT
1444  538C D9           	EXX
1445  538D 08           	EX AF, AF'
1446  538E CD 1F 40     	CALL PLY_AKG_PLAYSOUNDEFFECT
1447  5391
1448  5391 D1               POP DE
1449  5392 C1               POP BC
1450  5393 CD FB 4D         CALL RESTORE_PAGE_INFO
1451  5396
1452  5396 E1           	POP HL
1453  5397 C9           	RET
1454  5398              ; *******************************************************************************************************
1455  5398
1456  5398              ; *******************************************************************************************************
1457  5398              ; function to handle CALL SPRATRINI basic extension
1458  5398              ; initializes sprites handler
1459  5398              ; _SPRATRINI ( INT sprites_attributes_data,
1460  5398              ;			   INT update_variable_location )
1461  5398              ; expects both locations to be in range #8000+ or throws an error
1462  5398              ; since these should be BASIC variables
1463  5398              ; sets variables SPRATR_INIT_STATUS, SPRATR_UPDATE_FLAG, SPRATR_DATA
1464  5398              SPRATRINI:
1465  5398              	; opening (
1466  5398 CD C9 4F     	CALL CHKCHAR
1467  539B 28           	DB '('
1468  539C              	; get address of sprite attribute table DIM SA%(31,4)
1469  539C DD 21 2F 54  	LD IX, FRMQNT
1470  53A0 CD 59 01     	CALL CALBAS
1471  53A3 D5           	PUSH DE
1472  53A4              	; comma
1473  53A4 CD C9 4F     	CALL CHKCHAR
1474  53A7 2C           	DB ','
1475  53A8              	; get update variable location SU%
1476  53A8 DD 21 2F 54  	LD IX, FRMQNT
1477  53AC CD 59 01     	CALL CALBAS
1478  53AF D5           	PUSH DE
1479  53B0              	; ending )
1480  53B0 CD C9 4F     	CALL CHKCHAR
1481  53B3 29           	DB ')'
1482  53B4
1483  53B4 D1           	POP DE ; update variable location
1484  53B5 CB 7A        	BIT 7, D ; is address >= &h8000
1485  53B7 20 05        	JR NZ, .L1
1486  53B9 1E 05        	LD E, 5 ; illegal function call
1487  53BB C3 E1 4F     	JP THROW_ERROR
1488  53BE              .L1:
1489  53BE ED 53 F7 4C  	LD (SPRATR_UPDATE_FLAG), DE
1490  53C2 D1           	POP DE ; address of sprite attribute table
1491  53C3 CB 7A        	BIT 7, D ; is address >= &h8000
1492  53C5 20 05        	JR NZ, .L2
1493  53C7 1E 05        	LD E, 5 ; illegal function call
1494  53C9 C3 E1 4F     	JP THROW_ERROR
1495  53CC              .L2:
1496  53CC ED 53 F9 4C  	LD (SPRATR_DATA), DE
1497  53D0 3E 01        	LD A, 1
1498  53D2 32 F6 4C     	LD (SPRATR_INIT_STATUS), A
1499  53D5 C9           	RET
1500  53D6              ; *******************************************************************************************************
1501  53D6
1502  53D6              EXT_END:
1503  53D6
# file closed: asm\main.asm
